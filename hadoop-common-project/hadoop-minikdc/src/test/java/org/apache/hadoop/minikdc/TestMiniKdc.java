begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.minikdc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|keytab
operator|.
name|Keytab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|type
operator|.
name|base
operator|.
name|PrincipalName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|TestMiniKdc
specifier|public
class|class
name|TestMiniKdc
extends|extends
name|KerberosSecurityTestcase
block|{
DECL|field|IBM_JAVA
specifier|private
specifier|static
specifier|final
name|boolean
name|IBM_JAVA
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testMiniKdcStart ()
specifier|public
name|void
name|testMiniKdcStart
parameter_list|()
block|{
name|MiniKdc
name|kdc
init|=
name|getKdc
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|kdc
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeytabGen ()
specifier|public
name|void
name|testKeytabGen
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniKdc
name|kdc
init|=
name|getKdc
argument_list|()
decl_stmt|;
name|File
name|workDir
init|=
name|getWorkDir
argument_list|()
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"keytab"
argument_list|)
argument_list|,
literal|"foo/bar"
argument_list|,
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrincipalName
argument_list|>
name|principalNameList
init|=
name|Keytab
operator|.
name|loadKeytab
argument_list|(
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"keytab"
argument_list|)
argument_list|)
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalName
name|principalName
range|:
name|principalNameList
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|principalName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo/bar@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
argument_list|,
literal|"bar/foo@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|principals
argument_list|)
expr_stmt|;
block|}
DECL|class|KerberosConfiguration
specifier|private
specifier|static
class|class
name|KerberosConfiguration
extends|extends
name|Configuration
block|{
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|field|keytab
specifier|private
name|String
name|keytab
decl_stmt|;
DECL|field|isInitiator
specifier|private
name|boolean
name|isInitiator
decl_stmt|;
DECL|method|KerberosConfiguration (String principal, File keytab, boolean client)
specifier|private
name|KerberosConfiguration
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|,
name|boolean
name|client
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytab
operator|=
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|this
operator|.
name|isInitiator
operator|=
name|client
expr_stmt|;
block|}
DECL|method|createClientConfig (String principal, File keytab)
specifier|public
specifier|static
name|Configuration
name|createClientConfig
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
return|return
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|createServerConfig (String principal, File keytab)
specifier|public
specifier|static
name|Configuration
name|createServerConfig
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
return|return
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getKrb5LoginModuleName ()
specifier|private
specifier|static
name|String
name|getKrb5LoginModuleName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|?
literal|"com.ibm.security.auth.module.Krb5LoginModule"
else|:
literal|"com.sun.security.auth.module.Krb5LoginModule"
return|;
block|}
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|IBM_JAVA
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"useKeytab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"credsType"
argument_list|,
literal|"both"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useTicketCache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isInitiator
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|ticketCache
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KRB5CCNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticketCache
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"ticketCache"
argument_list|,
name|ticketCache
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|}
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKerberosLogin ()
specifier|public
name|void
name|testKerberosLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniKdc
name|kdc
init|=
name|getKdc
argument_list|()
decl_stmt|;
name|File
name|workDir
init|=
name|getWorkDir
argument_list|()
decl_stmt|;
name|LoginContext
name|loginContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|principal
init|=
literal|"foo"
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"foo.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
comment|//client login
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|loginContext
operator|=
operator|new
name|LoginContext
argument_list|(
literal|""
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|KerberosConfiguration
operator|.
name|createClientConfig
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
name|subject
operator|=
name|loginContext
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosPrincipal
operator|.
name|class
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|principal
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
comment|//server login
name|subject
operator|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|loginContext
operator|=
operator|new
name|LoginContext
argument_list|(
literal|""
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|KerberosConfiguration
operator|.
name|createServerConfig
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
name|subject
operator|=
name|loginContext
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosPrincipal
operator|.
name|class
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|principal
operator|+
literal|"@"
operator|+
name|kdc
operator|.
name|getRealm
argument_list|()
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|loginContext
operator|!=
literal|null
operator|&&
name|loginContext
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|loginContext
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

