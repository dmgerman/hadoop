begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.minikdc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * KerberosSecurityTestcase provides a base class for using MiniKdc with other  * testcases. KerberosSecurityTestcase starts the MiniKdc (@Before) before  * running tests, and stop the MiniKdc (@After) after the testcases, using  * default settings (working dir and kdc configurations).  *<p>  * Users can directly inherit this class and implement their own test functions  * using the default settings, or override functions getTestDir() and  * createMiniKdcConf() to provide new settings.  *  */
end_comment

begin_class
DECL|class|KerberosSecurityTestcase
specifier|public
class|class
name|KerberosSecurityTestcase
block|{
DECL|field|kdc
specifier|private
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|workDir
specifier|private
name|File
name|workDir
decl_stmt|;
DECL|field|conf
specifier|private
name|Properties
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|startMiniKdc ()
specifier|public
name|void
name|startMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestDir
argument_list|()
expr_stmt|;
name|createMiniKdcConf
argument_list|()
expr_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|conf
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a working directory, it should be the build directory. Under    * this directory an ApacheDS working directory will be created, this    * directory will be deleted when the MiniKdc stops.    */
DECL|method|createTestDir ()
specifier|public
name|void
name|createTestDir
parameter_list|()
block|{
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.dir"
argument_list|,
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a Kdc configuration    */
DECL|method|createMiniKdcConf ()
specifier|public
name|void
name|createMiniKdcConf
parameter_list|()
block|{
name|conf
operator|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopMiniKdc ()
specifier|public
name|void
name|stopMiniKdc
parameter_list|()
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getKdc ()
specifier|public
name|MiniKdc
name|getKdc
parameter_list|()
block|{
return|return
name|kdc
return|;
block|}
DECL|method|getWorkDir ()
specifier|public
name|File
name|getWorkDir
parameter_list|()
block|{
return|return
name|workDir
return|;
block|}
DECL|method|getConf ()
specifier|public
name|Properties
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

