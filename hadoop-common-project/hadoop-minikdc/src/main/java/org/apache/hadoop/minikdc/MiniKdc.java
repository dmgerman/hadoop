begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.minikdc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|text
operator|.
name|StrSubstitutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|schema
operator|.
name|SchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schemaextractor
operator|.
name|SchemaLdifExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schemaextractor
operator|.
name|impl
operator|.
name|DefaultSchemaLdifExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schemaloader
operator|.
name|LdifSchemaLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|schemamanager
operator|.
name|impl
operator|.
name|DefaultSchemaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|constants
operator|.
name|ServerDNConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|DefaultDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|CacheService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|InstanceLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|api
operator|.
name|schema
operator|.
name|SchemaPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|kerberos
operator|.
name|KeyDerivationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|impl
operator|.
name|btree
operator|.
name|jdbm
operator|.
name|JdbmIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|impl
operator|.
name|btree
operator|.
name|jdbm
operator|.
name|JdbmPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|partition
operator|.
name|ldif
operator|.
name|LdifPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|kerberos
operator|.
name|kdc
operator|.
name|KdcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|kerberos
operator|.
name|shared
operator|.
name|crypto
operator|.
name|encryption
operator|.
name|KerberosKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|kerberos
operator|.
name|shared
operator|.
name|keytab
operator|.
name|Keytab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|kerberos
operator|.
name|shared
operator|.
name|keytab
operator|.
name|KeytabEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|protocol
operator|.
name|shared
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|protocol
operator|.
name|shared
operator|.
name|transport
operator|.
name|UdpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|kerberos
operator|.
name|KerberosTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|kerberos
operator|.
name|codec
operator|.
name|types
operator|.
name|EncryptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|kerberos
operator|.
name|components
operator|.
name|EncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|DefaultEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|entry
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|ldif
operator|.
name|LdifReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|name
operator|.
name|Dn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|api
operator|.
name|ldap
operator|.
name|model
operator|.
name|schema
operator|.
name|registries
operator|.
name|SchemaLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Mini KDC based on Apache Directory Server that can be embedded in testcases  * or used from command line as a standalone KDC.  *<p/>  *<b>From within testcases:</b>  *<p/>  * MiniKdc sets 2 System properties when started and un-sets them when stopped:  *<ul>  *<li>java.security.krb5.conf: set to the MiniKDC real/host/port</li>  *<li>sun.security.krb5.debug: set to the debug value provided in the  *   configuration</li>  *</ul>  * Because of this, multiple MiniKdc instances cannot be started in parallel.  * For example, running testcases in parallel that start a KDC each. To  * accomplish this a single MiniKdc should be used for all testcases running  * in parallel.  *<p/>  * MiniKdc default configuration values are:  *<ul>  *<li>org.name=EXAMPLE (used to create the REALM)</li>  *<li>org.domain=COM (used to create the REALM)</li>  *<li>kdc.bind.address=localhost</li>  *<li>kdc.port=0 (ephemeral port)</li>  *<li>instance=DefaultKrbServer</li>  *<li>max.ticket.lifetime=86400000 (1 day)</li>  *<li>max.renewable.lifetime=604800000 (7 days)</li>  *<li>transport=TCP</li>  *<li>debug=false</li>  *</ul>  * The generated krb5.conf forces TCP connections.  *<p/>  */
end_comment

begin_class
DECL|class|MiniKdc
specifier|public
class|class
name|MiniKdc
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|4
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Arguments:<WORKDIR><MINIKDCPROPERTIES> "
operator|+
literal|"<KEYTABFILE> [<PRINCIPALS>]+"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|workDir
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Specified work directory does not exists: "
operator|+
name|workDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Properties
name|conf
init|=
name|createConf
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Specified configuration does not exists: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Properties
name|userConf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|userConf
operator|.
name|load
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|userConf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MiniKdc
name|miniKdc
init|=
operator|new
name|MiniKdc
argument_list|(
name|conf
argument_list|,
name|workDir
argument_list|)
decl_stmt|;
name|miniKdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|krb5conf
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"krb5.conf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|miniKdc
operator|.
name|getKrb5conf
argument_list|()
operator|.
name|renameTo
argument_list|(
name|krb5conf
argument_list|)
condition|)
block|{
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
index|[]
name|principals
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|3
argument_list|,
name|principals
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|3
argument_list|)
expr_stmt|;
name|miniKdc
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|principals
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Standalone MiniKdc Running"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Realm           : "
operator|+
name|miniKdc
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Running at      : "
operator|+
name|miniKdc
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|miniKdc
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  krb5conf        : "
operator|+
name|krb5conf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  created keytab  : "
operator|+
name|keytabFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  with principals : "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|principals
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Do<CTRL-C> or kill<PID> to stop it"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|miniKdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot rename KDC's krb5conf to "
operator|+
name|krb5conf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MiniKdc
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ORG_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ORG_NAME
init|=
literal|"org.name"
decl_stmt|;
DECL|field|ORG_DOMAIN
specifier|public
specifier|static
specifier|final
name|String
name|ORG_DOMAIN
init|=
literal|"org.domain"
decl_stmt|;
DECL|field|KDC_BIND_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|KDC_BIND_ADDRESS
init|=
literal|"kdc.bind.address"
decl_stmt|;
DECL|field|KDC_PORT
specifier|public
specifier|static
specifier|final
name|String
name|KDC_PORT
init|=
literal|"kdc.port"
decl_stmt|;
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|String
name|INSTANCE
init|=
literal|"instance"
decl_stmt|;
DECL|field|MAX_TICKET_LIFETIME
specifier|public
specifier|static
specifier|final
name|String
name|MAX_TICKET_LIFETIME
init|=
literal|"max.ticket.lifetime"
decl_stmt|;
DECL|field|MAX_RENEWABLE_LIFETIME
specifier|public
specifier|static
specifier|final
name|String
name|MAX_RENEWABLE_LIFETIME
init|=
literal|"max.renewable.lifetime"
decl_stmt|;
DECL|field|TRANSPORT
specifier|public
specifier|static
specifier|final
name|String
name|TRANSPORT
init|=
literal|"transport"
decl_stmt|;
DECL|field|DEBUG
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG
init|=
literal|"debug"
decl_stmt|;
DECL|field|PROPERTIES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|PROPERTIES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_CONFIG
specifier|private
specifier|static
specifier|final
name|Properties
name|DEFAULT_CONFIG
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|PROPERTIES
operator|.
name|add
argument_list|(
name|ORG_NAME
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|ORG_DOMAIN
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|KDC_PORT
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|INSTANCE
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|TRANSPORT
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|MAX_TICKET_LIFETIME
argument_list|)
expr_stmt|;
name|PROPERTIES
operator|.
name|add
argument_list|(
name|MAX_RENEWABLE_LIFETIME
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|KDC_PORT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|INSTANCE
argument_list|,
literal|"DefaultKrbServer"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|ORG_NAME
argument_list|,
literal|"EXAMPLE"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|ORG_DOMAIN
argument_list|,
literal|"COM"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|TRANSPORT
argument_list|,
literal|"TCP"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|MAX_TICKET_LIFETIME
argument_list|,
literal|"86400000"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|MAX_RENEWABLE_LIFETIME
argument_list|,
literal|"604800000"
argument_list|)
expr_stmt|;
name|DEFAULT_CONFIG
operator|.
name|setProperty
argument_list|(
name|DEBUG
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convenience method that returns MiniKdc default configuration.    *<p/>    * The returned configuration is a copy, it can be customized before using    * it to create a MiniKdc.    * @return a MiniKdc default configuration.    */
DECL|method|createConf ()
specifier|public
specifier|static
name|Properties
name|createConf
parameter_list|()
block|{
return|return
operator|(
name|Properties
operator|)
name|DEFAULT_CONFIG
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|field|conf
specifier|private
name|Properties
name|conf
decl_stmt|;
DECL|field|ds
specifier|private
name|DirectoryService
name|ds
decl_stmt|;
DECL|field|kdc
specifier|private
name|KdcServer
name|kdc
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|realm
specifier|private
name|String
name|realm
decl_stmt|;
DECL|field|workDir
specifier|private
name|File
name|workDir
decl_stmt|;
DECL|field|krb5conf
specifier|private
name|File
name|krb5conf
decl_stmt|;
comment|/**    * Creates a MiniKdc.    *    * @param conf MiniKdc configuration.    * @param workDir working directory, it should be the build directory. Under    * this directory an ApacheDS working directory will be created, this    * directory will be deleted when the MiniKdc stops.    * @throws Exception thrown if the MiniKdc could not be created.    */
DECL|method|MiniKdc (Properties conf, File workDir)
specifier|public
name|MiniKdc
parameter_list|(
name|Properties
name|conf
parameter_list|,
name|File
name|workDir
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|PROPERTIES
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missingProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|PROPERTIES
argument_list|)
decl_stmt|;
name|missingProperties
operator|.
name|removeAll
argument_list|(
name|conf
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing configuration properties: "
operator|+
name|missingProperties
argument_list|)
throw|;
block|}
name|this
operator|.
name|workDir
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|workDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|workDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create directory "
operator|+
name|workDir
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration:"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---------------------------------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|conf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  {}: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"---------------------------------------------------------------"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|KDC_PORT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
name|ServerSocket
name|ss
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|port
operator|=
name|ss
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|ss
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|orgName
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_NAME
argument_list|)
decl_stmt|;
name|String
name|orgDomain
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_DOMAIN
argument_list|)
decl_stmt|;
name|realm
operator|=
name|orgName
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|"."
operator|+
name|orgDomain
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the port of the MiniKdc.    *    * @return the port of the MiniKdc.    */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**    * Returns the host of the MiniKdc.    *    * @return the host of the MiniKdc.    */
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getProperty
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|)
return|;
block|}
comment|/**    * Returns the realm of the MiniKdc.    *    * @return the realm of the MiniKdc.    */
DECL|method|getRealm ()
specifier|public
name|String
name|getRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
DECL|method|getKrb5conf ()
specifier|public
name|File
name|getKrb5conf
parameter_list|()
block|{
return|return
name|krb5conf
return|;
block|}
comment|/**    * Starts the MiniKdc.    *    * @throws Exception thrown if the MiniKdc could not be started.    */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Already started"
argument_list|)
throw|;
block|}
name|initDirectoryService
argument_list|()
expr_stmt|;
name|initKDCServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|initDirectoryService ()
specifier|private
name|void
name|initDirectoryService
parameter_list|()
throws|throws
name|Exception
block|{
name|ds
operator|=
operator|new
name|DefaultDirectoryService
argument_list|()
expr_stmt|;
name|ds
operator|.
name|setInstanceLayout
argument_list|(
operator|new
name|InstanceLayout
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|CacheService
name|cacheService
init|=
operator|new
name|CacheService
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setCacheService
argument_list|(
name|cacheService
argument_list|)
expr_stmt|;
comment|// first load the schema
name|InstanceLayout
name|instanceLayout
init|=
name|ds
operator|.
name|getInstanceLayout
argument_list|()
decl_stmt|;
name|File
name|schemaPartitionDirectory
init|=
operator|new
name|File
argument_list|(
name|instanceLayout
operator|.
name|getPartitionsDirectory
argument_list|()
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
name|SchemaLdifExtractor
name|extractor
init|=
operator|new
name|DefaultSchemaLdifExtractor
argument_list|(
name|instanceLayout
operator|.
name|getPartitionsDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|extractOrCopy
argument_list|()
expr_stmt|;
name|SchemaLoader
name|loader
init|=
operator|new
name|LdifSchemaLoader
argument_list|(
name|schemaPartitionDirectory
argument_list|)
decl_stmt|;
name|SchemaManager
name|schemaManager
init|=
operator|new
name|DefaultSchemaManager
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|schemaManager
operator|.
name|loadAllEnabled
argument_list|()
expr_stmt|;
name|ds
operator|.
name|setSchemaManager
argument_list|(
name|schemaManager
argument_list|)
expr_stmt|;
comment|// Init the LdifPartition with schema
name|LdifPartition
name|schemaLdifPartition
init|=
operator|new
name|LdifPartition
argument_list|(
name|schemaManager
argument_list|)
decl_stmt|;
name|schemaLdifPartition
operator|.
name|setPartitionPath
argument_list|(
name|schemaPartitionDirectory
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
comment|// The schema partition
name|SchemaPartition
name|schemaPartition
init|=
operator|new
name|SchemaPartition
argument_list|(
name|schemaManager
argument_list|)
decl_stmt|;
name|schemaPartition
operator|.
name|setWrappedPartition
argument_list|(
name|schemaLdifPartition
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setSchemaPartition
argument_list|(
name|schemaPartition
argument_list|)
expr_stmt|;
name|JdbmPartition
name|systemPartition
init|=
operator|new
name|JdbmPartition
argument_list|(
name|ds
operator|.
name|getSchemaManager
argument_list|()
argument_list|)
decl_stmt|;
name|systemPartition
operator|.
name|setId
argument_list|(
literal|"system"
argument_list|)
expr_stmt|;
name|systemPartition
operator|.
name|setPartitionPath
argument_list|(
operator|new
name|File
argument_list|(
name|ds
operator|.
name|getInstanceLayout
argument_list|()
operator|.
name|getPartitionsDirectory
argument_list|()
argument_list|,
name|systemPartition
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|systemPartition
operator|.
name|setSuffixDn
argument_list|(
operator|new
name|Dn
argument_list|(
name|ServerDNConstants
operator|.
name|SYSTEM_DN
argument_list|)
argument_list|)
expr_stmt|;
name|systemPartition
operator|.
name|setSchemaManager
argument_list|(
name|ds
operator|.
name|getSchemaManager
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setSystemPartition
argument_list|(
name|systemPartition
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getChangeLog
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setDenormalizeOpAttrsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ds
operator|.
name|addLast
argument_list|(
operator|new
name|KeyDerivationInterceptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// create one partition
name|String
name|orgName
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_NAME
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|orgDomain
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_DOMAIN
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|JdbmPartition
name|partition
init|=
operator|new
name|JdbmPartition
argument_list|(
name|ds
operator|.
name|getSchemaManager
argument_list|()
argument_list|)
decl_stmt|;
name|partition
operator|.
name|setId
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setPartitionPath
argument_list|(
operator|new
name|File
argument_list|(
name|ds
operator|.
name|getInstanceLayout
argument_list|()
operator|.
name|getPartitionsDirectory
argument_list|()
argument_list|,
name|orgName
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setSuffixDn
argument_list|(
operator|new
name|Dn
argument_list|(
literal|"dc="
operator|+
name|orgName
operator|+
literal|",dc="
operator|+
name|orgDomain
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|addPartition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
comment|// indexes
name|Set
name|indexedAttributes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|indexedAttributes
operator|.
name|add
argument_list|(
operator|new
name|JdbmIndex
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
argument_list|(
literal|"objectClass"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexedAttributes
operator|.
name|add
argument_list|(
operator|new
name|JdbmIndex
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
argument_list|(
literal|"dc"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|indexedAttributes
operator|.
name|add
argument_list|(
operator|new
name|JdbmIndex
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
argument_list|(
literal|"ou"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setIndexedAttributes
argument_list|(
name|indexedAttributes
argument_list|)
expr_stmt|;
comment|// And start the ds
name|ds
operator|.
name|setInstanceId
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|startup
argument_list|()
expr_stmt|;
comment|// context entry, after ds.startup()
name|Dn
name|dn
init|=
operator|new
name|Dn
argument_list|(
literal|"dc="
operator|+
name|orgName
operator|+
literal|",dc="
operator|+
name|orgDomain
argument_list|)
decl_stmt|;
name|Entry
name|entry
init|=
name|ds
operator|.
name|newEntry
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"objectClass"
argument_list|,
literal|"top"
argument_list|,
literal|"domain"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|add
argument_list|(
literal|"dc"
argument_list|,
name|orgName
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getAdminSession
argument_list|()
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|initKDCServer ()
specifier|private
name|void
name|initKDCServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|orgName
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_NAME
argument_list|)
decl_stmt|;
name|String
name|orgDomain
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_DOMAIN
argument_list|)
decl_stmt|;
name|String
name|bindAddress
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|KDC_BIND_ADDRESS
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"0"
argument_list|,
name|orgName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|orgDomain
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|orgName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|orgDomain
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|cl
operator|.
name|getResourceAsStream
argument_list|(
literal|"minikdc.ldiff"
argument_list|)
decl_stmt|;
name|SchemaManager
name|schemaManager
init|=
name|ds
operator|.
name|getSchemaManager
argument_list|()
decl_stmt|;
specifier|final
name|String
name|content
init|=
name|StrSubstitutor
operator|.
name|replace
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|)
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|LdifReader
name|reader
init|=
operator|new
name|LdifReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|LdifEntry
name|ldifEntry
range|:
name|reader
control|)
block|{
name|ds
operator|.
name|getAdminSession
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DefaultEntry
argument_list|(
name|schemaManager
argument_list|,
name|ldifEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|kdc
operator|=
operator|new
name|KdcServer
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|setDirectoryService
argument_list|(
name|ds
argument_list|)
expr_stmt|;
comment|// transport
name|String
name|transport
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|TRANSPORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"TCP"
argument_list|)
condition|)
block|{
name|kdc
operator|.
name|addTransports
argument_list|(
operator|new
name|TcpTransport
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|,
literal|3
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transport
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"UDP"
argument_list|)
condition|)
block|{
name|kdc
operator|.
name|addTransports
argument_list|(
operator|new
name|UdpTransport
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid transport: "
operator|+
name|transport
argument_list|)
throw|;
block|}
name|kdc
operator|.
name|setServiceName
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|getConfig
argument_list|()
operator|.
name|setMaximumRenewableLifetime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|MAX_RENEWABLE_LIFETIME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|getConfig
argument_list|()
operator|.
name|setMaximumTicketLifetime
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|conf
operator|.
name|getProperty
argument_list|(
name|MAX_TICKET_LIFETIME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|getConfig
argument_list|()
operator|.
name|setPaEncTimestampRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|is
operator|=
name|cl
operator|.
name|getResourceAsStream
argument_list|(
literal|"minikdc-krb5.conf"
argument_list|)
expr_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"{3}"
argument_list|)
expr_stmt|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|krb5conf
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"krb5.conf"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|krb5conf
argument_list|,
name|MessageFormat
operator|.
name|format
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|getRealm
argument_list|()
argument_list|,
name|getHost
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.conf"
argument_list|,
name|krb5conf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"sun.security.krb5.debug"
argument_list|,
name|conf
operator|.
name|getProperty
argument_list|(
name|DEBUG
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
comment|// refresh the config
name|Class
argument_list|<
name|?
argument_list|>
name|classRef
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
name|classRef
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.ibm.security.krb5.internal.Config"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classRef
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.security.krb5.Config"
argument_list|)
expr_stmt|;
block|}
name|Method
name|refreshMethod
init|=
name|classRef
operator|.
name|getMethod
argument_list|(
literal|"refresh"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|refreshMethod
operator|.
name|invoke
argument_list|(
name|classRef
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniKdc listening at port: {}"
argument_list|,
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniKdc setting JVM krb5.conf to: {}"
argument_list|,
name|krb5conf
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stops the MiniKdc    * @throws Exception    */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"java.security.krb5.conf"
argument_list|)
expr_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
literal|"sun.security.krb5.debug"
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|ds
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not shutdown ApacheDS properly: {}"
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|delete
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
DECL|method|delete (File f)
specifier|private
name|void
name|delete
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WARNING: cannot delete file "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|File
name|c
range|:
name|f
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"WARNING: cannot delete directory "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a principal in the KDC with the specified user and password.    *    * @param principal principal name, do not include the domain.    * @param password password.    * @throws Exception thrown if the principal could not be created.    */
DECL|method|createPrincipal (String principal, String password)
specifier|public
specifier|synchronized
name|void
name|createPrincipal
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|orgName
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_NAME
argument_list|)
decl_stmt|;
name|String
name|orgDomain
init|=
name|conf
operator|.
name|getProperty
argument_list|(
name|ORG_DOMAIN
argument_list|)
decl_stmt|;
name|String
name|baseDn
init|=
literal|"ou=users,dc="
operator|+
name|orgName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|",dc="
operator|+
name|orgDomain
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|"dn: uid="
operator|+
name|principal
operator|+
literal|","
operator|+
name|baseDn
operator|+
literal|"\n"
operator|+
literal|"objectClass: top\n"
operator|+
literal|"objectClass: person\n"
operator|+
literal|"objectClass: inetOrgPerson\n"
operator|+
literal|"objectClass: krb5principal\n"
operator|+
literal|"objectClass: krb5kdcentry\n"
operator|+
literal|"cn: "
operator|+
name|principal
operator|+
literal|"\n"
operator|+
literal|"sn: "
operator|+
name|principal
operator|+
literal|"\n"
operator|+
literal|"uid: "
operator|+
name|principal
operator|+
literal|"\n"
operator|+
literal|"userPassword: "
operator|+
name|password
operator|+
literal|"\n"
operator|+
literal|"krb5PrincipalName: "
operator|+
name|principal
operator|+
literal|"@"
operator|+
name|getRealm
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"krb5KeyVersionNumber: 0"
decl_stmt|;
for|for
control|(
name|LdifEntry
name|ldifEntry
range|:
operator|new
name|LdifReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|content
argument_list|)
argument_list|)
control|)
block|{
name|ds
operator|.
name|getAdminSession
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DefaultEntry
argument_list|(
name|ds
operator|.
name|getSchemaManager
argument_list|()
argument_list|,
name|ldifEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates  multiple principals in the KDC and adds them to a keytab file.    *    * @param keytabFile keytab file to add the created principal.s    * @param principals principals to add to the KDC, do not include the domain.    * @throws Exception thrown if the principals or the keytab file could not be    * created.    */
DECL|method|createPrincipal (File keytabFile, String ... principals)
specifier|public
name|void
name|createPrincipal
parameter_list|(
name|File
name|keytabFile
parameter_list|,
name|String
modifier|...
name|principals
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|generatedPassword
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Keytab
name|keytab
init|=
operator|new
name|Keytab
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeytabEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|KeytabEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|principal
range|:
name|principals
control|)
block|{
name|createPrincipal
argument_list|(
name|principal
argument_list|,
name|generatedPassword
argument_list|)
expr_stmt|;
name|principal
operator|=
name|principal
operator|+
literal|"@"
operator|+
name|getRealm
argument_list|()
expr_stmt|;
name|KerberosTime
name|timestamp
init|=
operator|new
name|KerberosTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EncryptionType
argument_list|,
name|EncryptionKey
argument_list|>
name|entry
range|:
name|KerberosKeyFactory
operator|.
name|getKerberosKeys
argument_list|(
name|principal
argument_list|,
name|generatedPassword
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EncryptionKey
name|ekey
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
name|keyVersion
init|=
operator|(
name|byte
operator|)
name|ekey
operator|.
name|getKeyVersion
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|KeytabEntry
argument_list|(
name|principal
argument_list|,
literal|1L
argument_list|,
name|timestamp
argument_list|,
name|keyVersion
argument_list|,
name|ekey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|keytab
operator|.
name|setEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|keytab
operator|.
name|write
argument_list|(
name|keytabFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

