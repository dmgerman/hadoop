begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.directory.server.kerberos.shared.keytab
package|package
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|kerberos
operator|.
name|shared
operator|.
name|keytab
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|shared
operator|.
name|kerberos
operator|.
name|components
operator|.
name|EncryptionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|//This is a hack for ApacheDS 2.0.0-M14 to be able to create
end_comment

begin_comment
comment|//keytab files with more than one principal.
end_comment

begin_comment
comment|//It needs to be in this package because the KeytabEncoder class is package
end_comment

begin_comment
comment|// private.
end_comment

begin_comment
comment|//This class can be removed once jira DIRSERVER-1882
end_comment

begin_comment
comment|// (https://issues.apache.org/jira/browse/DIRSERVER-1882) solved
end_comment

begin_class
DECL|class|HackedKeytabEncoder
class|class
name|HackedKeytabEncoder
extends|extends
name|KeytabEncoder
block|{
DECL|method|write ( byte[] keytabVersion, List<KeytabEntry> entries, int principalCount )
name|ByteBuffer
name|write
parameter_list|(
name|byte
index|[]
name|keytabVersion
parameter_list|,
name|List
argument_list|<
name|KeytabEntry
argument_list|>
name|entries
parameter_list|,
name|int
name|principalCount
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|512
operator|*
name|principalCount
argument_list|)
decl_stmt|;
name|putKeytabVersion
argument_list|(
name|buffer
argument_list|,
name|keytabVersion
argument_list|)
expr_stmt|;
name|putKeytabEntries
argument_list|(
name|buffer
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|putKeytabVersion ( ByteBuffer buffer, byte[] version )
specifier|private
name|void
name|putKeytabVersion
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|byte
index|[]
name|version
parameter_list|)
block|{
name|buffer
operator|.
name|put
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|putKeytabEntries ( ByteBuffer buffer, List<KeytabEntry> entries )
specifier|private
name|void
name|putKeytabEntries
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|List
argument_list|<
name|KeytabEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|Iterator
argument_list|<
name|KeytabEntry
argument_list|>
name|iterator
init|=
name|entries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ByteBuffer
name|entryBuffer
init|=
name|putKeytabEntry
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|entryBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|entryBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|entryBuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putKeytabEntry ( KeytabEntry entry )
specifier|private
name|ByteBuffer
name|putKeytabEntry
parameter_list|(
name|KeytabEntry
name|entry
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|putPrincipalName
argument_list|(
name|buffer
argument_list|,
name|entry
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|entry
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|entry
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKeyVersion
argument_list|()
argument_list|)
expr_stmt|;
name|putKeyBlock
argument_list|(
name|buffer
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|putPrincipalName ( ByteBuffer buffer, String principalName )
specifier|private
name|void
name|putPrincipalName
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|String
name|principalName
parameter_list|)
block|{
name|String
index|[]
name|split
init|=
name|principalName
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
name|String
name|nameComponent
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
name|String
name|realm
init|=
name|split
index|[
literal|1
index|]
decl_stmt|;
name|String
index|[]
name|nameComponents
init|=
name|nameComponent
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// increment for v1
name|buffer
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|nameComponents
operator|.
name|length
argument_list|)
expr_stmt|;
name|putCountedString
argument_list|(
name|buffer
argument_list|,
name|realm
argument_list|)
expr_stmt|;
comment|// write components
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|nameComponents
operator|.
name|length
condition|;
name|ii
operator|++
control|)
block|{
name|putCountedString
argument_list|(
name|buffer
argument_list|,
name|nameComponents
index|[
name|ii
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|putKeyBlock ( ByteBuffer buffer, EncryptionKey key )
specifier|private
name|void
name|putKeyBlock
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|EncryptionKey
name|key
parameter_list|)
block|{
name|buffer
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|key
operator|.
name|getKeyType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putCountedBytes
argument_list|(
name|buffer
argument_list|,
name|key
operator|.
name|getKeyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|putCountedString ( ByteBuffer buffer, String string )
specifier|private
name|void
name|putCountedString
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|putCountedBytes ( ByteBuffer buffer, byte[] data )
specifier|private
name|void
name|putCountedBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|buffer
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

