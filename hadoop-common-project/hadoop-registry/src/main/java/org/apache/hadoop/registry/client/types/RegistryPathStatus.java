begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.types
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Output of a<code>RegistryOperations.stat()</code> call  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
DECL|class|RegistryPathStatus
specifier|public
specifier|final
class|class
name|RegistryPathStatus
block|{
comment|/**    * Short path in the registry to this entry    */
DECL|field|path
specifier|public
specifier|final
name|String
name|path
decl_stmt|;
comment|/**    * Timestamp    */
DECL|field|time
specifier|public
specifier|final
name|long
name|time
decl_stmt|;
comment|/**    * Entry size in bytes, as returned by the storage infrastructure.    * In zookeeper, even "empty" nodes have a non-zero size.    */
DECL|field|size
specifier|public
specifier|final
name|long
name|size
decl_stmt|;
comment|/**    * Number of child nodes    */
DECL|field|children
specifier|public
specifier|final
name|int
name|children
decl_stmt|;
comment|/**    * Construct an instance    * @param path full path    * @param time time    * @param size entry size    * @param children number of children    */
DECL|method|RegistryPathStatus ( @sonPropertyR) String path, @JsonProperty(R) long time, @JsonProperty(R) long size, @JsonProperty(R) int children)
specifier|public
name|RegistryPathStatus
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"path"
argument_list|)
name|String
name|path
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"time"
argument_list|)
name|long
name|time
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"size"
argument_list|)
name|long
name|size
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"children"
argument_list|)
name|int
name|children
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
comment|/**    * Equality operator checks size, time and path of the entries.    * It does<i>not</i> check {@link #children}.    * @param other the other entry    * @return true if the entries are considered equal.    */
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RegistryPathStatus
name|status
init|=
operator|(
name|RegistryPathStatus
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|status
operator|.
name|size
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|time
operator|!=
name|status
operator|.
name|time
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|status
operator|.
name|path
argument_list|)
else|:
name|status
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * The hash code is derived from the path.    * @return hash code for storing the path in maps.    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"RegistryPathStatus{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"path='"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", time="
argument_list|)
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", size="
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", children="
argument_list|)
operator|.
name|append
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

