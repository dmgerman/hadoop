begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|daemon
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|daemon
operator|.
name|DaemonContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|DNSOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|conf
operator|.
name|RegistryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|DEFAULT_DNS_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_DNS_PORT
import|;
end_import

begin_comment
comment|/**  * This class is used to allow the RegistryDNSServer to run on a privileged  * port (e.g. 53).  */
end_comment

begin_class
DECL|class|PrivilegedRegistryDNSStarter
specifier|public
class|class
name|PrivilegedRegistryDNSStarter
implements|implements
name|Daemon
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegedRegistryDNSStarter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|registryDNS
specifier|private
name|RegistryDNS
name|registryDNS
decl_stmt|;
DECL|field|registryDNSServer
specifier|private
name|RegistryDNSServer
name|registryDNSServer
decl_stmt|;
annotation|@
name|Override
DECL|method|init (DaemonContext context)
specifier|public
name|void
name|init
parameter_list|(
name|DaemonContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
name|context
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|RegistryDNSServer
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|RegistryConfiguration
argument_list|()
expr_stmt|;
operator|new
name|GenericOptionsParser
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|KEY_DNS_PORT
argument_list|,
name|DEFAULT_DNS_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
argument_list|<
literal|1
operator|||
name|port
argument_list|>
literal|1023
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must start privileged registry DNS server "
operator|+
literal|"with '"
operator|+
name|KEY_DNS_PORT
operator|+
literal|"' configured to a privileged port."
argument_list|)
throw|;
block|}
try|try
block|{
name|registryDNS
operator|=
operator|(
name|RegistryDNS
operator|)
name|DNSOperationsFactory
operator|.
name|createInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registryDNS
operator|.
name|initializeChannels
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error initializing Registry DNS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|registryDNSServer
operator|=
name|RegistryDNSServer
operator|.
name|launchDNSServer
argument_list|(
name|conf
argument_list|,
name|registryDNS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|registryDNSServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

