begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.impl.zk
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|GetChildrenBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class dumps a registry tree to a string.  * It does this in the<code>toString()</code> method, so it  * can be used in a log statement -the operation  * will only take place if the method is evaluated.  *  */
end_comment

begin_class
annotation|@
name|VisibleForTesting
DECL|class|ZKPathDumper
specifier|public
class|class
name|ZKPathDumper
block|{
DECL|field|INDENT
specifier|public
specifier|static
specifier|final
name|int
name|INDENT
init|=
literal|2
decl_stmt|;
DECL|field|curator
specifier|private
specifier|final
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|root
specifier|private
specifier|final
name|String
name|root
decl_stmt|;
DECL|field|verbose
specifier|private
specifier|final
name|boolean
name|verbose
decl_stmt|;
comment|/**    * Create a path dumper -but do not dump the path until asked    * @param curator curator instance    * @param root root    * @param verbose verbose flag - includes more details (such as ACLs)    */
DECL|method|ZKPathDumper (CuratorFramework curator, String root, boolean verbose)
specifier|public
name|ZKPathDumper
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|,
name|String
name|root
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|curator
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|root
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|curator
operator|=
name|curator
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**    * Trigger the recursive registry dump.    * @return a string view of the registry    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"ZK tree for "
argument_list|)
operator|.
name|append
argument_list|(
name|root
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|expand
argument_list|(
name|builder
argument_list|,
name|root
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recursively expand the path into the supplied string builder, increasing    * the indentation by {@link #INDENT} as it proceeds (depth first) down    * the tree    * @param builder string build to append to    * @param path path to examine    * @param indent current indentation    */
DECL|method|expand (StringBuilder builder, String path, int indent)
specifier|private
name|void
name|expand
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
try|try
block|{
name|GetChildrenBuilder
name|childrenBuilder
init|=
name|curator
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|childrenBuilder
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|String
name|childPath
init|=
name|path
operator|+
literal|"/"
operator|+
name|child
decl_stmt|;
name|String
name|body
decl_stmt|;
name|Stat
name|stat
init|=
name|curator
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|StringBuilder
name|bodyBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|bodyBuilder
operator|.
name|append
argument_list|(
literal|"  ["
argument_list|)
operator|.
name|append
argument_list|(
name|stat
operator|.
name|getDataLength
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stat
operator|.
name|getEphemeralOwner
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bodyBuilder
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
comment|// verbose: extract ACLs
name|builder
operator|.
name|append
argument_list|(
literal|" -- "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
name|curator
operator|.
name|getACL
argument_list|()
operator|.
name|forPath
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|acls
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|RegistrySecurity
operator|.
name|aclToString
argument_list|(
name|acl
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|body
operator|=
name|bodyBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// print each child
name|append
argument_list|(
name|builder
argument_list|,
name|indent
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// recurse
name|expand
argument_list|(
name|builder
argument_list|,
name|childPath
argument_list|,
name|indent
operator|+
name|INDENT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Append the specified indentation to a builder    * @param builder string build to append to    * @param indent current indentation    * @param c charactor to use for indentation    */
DECL|method|append (StringBuilder builder, int indent, char c)
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|int
name|indent
parameter_list|,
name|char
name|c
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

