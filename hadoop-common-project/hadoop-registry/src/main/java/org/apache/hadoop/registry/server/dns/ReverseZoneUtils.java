begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|util
operator|.
name|SubnetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_DNS_SPLIT_REVERSE_ZONE_RANGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_DNS_ZONE_MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
operator|.
name|KEY_DNS_ZONE_SUBNET
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities for configuring reverse zones.  */
end_comment

begin_class
DECL|class|ReverseZoneUtils
specifier|public
specifier|final
class|class
name|ReverseZoneUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReverseZoneUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|POW3
specifier|private
specifier|static
specifier|final
name|long
name|POW3
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|256
argument_list|,
literal|3
argument_list|)
decl_stmt|;
DECL|field|POW2
specifier|private
specifier|static
specifier|final
name|long
name|POW2
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|256
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|POW1
specifier|private
specifier|static
specifier|final
name|long
name|POW1
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|256
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|method|ReverseZoneUtils ()
specifier|private
name|ReverseZoneUtils
parameter_list|()
block|{   }
comment|/**    * Given a baseIp, range and index, return the network address for the    * reverse zone.    *    * @param baseIp base ip address to perform calculations against.    * @param range  number of ip addresses per subnet.    * @param index  the index of the subnet to calculate.    * @return the calculated ip address.    * @throws UnknownHostException if an invalid ip is provided.    */
DECL|method|getReverseZoneNetworkAddress (String baseIp, int range, int index)
specifier|protected
specifier|static
name|String
name|getReverseZoneNetworkAddress
parameter_list|(
name|String
name|baseIp
parameter_list|,
name|int
name|range
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid index provided, must be positive: %d"
argument_list|,
name|index
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|range
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid range provided, cannot be negative: %d"
argument_list|,
name|range
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|calculateIp
argument_list|(
name|baseIp
argument_list|,
name|range
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/**    * When splitting the reverse zone, return the number of subnets needed,    * given the range and netmask.    *    * @param conf the Hadoop configuration.    * @return The number of subnets given the range and netmask.    */
DECL|method|getSubnetCountForReverseZones (Configuration conf)
specifier|protected
specifier|static
name|long
name|getSubnetCountForReverseZones
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|subnet
init|=
name|conf
operator|.
name|get
argument_list|(
name|KEY_DNS_ZONE_SUBNET
argument_list|)
decl_stmt|;
name|String
name|mask
init|=
name|conf
operator|.
name|get
argument_list|(
name|KEY_DNS_ZONE_MASK
argument_list|)
decl_stmt|;
name|String
name|range
init|=
name|conf
operator|.
name|get
argument_list|(
name|KEY_DNS_SPLIT_REVERSE_ZONE_RANGE
argument_list|)
decl_stmt|;
name|int
name|parsedRange
decl_stmt|;
try|try
block|{
name|parsedRange
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The supplied range is not a valid integer: Supplied range: "
argument_list|,
name|range
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|parsedRange
operator|<
literal|0
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Range cannot be negative: Supplied range: %d"
argument_list|,
name|parsedRange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|long
name|ipCount
decl_stmt|;
try|try
block|{
name|SubnetUtils
name|subnetUtils
init|=
operator|new
name|SubnetUtils
argument_list|(
name|subnet
argument_list|,
name|mask
argument_list|)
decl_stmt|;
name|subnetUtils
operator|.
name|setInclusiveHostCount
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ipCount
operator|=
name|subnetUtils
operator|.
name|getInfo
argument_list|()
operator|.
name|getAddressCountLong
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The subnet or mask is invalid: Subnet: {} Mask: {}"
argument_list|,
name|subnet
argument_list|,
name|mask
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|parsedRange
operator|==
literal|0
condition|)
block|{
return|return
name|ipCount
return|;
block|}
return|return
name|ipCount
operator|/
name|parsedRange
return|;
block|}
DECL|method|calculateIp (String baseIp, int range, int index)
specifier|private
specifier|static
name|String
name|calculateIp
parameter_list|(
name|String
name|baseIp
parameter_list|,
name|int
name|range
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|long
index|[]
name|ipParts
init|=
name|splitIp
argument_list|(
name|baseIp
argument_list|)
decl_stmt|;
name|long
name|ipNum1
init|=
name|POW3
operator|*
name|ipParts
index|[
literal|0
index|]
decl_stmt|;
name|long
name|ipNum2
init|=
name|POW2
operator|*
name|ipParts
index|[
literal|1
index|]
decl_stmt|;
name|long
name|ipNum3
init|=
name|POW1
operator|*
name|ipParts
index|[
literal|2
index|]
decl_stmt|;
name|long
name|ipNum4
init|=
name|ipParts
index|[
literal|3
index|]
decl_stmt|;
name|long
name|ipNum
init|=
name|ipNum1
operator|+
name|ipNum2
operator|+
name|ipNum3
operator|+
name|ipNum4
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ipPartsOut
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First octet
name|long
name|temp
init|=
name|ipNum
operator|+
name|range
operator|*
operator|(
name|long
operator|)
name|index
decl_stmt|;
name|ipPartsOut
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|temp
operator|/
name|POW3
argument_list|)
expr_stmt|;
comment|// Second octet
name|temp
operator|=
name|temp
operator|-
name|ipPartsOut
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|*
name|POW3
expr_stmt|;
name|ipPartsOut
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|temp
operator|/
name|POW2
argument_list|)
expr_stmt|;
comment|// Third octet
name|temp
operator|=
name|temp
operator|-
name|ipPartsOut
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|*
name|POW2
expr_stmt|;
name|ipPartsOut
operator|.
name|add
argument_list|(
literal|2
argument_list|,
name|temp
operator|/
name|POW1
argument_list|)
expr_stmt|;
comment|// Fourth octet
name|temp
operator|=
name|temp
operator|-
name|ipPartsOut
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|*
name|POW1
expr_stmt|;
name|ipPartsOut
operator|.
name|add
argument_list|(
literal|3
argument_list|,
name|temp
argument_list|)
expr_stmt|;
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|ipPartsOut
argument_list|,
literal|'.'
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|splitIp (String baseIp)
specifier|protected
specifier|static
name|long
index|[]
name|splitIp
parameter_list|(
name|String
name|baseIp
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|InetAddress
name|inetAddress
decl_stmt|;
try|try
block|{
name|inetAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|baseIp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Base IP address is invalid"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|inetAddress
operator|instanceof
name|Inet6Address
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"IPv6 is not yet supported for "
operator|+
literal|"reverse zones"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|octets
init|=
name|inetAddress
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|octets
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Base IP address is invalid"
argument_list|)
throw|;
block|}
name|long
index|[]
name|results
init|=
operator|new
name|long
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|octets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|octets
index|[
name|i
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

