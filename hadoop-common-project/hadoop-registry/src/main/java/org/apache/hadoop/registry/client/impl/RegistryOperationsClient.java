begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryBindingSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryOperationsService
import|;
end_import

begin_comment
comment|/**  * This is the client service for applications to work with the registry.  *  * It does not set up the root paths for the registry, is bonded  * to a user, and can be set to use SASL, anonymous or id:pass auth.  *  * For SASL, the client must be operating in the context of an authed user.  *  * For id:pass the client must have the relevant id and password, SASL is  * not used even if the client has credentials.  *  * For anonymous, nothing is used.  *  * Any SASL-authed client also has the ability to add one or more authentication  * id:pass pair on all future writes, and to reset them later.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RegistryOperationsClient
specifier|public
class|class
name|RegistryOperationsClient
extends|extends
name|RegistryOperationsService
block|{
DECL|method|RegistryOperationsClient (String name)
specifier|public
name|RegistryOperationsClient
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|RegistryOperationsClient (String name, RegistryBindingSource bindingSource)
specifier|public
name|RegistryOperationsClient
parameter_list|(
name|String
name|name
parameter_list|,
name|RegistryBindingSource
name|bindingSource
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|bindingSource
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

