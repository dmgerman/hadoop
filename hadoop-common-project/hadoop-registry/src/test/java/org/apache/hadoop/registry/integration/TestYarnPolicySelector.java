begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.integration
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|RegistryTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|PersistencePolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|RegistryPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|integration
operator|.
name|SelectByYarnPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|RegistryAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestYarnPolicySelector
specifier|public
class|class
name|TestYarnPolicySelector
extends|extends
name|RegistryTestHelper
block|{
DECL|field|record
specifier|private
name|ServiceRecord
name|record
init|=
name|createRecord
argument_list|(
literal|"1"
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|,
literal|"one"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|status
specifier|private
name|RegistryPathStatus
name|status
init|=
operator|new
name|RegistryPathStatus
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|method|assertSelected (boolean outcome, RegistryAdminService.NodeSelector selector)
specifier|public
name|void
name|assertSelected
parameter_list|(
name|boolean
name|outcome
parameter_list|,
name|RegistryAdminService
operator|.
name|NodeSelector
name|selector
parameter_list|)
block|{
name|boolean
name|select
init|=
name|selector
operator|.
name|shouldSelect
argument_list|(
literal|"/"
argument_list|,
name|status
argument_list|,
name|record
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|selector
operator|.
name|toString
argument_list|()
argument_list|,
name|outcome
argument_list|,
name|select
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testByContainer ()
specifier|public
name|void
name|testByContainer
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertSelected
argument_list|(
literal|false
argument_list|,
operator|new
name|SelectByYarnPersistence
argument_list|(
literal|"1"
argument_list|,
name|PersistencePolicies
operator|.
name|CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testByApp ()
specifier|public
name|void
name|testByApp
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertSelected
argument_list|(
literal|true
argument_list|,
operator|new
name|SelectByYarnPersistence
argument_list|(
literal|"1"
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testByAppName ()
specifier|public
name|void
name|testByAppName
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertSelected
argument_list|(
literal|false
argument_list|,
operator|new
name|SelectByYarnPersistence
argument_list|(
literal|"2"
argument_list|,
name|PersistencePolicies
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

