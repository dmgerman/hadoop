begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotEmptyDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidPathnameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|yarn
operator|.
name|YarnRegistryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * FSRegistryOperationsService test, using the local filesystem.  */
end_comment

begin_class
DECL|class|TestFSRegistryOperationsService
specifier|public
class|class
name|TestFSRegistryOperationsService
block|{
DECL|field|registry
specifier|private
specifier|static
name|FSRegistryOperationsService
name|registry
init|=
operator|new
name|FSRegistryOperationsService
argument_list|()
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initRegistry ()
specifier|public
specifier|static
name|void
name|initRegistry
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|registry
argument_list|)
expr_stmt|;
name|registry
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|registry
operator|.
name|getFs
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|createTestDir ()
specifier|public
name|void
name|createTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanTestDir ()
specifier|public
name|void
name|cleanTestDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkNodeNonRecursive ()
specifier|public
name|void
name|testMkNodeNonRecursive
parameter_list|()
throws|throws
name|InvalidPathnameException
throws|,
name|PathNotFoundException
throws|,
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Make node with parent already made, nonrecursive"
argument_list|)
expr_stmt|;
name|result
operator|=
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expected to fail
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try to make node with no parent, nonrecursive"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/parent/registryTestNode"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not have created node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/parent/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkNodeRecursive ()
specifier|public
name|void
name|testMkNodeRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Make node with parent already made, recursive"
argument_list|)
expr_stmt|;
name|result
operator|=
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try to make node with no parent, recursive"
argument_list|)
expr_stmt|;
name|result
operator|=
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/parent/registryTestNode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/parent/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkNodeAlreadyExists ()
specifier|public
name|void
name|testMkNodeAlreadyExists
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try to mknode existing path -- should be noop and return false"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|registry
operator|.
name|mknode
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindParentPath ()
specifier|public
name|void
name|testBindParentPath
parameter_list|()
throws|throws
name|InvalidPathnameException
throws|,
name|PathNotFoundException
throws|,
name|FileAlreadyExistsException
throws|,
name|IOException
block|{
name|ServiceRecord
name|record
init|=
name|createRecord
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/parent1/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"test/parent1/registryTestNode"
argument_list|,
name|record
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/parent1/registryTestNode/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test without pre-creating path
name|registry
operator|.
name|bind
argument_list|(
literal|"test/parent2/registryTestNode"
argument_list|,
name|record
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/parent2/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindAlreadyExists ()
specifier|public
name|void
name|testBindAlreadyExists
parameter_list|()
throws|throws
name|IOException
block|{
name|ServiceRecord
name|record1
init|=
name|createRecord
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|ServiceRecord
name|record2
init|=
name|createRecord
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Bind record1"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"test/registryTestNode"
argument_list|,
name|record1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Bind record2, overwrite = 1"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"test/registryTestNode"
argument_list|,
name|record2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The record should have been overwritten
name|ServiceRecord
name|readRecord
init|=
name|registry
operator|.
name|resolve
argument_list|(
literal|"test/registryTestNode"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|readRecord
operator|.
name|equals
argument_list|(
name|record2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Bind record3, overwrite = 0"
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|bind
argument_list|(
literal|"test/registryTestNode"
argument_list|,
name|record1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not overwrite record"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// The record should not be overwritten
name|readRecord
operator|=
name|registry
operator|.
name|resolve
argument_list|(
literal|"test/registryTestNode"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|readRecord
operator|.
name|equals
argument_list|(
name|record2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolve ()
specifier|public
name|void
name|testResolve
parameter_list|()
throws|throws
name|IOException
block|{
name|ServiceRecord
name|record
init|=
name|createRecord
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"test/registryTestNode"
argument_list|,
name|record
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Read record that exists"
argument_list|)
expr_stmt|;
name|ServiceRecord
name|readRecord
init|=
name|registry
operator|.
name|resolve
argument_list|(
literal|"test/registryTestNode"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|readRecord
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|record
operator|.
name|equals
argument_list|(
name|readRecord
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try to read record that does not exist"
argument_list|)
expr_stmt|;
try|try
block|{
name|readRecord
operator|=
name|registry
operator|.
name|resolve
argument_list|(
literal|"test/nonExistentNode"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw an error, record does not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testExists ()
specifier|public
name|void
name|testExists
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Check for existing node"
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|registry
operator|.
name|exists
argument_list|(
literal|"test/registryTestNode"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Check for  non-existing node"
argument_list|)
expr_stmt|;
name|exists
operator|=
name|registry
operator|.
name|exists
argument_list|(
literal|"test/nonExistentNode"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDirsOnly ()
specifier|public
name|void
name|testDeleteDirsOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path with children"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Deleted dir wich children, nonrecursive flag set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// Make sure nothing was deleted
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete leaf path 'test/registryTestNode/child2'"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Recursively delete non-leaf path 'test/registryTestNode'"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteWithRecords ()
specifier|public
name|void
name|testDeleteWithRecords
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path with children and mocked records"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create and close stream immediately so they aren't blocking
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1/_record"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete dir with child nodes and record file"
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Nonrecursive delete of non-empty dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotEmptyDirectoryException
name|e
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1/_record"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete dir with record file and no child dirs"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete dir with child dir and no record file"
argument_list|)
expr_stmt|;
try|try
block|{
name|registry
operator|.
name|delete
argument_list|(
literal|"test/registryTestNode"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Nonrecursive delete of non-empty dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathIsNotEmptyDirectoryException
name|e
parameter_list|)
block|{     }
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pre-create test path with children and mocked records"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create and close stream immediately so they aren't blocking
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/_record"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/registryTestNode/child1/_record"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ls
init|=
literal|null
decl_stmt|;
name|ls
operator|=
name|registry
operator|.
name|list
argument_list|(
literal|"test/registryTestNode"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ls
operator|.
name|contains
argument_list|(
literal|"child1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ls
operator|.
name|contains
argument_list|(
literal|"child2"
argument_list|)
argument_list|)
expr_stmt|;
name|ls
operator|=
literal|null
expr_stmt|;
name|ls
operator|=
name|registry
operator|.
name|list
argument_list|(
literal|"test/registryTestNode/child1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ls
operator|=
literal|null
expr_stmt|;
name|ls
operator|=
name|registry
operator|.
name|list
argument_list|(
literal|"test/registryTestNode/child2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ls
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRecord (String id)
specifier|private
name|ServiceRecord
name|createRecord
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating mock service record"
argument_list|)
expr_stmt|;
name|ServiceRecord
name|record
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
name|YarnRegistryAttributes
operator|.
name|YARN_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|record
operator|.
name|description
operator|=
literal|"testRecord"
expr_stmt|;
return|return
name|record
return|;
block|}
block|}
end_class

end_unit

