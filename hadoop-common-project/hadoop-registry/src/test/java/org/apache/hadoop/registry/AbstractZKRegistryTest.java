begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|conf
operator|.
name|RegistryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|AddingCompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|services
operator|.
name|MicroZookeeperServiceKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|AbstractZKRegistryTest
specifier|public
class|class
name|AbstractZKRegistryTest
extends|extends
name|RegistryTestHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractZKRegistryTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|servicesToTeardown
specifier|private
specifier|static
specifier|final
name|AddingCompositeService
name|servicesToTeardown
init|=
operator|new
name|AddingCompositeService
argument_list|(
literal|"teardown"
argument_list|)
decl_stmt|;
comment|// static initializer guarantees it is always started
comment|// ahead of any @BeforeClass methods
static|static
block|{
name|servicesToTeardown
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|servicesToTeardown
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|methodName
specifier|public
name|TestName
name|methodName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|method|addToTeardown (Service svc)
specifier|protected
specifier|static
name|void
name|addToTeardown
parameter_list|(
name|Service
name|svc
parameter_list|)
block|{
name|servicesToTeardown
operator|.
name|addService
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownServices ()
specifier|public
specifier|static
name|void
name|teardownServices
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
name|LOG
argument_list|,
literal|"teardown of static services"
argument_list|)
expr_stmt|;
name|servicesToTeardown
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|zookeeper
specifier|protected
specifier|static
name|MicroZookeeperService
name|zookeeper
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createZKServer ()
specifier|public
specifier|static
name|void
name|createZKServer
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|zkDir
init|=
operator|new
name|File
argument_list|(
literal|"target/zookeeper"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|zkDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zkDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|zookeeper
operator|=
operator|new
name|MicroZookeeperService
argument_list|(
literal|"InMemoryZKService"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|RegistryConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MicroZookeeperServiceKeys
operator|.
name|KEY_ZKSERVICE_DIR
argument_list|,
name|zkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|zookeeper
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zookeeper
operator|.
name|start
argument_list|()
expr_stmt|;
name|addToTeardown
argument_list|(
name|zookeeper
argument_list|)
expr_stmt|;
block|}
comment|/**    * give our thread a name    */
annotation|@
name|Before
DECL|method|nameThread ()
specifier|public
name|void
name|nameThread
parameter_list|()
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"JUnit"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the connection string to use    *    * @return connection string    */
DECL|method|getConnectString ()
specifier|public
name|String
name|getConnectString
parameter_list|()
block|{
return|return
name|zookeeper
operator|.
name|getConnectionString
argument_list|()
return|;
block|}
DECL|method|createRegistryConfiguration ()
specifier|public
name|Configuration
name|createRegistryConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|RegistryConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_CONNECTION_TIMEOUT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_RETRY_INTERVAL
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_RETRY_TIMES
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_RETRY_CEILING
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RegistryConstants
operator|.
name|KEY_REGISTRY_ZK_QUORUM
argument_list|,
name|zookeeper
operator|.
name|getConnectionString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

