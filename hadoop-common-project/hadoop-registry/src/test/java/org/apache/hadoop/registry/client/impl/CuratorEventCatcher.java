begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.client.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|BackgroundCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|CuratorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * This is a little event catcher for curator asynchronous  * operations.  */
end_comment

begin_class
DECL|class|CuratorEventCatcher
specifier|public
class|class
name|CuratorEventCatcher
implements|implements
name|BackgroundCallback
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CuratorEventCatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|BlockingQueue
argument_list|<
name|CuratorEvent
argument_list|>
DECL|field|events
name|events
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|CuratorEvent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|eventCounter
specifier|private
specifier|final
name|AtomicInteger
name|eventCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|processResult (CuratorFramework client, CuratorEvent event)
specifier|public
name|void
name|processResult
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|CuratorEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"received {}"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|eventCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|events
operator|.
name|put
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|eventCounter
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Blocking operation to take the first event off the queue    * @return the first event on the queue, when it arrives    * @throws InterruptedException if interrupted    */
DECL|method|take ()
specifier|public
name|CuratorEvent
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|events
operator|.
name|take
argument_list|()
return|;
block|}
block|}
end_class

end_unit

