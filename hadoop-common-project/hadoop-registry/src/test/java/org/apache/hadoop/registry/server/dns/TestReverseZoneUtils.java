begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.registry.server.dns
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|server
operator|.
name|dns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Tests for the reverse zone utilities.  */
end_comment

begin_class
DECL|class|TestReverseZoneUtils
specifier|public
class|class
name|TestReverseZoneUtils
block|{
DECL|field|NET
specifier|private
specifier|static
specifier|final
name|String
name|NET
init|=
literal|"172.17.4.0"
decl_stmt|;
DECL|field|RANGE
specifier|private
specifier|static
specifier|final
name|int
name|RANGE
init|=
literal|256
decl_stmt|;
DECL|field|INDEX
specifier|private
specifier|static
specifier|final
name|int
name|INDEX
init|=
literal|0
decl_stmt|;
DECL|field|exception
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetReverseZoneNetworkAddress ()
specifier|public
name|void
name|testGetReverseZoneNetworkAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"172.17.4.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
name|RANGE
argument_list|,
name|INDEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitIp ()
specifier|public
name|void
name|testSplitIp
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|splitIp
init|=
name|ReverseZoneUtils
operator|.
name|splitIp
argument_list|(
name|NET
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|172
argument_list|,
name|splitIp
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|splitIp
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|splitIp
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splitIp
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThrowIllegalArgumentExceptionIfIndexIsNegative ()
specifier|public
name|void
name|testThrowIllegalArgumentExceptionIfIndexIsNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
name|RANGE
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThrowUnknownHostExceptionIfIpIsInvalid ()
specifier|public
name|void
name|testThrowUnknownHostExceptionIfIpIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|UnknownHostException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
literal|"213124.21231.14123.13"
argument_list|,
name|RANGE
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThrowIllegalArgumentExceptionIfRangeIsNegative ()
specifier|public
name|void
name|testThrowIllegalArgumentExceptionIfRangeIsNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
operator|-
literal|1
argument_list|,
name|INDEX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVariousRangeAndIndexValues ()
specifier|public
name|void
name|testVariousRangeAndIndexValues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Given the base address of 172.17.4.0, step 256 IP addresses, 5 times.
name|assertEquals
argument_list|(
literal|"172.17.9.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|256
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.17.4.128"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.18.0.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|256
argument_list|,
literal|252
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.17.12.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.17.4.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.17.4.0"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"172.17.4.1"
argument_list|,
name|ReverseZoneUtils
operator|.
name|getReverseZoneNetworkAddress
argument_list|(
name|NET
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

