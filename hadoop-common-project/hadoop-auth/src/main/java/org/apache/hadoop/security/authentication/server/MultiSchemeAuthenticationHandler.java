begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_comment
comment|/**  * The {@link MultiSchemeAuthenticationHandler} supports configuring multiple  * authentication mechanisms simultaneously. e.g. server can support multiple  * authentication mechanisms such as Kerberos (SPENGO) and LDAP. During the  * authentication phase, server will specify all possible authentication schemes  * and let client choose the appropriate scheme. Please refer to RFC-2616 and  * HADOOP-12082 for more details.  *<p>  * The supported configuration properties are:  *<ul>  *<li>multi-scheme-auth-handler.schemes: A comma separated list of HTTP  * authentication mechanisms supported by this handler. It does not have a  * default value. e.g. multi-scheme-auth-handler.schemes=basic,negotiate  *<li>multi-scheme-auth-handler.schemes.${scheme-name}.handler: The  * authentication handler implementation to be used for the specified  * authentication scheme. It does not have a default value. e.g.  * multi-scheme-auth-handler.schemes.negotiate.handler=kerberos  *</ul>  *  * It expected that for every authentication scheme specified in  * multi-scheme-auth-handler.schemes property, a handler needs to be configured.  * Note that while scheme values in 'multi-scheme-auth-handler.schemes' property  * are case-insensitive, the scheme value in the handler configuration property  * name must be lower case. i.e. property name such as  * multi-scheme-auth-handler.schemes.Negotiate.handler is invalid.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MultiSchemeAuthenticationHandler
specifier|public
class|class
name|MultiSchemeAuthenticationHandler
implements|implements
name|CompositeAuthenticationHandler
block|{
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiSchemeAuthenticationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SCHEMES_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|SCHEMES_PROPERTY
init|=
literal|"multi-scheme-auth-handler.schemes"
decl_stmt|;
DECL|field|AUTH_HANDLER_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_HANDLER_PROPERTY
init|=
literal|"multi-scheme-auth-handler.schemes.%s.handler"
decl_stmt|;
DECL|field|STR_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|STR_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
DECL|field|schemeToAuthHandlerMapping
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AuthenticationHandler
argument_list|>
name|schemeToAuthHandlerMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|authType
specifier|private
specifier|final
name|String
name|authType
decl_stmt|;
comment|/**    * Constant that identifies the authentication mechanism.    */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"multi-scheme"
decl_stmt|;
DECL|method|MultiSchemeAuthenticationHandler ()
specifier|public
name|MultiSchemeAuthenticationHandler
parameter_list|()
block|{
name|this
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|}
DECL|method|MultiSchemeAuthenticationHandler (String authType)
specifier|public
name|MultiSchemeAuthenticationHandler
parameter_list|(
name|String
name|authType
parameter_list|)
block|{
name|this
operator|.
name|authType
operator|=
name|authType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|authType
return|;
block|}
comment|/**    * This method returns the token types supported by this authentication    * handler.    *    * @return the token types supported by this authentication handler.    */
annotation|@
name|Override
DECL|method|getTokenTypes ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getTokenTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// Useful for debugging purpose.
for|for
control|(
name|Map
operator|.
name|Entry
name|prop
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"{} : {}"
argument_list|,
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|types
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|schemesProperty
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|SCHEMES_PROPERTY
argument_list|)
argument_list|,
literal|"%s system property is not specified."
argument_list|,
name|SCHEMES_PROPERTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|STR_SPLITTER
operator|.
name|split
argument_list|(
name|schemesProperty
argument_list|)
control|)
block|{
name|scheme
operator|=
name|AuthenticationHandlerUtil
operator|.
name|checkAuthScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemeToAuthHandlerMapping
operator|.
name|containsKey
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handler is already specified for "
operator|+
name|scheme
operator|+
literal|" authentication scheme."
argument_list|)
throw|;
block|}
name|String
name|authHandlerPropName
init|=
name|String
operator|.
name|format
argument_list|(
name|AUTH_HANDLER_PROPERTY
argument_list|,
name|scheme
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|authHandlerName
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|authHandlerPropName
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|authHandlerName
argument_list|,
literal|"No auth handler configured for scheme %s."
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
name|String
name|authHandlerClassName
init|=
name|AuthenticationHandlerUtil
operator|.
name|getAuthenticationHandlerClassName
argument_list|(
name|authHandlerName
argument_list|)
decl_stmt|;
name|AuthenticationHandler
name|handler
init|=
name|initializeAuthHandler
argument_list|(
name|authHandlerClassName
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|schemeToAuthHandlerMapping
operator|.
name|put
argument_list|(
name|scheme
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|handler
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully initialized MultiSchemeAuthenticationHandler"
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeAuthHandler ( String authHandlerClassName, Properties config)
specifier|protected
name|AuthenticationHandler
name|initializeAuthHandler
parameter_list|(
name|String
name|authHandlerClassName
parameter_list|,
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|authHandlerClassName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing Authentication handler of type "
operator|+
name|authHandlerClassName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|klass
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|authHandlerClassName
argument_list|)
decl_stmt|;
name|AuthenticationHandler
name|authHandler
init|=
operator|(
name|AuthenticationHandler
operator|)
name|klass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|authHandler
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Successfully initialized Authentication handler of type "
operator|+
name|authHandlerClassName
argument_list|)
expr_stmt|;
return|return
name|authHandler
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to initialize authentication handler "
operator|+
name|authHandlerClassName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
for|for
control|(
name|AuthenticationHandler
name|handler
range|:
name|schemeToAuthHandlerMapping
operator|.
name|values
argument_list|()
control|)
block|{
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpConstants
operator|.
name|AUTHORIZATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorization
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AuthenticationHandler
argument_list|>
name|entry
range|:
name|schemeToAuthHandlerMapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|AuthenticationHandlerUtil
operator|.
name|matchAuthScheme
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|authorization
argument_list|)
condition|)
block|{
name|AuthenticationToken
name|token
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Token generated with type {}"
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
block|}
comment|// Handle the case when (authorization == null) or an invalid authorization
comment|// header (e.g. a header value without the scheme name).
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|schemeToAuthHandlerMapping
operator|.
name|keySet
argument_list|()
control|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|HttpConstants
operator|.
name|WWW_AUTHENTICATE_HEADER
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

