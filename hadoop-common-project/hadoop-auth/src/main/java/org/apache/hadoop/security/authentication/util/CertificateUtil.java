begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_class
DECL|class|CertificateUtil
specifier|public
class|class
name|CertificateUtil
block|{
DECL|field|PEM_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|PEM_HEADER
init|=
literal|"-----BEGIN CERTIFICATE-----\n"
decl_stmt|;
DECL|field|PEM_FOOTER
specifier|private
specifier|static
specifier|final
name|String
name|PEM_FOOTER
init|=
literal|"\n-----END CERTIFICATE-----"
decl_stmt|;
comment|/**    * Gets an RSAPublicKey from the provided PEM encoding.    *    * @param pem    *          - the pem encoding from config without the header and footer    * @return RSAPublicKey the RSA public key    * @throws ServletException thrown if a processing error occurred    */
DECL|method|parseRSAPublicKey (String pem)
specifier|public
specifier|static
name|RSAPublicKey
name|parseRSAPublicKey
parameter_list|(
name|String
name|pem
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|fullPem
init|=
name|PEM_HEADER
operator|+
name|pem
operator|+
name|PEM_FOOTER
decl_stmt|;
name|PublicKey
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CertificateFactory
name|fact
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|fullPem
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|X509Certificate
name|cer
init|=
operator|(
name|X509Certificate
operator|)
name|fact
operator|.
name|generateCertificate
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|key
operator|=
name|cer
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|ce
parameter_list|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pem
operator|.
name|startsWith
argument_list|(
name|PEM_HEADER
argument_list|)
condition|)
block|{
name|message
operator|=
literal|"CertificateException - be sure not to include PEM header "
operator|+
literal|"and footer in the PEM configuration element."
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"CertificateException - PEM may be corrupt"
expr_stmt|;
block|}
throw|throw
operator|new
name|ServletException
argument_list|(
name|message
argument_list|,
name|ce
argument_list|)
throw|;
block|}
return|return
operator|(
name|RSAPublicKey
operator|)
name|key
return|;
block|}
block|}
end_class

end_unit

