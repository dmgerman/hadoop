begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|HttpConstants
operator|.
name|NEGOTIATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|HttpConstants
operator|.
name|BASIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|HttpConstants
operator|.
name|DIGEST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This is a utility class designed to provide functionality related to  * {@link AuthenticationHandler}.  */
end_comment

begin_class
DECL|class|AuthenticationHandlerUtil
specifier|public
specifier|final
class|class
name|AuthenticationHandlerUtil
block|{
comment|/**    * This class should only contain the static utility methods. Hence it is not    * intended to be instantiated.    */
DECL|method|AuthenticationHandlerUtil ()
specifier|private
name|AuthenticationHandlerUtil
parameter_list|()
block|{   }
comment|/**    * This method provides an instance of {@link AuthenticationHandler} based on    * specified<code>authHandlerName</code>.    *    * @param authHandler The short-name (or fully qualified class name) of the    *          authentication handler.    * @return an instance of AuthenticationHandler implementation.    */
DECL|method|getAuthenticationHandlerClassName (String authHandler)
specifier|public
specifier|static
name|String
name|getAuthenticationHandlerClassName
parameter_list|(
name|String
name|authHandler
parameter_list|)
block|{
name|String
name|handlerName
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|authHandler
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|String
name|authHandlerClassName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handlerName
operator|.
name|equals
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|authHandlerClassName
operator|=
name|PseudoAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|handlerName
operator|.
name|equals
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|authHandlerClassName
operator|=
name|KerberosAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|handlerName
operator|.
name|equals
argument_list|(
name|LdapAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|authHandlerClassName
operator|=
name|LdapAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|handlerName
operator|.
name|equals
argument_list|(
name|MultiSchemeAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|authHandlerClassName
operator|=
name|MultiSchemeAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|authHandlerClassName
operator|=
name|authHandler
expr_stmt|;
block|}
return|return
name|authHandlerClassName
return|;
block|}
comment|/**    * This method checks if the specified HTTP authentication<code>scheme</code>    * value is valid.    *    * @param scheme HTTP authentication scheme to be checked    * @return Canonical representation of HTTP authentication scheme    * @throws IllegalArgumentException In case the specified value is not a valid    *           HTTP authentication scheme.    */
DECL|method|checkAuthScheme (String scheme)
specifier|public
specifier|static
name|String
name|checkAuthScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
if|if
condition|(
name|BASIC
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
name|BASIC
return|;
block|}
elseif|else
if|if
condition|(
name|NEGOTIATE
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
name|NEGOTIATE
return|;
block|}
elseif|else
if|if
condition|(
name|DIGEST
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
name|DIGEST
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported HTTP authentication scheme %s ."
operator|+
literal|" Supported schemes are [%s, %s, %s]"
argument_list|,
name|scheme
argument_list|,
name|BASIC
argument_list|,
name|NEGOTIATE
argument_list|,
name|DIGEST
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * This method checks if the specified<code>authToken</code> belongs to the    * specified HTTP authentication<code>scheme</code>.    *    * @param scheme HTTP authentication scheme to be checked    * @param auth Authentication header value which is to be compared with the    *          authentication scheme.    * @return true If the authentication header value corresponds to the    *         specified authentication scheme false Otherwise.    */
DECL|method|matchAuthScheme (String scheme, String auth)
specifier|public
specifier|static
name|boolean
name|matchAuthScheme
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|auth
parameter_list|)
block|{
name|scheme
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|scheme
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|auth
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|auth
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|auth
operator|.
name|regionMatches
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|,
name|scheme
argument_list|,
literal|0
argument_list|,
name|scheme
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

