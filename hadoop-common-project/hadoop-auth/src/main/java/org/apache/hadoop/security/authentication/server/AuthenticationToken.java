begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|AuthToken
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_comment
comment|/**  * The {@link AuthenticationToken} contains information about an authenticated  * HTTP client and doubles as the {@link Principal} to be returned by  * authenticated {@link HttpServletRequest}s  *<p>  * The token can be serialized/deserialized to and from a string as it is sent  * and received in HTTP client responses and requests as a HTTP cookie (this is  * done by the {@link AuthenticationFilter}).  */
end_comment

begin_class
DECL|class|AuthenticationToken
specifier|public
class|class
name|AuthenticationToken
extends|extends
name|AuthToken
block|{
comment|/**    * Constant that identifies an anonymous request.    */
DECL|field|ANONYMOUS
specifier|public
specifier|static
specifier|final
name|AuthenticationToken
name|ANONYMOUS
init|=
operator|new
name|AuthenticationToken
argument_list|()
decl_stmt|;
DECL|method|AuthenticationToken ()
specifier|private
name|AuthenticationToken
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|AuthenticationToken (AuthToken token)
specifier|private
name|AuthenticationToken
parameter_list|(
name|AuthToken
name|token
parameter_list|)
block|{
name|super
argument_list|(
name|token
operator|.
name|getUserName
argument_list|()
argument_list|,
name|token
operator|.
name|getName
argument_list|()
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|setExpires
argument_list|(
name|token
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an authentication token.    *    * @param userName user name.    * @param principal principal (commonly matches the user name, with Kerberos is the full/long principal    * name while the userName is the short name).    * @param type the authentication mechanism name.    * (<code>System.currentTimeMillis() + validityPeriod</code>).    */
DECL|method|AuthenticationToken (String userName, String principal, String type)
specifier|public
name|AuthenticationToken
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|principal
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|userName
argument_list|,
name|principal
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the expiration of the token.    *    * @param expires expiration time of the token in milliseconds since the epoch.    */
DECL|method|setExpires (long expires)
specifier|public
name|void
name|setExpires
parameter_list|(
name|long
name|expires
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
name|AuthenticationToken
operator|.
name|ANONYMOUS
condition|)
block|{
name|super
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if the token has expired.    *    * @return true if the token has expired.    */
DECL|method|isExpired ()
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|super
operator|.
name|isExpired
argument_list|()
return|;
block|}
comment|/**    * Parses a string into an authentication token.    *    * @param tokenStr string representation of a token.    *    * @return the parsed authentication token.    *    * @throws AuthenticationException thrown if the string representation could not be parsed into    * an authentication token.    */
DECL|method|parse (String tokenStr)
specifier|public
specifier|static
name|AuthenticationToken
name|parse
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|AuthenticationException
block|{
return|return
operator|new
name|AuthenticationToken
argument_list|(
name|AuthToken
operator|.
name|parse
argument_list|(
name|tokenStr
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

