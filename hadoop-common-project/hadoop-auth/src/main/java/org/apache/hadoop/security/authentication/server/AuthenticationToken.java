begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * The {@link AuthenticationToken} contains information about an authenticated HTTP client and doubles  * as the {@link Principal} to be returned by authenticated {@link HttpServletRequest}s  *<p/>  * The token can be serialized/deserialized to and from a string as it is sent and received in HTTP client  * responses and requests as a HTTP cookie (this is done by the {@link AuthenticationFilter}).  */
end_comment

begin_class
DECL|class|AuthenticationToken
specifier|public
class|class
name|AuthenticationToken
implements|implements
name|Principal
block|{
comment|/**    * Constant that identifies an anonymous request.    */
DECL|field|ANONYMOUS
specifier|public
specifier|static
specifier|final
name|AuthenticationToken
name|ANONYMOUS
init|=
operator|new
name|AuthenticationToken
argument_list|()
decl_stmt|;
DECL|field|ATTR_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|ATTR_SEPARATOR
init|=
literal|"&"
decl_stmt|;
DECL|field|USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|USER_NAME
init|=
literal|"u"
decl_stmt|;
DECL|field|PRINCIPAL
specifier|private
specifier|static
specifier|final
name|String
name|PRINCIPAL
init|=
literal|"p"
decl_stmt|;
DECL|field|EXPIRES
specifier|private
specifier|static
specifier|final
name|String
name|EXPIRES
init|=
literal|"e"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"t"
decl_stmt|;
DECL|field|ATTRIBUTES
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|ATTRIBUTES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|USER_NAME
argument_list|,
name|PRINCIPAL
argument_list|,
name|EXPIRES
argument_list|,
name|TYPE
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|expires
specifier|private
name|long
name|expires
decl_stmt|;
DECL|field|token
specifier|private
name|String
name|token
decl_stmt|;
DECL|method|AuthenticationToken ()
specifier|private
name|AuthenticationToken
parameter_list|()
block|{
name|userName
operator|=
literal|null
expr_stmt|;
name|principal
operator|=
literal|null
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|expires
operator|=
operator|-
literal|1
expr_stmt|;
name|token
operator|=
literal|"ANONYMOUS"
expr_stmt|;
name|generateToken
argument_list|()
expr_stmt|;
block|}
DECL|field|ILLEGAL_ARG_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ILLEGAL_ARG_MSG
init|=
literal|" is NULL, empty or contains a '"
operator|+
name|ATTR_SEPARATOR
operator|+
literal|"'"
decl_stmt|;
comment|/**    * Creates an authentication token.    *    * @param userName user name.    * @param principal principal (commonly matches the user name, with Kerberos is the full/long principal    * name while the userName is the short name).    * @param type the authentication mechanism name.    * (<code>System.currentTimeMillis() + validityPeriod</code>).    */
DECL|method|AuthenticationToken (String userName, String principal, String type)
specifier|public
name|AuthenticationToken
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|principal
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|checkForIllegalArgument
argument_list|(
name|userName
argument_list|,
literal|"userName"
argument_list|)
expr_stmt|;
name|checkForIllegalArgument
argument_list|(
name|principal
argument_list|,
literal|"principal"
argument_list|)
expr_stmt|;
name|checkForIllegalArgument
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|expires
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * Check if the provided value is invalid. Throw an error if it is invalid, NOP otherwise.    *     * @param value the value to check.    * @param name the parameter name to use in an error message if the value is invalid.    */
DECL|method|checkForIllegalArgument (String value, String name)
specifier|private
specifier|static
name|void
name|checkForIllegalArgument
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|value
operator|.
name|contains
argument_list|(
name|ATTR_SEPARATOR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
name|ILLEGAL_ARG_MSG
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the expiration of the token.    *    * @param expires expiration time of the token in milliseconds since the epoch.    */
DECL|method|setExpires (long expires)
specifier|public
name|void
name|setExpires
parameter_list|(
name|long
name|expires
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
name|AuthenticationToken
operator|.
name|ANONYMOUS
condition|)
block|{
name|this
operator|.
name|expires
operator|=
name|expires
expr_stmt|;
name|generateToken
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generates the token.    */
DECL|method|generateToken ()
specifier|private
name|void
name|generateToken
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|USER_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|userName
argument_list|)
operator|.
name|append
argument_list|(
name|ATTR_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|PRINCIPAL
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|principal
argument_list|)
operator|.
name|append
argument_list|(
name|ATTR_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|TYPE
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
name|ATTR_SEPARATOR
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|EXPIRES
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|token
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the user name.    *    * @return the user name.    */
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**    * Returns the principal name (this method name comes from the JDK {@link Principal} interface).    *    * @return the principal name.    */
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|principal
return|;
block|}
comment|/**    * Returns the authentication mechanism of the token.    *    * @return the authentication mechanism of the token.    */
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * Returns the expiration time of the token.    *    * @return the expiration time of the token, in milliseconds since Epoc.    */
DECL|method|getExpires ()
specifier|public
name|long
name|getExpires
parameter_list|()
block|{
return|return
name|expires
return|;
block|}
comment|/**    * Returns if the token has expired.    *    * @return if the token has expired.    */
DECL|method|isExpired ()
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|expires
operator|!=
operator|-
literal|1
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|expires
return|;
block|}
comment|/**    * Returns the string representation of the token.    *<p/>    * This string representation is parseable by the {@link #parse} method.    *    * @return the string representation of the token.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|token
return|;
block|}
comment|/**    * Parses a string into an authentication token.    *    * @param tokenStr string representation of a token.    *    * @return the parsed authentication token.    *    * @throws AuthenticationException thrown if the string representation could not be parsed into    * an authentication token.    */
DECL|method|parse (String tokenStr)
specifier|public
specifier|static
name|AuthenticationToken
name|parse
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|split
argument_list|(
name|tokenStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|ATTRIBUTES
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid token string, missing attributes"
argument_list|)
throw|;
block|}
name|long
name|expires
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|EXPIRES
argument_list|)
argument_list|)
decl_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|USER_NAME
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|PRINCIPAL
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|TYPE
argument_list|)
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/**    * Splits the string representation of a token into attributes pairs.    *    * @param tokenStr string representation of a token.    *    * @return a map with the attribute pairs of the token.    *    * @throws AuthenticationException thrown if the string representation of the token could not be broken into    * attribute pairs.    */
DECL|method|split (String tokenStr)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|tokenStr
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|tokenStr
argument_list|,
name|ATTR_SEPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|part
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|int
name|separator
init|=
name|part
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Invalid authentication token"
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|part
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|separator
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|part
operator|.
name|substring
argument_list|(
name|separator
operator|+
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

