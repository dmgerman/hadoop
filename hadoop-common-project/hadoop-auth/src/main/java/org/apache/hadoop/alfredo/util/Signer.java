begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.alfredo.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|alfredo
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/**  * Signs strings and verifies signed strings using a SHA digest.  */
end_comment

begin_class
DECL|class|Signer
specifier|public
class|class
name|Signer
block|{
DECL|field|SIGNATURE
specifier|private
specifier|static
specifier|final
name|String
name|SIGNATURE
init|=
literal|"&s="
decl_stmt|;
DECL|field|secret
specifier|private
name|byte
index|[]
name|secret
decl_stmt|;
comment|/**    * Creates a Signer instance using the specified secret.    *    * @param secret secret to use for creating the digest.    */
DECL|method|Signer (byte[] secret)
specifier|public
name|Signer
parameter_list|(
name|byte
index|[]
name|secret
parameter_list|)
block|{
if|if
condition|(
name|secret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"secret cannot be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|secret
operator|=
name|secret
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a signed string.    *<p/>    * The signature '&s=SIGNATURE' is appended at the end of the string.    *    * @param str string to sign.    *    * @return the signed string.    */
DECL|method|sign (String str)
specifier|public
name|String
name|sign
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL or empty string to sign"
argument_list|)
throw|;
block|}
name|String
name|signature
init|=
name|computeSignature
argument_list|(
name|str
argument_list|)
decl_stmt|;
return|return
name|str
operator|+
name|SIGNATURE
operator|+
name|signature
return|;
block|}
comment|/**    * Verifies a signed string and extracts the original string.    *    * @param signedStr the signed string to verify and extract.    *    * @return the extracted original string.    *    * @throws SignerException thrown if the given string is not a signed string or if the signature is invalid.    */
DECL|method|verifyAndExtract (String signedStr)
specifier|public
name|String
name|verifyAndExtract
parameter_list|(
name|String
name|signedStr
parameter_list|)
throws|throws
name|SignerException
block|{
name|int
name|index
init|=
name|signedStr
operator|.
name|lastIndexOf
argument_list|(
name|SIGNATURE
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SignerException
argument_list|(
literal|"Invalid signed text: "
operator|+
name|signedStr
argument_list|)
throw|;
block|}
name|String
name|originalSignature
init|=
name|signedStr
operator|.
name|substring
argument_list|(
name|index
operator|+
name|SIGNATURE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rawValue
init|=
name|signedStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|currentSignature
init|=
name|computeSignature
argument_list|(
name|rawValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|originalSignature
operator|.
name|equals
argument_list|(
name|currentSignature
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SignerException
argument_list|(
literal|"Invalid signature"
argument_list|)
throw|;
block|}
return|return
name|rawValue
return|;
block|}
comment|/**    * Returns then signature of a string.    *    * @param str string to sign.    *    * @return the signature for the string.    */
DECL|method|computeSignature (String str)
specifier|protected
name|String
name|computeSignature
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA"
argument_list|)
decl_stmt|;
name|md
operator|.
name|update
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|md
operator|.
name|digest
argument_list|()
decl_stmt|;
return|return
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
operator|.
name|encodeToString
argument_list|(
name|digest
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"It should not happen, "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

