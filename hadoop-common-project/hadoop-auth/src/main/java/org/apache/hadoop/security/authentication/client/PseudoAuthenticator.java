begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * The {@link PseudoAuthenticator} implementation provides an authentication equivalent to Hadoop's  * Simple authentication, it trusts the value of the 'user.name' Java System property.  *<p>  * The 'user.name' value is propagated using an additional query string parameter {@link #USER_NAME} ('user.name').  */
end_comment

begin_class
DECL|class|PseudoAuthenticator
specifier|public
class|class
name|PseudoAuthenticator
implements|implements
name|Authenticator
block|{
comment|/**    * Name of the additional parameter that carries the 'user.name' value.    */
DECL|field|USER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|USER_NAME
init|=
literal|"user.name"
decl_stmt|;
DECL|field|USER_NAME_EQ
specifier|private
specifier|static
specifier|final
name|String
name|USER_NAME_EQ
init|=
name|USER_NAME
operator|+
literal|"="
decl_stmt|;
DECL|field|connConfigurator
specifier|private
name|ConnectionConfigurator
name|connConfigurator
decl_stmt|;
comment|/**    * Sets a {@link ConnectionConfigurator} instance to use for    * configuring connections.    *    * @param configurator the {@link ConnectionConfigurator} instance.    */
annotation|@
name|Override
DECL|method|setConnectionConfigurator (ConnectionConfigurator configurator)
specifier|public
name|void
name|setConnectionConfigurator
parameter_list|(
name|ConnectionConfigurator
name|configurator
parameter_list|)
block|{
name|connConfigurator
operator|=
name|configurator
expr_stmt|;
block|}
comment|/**    * Performs simple authentication against the specified URL.    *<p>    * If a token is given it does a NOP and returns the given token.    *<p>    * If no token is given, it will perform an HTTP<code>OPTIONS</code> request injecting an additional    * parameter {@link #USER_NAME} in the query string with the value returned by the {@link #getUserName()}    * method.    *<p>    * If the response is successful it will update the authentication token.    *    * @param url the URl to authenticate against.    * @param token the authentication token being used for the user.    *    * @throws IOException if an IO error occurred.    * @throws AuthenticationException if an authentication error occurred.    */
annotation|@
name|Override
DECL|method|authenticate (URL url, AuthenticatedURL.Token token)
specifier|public
name|void
name|authenticate
parameter_list|(
name|URL
name|url
parameter_list|,
name|AuthenticatedURL
operator|.
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|String
name|strUrl
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|paramSeparator
init|=
operator|(
name|strUrl
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
operator|)
condition|?
literal|"&"
else|:
literal|"?"
decl_stmt|;
name|strUrl
operator|+=
name|paramSeparator
operator|+
name|USER_NAME_EQ
operator|+
name|getUserName
argument_list|()
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|strUrl
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connConfigurator
operator|!=
literal|null
condition|)
block|{
name|conn
operator|=
name|connConfigurator
operator|.
name|configure
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
name|AuthenticatedURL
operator|.
name|extractToken
argument_list|(
name|conn
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current user name.    *<p>    * This implementation returns the value of the Java system property 'user.name'    *    * @return the current user name.    */
DECL|method|getUserName ()
specifier|protected
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

