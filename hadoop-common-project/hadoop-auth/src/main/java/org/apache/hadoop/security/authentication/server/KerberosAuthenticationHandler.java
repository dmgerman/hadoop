begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KeyTab
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * The {@link KerberosAuthenticationHandler} implements the Kerberos SPNEGO  * authentication mechanism for HTTP.  *<p>  * The supported configuration properties are:  *<ul>  *<li>kerberos.principal: the Kerberos principal to used by the server. As  * stated by the Kerberos SPNEGO specification, it should be  *<code>HTTP/${HOSTNAME}@{REALM}</code>. The realm can be omitted from the  * principal as the JDK GSS libraries will use the realm name of the configured  * default realm.  * It does not have a default value.</li>  *<li>kerberos.keytab: the keytab file containing the credentials for the  * Kerberos principal.  * It does not have a default value.</li>  *<li>kerberos.name.rules: kerberos names rules to resolve principal names, see  * {@link KerberosName#setRules(String)}</li>  *</ul>  */
end_comment

begin_class
DECL|class|KerberosAuthenticationHandler
specifier|public
class|class
name|KerberosAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constant that identifies the authentication mechanism.    */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"kerberos"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the kerberos    * principal.    */
DECL|field|PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|PRINCIPAL
init|=
name|TYPE
operator|+
literal|".principal"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the keytab    * file path.    */
DECL|field|KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|KEYTAB
init|=
name|TYPE
operator|+
literal|".keytab"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the Kerberos name    * rules for the Kerberos principals.    */
DECL|field|NAME_RULES
specifier|public
specifier|static
specifier|final
name|String
name|NAME_RULES
init|=
name|TYPE
operator|+
literal|".name.rules"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates how auth_to_local    * rules are evaluated.    */
DECL|field|RULE_MECHANISM
specifier|public
specifier|static
specifier|final
name|String
name|RULE_MECHANISM
init|=
name|TYPE
operator|+
literal|".name.rules.mechanism"
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|keytab
specifier|private
name|String
name|keytab
decl_stmt|;
DECL|field|gssManager
specifier|private
name|GSSManager
name|gssManager
decl_stmt|;
DECL|field|serverSubject
specifier|private
name|Subject
name|serverSubject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
comment|/**    * Creates a Kerberos SPNEGO authentication handler with the default    * auth-token type,<code>kerberos</code>.    */
DECL|method|KerberosAuthenticationHandler ()
specifier|public
name|KerberosAuthenticationHandler
parameter_list|()
block|{
name|this
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a Kerberos SPNEGO authentication handler with a custom auth-token    * type.    *    * @param type auth-token type.    */
DECL|method|KerberosAuthenticationHandler (String type)
specifier|public
name|KerberosAuthenticationHandler
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * Initializes the authentication handler instance.    *<p>    * It creates a Kerberos context using the principal and keytab specified in    * the configuration.    *<p>    * This method is invoked by the {@link AuthenticationFilter#init} method.    *    * @param config configuration properties to initialize the handler.    *    * @throws ServletException thrown if the handler could not be initialized.    */
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|String
name|principal
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|PRINCIPAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
name|principal
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Principal not defined in configuration"
argument_list|)
throw|;
block|}
name|keytab
operator|=
name|config
operator|.
name|getProperty
argument_list|(
name|KEYTAB
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
if|if
condition|(
name|keytab
operator|==
literal|null
operator|||
name|keytab
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Keytab not defined in configuration"
argument_list|)
throw|;
block|}
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|keytab
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keytabFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Keytab does not exist: "
operator|+
name|keytab
argument_list|)
throw|;
block|}
comment|// use all SPNEGO principals in the keytab if a principal isn't
comment|// specifically configured
specifier|final
name|String
index|[]
name|spnegoPrincipals
decl_stmt|;
if|if
condition|(
name|principal
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|spnegoPrincipals
operator|=
name|KerberosUtil
operator|.
name|getPrincipalNames
argument_list|(
name|keytab
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"HTTP/.*"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|spnegoPrincipals
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Principals do not exist in the keytab"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|spnegoPrincipals
operator|=
operator|new
name|String
index|[]
block|{
name|principal
block|}
expr_stmt|;
block|}
name|KeyTab
name|keytabInstance
init|=
name|KeyTab
operator|.
name|getInstance
argument_list|(
name|keytabFile
argument_list|)
decl_stmt|;
name|serverSubject
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|keytabInstance
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|spnegoPrincipal
range|:
name|spnegoPrincipals
control|)
block|{
name|Principal
name|krbPrincipal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
name|spnegoPrincipal
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using keytab {}, for principal {}"
argument_list|,
name|keytab
argument_list|,
name|krbPrincipal
argument_list|)
expr_stmt|;
name|serverSubject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|krbPrincipal
argument_list|)
expr_stmt|;
block|}
name|String
name|nameRules
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|NAME_RULES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameRules
operator|!=
literal|null
condition|)
block|{
name|KerberosName
operator|.
name|setRules
argument_list|(
name|nameRules
argument_list|)
expr_stmt|;
block|}
name|String
name|ruleMechanism
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|RULE_MECHANISM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ruleMechanism
operator|!=
literal|null
condition|)
block|{
name|KerberosName
operator|.
name|setRuleMechanism
argument_list|(
name|ruleMechanism
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|gssManager
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|serverSubject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|GSSManager
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GSSManager
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|GSSManager
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Releases any resources initialized by the authentication handler.    *<p>    * It destroys the Kerberos context.    */
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|keytab
operator|=
literal|null
expr_stmt|;
name|serverSubject
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Returns the authentication type of the authentication handler, 'kerberos'.    *<p>    *    * @return the authentication type of the authentication handler, 'kerberos'.    */
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * Returns the Kerberos principals used by the authentication handler.    *    * @return the Kerberos principals used by the authentication handler.    */
DECL|method|getPrincipals ()
specifier|protected
name|Set
argument_list|<
name|KerberosPrincipal
argument_list|>
name|getPrincipals
parameter_list|()
block|{
return|return
name|serverSubject
operator|.
name|getPrincipals
argument_list|(
name|KerberosPrincipal
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Returns the keytab used by the authentication handler.    *    * @return the keytab used by the authentication handler.    */
DECL|method|getKeytab ()
specifier|protected
name|String
name|getKeytab
parameter_list|()
block|{
return|return
name|keytab
return|;
block|}
comment|/**    * This is an empty implementation, it always returns<code>TRUE</code>.    *    *    *    * @param token the authentication token if any, otherwise<code>NULL</code>.    * @param request the HTTP client request.    * @param response the HTTP client response.    *    * @return<code>TRUE</code>    * @throws IOException it is never thrown.    * @throws AuthenticationException it is never thrown.    */
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|true
return|;
block|}
comment|/**    * It enforces the the Kerberos SPNEGO authentication sequence returning an    * {@link AuthenticationToken} only after the Kerberos SPNEGO sequence has    * completed successfully.    *    * @param request the HTTP client request.    * @param response the HTTP client response.    *    * @return an authentication token if the Kerberos SPNEGO sequence is complete    * and valid,<code>null</code> if it is in progress (in this case the handler    * handles the response to the client).    *    * @throws IOException thrown if an IO error occurred.    * @throws AuthenticationException thrown if Kerberos SPNEGO sequence failed.    */
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, final HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorization
operator|==
literal|null
operator|||
operator|!
name|authorization
operator|.
name|startsWith
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
argument_list|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|WWW_AUTHENTICATE
argument_list|,
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorization
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"SPNEGO starting for url: {}"
argument_list|,
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'"
operator|+
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
operator|+
literal|"' does not start with '"
operator|+
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
literal|"' :  {}"
argument_list|,
name|authorization
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|authorization
operator|=
name|authorization
operator|.
name|substring
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
specifier|final
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|clientToken
init|=
name|base64
operator|.
name|decode
argument_list|(
name|authorization
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|serverPrincipal
init|=
name|KerberosUtil
operator|.
name|getTokenServerName
argument_list|(
name|clientToken
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverPrincipal
operator|.
name|startsWith
argument_list|(
literal|"HTTP/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid server principal "
operator|+
name|serverPrincipal
operator|+
literal|"decoded from client request"
argument_list|)
throw|;
block|}
name|token
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|serverSubject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|AuthenticationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AuthenticationToken
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|runWithPrincipal
argument_list|(
name|serverPrincipal
argument_list|,
name|clientToken
argument_list|,
name|base64
argument_list|,
name|response
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getException
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
operator|.
name|getException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|ex
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|token
return|;
block|}
DECL|method|runWithPrincipal (String serverPrincipal, byte[] clientToken, Base64 base64, HttpServletResponse response)
specifier|private
name|AuthenticationToken
name|runWithPrincipal
parameter_list|(
name|String
name|serverPrincipal
parameter_list|,
name|byte
index|[]
name|clientToken
parameter_list|,
name|Base64
name|base64
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|GSSException
block|{
name|GSSContext
name|gssContext
init|=
literal|null
decl_stmt|;
name|GSSCredential
name|gssCreds
init|=
literal|null
decl_stmt|;
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"SPNEGO initiated with server principal [{}]"
argument_list|,
name|serverPrincipal
argument_list|)
expr_stmt|;
name|gssCreds
operator|=
name|this
operator|.
name|gssManager
operator|.
name|createCredential
argument_list|(
name|this
operator|.
name|gssManager
operator|.
name|createName
argument_list|(
name|serverPrincipal
argument_list|,
name|KerberosUtil
operator|.
name|NT_GSS_KRB5_PRINCIPAL_OID
argument_list|)
argument_list|,
name|GSSCredential
operator|.
name|INDEFINITE_LIFETIME
argument_list|,
operator|new
name|Oid
index|[]
block|{
name|KerberosUtil
operator|.
name|GSS_SPNEGO_MECH_OID
block|,
name|KerberosUtil
operator|.
name|GSS_KRB5_MECH_OID
block|}
argument_list|,
name|GSSCredential
operator|.
name|ACCEPT_ONLY
argument_list|)
expr_stmt|;
name|gssContext
operator|=
name|this
operator|.
name|gssManager
operator|.
name|createContext
argument_list|(
name|gssCreds
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serverToken
init|=
name|gssContext
operator|.
name|acceptSecContext
argument_list|(
name|clientToken
argument_list|,
literal|0
argument_list|,
name|clientToken
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverToken
operator|!=
literal|null
operator|&&
name|serverToken
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|authenticate
init|=
name|base64
operator|.
name|encodeToString
argument_list|(
name|serverToken
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|,
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
literal|" "
operator|+
name|authenticate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gssContext
operator|.
name|isEstablished
argument_list|()
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"SPNEGO in progress"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|clientPrincipal
init|=
name|gssContext
operator|.
name|getSrcName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|KerberosName
name|kerberosName
init|=
operator|new
name|KerberosName
argument_list|(
name|clientPrincipal
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|kerberosName
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
name|userName
argument_list|,
name|clientPrincipal
argument_list|,
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"SPNEGO completed for client principal [{}]"
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|gssContext
operator|!=
literal|null
condition|)
block|{
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|gssCreds
operator|!=
literal|null
condition|)
block|{
name|gssCreds
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
block|}
end_class

end_unit

