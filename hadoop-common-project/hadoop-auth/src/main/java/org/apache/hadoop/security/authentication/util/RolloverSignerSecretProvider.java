begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An abstract SignerSecretProvider that can be use used as the base for a  * rolling secret.  The secret will roll over at the same interval as the token  * validity, so there are only ever a maximum of two valid secrets at any  * given time.  This class handles storing and returning the secrets, as well  * as the rolling over.  At a minimum, subclasses simply need to implement the  * generateNewSecret() method.  More advanced implementations can override  * other methods to provide more advanced behavior, but should be careful when  * doing so.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RolloverSignerSecretProvider
specifier|public
specifier|abstract
class|class
name|RolloverSignerSecretProvider
extends|extends
name|SignerSecretProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RolloverSignerSecretProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Stores the currently valid secrets.  The current secret is the 0th element    * in the array.    */
DECL|field|secrets
specifier|private
specifier|volatile
name|byte
index|[]
index|[]
name|secrets
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|field|schedulerRunning
specifier|private
name|boolean
name|schedulerRunning
decl_stmt|;
DECL|field|isDestroyed
specifier|private
name|boolean
name|isDestroyed
decl_stmt|;
DECL|method|RolloverSignerSecretProvider ()
specifier|public
name|RolloverSignerSecretProvider
parameter_list|()
block|{
name|schedulerRunning
operator|=
literal|false
expr_stmt|;
name|isDestroyed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Initialize the SignerSecretProvider.  It initializes the current secret    * and starts the scheduler for the rollover to run at an interval of    * tokenValidity.    * @param config configuration properties    * @param servletContext servlet context    * @param tokenValidity The amount of time a token is valid for    * @throws Exception    */
annotation|@
name|Override
DECL|method|init (Properties config, ServletContext servletContext, long tokenValidity)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|,
name|long
name|tokenValidity
parameter_list|)
throws|throws
name|Exception
block|{
name|initSecrets
argument_list|(
name|generateNewSecret
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|startScheduler
argument_list|(
name|tokenValidity
argument_list|,
name|tokenValidity
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the secrets array.  This should typically be called only once,    * during init but some implementations may wish to call it other times.    * previousSecret can be null if there isn't a previous secret, but    * currentSecret should never be null.    * @param currentSecret The current secret    * @param previousSecret The previous secret    */
DECL|method|initSecrets (byte[] currentSecret, byte[] previousSecret)
specifier|protected
name|void
name|initSecrets
parameter_list|(
name|byte
index|[]
name|currentSecret
parameter_list|,
name|byte
index|[]
name|previousSecret
parameter_list|)
block|{
name|secrets
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|currentSecret
block|,
name|previousSecret
block|}
expr_stmt|;
block|}
comment|/**    * Starts the scheduler for the rollover to run at an interval.    * @param initialDelay The initial delay in the rollover in milliseconds    * @param period The interval for the rollover in milliseconds    */
DECL|method|startScheduler (long initialDelay, long period)
specifier|protected
specifier|synchronized
name|void
name|startScheduler
parameter_list|(
name|long
name|initialDelay
parameter_list|,
name|long
name|period
parameter_list|)
block|{
if|if
condition|(
operator|!
name|schedulerRunning
condition|)
block|{
name|schedulerRunning
operator|=
literal|true
expr_stmt|;
name|scheduler
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|rollSecret
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|initialDelay
argument_list|,
name|period
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDestroyed
condition|)
block|{
name|isDestroyed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|schedulerRunning
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Rolls the secret.  It is called automatically at the rollover interval.    */
DECL|method|rollSecret ()
specifier|protected
specifier|synchronized
name|void
name|rollSecret
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDestroyed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rolling secret"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|newSecret
init|=
name|generateNewSecret
argument_list|()
decl_stmt|;
name|secrets
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|newSecret
block|,
name|secrets
index|[
literal|0
index|]
block|}
expr_stmt|;
block|}
block|}
comment|/**    * Subclasses should implement this to return a new secret.  It will be called    * automatically at the secret rollover interval. It should never return null.    * @return a new secret    */
DECL|method|generateNewSecret ()
specifier|protected
specifier|abstract
name|byte
index|[]
name|generateNewSecret
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getCurrentSecret ()
specifier|public
name|byte
index|[]
name|getCurrentSecret
parameter_list|()
block|{
return|return
name|secrets
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getAllSecrets ()
specifier|public
name|byte
index|[]
index|[]
name|getAllSecrets
parameter_list|()
block|{
return|return
name|secrets
return|;
block|}
block|}
end_class

end_unit

