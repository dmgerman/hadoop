begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|LdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|StartTlsRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|StartTlsResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The {@link LdapAuthenticationHandler} implements the BASIC authentication  * mechanism for HTTP using LDAP back-end.  *  * The supported configuration properties are:  *<ul>  *<li>ldap.providerurl: The url of the LDAP server. It does not have a default  * value.</li>  *<li>ldap.basedn: the base distinguished name (DN) to be used with the LDAP  * server. This value is appended to the provided user id for authentication  * purpose. It does not have a default value.</li>  *<li>ldap.binddomain: the LDAP bind domain value to be used with the LDAP  * server. This property is optional and useful only in case of Active  * Directory server.  *<li>ldap.enablestarttls: A boolean value used to define if the LDAP server  * supports 'StartTLS' extension.</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LdapAuthenticationHandler
specifier|public
class|class
name|LdapAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
DECL|field|logger
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LdapAuthenticationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constant that identifies the authentication mechanism.    */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"ldap"
decl_stmt|;
comment|/**    * Constant that identifies the authentication mechanism to be used with the    * LDAP server.    */
DECL|field|SECURITY_AUTHENTICATION
specifier|public
specifier|static
specifier|final
name|String
name|SECURITY_AUTHENTICATION
init|=
literal|"simple"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the url of the LDAP    * server.    */
DECL|field|PROVIDER_URL
specifier|public
specifier|static
specifier|final
name|String
name|PROVIDER_URL
init|=
name|TYPE
operator|+
literal|".providerurl"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the base    * distinguished name (DN) to be used with the LDAP server. This value is    * appended to the provided user id for authentication purpose.    */
DECL|field|BASE_DN
specifier|public
specifier|static
specifier|final
name|String
name|BASE_DN
init|=
name|TYPE
operator|+
literal|".basedn"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the LDAP bind    * domain value to be used with the LDAP server.    */
DECL|field|LDAP_BIND_DOMAIN
specifier|public
specifier|static
specifier|final
name|String
name|LDAP_BIND_DOMAIN
init|=
name|TYPE
operator|+
literal|".binddomain"
decl_stmt|;
comment|/**    * Constant for the configuration property that indicates the base    * distinguished name (DN) to be used with the LDAP server. This value is    * appended to the provided user id for authentication purpose.    */
DECL|field|ENABLE_START_TLS
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_START_TLS
init|=
name|TYPE
operator|+
literal|".enablestarttls"
decl_stmt|;
DECL|field|ldapDomain
specifier|private
name|String
name|ldapDomain
decl_stmt|;
DECL|field|baseDN
specifier|private
name|String
name|baseDN
decl_stmt|;
DECL|field|providerUrl
specifier|private
name|String
name|providerUrl
decl_stmt|;
DECL|field|enableStartTls
specifier|private
name|Boolean
name|enableStartTls
decl_stmt|;
DECL|field|disableHostNameVerification
specifier|private
name|Boolean
name|disableHostNameVerification
decl_stmt|;
comment|/**    * Configure StartTLS LDAP extension for this handler.    *    * @param enableStartTls true If the StartTLS LDAP extension is to be enabled    *          false otherwise    */
annotation|@
name|VisibleForTesting
DECL|method|setEnableStartTls (Boolean enableStartTls)
specifier|public
name|void
name|setEnableStartTls
parameter_list|(
name|Boolean
name|enableStartTls
parameter_list|)
block|{
name|this
operator|.
name|enableStartTls
operator|=
name|enableStartTls
expr_stmt|;
block|}
comment|/**    * Configure the Host name verification for this handler. This method is    * introduced only for unit testing and should never be used in production.    *    * @param disableHostNameVerification true to disable host-name verification    *          false otherwise    */
annotation|@
name|VisibleForTesting
DECL|method|setDisableHostNameVerification ( Boolean disableHostNameVerification)
specifier|public
name|void
name|setDisableHostNameVerification
parameter_list|(
name|Boolean
name|disableHostNameVerification
parameter_list|)
block|{
name|this
operator|.
name|disableHostNameVerification
operator|=
name|disableHostNameVerification
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|this
operator|.
name|baseDN
operator|=
name|config
operator|.
name|getProperty
argument_list|(
name|BASE_DN
argument_list|)
expr_stmt|;
name|this
operator|.
name|providerUrl
operator|=
name|config
operator|.
name|getProperty
argument_list|(
name|PROVIDER_URL
argument_list|)
expr_stmt|;
name|this
operator|.
name|ldapDomain
operator|=
name|config
operator|.
name|getProperty
argument_list|(
name|LDAP_BIND_DOMAIN
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableStartTls
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|ENABLE_START_TLS
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|providerUrl
argument_list|,
literal|"The LDAP URI can not be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|this
operator|.
name|baseDN
operator|==
literal|null
operator|)
operator|^
operator|(
name|this
operator|.
name|ldapDomain
operator|==
literal|null
operator|)
argument_list|,
literal|"Either LDAP base DN or LDAP domain value needs to be specified"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|enableStartTls
condition|)
block|{
name|String
name|tmp
init|=
name|this
operator|.
name|providerUrl
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|tmp
operator|.
name|startsWith
argument_list|(
literal|"ldaps"
argument_list|)
argument_list|,
literal|"Can not use ldaps and StartTLS option at the same time"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpConstants
operator|.
name|AUTHORIZATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorization
operator|==
literal|null
operator|||
operator|!
name|AuthenticationHandlerUtil
operator|.
name|matchAuthScheme
argument_list|(
name|HttpConstants
operator|.
name|BASIC
argument_list|,
name|authorization
argument_list|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|WWW_AUTHENTICATE
argument_list|,
name|HttpConstants
operator|.
name|BASIC
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
if|if
condition|(
name|authorization
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Basic auth starting"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"'"
operator|+
name|HttpConstants
operator|.
name|AUTHORIZATION_HEADER
operator|+
literal|"' does not start with '"
operator|+
name|HttpConstants
operator|.
name|BASIC
operator|+
literal|"' :  {}"
argument_list|,
name|authorization
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|authorization
operator|=
name|authorization
operator|.
name|substring
argument_list|(
name|HttpConstants
operator|.
name|BASIC
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
specifier|final
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// As per RFC7617, UTF-8 charset should be used for decoding.
name|String
index|[]
name|credentials
init|=
operator|new
name|String
argument_list|(
name|base64
operator|.
name|decode
argument_list|(
name|authorization
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentials
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|token
operator|=
name|authenticateUser
argument_list|(
name|credentials
index|[
literal|0
index|]
argument_list|,
name|credentials
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|token
return|;
block|}
DECL|method|authenticateUser (String userName, String password)
specifier|private
name|AuthenticationToken
name|authenticateUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
if|if
condition|(
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Error validating LDAP user:"
operator|+
literal|" a null or blank username has been provided"
argument_list|)
throw|;
block|}
comment|// If the domain is available in the config, then append it unless domain
comment|// is already part of the username. LDAP providers like Active Directory
comment|// use a fully qualified user name like foo@bar.com.
if|if
condition|(
operator|!
name|hasDomain
argument_list|(
name|userName
argument_list|)
operator|&&
name|ldapDomain
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|userName
operator|+
literal|"@"
operator|+
name|ldapDomain
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
operator|||
name|password
operator|.
name|isEmpty
argument_list|()
operator|||
name|password
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Error validating LDAP user:"
operator|+
literal|" a null or blank password has been provided"
argument_list|)
throw|;
block|}
comment|// setup the security principal
name|String
name|bindDN
decl_stmt|;
if|if
condition|(
name|baseDN
operator|==
literal|null
condition|)
block|{
name|bindDN
operator|=
name|userName
expr_stmt|;
block|}
else|else
block|{
name|bindDN
operator|=
literal|"uid="
operator|+
name|userName
operator|+
literal|","
operator|+
name|baseDN
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|enableStartTls
condition|)
block|{
name|authenticateWithTlsExtension
argument_list|(
name|bindDN
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authenticateWithoutTlsExtension
argument_list|(
name|bindDN
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AuthenticationToken
argument_list|(
name|userName
argument_list|,
name|userName
argument_list|,
name|TYPE
argument_list|)
return|;
block|}
DECL|method|authenticateWithTlsExtension (String userDN, String password)
specifier|private
name|void
name|authenticateWithTlsExtension
parameter_list|(
name|String
name|userDN
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|LdapContext
name|ctx
init|=
literal|null
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|providerUrl
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create initial context
name|ctx
operator|=
operator|new
name|InitialLdapContext
argument_list|(
name|env
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Establish TLS session
name|StartTlsResponse
name|tls
init|=
operator|(
name|StartTlsResponse
operator|)
name|ctx
operator|.
name|extendedOperation
argument_list|(
operator|new
name|StartTlsRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|disableHostNameVerification
condition|)
block|{
name|tls
operator|.
name|setHostnameVerifier
argument_list|(
operator|new
name|HostnameVerifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|verify
parameter_list|(
name|String
name|hostname
parameter_list|,
name|SSLSession
name|session
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|tls
operator|.
name|negotiate
argument_list|()
expr_stmt|;
comment|// Initialize security credentials& perform read operation for
comment|// verification.
name|ctx
operator|.
name|addToEnvironment
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
name|SECURITY_AUTHENTICATION
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addToEnvironment
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|userDN
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addToEnvironment
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|lookup
argument_list|(
name|userDN
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Authentication successful for {}"
argument_list|,
name|userDN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Error validating LDAP user"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|/* Ignore. */
block|}
block|}
block|}
block|}
DECL|method|authenticateWithoutTlsExtension (String userDN, String password)
specifier|private
name|void
name|authenticateWithoutTlsExtension
parameter_list|(
name|String
name|userDN
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|providerUrl
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
name|SECURITY_AUTHENTICATION
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|userDN
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|password
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Create initial context
name|Context
name|ctx
init|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Authentication successful for {}"
argument_list|,
name|userDN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Error validating LDAP user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|hasDomain (String userName)
specifier|private
specifier|static
name|boolean
name|hasDomain
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
operator|(
name|indexOfDomainMatch
argument_list|(
name|userName
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
comment|/*    * Get the index separating the user name from domain name (the user's name    * up to the first '/' or '@').    *    * @param userName full user name.    *    * @return index of domain match or -1 if not found    */
DECL|method|indexOfDomainMatch (String userName)
specifier|private
specifier|static
name|int
name|indexOfDomainMatch
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|idx
init|=
name|userName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|userName
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|int
name|endIdx
init|=
name|Math
operator|.
name|min
argument_list|(
name|idx
argument_list|,
name|idx2
argument_list|)
decl_stmt|;
comment|// Use the earlier match.
comment|// Unless at least one of '/' or '@' was not found, in
comment|// which case, user the latter match.
if|if
condition|(
name|endIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|endIdx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|idx
argument_list|,
name|idx2
argument_list|)
expr_stmt|;
block|}
return|return
name|endIdx
return|;
block|}
block|}
end_class

end_unit

