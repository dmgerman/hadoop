begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.alfredo.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|alfredo
operator|.
name|client
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestAuthenticatedURL
specifier|public
class|class
name|TestAuthenticatedURL
extends|extends
name|TestCase
block|{
DECL|method|testToken ()
specifier|public
name|void
name|testToken
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token1
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token2
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
name|token2
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|token2
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|token2
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|token2
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|token1
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|token2
operator|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|token1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|token2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token1
operator|.
name|equals
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testInjectToken ()
specifier|public
name|void
name|testInjectToken
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|token
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|AuthenticatedURL
operator|.
name|injectToken
argument_list|(
name|conn
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|conn
argument_list|)
operator|.
name|addRequestProperty
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractTokenOK ()
specifier|public
name|void
name|testExtractTokenOK
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
name|String
name|tokenStr
init|=
literal|"foo"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cookies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cookies
operator|.
name|add
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"Set-Cookie"
argument_list|,
name|cookies
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|getHeaderFields
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|AuthenticatedURL
operator|.
name|extractToken
argument_list|(
name|conn
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tokenStr
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtractTokenFail ()
specifier|public
name|void
name|testExtractTokenFail
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpURLConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|String
name|tokenStr
init|=
literal|"foo"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cookies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cookies
operator|.
name|add
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|+
literal|"="
operator|+
name|tokenStr
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"Set-Cookie"
argument_list|,
name|cookies
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|getHeaderFields
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|headers
argument_list|)
expr_stmt|;
try|try
block|{
name|AuthenticatedURL
operator|.
name|extractToken
argument_list|(
name|conn
argument_list|,
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

