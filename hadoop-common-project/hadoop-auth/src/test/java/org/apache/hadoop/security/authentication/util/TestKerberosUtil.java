begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|keytab
operator|.
name|Keytab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|keytab
operator|.
name|KeytabEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|type
operator|.
name|KerberosTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|type
operator|.
name|base
operator|.
name|EncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|type
operator|.
name|base
operator|.
name|EncryptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kerby
operator|.
name|kerberos
operator|.
name|kerb
operator|.
name|type
operator|.
name|base
operator|.
name|PrincipalName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKerberosUtil
specifier|public
class|class
name|TestKerberosUtil
block|{
DECL|field|testKeytab
specifier|static
name|String
name|testKeytab
init|=
literal|"test.keytab"
decl_stmt|;
DECL|field|testPrincipals
specifier|static
name|String
index|[]
name|testPrincipals
init|=
operator|new
name|String
index|[]
block|{
literal|"HTTP@testRealm"
block|,
literal|"test/testhost@testRealm"
block|,
literal|"HTTP/testhost@testRealm"
block|,
literal|"HTTP1/testhost@testRealm"
block|,
literal|"HTTP/testhostanother@testRealm"
block|}
decl_stmt|;
annotation|@
name|After
DECL|method|deleteKeytab ()
specifier|public
name|void
name|deleteKeytab
parameter_list|()
block|{
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|testKeytab
argument_list|)
decl_stmt|;
if|if
condition|(
name|keytabFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|keytabFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetServerPrincipal ()
specifier|public
name|void
name|testGetServerPrincipal
parameter_list|()
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|String
name|service
init|=
literal|"TestKerberosUtil"
decl_stmt|;
name|String
name|localHostname
init|=
name|KerberosUtil
operator|.
name|getLocalHostName
argument_list|()
decl_stmt|;
name|String
name|testHost
init|=
literal|"FooBar"
decl_stmt|;
name|String
name|defaultRealm
init|=
name|KerberosUtil
operator|.
name|getDefaultRealmProtected
argument_list|()
decl_stmt|;
name|String
name|atDefaultRealm
decl_stmt|;
if|if
condition|(
name|defaultRealm
operator|==
literal|null
operator|||
name|defaultRealm
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|atDefaultRealm
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|atDefaultRealm
operator|=
literal|"@"
operator|+
name|defaultRealm
expr_stmt|;
block|}
comment|// check that the test environment is as expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testGetServerPrincipal assumes localhost realm is default"
argument_list|,
name|KerberosUtil
operator|.
name|getDomainRealm
argument_list|(
name|service
operator|+
literal|"/"
operator|+
name|localHostname
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|,
name|defaultRealm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testGetServerPrincipal assumes realm of testHost 'FooBar' is default"
argument_list|,
name|KerberosUtil
operator|.
name|getDomainRealm
argument_list|(
name|service
operator|+
literal|"/"
operator|+
name|testHost
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|,
name|defaultRealm
argument_list|)
expr_stmt|;
comment|// send null hostname
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"When no hostname is sent"
argument_list|,
name|service
operator|+
literal|"/"
operator|+
name|localHostname
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
name|atDefaultRealm
argument_list|,
name|KerberosUtil
operator|.
name|getServicePrincipal
argument_list|(
name|service
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// send empty hostname
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"When empty hostname is sent"
argument_list|,
name|service
operator|+
literal|"/"
operator|+
name|localHostname
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
name|atDefaultRealm
argument_list|,
name|KerberosUtil
operator|.
name|getServicePrincipal
argument_list|(
name|service
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// send 0.0.0.0 hostname
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"When 0.0.0.0 hostname is sent"
argument_list|,
name|service
operator|+
literal|"/"
operator|+
name|localHostname
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
name|atDefaultRealm
argument_list|,
name|KerberosUtil
operator|.
name|getServicePrincipal
argument_list|(
name|service
argument_list|,
literal|"0.0.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// send uppercase hostname
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"When uppercase hostname is sent"
argument_list|,
name|service
operator|+
literal|"/"
operator|+
name|testHost
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
name|atDefaultRealm
argument_list|,
name|KerberosUtil
operator|.
name|getServicePrincipal
argument_list|(
name|service
argument_list|,
name|testHost
argument_list|)
argument_list|)
expr_stmt|;
comment|// send lowercase hostname
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"When lowercase hostname is sent"
argument_list|,
name|service
operator|+
literal|"/"
operator|+
name|testHost
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|+
name|atDefaultRealm
argument_list|,
name|KerberosUtil
operator|.
name|getServicePrincipal
argument_list|(
name|service
argument_list|,
name|testHost
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPrincipalNamesMissingKeytab ()
specifier|public
name|void
name|testGetPrincipalNamesMissingKeytab
parameter_list|()
block|{
try|try
block|{
name|KerberosUtil
operator|.
name|getPrincipalNames
argument_list|(
name|testKeytab
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//expects exception
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testGetPrincipalNamesMissingPattern ()
specifier|public
name|void
name|testGetPrincipalNamesMissingPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|createKeyTab
argument_list|(
name|testKeytab
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test/testhost@testRealm"
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|KerberosUtil
operator|.
name|getPrincipalNames
argument_list|(
name|testKeytab
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expects exception
block|}
block|}
annotation|@
name|Test
DECL|method|testGetPrincipalNamesFromKeytab ()
specifier|public
name|void
name|testGetPrincipalNamesFromKeytab
parameter_list|()
throws|throws
name|IOException
block|{
name|createKeyTab
argument_list|(
name|testKeytab
argument_list|,
name|testPrincipals
argument_list|)
expr_stmt|;
comment|// read all principals in the keytab file
name|String
index|[]
name|principals
init|=
name|KerberosUtil
operator|.
name|getPrincipalNames
argument_list|(
name|testKeytab
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"principals cannot be null"
argument_list|,
name|principals
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|principalList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|principals
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|principal
range|:
name|testPrincipals
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"missing principal "
operator|+
name|principal
argument_list|,
name|principalList
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSize
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|principals
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPrincipalNamesFromKeytabWithPattern ()
specifier|public
name|void
name|testGetPrincipalNamesFromKeytabWithPattern
parameter_list|()
throws|throws
name|IOException
block|{
name|createKeyTab
argument_list|(
name|testKeytab
argument_list|,
name|testPrincipals
argument_list|)
expr_stmt|;
comment|// read the keytab file
comment|// look for principals with HTTP as the first part
name|Pattern
name|httpPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"HTTP/.*"
argument_list|)
decl_stmt|;
name|String
index|[]
name|httpPrincipals
init|=
name|KerberosUtil
operator|.
name|getPrincipalNames
argument_list|(
name|testKeytab
argument_list|,
name|httpPattern
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"principals cannot be null"
argument_list|,
name|httpPrincipals
argument_list|)
expr_stmt|;
name|int
name|expectedSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|httpPrincipalList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|httpPrincipals
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|principal
range|:
name|testPrincipals
control|)
block|{
if|if
condition|(
name|httpPattern
operator|.
name|matcher
argument_list|(
name|principal
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"missing principal "
operator|+
name|principal
argument_list|,
name|httpPrincipalList
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|expectedSize
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|httpPrincipals
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeyTab (String fileName, String[] principalNames)
specifier|private
name|void
name|createKeyTab
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
index|[]
name|principalNames
parameter_list|)
throws|throws
name|IOException
block|{
comment|//create a test keytab file
name|List
argument_list|<
name|KeytabEntry
argument_list|>
name|lstEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|KeytabEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|principal
range|:
name|principalNames
control|)
block|{
comment|// create 3 versions of the key to ensure methods don't return
comment|// duplicate principals
for|for
control|(
name|int
name|kvno
init|=
literal|1
init|;
name|kvno
operator|<=
literal|3
condition|;
name|kvno
operator|++
control|)
block|{
name|EncryptionKey
name|key
init|=
operator|new
name|EncryptionKey
argument_list|(
name|EncryptionType
operator|.
name|NONE
argument_list|,
literal|"samplekey1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|kvno
argument_list|)
decl_stmt|;
name|KeytabEntry
name|keytabEntry
init|=
operator|new
name|KeytabEntry
argument_list|(
operator|new
name|PrincipalName
argument_list|(
name|principal
argument_list|)
argument_list|,
operator|new
name|KerberosTime
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|lstEntries
operator|.
name|add
argument_list|(
name|keytabEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|Keytab
name|keytab
init|=
operator|new
name|Keytab
argument_list|()
decl_stmt|;
name|keytab
operator|.
name|addKeytabEntries
argument_list|(
name|lstEntries
argument_list|)
expr_stmt|;
name|keytab
operator|.
name|store
argument_list|(
operator|new
name|File
argument_list|(
name|testKeytab
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

