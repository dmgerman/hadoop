begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|LdapAuthenticationHandler
operator|.
name|BASE_DN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|LdapAuthenticationHandler
operator|.
name|PROVIDER_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|LdapAuthenticationHandler
operator|.
name|TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|MultiSchemeAuthenticationHandler
operator|.
name|SCHEMES_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|MultiSchemeAuthenticationHandler
operator|.
name|AUTH_HANDLER_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
operator|.
name|NAME_RULES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|LdapConstants
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|HttpConstants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ContextEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreatePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|KerberosSecurityTestcase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|KerberosTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * This unit test verifies the functionality of "multi-scheme" auth handler.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|,
name|address
operator|=
name|LDAP_SERVER_ADDR
argument_list|)
block|,
block|}
argument_list|)
annotation|@
name|CreateDS
argument_list|(
name|allowAnonAccess
operator|=
literal|true
argument_list|,
name|partitions
operator|=
block|{
annotation|@
name|CreatePartition
argument_list|(
name|name
operator|=
literal|"Test_Partition"
argument_list|,
name|suffix
operator|=
name|LDAP_BASE_DN
argument_list|,
name|contextEntry
operator|=
annotation|@
name|ContextEntry
argument_list|(
name|entryLdif
operator|=
literal|"dn: "
operator|+
name|LDAP_BASE_DN
operator|+
literal|" \n"
operator|+
literal|"dc: example\n"
operator|+
literal|"objectClass: top\n"
operator|+
literal|"objectClass: domain\n\n"
argument_list|)
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifs
argument_list|(
block|{
literal|"dn: uid=bjones,"
operator|+
name|LDAP_BASE_DN
block|,
literal|"cn: Bob Jones"
block|,
literal|"sn: Jones"
block|,
literal|"objectClass: inetOrgPerson"
block|,
literal|"uid: bjones"
block|,
literal|"userPassword: p@ssw0rd"
block|}
argument_list|)
DECL|class|TestMultiSchemeAuthenticationHandler
specifier|public
class|class
name|TestMultiSchemeAuthenticationHandler
extends|extends
name|AbstractLdapTestUnit
block|{
DECL|field|krbTest
specifier|private
name|KerberosSecurityTestcase
name|krbTest
init|=
operator|new
name|KerberosSecurityTestcase
argument_list|()
decl_stmt|;
DECL|field|handler
specifier|private
name|MultiSchemeAuthenticationHandler
name|handler
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|krbTest
operator|.
name|startMiniKdc
argument_list|()
expr_stmt|;
comment|// create keytab
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clientPrinc
init|=
name|KerberosTestUtils
operator|.
name|getClientPrincipal
argument_list|()
decl_stmt|;
name|String
name|serverPrinc
init|=
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
name|clientPrinc
operator|=
name|clientPrinc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clientPrinc
operator|.
name|lastIndexOf
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|serverPrinc
operator|=
name|serverPrinc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|serverPrinc
operator|.
name|lastIndexOf
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|krbTest
operator|.
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|clientPrinc
argument_list|,
name|serverPrinc
argument_list|)
expr_stmt|;
comment|// configure handler
name|handler
operator|=
operator|new
name|MultiSchemeAuthenticationHandler
argument_list|()
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|init
argument_list|(
name|getDefaultProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|krbTest
operator|.
name|stopMiniKdc
argument_list|()
expr_stmt|;
block|}
DECL|method|getDefaultProperties ()
specifier|private
name|Properties
name|getDefaultProperties
parameter_list|()
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|SCHEMES_PROPERTY
argument_list|,
name|BASIC
operator|+
literal|","
operator|+
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AUTH_HANDLER_PROPERTY
argument_list|,
literal|"negotiate"
argument_list|)
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AUTH_HANDLER_PROPERTY
argument_list|,
literal|"basic"
argument_list|)
argument_list|,
literal|"ldap"
argument_list|)
expr_stmt|;
comment|// Kerberos related config
name|p
operator|.
name|setProperty
argument_list|(
name|PRINCIPAL
argument_list|,
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|KEYTAB
argument_list|,
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|NAME_RULES
argument_list|,
literal|"RULE:[1:$1@$0](.*@"
operator|+
name|KerberosTestUtils
operator|.
name|getRealm
argument_list|()
operator|+
literal|")s/@.*//\n"
argument_list|)
expr_stmt|;
comment|// LDAP related config
name|p
operator|.
name|setProperty
argument_list|(
name|BASE_DN
argument_list|,
name|LDAP_BASE_DN
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|PROVIDER_URL
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"ldap://%s:%s"
argument_list|,
name|LDAP_SERVER_ADDR
argument_list|,
name|getLdapServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRequestWithoutAuthorization ()
specifier|public
name|void
name|testRequestWithoutAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|WWW_AUTHENTICATE_HEADER
argument_list|,
name|BASIC
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|WWW_AUTHENTICATE_HEADER
argument_list|,
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRequestWithInvalidAuthorization ()
specifier|public
name|void
name|testRequestWithInvalidAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|credentials
init|=
literal|"bjones:invalidpassword"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|AUTHORIZATION_HEADER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|base64
operator|.
name|encodeToString
argument_list|(
name|credentials
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|WWW_AUTHENTICATE_HEADER
argument_list|,
name|BASIC
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|WWW_AUTHENTICATE_HEADER
argument_list|,
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRequestWithLdapAuthorization ()
specifier|public
name|void
name|testRequestWithLdapAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|credentials
init|=
name|base64
operator|.
name|encodeToString
argument_list|(
literal|"bjones:p@ssw0rd"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|authHeader
init|=
name|BASIC
operator|+
literal|" "
operator|+
name|credentials
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|AUTHORIZATION_HEADER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authHeader
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TYPE
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bjones"
argument_list|,
name|token
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bjones"
argument_list|,
name|token
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRequestWithInvalidKerberosAuthorization ()
specifier|public
name|void
name|testRequestWithInvalidKerberosAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|token
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
operator|.
name|encodeToString
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|AUTHORIZATION_HEADER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NEGOTIATE
operator|+
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong exception :"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

