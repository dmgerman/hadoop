begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRolloverSignerSecretProvider
specifier|public
class|class
name|TestRolloverSignerSecretProvider
block|{
annotation|@
name|Test
DECL|method|testGetAndRollSecrets ()
specifier|public
name|void
name|testGetAndRollSecrets
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|rolloverFrequency
init|=
literal|15
operator|*
literal|1000
decl_stmt|;
comment|// rollover every 15 sec
name|byte
index|[]
name|secret1
init|=
literal|"doctor"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret2
init|=
literal|"who"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret3
init|=
literal|"tardis"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|TRolloverSignerSecretProvider
name|secretProvider
init|=
operator|new
name|TRolloverSignerSecretProvider
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
name|secret1
block|,
name|secret2
block|,
name|secret3
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|secretProvider
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecret
init|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecrets
init|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|rolloverFrequency
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|rolloverFrequency
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|rolloverFrequency
operator|+
literal|2000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|secretProvider
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TRolloverSignerSecretProvider
class|class
name|TRolloverSignerSecretProvider
extends|extends
name|RolloverSignerSecretProvider
block|{
DECL|field|newSecretSequence
specifier|private
name|byte
index|[]
index|[]
name|newSecretSequence
decl_stmt|;
DECL|field|newSecretSequenceIndex
specifier|private
name|int
name|newSecretSequenceIndex
decl_stmt|;
DECL|method|TRolloverSignerSecretProvider (byte[][] newSecretSequence)
specifier|public
name|TRolloverSignerSecretProvider
parameter_list|(
name|byte
index|[]
index|[]
name|newSecretSequence
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|newSecretSequence
operator|=
name|newSecretSequence
expr_stmt|;
name|this
operator|.
name|newSecretSequenceIndex
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateNewSecret ()
specifier|protected
name|byte
index|[]
name|generateNewSecret
parameter_list|()
block|{
return|return
name|newSecretSequence
index|[
name|newSecretSequenceIndex
operator|++
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

