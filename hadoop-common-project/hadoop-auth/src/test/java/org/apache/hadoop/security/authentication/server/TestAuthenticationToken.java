begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestAuthenticationToken
specifier|public
class|class
name|TestAuthenticationToken
extends|extends
name|TestCase
block|{
DECL|method|testAnonymous ()
specifier|public
name|void
name|testAnonymous
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|AuthenticationToken
operator|.
name|ANONYMOUS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|AuthenticationToken
operator|.
name|ANONYMOUS
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|AuthenticationToken
operator|.
name|ANONYMOUS
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|AuthenticationToken
operator|.
name|ANONYMOUS
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|AuthenticationToken
operator|.
name|ANONYMOUS
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AuthenticationToken
operator|.
name|ANONYMOUS
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|null
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|null
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|""
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetters ()
specifier|public
name|void
name|testGetters
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|50
decl_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"u"
argument_list|,
name|token
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|token
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|token
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|70
argument_list|)
expr_stmt|;
comment|// +20 msec fuzz for timer granularity.
name|assertTrue
argument_list|(
name|token
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToStringAndParse ()
specifier|public
name|void
name|testToStringAndParse
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|50
decl_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
name|token
operator|=
name|AuthenticationToken
operator|.
name|parse
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|token
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"t"
argument_list|,
name|token
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expires
argument_list|,
name|token
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|token
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|70
argument_list|)
expr_stmt|;
comment|// +20 msec fuzz for timer granularity.
name|assertTrue
argument_list|(
name|token
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseInvalid ()
specifier|public
name|void
name|testParseInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|50
decl_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"e="
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|AuthenticationToken
operator|.
name|parse
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

