begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJaasConfiguration
specifier|public
class|class
name|TestJaasConfiguration
block|{
comment|// We won't test actually using it to authenticate because that gets messy and
comment|// may conflict with other tests; but we can test that it otherwise behaves
comment|// correctly
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|krb5LoginModuleName
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
name|krb5LoginModuleName
operator|=
literal|"com.ibm.security.auth.module.Krb5LoginModule"
expr_stmt|;
block|}
else|else
block|{
name|krb5LoginModuleName
operator|=
literal|"com.sun.security.auth.module.Krb5LoginModule"
expr_stmt|;
block|}
name|ZKSignerSecretProvider
operator|.
name|JaasConfiguration
name|jConf
init|=
operator|new
name|ZKSignerSecretProvider
operator|.
name|JaasConfiguration
argument_list|(
literal|"foo"
argument_list|,
literal|"foo/localhost"
argument_list|,
literal|"/some/location/foo.keytab"
argument_list|)
decl_stmt|;
name|AppConfigurationEntry
index|[]
name|entries
init|=
name|jConf
operator|.
name|getAppConfigurationEntry
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|entries
operator|=
name|jConf
operator|.
name|getAppConfigurationEntry
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
name|entry
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|entry
operator|.
name|getControlFlag
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|krb5LoginModuleName
argument_list|,
name|entry
operator|.
name|getLoginModuleName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/some/location/foo.keytab"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"keyTab"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo/localhost"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"principal"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"useKeyTab"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"storeKey"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"useTicketCache"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"refreshKrb5Config"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|options
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

