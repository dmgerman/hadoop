begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestZKSignerSecretProvider
specifier|public
class|class
name|TestZKSignerSecretProvider
block|{
DECL|field|zkServer
specifier|private
name|TestingServer
name|zkServer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|zkServer
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zkServer
operator|!=
literal|null
condition|)
block|{
name|zkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// Test just one ZKSignerSecretProvider to verify that it works in the
comment|// simplest case
DECL|method|testOne ()
specifier|public
name|void
name|testOne
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|rolloverFrequency
init|=
literal|15
operator|*
literal|1000
decl_stmt|;
comment|// rollover every 15 sec
comment|// use the same seed so we can predict the RNG
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProvider
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_CONNECTION_STRING
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_PATH
argument_list|,
literal|"/secret"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretProvider
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecret
init|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecrets
init|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|+
literal|2000
operator|)
argument_list|)
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|+
literal|2000
operator|)
argument_list|)
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|+
literal|2000
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|secretProvider
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleInit ()
specifier|public
name|void
name|testMultipleInit
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|rolloverFrequency
init|=
literal|15
operator|*
literal|1000
decl_stmt|;
comment|// rollover every 15 sec
comment|// use the same seed so we can predict the RNG
name|long
name|seedA
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seedA
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secretA2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// use the same seed so we can predict the RNG
name|long
name|seedB
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|seedB
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secretB2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// use the same seed so we can predict the RNG
name|long
name|seedC
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|seedC
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secretC2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretC1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProviderA
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seedA
argument_list|)
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProviderB
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seedB
argument_list|)
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProviderC
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seedC
argument_list|)
decl_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_CONNECTION_STRING
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_PATH
argument_list|,
literal|"/secret"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretProviderA
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|secretProviderB
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|secretProviderC
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecretA
init|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsA
init|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentSecretB
init|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsB
init|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentSecretC
init|=
name|secretProviderC
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsC
init|=
name|secretProviderC
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretA
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretB
argument_list|,
name|currentSecretC
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsB
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsC
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|0
index|]
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsB
index|[
literal|0
index|]
argument_list|,
name|allSecretsC
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsC
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|char
name|secretChosen
init|=
literal|'z'
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secretA1
argument_list|,
name|currentSecretA
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|secretChosen
operator|=
literal|'A'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secretB1
argument_list|,
name|currentSecretB
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretB1
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|secretChosen
operator|=
literal|'B'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secretC1
argument_list|,
name|currentSecretC
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretC1
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|secretChosen
operator|=
literal|'C'
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"It appears that they all agreed on the same secret, but "
operator|+
literal|"not one of the secrets they were supposed to"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|+
literal|2000
operator|)
argument_list|)
expr_stmt|;
name|currentSecretA
operator|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsA
operator|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|currentSecretB
operator|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsB
operator|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|currentSecretC
operator|=
name|secretProviderC
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsC
operator|=
name|secretProviderC
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretA
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretB
argument_list|,
name|currentSecretC
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsB
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsC
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|0
index|]
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsB
index|[
literal|0
index|]
argument_list|,
name|allSecretsC
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|,
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsB
index|[
literal|1
index|]
argument_list|,
name|allSecretsC
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// The second secret used is prechosen by whoever won the init; so it
comment|// should match with whichever we saw before
if|if
condition|(
name|secretChosen
operator|==
literal|'A'
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secretChosen
operator|==
literal|'B'
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretB2
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secretChosen
operator|==
literal|'C'
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretC2
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|secretProviderC
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|secretProviderB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleUnsychnronized ()
specifier|public
name|void
name|testMultipleUnsychnronized
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|rolloverFrequency
init|=
literal|15
operator|*
literal|1000
decl_stmt|;
comment|// rollover every 15 sec
comment|// use the same seed so we can predict the RNG
name|long
name|seedA
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seedA
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secretA2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// use the same seed so we can predict the RNG
name|long
name|seedB
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|seedB
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secretB2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProviderA
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seedA
argument_list|)
decl_stmt|;
name|ZKSignerSecretProvider
name|secretProviderB
init|=
operator|new
name|ZKSignerSecretProvider
argument_list|(
name|seedB
argument_list|)
decl_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_CONNECTION_STRING
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_PATH
argument_list|,
literal|"/secret"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretProviderA
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecretA
init|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsA
init|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|+
literal|2000
operator|)
argument_list|)
expr_stmt|;
name|currentSecretA
operator|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsA
operator|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsA
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|/
literal|5
operator|)
argument_list|)
expr_stmt|;
name|secretProviderB
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecretB
init|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsB
init|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|rolloverFrequency
operator|)
argument_list|)
expr_stmt|;
name|currentSecretA
operator|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsA
operator|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|currentSecretB
operator|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsB
operator|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretA
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsB
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|0
index|]
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|,
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secretA3
argument_list|,
name|currentSecretA
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA3
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secretB3
argument_list|,
name|currentSecretB
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretB3
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"It appears that they all agreed on the same secret, but "
operator|+
literal|"not one of the secrets they were supposed to"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|secretProviderB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDummyServletContext ()
specifier|private
name|ServletContext
name|getDummyServletContext
parameter_list|()
block|{
name|ServletContext
name|servletContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_SIGNER_SECRET_PROVIDER_CURATOR_CLIENT_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|servletContext
return|;
block|}
block|}
end_class

end_unit

