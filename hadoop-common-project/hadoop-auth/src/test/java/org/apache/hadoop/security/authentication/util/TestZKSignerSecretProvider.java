begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestZKSignerSecretProvider
specifier|public
class|class
name|TestZKSignerSecretProvider
block|{
DECL|field|zkServer
specifier|private
name|TestingServer
name|zkServer
decl_stmt|;
comment|// rollover every 2 sec
DECL|field|timeout
specifier|private
specifier|final
name|int
name|timeout
init|=
literal|100
decl_stmt|;
DECL|field|rolloverFrequency
specifier|private
specifier|final
name|long
name|rolloverFrequency
init|=
name|timeout
operator|/
literal|2
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestZKSignerSecretProvider
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RolloverSignerSecretProvider
operator|.
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|zkServer
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zkServer
operator|!=
literal|null
condition|)
block|{
name|zkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// Test just one ZKSignerSecretProvider to verify that it works in the
comment|// simplest case
DECL|method|testOne ()
specifier|public
name|void
name|testOne
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use the same seed so we can predict the RNG
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|MockZKSignerSecretProvider
name|secretProvider
init|=
name|spy
argument_list|(
operator|new
name|MockZKSignerSecretProvider
argument_list|(
name|seed
argument_list|)
argument_list|)
decl_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_CONNECTION_STRING
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_PATH
argument_list|,
literal|"/secret"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretProvider
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecret
init|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecrets
init|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|secretProvider
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A hack to test ZKSignerSecretProvider.    * We want to test that ZKSignerSecretProvider.rollSecret() is periodically    * called at the expected frequency, but we want to exclude the    * race-condition.    */
DECL|class|MockZKSignerSecretProvider
specifier|private
class|class
name|MockZKSignerSecretProvider
extends|extends
name|ZKSignerSecretProvider
block|{
DECL|method|MockZKSignerSecretProvider (long seed)
name|MockZKSignerSecretProvider
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|super
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rollSecret ()
specifier|protected
specifier|synchronized
name|void
name|rollSecret
parameter_list|()
block|{
comment|// this is a no-op: simply used for Mockito to verify that rollSecret()
comment|// is periodically called at the expected frequency
block|}
DECL|method|realRollSecret ()
specifier|public
name|void
name|realRollSecret
parameter_list|()
block|{
comment|// the test code manually calls ZKSignerSecretProvider.rollSecret()
comment|// to update the state
name|super
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiple1 ()
specifier|public
name|void
name|testMultiple1
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultiple
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiple2 ()
specifier|public
name|void
name|testMultiple2
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultiple
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param order:    *            1: secretProviderA wins both realRollSecret races    *            2: secretProviderA wins 1st race, B wins 2nd    * @throws Exception    */
DECL|method|testMultiple (int order)
specifier|public
name|void
name|testMultiple
parameter_list|(
name|int
name|order
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|seedA
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seedA
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secretA2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretA4
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// use the same seed so we can predict the RNG
name|long
name|seedB
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|seedB
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secretB2
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB1
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB3
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretB4
init|=
name|Long
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|MockZKSignerSecretProvider
name|secretProviderA
init|=
name|spy
argument_list|(
operator|new
name|MockZKSignerSecretProvider
argument_list|(
name|seedA
argument_list|)
argument_list|)
decl_stmt|;
name|MockZKSignerSecretProvider
name|secretProviderB
init|=
name|spy
argument_list|(
operator|new
name|MockZKSignerSecretProvider
argument_list|(
name|seedB
argument_list|)
argument_list|)
decl_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_CONNECTION_STRING
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_PATH
argument_list|,
literal|"/secret"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretProviderA
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|secretProviderB
operator|.
name|init
argument_list|(
name|config
argument_list|,
name|getDummyServletContext
argument_list|()
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecretA
init|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsA
init|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentSecretB
init|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecretsB
init|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsB
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProviderA
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|secretProviderB
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderB
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|currentSecretA
operator|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsA
operator|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|currentSecretA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsA
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|currentSecretB
operator|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsB
operator|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA2
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA1
argument_list|,
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProviderA
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|secretProviderB
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|order
condition|)
block|{
case|case
literal|1
case|:
name|secretProviderA
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderB
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderB
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|secretProviderB
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderB
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid order selected"
argument_list|)
throw|;
block|}
name|currentSecretA
operator|=
name|secretProviderA
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsA
operator|=
name|secretProviderA
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|currentSecretB
operator|=
name|secretProviderB
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecretsB
operator|=
name|secretProviderB
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|currentSecretA
argument_list|,
name|currentSecretB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsA
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecretsB
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|0
index|]
argument_list|,
name|allSecretsB
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|allSecretsA
index|[
literal|1
index|]
argument_list|,
name|allSecretsB
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|order
condition|)
block|{
case|case
literal|1
case|:
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretA4
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secretB4
argument_list|,
name|allSecretsA
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
finally|finally
block|{
name|secretProviderB
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|secretProviderA
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDummyServletContext ()
specifier|private
name|ServletContext
name|getDummyServletContext
parameter_list|()
block|{
name|ServletContext
name|servletContext
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_SIGNER_SECRET_PROVIDER_CURATOR_CLIENT_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|servletContext
return|;
block|}
block|}
end_class

end_unit

