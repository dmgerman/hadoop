begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|KerberosSecurityTestcase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|KerberosTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Tests for Kerberos Authentication Handler.  */
end_comment

begin_class
DECL|class|TestKerberosAuthenticationHandler
specifier|public
class|class
name|TestKerberosAuthenticationHandler
extends|extends
name|KerberosSecurityTestcase
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
name|Timeout
operator|.
name|millis
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
DECL|field|handler
specifier|protected
name|KerberosAuthenticationHandler
name|handler
decl_stmt|;
DECL|method|getNewAuthenticationHandler ()
specifier|protected
name|KerberosAuthenticationHandler
name|getNewAuthenticationHandler
parameter_list|()
block|{
return|return
operator|new
name|KerberosAuthenticationHandler
argument_list|()
return|;
block|}
DECL|method|getExpectedType ()
specifier|protected
name|String
name|getExpectedType
parameter_list|()
block|{
return|return
name|KerberosAuthenticationHandler
operator|.
name|TYPE
return|;
block|}
DECL|method|getDefaultProperties ()
specifier|protected
name|Properties
name|getDefaultProperties
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|NAME_RULES
argument_list|,
literal|"RULE:[1:$1@$0](.*@"
operator|+
name|KerberosTestUtils
operator|.
name|getRealm
argument_list|()
operator|+
literal|")s/@.*//\n"
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create keytab
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clientPrincipal
init|=
name|KerberosTestUtils
operator|.
name|getClientPrincipal
argument_list|()
decl_stmt|;
name|String
name|serverPrincipal
init|=
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
name|clientPrincipal
operator|=
name|clientPrincipal
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clientPrincipal
operator|.
name|lastIndexOf
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|serverPrincipal
operator|=
name|serverPrincipal
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|serverPrincipal
operator|.
name|lastIndexOf
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|clientPrincipal
argument_list|,
name|serverPrincipal
argument_list|)
expr_stmt|;
comment|// handler
name|handler
operator|=
name|getNewAuthenticationHandler
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
name|getDefaultProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNameRules ()
specifier|public
name|void
name|testNameRules
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosName
name|kn
init|=
operator|new
name|KerberosName
argument_list|(
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosTestUtils
operator|.
name|getRealm
argument_list|()
argument_list|,
name|kn
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
comment|//destroy handler created in setUp()
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|KerberosName
operator|.
name|setRules
argument_list|(
literal|"RULE:[1:$1@$0](.*@FOO)s/@.*//\nDEFAULT"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|getNewAuthenticationHandler
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
name|getDefaultProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|NAME_RULES
argument_list|,
literal|"RULE:[1:$1@$0](.*@BAR)s/@.*//\nDEFAULT"
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
name|kn
operator|=
operator|new
name|KerberosName
argument_list|(
literal|"bar@BAR"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|kn
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|kn
operator|=
operator|new
name|KerberosName
argument_list|(
literal|"bar@FOO"
argument_list|)
expr_stmt|;
try|try
block|{
name|kn
operator|.
name|getShortName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|,
name|handler
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|KerberosPrincipal
argument_list|>
name|principals
init|=
name|handler
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|Principal
name|expectedPrincipal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|principals
operator|.
name|contains
argument_list|(
name|expectedPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|principals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests dynamic configuration of HTTP principals.     * @throws Exception    */
annotation|@
name|Test
DECL|method|testDynamicPrincipalDiscovery ()
specifier|public
name|void
name|testDynamicPrincipalDiscovery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|keytabUsers
init|=
operator|new
name|String
index|[]
block|{
literal|"HTTP/host1"
block|,
literal|"HTTP/host2"
block|,
literal|"HTTP2/host1"
block|,
literal|"XHTTP/host"
block|}
decl_stmt|;
name|String
name|keytab
init|=
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
decl_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
operator|new
name|File
argument_list|(
name|keytab
argument_list|)
argument_list|,
name|keytabUsers
argument_list|)
expr_stmt|;
comment|// destroy handler created in setUp()
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|getNewAuthenticationHandler
argument_list|()
expr_stmt|;
name|handler
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|,
name|handler
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|KerberosPrincipal
argument_list|>
name|loginPrincipals
init|=
name|handler
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|keytabUsers
control|)
block|{
name|Principal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
name|user
operator|+
literal|"@"
operator|+
name|KerberosTestUtils
operator|.
name|getRealm
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|expected
init|=
name|user
operator|.
name|startsWith
argument_list|(
literal|"HTTP/"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"checking for "
operator|+
name|user
argument_list|,
name|expected
argument_list|,
name|loginPrincipals
operator|.
name|contains
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests dynamic principal discovery for missing principals.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDynamicPrincipalDiscoveryMissingPrincipals ()
specifier|public
name|void
name|testDynamicPrincipalDiscoveryMissingPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|keytabUsers
init|=
operator|new
name|String
index|[]
block|{
literal|"hdfs/localhost"
block|}
decl_stmt|;
name|String
name|keytab
init|=
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
decl_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
operator|new
name|File
argument_list|(
name|keytab
argument_list|)
argument_list|,
name|keytabUsers
argument_list|)
expr_stmt|;
comment|// destroy handler created in setUp()
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|getNewAuthenticationHandler
argument_list|()
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"init should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Principals do not exist in the keytab"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"wrong exception: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testType ()
specifier|public
name|void
name|testType
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedType
argument_list|()
argument_list|,
name|handler
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestWithoutAuthorization ()
specifier|public
name|void
name|testRequestWithoutAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|,
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestWithInvalidAuthorization ()
specifier|public
name|void
name|testRequestWithInvalidAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|,
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestWithIncompleteAuthorization ()
specifier|public
name|void
name|testRequestWithIncompleteAuthorization
parameter_list|()
block|{
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRequestWithAuthorization ()
specifier|public
name|void
name|testRequestWithAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|token
init|=
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|GSSManager
name|gssManager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|GSSContext
name|gssContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|servicePrincipal
init|=
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
name|Oid
name|oid
init|=
name|KerberosUtil
operator|.
name|getOidInstance
argument_list|(
literal|"NT_GSS_KRB5_PRINCIPAL"
argument_list|)
decl_stmt|;
name|GSSName
name|serviceName
init|=
name|gssManager
operator|.
name|createName
argument_list|(
name|servicePrincipal
argument_list|,
name|oid
argument_list|)
decl_stmt|;
name|oid
operator|=
name|KerberosUtil
operator|.
name|getOidInstance
argument_list|(
literal|"GSS_KRB5_MECH_OID"
argument_list|)
expr_stmt|;
name|gssContext
operator|=
name|gssManager
operator|.
name|createContext
argument_list|(
name|serviceName
argument_list|,
name|oid
argument_list|,
literal|null
argument_list|,
name|GSSContext
operator|.
name|DEFAULT_LIFETIME
argument_list|)
expr_stmt|;
name|gssContext
operator|.
name|requestCredDeleg
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gssContext
operator|.
name|requestMutualAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|inToken
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|outToken
init|=
name|gssContext
operator|.
name|initSecContext
argument_list|(
name|inToken
argument_list|,
literal|0
argument_list|,
name|inToken
operator|.
name|length
argument_list|)
decl_stmt|;
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|base64
operator|.
name|encodeToString
argument_list|(
name|outToken
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|gssContext
operator|!=
literal|null
condition|)
block|{
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
literal|" "
operator|+
name|token
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|authToken
init|=
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|authToken
operator|!=
literal|null
condition|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|matches
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
literal|" .*"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosTestUtils
operator|.
name|getClientPrincipal
argument_list|()
argument_list|,
name|authToken
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|KerberosTestUtils
operator|.
name|getClientPrincipal
argument_list|()
operator|.
name|startsWith
argument_list|(
name|authToken
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedType
argument_list|()
argument_list|,
name|authToken
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|matches
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
literal|" .*"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRequestWithInvalidKerberosAuthorization ()
specifier|public
name|void
name|testRequestWithInvalidKerberosAuthorization
parameter_list|()
block|{
name|String
name|token
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
operator|.
name|encodeToString
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|AUTHORIZATION
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KerberosAuthenticator
operator|.
name|NEGOTIATE
operator|+
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

