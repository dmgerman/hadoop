begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpCookie
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|SignerSecretProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|StringSignerSecretProviderCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestAuthenticationFilter
specifier|public
class|class
name|TestAuthenticationFilter
block|{
DECL|field|TOKEN_VALIDITY_SEC
specifier|private
specifier|static
specifier|final
name|long
name|TOKEN_VALIDITY_SEC
init|=
literal|1000
decl_stmt|;
DECL|field|TOKEN_MAX_INACTIVE_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|TOKEN_MAX_INACTIVE_INTERVAL
init|=
literal|1000
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetConfiguration ()
specifier|public
name|void
name|testGetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|CONFIG_PREFIX
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|filter
operator|.
name|getConfiguration
argument_list|(
literal|""
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|CONFIG_PREFIX
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"foo.a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo.a"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|=
name|filter
operator|.
name|getConfiguration
argument_list|(
literal|"foo."
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitEmpty ()
specifier|public
name|void
name|testInitEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
comment|// Expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Authentication type must be specified: simple|kerberos|<class>"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DummyAuthenticationHandler
specifier|public
specifier|static
class|class
name|DummyAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
DECL|field|init
specifier|public
specifier|static
name|boolean
name|init
decl_stmt|;
DECL|field|managementOperationReturn
specifier|public
specifier|static
name|boolean
name|managementOperationReturn
decl_stmt|;
DECL|field|destroy
specifier|public
specifier|static
name|boolean
name|destroy
decl_stmt|;
DECL|field|expired
specifier|public
specifier|static
name|boolean
name|expired
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"dummy"
decl_stmt|;
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|init
operator|=
literal|false
expr_stmt|;
name|destroy
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|init
operator|=
literal|true
expr_stmt|;
name|managementOperationReturn
operator|=
name|config
operator|.
name|getProperty
argument_list|(
literal|"management.operation.return"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|expired
operator|=
name|config
operator|.
name|getProperty
argument_list|(
literal|"expired.token"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
if|if
condition|(
operator|!
name|managementOperationReturn
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|)
expr_stmt|;
block|}
return|return
name|managementOperationReturn
return|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|destroy
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
name|String
name|param
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"authenticated"
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
operator|&&
name|param
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
operator|(
name|expired
operator|)
condition|?
literal|0
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"dummyauth"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"AUTH FAILED"
argument_list|)
throw|;
block|}
block|}
return|return
name|token
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFallbackToRandomSecretProvider ()
specifier|public
name|void
name|testFallbackToRandomSecretProvider
parameter_list|()
throws|throws
name|Exception
block|{
comment|// minimal configuration& simple auth handler (Pseudo)
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
operator|new
name|Long
argument_list|(
name|TOKEN_VALIDITY_SEC
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNER_SECRET_PROVIDER_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|class
argument_list|,
name|filter
operator|.
name|getAuthenticationHandler
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|isRandomSecret
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|isCustomSignerSecretProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|filter
operator|.
name|getCookieDomain
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|filter
operator|.
name|getCookiePath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TOKEN_VALIDITY_SEC
argument_list|,
name|filter
operator|.
name|getValidity
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInit ()
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// custom secret as inline
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNER_SECRET_PROVIDER_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SignerSecretProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|,
name|long
name|tokenValidity
parameter_list|)
block|{               }
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getCurrentSecret
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
index|[]
name|getAllSecrets
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|isRandomSecret
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|filter
operator|.
name|isCustomSignerSecretProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|// custom secret by file
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"target/test-dir"
argument_list|)
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|secretValue
init|=
literal|"hadoop"
decl_stmt|;
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"http-secret.txt"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|secretValue
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|AuthenticationFilter
argument_list|()
expr_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET_FILE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET_FILE
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNER_SECRET_PROVIDER_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|isRandomSecret
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|filter
operator|.
name|isCustomSignerSecretProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|// custom cookie domain and cookie path
name|filter
operator|=
operator|new
name|AuthenticationFilter
argument_list|()
expr_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_DOMAIN
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|".foo.com"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|COOKIE_DOMAIN
argument_list|,
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|".foo.com"
argument_list|,
name|filter
operator|.
name|getCookieDomain
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|filter
operator|.
name|getCookiePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|// authentication handler lifecycle, and custom impl
name|DummyAuthenticationHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|filter
operator|=
operator|new
name|AuthenticationFilter
argument_list|()
expr_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|init
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|destroy
argument_list|)
expr_stmt|;
block|}
comment|// kerberos auth handler
name|filter
operator|=
operator|new
name|AuthenticationFilter
argument_list|()
expr_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletContext
name|sc
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"kerberos"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
finally|finally
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|class
argument_list|,
name|filter
operator|.
name|getAuthenticationHandler
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitCaseSensitivity ()
specifier|public
name|void
name|testInitCaseSensitivity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// minimal configuration& simple auth handler (Pseudo)
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"SimPle"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
operator|new
name|Long
argument_list|(
name|TOKEN_VALIDITY_SEC
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|class
argument_list|,
name|filter
operator|.
name|getAuthenticationHandler
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetRequestURL ()
specifier|public
name|void
name|testGetRequestURL
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"a=A&b=B"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://foo:8080/bar?a=A&b=B"
argument_list|,
name|filter
operator|.
name|getRequestURL
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetToken ()
specifier|public
name|void
name|testGetToken
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
name|DummyAuthenticationHandler
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|newToken
init|=
name|filter
operator|.
name|getToken
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|,
name|newToken
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetTokenExpired ()
specifier|public
name|void
name|testGetTokenExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
name|DummyAuthenticationHandler
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|filter
operator|.
name|getToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AuthenticationToken expired"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"token not expired"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetTokenInvalidType ()
specifier|public
name|void
name|testGetTokenInvalidType
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"invalidtype"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|filter
operator|.
name|getToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Invalid AuthenticationToken type"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"token not invalid type"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMockedServletContextWithStringSigner ( FilterConfig config)
specifier|private
specifier|static
name|SignerSecretProvider
name|getMockedServletContextWithStringSigner
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|ServletContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNER_SECRET_PROVIDER_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|secretProvider
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|secretProvider
return|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterNotAuthenticated ()
specifier|public
name|void
name|testDoFilterNotAuthenticated
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
expr|<
name|ServletRequest
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ServletResponse
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|response
operator|.
name|containsHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|,
literal|"Authentication required"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|_testDoFilterAuthentication (boolean withDomainPath, boolean invalidToken, boolean expired)
specifier|private
name|void
name|_testDoFilterAuthentication
parameter_list|(
name|boolean
name|withDomainPath
parameter_list|,
name|boolean
name|invalidToken
parameter_list|,
name|boolean
name|expired
parameter_list|)
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"expired.token"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|expired
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|TOKEN_VALIDITY_SEC
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation"
operator|+
literal|".return"
argument_list|,
literal|"expired.token"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|withDomainPath
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_DOMAIN
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|".foo.com"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_VALIDITY
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|AuthenticationFilter
operator|.
name|COOKIE_DOMAIN
argument_list|,
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"authenticated"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"authenticated=true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalidToken
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
literal|"foo"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookieMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|cookieHeader
init|=
operator|(
name|String
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|parseCookieMap
argument_list|(
name|cookieHeader
argument_list|,
name|cookieMap
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Set-Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
if|if
condition|(
name|expired
condition|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Set-Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|v
init|=
name|cookieMap
operator|.
name|get
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"cookie missing"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|contains
argument_list|(
literal|"u="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"p="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"t="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"e="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"s="
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|AuthenticationToken
name|token
init|=
name|AuthenticationToken
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getExpires
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|withDomainPath
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|".foo.com"
argument_list|,
name|cookieMap
operator|.
name|get
argument_list|(
literal|"Domain"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/bar"
argument_list|,
name|cookieMap
operator|.
name|get
argument_list|(
literal|"Path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cookieMap
operator|.
name|containsKey
argument_list|(
literal|"Domain"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cookieMap
operator|.
name|containsKey
argument_list|(
literal|"Path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|parseCookieMap (String cookieHeader, Map<String, String> cookieMap)
specifier|private
specifier|static
name|void
name|parseCookieMap
parameter_list|(
name|String
name|cookieHeader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookieMap
parameter_list|)
block|{
name|List
argument_list|<
name|HttpCookie
argument_list|>
name|cookies
init|=
name|HttpCookie
operator|.
name|parse
argument_list|(
name|cookieHeader
argument_list|)
decl_stmt|;
for|for
control|(
name|HttpCookie
name|cookie
range|:
name|cookies
control|)
block|{
if|if
condition|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
operator|.
name|equals
argument_list|(
name|cookie
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|cookieMap
operator|.
name|put
argument_list|(
name|cookie
operator|.
name|getName
argument_list|()
argument_list|,
name|cookie
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cookie
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cookieMap
operator|.
name|put
argument_list|(
literal|"Path"
argument_list|,
name|cookie
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cookie
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cookieMap
operator|.
name|put
argument_list|(
literal|"Domain"
argument_list|,
name|cookie
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthentication ()
specifier|public
name|void
name|testDoFilterAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|_testDoFilterAuthentication
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticationImmediateExpiration ()
specifier|public
name|void
name|testDoFilterAuthenticationImmediateExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|_testDoFilterAuthentication
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticationWithInvalidToken ()
specifier|public
name|void
name|testDoFilterAuthenticationWithInvalidToken
parameter_list|()
throws|throws
name|Exception
block|{
name|_testDoFilterAuthentication
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticationWithDomainPath ()
specifier|public
name|void
name|testDoFilterAuthenticationWithDomainPath
parameter_list|()
throws|throws
name|Exception
block|{
name|_testDoFilterAuthentication
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticated ()
specifier|public
name|void
name|testDoFilterAuthenticated
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"u"
argument_list|,
name|request
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|request
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
expr|<
name|ServletRequest
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ServletResponse
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticationFailure ()
specifier|public
name|void
name|testDoFilterAuthenticationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"dummyauth"
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookieMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|parseCookieMap
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
name|cookieMap
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Set-Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"shouldn't get here"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
expr|<
name|ServletRequest
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|ServletResponse
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"AUTH FAILED"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|cookieMap
operator|.
name|get
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"cookie missing"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticatedExpired ()
specifier|public
name|void
name|testDoFilterAuthenticatedExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|secret
init|=
literal|"secret"
decl_stmt|;
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
name|DummyAuthenticationHandler
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|response
operator|.
name|containsHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyUnauthorized
argument_list|(
name|filter
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testDoFilterAuthenticationAuthorized ()
name|testDoFilterAuthenticationAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Both expired period and MaxInActiveInterval are not reached.
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|boolean
name|authorized
init|=
literal|true
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
name|expires
argument_list|,
name|authorized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testDoFilterAuthenticationUnauthorizedExpired ()
name|testDoFilterAuthenticationUnauthorizedExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expired period is reached, MaxInActiveInterval is not reached.
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|boolean
name|authorized
init|=
literal|false
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
name|expires
argument_list|,
name|authorized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testDoFilterAuthenticationUnauthorizedInactived ()
name|testDoFilterAuthenticationUnauthorizedInactived
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expired period is not reached, MaxInActiveInterval is reached.
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|boolean
name|authorized
init|=
literal|false
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
name|expires
argument_list|,
name|authorized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testDoFilterAuthenticationUnauthorizedInactivedExpired ()
name|testDoFilterAuthenticationUnauthorizedInactivedExpired
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Both expired period and MaxInActiveInterval is reached.
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|boolean
name|authorized
init|=
literal|false
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
name|expires
argument_list|,
name|authorized
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenWithValidActivityInterval ()
specifier|public
name|void
name|testTokenWithValidActivityInterval
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Provide token containing valid maxInactive value.
comment|// The token is active.
comment|// The server has maxInactiveInterval configured to -1.(disabled)
comment|// The server shall authorize the access, but should not drop a new cookie
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
operator|-
literal|1
argument_list|,
name|expires
argument_list|,
literal|true
argument_list|,
comment|//authorized
literal|false
comment|//newCookie
argument_list|)
expr_stmt|;
comment|// Provide token containing valid maxInactive value.
comment|// The token is active.
comment|// The server has maxInactiveInterval configured to value
comment|// greater than 0.(enabled)
comment|// The server shall authorize the access and drop a new cookie
comment|// with renewed activity interval
name|maxInactives
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_MAX_INACTIVE_INTERVAL
expr_stmt|;
name|expires
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
expr_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
name|TOKEN_MAX_INACTIVE_INTERVAL
argument_list|,
name|expires
argument_list|,
literal|true
argument_list|,
comment|//authorized
literal|true
comment|//newCookie
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenWithExpiredActivityIntervaln ()
specifier|public
name|void
name|testTokenWithExpiredActivityIntervaln
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Provide token containing invalid maxInactive value.
comment|// The token is inactive.
comment|// The server has maxInactiveInterval configured to -1.(disabled)
comment|// The server should deny access and expire the token.
name|long
name|maxInactives
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TOKEN_MAX_INACTIVE_INTERVAL
decl_stmt|;
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
operator|-
literal|1
argument_list|,
name|expires
argument_list|,
literal|false
argument_list|,
comment|//authorized
literal|false
comment|//newCookie
argument_list|)
expr_stmt|;
comment|// Provide token containing invalid maxInactive value.
comment|// The token is inactive.
comment|// The server has maxInactiveInterval configured to value
comment|// greater than 0.(enabled)
comment|// The server should deny access and expire the token.
name|maxInactives
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_MAX_INACTIVE_INTERVAL
expr_stmt|;
name|expires
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
expr_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactives
argument_list|,
operator|-
literal|1
argument_list|,
name|expires
argument_list|,
literal|true
argument_list|,
comment|//authorized
literal|false
comment|//newCookie
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenWithNoActivityIntervals ()
specifier|public
name|void
name|testTokenWithNoActivityIntervals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Provide token which does not contain maxInactive value.
comment|// The server has maxInactiveInterval configured to -1.
comment|// The server shall authorize the access, but should not drop a new cookie
name|long
name|expires
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
decl_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|expires
argument_list|,
literal|true
argument_list|,
comment|//authorized
literal|false
comment|//newCookie
argument_list|)
expr_stmt|;
comment|// Provide token which does not contain  maxInactive value.
comment|// The server has maxInactiveInterval to some value
comment|// The server shall authorize the access and drop a new cookie
comment|// with renewed activity interval
name|expires
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
expr_stmt|;
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
operator|-
literal|1
argument_list|,
name|TOKEN_MAX_INACTIVE_INTERVAL
argument_list|,
name|expires
argument_list|,
literal|true
argument_list|,
comment|//authorized
literal|true
comment|//newCookie
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
DECL|method|_testDoFilterAuthenticationMaxInactiveInterval (long maxInactivesInToken, long expires, boolean authorized)
name|_testDoFilterAuthenticationMaxInactiveInterval
parameter_list|(
name|long
name|maxInactivesInToken
parameter_list|,
name|long
name|expires
parameter_list|,
name|boolean
name|authorized
parameter_list|)
throws|throws
name|Exception
block|{
name|_testDoFilterAuthenticationMaxInactiveInterval
argument_list|(
name|maxInactivesInToken
argument_list|,
name|TOKEN_MAX_INACTIVE_INTERVAL
argument_list|,
name|expires
argument_list|,
name|authorized
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
DECL|method|_testDoFilterAuthenticationMaxInactiveInterval (long maxInactivesInToken, long maxInactivesOnServer, long expires, boolean authorized, boolean newCookie)
name|_testDoFilterAuthenticationMaxInactiveInterval
parameter_list|(
name|long
name|maxInactivesInToken
parameter_list|,
name|long
name|maxInactivesOnServer
parameter_list|,
name|long
name|expires
parameter_list|,
name|boolean
name|authorized
parameter_list|,
name|boolean
name|newCookie
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|secret
init|=
literal|"secret"
decl_stmt|;
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_MAX_INACTIVE_INTERVAL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|maxInactivesOnServer
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|AuthenticationFilter
operator|.
name|AUTH_TOKEN_MAX_INACTIVE_INTERVAL
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
name|DummyAuthenticationHandler
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|token
operator|.
name|setMaxInactives
argument_list|(
name|maxInactivesInToken
argument_list|)
expr_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|response
operator|.
name|containsHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorized
condition|)
block|{
name|verifyAuthorized
argument_list|(
name|filter
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|,
name|newCookie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyUnauthorized
argument_list|(
name|filter
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyAuthorized (AuthenticationFilter filter, HttpServletRequest request, HttpServletResponse response, FilterChain chain, boolean newCookie)
specifier|private
specifier|static
name|void
name|verifyAuthorized
parameter_list|(
name|AuthenticationFilter
name|filter
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|,
name|boolean
name|newCookie
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookieMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|cookieHeader
init|=
operator|(
name|String
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|parseCookieMap
argument_list|(
name|cookieHeader
argument_list|,
name|cookieMap
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Set-Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
if|if
condition|(
name|newCookie
condition|)
block|{
comment|// a new cookie should be dropped when maxInactiveInterval is enabled
name|String
name|v
init|=
name|cookieMap
operator|.
name|get
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"cookie missing"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|contains
argument_list|(
literal|"u="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"p="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"t="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"i="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"e="
argument_list|)
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"s="
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|AuthenticationToken
name|token
init|=
name|AuthenticationToken
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getMaxInactives
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getExpires
argument_list|()
argument_list|,
name|not
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Token is expired."
argument_list|,
name|token
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//make sure that no auth cookie is dropped.
comment|//For unauthorized response, auth cookie is dropped with empty value
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"cookie is present"
argument_list|,
operator|!
name|cookieMap
operator|.
name|containsKey
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyUnauthorized (AuthenticationFilter filter, HttpServletRequest request, HttpServletResponse response, FilterChain chain)
specifier|private
specifier|static
name|void
name|verifyUnauthorized
parameter_list|(
name|AuthenticationFilter
name|filter
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|//For unauthorized response, a cookie is dropped with empty string as value
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cookieMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|cookieHeader
init|=
operator|(
name|String
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|parseCookieMap
argument_list|(
name|cookieHeader
argument_list|,
name|cookieMap
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Set-Cookie"
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|chain
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|doFilter
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"cookie is missing"
argument_list|,
name|cookieMap
operator|.
name|containsKey
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|cookieMap
operator|.
name|get
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoFilterAuthenticatedInvalidType ()
specifier|public
name|void
name|testDoFilterAuthenticatedInvalidType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|secret
init|=
literal|"secret"
decl_stmt|;
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"invalidtype"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|secret
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|response
operator|.
name|containsHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyUnauthorized
argument_list|(
name|filter
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testManagementOperation ()
specifier|public
name|void
name|testManagementOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
try|try
block|{
name|FilterConfig
name|config
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameter
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|config
operator|.
name|getInitParameterNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"management.operation.return"
argument_list|)
argument_list|)
operator|.
name|elements
argument_list|()
argument_list|)
expr_stmt|;
name|getMockedServletContextWithStringSigner
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://foo:8080/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TOKEN_VALIDITY_SEC
argument_list|)
expr_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|String
name|tokenSigned
init|=
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticatedURL
operator|.
name|AUTH_COOKIE
argument_list|,
name|tokenSigned
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getCookies
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Cookie
index|[]
block|{
name|cookie
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|filter
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

