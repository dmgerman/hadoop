begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_comment
comment|/**  * A SignerSecretProvider that simply creates a secret based on a given String.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|VisibleForTesting
DECL|class|StringSignerSecretProvider
class|class
name|StringSignerSecretProvider
extends|extends
name|SignerSecretProvider
block|{
DECL|field|secret
specifier|private
name|byte
index|[]
name|secret
decl_stmt|;
DECL|field|secrets
specifier|private
name|byte
index|[]
index|[]
name|secrets
decl_stmt|;
DECL|method|StringSignerSecretProvider ()
specifier|public
name|StringSignerSecretProvider
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|init (Properties config, ServletContext servletContext, long tokenValidity)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|,
name|long
name|tokenValidity
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|signatureSecret
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|secret
operator|=
name|signatureSecret
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|secrets
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
name|secret
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentSecret ()
specifier|public
name|byte
index|[]
name|getCurrentSecret
parameter_list|()
block|{
return|return
name|secret
return|;
block|}
annotation|@
name|Override
DECL|method|getAllSecrets ()
specifier|public
name|byte
index|[]
index|[]
name|getAllSecrets
parameter_list|()
block|{
return|return
name|secrets
return|;
block|}
block|}
end_class

end_unit

