begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|TestRandomSignerSecretProvider
specifier|public
class|class
name|TestRandomSignerSecretProvider
block|{
comment|// rollover every 50 msec
DECL|field|timeout
specifier|private
specifier|final
name|int
name|timeout
init|=
literal|100
decl_stmt|;
DECL|field|rolloverFrequency
specifier|private
specifier|final
name|long
name|rolloverFrequency
init|=
name|timeout
operator|/
literal|2
decl_stmt|;
block|{
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RolloverSignerSecretProvider
operator|.
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAndRollSecrets ()
specifier|public
name|void
name|testGetAndRollSecrets
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use the same seed and a "plain" Random so we can predict the RNG
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret1
init|=
name|generateNewSecret
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret2
init|=
name|generateNewSecret
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret3
init|=
name|generateNewSecret
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|MockRandomSignerSecretProvider
name|secretProvider
init|=
name|spy
argument_list|(
operator|new
name|MockRandomSignerSecretProvider
argument_list|(
name|seed
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|secretProvider
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|rolloverFrequency
argument_list|)
expr_stmt|;
name|byte
index|[]
name|currentSecret
init|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|allSecrets
init|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret1
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
name|currentSecret
operator|=
name|secretProvider
operator|.
name|getCurrentSecret
argument_list|()
expr_stmt|;
name|allSecrets
operator|=
name|secretProvider
operator|.
name|getAllSecrets
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|currentSecret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allSecrets
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret3
argument_list|,
name|allSecrets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|secret2
argument_list|,
name|allSecrets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretProvider
argument_list|,
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|secretProvider
operator|.
name|realRollSecret
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|secretProvider
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A hack to test RandomSignerSecretProvider.    * We want to test that RandomSignerSecretProvider.rollSecret() is    * periodically called at the expected frequency, but we want to exclude the    * race-condition and not take a long time to run the test.    */
DECL|class|MockRandomSignerSecretProvider
specifier|private
class|class
name|MockRandomSignerSecretProvider
extends|extends
name|RandomSignerSecretProvider
block|{
DECL|method|MockRandomSignerSecretProvider (long seed)
name|MockRandomSignerSecretProvider
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|super
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rollSecret ()
specifier|protected
specifier|synchronized
name|void
name|rollSecret
parameter_list|()
block|{
comment|// this is a no-op: simply used for Mockito to verify that rollSecret()
comment|// is periodically called at the expected frequency
block|}
DECL|method|realRollSecret ()
specifier|public
name|void
name|realRollSecret
parameter_list|()
block|{
comment|// the test code manually calls RandomSignerSecretProvider.rollSecret()
comment|// to update the state
name|super
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|generateNewSecret (Random rand)
specifier|private
name|byte
index|[]
name|generateNewSecret
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|byte
index|[]
name|secret
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|secret
argument_list|)
expr_stmt|;
return|return
name|secret
return|;
block|}
block|}
end_class

end_unit

