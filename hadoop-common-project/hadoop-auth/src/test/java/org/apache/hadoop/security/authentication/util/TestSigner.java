begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSigner
specifier|public
class|class
name|TestSigner
block|{
annotation|@
name|Test
DECL|method|testNullAndEmptyString ()
specifier|public
name|void
name|testNullAndEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|StringSignerSecretProvider
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|signer
operator|.
name|sign
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|signer
operator|.
name|sign
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSignature ()
specifier|public
name|void
name|testSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|StringSignerSecretProvider
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s1
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"ok"
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"ok"
argument_list|)
decl_stmt|;
name|String
name|s3
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"wrong"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|s1
argument_list|,
name|s3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerify ()
specifier|public
name|void
name|testVerify
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|StringSignerSecretProvider
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|t
init|=
literal|"test"
decl_stmt|;
name|String
name|s
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|String
name|e
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidSignedText ()
specifier|public
name|void
name|testInvalidSignedText
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|StringSignerSecretProvider
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|signer
operator|.
name|verifyAndExtract
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignerException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTampering ()
specifier|public
name|void
name|testTampering
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|StringSignerSecretProvider
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|t
init|=
literal|"test"
decl_stmt|;
name|String
name|s
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|s
operator|+=
literal|"x"
expr_stmt|;
try|try
block|{
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignerException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipleSecrets ()
specifier|public
name|void
name|testMultipleSecrets
parameter_list|()
throws|throws
name|Exception
block|{
name|TestSignerSecretProvider
name|secretProvider
init|=
operator|new
name|TestSignerSecretProvider
argument_list|()
decl_stmt|;
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
decl_stmt|;
name|secretProvider
operator|.
name|setCurrentSecret
argument_list|(
literal|"secretB"
argument_list|)
expr_stmt|;
name|String
name|t1
init|=
literal|"test"
decl_stmt|;
name|String
name|s1
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|String
name|e1
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t1
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|setPreviousSecret
argument_list|(
literal|"secretA"
argument_list|)
expr_stmt|;
name|String
name|t2
init|=
literal|"test"
decl_stmt|;
name|String
name|s2
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t2
argument_list|)
decl_stmt|;
name|String
name|e2
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t2
argument_list|,
name|e2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
comment|//check is using current secret for signing
name|secretProvider
operator|.
name|setCurrentSecret
argument_list|(
literal|"secretC"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|setPreviousSecret
argument_list|(
literal|"secretB"
argument_list|)
expr_stmt|;
name|String
name|t3
init|=
literal|"test"
decl_stmt|;
name|String
name|s3
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t3
argument_list|)
decl_stmt|;
name|String
name|e3
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t3
argument_list|,
name|e3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|s1
argument_list|,
name|s3
argument_list|)
expr_stmt|;
comment|//check not using current secret for signing
name|String
name|e1b
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t1
argument_list|,
name|e1b
argument_list|)
expr_stmt|;
comment|// previous secret still valid
name|secretProvider
operator|.
name|setCurrentSecret
argument_list|(
literal|"secretD"
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|setPreviousSecret
argument_list|(
literal|"secretC"
argument_list|)
expr_stmt|;
try|try
block|{
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s1
argument_list|)
expr_stmt|;
comment|// previous secret no longer valid
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignerException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
block|}
DECL|class|TestSignerSecretProvider
class|class
name|TestSignerSecretProvider
extends|extends
name|SignerSecretProvider
block|{
DECL|field|currentSecret
specifier|private
name|byte
index|[]
name|currentSecret
decl_stmt|;
DECL|field|previousSecret
specifier|private
name|byte
index|[]
name|previousSecret
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Properties config, long tokenValidity)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|,
name|long
name|tokenValidity
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getCurrentSecret ()
specifier|public
name|byte
index|[]
name|getCurrentSecret
parameter_list|()
block|{
return|return
name|currentSecret
return|;
block|}
annotation|@
name|Override
DECL|method|getAllSecrets ()
specifier|public
name|byte
index|[]
index|[]
name|getAllSecrets
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
name|currentSecret
block|,
name|previousSecret
block|}
return|;
block|}
DECL|method|setCurrentSecret (String secretStr)
specifier|public
name|void
name|setCurrentSecret
parameter_list|(
name|String
name|secretStr
parameter_list|)
block|{
name|currentSecret
operator|=
name|secretStr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|setPreviousSecret (String previousSecretStr)
specifier|public
name|void
name|setPreviousSecret
parameter_list|(
name|String
name|previousSecretStr
parameter_list|)
block|{
name|previousSecret
operator|=
name|previousSecretStr
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

