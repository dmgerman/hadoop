begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authentication.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestSigner
specifier|public
class|class
name|TestSigner
extends|extends
name|TestCase
block|{
DECL|method|testNoSecret ()
specifier|public
name|void
name|testNoSecret
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|Signer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{     }
block|}
DECL|method|testNullAndEmptyString ()
specifier|public
name|void
name|testNullAndEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|signer
operator|.
name|sign
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|signer
operator|.
name|sign
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSignature ()
specifier|public
name|void
name|testSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s1
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"ok"
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"ok"
argument_list|)
decl_stmt|;
name|String
name|s3
init|=
name|signer
operator|.
name|sign
argument_list|(
literal|"wrong"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s3
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerify ()
specifier|public
name|void
name|testVerify
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|t
init|=
literal|"test"
decl_stmt|;
name|String
name|s
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|String
name|e
init|=
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidSignedText ()
specifier|public
name|void
name|testInvalidSignedText
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|signer
operator|.
name|verifyAndExtract
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignerException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTampering ()
specifier|public
name|void
name|testTampering
parameter_list|()
throws|throws
name|Exception
block|{
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
literal|"secret"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|t
init|=
literal|"test"
decl_stmt|;
name|String
name|s
init|=
name|signer
operator|.
name|sign
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|s
operator|+=
literal|"x"
expr_stmt|;
try|try
block|{
name|signer
operator|.
name|verifyAndExtract
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SignerException
name|ex
parameter_list|)
block|{
comment|// Expected
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

