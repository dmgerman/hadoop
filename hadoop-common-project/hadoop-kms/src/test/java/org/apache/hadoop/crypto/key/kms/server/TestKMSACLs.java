begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKMSACLs
specifier|public
class|class
name|TestKMSACLs
block|{
annotation|@
name|Test
DECL|method|testDefaults ()
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustom ()
specifier|public
name|void
name|testCustom
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

