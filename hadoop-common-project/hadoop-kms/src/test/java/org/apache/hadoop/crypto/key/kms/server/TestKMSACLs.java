begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KMSConfiguration
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KeyAuthorizationKeyProvider
operator|.
name|KeyOpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_class
DECL|class|TestKMSACLs
specifier|public
class|class
name|TestKMSACLs
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
specifier|final
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180000
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaults ()
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
specifier|final
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustom ()
specifier|public
name|void
name|testCustom
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|final
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|acls
operator|.
name|hasAccess
argument_list|(
name|type
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKeyAclConfigurationLoad ()
specifier|public
name|void
name|testKeyAclConfigurationLoad
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_1.MANAGEMENT"
argument_list|,
literal|"CREATE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_2.ALL"
argument_list|,
literal|"CREATE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_3.NONEXISTOPERATION"
argument_list|,
literal|"CREATE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"ALL"
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"ALL"
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
specifier|final
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected key ACL size is 2 but got "
operator|+
name|acls
operator|.
name|keyAcls
operator|.
name|size
argument_list|()
argument_list|,
name|acls
operator|.
name|keyAcls
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected whitelist ACL size is 1 but got "
operator|+
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|size
argument_list|()
argument_list|,
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"ALL should not be allowed for whitelist ACLs."
argument_list|,
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|containsKey
argument_list|(
name|KeyOpType
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected default ACL size is 1 but got "
operator|+
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|size
argument_list|()
argument_list|,
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ALL should not be allowed for default ACLs."
argument_list|,
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyAclDuplicateEntries ()
specifier|public
name|void
name|testKeyAclDuplicateEntries
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_1.DECRYPT_EEK"
argument_list|,
literal|"decrypt1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_2.ALL"
argument_list|,
literal|"all2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_1.DECRYPT_EEK"
argument_list|,
literal|"decrypt2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"test_key_2.ALL"
argument_list|,
literal|"all1,all3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"default1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"whitelist1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
specifier|final
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected key ACL size is 2 but got "
operator|+
name|acls
operator|.
name|keyAcls
operator|.
name|size
argument_list|()
argument_list|,
name|acls
operator|.
name|keyAcls
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertKeyAcl
argument_list|(
literal|"test_key_1"
argument_list|,
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"decrypt2"
argument_list|)
expr_stmt|;
name|assertKeyAcl
argument_list|(
literal|"test_key_2"
argument_list|,
name|acls
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|,
literal|"all1"
argument_list|,
literal|"all3"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
expr_stmt|;
name|AccessControlList
name|acl
init|=
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|get
argument_list|(
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acl
operator|.
name|isAllAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyAclReload ()
specifier|public
name|void
name|testKeyAclReload
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"READ"
argument_list|,
literal|"read1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"decrypt1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"testuser1.ALL"
argument_list|,
literal|"testkey1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"READ"
argument_list|,
literal|"admin_read1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"admin_decrypt1"
argument_list|)
expr_stmt|;
specifier|final
name|KMSACLs
name|acls
init|=
operator|new
name|KMSACLs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// update config and hot-reload.
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"READ"
argument_list|,
literal|"read2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"mgmt1,mgmt2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"decrypt2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KEY_ACL
operator|+
literal|"testkey1.ALL"
argument_list|,
literal|"testkey1,testkey2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"READ"
argument_list|,
literal|"admin_read2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"admin_mgmt,admin_mgmt1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"admin_decrypt2"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|setKeyACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"read2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"mgmt1"
argument_list|,
literal|"mgmt2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"decrypt2"
argument_list|)
expr_stmt|;
name|assertKeyAcl
argument_list|(
literal|"testuser1"
argument_list|,
name|acls
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|,
literal|"testkey1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"admin_read2"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"admin_mgmt"
argument_list|,
literal|"admin_mgmt1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"admin_decrypt2"
argument_list|)
expr_stmt|;
comment|// reloading same config, nothing should change.
name|acls
operator|.
name|setKeyACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"read2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"mgmt1"
argument_list|,
literal|"mgmt2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"decrypt2"
argument_list|)
expr_stmt|;
name|assertKeyAcl
argument_list|(
literal|"testuser1"
argument_list|,
name|acls
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|,
literal|"testkey1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"admin_read2"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"admin_mgmt"
argument_list|,
literal|"admin_mgmt1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"admin_decrypt2"
argument_list|)
expr_stmt|;
comment|// test wildcard.
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|setKeyACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AccessControlList
name|acl
init|=
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|get
argument_list|(
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acl
operator|.
name|isAllAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acl
operator|.
name|getUsers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// everything else should still be the same.
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"read2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"mgmt1"
argument_list|,
literal|"mgmt2"
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertKeyAcl
argument_list|(
literal|"testuser1"
argument_list|,
name|acls
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|,
literal|"testkey1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|READ
argument_list|,
literal|"admin_read2"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|,
literal|"admin_mgmt"
argument_list|,
literal|"admin_mgmt1"
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
expr_stmt|;
name|assertWhitelistKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"admin_decrypt2"
argument_list|)
expr_stmt|;
comment|// test new configuration should clear other items
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"DECRYPT_EEK"
argument_list|,
literal|"new"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|setKeyACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertDefaultKeyAcl
argument_list|(
name|acls
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"new"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|keyAcls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Got unexpected sized acls:"
operator|+
name|acls
operator|.
name|defaultKeyAcls
argument_list|,
literal|1
argument_list|,
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDefaultKeyAcl (final KMSACLs acls, final KeyOpType op, final String... names)
specifier|private
name|void
name|assertDefaultKeyAcl
parameter_list|(
specifier|final
name|KMSACLs
name|acls
parameter_list|,
specifier|final
name|KeyOpType
name|op
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
block|{
specifier|final
name|AccessControlList
name|acl
init|=
name|acls
operator|.
name|defaultKeyAcls
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|assertAcl
argument_list|(
name|acl
argument_list|,
name|op
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
DECL|method|assertWhitelistKeyAcl (final KMSACLs acls, final KeyOpType op, final String... names)
specifier|private
name|void
name|assertWhitelistKeyAcl
parameter_list|(
specifier|final
name|KMSACLs
name|acls
parameter_list|,
specifier|final
name|KeyOpType
name|op
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
block|{
specifier|final
name|AccessControlList
name|acl
init|=
name|acls
operator|.
name|whitelistKeyAcls
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|assertAcl
argument_list|(
name|acl
argument_list|,
name|op
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKeyAcl (final String keyName, final KMSACLs acls, final KeyOpType op, final String... names)
specifier|private
name|void
name|assertKeyAcl
parameter_list|(
specifier|final
name|String
name|keyName
parameter_list|,
specifier|final
name|KMSACLs
name|acls
parameter_list|,
specifier|final
name|KeyOpType
name|op
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|acls
operator|.
name|keyAcls
operator|.
name|containsKey
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|KeyOpType
argument_list|,
name|AccessControlList
argument_list|>
name|keyacl
init|=
name|acls
operator|.
name|keyAcls
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|keyacl
operator|.
name|get
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcl
argument_list|(
name|keyacl
operator|.
name|get
argument_list|(
name|op
argument_list|)
argument_list|,
name|op
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcl (final AccessControlList acl, final KeyOpType op, final String... names)
specifier|private
name|void
name|assertAcl
parameter_list|(
specifier|final
name|AccessControlList
name|acl
parameter_list|,
specifier|final
name|KeyOpType
name|op
parameter_list|,
specifier|final
name|String
modifier|...
name|names
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|acl
operator|.
name|isAllAllowed
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|actual
init|=
name|acl
operator|.
name|getUsers
argument_list|()
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"defaultKeyAcls don't match for op:"
operator|+
name|op
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

