begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KeyAuthorizationKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
DECL|class|TestKMS
specifier|public
class|class
name|TestKMS
block|{
annotation|@
name|Before
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
comment|// resetting kerberos security
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestDir ()
specifier|public
specifier|static
name|File
name|getTestDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create test directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|class|KMSCallable
specifier|public
specifier|static
specifier|abstract
class|class
name|KMSCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|kmsUrl
specifier|private
name|URL
name|kmsUrl
decl_stmt|;
DECL|method|getKMSUrl ()
specifier|protected
name|URL
name|getKMSUrl
parameter_list|()
block|{
return|return
name|kmsUrl
return|;
block|}
block|}
DECL|method|runServer (String keystore, String password, File confDir, KMSCallable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|runServer
parameter_list|(
name|String
name|keystore
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|confDir
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runServer
argument_list|(
operator|-
literal|1
argument_list|,
name|keystore
argument_list|,
name|password
argument_list|,
name|confDir
argument_list|,
name|callable
argument_list|)
return|;
block|}
DECL|method|runServer (int port, String keystore, String password, File confDir, KMSCallable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|runServer
parameter_list|(
name|int
name|port
parameter_list|,
name|String
name|keystore
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|confDir
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniKMS
operator|.
name|Builder
name|miniKMSBuilder
init|=
operator|new
name|MiniKMS
operator|.
name|Builder
argument_list|()
operator|.
name|setKmsConfDir
argument_list|(
name|confDir
argument_list|)
operator|.
name|setLog4jConfFile
argument_list|(
literal|"log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystore
operator|!=
literal|null
condition|)
block|{
name|miniKMSBuilder
operator|.
name|setSslConf
argument_list|(
operator|new
name|File
argument_list|(
name|keystore
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|miniKMSBuilder
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|MiniKMS
name|miniKMS
init|=
name|miniKMSBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|miniKMS
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test KMS running at: "
operator|+
name|miniKMS
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
expr_stmt|;
name|callable
operator|.
name|kmsUrl
operator|=
name|miniKMS
operator|.
name|getKMSUrl
argument_list|()
expr_stmt|;
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
name|miniKMS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createBaseKMSConf (File keyStoreDir)
specifier|protected
name|Configuration
name|createBaseKMSConf
parameter_list|(
name|File
name|keyStoreDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|KEY_PROVIDER_URI
argument_list|,
literal|"jceks://file@"
operator|+
operator|new
name|Path
argument_list|(
name|keyStoreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"kms.keystore"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|writeConf (File confDir, Configuration conf)
specifier|public
specifier|static
name|void
name|writeConf
parameter_list|(
name|File
name|confDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|KMSConfiguration
operator|.
name|KMS_SITE_XML
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|KMSConfiguration
operator|.
name|KMS_ACLS_XML
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//create empty core-site.xml
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"core-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createKMSUri (URL kmsUrl)
specifier|public
specifier|static
name|URI
name|createKMSUri
parameter_list|(
name|URL
name|kmsUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|str
init|=
name|kmsUrl
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceFirst
argument_list|(
literal|"://"
argument_list|,
literal|"@"
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
literal|"kms://"
operator|+
name|str
argument_list|)
return|;
block|}
DECL|class|KerberosConfiguration
specifier|private
specifier|static
class|class
name|KerberosConfiguration
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|field|keytab
specifier|private
name|String
name|keytab
decl_stmt|;
DECL|field|isInitiator
specifier|private
name|boolean
name|isInitiator
decl_stmt|;
DECL|method|KerberosConfiguration (String principal, File keytab, boolean client)
specifier|private
name|KerberosConfiguration
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|,
name|boolean
name|client
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytab
operator|=
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|this
operator|.
name|isInitiator
operator|=
name|client
expr_stmt|;
block|}
DECL|method|createClientConfig ( String principal, File keytab)
specifier|public
specifier|static
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
name|createClientConfig
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
return|return
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getKrb5LoginModuleName ()
specifier|private
specifier|static
name|String
name|getKrb5LoginModuleName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|?
literal|"com.ibm.security.auth.module.Krb5LoginModule"
else|:
literal|"com.sun.security.auth.module.Krb5LoginModule"
return|;
block|}
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useTicketCache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isInitiator
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ticketCache
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KRB5CCNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticketCache
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"ticketCache"
argument_list|,
name|ticketCache
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|}
return|;
block|}
block|}
DECL|field|kdc
specifier|private
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|keytab
specifier|private
specifier|static
name|File
name|keytab
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpMiniKdc ()
specifier|public
specifier|static
name|void
name|setUpMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|kdcDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|kdcDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|keytab
operator|=
operator|new
name|File
argument_list|(
name|kdcDir
argument_list|,
literal|"keytab"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|principals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"otheradmin"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client/host"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client1"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|principals
operator|.
name|add
argument_list|(
literal|"CREATE_MATERIAL"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"ROLLOVER_MATERIAL"
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|principals
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownMiniKdc ()
specifier|public
specifier|static
name|void
name|tearDownMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doAs (String user, final PrivilegedExceptionAction<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAs
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|//client login
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|LoginContext
name|loginContext
init|=
operator|new
name|LoginContext
argument_list|(
literal|""
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
name|KerberosConfiguration
operator|.
name|createClientConfig
argument_list|(
name|user
argument_list|,
name|keytab
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
name|subject
operator|=
name|loginContext
operator|.
name|getSubject
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
return|return
name|ugi
operator|.
name|doAs
argument_list|(
name|action
argument_list|)
return|;
block|}
finally|finally
block|{
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testStartStop (final boolean ssl, final boolean kerberos)
specifier|public
name|void
name|testStartStop
parameter_list|(
specifier|final
name|boolean
name|ssl
parameter_list|,
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keystore
decl_stmt|;
specifier|final
name|String
name|password
decl_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestKMS
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keystore
operator|=
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/serverKS.jks"
expr_stmt|;
name|password
operator|=
literal|"serverP"
expr_stmt|;
block|}
else|else
block|{
name|keystore
operator|=
literal|null
expr_stmt|;
name|password
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
block|}
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
name|keystore
argument_list|,
name|password
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|getKMSUrl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keystore
operator|!=
literal|null
argument_list|,
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
for|for
control|(
name|String
name|user
range|:
operator|new
name|String
index|[]
block|{
literal|"client"
block|,
literal|"client/host"
block|}
control|)
block|{
name|doAs
argument_list|(
name|user
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
operator|(
operator|(
name|KMSClientProvider
operator|)
name|kp
operator|)
operator|.
name|addDelegationTokens
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"kms-dt"
argument_list|,
name|tokens
index|[
literal|0
index|]
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpPseudo ()
specifier|public
name|void
name|testStartStopHttpPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpsPseudo ()
specifier|public
name|void
name|testStartStopHttpsPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpKerberos ()
specifier|public
name|void
name|testStartStopHttpKerberos
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpsKerberos ()
specifier|public
name|void
name|testStartStopHttpsKerberos
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSProvider ()
specifier|public
name|void
name|testKMSProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.MANAGEMENT"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.READ"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k4.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k5.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k6.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|started
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kp
operator|.
name|getKeysMetadata
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// createKey()
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"l1"
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv0
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyVersion()
name|KeyProvider
operator|.
name|KeyVersion
name|kv1
init|=
name|kp
operator|.
name|getKeyVersion
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|kv1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getCurrent()
name|KeyProvider
operator|.
name|KeyVersion
name|cv1
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|cv1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyMetadata() 1 version
name|KeyProvider
operator|.
name|Metadata
name|m1
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|m1
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|m1
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|m1
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|m1
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|m1
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeyVersions() 1 version
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|lkv1
init|=
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lkv1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// rollNewVersion()
name|KeyProvider
operator|.
name|KeyVersion
name|kv2
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv2
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyVersion()
name|kv2
operator|=
name|kp
operator|.
name|getKeyVersion
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|eq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kv1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eq
operator|=
name|eq
operator|&&
name|kv1
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|kv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|eq
argument_list|)
expr_stmt|;
comment|// getCurrent()
name|KeyProvider
operator|.
name|KeyVersion
name|cv2
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|cv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cv2
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|eq
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kv1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eq
operator|=
name|eq
operator|&&
name|cv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|kv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eq
argument_list|)
expr_stmt|;
comment|// getKeyVersions() 2 versions
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|lkv2
init|=
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lkv2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lkv2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lkv2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyMetadata() 2 version
name|KeyProvider
operator|.
name|Metadata
name|m2
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|m2
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|m2
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|m2
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|m2
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|m2
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|m2
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeys() 1 key
name|List
argument_list|<
name|String
argument_list|>
name|ks1
init|=
name|kp
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ks1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k1"
argument_list|,
name|ks1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() 1 key 2 versions
name|KeyProvider
operator|.
name|Metadata
index|[]
name|kms1
init|=
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kms1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kms1
index|[
literal|0
index|]
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|kms1
index|[
literal|0
index|]
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test generate and decryption of EEK
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|kpExt
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1a
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1a
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
name|boolean
name|isEq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|isEq
operator|&&
name|i
operator|<
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|isEq
operator|=
name|k2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|k1
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isEq
argument_list|)
expr_stmt|;
comment|// deleteKey()
name|kp
operator|.
name|deleteKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
comment|// getKey()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeyVersions()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getMetadata()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kp
operator|.
name|getKeysMetadata
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// createKey() no description, no tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|KeyVersion
name|kVer2
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|Metadata
name|meta
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k2"
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"key.acl.name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test key ACL.. k2 is granted only MANAGEMENT Op access
try|try
block|{
name|kpExt
operator|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kVer2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should not be allowed to encrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//
block|}
comment|// createKey() description, no tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k3"
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"key.acl.name"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
comment|// createKey() no description, tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"k4"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k4"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k4"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// createKey() description, tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"k5"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k5"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// test delegation token retrieval
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"foo"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|kmsAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|getKMSUrl
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|getKMSUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"kms-dt"
argument_list|)
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|kmsAddr
argument_list|)
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
comment|// test rollover draining
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|kpce
operator|.
name|createKey
argument_list|(
literal|"k6"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv1
init|=
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k6"
argument_list|)
decl_stmt|;
name|kpce
operator|.
name|rollNewVersion
argument_list|(
literal|"k6"
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv2
init|=
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k6"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|ekv1
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|ekv2
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyACLs ()
specifier|public
name|void
name|testKeyACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"test_key.MANAGEMENT"
argument_list|,
literal|"CREATE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"all_access.ALL"
argument_list|,
literal|"GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"all_access.DECRYPT_EEK"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k0"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyVersion
name|rollVersion
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rollVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [CREATE] should not be allowed to generate_eek on k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [CREATE] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key2"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyVersion
name|rollVersion
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rollVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to rollover k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to generate_eek on k1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GET] should not be allowed to create key.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GET] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|EncryptedKeyVersion
name|ekv
init|=
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"kx"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GENERATE_EEK] should be allowed to generate_eek on kx"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpce
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSRestartKerberosAuth ()
specifier|public
name|void
name|testKMSRestartKerberosAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSRestart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSRestartSimpleAuth ()
specifier|public
name|void
name|testKMSRestartSimpleAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSRestart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doKMSRestart (boolean useKrb)
specifier|public
name|void
name|doKMSRestart
parameter_list|(
name|boolean
name|useKrb
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|useKrb
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
name|c
init|=
operator|new
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|kp
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|KeyProvider
name|retKp
init|=
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
name|c
argument_list|)
decl_stmt|;
comment|// Restart server (using the same port)
name|runServer
argument_list|(
name|c
operator|.
name|getKMSUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|retKp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|retKp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSAuthFailureRetry ()
specifier|public
name|void
name|testKMSAuthFailureRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k4.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|makeAuthTokenStale
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test retry count
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KMSClientProvider
operator|.
name|AUTH_RETRY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|makeAuthTokenStale
argument_list|(
name|kp
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k4"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Shoud fail since retry count == 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HTTP exception must be a 403 : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"403"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|makeAuthTokenStale (KMSClientProvider kp)
specifier|private
name|void
name|makeAuthTokenStale
parameter_list|(
name|KMSClientProvider
name|kp
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|tokF
init|=
name|KMSClientProvider
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"authToken"
argument_list|)
decl_stmt|;
name|tokF
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|delToken
init|=
operator|(
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
operator|)
name|tokF
operator|.
name|get
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|String
name|oldTokStr
init|=
name|delToken
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Method
name|setM
init|=
name|AuthenticatedURL
operator|.
name|Token
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"set"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|setM
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|newTokStr
init|=
name|oldTokStr
operator|.
name|replaceAll
argument_list|(
literal|"e=[^&]*"
argument_list|,
literal|"e=1000"
argument_list|)
decl_stmt|;
name|setM
operator|.
name|invoke
argument_list|(
operator|(
operator|(
name|AuthenticatedURL
operator|.
name|Token
operator|)
name|delToken
operator|)
argument_list|,
name|newTokStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testACLs ()
specifier|public
name|void
name|testACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
comment|//nothing allowed
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// we are using JavaKeyStoreProvider for testing, so we know how
comment|// the keyversion is created.
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k@0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"DELETE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|deleteKey
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|KeyVersion
name|currKv
init|=
name|doAs
argument_list|(
literal|"GET"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
expr_stmt|;
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
return|return
name|kv
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|EncryptedKeyVersion
name|encKv
init|=
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|ek1
init|=
name|kpCE
operator|.
name|generateEncryptedKey
argument_list|(
name|currKv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ek1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"DECRYPT_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpCE
operator|.
name|decryptEncryptedKey
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET_KEYS"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET_METADATA"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//stop the reloader, to avoid running while we are writing the new file
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|stopReloader
argument_list|()
expr_stmt|;
comment|// test ACL reloading
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// to ensure the ACLs file modifiedTime is newer
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// forcing a reload by hand.
comment|// should not be able to create a key now
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSBlackList ()
specifier|public
name|void
name|testKMSBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getBlacklistConfigKey
argument_list|()
argument_list|,
literal|"hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"ck0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"ck1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck0"
argument_list|)
decl_stmt|;
name|kp
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"hdfs"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck1"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck1"
argument_list|)
decl_stmt|;
name|kp
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"admin user must not be allowed to decrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{             }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"otheradmin"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck2"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck2"
argument_list|)
decl_stmt|;
name|kp
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"admin user must not be allowed to decrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{             }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServicePrincipalACLs ()
specifier|public
name|void
name|testServicePrincipalACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"client,client/host"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|64
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"client/host"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck1"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the configurable timeout in the KMSClientProvider.  Open up a    * socket, but don't accept connections for it.  This leads to a timeout    * when the KMS client attempts to connect.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKMSTimeout ()
specifier|public
name|void
name|testKMSTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KMSClientProvider
operator|.
name|TIMEOUT_ATTR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ServerSocket
name|sock
decl_stmt|;
name|int
name|port
decl_stmt|;
try|try
block|{
name|sock
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|port
operator|=
name|sock
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* Problem creating socket?  Just bail. */
return|return;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/kms"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|boolean
name|caughtTimeout
init|=
literal|false
decl_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|caughtTimeout
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
operator|.
name|generateEncryptedKey
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|caughtTimeout
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
operator|.
name|decryptEncryptedKey
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSEncryptedKeyVersion
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
literal|"EEK"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caughtTimeout
argument_list|)
expr_stmt|;
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAccess ()
specifier|public
name|void
name|testDelegationTokenAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kA.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kD.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|64
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|nonKerberosUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kA"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"foo"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nonKerberosUgi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kA"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nonKerberosUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kD"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyUserKerb ()
specifier|public
name|void
name|testProxyUserKerb
parameter_list|()
throws|throws
name|Exception
block|{
name|doProxyUserTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyUserSimple ()
specifier|public
name|void
name|testProxyUserSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|doProxyUserTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doProxyUserTest (final boolean kerberos)
specifier|public
name|void
name|doProxyUserTest
parameter_list|(
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.users"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kAA.ALL"
argument_list|,
literal|"client"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kBB.ALL"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kCC.ALL"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kDD.ALL"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|64
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
comment|// proxyuser client using kerberos credentials
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"client"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|proxyUgi
decl_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kAA"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|fooUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|fooUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kBB"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// unauthorized proxyuser
name|UserGroupInformation
name|foo1Ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo1"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|foo1Ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kCC"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|barUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"bar"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|barUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kDD"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebHDFSProxyUserKerb ()
specifier|public
name|void
name|testWebHDFSProxyUserKerb
parameter_list|()
throws|throws
name|Exception
block|{
name|doWebHDFSProxyUserTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebHDFSProxyUserSimple ()
specifier|public
name|void
name|testWebHDFSProxyUserSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|doWebHDFSProxyUserTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doWebHDFSProxyUserTest (final boolean kerberos)
specifier|public
name|void
name|doWebHDFSProxyUserTest
parameter_list|(
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.kms.client.timeout"
argument_list|,
literal|"300"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.users"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kAA.ALL"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kBB.ALL"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kCC.ALL"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|64
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
comment|// proxyuser client using kerberos credentials
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"client"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|proxyUgi
decl_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// authorized proxyuser
name|UserGroupInformation
name|fooUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|fooUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kAA"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// unauthorized proxyuser
name|UserGroupInformation
name|foo1Ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo1"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|foo1Ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kBB"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Forbidden"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|barUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"bar"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|barUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kCC"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

