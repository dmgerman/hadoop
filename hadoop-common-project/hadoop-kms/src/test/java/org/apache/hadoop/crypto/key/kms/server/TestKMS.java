begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSDelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|LoadBalancingKMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|ValueQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestKMS
specifier|public
class|class
name|TestKMS
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKMS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SSL_RELOADER_THREAD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SSL_RELOADER_THREAD_NAME
init|=
literal|"Truststore reloader thread"
decl_stmt|;
DECL|field|sslFactory
specifier|private
name|SSLFactory
name|sslFactory
decl_stmt|;
comment|// Keep track of all key providers created during a test case, so they can be
comment|// closed at test tearDown.
DECL|field|providersCreated
specifier|private
name|List
argument_list|<
name|KeyProvider
argument_list|>
name|providersCreated
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpMiniKdc
argument_list|()
expr_stmt|;
comment|// resetting kerberos security
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestDir ()
specifier|public
specifier|static
name|File
name|getTestDir
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create test directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|class|KMSCallable
specifier|public
specifier|static
specifier|abstract
class|class
name|KMSCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|kmsUrl
specifier|private
name|List
argument_list|<
name|URL
argument_list|>
name|kmsUrl
decl_stmt|;
DECL|method|getKMSUrl ()
specifier|protected
name|URL
name|getKMSUrl
parameter_list|()
block|{
return|return
name|kmsUrl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getKMSHAUrl ()
specifier|protected
name|URL
index|[]
name|getKMSHAUrl
parameter_list|()
block|{
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|kmsUrl
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|kmsUrl
operator|.
name|toArray
argument_list|(
name|urls
argument_list|)
return|;
block|}
DECL|method|addKMSUrl (URL url)
specifier|protected
name|void
name|addKMSUrl
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|kmsUrl
operator|==
literal|null
condition|)
block|{
name|kmsUrl
operator|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|kmsUrl
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/*      * The format of the returned value will be      * kms://http:kms1.example1.com:port1,kms://http:kms2.example2.com:port2      */
DECL|method|generateLoadBalancingKeyProviderUriString ()
specifier|protected
name|String
name|generateLoadBalancingKeyProviderUriString
parameter_list|()
block|{
if|if
condition|(
name|kmsUrl
operator|==
literal|null
operator|||
name|kmsUrl
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kmsUrl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|KMSClientProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://"
operator|+
name|kmsUrl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"@"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|kmsUrl
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|url
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|kmsUrl
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|createProvider (URI uri, Configuration conf)
specifier|protected
name|KeyProvider
name|createProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|KeyProvider
name|ret
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
name|uri
argument_list|,
operator|new
name|KMSClientProvider
index|[]
block|{
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
block|}
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|providersCreated
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**   * create a LoadBalancingKMSClientProvider from an array of URIs.   * @param uris an array of KMS URIs   * @param conf configuration object   * @return a LoadBalancingKMSClientProvider object   * @throws IOException   */
DECL|method|createHAProvider (URI lbUri, URI[] uris, Configuration conf)
specifier|protected
name|LoadBalancingKMSClientProvider
name|createHAProvider
parameter_list|(
name|URI
name|lbUri
parameter_list|,
name|URI
index|[]
name|uris
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|KMSClientProvider
index|[]
name|providers
init|=
operator|new
name|KMSClientProvider
index|[
name|uris
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|providers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|providers
index|[
name|i
index|]
operator|=
operator|new
name|KMSClientProvider
argument_list|(
name|uris
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LoadBalancingKMSClientProvider
name|ret
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
name|lbUri
argument_list|,
name|providers
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|providersCreated
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|createKMSClientProvider (URI uri, Configuration conf)
specifier|private
name|KMSClientProvider
name|createKMSClientProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|KMSClientProvider
name|ret
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|providersCreated
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|runServer (String keystore, String password, File confDir, KMSCallable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|runServer
parameter_list|(
name|String
name|keystore
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|confDir
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runServer
argument_list|(
operator|-
literal|1
argument_list|,
name|keystore
argument_list|,
name|password
argument_list|,
name|confDir
argument_list|,
name|callable
argument_list|)
return|;
block|}
DECL|method|runServer (int port, String keystore, String password, File confDir, KMSCallable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|runServer
parameter_list|(
name|int
name|port
parameter_list|,
name|String
name|keystore
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|confDir
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runServer
argument_list|(
operator|new
name|int
index|[]
block|{
name|port
block|}
argument_list|,
name|keystore
argument_list|,
name|password
argument_list|,
name|confDir
argument_list|,
name|callable
argument_list|)
return|;
block|}
DECL|method|runServer (int[] ports, String keystore, String password, File confDir, KMSCallable<T> callable)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|runServer
parameter_list|(
name|int
index|[]
name|ports
parameter_list|,
name|String
name|keystore
parameter_list|,
name|String
name|password
parameter_list|,
name|File
name|confDir
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniKMS
operator|.
name|Builder
name|miniKMSBuilder
init|=
operator|new
name|MiniKMS
operator|.
name|Builder
argument_list|()
operator|.
name|setKmsConfDir
argument_list|(
name|confDir
argument_list|)
operator|.
name|setLog4jConfFile
argument_list|(
literal|"log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystore
operator|!=
literal|null
condition|)
block|{
name|miniKMSBuilder
operator|.
name|setSslConf
argument_list|(
operator|new
name|File
argument_list|(
name|keystore
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|MiniKMS
argument_list|>
name|kmsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ports
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
name|miniKMSBuilder
operator|.
name|setPort
argument_list|(
name|ports
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|MiniKMS
name|miniKMS
init|=
name|miniKMSBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|kmsList
operator|.
name|add
argument_list|(
name|miniKMS
argument_list|)
expr_stmt|;
name|miniKMS
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test KMS running at: "
operator|+
name|miniKMS
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
expr_stmt|;
name|callable
operator|.
name|addKMSUrl
argument_list|(
name|miniKMS
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
for|for
control|(
name|MiniKMS
name|miniKMS
range|:
name|kmsList
control|)
block|{
name|miniKMS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createBaseKMSConf (File keyStoreDir)
specifier|protected
name|Configuration
name|createBaseKMSConf
parameter_list|(
name|File
name|keyStoreDir
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBaseKMSConf
argument_list|(
name|keyStoreDir
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * The Configuration object is shared by both KMS client and server in unit    * tests because UGI gets/sets it to a static variable.    * As a workaround, make sure the client configurations are copied to server    * so that client can read them.    * @param keyStoreDir where keystore is located.    * @param conf KMS client configuration    * @return KMS server configuration based on client.    * @throws Exception    */
DECL|method|createBaseKMSConf (File keyStoreDir, Configuration conf)
specifier|protected
name|Configuration
name|createBaseKMSConf
parameter_list|(
name|File
name|keyStoreDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|newConf
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|newConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|newConf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|KEY_PROVIDER_URI
argument_list|,
literal|"jceks://file@"
operator|+
operator|new
name|Path
argument_list|(
name|keyStoreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"kms.keystore"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
return|return
name|newConf
return|;
block|}
DECL|method|writeConf (File confDir, Configuration conf)
specifier|public
specifier|static
name|void
name|writeConf
parameter_list|(
name|File
name|confDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|KMSConfiguration
operator|.
name|KMS_SITE_XML
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|KMSConfiguration
operator|.
name|KMS_ACLS_XML
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//create empty core-site.xml
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"core-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createKMSUri (URL kmsUrl)
specifier|public
specifier|static
name|URI
name|createKMSUri
parameter_list|(
name|URL
name|kmsUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|str
init|=
name|kmsUrl
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceFirst
argument_list|(
literal|"://"
argument_list|,
literal|"@"
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
literal|"kms://"
operator|+
name|str
argument_list|)
return|;
block|}
DECL|method|createKMSHAUri (URL[] kmsUrls)
specifier|public
specifier|static
name|URI
index|[]
name|createKMSHAUri
parameter_list|(
name|URL
index|[]
name|kmsUrls
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
index|[]
name|uris
init|=
operator|new
name|URI
index|[
name|kmsUrls
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kmsUrls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|uris
index|[
name|i
index|]
operator|=
name|createKMSUri
argument_list|(
name|kmsUrls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|uris
return|;
block|}
DECL|class|KerberosConfiguration
specifier|private
specifier|static
class|class
name|KerberosConfiguration
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|field|keytab
specifier|private
name|String
name|keytab
decl_stmt|;
DECL|field|isInitiator
specifier|private
name|boolean
name|isInitiator
decl_stmt|;
DECL|method|KerberosConfiguration (String principal, File keytab, boolean client)
specifier|private
name|KerberosConfiguration
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|,
name|boolean
name|client
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytab
operator|=
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|this
operator|.
name|isInitiator
operator|=
name|client
expr_stmt|;
block|}
DECL|method|createClientConfig ( String principal, File keytab)
specifier|public
specifier|static
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
name|createClientConfig
parameter_list|(
name|String
name|principal
parameter_list|,
name|File
name|keytab
parameter_list|)
block|{
return|return
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getKrb5LoginModuleName ()
specifier|private
specifier|static
name|String
name|getKrb5LoginModuleName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|?
literal|"com.ibm.security.auth.module.Krb5LoginModule"
else|:
literal|"com.sun.security.auth.module.Krb5LoginModule"
return|;
block|}
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useTicketCache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|isInitiator
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ticketCache
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KRB5CCNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticketCache
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"ticketCache"
argument_list|,
name|ticketCache
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|}
return|;
block|}
block|}
DECL|field|kdc
specifier|private
specifier|static
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|keytab
specifier|private
specifier|static
name|File
name|keytab
decl_stmt|;
DECL|method|setUpMiniKdc (Properties kdcConf)
specifier|private
specifier|static
name|void
name|setUpMiniKdc
parameter_list|(
name|Properties
name|kdcConf
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|kdcDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|kdcConf
argument_list|,
name|kdcDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|keytab
operator|=
operator|new
name|File
argument_list|(
name|kdcDir
argument_list|,
literal|"keytab"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|principals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"otheradmin"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client/host"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"client1"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|principals
operator|.
name|add
argument_list|(
literal|"CREATE_MATERIAL"
argument_list|)
expr_stmt|;
name|principals
operator|.
name|add
argument_list|(
literal|"ROLLOVER_MATERIAL"
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|principals
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpMiniKdc ()
specifier|private
name|void
name|setUpMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|setUpMiniKdc
argument_list|(
name|kdcConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|kdc
operator|=
literal|null
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setShouldRenewImmediatelyForTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|providersCreated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyProvider
name|kp
range|:
name|providersCreated
control|)
block|{
try|try
block|{
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close key provider."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|providersCreated
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|b
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|b
operator|.
name|build
argument_list|()
throw|;
block|}
block|}
block|}
DECL|method|doAs (String user, final PrivilegedExceptionAction<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAs
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|user
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
name|action
argument_list|)
return|;
block|}
finally|finally
block|{
name|ugi
operator|.
name|logoutUserFromKeytab
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Read in the content from an URL connection.    * @param conn URLConnection To read    * @return the text from the output    * @throws IOException if something went wrong    */
DECL|method|readOutput (URLConnection conn)
specifier|private
specifier|static
name|String
name|readOutput
parameter_list|(
name|URLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|assertReFind (String re, String value)
specifier|private
specifier|static
name|void
name|assertReFind
parameter_list|(
name|String
name|re
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|re
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|p
operator|+
literal|"' does not match "
operator|+
name|value
argument_list|,
name|m
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|openJMXConnection (URL baseUrl, boolean kerberos)
specifier|private
name|URLConnection
name|openJMXConnection
parameter_list|(
name|URL
name|baseUrl
parameter_list|,
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|URIBuilder
name|b
init|=
operator|new
name|URIBuilder
argument_list|(
name|baseUrl
operator|+
literal|"/jmx"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|kerberos
condition|)
block|{
name|b
operator|.
name|addParameter
argument_list|(
literal|"user.name"
argument_list|,
literal|"dr.who"
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
name|b
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JMX URL "
operator|+
name|url
argument_list|)
expr_stmt|;
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|conn
decl_stmt|;
try|try
block|{
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|httpsConn
operator|.
name|setHostnameVerifier
argument_list|(
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|testJMXQuery (URL baseUrl, boolean kerberos)
specifier|private
name|void
name|testJMXQuery
parameter_list|(
name|URL
name|baseUrl
parameter_list|,
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing JMX"
argument_list|)
expr_stmt|;
name|assertReFind
argument_list|(
literal|"\"name\"\\s*:\\s*\"java.lang:type=Memory\""
argument_list|,
name|readOutput
argument_list|(
name|openJMXConnection
argument_list|(
name|baseUrl
argument_list|,
name|kerberos
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartStop (final boolean ssl, final boolean kerberos)
specifier|public
name|void
name|testStartStop
parameter_list|(
specifier|final
name|boolean
name|ssl
parameter_list|,
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keystore
decl_stmt|;
specifier|final
name|String
name|password
decl_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestKMS
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keystore
operator|=
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/serverKS.jks"
expr_stmt|;
name|password
operator|=
literal|"serverP"
expr_stmt|;
block|}
else|else
block|{
name|keystore
operator|=
literal|null
expr_stmt|;
name|password
operator|=
literal|null
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.token.validity"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
block|}
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|runServer
argument_list|(
name|keystore
argument_list|,
name|password
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|getKMSUrl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keystore
operator|!=
literal|null
argument_list|,
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
name|KeyProvider
name|testKp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ThreadGroup
name|threadGroup
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
decl_stmt|;
while|while
condition|(
name|threadGroup
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threadGroup
operator|=
name|threadGroup
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadGroup
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|threadGroup
operator|.
name|enumerate
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|Thread
name|reloaderThread
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
if|if
condition|(
operator|(
name|thread
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|SSL_RELOADER_THREAD_NAME
argument_list|)
operator|)
condition|)
block|{
name|reloaderThread
operator|=
name|thread
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Reloader is not alive"
argument_list|,
name|reloaderThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
comment|// Explicitly close the provider so we can verify the internal thread
comment|// is shutdown
name|testKp
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|reloaderStillAlive
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|reloaderStillAlive
operator|=
name|reloaderThread
operator|.
name|isAlive
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|reloaderStillAlive
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Reloader is still alive"
argument_list|,
name|reloaderStillAlive
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kerberos
condition|)
block|{
for|for
control|(
name|String
name|user
range|:
operator|new
name|String
index|[]
block|{
literal|"client"
block|,
literal|"client/host"
block|}
control|)
block|{
name|doAs
argument_list|(
name|user
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|testJMXQuery
argument_list|(
name|url
argument_list|,
name|kerberos
argument_list|)
expr_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|kp
operator|)
operator|.
name|addDelegationTokens
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"kms-dt"
argument_list|,
name|tokens
index|[
literal|0
index|]
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|testJMXQuery
argument_list|(
name|url
argument_list|,
name|kerberos
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|kp
operator|)
operator|.
name|addDelegationTokens
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"kms-dt"
argument_list|,
name|tokens
index|[
literal|0
index|]
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|sslFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpPseudo ()
specifier|public
name|void
name|testStartStopHttpPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpsPseudo ()
specifier|public
name|void
name|testStartStopHttpsPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpKerberos ()
specifier|public
name|void
name|testStartStopHttpKerberos
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartStopHttpsKerberos ()
specifier|public
name|void
name|testStartStopHttpsKerberos
parameter_list|()
throws|throws
name|Exception
block|{
name|testStartStop
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSpecialKeyNames ()
specifier|public
name|void
name|testSpecialKeyNames
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|specialKey
init|=
literal|"key %^[\n{]}|\"<>\\"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
name|specialKey
operator|+
literal|".ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kp
operator|.
name|getKeysMetadata
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"l1"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating key with name '{}'"
argument_list|,
name|specialKey
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv0
init|=
name|kp
operator|.
name|createKey
argument_list|(
name|specialKey
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|specialKey
argument_list|,
name|kv0
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:methodlength"
argument_list|)
DECL|method|testKMSProvider ()
specifier|public
name|void
name|testKMSProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.MANAGEMENT"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.READ"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k4.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k5.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k6.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|started
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kp
operator|.
name|getKeysMetadata
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// createKey()
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"l1"
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv0
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyVersion()
name|KeyProvider
operator|.
name|KeyVersion
name|kv1
init|=
name|kp
operator|.
name|getKeyVersion
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|kv1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getCurrent()
name|KeyProvider
operator|.
name|KeyVersion
name|cv1
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|cv1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyMetadata() 1 version
name|KeyProvider
operator|.
name|Metadata
name|m1
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|m1
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|m1
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|m1
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|m1
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|m1
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|m1
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeyVersions() 1 version
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|lkv1
init|=
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lkv1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv1
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// rollNewVersion()
name|KeyProvider
operator|.
name|KeyVersion
name|kv2
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv2
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyVersion()
name|kv2
operator|=
name|kp
operator|.
name|getKeyVersion
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|eq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kv1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eq
operator|=
name|eq
operator|&&
name|kv1
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|kv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|eq
argument_list|)
expr_stmt|;
comment|// getCurrent()
name|KeyProvider
operator|.
name|KeyVersion
name|cv2
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|cv2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cv2
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|eq
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kv1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eq
operator|=
name|eq
operator|&&
name|cv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|kv2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|eq
argument_list|)
expr_stmt|;
comment|// getKeyVersions() 2 versions
name|List
argument_list|<
name|KeyProvider
operator|.
name|KeyVersion
argument_list|>
name|lkv2
init|=
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lkv2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv1
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lkv2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv2
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|lkv2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|lkv2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeyMetadata() 2 version
name|KeyProvider
operator|.
name|Metadata
name|m2
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|m2
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|m2
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|m2
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|m2
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|m2
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|m2
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeys() 1 key
name|List
argument_list|<
name|String
argument_list|>
name|ks1
init|=
name|kp
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ks1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k1"
argument_list|,
name|ks1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() 1 key 2 versions
name|KeyProvider
operator|.
name|Metadata
index|[]
name|kms1
init|=
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kms1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AES"
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kms1
index|[
literal|0
index|]
operator|.
name|getVersions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kms1
index|[
literal|0
index|]
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|started
operator|.
name|before
argument_list|(
name|kms1
index|[
literal|0
index|]
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test generate and decryption of EEK
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|kpExt
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1a
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1a
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
name|boolean
name|isEq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|isEq
operator|&&
name|i
operator|<
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|isEq
operator|=
name|k2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|k1
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isEq
argument_list|)
expr_stmt|;
comment|// test re-encrypt
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|ek1
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ek1r
init|=
name|kpExt
operator|.
name|reencryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1r
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek1r
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1r
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ek1
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|,
name|ek1r
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|ek1r
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|ek1
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|ek1r
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1r
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1r
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1r
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1r
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test re-encrypt batch
name|EncryptedKeyVersion
name|ek3
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyVersion
name|latest
init|=
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek1
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek2
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek3
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek1
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek2
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ek3
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|reencryptEncryptedKeys
argument_list|(
name|ekvs
argument_list|)
expr_stmt|;
for|for
control|(
name|EncryptedKeyVersion
name|ekv
range|:
name|ekvs
control|)
block|{
name|assertEquals
argument_list|(
name|latest
operator|.
name|getVersionName
argument_list|()
argument_list|,
name|ekv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// deleteKey()
name|kp
operator|.
name|deleteKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
comment|// Check decryption after Key deletion
try|try
block|{
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not be allowed !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"'k1@1' not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// getKey()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeyVersions()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getMetadata()
name|Assert
operator|.
name|assertNull
argument_list|(
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// getKeys() empty
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kp
operator|.
name|getKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// getKeysMetadata() empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kp
operator|.
name|getKeysMetadata
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// createKey() no description, no tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|KeyVersion
name|kVer2
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|Metadata
name|meta
init|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k2"
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"key.acl.name"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test key ACL.. k2 is granted only MANAGEMENT Op access
try|try
block|{
name|kpExt
operator|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kVer2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should not be allowed to encrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//
block|}
comment|// createKey() description, no tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"k3"
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"key.acl.name"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
comment|// createKey() no description, tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"k4"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k4"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k4"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// createKey() description, tags
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"k5"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k5"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|meta
operator|=
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|meta
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attributes
argument_list|,
name|meta
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// test rollover draining
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|kpce
operator|.
name|createKey
argument_list|(
literal|"k6"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv1
init|=
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k6"
argument_list|)
decl_stmt|;
name|kpce
operator|.
name|rollNewVersion
argument_list|(
literal|"k6"
argument_list|)
expr_stmt|;
name|kpce
operator|.
name|invalidateCache
argument_list|(
literal|"k6"
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv2
init|=
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k6"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"rollover did not generate a new key even after"
operator|+
literal|" queue is drained"
argument_list|,
name|ekv1
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|ekv2
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSProviderCaching ()
specifier|public
name|void
name|testKMSProviderCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|keyName
init|=
literal|"k1"
decl_stmt|;
specifier|final
name|String
name|mockVersionName
init|=
literal|"mock"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|KMSClientProvider
name|kmscp
init|=
name|createKMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// get the reference to the internal cache, to test invalidation.
name|ValueQueue
name|vq
init|=
operator|(
name|ValueQueue
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|kmscp
argument_list|,
literal|"encKeyVersionQueue"
argument_list|)
decl_stmt|;
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|>
name|kq
init|=
operator|(
operator|(
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|vq
argument_list|,
literal|"keyQueues"
argument_list|)
operator|)
decl_stmt|;
name|EncryptedKeyVersion
name|mockEKV
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EncryptedKeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockEKV
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockEKV
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockVersionName
argument_list|)
expr_stmt|;
comment|// createKey()
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDescription
argument_list|(
literal|"l1"
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv0
init|=
name|kmscp
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|kv0
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default key version name is incorrect."
argument_list|,
literal|"k1@0"
argument_list|,
name|kmscp
operator|.
name|generateEncryptedKey
argument_list|(
name|keyName
argument_list|)
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|kmscp
operator|.
name|invalidateCache
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|kq
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|put
argument_list|(
name|mockEKV
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Key version incorrect after invalidating cache + putting"
operator|+
literal|" mock key."
argument_list|,
name|mockVersionName
argument_list|,
name|kmscp
operator|.
name|generateEncryptedKey
argument_list|(
name|keyName
argument_list|)
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test new version is returned after invalidation.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|kq
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|put
argument_list|(
name|mockEKV
argument_list|)
expr_stmt|;
name|kmscp
operator|.
name|invalidateCache
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cache invalidation guarantee failed."
argument_list|,
literal|"k1@0"
argument_list|,
name|kmscp
operator|.
name|generateEncryptedKey
argument_list|(
name|keyName
argument_list|)
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:methodlength"
argument_list|)
DECL|method|testKeyACLs ()
specifier|public
name|void
name|testKeyACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK,DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK,DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK,DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"CREATE,ROLLOVER,GET,SET_KEY_MATERIAL,GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"test_key.MANAGEMENT"
argument_list|,
literal|"CREATE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"some_key.MANAGEMENT"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|WHITELIST_KEY_ACL_PREFIX
operator|+
literal|"ALL"
argument_list|,
literal|"DECRYPT_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"all_access.ALL"
argument_list|,
literal|"GENERATE_EEK"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"all_access.DECRYPT_EEK"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|"SOMEBODY"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"ALL"
argument_list|,
literal|"ROLLOVER"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k0"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyVersion
name|rollVersion
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rollVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [CREATE] should not be allowed to generate_eek on k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [CREATE] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test whitelist key access..
comment|// DECRYPT_EEK is whitelisted for MANAGEMENT operations only
name|doAs
argument_list|(
literal|"DECRYPT_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"some_key"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"kk0"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyVersion
name|rollVersion
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"kk0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rollVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"kk0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [DECRYPT_EEK] should not be allowed to generate_eek on kk0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kkx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key2"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|KeyVersion
name|rollVersion
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rollVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to rollover k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to generate_eek on k1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [ROLLOVER] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"test_key"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GET] should not be allowed to create key.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
name|newAttribs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GET] should not be allowed to create kx"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|EncryptedKeyVersion
name|ekv
init|=
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|options
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|newAttribs
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"all_access"
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|newAttribs
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kx"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"kx"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"User [GENERATE_EEK] should be allowed to generate_eek on kx"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpce
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"GENERATE_EEK"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|kpce
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|ekv
init|=
name|kpce
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|kpce
operator|.
name|reencryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
name|kpce
operator|.
name|reencryptEncryptedKeys
argument_list|(
name|ekvs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSRestartKerberosAuth ()
specifier|public
name|void
name|testKMSRestartKerberosAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSRestart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSRestartSimpleAuth ()
specifier|public
name|void
name|testKMSRestartSimpleAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSRestart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doKMSRestart (boolean useKrb)
specifier|public
name|void
name|doKMSRestart
parameter_list|(
name|boolean
name|useKrb
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|useKrb
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
name|c
init|=
operator|new
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|kp
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|KeyProvider
name|retKp
init|=
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
name|c
argument_list|)
decl_stmt|;
comment|// Restart server (using the same port)
name|runServer
argument_list|(
name|c
operator|.
name|getKMSUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|retKp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|retKp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSAuthFailureRetry ()
specifier|public
name|void
name|testKMSAuthFailureRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.token.validity"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k4.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k0"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// This happens before rollover
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Atleast 2 rollovers.. so should induce signer Exception
name|Thread
operator|.
name|sleep
argument_list|(
literal|3500
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Test retry count
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KMSClientProvider
operator|.
name|AUTH_RETRY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Atleast 2 rollovers.. so should induce signer Exception
name|Thread
operator|.
name|sleep
argument_list|(
literal|3500
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k4"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This should not succeed.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HTTP exception must be a 401 : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:methodlength"
argument_list|)
DECL|method|testACLs ()
specifier|public
name|void
name|testACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
comment|//nothing allowed
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"k"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// we are using JavaKeyStoreProvider for testing, so we know how
comment|// the keyversion is created.
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k@0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|getKeyVersions
argument_list|(
literal|"k"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"DELETE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|deleteKey
argument_list|(
literal|"k0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"ROLLOVER"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|KeyVersion
name|currKv
init|=
name|doAs
argument_list|(
literal|"GET"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
expr_stmt|;
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
return|return
name|kv
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|EncryptedKeyVersion
name|encKv
init|=
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|ek1
init|=
name|kpCE
operator|.
name|generateEncryptedKey
argument_list|(
name|currKv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ek1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpCE
operator|.
name|reencryptEncryptedKey
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|kpCE
operator|.
name|reencryptEncryptedKeys
argument_list|(
name|ekvs
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"DECRYPT_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpCE
operator|.
name|decryptEncryptedKey
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET_KEYS"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GET_METADATA"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|getMetadata
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|kp
operator|.
name|getKeysMetadata
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//stop the reloader, to avoid running while we are writing the new file
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|stopReloader
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|KMSConfiguration
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
comment|// test ACL reloading
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|forceNextReloadForTesting
argument_list|()
expr_stmt|;
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// forcing a reload by hand.
comment|// should not be able to create a key now
name|doAs
argument_list|(
literal|"CREATE"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpCE
operator|.
name|generateEncryptedKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// This isn't an AuthorizationException because generate goes
comment|// through the ValueQueue. See KMSCP#generateEncryptedKey.
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AuthorizationException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected exception."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpCE
operator|.
name|reencryptEncryptedKey
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have been able to reencryptEncryptedKey"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"reencryptEncryptedKey caught expected exception."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"GENERATE_EEK"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|kpCE
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|encKv
argument_list|)
expr_stmt|;
name|kpCE
operator|.
name|reencryptEncryptedKeys
argument_list|(
name|ekvs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have been able to reencryptEncryptedKeys"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"reencryptEncryptedKeys caught expected exception."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSBlackList ()
specifier|public
name|void
name|testKMSBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client,hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
operator|.
name|getBlacklistConfigKey
argument_list|()
argument_list|,
literal|"hdfs,otheradmin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"ck0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"ck1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck0"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"hdfs"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck1"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck1"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"admin user must not be allowed to decrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{             }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"otheradmin"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck2"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|EncryptedKeyVersion
name|eek
init|=
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|generateEncryptedKey
argument_list|(
literal|"ck2"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CryptoExtension
operator|)
name|kp
operator|)
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"admin user must not be allowed to decrypt !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{             }
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServicePrincipalACLs ()
specifier|public
name|void
name|testServicePrincipalACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
literal|"client"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|DEFAULT_KEY_ACL_PREFIX
operator|+
literal|"MANAGEMENT"
argument_list|,
literal|"client,client/host"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck0"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"client/host"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"ck1"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the configurable timeout in the KMSClientProvider.  Open up a    * socket, but don't accept connections for it.  This leads to a timeout    * when the KMS client attempts to connect.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testKMSTimeout ()
specifier|public
name|void
name|testKMSTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_TIMEOUT_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ServerSocket
name|sock
decl_stmt|;
name|int
name|port
decl_stmt|;
try|try
block|{
name|sock
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|port
operator|=
name|sock
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|/* Problem creating socket?  Just bail. */
return|return;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/kms"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|boolean
name|caughtTimeout
init|=
literal|false
decl_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|caughtTimeout
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
operator|.
name|generateEncryptedKey
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|caughtTimeout
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
operator|.
name|decryptEncryptedKey
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSEncryptedKeyVersion
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
literal|"EEK"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|caughtTimeout
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Caught unexpected exception"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caughtTimeout
argument_list|)
expr_stmt|;
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAccess ()
specifier|public
name|void
name|testDelegationTokenAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keyA
init|=
literal|"key_a"
decl_stmt|;
specifier|final
name|String
name|keyD
init|=
literal|"key_d"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
name|keyA
operator|+
literal|".ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
name|keyD
operator|+
literal|".ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|UserGroupInformation
name|nonKerberosUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
name|keyA
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"foo"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nonKerberosUgi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
name|keyA
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nonKerberosUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
name|keyD
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setupConfForKerberos (File confDir)
specifier|private
name|Configuration
name|setupConfForKerberos
parameter_list|(
name|File
name|confDir
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokensOpsHttpPseudo ()
specifier|public
name|void
name|testDelegationTokensOpsHttpPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokensOps
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokensOpsHttpKerberized ()
specifier|public
name|void
name|testDelegationTokensOpsHttpKerberized
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokensOps
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokensOpsHttpsPseudo ()
specifier|public
name|void
name|testDelegationTokensOpsHttpsPseudo
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokensOps
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokensOpsHttpsKerberized ()
specifier|public
name|void
name|testDelegationTokensOpsHttpsKerberized
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokensOps
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokenService (KeyProvider provider)
specifier|private
name|Text
name|getTokenService
parameter_list|(
name|KeyProvider
name|provider
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"KeyProvider should be an instance of "
operator|+
literal|"LoadBalancingKMSClientProvider"
argument_list|,
operator|(
name|provider
operator|instanceof
name|LoadBalancingKMSClientProvider
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num client providers should be 1"
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|LoadBalancingKMSClientProvider
operator|)
name|provider
operator|)
operator|.
name|getProviders
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Text
name|tokenService
init|=
operator|new
name|Text
argument_list|(
operator|(
operator|(
operator|(
name|LoadBalancingKMSClientProvider
operator|)
name|provider
operator|)
operator|.
name|getProviders
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tokenService
return|;
block|}
DECL|method|testDelegationTokensOps (final boolean ssl, final boolean kerb)
specifier|private
name|void
name|testDelegationTokensOps
parameter_list|(
specifier|final
name|boolean
name|ssl
parameter_list|,
specifier|final
name|boolean
name|kerb
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
decl_stmt|;
if|if
condition|(
name|kerb
condition|)
block|{
name|conf
operator|=
name|setupConfForKerberos
argument_list|(
name|confDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|keystore
decl_stmt|;
specifier|final
name|String
name|password
decl_stmt|;
if|if
condition|(
name|ssl
condition|)
block|{
specifier|final
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestKMS
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|confDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|sslConfDir
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keystore
operator|=
name|confDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/serverKS.jks"
expr_stmt|;
name|password
operator|=
literal|"serverP"
expr_stmt|;
block|}
else|else
block|{
name|keystore
operator|=
literal|null
expr_stmt|;
name|password
operator|=
literal|null
expr_stmt|;
block|}
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
name|keystore
argument_list|,
name|password
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|,
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
comment|// Unset the conf value for key provider path just to be sure that
comment|// the key provider created for renew and cancel token is from
comment|// token service field.
name|clientConf
operator|.
name|unset
argument_list|(
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
comment|// test delegation token retrieval
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"client1"
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
name|Text
name|tokenService
init|=
name|getTokenService
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test non-renewer user cannot renew.
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for "
operator|+
name|uri
operator|+
literal|"; "
operator|+
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|renew
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"client should not be allowed to renew token with"
operator|+
literal|"renewer=client1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|DelegationTokenIdentifier
name|identifier
init|=
operator|(
name|DelegationTokenIdentifier
operator|)
name|token
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"tries to renew a token ("
operator|+
name|identifier
operator|+
literal|") with non-matching renewer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|UserGroupInformation
name|otherUgi
decl_stmt|;
if|if
condition|(
name|kerb
condition|)
block|{
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
literal|"client1"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|otherUgi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|otherUgi
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"client1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"other group"
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|otherUgi
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// test delegation token renewal via renewer
name|otherUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|renewed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for "
operator|+
name|uri
operator|+
literal|"; "
operator|+
name|token
argument_list|)
expr_stmt|;
name|long
name|tokenLife
init|=
name|token
operator|.
name|renew
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token of kind {}, new lifetime:{}"
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|,
name|tokenLife
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|long
name|newTokenLife
init|=
name|token
operator|.
name|renew
argument_list|(
name|clientConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token of kind {}, new lifetime:{}"
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|,
name|newTokenLife
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newTokenLife
operator|>
name|tokenLife
argument_list|)
expr_stmt|;
name|renewed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewed
argument_list|)
expr_stmt|;
comment|// test delegation token cancellation
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for "
operator|+
name|uri
operator|+
literal|"; "
operator|+
name|token
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancel
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelled token of kind {}"
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|renew
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should not be able to renew a canceled token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception when renewing token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Close the client provider. We will verify all providers'
comment|// Truststore reloader threads are closed later.
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|otherUgi
operator|.
name|logoutUserFromKeytab
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// verify that providers created by KMSTokenRenewer are closed.
if|if
condition|(
name|ssl
condition|)
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Thread
argument_list|>
name|threadSet
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threadSet
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|SSL_RELOADER_THREAD_NAME
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelegationTokensUpdatedInUGI ()
specifier|public
name|void
name|testDelegationTokensUpdatedInUGI
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.delegation-token.max-lifetime.sec"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.delegation-token.renew-interval.sec"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Running as a service (e.g. YARN in practice).
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|,
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|clientConf
argument_list|)
decl_stmt|;
specifier|final
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|kmsAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|getKMSUrl
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|getKMSUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// Job 1 (e.g. YARN log aggregation job), with user DT.
specifier|final
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|job1Token
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get a DT and use it.
specifier|final
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"client"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|Text
name|tokenService
init|=
name|getTokenService
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added kms dt to credentials: {}"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|job1Token
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Decode the token to get max time.
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|long
name|maxTime
init|=
name|id
operator|.
name|getMaxDate
argument_list|()
decl_stmt|;
comment|// wait for token to expire.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"maxTime "
operator|+
name|maxTime
operator|+
literal|" is not less than now."
argument_list|,
name|maxTime
operator|>
literal|0
operator|&&
name|maxTime
operator|<
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Operation should fail since dt is expired."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|job1Token
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// job 2 (e.g. Another YARN log aggregation job, with user DT.
name|doAs
argument_list|(
literal|"client"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get a new DT, but don't use it yet.
specifier|final
name|Credentials
name|newCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"client"
argument_list|,
name|newCreds
argument_list|)
expr_stmt|;
name|Text
name|tokenService
init|=
name|getTokenService
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newCreds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|newCreds
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
comment|// Using job 1's DT should fail.
specifier|final
name|Credentials
name|oldCreds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|job1Token
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|)
condition|)
block|{
name|oldCreds
operator|.
name|addToken
argument_list|(
name|tokenService
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|oldCreds
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added old kms dt to credentials: {}"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Operation should fail since dt is expired."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Using the new DT should succeed.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newCreds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|newCreds
operator|.
name|getToken
argument_list|(
name|tokenService
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addCredentials
argument_list|(
name|newCreds
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Credetials now are: {}"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSWithZKSigner ()
specifier|public
name|void
name|testKMSWithZKSigner
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSWithZK
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSWithZKDTSM ()
specifier|public
name|void
name|testKMSWithZKDTSM
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSWithZK
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSWithZKSignerAndDTSM ()
specifier|public
name|void
name|testKMSWithZKSignerAndDTSM
parameter_list|()
throws|throws
name|Exception
block|{
name|doKMSWithZK
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runServerWithZooKeeper (boolean zkDTSM, boolean zkSigner, KMSCallable<T> callable)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|runServerWithZooKeeper
parameter_list|(
name|boolean
name|zkDTSM
parameter_list|,
name|boolean
name|zkSigner
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runServerWithZooKeeper
argument_list|(
name|zkDTSM
argument_list|,
name|zkSigner
argument_list|,
name|callable
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|runServerWithZooKeeper (boolean zkDTSM, boolean zkSigner, KMSCallable<T> callable, int kmsSize)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|runServerWithZooKeeper
parameter_list|(
name|boolean
name|zkDTSM
parameter_list|,
name|boolean
name|zkSigner
parameter_list|,
name|KMSCallable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|,
name|int
name|kmsSize
parameter_list|)
throws|throws
name|Exception
block|{
name|TestingServer
name|zkServer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zkServer
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkSigner
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.signer.secret.provider"
argument_list|,
literal|"zookeeper"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.signer.secret.provider.zookeeper.path"
argument_list|,
literal|"/testKMSWithZKDTSM"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.signer.secret.provider.zookeeper.connection.string"
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkDTSM
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.zk-dt-secret-manager.enable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zkDTSM
operator|&&
operator|!
name|zkSigner
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.zk-dt-secret-manager.zkConnectionString"
argument_list|,
name|zkServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.zk-dt-secret-manager.znodeWorkingPath"
argument_list|,
literal|"testZKPath"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.zk-dt-secret-manager.zkAuthType"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|KMSACLs
operator|.
name|Type
name|type
range|:
name|KMSACLs
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|type
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|getAclConfigKey
argument_list|()
argument_list|,
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
operator|.
name|toString
argument_list|()
operator|+
literal|",SET_KEY_MATERIAL"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k0.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k1.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k2.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"k3.ALL"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
index|[]
name|ports
init|=
operator|new
name|int
index|[
name|kmsSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ports
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|runServer
argument_list|(
name|ports
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
name|callable
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|zkServer
operator|!=
literal|null
condition|)
block|{
name|zkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doKMSWithZK (boolean zkDTSM, boolean zkSigner)
specifier|public
name|void
name|doKMSWithZK
parameter_list|(
name|boolean
name|zkDTSM
parameter_list|,
name|boolean
name|zkSigner
parameter_list|)
throws|throws
name|Exception
block|{
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
name|c
init|=
operator|new
name|KMSCallable
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|KeyProvider
name|kp
init|=
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k2"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"k3"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|kp
return|;
block|}
block|}
decl_stmt|;
name|runServerWithZooKeeper
argument_list|(
name|zkDTSM
argument_list|,
name|zkSigner
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKMSHAZooKeeperDelegationToken ()
specifier|public
name|void
name|testKMSHAZooKeeperDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|kmsSize
init|=
literal|2
decl_stmt|;
name|doKMSWithZKWithDelegationToken
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|kmsSize
argument_list|)
expr_stmt|;
block|}
DECL|method|doKMSWithZKWithDelegationToken (boolean zkDTSM, boolean zkSigner, int kmsSize)
specifier|private
name|void
name|doKMSWithZKWithDelegationToken
parameter_list|(
name|boolean
name|zkDTSM
parameter_list|,
name|boolean
name|zkSigner
parameter_list|,
name|int
name|kmsSize
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a KMSCallable to execute requests after ZooKeeper and KMS are up.
name|KMSCallable
argument_list|<
name|Void
argument_list|>
name|c
init|=
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
index|[]
name|uris
init|=
name|createKMSHAUri
argument_list|(
name|getKMSHAUrl
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// Create a UGI without Kerberos auth. It will authenticate with tokens.
specifier|final
name|UserGroupInformation
name|nonKerberosUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|lbUri
init|=
name|generateLoadBalancingKeyProviderUriString
argument_list|()
decl_stmt|;
specifier|final
name|LoadBalancingKMSClientProvider
name|lbkp
init|=
name|createHAProvider
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|lbUri
argument_list|)
argument_list|,
name|uris
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
expr_stmt|;
comment|// get delegation tokens using kerberos login
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|lbkp
argument_list|)
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"foo"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|nonKerberosUgi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
comment|// Access KMS using delegation token for authentication, no Kerberos.
name|nonKerberosUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a kms client with one provider at a time. Must use one
comment|// provider so that if it fails to authenticate, it does not fall
comment|// back to the next KMS instance.
comment|// Should succeed because it has delegation tokens for any instance.
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|KMSClientProvider
name|provider
range|:
name|lbkp
operator|.
name|getProviders
argument_list|()
control|)
block|{
specifier|final
name|String
name|key
init|=
literal|"k"
operator|+
name|i
operator|++
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connect to {} to create key {}."
argument_list|,
name|provider
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|provider
operator|.
name|createKey
argument_list|(
name|key
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|credentials
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|doAs
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|tokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
specifier|final
name|long
name|tokenLife
init|=
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token {}, new lifetime:{}"
argument_list|,
name|token
argument_list|,
name|tokenLife
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|long
name|newTokenLife
init|=
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token {}, new lifetime:{}"
argument_list|,
name|token
argument_list|,
name|newTokenLife
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newTokenLife
operator|>
name|tokenLife
argument_list|)
expr_stmt|;
comment|// test delegation token cancellation
name|LOG
operator|.
name|info
argument_list|(
literal|"Got dt for token: {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelled token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to renew a canceled token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception when renewing token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Credentials
name|newCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|doAs
argument_list|(
literal|"SET_KEY_MATERIAL"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProviderDelegationTokenExtension
name|kpdte
init|=
name|KeyProviderDelegationTokenExtension
operator|.
name|createKeyProviderDelegationTokenExtension
argument_list|(
name|lbkp
argument_list|)
decl_stmt|;
name|kpdte
operator|.
name|addDelegationTokens
argument_list|(
literal|"foo"
argument_list|,
name|newCredentials
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAs
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KMSClientProvider
name|kp1
init|=
name|lbkp
operator|.
name|getProviders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|URL
index|[]
name|urls
init|=
name|getKMSHAUrl
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|newCredentials
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|tokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
comment|// Testing backward compatibility of token renewal and cancellation.
comment|// Set the token service to ip:port format and test to renew/cancel.
name|Text
name|text
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|urls
index|[
literal|0
index|]
operator|.
name|getHost
argument_list|()
argument_list|,
name|urls
index|[
literal|0
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|token
operator|.
name|setService
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|lbUri
argument_list|)
expr_stmt|;
name|long
name|tokenLife
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|KMSClientProvider
name|kp
range|:
name|lbkp
operator|.
name|getProviders
argument_list|()
control|)
block|{
name|long
name|renewedTokenLife
init|=
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token of kind {}, new lifetime:{}"
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
argument_list|,
name|renewedTokenLife
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|renewedTokenLife
operator|>
name|tokenLife
argument_list|)
expr_stmt|;
name|tokenLife
operator|=
name|renewedTokenLife
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|token
operator|.
name|cancel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not be able to renew a canceled token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception when renewing token"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|runServerWithZooKeeper
argument_list|(
name|zkDTSM
argument_list|,
name|zkSigner
argument_list|,
name|c
argument_list|,
name|kmsSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyUserKerb ()
specifier|public
name|void
name|testProxyUserKerb
parameter_list|()
throws|throws
name|Exception
block|{
name|doProxyUserTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProxyUserSimple ()
specifier|public
name|void
name|testProxyUserSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|doProxyUserTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doProxyUserTest (final boolean kerberos)
specifier|public
name|void
name|doProxyUserTest
parameter_list|(
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.users"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kaa.ALL"
argument_list|,
literal|"client"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kbb.ALL"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kcc.ALL"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kdd.ALL"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
comment|// proxyuser client using kerberos credentials
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"client"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|proxyUgi
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|proxyUgi
decl_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kaa"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|fooUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|fooUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kbb"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// unauthorized proxyuser
name|UserGroupInformation
name|foo1Ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo1"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|foo1Ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"kcc"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|barUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"bar"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|barUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kdd"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebHDFSProxyUserKerb ()
specifier|public
name|void
name|testWebHDFSProxyUserKerb
parameter_list|()
throws|throws
name|Exception
block|{
name|doWebHDFSProxyUserTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWebHDFSProxyUserSimple ()
specifier|public
name|void
name|testWebHDFSProxyUserSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|doWebHDFSProxyUserTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTGTRenewal ()
specifier|public
name|void
name|testTGTRenewal
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|kdcConf
init|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
decl_stmt|;
name|kdcConf
operator|.
name|setProperty
argument_list|(
name|MiniKdc
operator|.
name|MAX_TICKET_LIFETIME
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|kdcConf
operator|.
name|setProperty
argument_list|(
name|MiniKdc
operator|.
name|MIN_TICKET_LIFETIME
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|setUpMiniKdc
argument_list|(
name|kdcConf
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.users"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setShouldRenewImmediatelyForTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
literal|"client"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify getKeys can relogin
name|Thread
operator|.
name|sleep
argument_list|(
literal|3100
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
comment|// Verify addDelegationTokens can relogin
comment|// (different code path inside KMSClientProvider than getKeys)
name|Thread
operator|.
name|sleep
argument_list|(
literal|3100
argument_list|)
expr_stmt|;
name|kp
operator|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|kp
operator|)
operator|.
name|addDelegationTokens
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify getKeys can relogin with proxy user
name|UserGroupInformation
name|anotherUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"client1"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|anotherUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3100
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|doWebHDFSProxyUserTest (final boolean kerberos)
specifier|public
name|void
name|doWebHDFSProxyUserTest
parameter_list|(
specifier|final
name|boolean
name|kerberos
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|File
name|testDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.keytab"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.principal"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.authentication.kerberos.name.rules"
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.kms.client.timeout"
argument_list|,
literal|"300"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.users"
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.kms.proxyuser.client.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kaa.ALL"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kbb.ALL"
argument_list|,
literal|"foo1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KeyAuthorizationKeyProvider
operator|.
name|KEY_ACL
operator|+
literal|"kcc.ALL"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|testDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|testDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|KeyProvider
operator|.
name|DEFAULT_BITLENGTH_NAME
argument_list|,
literal|128
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|createKMSUri
argument_list|(
name|getKMSUrl
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kerberos
condition|)
block|{
comment|// proxyuser client using kerberos credentials
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"client"
argument_list|,
name|keytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxyUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|proxyUgi
decl_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// authorized proxyuser
name|UserGroupInformation
name|fooUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|fooUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kaa"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// unauthorized proxyuser
name|UserGroupInformation
name|foo1Ugi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"foo1"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|foo1Ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"kbb"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Error while "
operator|+
literal|"authenticating with endpoint"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Forbidden"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// authorized proxyuser
name|UserGroupInformation
name|barUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"bar"
argument_list|,
name|clientUgi
argument_list|)
decl_stmt|;
name|barUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
name|kp
init|=
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kp
operator|.
name|createKey
argument_list|(
literal|"kcc"
argument_list|,
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test the jmx page can return, and contains the basic JvmMetrics. Only    * testing in simple mode since the page content is the same, kerberized    * or not.    */
annotation|@
name|Test
DECL|method|testKMSJMX ()
specifier|public
name|void
name|testKMSJMX
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|File
name|confDir
init|=
name|getTestDir
argument_list|()
decl_stmt|;
name|conf
operator|=
name|createBaseKMSConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|processName
init|=
literal|"testkmsjmx"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|METRICS_PROCESS_NAME_KEY
argument_list|,
name|processName
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|confDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|confDir
argument_list|,
operator|new
name|KMSCallable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|jmxUrl
init|=
operator|new
name|URL
argument_list|(
name|getKMSUrl
argument_list|()
operator|+
literal|"/jmx?user.name=whatever&qry=Hadoop:service="
operator|+
name|processName
operator|+
literal|",name=JvmMetrics"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting jmx from "
operator|+
name|jmxUrl
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|jmxUrl
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"jmx returned: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"JvmMetrics"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

