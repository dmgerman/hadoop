begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|UserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KeyAuthorizationKeyProvider
operator|.
name|KeyACLs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KeyAuthorizationKeyProvider
operator|.
name|KeyOpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKeyAuthorizationKeyProvider
specifier|public
class|class
name|TestKeyAuthorizationKeyProvider
block|{
DECL|field|CIPHER
specifier|private
specifier|static
specifier|final
name|String
name|CIPHER
init|=
literal|"AES"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateKey ()
specifier|public
name|void
name|testCreateKey
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyACLs
name|mock
init|=
name|mock
argument_list|(
name|KeyACLs
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"foo"
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|u1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"foo"
argument_list|,
name|u1
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|KeyProviderCryptoExtension
name|kpExt
init|=
operator|new
name|KeyAuthorizationKeyProvider
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
argument_list|,
name|mock
argument_list|)
decl_stmt|;
name|u1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|newOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should be Authorized !!"
argument_list|)
expr_stmt|;
block|}
comment|// "bar" key not configured
try|try
block|{
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"bar"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|newOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should NOT be Authorized !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Unauthorized User
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"badGuy"
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|newOptions
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should NOT be Authorized !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpsWhenACLAttributeExists ()
specifier|public
name|void
name|testOpsWhenACLAttributeExists
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyACLs
name|mock
init|=
name|mock
argument_list|(
name|KeyACLs
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|u1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|u2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u2"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|u3
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u3"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|sudo
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"sudo"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u1
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u2
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u3
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|sudo
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|KeyProviderCryptoExtension
name|kpExt
init|=
operator|new
name|KeyAuthorizationKeyProvider
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
argument_list|,
name|mock
argument_list|)
decl_stmt|;
specifier|final
name|KeyVersion
name|barKv
init|=
name|u1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Options
name|opt
init|=
name|newOptions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"testKey"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setAttributes
argument_list|(
name|m
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyVersion
name|kv
init|=
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|deleteKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should be Authorized !!"
argument_list|)
expr_stmt|;
block|}
name|KeyVersion
name|retkv
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retkv
operator|=
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"bar"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|opt
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|retkv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should NOT be Authorized to generate EEK !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{             }
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|retkv
argument_list|)
expr_stmt|;
return|return
name|retkv
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|EncryptedKeyVersion
name|barEKv
init|=
name|u2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kpExt
operator|.
name|deleteKey
argument_list|(
name|barKv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should NOT be Authorized to "
operator|+
literal|"perform any other operation !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{                 }
return|return
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|barKv
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|u3
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|kpExt
operator|.
name|deleteKey
argument_list|(
name|barKv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should NOT be Authorized to "
operator|+
literal|"perform any other operation !!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{             }
return|return
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|barEKv
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sudo
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Options
name|opt
init|=
name|newOptions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"testKey"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setAttributes
argument_list|(
name|m
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyVersion
name|kv
init|=
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|deleteKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"User should be Allowed to do everything !!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|newOptions (Configuration conf)
specifier|private
specifier|static
name|KeyProvider
operator|.
name|Options
name|newOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
name|CIPHER
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testDecryptWithKeyVersionNameKeyMismatch ()
specifier|public
name|void
name|testDecryptWithKeyVersionNameKeyMismatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyACLs
name|mock
init|=
name|mock
argument_list|(
name|KeyACLs
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|isACLPresent
argument_list|(
literal|"testKey"
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|u1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|u2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u2"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|u3
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"u3"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|sudo
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"sudo"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u1
argument_list|,
name|KeyOpType
operator|.
name|MANAGEMENT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u2
argument_list|,
name|KeyOpType
operator|.
name|GENERATE_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|u3
argument_list|,
name|KeyOpType
operator|.
name|DECRYPT_EEK
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mock
operator|.
name|hasAccessToKey
argument_list|(
literal|"testKey"
argument_list|,
name|sudo
argument_list|,
name|KeyOpType
operator|.
name|ALL
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|KeyProviderCryptoExtension
name|kpExt
init|=
operator|new
name|KeyAuthorizationKeyProvider
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
argument_list|,
name|mock
argument_list|)
decl_stmt|;
name|sudo
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Options
name|opt
init|=
name|newOptions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"key.acl.name"
argument_list|,
literal|"testKey"
argument_list|)
expr_stmt|;
name|opt
operator|.
name|setAttributes
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|KeyVersion
name|kv
init|=
name|kpExt
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|opt
argument_list|)
decl_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|ekv
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ekv
operator|=
name|EncryptedKeyVersion
operator|.
name|createForDecryption
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
operator|+
literal|"x"
argument_list|,
name|ekv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|ekv
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

