begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Main class for a series of KMS benchmarks.  *  * Each benchmark measures throughput and average execution time  * of a specific kms operation, e.g. encrypt or decrypt of  * Data Encryption Keys.  *  * The benchmark does not involve any other hadoop components  * except for kms operations. Each operation is executed  * by calling directly the respective kms operation.  *  * For usage, please see<a href="http://hadoop.apache.org/docs/current/  * hadoop-project-dist/hadoop-common/Benchmarking.html#KMSBenchmark">  * the documentation</a>.  * Meanwhile, if you change the usage of this program, please also update the  * documentation accordingly.  */
end_comment

begin_class
DECL|class|KMSBenchmark
specifier|public
class|class
name|KMSBenchmark
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMSBenchmark
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GENERAL_OPTIONS_USAGE
specifier|private
specifier|static
specifier|final
name|String
name|GENERAL_OPTIONS_USAGE
init|=
literal|"[-logLevel L] |"
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|Configuration
name|config
decl_stmt|;
DECL|field|kp
specifier|private
name|KeyProviderCryptoExtension
name|kp
decl_stmt|;
DECL|field|eek
specifier|private
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|eek
init|=
literal|null
decl_stmt|;
DECL|field|encryptionKeyName
specifier|private
name|String
name|encryptionKeyName
init|=
literal|"systest"
decl_stmt|;
DECL|field|createEncryptionKey
specifier|private
name|boolean
name|createEncryptionKey
init|=
literal|false
decl_stmt|;
DECL|field|warmupKey
specifier|private
name|boolean
name|warmupKey
init|=
literal|false
decl_stmt|;
DECL|field|keys
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|KMSBenchmark (Configuration conf, String[] args)
name|KMSBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|config
operator|=
name|conf
expr_stmt|;
name|kp
operator|=
name|createKeyProviderCryptoExtension
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// create key and/or warm up
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-warmup"
argument_list|)
condition|)
block|{
name|warmupKey
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-createkey"
argument_list|)
condition|)
block|{
name|encryptionKeyName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|createEncryptionKey
condition|)
block|{
name|keys
operator|=
name|kp
operator|.
name|getKeys
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|keys
operator|.
name|contains
argument_list|(
name|encryptionKeyName
argument_list|)
condition|)
block|{
name|kp
operator|.
name|createKey
argument_list|(
name|encryptionKeyName
argument_list|,
name|KeyProvider
operator|.
name|options
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"encryption key already exists: {}"
argument_list|,
name|encryptionKeyName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|warmupKey
condition|)
block|{
name|kp
operator|.
name|warmUpEncryptedKeys
argument_list|(
name|encryptionKeyName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|" failed to create or warmup encryption key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Base class for collecting operation statistics.    *    * Overload this class in order to run statistics for a    * specific kms operation.    */
DECL|class|OperationStatsBase
specifier|abstract
class|class
name|OperationStatsBase
block|{
DECL|field|OP_ALL_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|OP_ALL_NAME
init|=
literal|"all"
decl_stmt|;
DECL|field|OP_ALL_USAGE
specifier|protected
specifier|static
specifier|final
name|String
name|OP_ALL_USAGE
init|=
literal|"-op all<other ops options>"
decl_stmt|;
comment|// number of threads
DECL|field|numThreads
specifier|private
name|int
name|numThreads
init|=
literal|0
decl_stmt|;
comment|// number of operations requested
DECL|field|numOpsRequired
specifier|private
name|int
name|numOpsRequired
init|=
literal|0
decl_stmt|;
comment|// number of operations executed
DECL|field|numOpsExecuted
specifier|private
name|int
name|numOpsExecuted
init|=
literal|0
decl_stmt|;
comment|// sum of times for each op
DECL|field|cumulativeTime
specifier|private
name|long
name|cumulativeTime
init|=
literal|0
decl_stmt|;
comment|// time from start to finish
DECL|field|elapsedTime
specifier|private
name|long
name|elapsedTime
init|=
literal|0
decl_stmt|;
comment|// logging level, ERROR by default
DECL|field|logLevel
specifier|private
name|Level
name|logLevel
decl_stmt|;
DECL|field|daemons
specifier|private
name|List
argument_list|<
name|StatsDaemon
argument_list|>
name|daemons
decl_stmt|;
comment|/**      * Operation name.      */
DECL|method|getOpName ()
specifier|abstract
name|String
name|getOpName
parameter_list|()
function_decl|;
comment|/**      * Parse command line arguments.      *      * @param args arguments      * @throws IOException      */
DECL|method|parseArguments (List<String> args)
specifier|abstract
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * This corresponds to the arg1 argument of      * {@link #executeOp(int, int, String)}, which can have      * different meanings depending on the operation performed.      *      * @param daemonId id of the daemon calling this method      * @return the argument      */
DECL|method|getExecutionArgument (int daemonId)
specifier|abstract
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
function_decl|;
comment|/**      * Execute kms operation.      *      * @param daemonId id of the daemon calling this method.      * @param inputIdx serial index of the operation called by the deamon.      * @param arg1 operation specific argument.      * @return time of the individual kms call.      * @throws IOException      */
DECL|method|executeOp (int daemonId, int inputIdx, String arg1)
specifier|abstract
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Print the results of the benchmarking.      */
DECL|method|printResults ()
specifier|abstract
name|void
name|printResults
parameter_list|()
function_decl|;
DECL|method|OperationStatsBase ()
name|OperationStatsBase
parameter_list|()
block|{
name|numOpsRequired
operator|=
literal|10000
expr_stmt|;
name|numThreads
operator|=
literal|3
expr_stmt|;
name|logLevel
operator|=
name|Level
operator|.
name|ERROR
expr_stmt|;
block|}
DECL|method|benchmark ()
name|void
name|benchmark
parameter_list|()
throws|throws
name|IOException
block|{
name|daemons
operator|=
operator|new
name|ArrayList
argument_list|<
name|StatsDaemon
argument_list|>
argument_list|()
expr_stmt|;
name|long
name|start
init|=
literal|0
decl_stmt|;
try|try
block|{
name|numOpsExecuted
operator|=
literal|0
expr_stmt|;
name|cumulativeTime
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|numThreads
operator|<
literal|1
condition|)
block|{
return|return;
block|}
comment|// thread index< nrThreads
name|int
name|tIdx
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|opsPerThread
init|=
operator|new
name|int
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|opsScheduled
init|=
literal|0
init|;
name|opsScheduled
operator|<
name|numOpsRequired
condition|;
name|opsScheduled
operator|+=
name|opsPerThread
index|[
name|tIdx
operator|++
index|]
control|)
block|{
comment|// execute  in a separate thread
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
operator|(
name|numOpsRequired
operator|-
name|opsScheduled
operator|)
operator|/
operator|(
name|numThreads
operator|-
name|tIdx
operator|)
expr_stmt|;
if|if
condition|(
name|opsPerThread
index|[
name|tIdx
index|]
operator|==
literal|0
condition|)
block|{
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
comment|// if numThreads> numOpsRequired then the remaining threads
comment|// will do nothing
for|for
control|(
init|;
name|tIdx
operator|<
name|numThreads
condition|;
name|tIdx
operator|++
control|)
block|{
name|opsPerThread
index|[
name|tIdx
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|tIdx
operator|=
literal|0
init|;
name|tIdx
operator|<
name|numThreads
condition|;
name|tIdx
operator|++
control|)
block|{
name|daemons
operator|.
name|add
argument_list|(
operator|new
name|StatsDaemon
argument_list|(
name|tIdx
argument_list|,
name|opsPerThread
index|[
name|tIdx
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|numOpsRequired
operator|+
literal|" "
operator|+
name|getOpName
argument_list|()
operator|+
literal|"(s)."
argument_list|)
expr_stmt|;
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
block|{
name|d
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
while|while
condition|(
name|isInProgress
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
name|elapsedTime
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
expr_stmt|;
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
block|{
name|incrementStats
argument_list|(
name|d
operator|.
name|localNumOpsExecuted
argument_list|,
name|d
operator|.
name|localCumulativeTime
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|d
operator|.
name|toString
argument_list|()
operator|+
literal|": ops Exec = "
operator|+
name|d
operator|.
name|localNumOpsExecuted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isInProgress ()
specifier|private
name|boolean
name|isInProgress
parameter_list|()
block|{
for|for
control|(
name|StatsDaemon
name|d
range|:
name|daemons
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|cleanUp ()
name|void
name|cleanUp
parameter_list|()
throws|throws
name|IOException
block|{     }
DECL|method|getNumOpsExecuted ()
name|int
name|getNumOpsExecuted
parameter_list|()
block|{
return|return
name|numOpsExecuted
return|;
block|}
DECL|method|getCumulativeTime ()
name|long
name|getCumulativeTime
parameter_list|()
block|{
return|return
name|cumulativeTime
return|;
block|}
DECL|method|getElapsedTime ()
name|long
name|getElapsedTime
parameter_list|()
block|{
return|return
name|elapsedTime
return|;
block|}
DECL|method|getAverageTime ()
name|long
name|getAverageTime
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getAverageTime, cumulativeTime = "
operator|+
name|cumulativeTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getAverageTime, numOpsExecuted = "
operator|+
name|numOpsExecuted
argument_list|)
expr_stmt|;
return|return
name|numOpsExecuted
operator|==
literal|0
condition|?
literal|0
else|:
name|cumulativeTime
operator|/
name|numOpsExecuted
return|;
block|}
DECL|method|getOpsPerSecond ()
name|double
name|getOpsPerSecond
parameter_list|()
block|{
return|return
name|elapsedTime
operator|==
literal|0
condition|?
literal|0
else|:
literal|1000
operator|*
operator|(
name|double
operator|)
name|numOpsExecuted
operator|/
name|elapsedTime
return|;
block|}
DECL|method|getClientName (int idx)
name|String
name|getClientName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|getOpName
argument_list|()
operator|+
literal|"-client-"
operator|+
name|idx
return|;
block|}
DECL|method|incrementStats (int ops, long time)
name|void
name|incrementStats
parameter_list|(
name|int
name|ops
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|numOpsExecuted
operator|+=
name|ops
expr_stmt|;
name|cumulativeTime
operator|+=
name|time
expr_stmt|;
block|}
DECL|method|getNumThreads ()
name|int
name|getNumThreads
parameter_list|()
block|{
return|return
name|numThreads
return|;
block|}
DECL|method|setNumThreads (int num)
name|void
name|setNumThreads
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numThreads
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getNumOpsRequired ()
name|int
name|getNumOpsRequired
parameter_list|()
block|{
return|return
name|numOpsRequired
return|;
block|}
DECL|method|setNumOpsRequired (int num)
name|void
name|setNumOpsRequired
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numOpsRequired
operator|=
name|num
expr_stmt|;
block|}
comment|/**      * Parse first 2 arguments, corresponding to the "-op" option.      *      * @param args argument list      * @return true if operation is all, which means that options not      * related to this operation should be ignored, or false      * otherwise, meaning that usage should be printed when an      * unrelated option is encountered.      */
DECL|method|verifyOpArgument (List<String> args)
specifier|protected
name|boolean
name|verifyOpArgument
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
operator|!
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-op"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
comment|// process common options
name|int
name|llIndex
init|=
name|args
operator|.
name|indexOf
argument_list|(
literal|"-logLevel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|llIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<=
name|llIndex
operator|+
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
name|logLevel
operator|=
name|Level
operator|.
name|toLevel
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|llIndex
operator|+
literal|1
argument_list|)
argument_list|,
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|llIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|llIndex
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|OP_ALL_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|getOpName
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|getOpName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|printStats ()
name|void
name|printStats
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" stats  ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"# operations: "
operator|+
name|getNumOpsExecuted
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Elapsed Time: "
operator|+
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Ops per sec: "
operator|+
name|getOpsPerSecond
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Average Time: "
operator|+
name|getAverageTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * One of the threads that perform stats operations.    */
DECL|class|StatsDaemon
specifier|private
class|class
name|StatsDaemon
extends|extends
name|Thread
block|{
DECL|field|daemonId
specifier|private
specifier|final
name|int
name|daemonId
decl_stmt|;
DECL|field|opsPerThread
specifier|private
name|int
name|opsPerThread
decl_stmt|;
DECL|field|arg1
specifier|private
name|String
name|arg1
decl_stmt|;
comment|// argument passed to executeOp()
DECL|field|localNumOpsExecuted
specifier|private
specifier|volatile
name|int
name|localNumOpsExecuted
init|=
literal|0
decl_stmt|;
DECL|field|localCumulativeTime
specifier|private
specifier|volatile
name|long
name|localCumulativeTime
init|=
literal|0
decl_stmt|;
DECL|field|statsOp
specifier|private
specifier|final
name|OperationStatsBase
name|statsOp
decl_stmt|;
DECL|method|StatsDaemon (int daemonId, int nOps, OperationStatsBase op)
name|StatsDaemon
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|nOps
parameter_list|,
name|OperationStatsBase
name|op
parameter_list|)
block|{
name|this
operator|.
name|daemonId
operator|=
name|daemonId
expr_stmt|;
name|this
operator|.
name|opsPerThread
operator|=
name|nOps
expr_stmt|;
name|this
operator|.
name|statsOp
operator|=
name|op
expr_stmt|;
name|setName
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|localNumOpsExecuted
operator|=
literal|0
expr_stmt|;
name|localCumulativeTime
operator|=
literal|0
expr_stmt|;
name|arg1
operator|=
name|statsOp
operator|.
name|getExecutionArgument
argument_list|(
name|daemonId
argument_list|)
expr_stmt|;
try|try
block|{
name|benchmarkOne
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsDaemon "
operator|+
name|daemonId
operator|+
literal|" failed: \n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StatsDaemon-"
operator|+
name|daemonId
return|;
block|}
DECL|method|benchmarkOne ()
name|void
name|benchmarkOne
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|opsPerThread
condition|;
name|idx
operator|++
control|)
block|{
name|long
name|stat
init|=
name|statsOp
operator|.
name|executeOp
argument_list|(
name|daemonId
argument_list|,
name|idx
argument_list|,
name|arg1
argument_list|)
decl_stmt|;
name|localNumOpsExecuted
operator|++
expr_stmt|;
name|localCumulativeTime
operator|+=
name|stat
expr_stmt|;
block|}
block|}
DECL|method|isInProgress ()
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
name|localNumOpsExecuted
operator|<
name|opsPerThread
return|;
block|}
comment|/**      * Schedule to stop this daemon.      */
DECL|method|terminate ()
name|void
name|terminate
parameter_list|()
block|{
name|opsPerThread
operator|=
name|localNumOpsExecuted
expr_stmt|;
block|}
block|}
comment|/**    * Encrypt key statistics.    *    * Each thread encrypts the key.    */
DECL|class|EncryptKeyStats
class|class
name|EncryptKeyStats
extends|extends
name|OperationStatsBase
block|{
comment|// Operation types
DECL|field|OP_ENCRYPT_KEY
specifier|static
specifier|final
name|String
name|OP_ENCRYPT_KEY
init|=
literal|"encrypt"
decl_stmt|;
DECL|field|OP_ENCRYPT_USAGE
specifier|static
specifier|final
name|String
name|OP_ENCRYPT_USAGE
init|=
literal|"-op encrypt [-threads T -numops N -warmup F]"
decl_stmt|;
DECL|method|EncryptKeyStats (List<String> args)
name|EncryptKeyStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_ENCRYPT_KEY
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// parse command line
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-threads"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
name|setNumThreads
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-numops"
argument_list|)
condition|)
block|{
name|setNumOpsRequired
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns client name.      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
name|getClientName
argument_list|(
name|daemonId
argument_list|)
return|;
block|}
comment|/**      * Execute key encryption.      */
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String clientName)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|eek
operator|=
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKeyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to generate encrypted key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nOps = "
operator|+
name|getNumOpsRequired
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nThreads = "
operator|+
name|getNumThreads
argument_list|()
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Decrypt key statistics.    *    * Each thread decrypts the key.    */
DECL|class|DecryptKeyStats
class|class
name|DecryptKeyStats
extends|extends
name|OperationStatsBase
block|{
comment|// Operation types
DECL|field|OP_DECRYPT_KEY
specifier|static
specifier|final
name|String
name|OP_DECRYPT_KEY
init|=
literal|"decrypt"
decl_stmt|;
DECL|field|OP_DECRYPT_USAGE
specifier|static
specifier|final
name|String
name|OP_DECRYPT_USAGE
init|=
literal|"-op decrypt [-threads T -numops N -warmup F]"
decl_stmt|;
DECL|method|DecryptKeyStats (List<String> args)
name|DecryptKeyStats
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpName ()
name|String
name|getOpName
parameter_list|()
block|{
return|return
name|OP_DECRYPT_KEY
return|;
block|}
annotation|@
name|Override
DECL|method|parseArguments (List<String> args)
name|void
name|parseArguments
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|verifyOpArgument
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// parse command line
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-threads"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
name|setNumThreads
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-numops"
argument_list|)
condition|)
block|{
name|setNumOpsRequired
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * returns client name.      */
annotation|@
name|Override
DECL|method|getExecutionArgument (int daemonId)
name|String
name|getExecutionArgument
parameter_list|(
name|int
name|daemonId
parameter_list|)
block|{
return|return
name|getClientName
argument_list|(
name|daemonId
argument_list|)
return|;
block|}
comment|/**      * Execute key decryption.      */
annotation|@
name|Override
DECL|method|executeOp (int daemonId, int inputIdx, String clientName)
name|long
name|executeOp
parameter_list|(
name|int
name|daemonId
parameter_list|,
name|int
name|inputIdx
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|eek
operator|=
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKeyName
argument_list|)
expr_stmt|;
name|kp
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to generate and/or decrypt key"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
return|return
name|end
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|printResults ()
name|void
name|printResults
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- "
operator|+
name|getOpName
argument_list|()
operator|+
literal|" inputs ---"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nrOps = "
operator|+
name|getNumOpsRequired
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"nrThreads = "
operator|+
name|getNumThreads
argument_list|()
argument_list|)
expr_stmt|;
name|printStats
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printUsage ()
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: KMSBenchmark"
operator|+
literal|"\n\t"
operator|+
name|OperationStatsBase
operator|.
name|OP_ALL_USAGE
operator|+
literal|" | \n\t"
operator|+
name|EncryptKeyStats
operator|.
name|OP_ENCRYPT_USAGE
operator|+
literal|" | \n\t"
operator|+
name|DecryptKeyStats
operator|.
name|OP_DECRYPT_USAGE
operator|+
literal|" | \n\t"
operator|+
name|GENERAL_OPTIONS_USAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|GenericOptionsParser
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeyProviderCryptoExtension ( final Configuration conf)
specifier|public
specifier|static
name|KeyProviderCryptoExtension
name|createKeyProviderCryptoExtension
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key provider was not configured."
argument_list|)
throw|;
block|}
return|return
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|keyProvider
argument_list|)
return|;
block|}
DECL|method|runBenchmark (Configuration conf, String[] args)
specifier|public
specifier|static
name|void
name|runBenchmark
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|KMSBenchmark
name|bench
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bench
operator|=
operator|new
name|KMSBenchmark
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|bench
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"runBenchmark finished."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Main method of the benchmark.    * @param aArgs command line parameters    */
annotation|@
name|Override
comment|// Tool
DECL|method|run (String[] aArgs)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|aArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|aArgs
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
operator|!
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-op"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|runAll
init|=
name|OperationStatsBase
operator|.
name|OP_ALL_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OperationStatsBase
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|OperationStatsBase
argument_list|>
argument_list|()
decl_stmt|;
name|OperationStatsBase
name|opStat
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|runAll
operator|||
name|EncryptKeyStats
operator|.
name|OP_ENCRYPT_KEY
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
operator|new
name|EncryptKeyStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runAll
operator|||
name|DecryptKeyStats
operator|.
name|OP_DECRYPT_KEY
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|opStat
operator|=
operator|new
name|DecryptKeyStats
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ops
operator|.
name|add
argument_list|(
name|opStat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
block|}
comment|// run each benchmark
for|for
control|(
name|OperationStatsBase
name|op
range|:
name|ops
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting benchmark: "
operator|+
name|op
operator|.
name|getOpName
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|benchmark
argument_list|()
expr_stmt|;
name|op
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
comment|// print statistics
for|for
control|(
name|OperationStatsBase
name|op
range|:
name|ops
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|op
operator|.
name|printResults
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to run benchmarks"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|runBenchmark
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Configurable
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|config
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Configurable
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

