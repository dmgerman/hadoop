begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KMS
operator|.
name|KMSOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestKMSAudit
specifier|public
class|class
name|TestKMSAudit
block|{
DECL|field|originalOut
specifier|private
name|PrintStream
name|originalOut
decl_stmt|;
DECL|field|memOut
specifier|private
name|ByteArrayOutputStream
name|memOut
decl_stmt|;
DECL|field|filterOut
specifier|private
name|FilterOut
name|filterOut
decl_stmt|;
DECL|field|capturedOut
specifier|private
name|PrintStream
name|capturedOut
decl_stmt|;
DECL|field|kmsAudit
specifier|private
name|KMSAudit
name|kmsAudit
decl_stmt|;
DECL|class|FilterOut
specifier|private
specifier|static
class|class
name|FilterOut
extends|extends
name|FilterOutputStream
block|{
DECL|method|FilterOut (OutputStream out)
specifier|public
name|FilterOut
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|setOutputStream (OutputStream out)
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|originalOut
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|memOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|filterOut
operator|=
operator|new
name|FilterOut
argument_list|(
name|memOut
argument_list|)
expr_stmt|;
name|capturedOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|filterOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|capturedOut
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"log4j-kmsaudit.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|kmsAudit
operator|=
operator|new
name|KMSAudit
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|System
operator|.
name|setErr
argument_list|(
name|originalOut
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|getAndResetLogOutput ()
specifier|private
name|String
name|getAndResetLogOutput
parameter_list|()
block|{
name|capturedOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|logOutput
init|=
operator|new
name|String
argument_list|(
name|memOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|memOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|filterOut
operator|.
name|setOutputStream
argument_list|(
name|memOut
argument_list|)
expr_stmt|;
return|return
name|logOutput
return|;
block|}
annotation|@
name|Test
DECL|method|testAggregation ()
specifier|public
name|void
name|testAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|luser
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|luser
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"luser"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DELETE_KEY
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|ROLL_NEW_VERSION
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|getAndResetLogOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|matches
argument_list|(
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
comment|// Not aggregated !!
operator|+
literal|"OK\\[op=DELETE_KEY, key=k1, user=luser\\] testmsg"
operator|+
literal|"OK\\[op=ROLL_NEW_VERSION, key=k1, user=luser\\] testmsg"
comment|// Aggregated
operator|+
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=6, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregationUnauth ()
specifier|public
name|void
name|testAggregationUnauth
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|luser
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Principal
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|luser
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"luser"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|unauthorized
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k2"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|unauthorized
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|getAndResetLogOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|matches
argument_list|(
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k2, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=5, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k3, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

