begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KMS
operator|.
name|KMSOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ThreadUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestKMSAudit
specifier|public
class|class
name|TestKMSAudit
block|{
DECL|field|originalOut
specifier|private
name|PrintStream
name|originalOut
decl_stmt|;
DECL|field|memOut
specifier|private
name|ByteArrayOutputStream
name|memOut
decl_stmt|;
DECL|field|filterOut
specifier|private
name|FilterOut
name|filterOut
decl_stmt|;
DECL|field|capturedOut
specifier|private
name|PrintStream
name|capturedOut
decl_stmt|;
DECL|field|kmsAudit
specifier|private
name|KMSAudit
name|kmsAudit
decl_stmt|;
DECL|class|FilterOut
specifier|private
specifier|static
class|class
name|FilterOut
extends|extends
name|FilterOutputStream
block|{
DECL|method|FilterOut (OutputStream out)
specifier|public
name|FilterOut
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|setOutputStream (OutputStream out)
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
specifier|final
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|originalOut
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|memOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|filterOut
operator|=
operator|new
name|FilterOut
argument_list|(
name|memOut
argument_list|)
expr_stmt|;
name|capturedOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|filterOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|capturedOut
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|ThreadUtil
operator|.
name|getResourceAsStream
argument_list|(
literal|"log4j-kmsaudit.properties"
argument_list|)
decl_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|this
operator|.
name|kmsAudit
operator|=
operator|new
name|KMSAudit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|System
operator|.
name|setErr
argument_list|(
name|originalOut
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|getAndResetLogOutput ()
specifier|private
name|String
name|getAndResetLogOutput
parameter_list|()
block|{
name|capturedOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|logOutput
init|=
operator|new
name|String
argument_list|(
name|memOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|memOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|filterOut
operator|.
name|setOutputStream
argument_list|(
name|memOut
argument_list|)
expr_stmt|;
return|return
name|logOutput
return|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:linelength"
argument_list|)
DECL|method|testAggregation ()
specifier|public
name|void
name|testAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|luser
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|luser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"luser"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DELETE_KEY
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|ROLL_NEW_VERSION
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|INVALIDATE_CACHE
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK_BATCH
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK_BATCH
argument_list|,
literal|"k1"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|String
name|out
init|=
name|getAndResetLogOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|matches
argument_list|(
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
comment|// Not aggregated !!
operator|+
literal|"OK\\[op=DELETE_KEY, key=k1, user=luser\\] testmsg"
operator|+
literal|"OK\\[op=ROLL_NEW_VERSION, key=k1, user=luser\\] testmsg"
operator|+
literal|"OK\\[op=INVALIDATE_CACHE, key=k1, user=luser\\] testmsg"
comment|// Aggregated
operator|+
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=6, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=REENCRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=REENCRYPT_EEK, key=k1, user=luser, accessCount=3, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=REENCRYPT_EEK_BATCH, key=k1, user=luser\\] testmsg"
operator|+
literal|"OK\\[op=REENCRYPT_EEK_BATCH, key=k1, user=luser\\] testmsg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:linelength"
argument_list|)
DECL|method|testAggregationUnauth ()
specifier|public
name|void
name|testAggregationUnauth
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|luser
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|luser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"luser"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|unauthorized
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k2"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|unauthorized
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|)
expr_stmt|;
comment|// wait a bit so the UNAUTHORIZED-triggered cache invalidation happens.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k3"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|String
name|out
init|=
name|getAndResetLogOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// The UNAUTHORIZED will trigger cache invalidation, which then triggers
comment|// the aggregated OK (accessCount=5). But the order of the UNAUTHORIZED and
comment|// the aggregated OK is arbitrary - no correctness concerns, but flaky here.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|matches
argument_list|(
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k2, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=5, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k3, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
argument_list|)
operator|||
name|out
operator|.
name|matches
argument_list|(
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k2, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"UNAUTHORIZED\\[op=GENERATE_EEK, key=k3, user=luser\\] "
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=5, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:linelength"
argument_list|)
DECL|method|testAuditLogFormat ()
specifier|public
name|void
name|testAuditLogFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|luser
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|luser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"luser"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"k4"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|evictCacheForTesting
argument_list|()
expr_stmt|;
name|kmsAudit
operator|.
name|unauthorized
argument_list|(
name|luser
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
literal|"k4"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|error
argument_list|(
name|luser
argument_list|,
literal|"method"
argument_list|,
literal|"url"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|unauthenticated
argument_list|(
literal|"remotehost"
argument_list|,
literal|"method"
argument_list|,
literal|"url"
argument_list|,
literal|"testmsg"
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|getAndResetLogOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|matches
argument_list|(
literal|"OK\\[op=GENERATE_EEK, key=k4, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"OK\\[op=GENERATE_EEK, user=luser\\] testmsg"
operator|+
literal|"OK\\[op=GENERATE_EEK, key=k4, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"
operator|+
literal|"UNAUTHORIZED\\[op=DECRYPT_EEK, key=k4, user=luser\\] "
operator|+
literal|"ERROR\\[user=luser\\] Method:'method' Exception:'testmsg'"
operator|+
literal|"UNAUTHENTICATED RemoteHost:remotehost Method:method URL:url ErrorMsg:'testmsg'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testInitAuditLoggers ()
specifier|public
name|void
name|testInitAuditLoggers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default should be the simple logger
name|List
argument_list|<
name|KMSAuditLogger
argument_list|>
name|loggers
init|=
operator|(
name|List
argument_list|<
name|KMSAuditLogger
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|kmsAudit
argument_list|,
literal|"auditLoggers"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loggers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SimpleKMSAuditLogger
operator|.
name|class
argument_list|,
name|loggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Explicitly configure the simple logger. Duplicates are ignored.
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|KMS_AUDIT_LOGGER_KEY
argument_list|,
name|SimpleKMSAuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|SimpleKMSAuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|KMSAudit
name|audit
init|=
operator|new
name|KMSAudit
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|loggers
operator|=
operator|(
name|List
argument_list|<
name|KMSAuditLogger
argument_list|>
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|audit
argument_list|,
literal|"auditLoggers"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loggers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SimpleKMSAuditLogger
operator|.
name|class
argument_list|,
name|loggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// If any loggers unable to load, init should fail.
name|conf
operator|.
name|set
argument_list|(
name|KMSConfiguration
operator|.
name|KMS_AUDIT_LOGGER_KEY
argument_list|,
name|SimpleKMSAuditLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",unknown"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|KMSAudit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"loggers configured but invalid, init should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|KMSConfiguration
operator|.
name|KMS_AUDIT_LOGGER_KEY
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

