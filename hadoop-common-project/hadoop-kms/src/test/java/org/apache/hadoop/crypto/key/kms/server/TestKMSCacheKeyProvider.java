begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_class
DECL|class|TestKMSCacheKeyProvider
specifier|public
class|class
name|TestKMSCacheKeyProvider
block|{
annotation|@
name|Test
DECL|method|testCurrentKey ()
specifier|public
name|void
name|testCurrentKey
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|mockKey
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|KeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyProvider
name|mockProv
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|KeyProvider
name|cache
init|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// asserting caching
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// asserting no caching when key is not known
name|cache
operator|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyVersion ()
specifier|public
name|void
name|testKeyVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|mockKey
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|KeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyProvider
name|mockProv
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2@0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|KeyProvider
name|cache
init|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// asserting caching
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// asserting no caching when key is not known
name|cache
operator|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k2@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k2@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k2@0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRollNewVersion ()
specifier|public
name|void
name|testRollNewVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|mockKey
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|KeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyProvider
name|mockProv
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockKey
argument_list|)
expr_stmt|;
name|KeyProvider
name|cache
init|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
comment|// asserting the cache is purged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|rollNewVersion
argument_list|(
literal|"k1"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|mockKey
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|KeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyProvider
name|mockProv
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|KeyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockProv
operator|.
name|getMetadata
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSMetadata
argument_list|(
literal|"c"
argument_list|,
literal|0
argument_list|,
literal|"l"
argument_list|,
literal|null
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|KeyProvider
name|cache
init|=
operator|new
name|KMSCacheKeyProvider
argument_list|(
name|mockProv
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|deleteKey
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
comment|// asserting the cache is purged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getCurrentKey
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getCurrentKey
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockKey
argument_list|,
name|cache
operator|.
name|getKeyVersion
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProv
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getKeyVersion
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
literal|"k1@0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

