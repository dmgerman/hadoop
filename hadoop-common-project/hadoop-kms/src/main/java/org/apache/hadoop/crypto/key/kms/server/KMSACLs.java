begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Provides access to the<code>AccessControlList</code>s used by KMS,  * hot-reloading them if the<code>kms-acls.xml</code> file where the ACLs  * are defined has been updated.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMSACLs
specifier|public
class|class
name|KMSACLs
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMSACLs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enumConstant|CREATE
DECL|enumConstant|DELETE
DECL|enumConstant|ROLLOVER
DECL|enumConstant|GET
DECL|enumConstant|GET_KEYS
DECL|enumConstant|GET_METADATA
name|CREATE
block|,
name|DELETE
block|,
name|ROLLOVER
block|,
name|GET
block|,
name|GET_KEYS
block|,
name|GET_METADATA
block|,
DECL|enumConstant|SET_KEY_MATERIAL
DECL|enumConstant|GENERATE_EEK
DECL|enumConstant|DECRYPT_EEK
name|SET_KEY_MATERIAL
block|,
name|GENERATE_EEK
block|,
name|DECRYPT_EEK
block|;
DECL|method|getConfigKey ()
specifier|public
name|String
name|getConfigKey
parameter_list|()
block|{
return|return
name|KMSConfiguration
operator|.
name|CONFIG_PREFIX
operator|+
literal|"acl."
operator|+
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|ACL_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|ACL_DEFAULT
init|=
name|AccessControlList
operator|.
name|WILDCARD_ACL_VALUE
decl_stmt|;
DECL|field|RELOADER_SLEEP_MILLIS
specifier|public
specifier|static
specifier|final
name|int
name|RELOADER_SLEEP_MILLIS
init|=
literal|1000
decl_stmt|;
DECL|field|acls
specifier|private
specifier|volatile
name|Map
argument_list|<
name|Type
argument_list|,
name|AccessControlList
argument_list|>
name|acls
decl_stmt|;
DECL|field|executorService
specifier|private
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|lastReload
specifier|private
name|long
name|lastReload
decl_stmt|;
DECL|method|KMSACLs (Configuration conf)
name|KMSACLs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
name|loadACLs
argument_list|()
expr_stmt|;
block|}
name|setACLs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|KMSACLs ()
specifier|public
name|KMSACLs
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setACLs (Configuration conf)
specifier|private
name|void
name|setACLs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|Type
argument_list|,
name|AccessControlList
argument_list|>
name|tempAcls
init|=
operator|new
name|HashMap
argument_list|<
name|Type
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|aclType
range|:
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|aclStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|aclType
operator|.
name|getConfigKey
argument_list|()
argument_list|,
name|ACL_DEFAULT
argument_list|)
decl_stmt|;
name|tempAcls
operator|.
name|put
argument_list|(
name|aclType
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|aclStr
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"'{}' ACL '{}'"
argument_list|,
name|aclType
argument_list|,
name|aclStr
argument_list|)
expr_stmt|;
block|}
name|acls
operator|=
name|tempAcls
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|KMSConfiguration
operator|.
name|isACLsFileNewer
argument_list|(
name|lastReload
argument_list|)
condition|)
block|{
name|setACLs
argument_list|(
name|loadACLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not reload ACLs file: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startReloader ()
specifier|public
specifier|synchronized
name|void
name|startReloader
parameter_list|()
block|{
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|executorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
argument_list|,
name|RELOADER_SLEEP_MILLIS
argument_list|,
name|RELOADER_SLEEP_MILLIS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopReloader ()
specifier|public
specifier|synchronized
name|void
name|stopReloader
parameter_list|()
block|{
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|loadACLs ()
specifier|private
name|Configuration
name|loadACLs
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading ACLs file"
argument_list|)
expr_stmt|;
name|lastReload
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|KMSConfiguration
operator|.
name|getACLsConf
argument_list|()
decl_stmt|;
comment|// triggering the resource loading.
name|conf
operator|.
name|get
argument_list|(
name|Type
operator|.
name|CREATE
operator|.
name|getConfigKey
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|hasAccess (Type type, String user)
specifier|public
name|boolean
name|hasAccess
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|acls
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|ugi
argument_list|)
return|;
block|}
block|}
end_class

end_unit

