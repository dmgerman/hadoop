begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|ValueQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|ValueQueue
operator|.
name|SyncGenerationPolicy
import|;
end_import

begin_comment
comment|/**  * A {@link KeyProviderCryptoExtension} that pre-generates and caches encrypted   * keys.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|EagerKeyGeneratorKeyProviderCryptoExtension
specifier|public
class|class
name|EagerKeyGeneratorKeyProviderCryptoExtension
extends|extends
name|KeyProviderCryptoExtension
block|{
DECL|field|KEY_CACHE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|KEY_CACHE_PREFIX
init|=
literal|"hadoop.security.kms.encrypted.key.cache."
decl_stmt|;
DECL|field|KMS_KEY_CACHE_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|KMS_KEY_CACHE_SIZE
init|=
name|KEY_CACHE_PREFIX
operator|+
literal|"size"
decl_stmt|;
DECL|field|KMS_KEY_CACHE_SIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|KMS_KEY_CACHE_SIZE_DEFAULT
init|=
literal|100
decl_stmt|;
DECL|field|KMS_KEY_CACHE_LOW_WATERMARK
specifier|public
specifier|static
specifier|final
name|String
name|KMS_KEY_CACHE_LOW_WATERMARK
init|=
name|KEY_CACHE_PREFIX
operator|+
literal|"low.watermark"
decl_stmt|;
DECL|field|KMS_KEY_CACHE_LOW_WATERMARK_DEFAULT
specifier|public
specifier|static
specifier|final
name|float
name|KMS_KEY_CACHE_LOW_WATERMARK_DEFAULT
init|=
literal|0.30f
decl_stmt|;
DECL|field|KMS_KEY_CACHE_EXPIRY_MS
specifier|public
specifier|static
specifier|final
name|String
name|KMS_KEY_CACHE_EXPIRY_MS
init|=
name|KEY_CACHE_PREFIX
operator|+
literal|"expiry"
decl_stmt|;
DECL|field|KMS_KEY_CACHE_EXPIRY_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|KMS_KEY_CACHE_EXPIRY_DEFAULT
init|=
literal|43200000
decl_stmt|;
DECL|field|KMS_KEY_CACHE_NUM_REFILL_THREADS
specifier|public
specifier|static
specifier|final
name|String
name|KMS_KEY_CACHE_NUM_REFILL_THREADS
init|=
name|KEY_CACHE_PREFIX
operator|+
literal|"num.fill.threads"
decl_stmt|;
DECL|field|KMS_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|KMS_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT
init|=
literal|2
decl_stmt|;
DECL|class|CryptoExtension
specifier|private
specifier|static
class|class
name|CryptoExtension
implements|implements
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
block|{
DECL|class|EncryptedQueueRefiller
specifier|private
class|class
name|EncryptedQueueRefiller
implements|implements
name|ValueQueue
operator|.
name|QueueRefiller
argument_list|<
name|EncryptedKeyVersion
argument_list|>
block|{
annotation|@
name|Override
DECL|method|fillQueueForKey (String keyName, Queue<EncryptedKeyVersion> keyQueue, int numKeys)
specifier|public
name|void
name|fillQueueForKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Queue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|keyQueue
parameter_list|,
name|int
name|numKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|retEdeks
init|=
operator|new
name|LinkedList
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|retEdeks
operator|.
name|add
argument_list|(
name|keyProviderCryptoExtension
operator|.
name|generateEncryptedKey
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|keyQueue
operator|.
name|addAll
argument_list|(
name|retEdeks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|keyProviderCryptoExtension
specifier|private
name|KeyProviderCryptoExtension
name|keyProviderCryptoExtension
decl_stmt|;
DECL|field|encKeyVersionQueue
specifier|private
specifier|final
name|ValueQueue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|encKeyVersionQueue
decl_stmt|;
DECL|method|CryptoExtension (Configuration conf, KeyProviderCryptoExtension keyProviderCryptoExtension)
specifier|public
name|CryptoExtension
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|KeyProviderCryptoExtension
name|keyProviderCryptoExtension
parameter_list|)
block|{
name|this
operator|.
name|keyProviderCryptoExtension
operator|=
name|keyProviderCryptoExtension
expr_stmt|;
name|encKeyVersionQueue
operator|=
operator|new
name|ValueQueue
argument_list|<
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
argument_list|>
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|KMS_KEY_CACHE_SIZE
argument_list|,
name|KMS_KEY_CACHE_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|KMS_KEY_CACHE_LOW_WATERMARK
argument_list|,
name|KMS_KEY_CACHE_LOW_WATERMARK_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|KMS_KEY_CACHE_EXPIRY_MS
argument_list|,
name|KMS_KEY_CACHE_EXPIRY_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|KMS_KEY_CACHE_NUM_REFILL_THREADS
argument_list|,
name|KMS_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT
argument_list|)
argument_list|,
name|SyncGenerationPolicy
operator|.
name|LOW_WATERMARK
argument_list|,
operator|new
name|EncryptedQueueRefiller
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|warmUpEncryptedKeys (String... keyNames)
specifier|public
name|void
name|warmUpEncryptedKeys
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|encKeyVersionQueue
operator|.
name|initializeQueuesForKeys
argument_list|(
name|keyNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|generateEncryptedKey (String encryptionKeyName)
specifier|public
name|EncryptedKeyVersion
name|generateEncryptedKey
parameter_list|(
name|String
name|encryptionKeyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
try|try
block|{
return|return
name|encKeyVersionQueue
operator|.
name|getNext
argument_list|(
name|encryptionKeyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|KeyVersion
DECL|method|decryptEncryptedKey (EncryptedKeyVersion encryptedKeyVersion)
name|decryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|keyProviderCryptoExtension
operator|.
name|decryptEncryptedKey
argument_list|(
name|encryptedKeyVersion
argument_list|)
return|;
block|}
block|}
comment|/**    * This class is a proxy for a<code>KeyProviderCryptoExtension</code> that    * decorates the underlying<code>CryptoExtension</code> with one that eagerly    * caches pre-generated Encrypted Keys using a<code>ValueQueue</code>    *     * @param conf Configuration object to load parameters from    * @param keyProviderCryptoExtension<code>KeyProviderCryptoExtension</code>    * to delegate calls to.    */
DECL|method|EagerKeyGeneratorKeyProviderCryptoExtension (Configuration conf, KeyProviderCryptoExtension keyProviderCryptoExtension)
specifier|public
name|EagerKeyGeneratorKeyProviderCryptoExtension
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|KeyProviderCryptoExtension
name|keyProviderCryptoExtension
parameter_list|)
block|{
name|super
argument_list|(
name|keyProviderCryptoExtension
argument_list|,
operator|new
name|CryptoExtension
argument_list|(
name|conf
argument_list|,
name|keyProviderCryptoExtension
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

