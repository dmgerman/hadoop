begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSRESTConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|HttpUserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Class providing the REST bindings, via Jersey, for the KMS.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|SERVICE_VERSION
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMS
specifier|public
class|class
name|KMS
block|{
DECL|enum|KMSOp
specifier|public
specifier|static
enum|enum
name|KMSOp
block|{
DECL|enumConstant|CREATE_KEY
DECL|enumConstant|DELETE_KEY
DECL|enumConstant|ROLL_NEW_VERSION
DECL|enumConstant|INVALIDATE_CACHE
name|CREATE_KEY
block|,
name|DELETE_KEY
block|,
name|ROLL_NEW_VERSION
block|,
name|INVALIDATE_CACHE
block|,
DECL|enumConstant|GET_KEYS
DECL|enumConstant|GET_KEYS_METADATA
name|GET_KEYS
block|,
name|GET_KEYS_METADATA
block|,
DECL|enumConstant|GET_KEY_VERSIONS
DECL|enumConstant|GET_METADATA
DECL|enumConstant|GET_KEY_VERSION
DECL|enumConstant|GET_CURRENT_KEY
name|GET_KEY_VERSIONS
block|,
name|GET_METADATA
block|,
name|GET_KEY_VERSION
block|,
name|GET_CURRENT_KEY
block|,
DECL|enumConstant|GENERATE_EEK
DECL|enumConstant|DECRYPT_EEK
DECL|enumConstant|REENCRYPT_EEK
name|GENERATE_EEK
block|,
name|DECRYPT_EEK
block|,
name|REENCRYPT_EEK
block|}
DECL|field|provider
specifier|private
name|KeyProviderCryptoExtension
name|provider
decl_stmt|;
DECL|field|kmsAudit
specifier|private
name|KMSAudit
name|kmsAudit
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|KMS ()
specifier|public
name|KMS
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|=
name|KMSWebApp
operator|.
name|getKeyProvider
argument_list|()
expr_stmt|;
name|kmsAudit
operator|=
name|KMSWebApp
operator|.
name|getKMSAudit
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAccess (KMSACLs.Type aclType, UserGroupInformation ugi, KMSOp operation)
specifier|private
name|void
name|assertAccess
parameter_list|(
name|KMSACLs
operator|.
name|Type
name|aclType
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|KMSOp
name|operation
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|assertAccess
argument_list|(
name|aclType
argument_list|,
name|ugi
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAccess (KMSACLs.Type aclType, UserGroupInformation ugi, KMSOp operation, String key)
specifier|private
name|void
name|assertAccess
parameter_list|(
name|KMSACLs
operator|.
name|Type
name|aclType
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|KMSOp
name|operation
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|assertAccess
argument_list|(
name|aclType
argument_list|,
name|ugi
argument_list|,
name|operation
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeyMaterial ( KeyProvider.KeyVersion keyVersion)
specifier|private
specifier|static
name|KeyProvider
operator|.
name|KeyVersion
name|removeKeyMaterial
parameter_list|(
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
parameter_list|)
block|{
return|return
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
name|keyVersion
operator|.
name|getName
argument_list|()
argument_list|,
name|keyVersion
operator|.
name|getVersionName
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getKeyURI (String domain, String keyName)
specifier|private
specifier|static
name|URI
name|getKeyURI
parameter_list|(
name|String
name|domain
parameter_list|,
name|String
name|keyName
parameter_list|)
block|{
return|return
name|UriBuilder
operator|.
name|fromPath
argument_list|(
literal|"{a}/{b}/{c}"
argument_list|)
operator|.
name|build
argument_list|(
name|domain
argument_list|,
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|keyName
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_RESOURCE
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createKey (Map jsonKey)
specifier|public
name|Response
name|createKey
parameter_list|(
name|Map
name|jsonKey
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering createKey Method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
operator|(
name|String
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|)
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|)
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|CREATE
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|CREATE_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|String
name|cipher
init|=
operator|(
name|String
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|CIPHER_FIELD
argument_list|)
decl_stmt|;
specifier|final
name|String
name|material
decl_stmt|;
name|material
operator|=
operator|(
name|String
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
expr_stmt|;
name|int
name|length
init|=
operator|(
name|jsonKey
operator|.
name|containsKey
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|)
operator|)
condition|?
operator|(
name|Integer
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|)
else|:
literal|0
decl_stmt|;
name|String
name|description
init|=
operator|(
name|String
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|DESCRIPTION_FIELD
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating key with name {}, cipher being used{}, "
operator|+
literal|"length of key {}, description of key {}"
argument_list|,
name|name
argument_list|,
name|cipher
argument_list|,
name|length
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|jsonKey
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|ATTRIBUTES_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|SET_KEY_MATERIAL
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|CREATE_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|final
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|KMSWebApp
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cipher
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setCipher
argument_list|(
name|cipher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|!=
literal|0
condition|)
block|{
name|options
operator|.
name|setBitLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
init|=
operator|(
name|material
operator|!=
literal|null
operator|)
condition|?
name|provider
operator|.
name|createKey
argument_list|(
name|name
argument_list|,
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|material
argument_list|)
argument_list|,
name|options
argument_list|)
else|:
name|provider
operator|.
name|createKey
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|keyVersion
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|CREATE_KEY
argument_list|,
name|name
argument_list|,
literal|"UserProvidedMaterial:"
operator|+
operator|(
name|material
operator|!=
literal|null
operator|)
operator|+
literal|" Description:"
operator|+
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|hasAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|keyVersion
operator|=
name|removeKeyMaterial
argument_list|(
name|keyVersion
argument_list|)
expr_stmt|;
block|}
name|Map
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|keyVersion
argument_list|)
decl_stmt|;
name|String
name|requestURL
init|=
name|KMSMDCFilter
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|requestURL
operator|.
name|lastIndexOf
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_RESOURCE
argument_list|)
decl_stmt|;
name|requestURL
operator|=
name|requestURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting createKey Method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|getKeyURI
argument_list|(
name|KMSRESTConstants
operator|.
name|SERVICE_VERSION
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|getKeyURI
argument_list|(
name|requestURL
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in createKey."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}"
argument_list|)
DECL|method|deleteKey (@athParamR) final String name)
specifier|public
name|Response
name|deleteKey
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering deleteKey method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DELETE
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|DELETE_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting key with name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|deleteKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|DELETE_KEY
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting deleteKey method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in deleteKey."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|rolloverKey (@athParamR) final String name, Map jsonMaterial)
specifier|public
name|Response
name|rolloverKey
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|,
name|Map
name|jsonMaterial
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering rolloverKey Method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|ROLL_NEW_VERSION
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rolling key with name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|String
name|material
init|=
operator|(
name|String
operator|)
name|jsonMaterial
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|SET_KEY_MATERIAL
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|ROLL_NEW_VERSION
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyVersion
name|keyVersion
init|=
operator|(
name|material
operator|!=
literal|null
operator|)
condition|?
name|provider
operator|.
name|rollNewVersion
argument_list|(
name|name
argument_list|,
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|material
argument_list|)
argument_list|)
else|:
name|provider
operator|.
name|rollNewVersion
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|keyVersion
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|ROLL_NEW_VERSION
argument_list|,
name|name
argument_list|,
literal|"UserProvidedMaterial:"
operator|+
operator|(
name|material
operator|!=
literal|null
operator|)
operator|+
literal|" NewVersion:"
operator|+
name|keyVersion
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|KMSWebApp
operator|.
name|getACLs
argument_list|()
operator|.
name|hasAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET
argument_list|,
name|user
argument_list|)
condition|)
block|{
name|keyVersion
operator|=
name|removeKeyMaterial
argument_list|(
name|keyVersion
argument_list|)
expr_stmt|;
block|}
name|Map
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|keyVersion
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting rolloverKey Method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in rolloverKey."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|INVALIDATECACHE_RESOURCE
argument_list|)
DECL|method|invalidateCache (@athParamR) final String name)
specifier|public
name|Response
name|invalidateCache
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering invalidateCache Method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|ROLLOVER
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|INVALIDATE_CACHE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalidating cache with key name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|provider
operator|.
name|invalidateCache
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|INVALIDATE_CACHE
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting invalidateCache for key name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in invalidateCache for key name {}."
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_METADATA_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getKeysMetadata (@ueryParamKMSRESTConstants.KEY) List<String> keyNamesList)
specifier|public
name|Response
name|getKeysMetadata
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|keyNamesList
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getKeysMetadata method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|keyNames
init|=
name|keyNamesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keyNamesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET_METADATA
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEYS_METADATA
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|Metadata
index|[]
name|keysMeta
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyProvider
operator|.
name|Metadata
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
operator|.
name|Metadata
index|[]
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getKeysMetadata
argument_list|(
name|keyNames
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|keyNames
argument_list|,
name|keysMeta
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEYS_METADATA
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getKeysMetadata method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getKeysmetadata."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_NAMES_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getKeyNames ()
specifier|public
name|Response
name|getKeyNames
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getKeyNames method."
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET_KEYS
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEYS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|json
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getKeys
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEYS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getKeyNames method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getkeyNames."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}"
argument_list|)
DECL|method|getKey (@athParamR) String name)
specifier|public
name|Response
name|getKey
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getKey method."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting key information for key with name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getKey method."
argument_list|)
expr_stmt|;
return|return
name|getMetadata
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getKey."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|METADATA_SUB_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getMetadata (@athParamR) final String name)
specifier|public
name|Response
name|getMetadata
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getMetadata method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getAdminCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET_METADATA
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_METADATA
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting metadata for key with name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|Metadata
name|metadata
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyProvider
operator|.
name|Metadata
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyProvider
operator|.
name|Metadata
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getMetadata
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|name
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_METADATA
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getMetadata method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getMetadata."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|CURRENT_VERSION_SUB_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getCurrentVersion (@athParamR) final String name)
specifier|public
name|Response
name|getCurrentVersion
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getCurrentVersion method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getKeyCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_CURRENT_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting key version for key with name {}."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|KeyVersion
name|keyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getCurrentKey
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|keyVersion
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_CURRENT_KEY
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getCurrentVersion method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getCurrentVersion."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
operator|+
literal|"/{versionName:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getKeyVersion ( @athParamR) final String versionName)
specifier|public
name|Response
name|getKeyVersion
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"versionName"
argument_list|)
specifier|final
name|String
name|versionName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getKeyVersion method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|versionName
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getKeyCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEY_VERSION
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting key with version name {}."
argument_list|,
name|versionName
argument_list|)
expr_stmt|;
name|KeyVersion
name|keyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getKeyVersion
argument_list|(
name|versionName
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyVersion
operator|!=
literal|null
condition|)
block|{
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEY_VERSION
argument_list|,
name|keyVersion
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|Object
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|keyVersion
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getKeyVersion method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getKeyVersion."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|EEK_SUB_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|generateEncryptedKeys ( @athParamR) final String name, @QueryParam(KMSRESTConstants.EEK_OP) String edekOp, @DefaultValue(R) @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)
specifier|public
name|Response
name|generateEncryptedKeys
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|)
name|String
name|edekOp
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
literal|"1"
argument_list|)
annotation|@
name|QueryParam
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_NUM_KEYS
argument_list|)
specifier|final
name|int
name|numKeys
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering generateEncryptedKeys method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|KMSClientProvider
operator|.
name|checkNotNull
argument_list|(
name|edekOp
argument_list|,
literal|"eekOp"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generating encrypted key with name {},"
operator|+
literal|" the edek Operation is {}."
argument_list|,
name|name
argument_list|,
name|edekOp
argument_list|)
expr_stmt|;
name|Object
name|retJSON
decl_stmt|;
if|if
condition|(
name|edekOp
operator|.
name|equals
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_GENERATE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"edek Operation is Generate."
argument_list|)
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
name|name
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|retEdeks
init|=
operator|new
name|LinkedList
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated Encrypted key for {} number of "
operator|+
literal|"keys."
argument_list|,
name|numKeys
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
name|retEdeks
operator|.
name|add
argument_list|(
name|provider
operator|.
name|generateEncryptedKey
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in generateEncryptedKeys:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GENERATE_EEK
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|retJSON
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|EncryptedKeyVersion
name|edek
range|:
name|retEdeks
control|)
block|{
operator|(
operator|(
name|ArrayList
operator|)
name|retJSON
operator|)
operator|.
name|add
argument_list|(
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|edek
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StringBuilder
name|error
decl_stmt|;
name|error
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"IllegalArgumentException Wrong "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
literal|" value, it must be "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_GENERATE
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
literal|" or "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_DECRYPT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|KMSWebApp
operator|.
name|getGenerateEEKCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting generateEncryptedKeys method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|retJSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in generateEncryptedKeys."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
operator|+
literal|"/{versionName:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|EEK_SUB_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|handleEncryptedKeyOp ( @athParamR) final String versionName, @QueryParam(KMSRESTConstants.EEK_OP) String eekOp, Map jsonPayload)
specifier|public
name|Response
name|handleEncryptedKeyOp
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"versionName"
argument_list|)
specifier|final
name|String
name|versionName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|)
name|String
name|eekOp
parameter_list|,
name|Map
name|jsonPayload
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering decryptEncryptedKey method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|versionName
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|KMSClientProvider
operator|.
name|checkNotNull
argument_list|(
name|eekOp
argument_list|,
literal|"eekOp"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decrypting key for {}, the edek Operation is {}."
argument_list|,
name|versionName
argument_list|,
name|eekOp
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keyName
init|=
operator|(
name|String
operator|)
name|jsonPayload
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|)
decl_stmt|;
name|String
name|ivStr
init|=
operator|(
name|String
operator|)
name|jsonPayload
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|)
decl_stmt|;
name|String
name|encMaterialStr
init|=
operator|(
name|String
operator|)
name|jsonPayload
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotNull
argument_list|(
name|ivStr
argument_list|,
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|iv
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|ivStr
argument_list|)
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotNull
argument_list|(
name|encMaterialStr
argument_list|,
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|encMaterial
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|encMaterialStr
argument_list|)
decl_stmt|;
name|Object
name|retJSON
decl_stmt|;
if|if
condition|(
name|eekOp
operator|.
name|equals
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_DECRYPT
argument_list|)
condition|)
block|{
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|DECRYPT_EEK
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|retKeyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|decryptEncryptedKey
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSEncryptedKeyVersion
argument_list|(
name|keyName
argument_list|,
name|versionName
argument_list|,
name|iv
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|encMaterial
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|retJSON
operator|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|retKeyVersion
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|DECRYPT_EEK
argument_list|,
name|keyName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eekOp
operator|.
name|equals
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_REENCRYPT
argument_list|)
condition|)
block|{
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GENERATE_EEK
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|retEncryptedKeyVersion
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|reencryptEncryptedKey
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSEncryptedKeyVersion
argument_list|(
name|keyName
argument_list|,
name|versionName
argument_list|,
name|iv
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|encMaterial
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|retJSON
operator|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|retEncryptedKeyVersion
argument_list|)
expr_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|REENCRYPT_EEK
argument_list|,
name|keyName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|error
decl_stmt|;
name|error
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"IllegalArgumentException Wrong "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
literal|" value, it must be "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_GENERATE
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
literal|" or "
argument_list|)
expr_stmt|;
name|error
operator|.
name|append
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_DECRYPT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|KMSWebApp
operator|.
name|getDecryptEEKCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting handleEncryptedKeyOp method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|retJSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in handleEncryptedKeyOp."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
operator|+
literal|"/{name:.*}/"
operator|+
name|KMSRESTConstants
operator|.
name|VERSIONS_SUB_RESOURCE
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|getKeyVersions (@athParamR) final String name)
specifier|public
name|Response
name|getKeyVersions
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Entering getKeyVersions method."
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
name|KMSClientProvider
operator|.
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|KMSWebApp
operator|.
name|getKeyCallsMeter
argument_list|()
operator|.
name|mark
argument_list|()
expr_stmt|;
name|assertAccess
argument_list|(
name|KMSACLs
operator|.
name|Type
operator|.
name|GET
argument_list|,
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEY_VERSIONS
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting key versions for key {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|ret
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|List
argument_list|<
name|KeyVersion
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|provider
operator|.
name|getKeyVersions
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|json
init|=
name|KMSServerJSONUtils
operator|.
name|toJSON
argument_list|(
name|ret
argument_list|)
decl_stmt|;
name|kmsAudit
operator|.
name|ok
argument_list|(
name|user
argument_list|,
name|KMSOp
operator|.
name|GET_KEY_VERSIONS
argument_list|,
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exiting getKeyVersions method."
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|entity
argument_list|(
name|json
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception in getKeyVersions."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

