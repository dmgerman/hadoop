begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Interface defining a KMS audit logger.  *<p>  * IMPORTANT WARNING: Audit logs should be strictly backwards-compatible,  * because there are usually parsing tools highly dependent on the audit log  * formatting. Different tools have different ways of parsing the audit log, so  * changing the audit log output in any way is considered incompatible,  * and will haunt the consumer tools / developers. Don't do it.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|interface|KMSAuditLogger
interface|interface
name|KMSAuditLogger
block|{
DECL|enum|OpStatus
enum|enum
name|OpStatus
block|{
DECL|enumConstant|OK
DECL|enumConstant|UNAUTHORIZED
DECL|enumConstant|UNAUTHENTICATED
DECL|enumConstant|ERROR
name|OK
block|,
name|UNAUTHORIZED
block|,
name|UNAUTHENTICATED
block|,
name|ERROR
block|;   }
comment|/**    * Class defining an audit event.    */
DECL|class|AuditEvent
class|class
name|AuditEvent
block|{
DECL|field|accessCount
specifier|private
specifier|final
name|AtomicLong
name|accessCount
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|op
specifier|private
specifier|final
name|KMS
operator|.
name|KMSOp
name|op
decl_stmt|;
DECL|field|keyName
specifier|private
specifier|final
name|String
name|keyName
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|impersonator
specifier|private
specifier|final
name|String
name|impersonator
decl_stmt|;
DECL|field|remoteHost
specifier|private
specifier|final
name|String
name|remoteHost
decl_stmt|;
DECL|field|extraMsg
specifier|private
specifier|final
name|String
name|extraMsg
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
init|=
name|startTime
decl_stmt|;
DECL|method|AuditEvent (KMS.KMSOp op, UserGroupInformation ugi, String keyName, String remoteHost, String msg)
name|AuditEvent
parameter_list|(
name|KMS
operator|.
name|KMSOp
name|op
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|remoteHost
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|user
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|impersonator
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|user
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|this
operator|.
name|impersonator
operator|=
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|impersonator
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|this
operator|.
name|remoteHost
operator|=
name|remoteHost
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|extraMsg
operator|=
name|msg
expr_stmt|;
block|}
DECL|method|getAccessCount ()
specifier|public
name|AtomicLong
name|getAccessCount
parameter_list|()
block|{
return|return
name|accessCount
return|;
block|}
DECL|method|getOp ()
specifier|public
name|KMS
operator|.
name|KMSOp
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getImpersonator ()
specifier|public
name|String
name|getImpersonator
parameter_list|()
block|{
return|return
name|impersonator
return|;
block|}
DECL|method|getRemoteHost ()
specifier|public
name|String
name|getRemoteHost
parameter_list|()
block|{
return|return
name|remoteHost
return|;
block|}
DECL|method|getExtraMsg ()
specifier|public
name|String
name|getExtraMsg
parameter_list|()
block|{
return|return
name|extraMsg
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getEndTime ()
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**      * Set the time this audit event is finished.      */
DECL|method|setEndTime (long endTime)
name|void
name|setEndTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"op="
operator|+
name|op
argument_list|)
operator|.
name|append
argument_list|(
literal|", keyName="
operator|+
name|keyName
argument_list|)
operator|.
name|append
argument_list|(
literal|", user="
operator|+
name|user
argument_list|)
operator|.
name|append
argument_list|(
literal|", impersonator="
operator|+
name|impersonator
argument_list|)
operator|.
name|append
argument_list|(
literal|", remoteHost="
operator|+
name|remoteHost
argument_list|)
operator|.
name|append
argument_list|(
literal|", extraMsg="
operator|+
name|extraMsg
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Clean up the audit logger.    *    * @throws IOException    */
DECL|method|cleanup ()
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Initialize the audit logger.    *    * @param conf The configuration object.    * @throws IOException    */
DECL|method|initialize (Configuration conf)
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Log an audit event.    *    * @param status The status of the event.    * @param event  The audit event.    */
DECL|method|logAuditEvent (final OpStatus status, final AuditEvent event)
name|void
name|logAuditEvent
parameter_list|(
specifier|final
name|OpStatus
name|status
parameter_list|,
specifier|final
name|AuditEvent
name|event
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

