begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|server
operator|.
name|KMSAudit
operator|.
name|KMS_LOGGER_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple text format audit logger. This is the default.  *<p>  * IMPORTANT WARNING: Audit logs should be strictly backwards-compatible,  * because there are usually parsing tools highly dependent on the audit log  * formatting. Different tools have different ways of parsing the audit log, so  * changing the audit log output in any way is considered incompatible,  * and will haunt the consumer tools / developers. Don't do it.  */
end_comment

begin_class
DECL|class|SimpleKMSAuditLogger
class|class
name|SimpleKMSAuditLogger
implements|implements
name|KMSAuditLogger
block|{
DECL|field|auditLog
specifier|final
specifier|private
name|Logger
name|auditLog
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMS_LOGGER_NAME
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|initialize (Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|logAuditEvent (final OpStatus status, final AuditEvent event)
specifier|public
name|void
name|logAuditEvent
parameter_list|(
specifier|final
name|OpStatus
name|status
parameter_list|,
specifier|final
name|AuditEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|event
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|&&
operator|(
name|event
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|KMSAudit
operator|.
name|AGGREGATE_OPS_WHITELIST
operator|.
name|contains
argument_list|(
name|event
operator|.
name|getOp
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|OK
case|:
name|auditLog
operator|.
name|info
argument_list|(
literal|"{}[op={}, key={}, user={}, accessCount={}, interval={}ms] {}"
argument_list|,
name|status
argument_list|,
name|event
operator|.
name|getOp
argument_list|()
argument_list|,
name|event
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|event
operator|.
name|getUser
argument_list|()
argument_list|,
name|event
operator|.
name|getAccessCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
operator|(
name|event
operator|.
name|getEndTime
argument_list|()
operator|-
name|event
operator|.
name|getStartTime
argument_list|()
operator|)
argument_list|,
name|event
operator|.
name|getExtraMsg
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNAUTHORIZED
case|:
name|logAuditSimpleFormat
argument_list|(
name|status
argument_list|,
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
name|logAuditSimpleFormat
argument_list|(
name|status
argument_list|,
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|logAuditSimpleFormat
argument_list|(
name|status
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logAuditSimpleFormat (final OpStatus status, final AuditEvent event)
specifier|private
name|void
name|logAuditSimpleFormat
parameter_list|(
specifier|final
name|OpStatus
name|status
parameter_list|,
specifier|final
name|AuditEvent
name|event
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|kvs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getOp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
literal|"op="
operator|+
name|event
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|event
operator|.
name|getKeyName
argument_list|()
argument_list|)
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
literal|"key="
operator|+
name|event
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
name|kvs
operator|.
name|add
argument_list|(
literal|"user="
operator|+
name|event
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auditLog
operator|.
name|info
argument_list|(
literal|"{} {}"
argument_list|,
name|status
argument_list|,
name|event
operator|.
name|getExtraMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|join
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|auditLog
operator|.
name|info
argument_list|(
literal|"{}[{}] {}"
argument_list|,
name|status
argument_list|,
name|join
argument_list|,
name|event
operator|.
name|getExtraMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

