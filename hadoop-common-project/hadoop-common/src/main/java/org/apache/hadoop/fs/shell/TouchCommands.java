begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Unix touch like commands  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TouchCommands
specifier|public
class|class
name|TouchCommands
extends|extends
name|FsCommand
block|{
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Touchz
operator|.
name|class
argument_list|,
literal|"-touchz"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|Touch
operator|.
name|class
argument_list|,
literal|"-touch"
argument_list|)
expr_stmt|;
block|}
comment|/**    * (Re)create zero-length file at the specified path.    * This will be replaced by a more UNIX-like touch when files may be    * modified.    */
DECL|class|Touchz
specifier|public
specifier|static
class|class
name|Touchz
extends|extends
name|TouchCommands
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"touchz"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"<path> ..."
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Creates a file of zero length "
operator|+
literal|"at<path> with current time as the timestamp of that<path>. "
operator|+
literal|"An error is returned if the file exists with non-zero length\n"
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// TODO: handle this
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|getLen
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|PathIOException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Not a zero-length file"
argument_list|)
throw|;
block|}
name|touchz
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processNonexistentPath (PathData item)
specifier|protected
name|void
name|processNonexistentPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|parentExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withFullyQualifiedPath
argument_list|(
name|item
operator|.
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|touchz
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
DECL|method|touchz (PathData item)
specifier|private
name|void
name|touchz
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|item
operator|.
name|fs
operator|.
name|create
argument_list|(
name|item
operator|.
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A UNIX like touch command.    */
DECL|class|Touch
specifier|public
specifier|static
class|class
name|Touch
extends|extends
name|TouchCommands
block|{
DECL|field|OPTION_CHANGE_ONLY_MODIFICATION_TIME
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_CHANGE_ONLY_MODIFICATION_TIME
init|=
literal|"m"
decl_stmt|;
DECL|field|OPTION_CHANGE_ONLY_ACCESS_TIME
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_CHANGE_ONLY_ACCESS_TIME
init|=
literal|"a"
decl_stmt|;
DECL|field|OPTION_USE_TIMESTAMP
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_USE_TIMESTAMP
init|=
literal|"t"
decl_stmt|;
DECL|field|OPTION_DO_NOT_CREATE_FILE
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_DO_NOT_CREATE_FILE
init|=
literal|"c"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"touch"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"[-"
operator|+
name|OPTION_CHANGE_ONLY_ACCESS_TIME
operator|+
literal|"] [-"
operator|+
name|OPTION_CHANGE_ONLY_MODIFICATION_TIME
operator|+
literal|"] [-"
operator|+
name|OPTION_USE_TIMESTAMP
operator|+
literal|" TIMESTAMP ] [-"
operator|+
name|OPTION_DO_NOT_CREATE_FILE
operator|+
literal|"]<path> ..."
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Updates the access and modification times of the file specified by the"
operator|+
literal|"<path> to the current time. If the file does not exist, then a zero"
operator|+
literal|" length file is created at<path> with current time as the timestamp"
operator|+
literal|" of that<path>.\n"
operator|+
literal|"-"
operator|+
name|OPTION_CHANGE_ONLY_ACCESS_TIME
operator|+
literal|" Change only the access time \n"
operator|+
literal|"-"
operator|+
name|OPTION_CHANGE_ONLY_MODIFICATION_TIME
operator|+
literal|" Change only the modification time \n"
operator|+
literal|"-"
operator|+
name|OPTION_USE_TIMESTAMP
operator|+
literal|" TIMESTAMP"
operator|+
literal|" Use specified timestamp (in format yyyyMMddHHmmss) instead of current time \n"
operator|+
literal|"-"
operator|+
name|OPTION_DO_NOT_CREATE_FILE
operator|+
literal|" Do not create any files"
decl_stmt|;
DECL|field|changeModTime
specifier|private
name|boolean
name|changeModTime
init|=
literal|false
decl_stmt|;
DECL|field|changeAccessTime
specifier|private
name|boolean
name|changeAccessTime
init|=
literal|false
decl_stmt|;
DECL|field|doNotCreate
specifier|private
name|boolean
name|doNotCreate
init|=
literal|false
decl_stmt|;
DECL|field|timestamp
specifier|private
name|String
name|timestamp
decl_stmt|;
DECL|field|dateFormat
specifier|private
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd:HHmmss"
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getDateFormat ()
specifier|public
name|DateFormat
name|getDateFormat
parameter_list|()
block|{
return|return
name|dateFormat
return|;
block|}
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-"
operator|+
name|OPTION_USE_TIMESTAMP
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|OPTION_USE_TIMESTAMP
argument_list|,
name|OPTION_CHANGE_ONLY_ACCESS_TIME
argument_list|,
name|OPTION_CHANGE_ONLY_MODIFICATION_TIME
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeModTime
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_CHANGE_ONLY_MODIFICATION_TIME
argument_list|)
expr_stmt|;
name|this
operator|.
name|changeAccessTime
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_CHANGE_ONLY_ACCESS_TIME
argument_list|)
expr_stmt|;
name|this
operator|.
name|doNotCreate
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_DO_NOT_CREATE_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|touch
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processNonexistentPath (PathData item)
specifier|protected
name|void
name|processNonexistentPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|parentExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withFullyQualifiedPath
argument_list|(
name|item
operator|.
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|touch
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
DECL|method|touch (PathData item)
specifier|private
name|void
name|touch
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|item
operator|.
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|doNotCreate
condition|)
block|{
return|return;
block|}
name|item
operator|.
name|fs
operator|.
name|create
argument_list|(
name|item
operator|.
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
comment|// update the time only if user specified a timestamp using -t option.
name|updateTime
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateTime
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateTime (PathData item)
specifier|private
name|void
name|updateTime
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|time
operator|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|timestamp
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to parse the specified timestamp "
operator|+
name|timestamp
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|changeModTime
operator|^
name|changeAccessTime
condition|)
block|{
name|long
name|atime
init|=
name|changeModTime
condition|?
operator|-
literal|1
else|:
name|time
decl_stmt|;
name|long
name|mtime
init|=
name|changeAccessTime
condition|?
operator|-
literal|1
else|:
name|time
decl_stmt|;
name|item
operator|.
name|fs
operator|.
name|setTimes
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|.
name|fs
operator|.
name|setTimes
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|time
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

