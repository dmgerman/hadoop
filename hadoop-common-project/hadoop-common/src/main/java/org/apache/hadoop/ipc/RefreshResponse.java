begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Return a response in the handler method for the user to see.  * Useful since you may want to display status to a user even though an  * error has not occurred.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RefreshResponse
specifier|public
class|class
name|RefreshResponse
block|{
DECL|field|returnCode
specifier|private
name|int
name|returnCode
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|senderName
specifier|private
name|String
name|senderName
decl_stmt|;
comment|/**    * Convenience method to create a response for successful refreshes.    * @return void response    */
DECL|method|successResponse ()
specifier|public
specifier|static
name|RefreshResponse
name|successResponse
parameter_list|()
block|{
return|return
operator|new
name|RefreshResponse
argument_list|(
literal|0
argument_list|,
literal|"Success"
argument_list|)
return|;
block|}
comment|// Most RefreshHandlers will use this
DECL|method|RefreshResponse (int returnCode, String message)
specifier|public
name|RefreshResponse
parameter_list|(
name|int
name|returnCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|returnCode
operator|=
name|returnCode
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
comment|/**    * Optionally set the sender of this RefreshResponse.    * This helps clarify things when multiple handlers respond.    * @param name The name of the sender    */
DECL|method|setSenderName (String name)
specifier|public
name|void
name|setSenderName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|senderName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getSenderName ()
specifier|public
name|String
name|getSenderName
parameter_list|()
block|{
return|return
name|senderName
return|;
block|}
DECL|method|getReturnCode ()
specifier|public
name|int
name|getReturnCode
parameter_list|()
block|{
return|return
name|returnCode
return|;
block|}
DECL|method|setReturnCode (int rc)
specifier|public
name|void
name|setReturnCode
parameter_list|(
name|int
name|rc
parameter_list|)
block|{
name|returnCode
operator|=
name|rc
expr_stmt|;
block|}
DECL|method|setMessage (String m)
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|senderName
operator|!=
literal|null
condition|)
block|{
name|ret
operator|+=
name|senderName
operator|+
literal|": "
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|ret
operator|+=
name|message
expr_stmt|;
block|}
name|ret
operator|+=
literal|" (exit "
operator|+
name|returnCode
operator|+
literal|")"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

