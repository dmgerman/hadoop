begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/** The call return from a method invocation. */
end_comment

begin_class
DECL|class|CallReturn
class|class
name|CallReturn
block|{
comment|/** The return state. */
DECL|enum|State
enum|enum
name|State
block|{
comment|/** Call is returned successfully. */
DECL|enumConstant|RETURNED
name|RETURNED
block|,
comment|/** Call throws an exception. */
DECL|enumConstant|EXCEPTION
name|EXCEPTION
block|,
comment|/** Call should be retried according to the {@link RetryPolicy}. */
DECL|enumConstant|RETRY
name|RETRY
block|,
comment|/** Call, which is async, is still in progress. */
DECL|enumConstant|ASYNC_CALL_IN_PROGRESS
name|ASYNC_CALL_IN_PROGRESS
block|,
comment|/** Call, which is async, just has been invoked. */
DECL|enumConstant|ASYNC_INVOKED
name|ASYNC_INVOKED
block|}
DECL|field|ASYNC_CALL_IN_PROGRESS
specifier|static
specifier|final
name|CallReturn
name|ASYNC_CALL_IN_PROGRESS
init|=
operator|new
name|CallReturn
argument_list|(
name|State
operator|.
name|ASYNC_CALL_IN_PROGRESS
argument_list|)
decl_stmt|;
DECL|field|ASYNC_INVOKED
specifier|static
specifier|final
name|CallReturn
name|ASYNC_INVOKED
init|=
operator|new
name|CallReturn
argument_list|(
name|State
operator|.
name|ASYNC_INVOKED
argument_list|)
decl_stmt|;
DECL|field|RETRY
specifier|static
specifier|final
name|CallReturn
name|RETRY
init|=
operator|new
name|CallReturn
argument_list|(
name|State
operator|.
name|RETRY
argument_list|)
decl_stmt|;
DECL|field|returnValue
specifier|private
specifier|final
name|Object
name|returnValue
decl_stmt|;
DECL|field|thrown
specifier|private
specifier|final
name|Throwable
name|thrown
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|State
name|state
decl_stmt|;
DECL|method|CallReturn (Object r)
name|CallReturn
parameter_list|(
name|Object
name|r
parameter_list|)
block|{
name|this
argument_list|(
name|r
argument_list|,
literal|null
argument_list|,
name|State
operator|.
name|RETURNED
argument_list|)
expr_stmt|;
block|}
DECL|method|CallReturn (Throwable t)
name|CallReturn
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|t
argument_list|,
name|State
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|CallReturn (State s)
specifier|private
name|CallReturn
parameter_list|(
name|State
name|s
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|CallReturn (Object r, Throwable t, State s)
specifier|private
name|CallReturn
parameter_list|(
name|Object
name|r
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|State
name|s
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|r
operator|==
literal|null
operator|||
name|t
operator|==
literal|null
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|r
expr_stmt|;
name|thrown
operator|=
name|t
expr_stmt|;
name|state
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getState ()
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getReturnValue ()
name|Object
name|getReturnValue
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|EXCEPTION
condition|)
block|{
throw|throw
name|thrown
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|==
name|State
operator|.
name|RETURNED
argument_list|,
literal|"state == %s"
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|returnValue
return|;
block|}
block|}
end_class

end_unit

