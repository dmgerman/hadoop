begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|CaseInsensitiveMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A collection of file-processing util methods  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FileUtil
specifier|public
class|class
name|FileUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* The error code is defined in winutils to indicate insufficient    * privilege to create symbolic links. This value need to keep in    * sync with the constant of the same name in:    * "src\winutils\common.h"    * */
DECL|field|SYMLINK_NO_PRIVILEGE
specifier|public
specifier|static
specifier|final
name|int
name|SYMLINK_NO_PRIVILEGE
init|=
literal|2
decl_stmt|;
comment|/**    * convert an array of FileStatus to an array of Path    *    * @param stats    *          an array of FileStatus objects    * @return an array of paths corresponding to the input    */
DECL|method|stat2Paths (FileStatus[] stats)
specifier|public
specifier|static
name|Path
index|[]
name|stat2Paths
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
name|stats
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * convert an array of FileStatus to an array of Path.    * If stats if null, return path    * @param stats    *          an array of FileStatus objects    * @param path    *          default path to return in stats is null    * @return an array of paths corresponding to the input    */
DECL|method|stat2Paths (FileStatus[] stats, Path path)
specifier|public
specifier|static
name|Path
index|[]
name|stat2Paths
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
operator|new
name|Path
index|[]
block|{
name|path
block|}
return|;
else|else
return|return
name|stat2Paths
argument_list|(
name|stats
argument_list|)
return|;
block|}
comment|/**    * Delete a directory and all its contents.  If    * we return false, the directory may be partially-deleted.    * (1) If dir is symlink to a file, the symlink is deleted. The file pointed    *     to by the symlink is not deleted.    * (2) If dir is symlink to a directory, symlink is deleted. The directory    *     pointed to by symlink is not deleted.    * (3) If dir is a normal file, it is deleted.    * (4) If dir is a normal directory, then dir and all its contents recursively    *     are deleted.    */
DECL|method|fullyDelete (final File dir)
specifier|public
specifier|static
name|boolean
name|fullyDelete
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
block|{
return|return
name|fullyDelete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Delete a directory and all its contents.  If    * we return false, the directory may be partially-deleted.    * (1) If dir is symlink to a file, the symlink is deleted. The file pointed    *     to by the symlink is not deleted.    * (2) If dir is symlink to a directory, symlink is deleted. The directory    *     pointed to by symlink is not deleted.    * (3) If dir is a normal file, it is deleted.    * (4) If dir is a normal directory, then dir and all its contents recursively    *     are deleted.    * @param dir the file or directory to be deleted    * @param tryGrantPermissions true if permissions should be modified to delete a file.    * @return true on success false on failure.    */
DECL|method|fullyDelete (final File dir, boolean tryGrantPermissions)
specifier|public
specifier|static
name|boolean
name|fullyDelete
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
name|boolean
name|tryGrantPermissions
parameter_list|)
block|{
if|if
condition|(
name|tryGrantPermissions
condition|)
block|{
comment|// try to chmod +rwx the parent folder of the 'dir':
name|File
name|parent
init|=
name|dir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|grantPermissions
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteImpl
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// dir is (a) normal file, (b) symlink to a file, (c) empty directory or
comment|// (d) symlink to a directory
return|return
literal|true
return|;
block|}
comment|// handle nonempty directory deletion
if|if
condition|(
operator|!
name|fullyDeleteContents
argument_list|(
name|dir
argument_list|,
name|tryGrantPermissions
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|deleteImpl
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Returns the target of the given symlink. Returns the empty string if    * the given path does not refer to a symlink or there is an error    * accessing the symlink.    * @param f File representing the symbolic link.    * @return The target of the symbolic link, empty string on error or if not    *         a symlink.    */
DECL|method|readLink (File f)
specifier|public
specifier|static
name|String
name|readLink
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|/* NB: Use readSymbolicLink in java.nio.file.Path once available. Could      * use getCanonicalPath in File to get the target of the symlink but that      * does not indicate if the given path refers to a symlink.      */
try|try
block|{
return|return
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getReadlinkCommand
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/*    * Pure-Java implementation of "chmod +rwx f".    */
DECL|method|grantPermissions (final File f)
specifier|private
specifier|static
name|void
name|grantPermissions
parameter_list|(
specifier|final
name|File
name|f
parameter_list|)
block|{
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setReadable
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteImpl (final File f, final boolean doLog)
specifier|private
specifier|static
name|boolean
name|deleteImpl
parameter_list|(
specifier|final
name|File
name|f
parameter_list|,
specifier|final
name|boolean
name|doLog
parameter_list|)
block|{
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"null file argument."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|boolean
name|wasDeleted
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasDeleted
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|boolean
name|ex
init|=
name|f
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|doLog
operator|&&
name|ex
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete file or dir ["
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"]: it still exists."
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|ex
return|;
block|}
comment|/**    * Delete the contents of a directory, not the directory itself.  If    * we return false, the directory may be partially-deleted.    * If dir is a symlink to a directory, all the contents of the actual    * directory pointed to by dir will be deleted.    */
DECL|method|fullyDeleteContents (final File dir)
specifier|public
specifier|static
name|boolean
name|fullyDeleteContents
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
block|{
return|return
name|fullyDeleteContents
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Delete the contents of a directory, not the directory itself.  If    * we return false, the directory may be partially-deleted.    * If dir is a symlink to a directory, all the contents of the actual    * directory pointed to by dir will be deleted.    * @param tryGrantPermissions if 'true', try grant +rwx permissions to this    * and all the underlying directories before trying to delete their contents.    */
DECL|method|fullyDeleteContents (final File dir, final boolean tryGrantPermissions)
specifier|public
specifier|static
name|boolean
name|fullyDeleteContents
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
specifier|final
name|boolean
name|tryGrantPermissions
parameter_list|)
block|{
if|if
condition|(
name|tryGrantPermissions
condition|)
block|{
comment|// to be able to list the dir and delete files from it
comment|// we must grant the dir rwx permissions:
name|grantPermissions
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|boolean
name|deletionSucceeded
init|=
literal|true
decl_stmt|;
specifier|final
name|File
index|[]
name|contents
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|contents
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|deleteImpl
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// normal file or symlink to another file
name|deletionSucceeded
operator|=
literal|false
expr_stmt|;
continue|continue;
comment|// continue deletion of other files/dirs under dir
block|}
block|}
else|else
block|{
comment|// Either directory or symlink to another directory.
comment|// Try deleting the directory as this might be a symlink
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|b
operator|=
name|deleteImpl
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
comment|//this was indeed a symlink or an empty directory
continue|continue;
block|}
comment|// if not an empty directory or symlink let
comment|// fullydelete handle it.
if|if
condition|(
operator|!
name|fullyDelete
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|,
name|tryGrantPermissions
argument_list|)
condition|)
block|{
name|deletionSucceeded
operator|=
literal|false
expr_stmt|;
comment|// continue deletion of other files/dirs under dir
block|}
block|}
block|}
block|}
return|return
name|deletionSucceeded
return|;
block|}
comment|/**    * Recursively delete a directory.    *    * @param fs {@link FileSystem} on which the path is present    * @param dir directory to recursively delete    * @throws IOException    * @deprecated Use {@link FileSystem#delete(Path, boolean)}    */
annotation|@
name|Deprecated
DECL|method|fullyDelete (FileSystem fs, Path dir)
specifier|public
specifier|static
name|void
name|fullyDelete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// If the destination is a subdirectory of the source, then
comment|// generate exception
comment|//
DECL|method|checkDependencies (FileSystem srcFS, Path src, FileSystem dstFS, Path dst)
specifier|private
specifier|static
name|void
name|checkDependencies
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcFS
operator|==
name|dstFS
condition|)
block|{
name|String
name|srcq
init|=
name|src
operator|.
name|makeQualified
argument_list|(
name|srcFS
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
name|String
name|dstq
init|=
name|dst
operator|.
name|makeQualified
argument_list|(
name|dstFS
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
if|if
condition|(
name|dstq
operator|.
name|startsWith
argument_list|(
name|srcq
argument_list|)
condition|)
block|{
if|if
condition|(
name|srcq
operator|.
name|length
argument_list|()
operator|==
name|dstq
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot copy "
operator|+
name|src
operator|+
literal|" to itself."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot copy "
operator|+
name|src
operator|+
literal|" to its subdirectory "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, Path src, FileSystem dstFS, Path dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|copy (FileSystem srcFS, Path[] srcs, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
index|[]
name|srcs
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
name|boolean
name|returnVal
init|=
literal|true
decl_stmt|;
name|StringBuilder
name|exceptions
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|==
literal|1
condition|)
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|srcs
index|[
literal|0
index|]
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
return|;
comment|// Check if dest is directory
if|if
condition|(
operator|!
name|dstFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"`"
operator|+
name|dst
operator|+
literal|"': specified destination directory "
operator|+
literal|"does not exist"
argument_list|)
throw|;
block|}
else|else
block|{
name|FileStatus
name|sdst
init|=
name|dstFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sdst
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"copying multiple files, but last argument `"
operator|+
name|dst
operator|+
literal|"' is not a directory"
argument_list|)
throw|;
block|}
for|for
control|(
name|Path
name|src
range|:
name|srcs
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
condition|)
name|returnVal
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|gotException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptions
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|returnVal
return|;
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, Path src, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|fileStatus
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, FileStatus srcStatus, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|FileStatus
name|srcStatus
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|dst
operator|=
name|checkDest
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|checkDependencies
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstFS
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|srcFS
argument_list|,
name|contents
index|[
name|i
index|]
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|srcFS
operator|.
name|open
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
name|dstFS
operator|.
name|create
argument_list|(
name|dst
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy all files in a directory to one output file (merge). */
DECL|method|copyMerge (FileSystem srcFS, Path srcDir, FileSystem dstFS, Path dstFile, boolean deleteSource, Configuration conf, String addString)
specifier|public
specifier|static
name|boolean
name|copyMerge
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dstFile
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|addString
parameter_list|)
throws|throws
name|IOException
block|{
name|dstFile
operator|=
name|checkDest
argument_list|(
name|srcDir
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dstFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|srcDir
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
return|return
literal|false
return|;
name|OutputStream
name|out
init|=
name|dstFS
operator|.
name|create
argument_list|(
name|dstFile
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|contents
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|contents
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
name|srcFS
operator|.
name|open
argument_list|(
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|addString
operator|!=
literal|null
condition|)
name|out
operator|.
name|write
argument_list|(
name|addString
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|srcDir
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy local files to a FileSystem. */
DECL|method|copy (File src, FileSystem dstFS, Path dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|dst
operator|=
name|checkDest
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dstFS
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
name|contents
index|[]
init|=
name|listFiles
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
name|dstFS
operator|.
name|create
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|src
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
operator|+
literal|": Permission denied"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
operator|+
literal|": No such file or directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|src
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy FileSystem files to local files. */
DECL|method|copy (FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|filestatus
init|=
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|filestatus
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Copy FileSystem files to local files. */
DECL|method|copy (FileSystem srcFS, FileStatus srcStatus, File dst, boolean deleteSource, Configuration conf)
specifier|private
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|FileStatus
name|srcStatus
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|srcFS
argument_list|,
name|contents
index|[
name|i
index|]
argument_list|,
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InputStream
name|in
init|=
name|srcFS
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|checkDest (String srcName, FileSystem dstFS, Path dst, boolean overwrite)
specifier|private
specifier|static
name|Path
name|checkDest
parameter_list|(
name|String
name|srcName
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dstFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|FileStatus
name|sdst
init|=
name|dstFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdst
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|srcName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
return|return
name|checkDest
argument_list|(
literal|null
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|srcName
argument_list|)
argument_list|,
name|overwrite
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
return|return
name|dst
return|;
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param filename The filename to convert    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (String filename)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filename
return|;
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param file The filename to convert    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (File file)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|makeShellPath
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param file The filename to convert    * @param makeCanonicalPath    *          Whether to make canonical path for the file passed    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (File file, boolean makeCanonicalPath)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|makeCanonicalPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|makeCanonicalPath
condition|)
block|{
return|return
name|makeShellPath
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|makeShellPath
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Takes an input dir and returns the du on that local directory. Very basic    * implementation.    *    * @param dir    *          The input dir to get the disk space of this local dir    * @return The total disk space of the input local directory    */
DECL|method|getDU (File dir)
specifier|public
specifier|static
name|long
name|getDU
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|dir
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
name|File
index|[]
name|allFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|allFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|isSymLink
decl_stmt|;
try|try
block|{
name|isSymLink
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|isSymlink
argument_list|(
name|allFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|isSymLink
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSymLink
condition|)
block|{
name|size
operator|+=
name|getDU
argument_list|(
name|allFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|size
return|;
block|}
block|}
comment|/**    * Given a File input it will unzip the file in a the unzip directory    * passed as the second parameter    * @param inFile The zip file as input    * @param unzipDir The unzip directory where to unzip the zip file.    * @throws IOException    */
DECL|method|unZip (File inFile, File unzipDir)
specifier|public
specifier|static
name|void
name|unZip
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|unzipDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|entries
decl_stmt|;
name|ZipFile
name|zipFile
init|=
operator|new
name|ZipFile
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
try|try
block|{
name|entries
operator|=
name|zipFile
operator|.
name|entries
argument_list|()
expr_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|unzipDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Given a Tar File as input it will untar the file in a the untar directory    * passed as the second parameter    *    * This utility will untar ".tar" files and ".tar.gz","tgz" files.    *    * @param inFile The tar file as input.    * @param untarDir The untar directory where to untar the tar file.    * @throws IOException    */
DECL|method|unTar (File inFile, File untarDir)
specifier|public
specifier|static
name|void
name|unTar
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|untarDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|untarDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|untarDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|untarDir
argument_list|)
throw|;
block|}
block|}
name|boolean
name|gzipped
init|=
name|inFile
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// Tar is not native to Windows. Use simple Java based implementation for
comment|// tests and simple tar archives
name|unTarUsingJava
argument_list|(
name|inFile
argument_list|,
name|untarDir
argument_list|,
name|gzipped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// spawn tar utility to untar archive for full fledged unix behavior such
comment|// as resolving symlinks in tar archives
name|unTarUsingTar
argument_list|(
name|inFile
argument_list|,
name|untarDir
argument_list|,
name|gzipped
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unTarUsingTar (File inFile, File untarDir, boolean gzipped)
specifier|private
specifier|static
name|void
name|unTarUsingTar
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|untarDir
parameter_list|,
name|boolean
name|gzipped
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|untarCommand
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|gzipped
condition|)
block|{
name|untarCommand
operator|.
name|append
argument_list|(
literal|" gzip -dc '"
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"' | ("
argument_list|)
expr_stmt|;
block|}
name|untarCommand
operator|.
name|append
argument_list|(
literal|"cd '"
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|untarDir
argument_list|)
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"' ; "
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"tar -xf "
argument_list|)
expr_stmt|;
if|if
condition|(
name|gzipped
condition|)
block|{
name|untarCommand
operator|.
name|append
argument_list|(
literal|" -)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|shellCmd
init|=
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|untarCommand
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|shellCmd
argument_list|)
decl_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|int
name|exitcode
init|=
name|shexec
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitcode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error untarring file "
operator|+
name|inFile
operator|+
literal|". Tar process exited with exit code "
operator|+
name|exitcode
argument_list|)
throw|;
block|}
block|}
DECL|method|unTarUsingJava (File inFile, File untarDir, boolean gzipped)
specifier|private
specifier|static
name|void
name|unTarUsingJava
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|untarDir
parameter_list|,
name|boolean
name|gzipped
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|TarArchiveInputStream
name|tis
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|gzipped
condition|)
block|{
name|inputStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|inFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputStream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tis
operator|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
for|for
control|(
name|TarArchiveEntry
name|entry
init|=
name|tis
operator|.
name|getNextTarEntry
argument_list|()
init|;
name|entry
operator|!=
literal|null
condition|;
control|)
block|{
name|unpackEntries
argument_list|(
name|tis
argument_list|,
name|entry
argument_list|,
name|untarDir
argument_list|)
expr_stmt|;
name|entry
operator|=
name|tis
operator|.
name|getNextTarEntry
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|tis
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unpackEntries (TarArchiveInputStream tis, TarArchiveEntry entry, File outputDir)
specifier|private
specifier|static
name|void
name|unpackEntries
parameter_list|(
name|TarArchiveInputStream
name|tis
parameter_list|,
name|TarArchiveEntry
name|entry
parameter_list|,
name|File
name|outputDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|subDir
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subDir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|subDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create tar internal dir "
operator|+
name|outputDir
argument_list|)
throw|;
block|}
for|for
control|(
name|TarArchiveEntry
name|e
range|:
name|entry
operator|.
name|getDirectoryEntries
argument_list|()
control|)
block|{
name|unpackEntries
argument_list|(
name|tis
argument_list|,
name|e
argument_list|,
name|subDir
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create tar internal dir "
operator|+
name|outputDir
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|isLink
argument_list|()
condition|)
block|{
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|entry
operator|.
name|getLinkName
argument_list|()
argument_list|)
decl_stmt|;
name|HardLink
operator|.
name|createHardLink
argument_list|(
name|src
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|count
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
name|BufferedOutputStream
name|outputStream
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|tis
operator|.
name|read
argument_list|(
name|data
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Class for creating hardlinks.    * Supports Unix, WindXP.    * @deprecated Use {@link org.apache.hadoop.fs.HardLink}    */
annotation|@
name|Deprecated
DECL|class|HardLink
specifier|public
specifier|static
class|class
name|HardLink
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HardLink
block|{
comment|// This is a stub to assist with coordinated change between
comment|// COMMON and HDFS projects.  It will be removed after the
comment|// corresponding change is committed to HDFS.
block|}
comment|/**    * Create a soft link between a src and destination    * only on a local disk. HDFS does not support this.    * On Windows, when symlink creation fails due to security    * setting, we will log a warning. The return code in this    * case is 2.    *    * @param target the target for symlink    * @param linkname the symlink    * @return 0 on success    */
DECL|method|symLink (String target, String linkname)
specifier|public
specifier|static
name|int
name|symLink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|linkname
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Run the input paths through Java's File so that they are converted to the
comment|// native OS form
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
operator|new
name|Path
argument_list|(
name|target
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|linkFile
init|=
operator|new
name|File
argument_list|(
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
operator|new
name|Path
argument_list|(
name|linkname
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// If not on Java7+, copy a file instead of creating a symlink since
comment|// Java6 has close to no support for symlinks on Windows. Specifically
comment|// File#length and File#renameTo do not work as expected.
comment|// (see HADOOP-9061 for additional details)
comment|// We still create symlinks for directories, since the scenario in this
comment|// case is different. The directory content could change in which
comment|// case the symlink loses its purpose (for example task attempt log folder
comment|// is symlinked under userlogs and userlogs are generated afterwards).
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|&&
operator|!
name|Shell
operator|.
name|isJava7OrAbove
argument_list|()
operator|&&
name|targetFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"FileUtil#symlink: On Windows+Java6, copying file instead "
operator|+
literal|"of creating a symlink. Copying "
operator|+
name|target
operator|+
literal|" -> "
operator|+
name|linkname
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|linkFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Parent directory "
operator|+
name|linkFile
operator|.
name|getParent
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|targetFile
argument_list|,
name|linkFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"FileUtil#symlink failed to copy the file with error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exit with non-zero exit code
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
name|String
index|[]
name|cmd
init|=
name|Shell
operator|.
name|getSymlinkCommand
argument_list|(
name|targetFile
operator|.
name|toString
argument_list|()
argument_list|,
name|linkFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ShellCommandExecutor
name|shExec
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|&&
name|linkFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|new
name|Path
argument_list|(
name|target
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// Relative links on Windows must be resolvable at the time of
comment|// creation. To ensure this we run the shell command in the directory
comment|// of the link.
comment|//
name|shExec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|cmd
argument_list|,
name|linkFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shExec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|ec
parameter_list|)
block|{
name|int
name|returnVal
init|=
name|ec
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
operator|&&
name|returnVal
operator|==
name|SYMLINK_NO_PRIVILEGE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to create symbolic links on Windows. "
operator|+
literal|"The default security settings in Windows disallow non-elevated "
operator|+
literal|"administrators and all non-administrators from creating symbolic links. "
operator|+
literal|"This behavior can be changed in the Local Security Policy management console"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnVal
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Command '"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|cmd
argument_list|)
operator|+
literal|"' failed "
operator|+
name|returnVal
operator|+
literal|" with: "
operator|+
name|ec
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|returnVal
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while create symlink "
operator|+
name|linkname
operator|+
literal|" to "
operator|+
name|target
operator|+
literal|"."
operator|+
literal|" Exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
name|shExec
operator|.
name|getExitCode
argument_list|()
return|;
block|}
comment|/**    * Change the permissions on a filename.    * @param filename the name of the file to change    * @param perm the permission string    * @return the exit code from the command    * @throws IOException    * @throws InterruptedException    */
DECL|method|chmod (String filename, String perm )
specifier|public
specifier|static
name|int
name|chmod
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perm
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|chmod
argument_list|(
name|filename
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Change the permissions on a file / directory, recursively, if    * needed.    * @param filename name of the file whose permissions are to change    * @param perm permission string    * @param recursive true, if permissions should be changed recursively    * @return the exit code from the command.    * @throws IOException    */
DECL|method|chmod (String filename, String perm, boolean recursive)
specifier|public
specifier|static
name|int
name|chmod
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perm
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|cmd
init|=
name|Shell
operator|.
name|getSetPermissionCommand
argument_list|(
name|perm
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|cmd
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
literal|0
argument_list|,
name|cmd
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
index|[
name|cmd
operator|.
name|length
index|]
operator|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|ShellCommandExecutor
name|shExec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while changing permission : "
operator|+
name|filename
operator|+
literal|" Exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shExec
operator|.
name|getExitCode
argument_list|()
return|;
block|}
comment|/**    * Set the ownership on a file / directory. User name and group name    * cannot both be null.    * @param file the file to change    * @param username the new user owner name    * @param groupname the new group owner name    * @throws IOException    */
DECL|method|setOwner (File file, String username, String groupname)
specifier|public
specifier|static
name|void
name|setOwner
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|groupname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"username == null&& groupname == null"
argument_list|)
throw|;
block|}
name|String
name|arg
init|=
operator|(
name|username
operator|==
literal|null
condition|?
literal|""
else|:
name|username
operator|)
operator|+
operator|(
name|groupname
operator|==
literal|null
condition|?
literal|""
else|:
literal|":"
operator|+
name|groupname
operator|)
decl_stmt|;
name|String
index|[]
name|cmd
init|=
name|Shell
operator|.
name|getSetOwnerCommand
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|execCommand
argument_list|(
name|file
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Platform independent implementation for {@link File#setReadable(boolean)}    * File#setReadable does not work as expected on Windows.    * @param f input file    * @param readable    * @return true on success, false otherwise    */
DECL|method|setReadable (File f, boolean readable)
specifier|public
specifier|static
name|boolean
name|setReadable
parameter_list|(
name|File
name|f
parameter_list|,
name|boolean
name|readable
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
name|String
name|permission
init|=
name|readable
condition|?
literal|"u+r"
else|:
literal|"u-r"
decl_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|setReadable
argument_list|(
name|readable
argument_list|)
return|;
block|}
block|}
comment|/**    * Platform independent implementation for {@link File#setWritable(boolean)}    * File#setWritable does not work as expected on Windows.    * @param f input file    * @param writable    * @return true on success, false otherwise    */
DECL|method|setWritable (File f, boolean writable)
specifier|public
specifier|static
name|boolean
name|setWritable
parameter_list|(
name|File
name|f
parameter_list|,
name|boolean
name|writable
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
name|String
name|permission
init|=
name|writable
condition|?
literal|"u+w"
else|:
literal|"u-w"
decl_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|setWritable
argument_list|(
name|writable
argument_list|)
return|;
block|}
block|}
comment|/**    * Platform independent implementation for {@link File#setExecutable(boolean)}    * File#setExecutable does not work as expected on Windows.    * Note: revoking execute permission on folders does not have the same    * behavior on Windows as on Unix platforms. Creating, deleting or renaming    * a file within that folder will still succeed on Windows.    * @param f input file    * @param executable    * @return true on success, false otherwise    */
DECL|method|setExecutable (File f, boolean executable)
specifier|public
specifier|static
name|boolean
name|setExecutable
parameter_list|(
name|File
name|f
parameter_list|,
name|boolean
name|executable
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
name|String
name|permission
init|=
name|executable
condition|?
literal|"u+x"
else|:
literal|"u-x"
decl_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|setExecutable
argument_list|(
name|executable
argument_list|)
return|;
block|}
block|}
comment|/**    * Platform independent implementation for {@link File#canRead()}    * @param f input file    * @return On Unix, same as {@link File#canRead()}    *         On Windows, true if process has read access on the path    */
DECL|method|canRead (File f)
specifier|public
specifier|static
name|boolean
name|canRead
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
return|return
name|NativeIO
operator|.
name|Windows
operator|.
name|access
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|NativeIO
operator|.
name|Windows
operator|.
name|AccessRight
operator|.
name|ACCESS_READ
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|canRead
argument_list|()
return|;
block|}
block|}
comment|/**    * Platform independent implementation for {@link File#canWrite()}    * @param f input file    * @return On Unix, same as {@link File#canWrite()}    *         On Windows, true if process has write access on the path    */
DECL|method|canWrite (File f)
specifier|public
specifier|static
name|boolean
name|canWrite
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
return|return
name|NativeIO
operator|.
name|Windows
operator|.
name|access
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|NativeIO
operator|.
name|Windows
operator|.
name|AccessRight
operator|.
name|ACCESS_WRITE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|canWrite
argument_list|()
return|;
block|}
block|}
comment|/**    * Platform independent implementation for {@link File#canExecute()}    * @param f input file    * @return On Unix, same as {@link File#canExecute()}    *         On Windows, true if process has execute access on the path    */
DECL|method|canExecute (File f)
specifier|public
specifier|static
name|boolean
name|canExecute
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
return|return
name|NativeIO
operator|.
name|Windows
operator|.
name|access
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|NativeIO
operator|.
name|Windows
operator|.
name|AccessRight
operator|.
name|ACCESS_EXECUTE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|f
operator|.
name|canExecute
argument_list|()
return|;
block|}
block|}
comment|/**    * Set permissions to the required value. Uses the java primitives instead    * of forking if group == other.    * @param f the file to change    * @param permission the new permissions    * @throws IOException    */
DECL|method|setPermission (File f, FsPermission permission )
specifier|public
specifier|static
name|void
name|setPermission
parameter_list|(
name|File
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|FsAction
name|user
init|=
name|permission
operator|.
name|getUserAction
argument_list|()
decl_stmt|;
name|FsAction
name|group
init|=
name|permission
operator|.
name|getGroupAction
argument_list|()
decl_stmt|;
name|FsAction
name|other
init|=
name|permission
operator|.
name|getOtherAction
argument_list|()
decl_stmt|;
comment|// use the native/fork if the group/other permissions are different
comment|// or if the native is available or on Windows
if|if
condition|(
name|group
operator|!=
name|other
operator|||
name|NativeIO
operator|.
name|isAvailable
argument_list|()
operator|||
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|execSetPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|rv
init|=
literal|true
decl_stmt|;
comment|// read perms
name|rv
operator|=
name|f
operator|.
name|setReadable
argument_list|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
operator|!=
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|rv
operator|=
name|f
operator|.
name|setReadable
argument_list|(
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
comment|// write perms
name|rv
operator|=
name|f
operator|.
name|setWritable
argument_list|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|!=
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|rv
operator|=
name|f
operator|.
name|setWritable
argument_list|(
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
comment|// exec perms
name|rv
operator|=
name|f
operator|.
name|setExecutable
argument_list|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
operator|!=
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
condition|)
block|{
name|rv
operator|=
name|f
operator|.
name|setExecutable
argument_list|(
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkReturnValue
argument_list|(
name|rv
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkReturnValue (boolean rv, File p, FsPermission permission )
specifier|private
specifier|static
name|void
name|checkReturnValue
parameter_list|(
name|boolean
name|rv
parameter_list|,
name|File
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rv
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to set permissions of path: "
operator|+
name|p
operator|+
literal|" to "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%04o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|execSetPermission (File f, FsPermission permission )
specifier|private
specifier|static
name|void
name|execSetPermission
parameter_list|(
name|File
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|chmod
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execCommand
argument_list|(
name|f
argument_list|,
name|Shell
operator|.
name|getSetPermissionCommand
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%04o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|execCommand (File f, String... cmd)
specifier|static
name|String
name|execCommand
parameter_list|(
name|File
name|f
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|cmd
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
literal|0
argument_list|,
name|cmd
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
index|[
name|cmd
operator|.
name|length
index|]
operator|=
name|f
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|args
argument_list|)
decl_stmt|;
return|return
name|output
return|;
block|}
comment|/**    * Create a tmp file for a base file.    * @param basefile the base file of the tmp    * @param prefix file name prefix of tmp    * @param isDeleteOnExit if true, the tmp will be deleted when the VM exits    * @return a newly created tmp file    * @exception IOException If a tmp file cannot created    * @see java.io.File#createTempFile(String, String, File)    * @see java.io.File#deleteOnExit()    */
DECL|method|createLocalTempFile (final File basefile, final String prefix, final boolean isDeleteOnExit)
specifier|public
specifier|static
specifier|final
name|File
name|createLocalTempFile
parameter_list|(
specifier|final
name|File
name|basefile
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|boolean
name|isDeleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
operator|+
name|basefile
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|basefile
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDeleteOnExit
condition|)
block|{
name|tmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
comment|/**    * Move the src file to the name specified by target.    * @param src the source file    * @param target the target file    * @exception IOException If this operation fails    */
DECL|method|replaceFile (File src, File target)
specifier|public
specifier|static
name|void
name|replaceFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* renameTo() has two limitations on Windows platform.      * src.renameTo(target) fails if      * 1) If target already exists OR      * 2) If target is already open for reading/writing.      */
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|int
name|retries
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target
operator|.
name|delete
argument_list|()
operator|&&
name|retries
operator|--
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"replaceFile interrupted."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * A wrapper for {@link File#listFiles()}. This java.io API returns null    * when a dir is not a directory or for any I/O error. Instead of having    * null check everywhere File#listFiles() is used, we will add utility API    * to get around this problem. For the majority of cases where we prefer    * an IOException to be thrown.    * @param dir directory for which listing should be performed    * @return list of files or empty list    * @exception IOException for invalid directory or for a bad disk.    */
DECL|method|listFiles (File dir)
specifier|public
specifier|static
name|File
index|[]
name|listFiles
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid directory or I/O error occurred for dir: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|files
return|;
block|}
comment|/**    * A wrapper for {@link File#list()}. This java.io API returns null    * when a dir is not a directory or for any I/O error. Instead of having    * null check everywhere File#list() is used, we will add utility API    * to get around this problem. For the majority of cases where we prefer    * an IOException to be thrown.    * @param dir directory for which listing should be performed    * @return list of file names or empty string list    * @exception IOException for invalid directory or for a bad disk.    */
DECL|method|list (File dir)
specifier|public
specifier|static
name|String
index|[]
name|list
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|fileNames
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid directory or I/O error occurred for dir: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|fileNames
return|;
block|}
DECL|method|createJarWithClassPath (String inputClassPath, Path pwd, Map<String, String> callerEnv)
specifier|public
specifier|static
name|String
index|[]
name|createJarWithClassPath
parameter_list|(
name|String
name|inputClassPath
parameter_list|,
name|Path
name|pwd
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|callerEnv
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createJarWithClassPath
argument_list|(
name|inputClassPath
argument_list|,
name|pwd
argument_list|,
name|pwd
argument_list|,
name|callerEnv
argument_list|)
return|;
block|}
comment|/**    * Create a jar file at the given path, containing a manifest with a classpath    * that references all specified entries.    *    * Some platforms may have an upper limit on command line length.  For example,    * the maximum command line length on Windows is 8191 characters, but the    * length of the classpath may exceed this.  To work around this limitation,    * use this method to create a small intermediate jar with a manifest that    * contains the full classpath.  It returns the absolute path to the new jar,    * which the caller may set as the classpath for a new process.    *    * Environment variable evaluation is not supported within a jar manifest, so    * this method expands environment variables before inserting classpath entries    * to the manifest.  The method parses environment variables according to    * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,    * environment variables are case-insensitive.  For example, %VAR% and %var%    * evaluate to the same value.    *    * Specifying the classpath in a jar manifest does not support wildcards, so    * this method expands wildcards internally.  Any classpath entry that ends    * with * is translated to all files at that path with extension .jar or .JAR.    *    * @param inputClassPath String input classpath to bundle into the jar manifest    * @param pwd Path to working directory to save jar    * @param targetDir path to where the jar execution will have its working dir    * @param callerEnv Map<String, String> caller's environment variables to use    *   for expansion    * @return String[] with absolute path to new jar in position 0 and    *   unexpanded wild card entry path in position 1    * @throws IOException if there is an I/O error while writing the jar file    */
DECL|method|createJarWithClassPath (String inputClassPath, Path pwd, Path targetDir, Map<String, String> callerEnv)
specifier|public
specifier|static
name|String
index|[]
name|createJarWithClassPath
parameter_list|(
name|String
name|inputClassPath
parameter_list|,
name|Path
name|pwd
parameter_list|,
name|Path
name|targetDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|callerEnv
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Replace environment variables, case-insensitive on Windows
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
operator|new
name|CaseInsensitiveMap
argument_list|(
name|callerEnv
argument_list|)
else|:
name|callerEnv
decl_stmt|;
name|String
index|[]
name|classPathEntries
init|=
name|inputClassPath
operator|.
name|split
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classPathEntries
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|classPathEntries
index|[
name|i
index|]
operator|=
name|StringUtils
operator|.
name|replaceTokens
argument_list|(
name|classPathEntries
index|[
name|i
index|]
argument_list|,
name|StringUtils
operator|.
name|ENV_VAR_PATTERN
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
name|File
name|workingDir
init|=
operator|new
name|File
argument_list|(
name|pwd
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workingDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|// If mkdirs returns false because the working directory already exists,
comment|// then this is acceptable.  If it returns false due to some other I/O
comment|// error, then this method will fail later with an IOException while saving
comment|// the jar.
name|LOG
operator|.
name|debug
argument_list|(
literal|"mkdirs false for "
operator|+
name|workingDir
operator|+
literal|", execution will continue"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|unexpandedWildcardClasspath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Append all entries
name|List
argument_list|<
name|String
argument_list|>
name|classPathEntryList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|classPathEntries
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|classPathEntry
range|:
name|classPathEntries
control|)
block|{
if|if
condition|(
name|classPathEntry
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|classPathEntry
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|boolean
name|foundWildCardJar
init|=
literal|false
decl_stmt|;
comment|// Append all jars that match the wildcard
name|Path
name|globPath
init|=
operator|new
name|Path
argument_list|(
name|classPathEntry
argument_list|)
operator|.
name|suffix
argument_list|(
literal|"{.jar,.JAR}"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|wildcardJars
init|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
name|globPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildcardJars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|wildcardJar
range|:
name|wildcardJars
control|)
block|{
name|foundWildCardJar
operator|=
literal|true
expr_stmt|;
name|classPathEntryList
operator|.
name|add
argument_list|(
name|wildcardJar
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundWildCardJar
condition|)
block|{
name|unexpandedWildcardClasspath
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
name|unexpandedWildcardClasspath
operator|.
name|append
argument_list|(
name|classPathEntry
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Append just this entry
name|File
name|fileCpEntry
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|new
name|Path
argument_list|(
name|classPathEntry
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|fileCpEntry
operator|=
operator|new
name|File
argument_list|(
name|targetDir
operator|.
name|toString
argument_list|()
argument_list|,
name|classPathEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileCpEntry
operator|=
operator|new
name|File
argument_list|(
name|classPathEntry
argument_list|)
expr_stmt|;
block|}
name|String
name|classPathEntryUrl
init|=
name|fileCpEntry
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
comment|// File.toURI only appends trailing '/' if it can determine that it is a
comment|// directory that already exists.  (See JavaDocs.)  If this entry had a
comment|// trailing '/' specified by the caller, then guarantee that the
comment|// classpath entry in the manifest has a trailing '/', and thus refers to
comment|// a directory instead of a file.  This can happen if the caller is
comment|// creating a classpath jar referencing a directory that hasn't been
comment|// created yet, but will definitely be created before running.
if|if
condition|(
name|classPathEntry
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|&&
operator|!
name|classPathEntryUrl
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|classPathEntryUrl
operator|=
name|classPathEntryUrl
operator|+
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
name|classPathEntryList
operator|.
name|add
argument_list|(
name|classPathEntryUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|jarClassPath
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|classPathEntryList
argument_list|)
decl_stmt|;
comment|// Create the manifest
name|Manifest
name|jarManifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|jarManifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|putValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|MANIFEST_VERSION
operator|.
name|toString
argument_list|()
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|jarManifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|putValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|CLASS_PATH
operator|.
name|toString
argument_list|()
argument_list|,
name|jarClassPath
argument_list|)
expr_stmt|;
comment|// Write the manifest to output JAR file
name|File
name|classPathJar
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"classpath-"
argument_list|,
literal|".jar"
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
literal|null
decl_stmt|;
name|JarOutputStream
name|jos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|classPathJar
argument_list|)
expr_stmt|;
name|bos
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|jos
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|bos
argument_list|,
name|jarManifest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|jos
argument_list|,
name|bos
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|jarCp
init|=
block|{
name|classPathJar
operator|.
name|getCanonicalPath
argument_list|()
block|,
name|unexpandedWildcardClasspath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
return|return
name|jarCp
return|;
block|}
block|}
end_class

end_unit

