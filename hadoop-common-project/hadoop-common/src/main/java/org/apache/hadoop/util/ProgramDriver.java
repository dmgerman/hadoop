begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/** A driver that is used to run programs added to it  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ProgramDriver
specifier|public
class|class
name|ProgramDriver
block|{
comment|/**    * A description of a program based on its class and a     * human-readable description.    * @date april 2006    */
DECL|field|programs
name|Map
argument_list|<
name|String
argument_list|,
name|ProgramDescription
argument_list|>
name|programs
decl_stmt|;
DECL|method|ProgramDriver ()
specifier|public
name|ProgramDriver
parameter_list|()
block|{
name|programs
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ProgramDescription
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|class|ProgramDescription
specifier|static
specifier|private
class|class
name|ProgramDescription
block|{
DECL|field|paramTypes
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
index|[]
operator|.
name|class
block|}
empty_stmt|;
comment|/**      * Create a description of an example program.      * @param mainClass the class with the main for the example program      * @param description a string to display to the user in help messages      * @throws SecurityException if we can't use reflection      * @throws NoSuchMethodException if the class doesn't have a main method      */
DECL|method|ProgramDescription (Class<?> mainClass, String description)
specifier|public
name|ProgramDescription
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mainClass
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
block|{
name|this
operator|.
name|main
operator|=
name|mainClass
operator|.
name|getMethod
argument_list|(
literal|"main"
argument_list|,
name|paramTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**      * Invoke the example application with the given arguments      * @param args the arguments for the application      * @throws Throwable The exception thrown by the invoked method      */
DECL|method|invoke (String[] args)
specifier|public
name|void
name|invoke
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|main
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|args
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|except
parameter_list|)
block|{
throw|throw
name|except
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|field|main
specifier|private
name|Method
name|main
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
block|}
DECL|method|printUsage (Map<String, ProgramDescription> programs)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ProgramDescription
argument_list|>
name|programs
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Valid program names are:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ProgramDescription
argument_list|>
name|item
range|:
name|programs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|item
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is the method that adds the classed to the repository    * @param name The name of the string you want the class instance to be called with    * @param mainClass The class that you want to add to the repository    * @param description The description of the class    * @throws NoSuchMethodException     * @throws SecurityException     */
DECL|method|addClass (String name, Class<?> mainClass, String description)
specifier|public
name|void
name|addClass
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|mainClass
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|Throwable
block|{
name|programs
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ProgramDescription
argument_list|(
name|mainClass
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a driver for the example programs.    * It looks at the first command line argument and tries to find an    * example program with that name.    * If it is found, it calls the main method in that class with the rest     * of the command line arguments.    * @param args The argument from the user. args[0] is the command to run.    * @return -1 on error, 0 on success    * @throws NoSuchMethodException     * @throws SecurityException     * @throws IllegalAccessException     * @throws IllegalArgumentException     * @throws Throwable Anything thrown by the example program's main    */
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Make sure they gave us a program name.
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"An example program must be given as the"
operator|+
literal|" first argument."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|programs
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// And that it is good.
name|ProgramDescription
name|pgm
init|=
name|programs
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pgm
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown program '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"' chosen."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|programs
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Remove the leading argument and call main
name|String
index|[]
name|new_args
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|new_args
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
name|pgm
operator|.
name|invoke
argument_list|(
name|new_args
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * API compatible with Hadoop 1.x    */
DECL|method|driver (String[] argv)
specifier|public
name|void
name|driver
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|run
argument_list|(
name|argv
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

