begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ByteBufferUtil
specifier|public
specifier|final
class|class
name|ByteBufferUtil
block|{
comment|/**    * Determine if a stream can do a byte buffer read via read(ByteBuffer buf)    */
DECL|method|streamHasByteBufferRead (InputStream stream)
specifier|private
specifier|static
name|boolean
name|streamHasByteBufferRead
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|stream
operator|instanceof
name|ByteBufferReadable
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|stream
operator|instanceof
name|FSDataInputStream
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
operator|(
name|FSDataInputStream
operator|)
name|stream
operator|)
operator|.
name|getWrappedStream
argument_list|()
operator|instanceof
name|ByteBufferReadable
return|;
block|}
comment|/**    * Perform a fallback read.    */
DECL|method|fallbackRead ( InputStream stream, ByteBufferPool bufferPool, int maxLength)
specifier|public
specifier|static
name|ByteBuffer
name|fallbackRead
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferPool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"zero-copy reads "
operator|+
literal|"were not available, and you did not provide a fallback "
operator|+
literal|"ByteBufferPool."
argument_list|)
throw|;
block|}
name|boolean
name|useDirect
init|=
name|streamHasByteBufferRead
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|bufferPool
operator|.
name|getBuffer
argument_list|(
name|useDirect
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"zero-copy reads "
operator|+
literal|"were not available, and the ByteBufferPool did not provide "
operator|+
literal|"us with "
operator|+
operator|(
name|useDirect
condition|?
literal|"a direct"
else|:
literal|"an indirect"
operator|)
operator|+
literal|"buffer."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffer
operator|.
name|capacity
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|buffer
operator|.
name|isDirect
argument_list|()
operator|==
name|useDirect
argument_list|)
expr_stmt|;
name|maxLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxLength
argument_list|,
name|buffer
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|useDirect
condition|)
block|{
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|ByteBufferReadable
name|readable
init|=
operator|(
name|ByteBufferReadable
operator|)
name|stream
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|totalRead
operator|>=
name|maxLength
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|int
name|nRead
init|=
name|readable
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|nRead
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|totalRead
operator|>
literal|0
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
name|totalRead
operator|+=
name|nRead
expr_stmt|;
block|}
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|nRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|nRead
operator|>=
literal|0
condition|)
block|{
name|buffer
operator|.
name|limit
argument_list|(
name|nRead
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// If we got an error while reading, or if we are at EOF, we
comment|// don't need the buffer any more.  We can give it back to the
comment|// bufferPool.
name|bufferPool
operator|.
name|putBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

