begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_comment
comment|/**  * Abstracts queue operations for different blocking queues.  */
end_comment

begin_class
DECL|class|CallQueueManager
specifier|public
class|class
name|CallQueueManager
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CallQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Number of checkpoints for empty queue.
DECL|field|CHECKPOINT_NUM
specifier|private
specifier|static
specifier|final
name|int
name|CHECKPOINT_NUM
init|=
literal|20
decl_stmt|;
comment|// Interval to check empty queue.
DECL|field|CHECKPOINT_INTERVAL_MS
specifier|private
specifier|static
specifier|final
name|long
name|CHECKPOINT_INTERVAL_MS
init|=
literal|10
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertQueueClass ( Class<?> queueClass, Class<E> elementClass)
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|convertQueueClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|queueClass
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|elementClass
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
operator|)
name|queueClass
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|convertSchedulerClass ( Class<?> schedulerClass)
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|RpcScheduler
argument_list|>
name|convertSchedulerClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|schedulerClass
parameter_list|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RpcScheduler
argument_list|>
operator|)
name|schedulerClass
return|;
block|}
DECL|field|clientBackOffEnabled
specifier|private
specifier|volatile
name|boolean
name|clientBackOffEnabled
decl_stmt|;
comment|// Atomic refs point to active callQueue
comment|// We have two so we can better control swapping
DECL|field|putRef
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|putRef
decl_stmt|;
DECL|field|takeRef
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|takeRef
decl_stmt|;
DECL|field|scheduler
specifier|private
name|RpcScheduler
name|scheduler
decl_stmt|;
DECL|method|CallQueueManager (Class<? extends BlockingQueue<E>> backingClass, Class<? extends RpcScheduler> schedulerClass, boolean clientBackOffEnabled, int maxQueueSize, String namespace, Configuration conf)
specifier|public
name|CallQueueManager
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|backingClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RpcScheduler
argument_list|>
name|schedulerClass
parameter_list|,
name|boolean
name|clientBackOffEnabled
parameter_list|,
name|int
name|maxQueueSize
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|priorityLevels
init|=
name|parseNumLevels
argument_list|(
name|namespace
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|createScheduler
argument_list|(
name|schedulerClass
argument_list|,
name|priorityLevels
argument_list|,
name|namespace
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|bq
init|=
name|createCallQueueInstance
argument_list|(
name|backingClass
argument_list|,
name|priorityLevels
argument_list|,
name|maxQueueSize
argument_list|,
name|namespace
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|clientBackOffEnabled
operator|=
name|clientBackOffEnabled
expr_stmt|;
name|this
operator|.
name|putRef
operator|=
operator|new
name|AtomicReference
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|(
name|bq
argument_list|)
expr_stmt|;
name|this
operator|.
name|takeRef
operator|=
operator|new
name|AtomicReference
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|(
name|bq
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using callQueue: "
operator|+
name|backingClass
operator|+
literal|" queueCapacity: "
operator|+
name|maxQueueSize
operator|+
literal|" scheduler: "
operator|+
name|schedulerClass
argument_list|)
expr_stmt|;
block|}
DECL|method|createScheduler ( Class<T> theClass, int priorityLevels, String ns, Configuration conf)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|RpcScheduler
parameter_list|>
name|T
name|createScheduler
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|theClass
parameter_list|,
name|int
name|priorityLevels
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Used for custom, configurable scheduler
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|priorityLevels
argument_list|,
name|ns
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|priorityLevels
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Last attempt
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Nothing worked
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|)
throw|;
block|}
DECL|method|createCallQueueInstance ( Class<T> theClass, int priorityLevels, int maxLen, String ns, Configuration conf)
specifier|private
parameter_list|<
name|T
extends|extends
name|BlockingQueue
argument_list|<
name|E
argument_list|>
parameter_list|>
name|T
name|createCallQueueInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|theClass
parameter_list|,
name|int
name|priorityLevels
parameter_list|,
name|int
name|maxLen
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Used for custom, configurable callqueues
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|priorityLevels
argument_list|,
name|maxLen
argument_list|,
name|ns
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Used for LinkedBlockingQueue, ArrayBlockingQueue, etc
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|maxLen
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Last attempt
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|ctor
init|=
name|theClass
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Nothing worked
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|theClass
operator|.
name|getName
argument_list|()
operator|+
literal|" could not be constructed."
argument_list|)
throw|;
block|}
DECL|method|isClientBackoffEnabled ()
name|boolean
name|isClientBackoffEnabled
parameter_list|()
block|{
return|return
name|clientBackOffEnabled
return|;
block|}
comment|// Based on policy to determine back off current call
DECL|method|shouldBackOff (Schedulable e)
name|boolean
name|shouldBackOff
parameter_list|(
name|Schedulable
name|e
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|shouldBackOff
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|addResponseTime (String name, int priorityLevel, int queueTime, int processingTime)
name|void
name|addResponseTime
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|priorityLevel
parameter_list|,
name|int
name|queueTime
parameter_list|,
name|int
name|processingTime
parameter_list|)
block|{
name|scheduler
operator|.
name|addResponseTime
argument_list|(
name|name
argument_list|,
name|priorityLevel
argument_list|,
name|queueTime
argument_list|,
name|processingTime
argument_list|)
expr_stmt|;
block|}
comment|// This should be only called once per call and cached in the call object
comment|// each getPriorityLevel call will increment the counter for the caller
DECL|method|getPriorityLevel (Schedulable e)
name|int
name|getPriorityLevel
parameter_list|(
name|Schedulable
name|e
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|getPriorityLevel
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|method|setClientBackoffEnabled (boolean value)
name|void
name|setClientBackoffEnabled
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|clientBackOffEnabled
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Insert e into the backing queue or block until we can.    * If we block and the queue changes on us, we will insert while the    * queue is drained.    */
DECL|method|put (E e)
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|putRef
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert e into the backing queue.    * Return true if e is queued.    * Return false if the queue is full.    */
DECL|method|offer (E e)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|putRef
operator|.
name|get
argument_list|()
operator|.
name|offer
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**    * Retrieve an E from the backing queue or block until we can.    * Guaranteed to return an element from the current queue.    */
DECL|method|take ()
specifier|public
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|E
name|e
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|takeRef
operator|.
name|get
argument_list|()
operator|.
name|poll
argument_list|(
literal|1000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|takeRef
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Read the number of levels from the configuration.    * This will affect the FairCallQueue's overall capacity.    * @throws IllegalArgumentException on invalid queue count    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|parseNumLevels (String ns, Configuration conf)
specifier|private
specifier|static
name|int
name|parseNumLevels
parameter_list|(
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Fair call queue levels (IPC_CALLQUEUE_PRIORITY_LEVELS_KEY)
comment|// takes priority over the scheduler level key
comment|// (IPC_SCHEDULER_PRIORITY_LEVELS_KEY)
name|int
name|retval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ns
operator|+
literal|"."
operator|+
name|FairCallQueue
operator|.
name|IPC_CALLQUEUE_PRIORITY_LEVELS_KEY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|0
condition|)
block|{
comment|// No FCQ priority level configured
name|retval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|ns
operator|+
literal|"."
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_SCHEDULER_PRIORITY_LEVELS_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SCHEDULER_PRIORITY_LEVELS_DEFAULT_KEY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ns
operator|+
literal|"."
operator|+
name|FairCallQueue
operator|.
name|IPC_CALLQUEUE_PRIORITY_LEVELS_KEY
operator|+
literal|" is deprecated. Please use "
operator|+
name|ns
operator|+
literal|"."
operator|+
name|CommonConfigurationKeys
operator|.
name|IPC_SCHEDULER_PRIORITY_LEVELS_KEY
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retval
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"numLevels must be at least 1"
argument_list|)
throw|;
block|}
return|return
name|retval
return|;
block|}
comment|/**    * Replaces active queue with the newly requested one and transfers    * all calls to the newQ before returning.    */
DECL|method|swapQueue ( Class<? extends RpcScheduler> schedulerClass, Class<? extends BlockingQueue<E>> queueClassToUse, int maxSize, String ns, Configuration conf)
specifier|public
specifier|synchronized
name|void
name|swapQueue
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|RpcScheduler
argument_list|>
name|schedulerClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|queueClassToUse
parameter_list|,
name|int
name|maxSize
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|priorityLevels
init|=
name|parseNumLevels
argument_list|(
name|ns
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RpcScheduler
name|newScheduler
init|=
name|createScheduler
argument_list|(
name|schedulerClass
argument_list|,
name|priorityLevels
argument_list|,
name|ns
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|newQ
init|=
name|createCallQueueInstance
argument_list|(
name|queueClassToUse
argument_list|,
name|priorityLevels
argument_list|,
name|maxSize
argument_list|,
name|ns
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Our current queue becomes the old queue
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|oldQ
init|=
name|putRef
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Swap putRef first: allow blocked puts() to be unblocked
name|putRef
operator|.
name|set
argument_list|(
name|newQ
argument_list|)
expr_stmt|;
comment|// Wait for handlers to drain the oldQ
while|while
condition|(
operator|!
name|queueIsReallyEmpty
argument_list|(
name|oldQ
argument_list|)
condition|)
block|{}
comment|// Swap takeRef to handle new calls
name|takeRef
operator|.
name|set
argument_list|(
name|newQ
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|newScheduler
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Old Queue: "
operator|+
name|stringRepr
argument_list|(
name|oldQ
argument_list|)
operator|+
literal|", "
operator|+
literal|"Replacement: "
operator|+
name|stringRepr
argument_list|(
name|newQ
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if queue is empty by checking at CHECKPOINT_NUM points with    * CHECKPOINT_INTERVAL_MS interval.    * This doesn't mean the queue might not fill up at some point later, but    * it should decrease the probability that we lose a call this way.    */
DECL|method|queueIsReallyEmpty (BlockingQueue<?> q)
specifier|private
name|boolean
name|queueIsReallyEmpty
parameter_list|(
name|BlockingQueue
argument_list|<
name|?
argument_list|>
name|q
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CHECKPOINT_NUM
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|CHECKPOINT_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|stringRepr (Object o)
specifier|private
name|String
name|stringRepr
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'@'
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|o
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

