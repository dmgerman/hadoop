begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.sink.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|sink
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MetricsCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MetricsCache
operator|.
name|Record
import|;
end_import

begin_comment
comment|/**  * This code supports Ganglia 3.0  *   */
end_comment

begin_class
DECL|class|GangliaSink30
specifier|public
class|class
name|GangliaSink30
extends|extends
name|AbstractGangliaSink
block|{
DECL|field|LOG
specifier|public
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TAGS_FOR_PREFIX_PROPERTY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TAGS_FOR_PREFIX_PROPERTY_PREFIX
init|=
literal|"tagsForPrefix."
decl_stmt|;
DECL|field|metricsCache
specifier|private
name|MetricsCache
name|metricsCache
init|=
operator|new
name|MetricsCache
argument_list|()
decl_stmt|;
comment|// a key with a NULL value means ALL
DECL|field|useTagsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|useTagsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setListDelimiter
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|conf
operator|.
name|getKeys
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|propertyName
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
name|TAGS_FOR_PREFIX_PROPERTY_PREFIX
argument_list|)
condition|)
block|{
name|String
name|contextName
init|=
name|propertyName
operator|.
name|substring
argument_list|(
name|TAGS_FOR_PREFIX_PROPERTY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|tags
init|=
name|conf
operator|.
name|getStringArray
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|boolean
name|useAllTags
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tags
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
name|tag
operator|=
name|tag
operator|.
name|trim
argument_list|()
expr_stmt|;
name|useAllTags
operator||=
name|tag
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tag
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useAllTags
condition|)
block|{
name|set
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|useTagsMap
operator|.
name|put
argument_list|(
name|contextName
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|appendPrefix (MetricsRecord record, StringBuilder sb)
specifier|public
name|void
name|appendPrefix
parameter_list|(
name|MetricsRecord
name|record
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
name|String
name|contextName
init|=
name|record
operator|.
name|context
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
name|tags
init|=
name|record
operator|.
name|tags
argument_list|()
decl_stmt|;
if|if
condition|(
name|useTagsMap
operator|.
name|containsKey
argument_list|(
name|contextName
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|useTags
init|=
name|useTagsMap
operator|.
name|get
argument_list|(
name|contextName
argument_list|)
decl_stmt|;
for|for
control|(
name|MetricsTag
name|t
range|:
name|tags
control|)
block|{
if|if
condition|(
name|useTags
operator|==
literal|null
operator|||
name|useTags
operator|.
name|contains
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
comment|// the context is always skipped here because it is always added
comment|// the hostname is always skipped to avoid case-mismatches
comment|// from different DNSes.
if|if
condition|(
name|t
operator|.
name|info
argument_list|()
operator|!=
name|MsInfo
operator|.
name|Context
operator|&&
name|t
operator|.
name|info
argument_list|()
operator|!=
name|MsInfo
operator|.
name|Hostname
operator|&&
name|t
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
comment|// The method handles both cases whether Ganglia support dense publish
comment|// of metrics of sparse (only on change) publish of metrics
try|try
block|{
name|String
name|recordName
init|=
name|record
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|contextName
init|=
name|record
operator|.
name|context
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|contextName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|recordName
argument_list|)
expr_stmt|;
name|appendPrefix
argument_list|(
name|record
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|String
name|groupName
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|int
name|sbBaseLen
init|=
name|sb
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|GangliaSlope
name|slopeFromMetric
init|=
literal|null
decl_stmt|;
name|GangliaSlope
name|calculatedSlope
init|=
literal|null
decl_stmt|;
name|Record
name|cachedMetrics
init|=
literal|null
decl_stmt|;
name|resetBuffer
argument_list|()
expr_stmt|;
comment|// reset the buffer to the beginning
if|if
condition|(
operator|!
name|isSupportSparseMetrics
argument_list|()
condition|)
block|{
comment|// for sending dense metrics, update metrics cache
comment|// and get the updated data
name|cachedMetrics
operator|=
name|metricsCache
operator|.
name|update
argument_list|(
name|record
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedMetrics
operator|!=
literal|null
operator|&&
name|cachedMetrics
operator|.
name|metricsEntrySet
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AbstractMetric
argument_list|>
name|entry
range|:
name|cachedMetrics
operator|.
name|metricsEntrySet
argument_list|()
control|)
block|{
name|AbstractMetric
name|metric
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|metric
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// visit the metric to identify the Ganglia type and
comment|// slope
name|metric
operator|.
name|visit
argument_list|(
name|gangliaMetricVisitor
argument_list|)
expr_stmt|;
name|type
operator|=
name|gangliaMetricVisitor
operator|.
name|getType
argument_list|()
expr_stmt|;
name|slopeFromMetric
operator|=
name|gangliaMetricVisitor
operator|.
name|getSlope
argument_list|()
expr_stmt|;
name|GangliaConf
name|gConf
init|=
name|getGangliaConfForMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|calculatedSlope
operator|=
name|calculateSlope
argument_list|(
name|gConf
argument_list|,
name|slopeFromMetric
argument_list|)
expr_stmt|;
comment|// send metric to Ganglia
name|emitMetric
argument_list|(
name|groupName
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|metric
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|gConf
argument_list|,
name|calculatedSlope
argument_list|)
expr_stmt|;
comment|// reset the length of the buffer for next iteration
name|sb
operator|.
name|setLength
argument_list|(
name|sbBaseLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// we support sparse updates
name|Collection
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
init|=
operator|(
name|Collection
argument_list|<
name|AbstractMetric
argument_list|>
operator|)
name|record
operator|.
name|metrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we got metrics. so send the latest
for|for
control|(
name|AbstractMetric
name|metric
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|metric
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// visit the metric to identify the Ganglia type and
comment|// slope
name|metric
operator|.
name|visit
argument_list|(
name|gangliaMetricVisitor
argument_list|)
expr_stmt|;
name|type
operator|=
name|gangliaMetricVisitor
operator|.
name|getType
argument_list|()
expr_stmt|;
name|slopeFromMetric
operator|=
name|gangliaMetricVisitor
operator|.
name|getSlope
argument_list|()
expr_stmt|;
name|GangliaConf
name|gConf
init|=
name|getGangliaConfForMetric
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|calculatedSlope
operator|=
name|calculateSlope
argument_list|(
name|gConf
argument_list|,
name|slopeFromMetric
argument_list|)
expr_stmt|;
comment|// send metric to Ganglia
name|emitMetric
argument_list|(
name|groupName
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|metric
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|gConf
argument_list|,
name|calculatedSlope
argument_list|)
expr_stmt|;
comment|// reset the length of the buffer for next iteration
name|sb
operator|.
name|setLength
argument_list|(
name|sbBaseLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Failed to putMetrics"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
comment|// Calculate the slope from properties and metric
DECL|method|calculateSlope (GangliaConf gConf, GangliaSlope slopeFromMetric)
specifier|private
name|GangliaSlope
name|calculateSlope
parameter_list|(
name|GangliaConf
name|gConf
parameter_list|,
name|GangliaSlope
name|slopeFromMetric
parameter_list|)
block|{
if|if
condition|(
name|gConf
operator|.
name|getSlope
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if slope has been specified in properties, use that
return|return
name|gConf
operator|.
name|getSlope
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|slopeFromMetric
operator|!=
literal|null
condition|)
block|{
comment|// slope not specified in properties, use derived from Metric
return|return
name|slopeFromMetric
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_SLOPE
return|;
block|}
block|}
comment|/**    * The method sends metrics to Ganglia servers. The method has been taken from    * org.apache.hadoop.metrics.ganglia.GangliaContext30 with minimal changes in    * order to keep it in sync.    * @param groupName The group name of the metric    * @param name The metric name    * @param type The type of the metric    * @param value The value of the metric    * @param gConf The GangliaConf for this metric    * @param gSlope The slope for this metric    * @throws IOException    */
DECL|method|emitMetric (String groupName, String name, String type, String value, GangliaConf gConf, GangliaSlope gSlope)
specifier|protected
name|void
name|emitMetric
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|,
name|GangliaConf
name|gConf
parameter_list|,
name|GangliaSlope
name|gSlope
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric was emitted with no name."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric name "
operator|+
name|name
operator|+
literal|" was emitted with a null value."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric name "
operator|+
name|name
operator|+
literal|", value "
operator|+
name|value
operator|+
literal|" has no type."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Emitting metric "
operator|+
name|name
operator|+
literal|", type "
operator|+
name|type
operator|+
literal|", value "
operator|+
name|value
operator|+
literal|", slope "
operator|+
name|gSlope
operator|.
name|name
argument_list|()
operator|+
literal|" from hostname "
operator|+
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xdr_int
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// metric_user_defined
name|xdr_string
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|xdr_string
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|xdr_string
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|xdr_string
argument_list|(
name|gConf
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|xdr_int
argument_list|(
name|gSlope
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|xdr_int
argument_list|(
name|gConf
operator|.
name|getTmax
argument_list|()
argument_list|)
expr_stmt|;
name|xdr_int
argument_list|(
name|gConf
operator|.
name|getDmax
argument_list|()
argument_list|)
expr_stmt|;
comment|// send the metric to Ganglia hosts
name|emitToGangliaHosts
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

