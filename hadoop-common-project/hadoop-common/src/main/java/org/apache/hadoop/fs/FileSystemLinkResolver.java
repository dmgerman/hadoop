begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * FileSystem-specific class used to operate on and resolve symlinks in a path.  * Operation can potentially span multiple {@link FileSystem}s.  *   * @see FSLinkResolver  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FileSystemLinkResolver
specifier|public
specifier|abstract
class|class
name|FileSystemLinkResolver
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * FileSystem subclass-specific implementation of superclass method.    * Overridden on instantiation to perform the actual method call, which throws    * an UnresolvedLinkException if called on an unresolved {@link Path}.    * @param p Path on which to perform an operation    * @return Generic type returned by operation    * @throws IOException    * @throws UnresolvedLinkException    */
DECL|method|doCall (final Path p)
specifier|abstract
specifier|public
name|T
name|doCall
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
function_decl|;
comment|/**    * Calls the abstract FileSystem call equivalent to the specialized subclass    * implementation in {@link #doCall(Path)}. This is used when retrying the    * call with a newly resolved Path and corresponding new FileSystem.    *     * @param fs    *          FileSystem with which to retry call    * @param p    *          Resolved Target of path    * @return Generic type determined by implementation    * @throws IOException    */
DECL|method|next (final FileSystem fs, final Path p)
specifier|abstract
specifier|public
name|T
name|next
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Attempt calling overridden {@link #doCall(Path)} method with    * specified {@link FileSystem} and {@link Path}. If the call fails with an    * UnresolvedLinkException, it will try to resolve the path and retry the call    * by calling {@link #next(FileSystem, Path)}.    * @param filesys FileSystem with which to try call    * @param path Path with which to try call    * @return Generic type determined by implementation    * @throws IOException    */
DECL|method|resolve (final FileSystem filesys, final Path path)
specifier|public
name|T
name|resolve
parameter_list|(
specifier|final
name|FileSystem
name|filesys
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|T
name|in
init|=
literal|null
decl_stmt|;
name|Path
name|p
init|=
name|path
decl_stmt|;
comment|// Assumes path belongs to this FileSystem.
comment|// Callers validate this by passing paths through FileSystem#checkPath
name|FileSystem
name|fs
init|=
name|filesys
decl_stmt|;
for|for
control|(
name|boolean
name|isLink
init|=
literal|true
init|;
name|isLink
condition|;
control|)
block|{
try|try
block|{
name|in
operator|=
name|doCall
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|isLink
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filesys
operator|.
name|resolveSymlinks
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" contains a symlink"
operator|+
literal|" and symlink resolution is disabled ("
operator|+
name|CommonConfigurationKeys
operator|.
name|FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY
operator|+
literal|")."
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|++
operator|>
name|FsConstants
operator|.
name|MAX_PATH_LINKS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Possible cyclic loop while "
operator|+
literal|"following symbolic link "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// Resolve the first unresolved path component
name|p
operator|=
name|FSLinkResolver
operator|.
name|qualifySymlinkTarget
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|p
argument_list|,
name|filesys
operator|.
name|resolveLink
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getFSofPath
argument_list|(
name|p
argument_list|,
name|filesys
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Have to call next if it's a new FS
if|if
condition|(
operator|!
name|fs
operator|.
name|equals
argument_list|(
name|filesys
argument_list|)
condition|)
block|{
return|return
name|next
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|// Else, we keep resolving with this filesystem
block|}
block|}
comment|// Successful call, path was fully resolved
return|return
name|in
return|;
block|}
block|}
end_class

end_unit

