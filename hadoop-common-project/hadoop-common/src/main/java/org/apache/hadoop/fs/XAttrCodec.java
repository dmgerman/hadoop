begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|DecoderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The value of<code>XAttr</code> is byte[], this class is to   * covert byte[] to some kind of string representation or convert back.  * String representation is convenient for display and input. For example  * display in screen as shell response and json response, input as http  * or shell parameter.   */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|enum|XAttrCodec
specifier|public
enum|enum
name|XAttrCodec
block|{
comment|/**    * Value encoded as text     * string is enclosed in double quotes (\").    */
DECL|enumConstant|TEXT
name|TEXT
block|,
comment|/**    * Value encoded as hexadecimal string     * is prefixed with 0x.    */
DECL|enumConstant|HEX
name|HEX
block|,
comment|/**    * Value encoded as base64 string     * is prefixed with 0s.    */
DECL|enumConstant|BASE64
name|BASE64
block|;
DECL|field|HEX_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|HEX_PREFIX
init|=
literal|"0x"
decl_stmt|;
DECL|field|BASE64_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BASE64_PREFIX
init|=
literal|"0s"
decl_stmt|;
DECL|field|base64
specifier|private
specifier|static
specifier|final
name|Base64
name|base64
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Decode string representation of a value and check whether it's     * encoded. If the given string begins with 0x or 0X, it expresses    * a hexadecimal number. If the given string begins with 0s or 0S,    * base64 encoding is expected. If the given string is enclosed in     * double quotes, the inner string is treated as text. Otherwise     * the given string is treated as text.     * @param value string representation of the value.    * @return byte[] the value    * @throws IOException    */
DECL|method|decodeValue (String value)
specifier|public
specifier|static
name|byte
index|[]
name|decodeValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|String
name|en
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|value
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|en
operator|.
name|equalsIgnoreCase
argument_list|(
name|HEX_PREFIX
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
name|Hex
operator|.
name|decodeHex
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DecoderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|en
operator|.
name|equalsIgnoreCase
argument_list|(
name|BASE64_PREFIX
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|base64
operator|.
name|decode
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|value
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Encode byte[] value to string representation with encoding.     * Values encoded as text strings are enclosed in double quotes (\"),     * while strings encoded as hexadecimal and base64 are prefixed with     * 0x and 0s, respectively.    * @param value byte[] value    * @param encoding    * @return String string representation of value    * @throws IOException    */
DECL|method|encodeValue (byte[] value, XAttrCodec encoding)
specifier|public
specifier|static
name|String
name|encodeValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|,
literal|"Value can not be null."
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|==
name|HEX
condition|)
block|{
return|return
name|HEX_PREFIX
operator|+
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|encoding
operator|==
name|BASE64
condition|)
block|{
return|return
name|BASE64_PREFIX
operator|+
name|base64
operator|.
name|encodeToString
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"\""
operator|+
operator|new
name|String
argument_list|(
name|value
argument_list|,
literal|"utf-8"
argument_list|)
operator|+
literal|"\""
return|;
block|}
block|}
block|}
end_enum

end_unit

