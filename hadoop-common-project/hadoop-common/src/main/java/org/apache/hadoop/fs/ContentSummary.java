begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/** Store the summary of a content (a directory or a file). */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ContentSummary
specifier|public
class|class
name|ContentSummary
implements|implements
name|Writable
block|{
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|fileCount
specifier|private
name|long
name|fileCount
decl_stmt|;
DECL|field|directoryCount
specifier|private
name|long
name|directoryCount
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
DECL|field|spaceConsumed
specifier|private
name|long
name|spaceConsumed
decl_stmt|;
DECL|field|spaceQuota
specifier|private
name|long
name|spaceQuota
decl_stmt|;
DECL|field|typeConsumed
specifier|private
name|long
name|typeConsumed
index|[]
decl_stmt|;
DECL|field|typeQuota
specifier|private
name|long
name|typeQuota
index|[]
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|quota
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
operator|-
literal|1
expr_stmt|;
name|typeConsumed
operator|=
operator|new
name|long
index|[
name|StorageType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|typeQuota
operator|=
operator|new
name|long
index|[
name|StorageType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeQuota
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|typeQuota
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|method|length (long length)
specifier|public
name|Builder
name|length
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|fileCount (long fileCount)
specifier|public
name|Builder
name|fileCount
parameter_list|(
name|long
name|fileCount
parameter_list|)
block|{
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|directoryCount (long directoryCount)
specifier|public
name|Builder
name|directoryCount
parameter_list|(
name|long
name|directoryCount
parameter_list|)
block|{
name|this
operator|.
name|directoryCount
operator|=
name|directoryCount
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|quota (long quota)
specifier|public
name|Builder
name|quota
parameter_list|(
name|long
name|quota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|spaceConsumed (long spaceConsumed)
specifier|public
name|Builder
name|spaceConsumed
parameter_list|(
name|long
name|spaceConsumed
parameter_list|)
block|{
name|this
operator|.
name|spaceConsumed
operator|=
name|spaceConsumed
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|spaceQuota (long spaceQuota)
specifier|public
name|Builder
name|spaceQuota
parameter_list|(
name|long
name|spaceQuota
parameter_list|)
block|{
name|this
operator|.
name|spaceQuota
operator|=
name|spaceQuota
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeConsumed (long typeConsumed[])
specifier|public
name|Builder
name|typeConsumed
parameter_list|(
name|long
name|typeConsumed
index|[]
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeConsumed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|typeConsumed
index|[
name|i
index|]
operator|=
name|typeConsumed
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|typeQuota (StorageType type, long quota)
specifier|public
name|Builder
name|typeQuota
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|quota
parameter_list|)
block|{
name|this
operator|.
name|typeQuota
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|quota
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeConsumed (StorageType type, long consumed)
specifier|public
name|Builder
name|typeConsumed
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|consumed
parameter_list|)
block|{
name|this
operator|.
name|typeConsumed
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|consumed
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeQuota (long typeQuota[])
specifier|public
name|Builder
name|typeQuota
parameter_list|(
name|long
name|typeQuota
index|[]
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeQuota
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|typeQuota
index|[
name|i
index|]
operator|=
name|typeQuota
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ContentSummary
name|build
parameter_list|()
block|{
return|return
operator|new
name|ContentSummary
argument_list|(
name|length
argument_list|,
name|fileCount
argument_list|,
name|directoryCount
argument_list|,
name|quota
argument_list|,
name|spaceConsumed
argument_list|,
name|spaceQuota
argument_list|,
name|typeConsumed
argument_list|,
name|typeQuota
argument_list|)
return|;
block|}
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|fileCount
specifier|private
name|long
name|fileCount
decl_stmt|;
DECL|field|directoryCount
specifier|private
name|long
name|directoryCount
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
DECL|field|spaceConsumed
specifier|private
name|long
name|spaceConsumed
decl_stmt|;
DECL|field|spaceQuota
specifier|private
name|long
name|spaceQuota
decl_stmt|;
DECL|field|typeConsumed
specifier|private
name|long
name|typeConsumed
index|[]
decl_stmt|;
DECL|field|typeQuota
specifier|private
name|long
name|typeQuota
index|[]
decl_stmt|;
block|}
comment|/** Constructor deprecated by ContentSummary.Builder*/
annotation|@
name|Deprecated
DECL|method|ContentSummary ()
specifier|public
name|ContentSummary
parameter_list|()
block|{}
comment|/** Constructor, deprecated by ContentSummary.Builder    *  This constructor implicitly set spaceConsumed the same as length.    *  spaceConsumed and length must be set explicitly with    *  ContentSummary.Builder    * */
annotation|@
name|Deprecated
DECL|method|ContentSummary (long length, long fileCount, long directoryCount)
specifier|public
name|ContentSummary
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|fileCount
parameter_list|,
name|long
name|directoryCount
parameter_list|)
block|{
name|this
argument_list|(
name|length
argument_list|,
name|fileCount
argument_list|,
name|directoryCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|length
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor, deprecated by ContentSummary.Builder */
annotation|@
name|Deprecated
DECL|method|ContentSummary ( long length, long fileCount, long directoryCount, long quota, long spaceConsumed, long spaceQuota)
specifier|public
name|ContentSummary
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|fileCount
parameter_list|,
name|long
name|directoryCount
parameter_list|,
name|long
name|quota
parameter_list|,
name|long
name|spaceConsumed
parameter_list|,
name|long
name|spaceQuota
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
name|this
operator|.
name|directoryCount
operator|=
name|directoryCount
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
name|this
operator|.
name|spaceConsumed
operator|=
name|spaceConsumed
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
name|spaceQuota
expr_stmt|;
block|}
comment|/** Constructor for ContentSummary.Builder*/
DECL|method|ContentSummary ( long length, long fileCount, long directoryCount, long quota, long spaceConsumed, long spaceQuota, long typeConsumed[], long typeQuota[])
specifier|private
name|ContentSummary
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|fileCount
parameter_list|,
name|long
name|directoryCount
parameter_list|,
name|long
name|quota
parameter_list|,
name|long
name|spaceConsumed
parameter_list|,
name|long
name|spaceQuota
parameter_list|,
name|long
name|typeConsumed
index|[]
parameter_list|,
name|long
name|typeQuota
index|[]
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
name|this
operator|.
name|directoryCount
operator|=
name|directoryCount
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
name|this
operator|.
name|spaceConsumed
operator|=
name|spaceConsumed
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
name|spaceQuota
expr_stmt|;
name|this
operator|.
name|typeConsumed
operator|=
name|typeConsumed
expr_stmt|;
name|this
operator|.
name|typeQuota
operator|=
name|typeQuota
expr_stmt|;
block|}
comment|/** @return the length */
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/** @return the directory count */
DECL|method|getDirectoryCount ()
specifier|public
name|long
name|getDirectoryCount
parameter_list|()
block|{
return|return
name|directoryCount
return|;
block|}
comment|/** @return the file count */
DECL|method|getFileCount ()
specifier|public
name|long
name|getFileCount
parameter_list|()
block|{
return|return
name|fileCount
return|;
block|}
comment|/** Return the directory quota */
DECL|method|getQuota ()
specifier|public
name|long
name|getQuota
parameter_list|()
block|{
return|return
name|quota
return|;
block|}
comment|/** Returns storage space consumed */
DECL|method|getSpaceConsumed ()
specifier|public
name|long
name|getSpaceConsumed
parameter_list|()
block|{
return|return
name|spaceConsumed
return|;
block|}
comment|/** Returns storage space quota */
DECL|method|getSpaceQuota ()
specifier|public
name|long
name|getSpaceQuota
parameter_list|()
block|{
return|return
name|spaceQuota
return|;
block|}
comment|/** Returns storage type quota */
DECL|method|getTypeQuota (StorageType type)
specifier|public
name|long
name|getTypeQuota
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
operator|(
name|typeQuota
operator|!=
literal|null
operator|)
condition|?
name|typeQuota
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
else|:
operator|-
literal|1
return|;
block|}
comment|/** Returns storage type consumed*/
DECL|method|getTypeConsumed (StorageType type)
specifier|public
name|long
name|getTypeConsumed
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
operator|(
name|typeConsumed
operator|!=
literal|null
operator|)
condition|?
name|typeConsumed
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
else|:
literal|0
return|;
block|}
comment|/** Returns true if any storage type quota has been set*/
DECL|method|isTypeQuotaSet ()
specifier|public
name|boolean
name|isTypeQuotaSet
parameter_list|()
block|{
if|if
condition|(
name|typeQuota
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
name|typeQuota
index|[
name|t
operator|.
name|ordinal
argument_list|()
index|]
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Returns true if any storage type consumption information is available*/
DECL|method|isTypeConsumedAvailable ()
specifier|public
name|boolean
name|isTypeConsumedAvailable
parameter_list|()
block|{
if|if
condition|(
name|typeConsumed
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
name|typeConsumed
index|[
name|t
operator|.
name|ordinal
argument_list|()
index|]
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|directoryCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|spaceConsumed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|length
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|directoryCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|spaceConsumed
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/**    * Output format:    *<----12----><----12----><-------18------->    *    DIR_COUNT   FILE_COUNT       CONTENT_SIZE    */
DECL|field|SUMMARY_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|SUMMARY_FORMAT
init|=
literal|"%12s %12s %18s "
decl_stmt|;
comment|/**    * Output format:    *<----12----><------15-----><------15-----><------15----->    *        QUOTA       REM_QUOTA     SPACE_QUOTA REM_SPACE_QUOTA    *<----12----><----12----><-------18------->    *    DIR_COUNT   FILE_COUNT       CONTENT_SIZE    */
DECL|field|QUOTA_SUMMARY_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_SUMMARY_FORMAT
init|=
literal|"%12s %15s "
decl_stmt|;
DECL|field|SPACE_QUOTA_SUMMARY_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_QUOTA_SUMMARY_FORMAT
init|=
literal|"%15s %15s "
decl_stmt|;
DECL|field|STORAGE_TYPE_SUMMARY_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|STORAGE_TYPE_SUMMARY_FORMAT
init|=
literal|"%13s %17s "
decl_stmt|;
DECL|field|HEADER_FIELDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HEADER_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"DIR_COUNT"
block|,
literal|"FILE_COUNT"
block|,
literal|"CONTENT_SIZE"
block|}
decl_stmt|;
DECL|field|QUOTA_HEADER_FIELDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|QUOTA_HEADER_FIELDS
init|=
operator|new
name|String
index|[]
block|{
literal|"QUOTA"
block|,
literal|"REM_QUOTA"
block|,
literal|"SPACE_QUOTA"
block|,
literal|"REM_SPACE_QUOTA"
block|}
decl_stmt|;
comment|/** The header string */
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|SUMMARY_FORMAT
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|HEADER_FIELDS
argument_list|)
decl_stmt|;
DECL|field|QUOTA_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|QUOTA_SUMMARY_FORMAT
operator|+
name|SPACE_QUOTA_SUMMARY_FORMAT
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|QUOTA_HEADER_FIELDS
argument_list|)
operator|+
name|HEADER
decl_stmt|;
comment|/** default quota display string */
DECL|field|QUOTA_NONE
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_NONE
init|=
literal|"none"
decl_stmt|;
DECL|field|QUOTA_INF
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_INF
init|=
literal|"inf"
decl_stmt|;
comment|/** Return the header of the output.    * if qOption is false, output directory count, file count, and content size;    * if qOption is true, output quota and remaining quota as well.    *     * @param qOption a flag indicating if quota needs to be printed or not    * @return the header of the output    */
DECL|method|getHeader (boolean qOption)
specifier|public
specifier|static
name|String
name|getHeader
parameter_list|(
name|boolean
name|qOption
parameter_list|)
block|{
return|return
name|qOption
condition|?
name|QUOTA_HEADER
else|:
name|HEADER
return|;
block|}
comment|/**    * return the header of with the StorageTypes    *    * @param storageTypes    * @return storage header string    */
DECL|method|getStorageTypeHeader (List<StorageType> storageTypes)
specifier|public
specifier|static
name|String
name|getStorageTypeHeader
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|storageTypes
parameter_list|)
block|{
name|StringBuffer
name|header
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|st
range|:
name|storageTypes
control|)
block|{
comment|/* the field length is 13/17 for quota and remain quota        * as the max length for quota name is ARCHIVE_QUOTA         * and remain quota name REM_ARCHIVE_QUOTA */
name|String
name|storageName
init|=
name|st
operator|.
name|toString
argument_list|()
decl_stmt|;
name|header
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STORAGE_TYPE_SUMMARY_FORMAT
argument_list|,
name|storageName
operator|+
literal|"_QUOTA"
argument_list|,
literal|"REM_"
operator|+
name|storageName
operator|+
literal|"_QUOTA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|header
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the names of the fields from the summary header.    *     * @return names of fields as displayed in the header    */
DECL|method|getHeaderFields ()
specifier|public
specifier|static
name|String
index|[]
name|getHeaderFields
parameter_list|()
block|{
return|return
name|HEADER_FIELDS
return|;
block|}
comment|/**    * Returns the names of the fields used in the quota summary.    *     * @return names of quota fields as displayed in the header    */
DECL|method|getQuotaHeaderFields ()
specifier|public
specifier|static
name|String
index|[]
name|getQuotaHeaderFields
parameter_list|()
block|{
return|return
name|QUOTA_HEADER_FIELDS
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/** Return the string representation of the object in the output format.    * if qOption is false, output directory count, file count, and content size;    * if qOption is true, output quota and remaining quota as well.    *    * @param qOption a flag indicating if quota needs to be printed or not    * @return the string representation of the object   */
DECL|method|toString (boolean qOption)
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|qOption
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|qOption
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Return the string representation of the object in the output format.    * if qOption is false, output directory count, file count, and content size;    * if qOption is true, output quota and remaining quota as well.    * if hOption is false file sizes are returned in bytes    * if hOption is true file sizes are returned in human readable     *     * @param qOption a flag indicating if quota needs to be printed or not    * @param hOption a flag indicating if human readable output if to be used    * @return the string representation of the object    */
DECL|method|toString (boolean qOption, boolean hOption)
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|qOption
parameter_list|,
name|boolean
name|hOption
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|qOption
argument_list|,
name|hOption
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Return the string representation of the object in the output format.    * if tOption is true, display the quota by storage types,    * Otherwise, same logic with #toString(boolean,boolean)    *    * @param qOption a flag indicating if quota needs to be printed or not    * @param hOption a flag indicating if human readable output if to be used    * @param tOption a flag indicating if display quota by storage types    * @param types Storage types to display    * @return the string representation of the object    */
DECL|method|toString (boolean qOption, boolean hOption, boolean tOption, List<StorageType> types)
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|qOption
parameter_list|,
name|boolean
name|hOption
parameter_list|,
name|boolean
name|tOption
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|tOption
condition|)
block|{
name|StringBuffer
name|content
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|st
range|:
name|types
control|)
block|{
name|long
name|typeQuota
init|=
name|getTypeQuota
argument_list|(
name|st
argument_list|)
decl_stmt|;
name|long
name|typeConsumed
init|=
name|getTypeConsumed
argument_list|(
name|st
argument_list|)
decl_stmt|;
name|String
name|quotaStr
init|=
name|QUOTA_NONE
decl_stmt|;
name|String
name|quotaRem
init|=
name|QUOTA_INF
decl_stmt|;
if|if
condition|(
name|typeQuota
operator|>
literal|0
condition|)
block|{
name|quotaStr
operator|=
name|formatSize
argument_list|(
name|typeQuota
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
name|quotaRem
operator|=
name|formatSize
argument_list|(
name|typeQuota
operator|-
name|typeConsumed
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
block|}
name|content
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|STORAGE_TYPE_SUMMARY_FORMAT
argument_list|,
name|quotaStr
argument_list|,
name|quotaRem
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|content
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|qOption
condition|)
block|{
name|String
name|quotaStr
init|=
name|QUOTA_NONE
decl_stmt|;
name|String
name|quotaRem
init|=
name|QUOTA_INF
decl_stmt|;
name|String
name|spaceQuotaStr
init|=
name|QUOTA_NONE
decl_stmt|;
name|String
name|spaceQuotaRem
init|=
name|QUOTA_INF
decl_stmt|;
if|if
condition|(
name|quota
operator|>
literal|0
condition|)
block|{
name|quotaStr
operator|=
name|formatSize
argument_list|(
name|quota
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
name|quotaRem
operator|=
name|formatSize
argument_list|(
name|quota
operator|-
operator|(
name|directoryCount
operator|+
name|fileCount
operator|)
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spaceQuota
operator|>
literal|0
condition|)
block|{
name|spaceQuotaStr
operator|=
name|formatSize
argument_list|(
name|spaceQuota
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
name|spaceQuotaRem
operator|=
name|formatSize
argument_list|(
name|spaceQuota
operator|-
name|spaceConsumed
argument_list|,
name|hOption
argument_list|)
expr_stmt|;
block|}
name|prefix
operator|=
name|String
operator|.
name|format
argument_list|(
name|QUOTA_SUMMARY_FORMAT
operator|+
name|SPACE_QUOTA_SUMMARY_FORMAT
argument_list|,
name|quotaStr
argument_list|,
name|quotaRem
argument_list|,
name|spaceQuotaStr
argument_list|,
name|spaceQuotaRem
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
operator|+
name|String
operator|.
name|format
argument_list|(
name|SUMMARY_FORMAT
argument_list|,
name|formatSize
argument_list|(
name|directoryCount
argument_list|,
name|hOption
argument_list|)
argument_list|,
name|formatSize
argument_list|(
name|fileCount
argument_list|,
name|hOption
argument_list|)
argument_list|,
name|formatSize
argument_list|(
name|length
argument_list|,
name|hOption
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Formats a size to be human readable or in bytes    * @param size value to be formatted    * @param humanReadable flag indicating human readable or not    * @return String representation of the size   */
DECL|method|formatSize (long size, boolean humanReadable)
specifier|private
name|String
name|formatSize
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|humanReadable
parameter_list|)
block|{
return|return
name|humanReadable
condition|?
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|size
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
end_class

end_unit

