begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Parse the args of a command and check the format of args.  */
end_comment

begin_class
DECL|class|CommandFormat
specifier|public
class|class
name|CommandFormat
block|{
DECL|field|minPar
DECL|field|maxPar
specifier|final
name|int
name|minPar
decl_stmt|,
name|maxPar
decl_stmt|;
DECL|field|options
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|optionsWithValue
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optionsWithValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ignoreUnknownOpts
name|boolean
name|ignoreUnknownOpts
init|=
literal|false
decl_stmt|;
comment|/**    * @deprecated use replacement since name is an unused parameter    * @param name of command, but never used    * @param min see replacement    * @param max see replacement    * @param possibleOpt see replacement    * @see #CommandFormat(int, int, String...)    */
annotation|@
name|Deprecated
DECL|method|CommandFormat (String name, int min, int max, String ... possibleOpt)
specifier|public
name|CommandFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|String
modifier|...
name|possibleOpt
parameter_list|)
block|{
name|this
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|possibleOpt
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple parsing of command line arguments    * @param min minimum arguments required    * @param max maximum arguments permitted    * @param possibleOpt list of the allowed switches    */
DECL|method|CommandFormat (int min, int max, String ... possibleOpt)
specifier|public
name|CommandFormat
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|String
modifier|...
name|possibleOpt
parameter_list|)
block|{
name|minPar
operator|=
name|min
expr_stmt|;
name|maxPar
operator|=
name|max
expr_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|possibleOpt
control|)
block|{
if|if
condition|(
name|opt
operator|==
literal|null
condition|)
block|{
name|ignoreUnknownOpts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|put
argument_list|(
name|opt
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * add option with value    *    * @param option option name    */
DECL|method|addOptionWithValue (String option)
specifier|public
name|void
name|addOptionWithValue
parameter_list|(
name|String
name|option
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|option
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DuplicatedOptionException
argument_list|(
name|option
argument_list|)
throw|;
block|}
name|optionsWithValue
operator|.
name|put
argument_list|(
name|option
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Parse parameters starting from the given position    * Consider using the variant that directly takes a List    *     * @param args an array of input arguments    * @param pos the position at which starts to parse    * @return a list of parameters    */
DECL|method|parse (String[] args, int pos)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parse
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|parameters
return|;
block|}
comment|/** Parse parameters from the given list of args.  The list is    *  destructively modified to remove the options.    *     * @param args as a list of input arguments    */
DECL|method|parse (List<String> args)
specifier|public
name|void
name|parse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
comment|// stop if not an opt, or the stdin arg "-" is found
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
comment|// force end of option processing
name|args
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
break|break;
block|}
name|String
name|opt
init|=
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|args
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|opt
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optionsWithValue
operator|.
name|containsKey
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|args
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|args
operator|.
name|size
argument_list|()
operator|&&
operator|(
name|args
operator|.
name|size
argument_list|()
operator|>
name|minPar
operator|)
condition|)
block|{
name|arg
operator|=
name|args
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|args
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arg
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|optionsWithValue
operator|.
name|put
argument_list|(
name|opt
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ignoreUnknownOpts
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnknownOptionException
argument_list|(
name|arg
argument_list|)
throw|;
block|}
block|}
name|int
name|psize
init|=
name|args
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|psize
operator|<
name|minPar
condition|)
block|{
throw|throw
operator|new
name|NotEnoughArgumentsException
argument_list|(
name|minPar
argument_list|,
name|psize
argument_list|)
throw|;
block|}
if|if
condition|(
name|psize
operator|>
name|maxPar
condition|)
block|{
throw|throw
operator|new
name|TooManyArgumentsException
argument_list|(
name|maxPar
argument_list|,
name|psize
argument_list|)
throw|;
block|}
block|}
comment|/** Return if the option is set or not    *     * @param option String representation of an option    * @return true is the option is set; false otherwise    */
DECL|method|getOpt (String option)
specifier|public
name|boolean
name|getOpt
parameter_list|(
name|String
name|option
parameter_list|)
block|{
return|return
name|options
operator|.
name|containsKey
argument_list|(
name|option
argument_list|)
condition|?
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
else|:
literal|false
return|;
block|}
comment|/**    * get the option's value    *    * @param option option name    * @return option value    * if option exists, but no value assigned, return ""    * if option not exists, return null    */
DECL|method|getOptValue (String option)
specifier|public
name|String
name|getOptValue
parameter_list|(
name|String
name|option
parameter_list|)
block|{
return|return
name|optionsWithValue
operator|.
name|get
argument_list|(
name|option
argument_list|)
return|;
block|}
comment|/** Returns all the options that are set    *     * @return Set<String> of the enabled options    */
DECL|method|getOpts ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getOpts
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|optSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|optSet
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optSet
return|;
block|}
comment|/** Used when the arguments exceed their bounds     */
DECL|class|IllegalNumberOfArgumentsException
specifier|public
specifier|static
specifier|abstract
class|class
name|IllegalNumberOfArgumentsException
extends|extends
name|IllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|field|expected
specifier|protected
name|int
name|expected
decl_stmt|;
DECL|field|actual
specifier|protected
name|int
name|actual
decl_stmt|;
DECL|method|IllegalNumberOfArgumentsException (int want, int got)
specifier|protected
name|IllegalNumberOfArgumentsException
parameter_list|(
name|int
name|want
parameter_list|,
name|int
name|got
parameter_list|)
block|{
name|expected
operator|=
name|want
expr_stmt|;
name|actual
operator|=
name|got
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"expected "
operator|+
name|expected
operator|+
literal|" but got "
operator|+
name|actual
return|;
block|}
block|}
comment|/** Used when too many arguments are supplied to a command    */
DECL|class|TooManyArgumentsException
specifier|public
specifier|static
class|class
name|TooManyArgumentsException
extends|extends
name|IllegalNumberOfArgumentsException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|method|TooManyArgumentsException (int expected, int actual)
specifier|public
name|TooManyArgumentsException
parameter_list|(
name|int
name|expected
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
name|super
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"Too many arguments: "
operator|+
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/** Used when too few arguments are supplied to a command    */
DECL|class|NotEnoughArgumentsException
specifier|public
specifier|static
class|class
name|NotEnoughArgumentsException
extends|extends
name|IllegalNumberOfArgumentsException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|method|NotEnoughArgumentsException (int expected, int actual)
specifier|public
name|NotEnoughArgumentsException
parameter_list|(
name|int
name|expected
parameter_list|,
name|int
name|actual
parameter_list|)
block|{
name|super
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"Not enough arguments: "
operator|+
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/** Used when an unsupported option is supplied to a command    */
DECL|class|UnknownOptionException
specifier|public
specifier|static
class|class
name|UnknownOptionException
extends|extends
name|IllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|field|option
specifier|protected
name|String
name|option
init|=
literal|null
decl_stmt|;
DECL|method|UnknownOptionException (String unknownOption)
specifier|public
name|UnknownOptionException
parameter_list|(
name|String
name|unknownOption
parameter_list|)
block|{
name|super
argument_list|(
literal|"Illegal option "
operator|+
name|unknownOption
argument_list|)
expr_stmt|;
name|option
operator|=
name|unknownOption
expr_stmt|;
block|}
DECL|method|getOption ()
specifier|public
name|String
name|getOption
parameter_list|()
block|{
return|return
name|option
return|;
block|}
block|}
comment|/**    * Used when a duplicated option is supplied to a command.    */
DECL|class|DuplicatedOptionException
specifier|public
specifier|static
class|class
name|DuplicatedOptionException
extends|extends
name|IllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|method|DuplicatedOptionException (String duplicatedOption)
specifier|public
name|DuplicatedOptionException
parameter_list|(
name|String
name|duplicatedOption
parameter_list|)
block|{
name|super
argument_list|(
literal|"option "
operator|+
name|duplicatedOption
operator|+
literal|" already exsits!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

