begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/****************************************************************  * FSInputStream is a generic old InputStream with a little bit  * of RAF-style seek ability.  *  *****************************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FSInputStream
specifier|public
specifier|abstract
class|class
name|FSInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Seek to the given offset from the start of the file.    * The next read() will be from that location.  Can't    * seek past the end of the file.    */
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|abstract
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Return the current offset from the start of the file    */
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|abstract
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Seeks a different copy of the data.  Returns true if     * found a new source, false otherwise.    */
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
specifier|abstract
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|validatePositionedReadArgs
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|long
name|oldPos
init|=
name|getPos
argument_list|()
decl_stmt|;
name|int
name|nread
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|nread
operator|=
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// end of file; this can be raised by some filesystems
comment|// (often: object stores); it is swallowed here.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Downgrading EOFException raised trying to"
operator|+
literal|" read {} bytes at offset {}"
argument_list|,
name|length
argument_list|,
name|offset
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|seek
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
return|return
name|nread
return|;
block|}
block|}
comment|/**    * Validation code, available for use in subclasses.    * @param position position: if negative an EOF exception is raised    * @param buffer destination buffer    * @param offset offset within the buffer    * @param length length of bytes to read    * @throws EOFException if the position is negative    * @throws IndexOutOfBoundsException if there isn't space for the amount of    * data requested.    * @throws IllegalArgumentException other arguments are invalid.    */
DECL|method|validatePositionedReadArgs (long position, byte[] buffer, int offset, int length)
specifier|protected
name|void
name|validatePositionedReadArgs
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|EOFException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|length
operator|>=
literal|0
argument_list|,
literal|"length is negative"
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"position is negative"
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|buffer
operator|!=
literal|null
argument_list|,
literal|"Null buffer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|-
name|offset
operator|<
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|FSExceptionMessages
operator|.
name|TOO_MANY_BYTES_FOR_DEST_BUFFER
operator|+
literal|": request length="
operator|+
name|length
operator|+
literal|", with offset ="
operator|+
name|offset
operator|+
literal|"; buffer capacity ="
operator|+
operator|(
name|buffer
operator|.
name|length
operator|-
name|offset
operator|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|validatePositionedReadArgs
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|int
name|nread
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nread
operator|<
name|length
condition|)
block|{
name|int
name|nbytes
init|=
name|read
argument_list|(
name|position
operator|+
name|nread
argument_list|,
name|buffer
argument_list|,
name|offset
operator|+
name|nread
argument_list|,
name|length
operator|-
name|nread
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
name|FSExceptionMessages
operator|.
name|EOF_IN_READ_FULLY
argument_list|)
throw|;
block|}
name|nread
operator|+=
name|nbytes
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

