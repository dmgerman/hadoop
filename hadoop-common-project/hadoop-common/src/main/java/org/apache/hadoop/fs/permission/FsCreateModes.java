begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A class that stores both masked and unmasked create modes  * and is a drop-in replacement for masked permission.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FsCreateModes
specifier|public
specifier|final
class|class
name|FsCreateModes
extends|extends
name|FsPermission
block|{
DECL|field|unmasked
specifier|private
specifier|final
name|FsPermission
name|unmasked
decl_stmt|;
comment|/**    * Create from unmasked mode and umask.    *    * If the mode is already an FsCreateModes object, return it.    */
DECL|method|applyUMask (FsPermission mode, FsPermission umask)
specifier|public
specifier|static
name|FsPermission
name|applyUMask
parameter_list|(
name|FsPermission
name|mode
parameter_list|,
name|FsPermission
name|umask
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|.
name|getUnmasked
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|mode
return|;
block|}
return|return
name|create
argument_list|(
name|mode
operator|.
name|applyUMask
argument_list|(
name|umask
argument_list|)
argument_list|,
name|mode
argument_list|)
return|;
block|}
comment|/**    * Create from masked and unmasked modes.    */
DECL|method|create (FsPermission masked, FsPermission unmasked)
specifier|public
specifier|static
name|FsCreateModes
name|create
parameter_list|(
name|FsPermission
name|masked
parameter_list|,
name|FsPermission
name|unmasked
parameter_list|)
block|{
assert|assert
name|masked
operator|.
name|getUnmasked
argument_list|()
operator|==
literal|null
assert|;
assert|assert
name|unmasked
operator|.
name|getUnmasked
argument_list|()
operator|==
literal|null
assert|;
return|return
operator|new
name|FsCreateModes
argument_list|(
name|masked
argument_list|,
name|unmasked
argument_list|)
return|;
block|}
DECL|method|FsCreateModes (FsPermission masked, FsPermission unmasked)
specifier|private
name|FsCreateModes
parameter_list|(
name|FsPermission
name|masked
parameter_list|,
name|FsPermission
name|unmasked
parameter_list|)
block|{
name|super
argument_list|(
name|masked
argument_list|)
expr_stmt|;
name|this
operator|.
name|unmasked
operator|=
name|unmasked
expr_stmt|;
assert|assert
name|masked
operator|.
name|getUnmasked
argument_list|()
operator|==
literal|null
assert|;
assert|assert
name|unmasked
operator|.
name|getUnmasked
argument_list|()
operator|==
literal|null
assert|;
block|}
annotation|@
name|Override
DECL|method|getMasked ()
specifier|public
name|FsPermission
name|getMasked
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getUnmasked ()
specifier|public
name|FsPermission
name|getUnmasked
parameter_list|()
block|{
return|return
name|unmasked
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"'{' masked: {0}, unmasked: {1} '}'"
argument_list|,
name|super
operator|.
name|toString
argument_list|()
argument_list|,
name|getUnmasked
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FsCreateModes
name|that
init|=
operator|(
name|FsCreateModes
operator|)
name|o
decl_stmt|;
return|return
name|getUnmasked
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getUnmasked
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|getUnmasked
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

