begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Static methods to implement policies for {@link StreamCapabilities}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|StreamCapabilitiesPolicy
specifier|public
class|class
name|StreamCapabilitiesPolicy
block|{
DECL|field|CAN_UNBUFFER_NOT_IMPLEMENTED_MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|CAN_UNBUFFER_NOT_IMPLEMENTED_MESSAGE
init|=
literal|"claims unbuffer capabilty but does not implement CanUnbuffer"
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StreamCapabilitiesPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Implement the policy for {@link CanUnbuffer#unbuffer()}.    *    * @param in the input stream    */
DECL|method|unbuffer (InputStream in)
specifier|public
specifier|static
name|void
name|unbuffer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|in
operator|instanceof
name|StreamCapabilities
operator|&&
operator|(
operator|(
name|StreamCapabilities
operator|)
name|in
operator|)
operator|.
name|hasCapability
argument_list|(
name|StreamCapabilities
operator|.
name|UNBUFFER
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CanUnbuffer
operator|)
name|in
operator|)
operator|.
name|unbuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|in
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
literal|" does not implement StreamCapabilities"
operator|+
literal|" and the unbuffer capability"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|in
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|CAN_UNBUFFER_NOT_IMPLEMENTED_MESSAGE
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

