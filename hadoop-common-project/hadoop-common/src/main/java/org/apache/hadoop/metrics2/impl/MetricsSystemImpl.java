begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|PropertiesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|util
operator|.
name|ArithmeticUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsConfig
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A base class for metrics system singletons  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"metricssystem"
argument_list|)
DECL|class|MetricsSystemImpl
specifier|public
class|class
name|MetricsSystemImpl
extends|extends
name|MetricsSystem
implements|implements
name|MetricsSource
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetricsSystemImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MS_NAME
specifier|static
specifier|final
name|String
name|MS_NAME
init|=
literal|"MetricsSystem"
decl_stmt|;
DECL|field|MS_STATS_NAME
specifier|static
specifier|final
name|String
name|MS_STATS_NAME
init|=
name|MS_NAME
operator|+
literal|",sub=Stats"
decl_stmt|;
DECL|field|MS_STATS_DESC
specifier|static
specifier|final
name|String
name|MS_STATS_DESC
init|=
literal|"Metrics system metrics"
decl_stmt|;
DECL|field|MS_CONTROL_NAME
specifier|static
specifier|final
name|String
name|MS_CONTROL_NAME
init|=
name|MS_NAME
operator|+
literal|",sub=Control"
decl_stmt|;
DECL|field|MS_INIT_MODE_KEY
specifier|static
specifier|final
name|String
name|MS_INIT_MODE_KEY
init|=
literal|"hadoop.metrics.init.mode"
decl_stmt|;
DECL|enum|InitMode
DECL|enumConstant|NORMAL
DECL|enumConstant|STANDBY
enum|enum
name|InitMode
block|{
name|NORMAL
block|,
name|STANDBY
block|}
DECL|field|sources
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsSourceAdapter
argument_list|>
name|sources
decl_stmt|;
DECL|field|allSources
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsSource
argument_list|>
name|allSources
decl_stmt|;
DECL|field|sinks
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsSinkAdapter
argument_list|>
name|sinks
decl_stmt|;
DECL|field|allSinks
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsSink
argument_list|>
name|allSinks
decl_stmt|;
comment|// The callback list is used by register(Callback callback), while
comment|// the callback map is used by register(String name, String desc, T sink)
DECL|field|callbacks
specifier|private
specifier|final
name|List
argument_list|<
name|Callback
argument_list|>
name|callbacks
decl_stmt|;
DECL|field|namedCallbacks
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Callback
argument_list|>
name|namedCallbacks
decl_stmt|;
DECL|field|collector
specifier|private
specifier|final
name|MetricsCollectorImpl
name|collector
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
name|MS_NAME
argument_list|)
decl_stmt|;
DECL|field|snapshotStat
annotation|@
name|Metric
argument_list|(
block|{
literal|"Snapshot"
block|,
literal|"Snapshot stats"
block|}
argument_list|)
name|MutableStat
name|snapshotStat
decl_stmt|;
DECL|field|publishStat
annotation|@
name|Metric
argument_list|(
block|{
literal|"Publish"
block|,
literal|"Publishing stats"
block|}
argument_list|)
name|MutableStat
name|publishStat
decl_stmt|;
DECL|field|droppedPubAll
annotation|@
name|Metric
argument_list|(
literal|"Dropped updates by all sinks"
argument_list|)
name|MutableCounterLong
name|droppedPubAll
decl_stmt|;
DECL|field|injectedTags
specifier|private
specifier|final
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|injectedTags
decl_stmt|;
comment|// Things that are changed by init()/start()/stop()
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|field|sourceFilter
specifier|private
name|MetricsFilter
name|sourceFilter
decl_stmt|;
DECL|field|config
specifier|private
name|MetricsConfig
name|config
decl_stmt|;
DECL|field|sourceConfigs
DECL|field|sinkConfigs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsConfig
argument_list|>
name|sourceConfigs
decl_stmt|,
name|sinkConfigs
decl_stmt|;
DECL|field|monitoring
specifier|private
name|boolean
name|monitoring
init|=
literal|false
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|field|period
specifier|private
name|long
name|period
decl_stmt|;
comment|// milliseconds
DECL|field|logicalTime
specifier|private
name|long
name|logicalTime
decl_stmt|;
comment|// number of timer invocations * period
DECL|field|mbeanName
specifier|private
name|ObjectName
name|mbeanName
decl_stmt|;
DECL|field|publishSelfMetrics
specifier|private
name|boolean
name|publishSelfMetrics
init|=
literal|true
decl_stmt|;
DECL|field|sysSource
specifier|private
name|MetricsSourceAdapter
name|sysSource
decl_stmt|;
DECL|field|refCount
specifier|private
name|int
name|refCount
init|=
literal|0
decl_stmt|;
comment|// for mini cluster mode
comment|/**    * Construct the metrics system    * @param prefix  for the system    */
DECL|method|MetricsSystemImpl (String prefix)
specifier|public
name|MetricsSystemImpl
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|allSources
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|sources
operator|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
expr_stmt|;
name|allSinks
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|sinks
operator|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
expr_stmt|;
name|sourceConfigs
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|sinkConfigs
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|callbacks
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|namedCallbacks
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|injectedTags
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|collector
operator|=
operator|new
name|MetricsCollectorImpl
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
comment|// prefix could be null for default ctor, which requires init later
name|initSystemMBean
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Construct the system but not initializing (read config etc.) it.    */
DECL|method|MetricsSystemImpl ()
specifier|public
name|MetricsSystemImpl
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialized the metrics system with a prefix.    * @param prefix  the system will look for configs with the prefix    * @return the metrics system object itself    */
annotation|@
name|Override
DECL|method|init (String prefix)
specifier|public
specifier|synchronized
name|MetricsSystem
name|init
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|monitoring
operator|&&
operator|!
name|DefaultMetricsSystem
operator|.
name|inMiniClusterMode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|this
operator|.
name|prefix
operator|+
literal|" metrics system already initialized!"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|this
operator|.
name|prefix
operator|=
name|checkNotNull
argument_list|(
name|prefix
argument_list|,
literal|"prefix"
argument_list|)
expr_stmt|;
operator|++
name|refCount
expr_stmt|;
if|if
condition|(
name|monitoring
condition|)
block|{
comment|// in mini cluster mode
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|prefix
operator|+
literal|" metrics system started (again)"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
switch|switch
condition|(
name|initMode
argument_list|()
condition|)
block|{
case|case
name|NORMAL
case|:
try|try
block|{
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetricsConfigException
name|e
parameter_list|)
block|{
comment|// Configuration errors (e.g., typos) should not be fatal.
comment|// We can always start the metrics system later via JMX.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metrics system not started: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stacktrace: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STANDBY
case|:
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
literal|" metrics system started in standby mode"
argument_list|)
expr_stmt|;
block|}
name|initSystemMBean
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|prefix
argument_list|,
literal|"prefix"
argument_list|)
expr_stmt|;
if|if
condition|(
name|monitoring
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|prefix
operator|+
literal|" metrics system already started!"
argument_list|,
operator|new
name|MetricsException
argument_list|(
literal|"Illegal start"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
name|cb
operator|.
name|preStart
argument_list|()
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|namedCallbacks
operator|.
name|values
argument_list|()
control|)
name|cb
operator|.
name|preStart
argument_list|()
expr_stmt|;
name|configure
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|startTimer
argument_list|()
expr_stmt|;
name|monitoring
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
literal|" metrics system started"
argument_list|)
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
name|cb
operator|.
name|postStart
argument_list|()
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|namedCallbacks
operator|.
name|values
argument_list|()
control|)
name|cb
operator|.
name|postStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|monitoring
operator|&&
operator|!
name|DefaultMetricsSystem
operator|.
name|inMiniClusterMode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|prefix
operator|+
literal|" metrics system not yet started!"
argument_list|,
operator|new
name|MetricsException
argument_list|(
literal|"Illegal stop"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|monitoring
condition|)
block|{
comment|// in mini cluster mode
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
literal|" metrics system stopped (again)"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
name|cb
operator|.
name|preStop
argument_list|()
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|namedCallbacks
operator|.
name|values
argument_list|()
control|)
name|cb
operator|.
name|preStop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|prefix
operator|+
literal|" metrics system..."
argument_list|)
expr_stmt|;
name|stopTimer
argument_list|()
expr_stmt|;
name|stopSources
argument_list|()
expr_stmt|;
name|stopSinks
argument_list|()
expr_stmt|;
name|clearConfigs
argument_list|()
expr_stmt|;
name|monitoring
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
literal|" metrics system stopped."
argument_list|)
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|callbacks
control|)
name|cb
operator|.
name|postStop
argument_list|()
expr_stmt|;
for|for
control|(
name|Callback
name|cb
range|:
name|namedCallbacks
operator|.
name|values
argument_list|()
control|)
name|cb
operator|.
name|postStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
DECL|method|register (String name, String desc, T source)
name|T
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|T
name|source
parameter_list|)
block|{
name|MetricsSourceBuilder
name|sb
init|=
name|MetricsAnnotations
operator|.
name|newSourceBuilder
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|MetricsSource
name|s
init|=
name|sb
operator|.
name|build
argument_list|()
decl_stmt|;
name|MetricsInfo
name|si
init|=
name|sb
operator|.
name|info
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|name
operator|==
literal|null
condition|?
name|si
operator|.
name|name
argument_list|()
else|:
name|name
decl_stmt|;
specifier|final
name|String
name|finalDesc
init|=
name|desc
operator|==
literal|null
condition|?
name|si
operator|.
name|description
argument_list|()
else|:
name|desc
decl_stmt|;
specifier|final
name|String
name|finalName
init|=
comment|// be friendly to non-metrics tests
name|DefaultMetricsSystem
operator|.
name|sourceName
argument_list|(
name|name2
argument_list|,
operator|!
name|monitoring
argument_list|)
decl_stmt|;
name|allSources
operator|.
name|put
argument_list|(
name|finalName
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|finalName
operator|+
literal|", "
operator|+
name|finalDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|monitoring
condition|)
block|{
name|registerSource
argument_list|(
name|finalName
argument_list|,
name|finalDesc
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|// We want to re-register the source to pick up new config when the
comment|// metrics system restarts.
name|register
argument_list|(
name|finalName
argument_list|,
operator|new
name|AbstractCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|postStart
parameter_list|()
block|{
name|registerSource
argument_list|(
name|finalName
argument_list|,
name|finalDesc
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
DECL|method|unregisterSource (String name)
name|void
name|unregisterSource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|sources
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|sources
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sources
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allSources
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|allSources
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namedCallbacks
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|namedCallbacks
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|DefaultMetricsSystem
operator|.
name|removeSourceName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
DECL|method|registerSource (String name, String desc, MetricsSource source)
name|void
name|registerSource
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|MetricsSource
name|source
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|config
argument_list|,
literal|"config"
argument_list|)
expr_stmt|;
name|MetricsConfig
name|conf
init|=
name|sourceConfigs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|MetricsSourceAdapter
name|sa
init|=
operator|new
name|MetricsSourceAdapter
argument_list|(
name|prefix
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|source
argument_list|,
name|injectedTags
argument_list|,
name|period
argument_list|,
name|conf
operator|!=
literal|null
condition|?
name|conf
else|:
name|config
operator|.
name|subset
argument_list|(
name|SOURCE_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|sources
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sa
argument_list|)
expr_stmt|;
name|sa
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered source "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
parameter_list|<
name|T
extends|extends
name|MetricsSink
parameter_list|>
DECL|method|register (final String name, final String description, final T sink)
name|T
name|register
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|T
name|sink
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|name
operator|+
literal|", "
operator|+
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|allSinks
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sink "
operator|+
name|name
operator|+
literal|" already exists!"
argument_list|)
expr_stmt|;
return|return
name|sink
return|;
block|}
name|allSinks
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sink
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|registerSink
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|sink
argument_list|)
expr_stmt|;
block|}
comment|// We want to re-register the sink to pick up new config
comment|// when the metrics system restarts.
name|register
argument_list|(
name|name
argument_list|,
operator|new
name|AbstractCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|postStart
parameter_list|()
block|{
name|register
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|sink
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sink
return|;
block|}
DECL|method|registerSink (String name, String desc, MetricsSink sink)
specifier|synchronized
name|void
name|registerSink
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|MetricsSink
name|sink
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|config
argument_list|,
literal|"config"
argument_list|)
expr_stmt|;
name|MetricsConfig
name|conf
init|=
name|sinkConfigs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|MetricsSinkAdapter
name|sa
init|=
name|conf
operator|!=
literal|null
condition|?
name|newSink
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|sink
argument_list|,
name|conf
argument_list|)
else|:
name|newSink
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|sink
argument_list|,
name|config
operator|.
name|subset
argument_list|(
name|SINK_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|sinks
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sa
argument_list|)
expr_stmt|;
name|sa
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered sink "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|register (final Callback callback)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
operator|(
name|Callback
operator|)
name|getProxyForCallback
argument_list|(
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|register (String name, final Callback callback)
specifier|private
specifier|synchronized
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
name|namedCallbacks
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|(
name|Callback
operator|)
name|getProxyForCallback
argument_list|(
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProxyForCallback (final Callback callback)
specifier|private
name|Object
name|getProxyForCallback
parameter_list|(
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|callback
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Callback
operator|.
name|class
block|}
operator|,
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|callback
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// These are not considered fatal.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in callback "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|)
function|;
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|startMetricsMBeans ()
specifier|public
specifier|synchronized
name|void
name|startMetricsMBeans
parameter_list|()
block|{
for|for
control|(
name|MetricsSourceAdapter
name|sa
range|:
name|sources
operator|.
name|values
argument_list|()
control|)
block|{
name|sa
operator|.
name|startMBeans
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|stopMetricsMBeans ()
specifier|public
specifier|synchronized
name|void
name|stopMetricsMBeans
parameter_list|()
block|{
for|for
control|(
name|MetricsSourceAdapter
name|sa
range|:
name|sources
operator|.
name|values
argument_list|()
control|)
block|{
name|sa
operator|.
name|stopMBeans
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|currentConfig ()
specifier|public
specifier|synchronized
name|String
name|currentConfig
parameter_list|()
block|{
name|PropertiesConfiguration
name|saver
init|=
operator|new
name|PropertiesConfiguration
argument_list|()
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|saver
operator|.
name|copy
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|saver
operator|.
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetricsConfigException
argument_list|(
literal|"Error stringify config"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|startTimer ()
specifier|private
specifier|synchronized
name|void
name|startTimer
parameter_list|()
block|{
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|prefix
operator|+
literal|" metrics system timer already started!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|logicalTime
operator|=
literal|0
expr_stmt|;
name|long
name|millis
init|=
name|period
decl_stmt|;
name|timer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Timer for '"
operator|+
name|prefix
operator|+
literal|"' metrics system"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|onTimerEvent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error invoking metrics timer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|millis
argument_list|,
name|millis
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduled Metric snapshot period at "
operator|+
operator|(
name|period
operator|/
literal|1000
operator|)
operator|+
literal|" second(s)."
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|onTimerEvent ()
specifier|synchronized
name|void
name|onTimerEvent
parameter_list|()
block|{
name|logicalTime
operator|+=
name|period
expr_stmt|;
if|if
condition|(
name|sinks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|publishMetrics
argument_list|(
name|sampleMetrics
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Requests an immediate publish of all metrics from sources to sinks.    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|publishMetricsNow ()
specifier|public
specifier|synchronized
name|void
name|publishMetricsNow
parameter_list|()
block|{
if|if
condition|(
name|sinks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|publishMetrics
argument_list|(
name|sampleMetrics
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Sample all the sources for a snapshot of metrics/tags    * @return  the metrics buffer containing the snapshot    */
end_comment

begin_function
annotation|@
name|VisibleForTesting
DECL|method|sampleMetrics ()
specifier|public
specifier|synchronized
name|MetricsBuffer
name|sampleMetrics
parameter_list|()
block|{
name|collector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|MetricsBufferBuilder
name|bufferBuilder
init|=
operator|new
name|MetricsBufferBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsSourceAdapter
argument_list|>
name|entry
range|:
name|sources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sourceFilter
operator|==
literal|null
operator|||
name|sourceFilter
operator|.
name|accepts
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|snapshotMetrics
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|bufferBuilder
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|publishSelfMetrics
condition|)
block|{
name|snapshotMetrics
argument_list|(
name|sysSource
argument_list|,
name|bufferBuilder
argument_list|)
expr_stmt|;
block|}
name|MetricsBuffer
name|buffer
init|=
name|bufferBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|buffer
return|;
block|}
end_function

begin_function
DECL|method|snapshotMetrics (MetricsSourceAdapter sa, MetricsBufferBuilder bufferBuilder)
specifier|private
name|void
name|snapshotMetrics
parameter_list|(
name|MetricsSourceAdapter
name|sa
parameter_list|,
name|MetricsBufferBuilder
name|bufferBuilder
parameter_list|)
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|bufferBuilder
operator|.
name|add
argument_list|(
name|sa
operator|.
name|name
argument_list|()
argument_list|,
name|sa
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|collector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|snapshotStat
operator|.
name|add
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshotted source "
operator|+
name|sa
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Publish a metrics snapshot to all the sinks    * @param buffer  the metrics snapshot to publish    * @param immediate  indicates that we should publish metrics immediately    *                   instead of using a separate thread.    */
end_comment

begin_function
DECL|method|publishMetrics (MetricsBuffer buffer, boolean immediate)
specifier|synchronized
name|void
name|publishMetrics
parameter_list|(
name|MetricsBuffer
name|buffer
parameter_list|,
name|boolean
name|immediate
parameter_list|)
block|{
name|int
name|dropped
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MetricsSinkAdapter
name|sa
range|:
name|sinks
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|immediate
condition|)
block|{
name|result
operator|=
name|sa
operator|.
name|putMetricsImmediate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|sa
operator|.
name|putMetrics
argument_list|(
name|buffer
argument_list|,
name|logicalTime
argument_list|)
expr_stmt|;
block|}
name|dropped
operator|+=
name|result
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|publishStat
operator|.
name|add
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|droppedPubAll
operator|.
name|incr
argument_list|(
name|dropped
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|stopTimer ()
specifier|private
specifier|synchronized
name|void
name|stopTimer
parameter_list|()
block|{
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|prefix
operator|+
literal|" metrics system timer already stopped!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
DECL|method|stopSources ()
specifier|private
specifier|synchronized
name|void
name|stopSources
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsSourceAdapter
argument_list|>
name|entry
range|:
name|sources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetricsSourceAdapter
name|sa
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping metrics source "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": class="
operator|+
name|sa
operator|.
name|source
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|sa
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|sysSource
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|stopSinks ()
specifier|private
specifier|synchronized
name|void
name|stopSinks
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsSinkAdapter
argument_list|>
name|entry
range|:
name|sinks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetricsSinkAdapter
name|sa
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping metrics sink "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": class="
operator|+
name|sa
operator|.
name|sink
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|sa
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|sinks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|configure (String prefix)
specifier|private
specifier|synchronized
name|void
name|configure
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|config
operator|=
name|MetricsConfig
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|configureSinks
argument_list|()
expr_stmt|;
name|configureSources
argument_list|()
expr_stmt|;
name|configureSystem
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|configureSystem ()
specifier|private
specifier|synchronized
name|void
name|configureSystem
parameter_list|()
block|{
name|injectedTags
operator|.
name|add
argument_list|(
name|Interns
operator|.
name|tag
argument_list|(
name|MsInfo
operator|.
name|Hostname
argument_list|,
name|getHostname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|configureSinks ()
specifier|private
specifier|synchronized
name|void
name|configureSinks
parameter_list|()
block|{
name|sinkConfigs
operator|=
name|config
operator|.
name|getInstanceConfigs
argument_list|(
name|SINK_KEY
argument_list|)
expr_stmt|;
name|long
name|confPeriodMillis
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|MetricsConfig
argument_list|>
name|entry
range|:
name|sinkConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MetricsConfig
name|conf
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|sinkPeriod
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|PERIOD_KEY
argument_list|,
name|PERIOD_DEFAULT
argument_list|)
decl_stmt|;
comment|// Support configuring periodMillis for testing.
name|long
name|sinkPeriodMillis
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|PERIOD_MILLIS_KEY
argument_list|,
name|sinkPeriod
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|confPeriodMillis
operator|=
name|confPeriodMillis
operator|==
literal|0
condition|?
name|sinkPeriodMillis
else|:
name|ArithmeticUtils
operator|.
name|gcd
argument_list|(
name|confPeriodMillis
argument_list|,
name|sinkPeriodMillis
argument_list|)
expr_stmt|;
name|String
name|clsName
init|=
name|conf
operator|.
name|getClassName
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|clsName
operator|==
literal|null
condition|)
continue|continue;
comment|// sink can be registered later on
name|String
name|sinkName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
name|MetricsSinkAdapter
name|sa
init|=
name|newSink
argument_list|(
name|sinkName
argument_list|,
name|conf
operator|.
name|getString
argument_list|(
name|DESC_KEY
argument_list|,
name|sinkName
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sa
operator|.
name|start
argument_list|()
expr_stmt|;
name|sinks
operator|.
name|put
argument_list|(
name|sinkName
argument_list|,
name|sa
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating sink '"
operator|+
name|sinkName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|periodSec
init|=
name|config
operator|.
name|getInt
argument_list|(
name|PERIOD_KEY
argument_list|,
name|PERIOD_DEFAULT
argument_list|)
decl_stmt|;
name|period
operator|=
name|confPeriodMillis
operator|>
literal|0
condition|?
name|confPeriodMillis
else|:
name|config
operator|.
name|getLong
argument_list|(
name|PERIOD_MILLIS_KEY
argument_list|,
name|periodSec
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|newSink (String name, String desc, MetricsSink sink, MetricsConfig conf)
specifier|static
name|MetricsSinkAdapter
name|newSink
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|MetricsSink
name|sink
parameter_list|,
name|MetricsConfig
name|conf
parameter_list|)
block|{
return|return
operator|new
name|MetricsSinkAdapter
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
name|sink
argument_list|,
name|conf
operator|.
name|getString
argument_list|(
name|CONTEXT_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|getFilter
argument_list|(
name|SOURCE_FILTER_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|getFilter
argument_list|(
name|RECORD_FILTER_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|getFilter
argument_list|(
name|METRIC_FILTER_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|PERIOD_KEY
argument_list|,
name|PERIOD_DEFAULT
argument_list|)
operator|*
literal|1000
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|QUEUE_CAPACITY_KEY
argument_list|,
name|QUEUE_CAPACITY_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|RETRY_DELAY_KEY
argument_list|,
name|RETRY_DELAY_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|RETRY_BACKOFF_KEY
argument_list|,
name|RETRY_BACKOFF_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|RETRY_COUNT_KEY
argument_list|,
name|RETRY_COUNT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|newSink (String name, String desc, MetricsConfig conf)
specifier|static
name|MetricsSinkAdapter
name|newSink
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|MetricsConfig
name|conf
parameter_list|)
block|{
return|return
name|newSink
argument_list|(
name|name
argument_list|,
name|desc
argument_list|,
operator|(
name|MetricsSink
operator|)
name|conf
operator|.
name|getPlugin
argument_list|(
literal|""
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|configureSources ()
specifier|private
name|void
name|configureSources
parameter_list|()
block|{
name|sourceFilter
operator|=
name|config
operator|.
name|getFilter
argument_list|(
name|PREFIX_DEFAULT
operator|+
name|SOURCE_FILTER_KEY
argument_list|)
expr_stmt|;
name|sourceConfigs
operator|=
name|config
operator|.
name|getInstanceConfigs
argument_list|(
name|SOURCE_KEY
argument_list|)
expr_stmt|;
name|registerSystemSource
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|clearConfigs ()
specifier|private
name|void
name|clearConfigs
parameter_list|()
block|{
name|sinkConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sourceConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|injectedTags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|config
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getHostname ()
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting localhost name. Using 'localhost'..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|"localhost"
return|;
block|}
end_function

begin_function
DECL|method|registerSystemSource ()
specifier|private
name|void
name|registerSystemSource
parameter_list|()
block|{
name|MetricsConfig
name|sysConf
init|=
name|sourceConfigs
operator|.
name|get
argument_list|(
name|MS_NAME
argument_list|)
decl_stmt|;
name|sysSource
operator|=
operator|new
name|MetricsSourceAdapter
argument_list|(
name|prefix
argument_list|,
name|MS_STATS_NAME
argument_list|,
name|MS_STATS_DESC
argument_list|,
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
name|this
argument_list|)
argument_list|,
name|injectedTags
argument_list|,
name|period
argument_list|,
name|sysConf
operator|==
literal|null
condition|?
name|config
operator|.
name|subset
argument_list|(
name|SOURCE_KEY
argument_list|)
else|:
name|sysConf
argument_list|)
expr_stmt|;
name|sysSource
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector builder, boolean all)
specifier|public
specifier|synchronized
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|builder
operator|.
name|addRecord
argument_list|(
name|MS_NAME
argument_list|)
operator|.
name|addGauge
argument_list|(
name|MsInfo
operator|.
name|NumActiveSources
argument_list|,
name|sources
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|MsInfo
operator|.
name|NumAllSources
argument_list|,
name|allSources
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|MsInfo
operator|.
name|NumActiveSinks
argument_list|,
name|sinks
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|MsInfo
operator|.
name|NumAllSinks
argument_list|,
name|allSinks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MetricsSinkAdapter
name|sa
range|:
name|sinks
operator|.
name|values
argument_list|()
control|)
block|{
name|sa
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
name|registry
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|initSystemMBean ()
specifier|private
name|void
name|initSystemMBean
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|prefix
argument_list|,
literal|"prefix should not be null here!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mbeanName
operator|==
literal|null
condition|)
block|{
name|mbeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
name|prefix
argument_list|,
name|MS_CONTROL_NAME
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
specifier|synchronized
name|boolean
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"refCount="
operator|+
name|refCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|refCount
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Redundant shutdown"
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// already shutdown
block|}
if|if
condition|(
operator|--
name|refCount
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|monitoring
condition|)
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error stopping the metrics system"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|allSources
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allSinks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|callbacks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|namedCallbacks
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|mbeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|mbeanName
argument_list|)
expr_stmt|;
name|mbeanName
operator|=
literal|null
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|prefix
operator|+
literal|" metrics system shutdown complete."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getSource (String name)
specifier|public
name|MetricsSource
name|getSource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|allSources
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|getSourceAdapter (String name)
name|MetricsSourceAdapter
name|getSourceAdapter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|sources
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|getSinkAdapter (String name)
specifier|public
name|MetricsSinkAdapter
name|getSinkAdapter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|sinks
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|initMode ()
specifier|private
name|InitMode
name|initMode
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"from system property: "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
name|MS_INIT_MODE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"from environment variable: "
operator|+
name|System
operator|.
name|getenv
argument_list|(
name|MS_INIT_MODE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|m
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|MS_INIT_MODE_KEY
argument_list|)
decl_stmt|;
name|String
name|m2
init|=
name|m
operator|==
literal|null
condition|?
name|System
operator|.
name|getenv
argument_list|(
name|MS_INIT_MODE_KEY
argument_list|)
else|:
name|m
decl_stmt|;
return|return
name|InitMode
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
operator|(
name|m2
operator|==
literal|null
condition|?
name|InitMode
operator|.
name|NORMAL
operator|.
name|name
argument_list|()
else|:
name|m2
operator|)
argument_list|)
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

