begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * An AclStatus contains the ACL information of a specific file. AclStatus  * instances are immutable. Use a {@link Builder} to create a new instance.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|AclStatus
specifier|public
class|class
name|AclStatus
block|{
DECL|field|owner
specifier|private
specifier|final
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
DECL|field|stickyBit
specifier|private
specifier|final
name|boolean
name|stickyBit
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|permission
specifier|private
specifier|final
name|FsPermission
name|permission
decl_stmt|;
comment|/**    * Returns the file owner.    *    * @return String file owner    */
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
comment|/**    * Returns the file group.    *    * @return String file group    */
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
comment|/**    * Returns the sticky bit.    *     * @return boolean sticky bit    */
DECL|method|isStickyBit ()
specifier|public
name|boolean
name|isStickyBit
parameter_list|()
block|{
return|return
name|stickyBit
return|;
block|}
comment|/**    * Returns the list of all ACL entries, ordered by their natural ordering.    *    * @return List<AclEntry> unmodifiable ordered list of all ACL entries    */
DECL|method|getEntries ()
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
comment|/**    * Returns the permission set for the path    * @return {@link FsPermission} for the path    */
DECL|method|getPermission ()
specifier|public
name|FsPermission
name|getPermission
parameter_list|()
block|{
return|return
name|permission
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AclStatus
name|other
init|=
operator|(
name|AclStatus
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|owner
argument_list|,
name|other
operator|.
name|owner
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|group
argument_list|,
name|other
operator|.
name|group
argument_list|)
operator|&&
name|stickyBit
operator|==
name|other
operator|.
name|stickyBit
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|entries
argument_list|,
name|other
operator|.
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|stickyBit
argument_list|,
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"owner: "
argument_list|)
operator|.
name|append
argument_list|(
name|owner
argument_list|)
operator|.
name|append
argument_list|(
literal|", group: "
argument_list|)
operator|.
name|append
argument_list|(
name|group
argument_list|)
operator|.
name|append
argument_list|(
literal|", acl: {"
argument_list|)
operator|.
name|append
argument_list|(
literal|"entries: "
argument_list|)
operator|.
name|append
argument_list|(
name|entries
argument_list|)
operator|.
name|append
argument_list|(
literal|", stickyBit: "
argument_list|)
operator|.
name|append
argument_list|(
name|stickyBit
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Builder for creating new Acl instances.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|stickyBit
specifier|private
name|boolean
name|stickyBit
decl_stmt|;
DECL|field|entries
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|permission
specifier|private
name|FsPermission
name|permission
init|=
literal|null
decl_stmt|;
comment|/**      * Sets the file owner.      *      * @param owner String file owner      * @return Builder this builder, for call chaining      */
DECL|method|owner (String owner)
specifier|public
name|Builder
name|owner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the file group.      *      * @param group String file group      * @return Builder this builder, for call chaining      */
DECL|method|group (String group)
specifier|public
name|Builder
name|group
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an ACL entry.      *      * @param e AclEntry entry to add      * @return Builder this builder, for call chaining      */
DECL|method|addEntry (AclEntry e)
specifier|public
name|Builder
name|addEntry
parameter_list|(
name|AclEntry
name|e
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a list of ACL entries.      *      * @param entries AclEntry entries to add      * @return Builder this builder, for call chaining      */
DECL|method|addEntries (Iterable<AclEntry> entries)
specifier|public
name|Builder
name|addEntries
parameter_list|(
name|Iterable
argument_list|<
name|AclEntry
argument_list|>
name|entries
parameter_list|)
block|{
for|for
control|(
name|AclEntry
name|e
range|:
name|entries
control|)
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets sticky bit. If this method is not called, then the builder assumes      * false.      *      * @param stickyBit      *          boolean sticky bit      * @return Builder this builder, for call chaining      */
DECL|method|stickyBit (boolean stickyBit)
specifier|public
name|Builder
name|stickyBit
parameter_list|(
name|boolean
name|stickyBit
parameter_list|)
block|{
name|this
operator|.
name|stickyBit
operator|=
name|stickyBit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the permission for the file.      * @param permission      */
DECL|method|setPermission (FsPermission permission)
specifier|public
name|Builder
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds a new AclStatus populated with the set properties.      *      * @return AclStatus new AclStatus      */
DECL|method|build ()
specifier|public
name|AclStatus
name|build
parameter_list|()
block|{
return|return
operator|new
name|AclStatus
argument_list|(
name|owner
argument_list|,
name|group
argument_list|,
name|stickyBit
argument_list|,
name|entries
argument_list|,
name|permission
argument_list|)
return|;
block|}
block|}
comment|/**    * Private constructor.    *    * @param file Path file associated to this ACL    * @param owner String file owner    * @param group String file group    * @param stickyBit the sticky bit    * @param entries the ACL entries    * @param permission permission of the path    */
DECL|method|AclStatus (String owner, String group, boolean stickyBit, Iterable<AclEntry> entries, FsPermission permission)
specifier|private
name|AclStatus
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|,
name|boolean
name|stickyBit
parameter_list|,
name|Iterable
argument_list|<
name|AclEntry
argument_list|>
name|entries
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|stickyBit
operator|=
name|stickyBit
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
comment|/**    * Get the effective permission for the AclEntry    * @param entry AclEntry to get the effective action    */
DECL|method|getEffectivePermission (AclEntry entry)
specifier|public
name|FsAction
name|getEffectivePermission
parameter_list|(
name|AclEntry
name|entry
parameter_list|)
block|{
return|return
name|getEffectivePermission
argument_list|(
name|entry
argument_list|,
name|permission
argument_list|)
return|;
block|}
comment|/**    * Get the effective permission for the AclEntry.<br>    * Recommended to use this API ONLY if client communicates with the old    * NameNode, needs to pass the Permission for the path to get effective    * permission, else use {@link AclStatus#getEffectivePermission(AclEntry)}.    * @param entry AclEntry to get the effective action    * @param permArg Permission for the path. However if the client is NOT    *          communicating with old namenode, then this argument will not have    *          any preference.    * @return Returns the effective permission for the entry.    * @throws IllegalArgumentException If the client communicating with old    *           namenode and permission is not passed as an argument.    */
DECL|method|getEffectivePermission (AclEntry entry, FsPermission permArg)
specifier|public
name|FsAction
name|getEffectivePermission
parameter_list|(
name|AclEntry
name|entry
parameter_list|,
name|FsPermission
name|permArg
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// At least one permission bits should be available.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|permission
operator|!=
literal|null
operator|||
name|permArg
operator|!=
literal|null
argument_list|,
literal|"Permission bits are not available to calculate effective permission"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|permission
operator|!=
literal|null
condition|)
block|{
comment|// permission bits from server response will have the priority for
comment|// accuracy.
name|permArg
operator|=
name|this
operator|.
name|permission
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|entry
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|||
name|entry
operator|.
name|getType
argument_list|()
operator|==
name|AclEntryType
operator|.
name|GROUP
operator|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getScope
argument_list|()
operator|==
name|AclEntryScope
operator|.
name|ACCESS
condition|)
block|{
name|FsAction
name|entryPerm
init|=
name|entry
operator|.
name|getPermission
argument_list|()
decl_stmt|;
return|return
name|entryPerm
operator|.
name|and
argument_list|(
name|permArg
operator|.
name|getGroupAction
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|entries
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
operator|&&
name|this
operator|.
name|entries
operator|.
name|size
argument_list|()
operator|>=
literal|3
argument_list|,
literal|"Passed default ACL entry not found in the list of ACLs"
argument_list|)
expr_stmt|;
comment|// default mask entry for effective permission calculation will be the
comment|// penultimate entry. This can be mask entry in case of extended ACLs.
comment|// In case of minimal ACL, this is the owner group entry, and we end up
comment|// intersecting group FsAction with itself, which is a no-op.
name|FsAction
name|defaultMask
init|=
name|this
operator|.
name|entries
operator|.
name|get
argument_list|(
name|this
operator|.
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|FsAction
name|entryPerm
init|=
name|entry
operator|.
name|getPermission
argument_list|()
decl_stmt|;
return|return
name|entryPerm
operator|.
name|and
argument_list|(
name|defaultMask
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|entry
operator|.
name|getPermission
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

