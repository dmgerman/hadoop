begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell.find
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|find
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathData
import|;
end_import

begin_comment
comment|/**  * Implements the -print expression for the  * {@link org.apache.hadoop.fs.shell.find.Find} command.  */
end_comment

begin_class
DECL|class|Print
specifier|final
class|class
name|Print
extends|extends
name|BaseExpression
block|{
comment|/** Registers this expression with the specified factory. */
DECL|method|registerExpression (ExpressionFactory factory)
specifier|public
specifier|static
name|void
name|registerExpression
parameter_list|(
name|ExpressionFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Print
operator|.
name|class
argument_list|,
literal|"-print"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|Print0
operator|.
name|class
argument_list|,
literal|"-print0"
argument_list|)
expr_stmt|;
block|}
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USAGE
init|=
block|{
literal|"-print"
block|,
literal|"-print0"
block|}
decl_stmt|;
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HELP
init|=
block|{
literal|"Always evaluates to true. Causes the current pathname to be"
block|,
literal|"written to standard output followed by a newline. If the -print0"
block|,
literal|"expression is used then an ASCII NULL character is appended rather"
block|,
literal|"than a newline."
block|}
decl_stmt|;
DECL|field|suffix
specifier|private
specifier|final
name|String
name|suffix
decl_stmt|;
DECL|method|Print ()
specifier|public
name|Print
parameter_list|()
block|{
name|this
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a Print {@link Expression} with the specified suffix.    */
DECL|method|Print (String suffix)
specifier|private
name|Print
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setUsage
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|setHelp
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (PathData item, int depth)
specifier|public
name|Result
name|apply
parameter_list|(
name|PathData
name|item
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|getOptions
argument_list|()
operator|.
name|getOut
argument_list|()
operator|.
name|print
argument_list|(
name|item
operator|.
name|toString
argument_list|()
operator|+
name|suffix
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|PASS
return|;
block|}
annotation|@
name|Override
DECL|method|isAction ()
specifier|public
name|boolean
name|isAction
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** Implements the -print0 expression. */
DECL|class|Print0
specifier|final
specifier|static
class|class
name|Print0
extends|extends
name|FilterExpression
block|{
DECL|method|Print0 ()
specifier|public
name|Print0
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Print
argument_list|(
literal|"\0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

