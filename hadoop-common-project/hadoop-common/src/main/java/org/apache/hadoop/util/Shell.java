begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|AbstractJavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A base class for running a Shell command.  *  *<code>Shell</code> can be used to run shell commands like<code>du</code> or  *<code>df</code>. It also offers facilities to gate commands by  * time-intervals.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Shell
specifier|public
specifier|abstract
class|class
name|Shell
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Text to include when there are windows-specific problems.    * {@value}    */
DECL|field|WINDOWS_PROBLEMS
specifier|private
specifier|static
specifier|final
name|String
name|WINDOWS_PROBLEMS
init|=
literal|"https://wiki.apache.org/hadoop/WindowsProblems"
decl_stmt|;
comment|/**    * Name of the windows utils binary: {@value}.    */
DECL|field|WINUTILS_EXE
specifier|static
specifier|final
name|String
name|WINUTILS_EXE
init|=
literal|"winutils.exe"
decl_stmt|;
comment|/**    * System property for the Hadoop home directory: {@value}.    */
DECL|field|SYSPROP_HADOOP_HOME_DIR
specifier|public
specifier|static
specifier|final
name|String
name|SYSPROP_HADOOP_HOME_DIR
init|=
literal|"hadoop.home.dir"
decl_stmt|;
comment|/**    * Environment variable for Hadoop's home dir: {@value}.    */
DECL|field|ENV_HADOOP_HOME
specifier|public
specifier|static
specifier|final
name|String
name|ENV_HADOOP_HOME
init|=
literal|"HADOOP_HOME"
decl_stmt|;
comment|/**    * query to see if system is Java 7 or later.    * Now that Hadoop requires Java 7 or later, this always returns true.    * @deprecated This call isn't needed any more: please remove uses of it.    * @return true, always.    */
annotation|@
name|Deprecated
DECL|method|isJava7OrAbove ()
specifier|public
specifier|static
name|boolean
name|isJava7OrAbove
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Maximum command line length in Windows    * KB830473 documents this as 8191    */
DECL|field|WINDOWS_MAX_SHELL_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|WINDOWS_MAX_SHELL_LENGTH
init|=
literal|8191
decl_stmt|;
comment|/**    * mis-spelling of {@link #WINDOWS_MAX_SHELL_LENGTH}.    * @deprecated use the correctly spelled constant.    */
annotation|@
name|Deprecated
DECL|field|WINDOWS_MAX_SHELL_LENGHT
specifier|public
specifier|static
specifier|final
name|int
name|WINDOWS_MAX_SHELL_LENGHT
init|=
name|WINDOWS_MAX_SHELL_LENGTH
decl_stmt|;
comment|/**    * Checks if a given command (String[]) fits in the Windows maximum command    * line length Note that the input is expected to already include space    * delimiters, no extra count will be added for delimiters.    *    * @param commands command parts, including any space delimiters    */
DECL|method|checkWindowsCommandLineLength (String...commands)
specifier|public
specifier|static
name|void
name|checkWindowsCommandLineLength
parameter_list|(
name|String
modifier|...
name|commands
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|commands
control|)
block|{
name|len
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>
name|WINDOWS_MAX_SHELL_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The command line has a length of %d exceeds maximum allowed length"
operator|+
literal|" of %d. Command starts with: %s"
argument_list|,
name|len
argument_list|,
name|WINDOWS_MAX_SHELL_LENGTH
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|commands
argument_list|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Quote the given arg so that bash will interpret it as a single value.    * Note that this quotes it for one level of bash, if you are passing it    * into a badly written shell script, you need to fix your shell script.    * @param arg the argument to quote    * @return the quoted string    */
DECL|method|bashQuote (String arg)
specifier|static
name|String
name|bashQuote
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|arg
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|arg
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"'\\''"
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** a Unix command to get the current user's name: {@value}. */
DECL|field|USER_NAME_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|USER_NAME_COMMAND
init|=
literal|"whoami"
decl_stmt|;
comment|/** Windows<code>CreateProcess</code> synchronization object. */
DECL|field|WindowsProcessLaunchLock
specifier|public
specifier|static
specifier|final
name|Object
name|WindowsProcessLaunchLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// OSType detection
DECL|enum|OSType
specifier|public
enum|enum
name|OSType
block|{
DECL|enumConstant|OS_TYPE_LINUX
name|OS_TYPE_LINUX
block|,
DECL|enumConstant|OS_TYPE_WIN
name|OS_TYPE_WIN
block|,
DECL|enumConstant|OS_TYPE_SOLARIS
name|OS_TYPE_SOLARIS
block|,
DECL|enumConstant|OS_TYPE_MAC
name|OS_TYPE_MAC
block|,
DECL|enumConstant|OS_TYPE_FREEBSD
name|OS_TYPE_FREEBSD
block|,
DECL|enumConstant|OS_TYPE_OTHER
name|OS_TYPE_OTHER
block|}
comment|/**    * Get the type of the operating system, as determined from parsing    * the<code>os.name</code> property.    */
DECL|field|osType
specifier|public
specifier|static
specifier|final
name|OSType
name|osType
init|=
name|getOSType
argument_list|()
decl_stmt|;
DECL|method|getOSType ()
specifier|private
specifier|static
name|OSType
name|getOSType
parameter_list|()
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_WIN
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"SunOS"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Solaris"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_SOLARIS
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_MAC
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"FreeBSD"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_FREEBSD
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_LINUX
return|;
block|}
else|else
block|{
comment|// Some other form of Unix
return|return
name|OSType
operator|.
name|OS_TYPE_OTHER
return|;
block|}
block|}
comment|// Helper static vars for each platform
DECL|field|WINDOWS
specifier|public
specifier|static
specifier|final
name|boolean
name|WINDOWS
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_WIN
operator|)
decl_stmt|;
DECL|field|SOLARIS
specifier|public
specifier|static
specifier|final
name|boolean
name|SOLARIS
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_SOLARIS
operator|)
decl_stmt|;
DECL|field|MAC
specifier|public
specifier|static
specifier|final
name|boolean
name|MAC
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_MAC
operator|)
decl_stmt|;
DECL|field|FREEBSD
specifier|public
specifier|static
specifier|final
name|boolean
name|FREEBSD
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_FREEBSD
operator|)
decl_stmt|;
DECL|field|LINUX
specifier|public
specifier|static
specifier|final
name|boolean
name|LINUX
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_LINUX
operator|)
decl_stmt|;
DECL|field|OTHER
specifier|public
specifier|static
specifier|final
name|boolean
name|OTHER
init|=
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_OTHER
operator|)
decl_stmt|;
DECL|field|PPC_64
specifier|public
specifier|static
specifier|final
name|boolean
name|PPC_64
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"ppc64"
argument_list|)
decl_stmt|;
comment|/** a Unix command to get the current user's groups list. */
DECL|method|getGroupsCommand ()
specifier|public
specifier|static
name|String
index|[]
name|getGroupsCommand
parameter_list|()
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
operator|new
name|String
index|[]
block|{
literal|"cmd"
block|,
literal|"/c"
block|,
literal|"groups"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"groups"
block|}
return|;
block|}
comment|/**    * A command to get a given user's groups list.    * If the OS is not WINDOWS, the command will get the user's primary group    * first and finally get the groups list which includes the primary group.    * i.e. the user's primary group will be included twice.    */
DECL|method|getGroupsForUserCommand (final String user)
specifier|public
specifier|static
name|String
index|[]
name|getGroupsForUserCommand
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
block|{
comment|//'groups username' command return is inconsistent across different unixes
if|if
condition|(
name|WINDOWS
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"groups"
block|,
literal|"-F"
block|,
literal|"\""
operator|+
name|user
operator|+
literal|"\""
block|}
return|;
block|}
else|else
block|{
name|String
name|quotedUser
init|=
name|bashQuote
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"id -gn "
operator|+
name|quotedUser
operator|+
literal|"; id -Gn "
operator|+
name|quotedUser
block|}
return|;
block|}
block|}
comment|/**    * A command to get a given user's group id list.    * The command will get the user's primary group    * first and finally get the groups list which includes the primary group.    * i.e. the user's primary group will be included twice.    * This command does not support Windows and will only return group names.    */
DECL|method|getGroupsIDForUserCommand (final String user)
specifier|public
specifier|static
name|String
index|[]
name|getGroupsIDForUserCommand
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
block|{
comment|//'groups username' command return is inconsistent across different unixes
if|if
condition|(
name|WINDOWS
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"groups"
block|,
literal|"-F"
block|,
literal|"\""
operator|+
name|user
operator|+
literal|"\""
block|}
return|;
block|}
else|else
block|{
name|String
name|quotedUser
init|=
name|bashQuote
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"id -g "
operator|+
name|quotedUser
operator|+
literal|"; id -G "
operator|+
name|quotedUser
block|}
return|;
block|}
block|}
comment|/** A command to get a given netgroup's user list. */
DECL|method|getUsersForNetgroupCommand (final String netgroup)
specifier|public
specifier|static
name|String
index|[]
name|getUsersForNetgroupCommand
parameter_list|(
specifier|final
name|String
name|netgroup
parameter_list|)
block|{
comment|//'groups username' command return is non-consistent across different unixes
return|return
operator|new
name|String
index|[]
block|{
literal|"getent"
block|,
literal|"netgroup"
block|,
name|netgroup
block|}
return|;
block|}
comment|/** Return a command to get permission information. */
DECL|method|getGetPermissionCommand ()
specifier|public
specifier|static
name|String
index|[]
name|getGetPermissionCommand
parameter_list|()
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"ls"
block|,
literal|"-F"
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"/bin/ls"
block|,
literal|"-ld"
block|}
return|;
block|}
comment|/** Return a command to set permission. */
DECL|method|getSetPermissionCommand (String perm, boolean recursive)
specifier|public
specifier|static
name|String
index|[]
name|getSetPermissionCommand
parameter_list|(
name|String
name|perm
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
if|if
condition|(
name|recursive
condition|)
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"chmod"
block|,
literal|"-R"
block|,
name|perm
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"-R"
block|,
name|perm
block|}
return|;
block|}
else|else
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"chmod"
block|,
name|perm
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
name|perm
block|}
return|;
block|}
block|}
comment|/**    * Return a command to set permission for specific file.    *    * @param perm String permission to set    * @param recursive boolean true to apply to all sub-directories recursively    * @param file String file to set    * @return String[] containing command and arguments    */
DECL|method|getSetPermissionCommand (String perm, boolean recursive, String file)
specifier|public
specifier|static
name|String
index|[]
name|getSetPermissionCommand
parameter_list|(
name|String
name|perm
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|String
index|[]
name|baseCmd
init|=
name|getSetPermissionCommand
argument_list|(
name|perm
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
name|String
index|[]
name|cmdWithFile
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|baseCmd
argument_list|,
name|baseCmd
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|cmdWithFile
index|[
name|cmdWithFile
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|file
expr_stmt|;
return|return
name|cmdWithFile
return|;
block|}
comment|/** Return a command to set owner. */
DECL|method|getSetOwnerCommand (String owner)
specifier|public
specifier|static
name|String
index|[]
name|getSetOwnerCommand
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"chown"
block|,
literal|"\""
operator|+
name|owner
operator|+
literal|"\""
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"chown"
block|,
name|owner
block|}
return|;
block|}
comment|/** Return a command to create symbolic links. */
DECL|method|getSymlinkCommand (String target, String link)
specifier|public
specifier|static
name|String
index|[]
name|getSymlinkCommand
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|)
block|{
return|return
name|WINDOWS
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"symlink"
block|,
name|link
block|,
name|target
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"ln"
block|,
literal|"-s"
block|,
name|target
block|,
name|link
block|}
return|;
block|}
comment|/** Return a command to read the target of the a symbolic link. */
DECL|method|getReadlinkCommand (String link)
specifier|public
specifier|static
name|String
index|[]
name|getReadlinkCommand
parameter_list|(
name|String
name|link
parameter_list|)
block|{
return|return
name|WINDOWS
condition|?
operator|new
name|String
index|[]
block|{
name|getWinUtilsPath
argument_list|()
block|,
literal|"readlink"
block|,
name|link
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"readlink"
block|,
name|link
block|}
return|;
block|}
comment|/**    * Return a command for determining if process with specified pid is alive.    * @param pid process ID    * @return a<code>kill -0</code> command or equivalent    */
DECL|method|getCheckProcessIsAliveCommand (String pid)
specifier|public
specifier|static
name|String
index|[]
name|getCheckProcessIsAliveCommand
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
return|return
name|getSignalKillCommand
argument_list|(
literal|0
argument_list|,
name|pid
argument_list|)
return|;
block|}
comment|/** Return a command to send a signal to a given pid. */
DECL|method|getSignalKillCommand (int code, String pid)
specifier|public
specifier|static
name|String
index|[]
name|getSignalKillCommand
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
comment|// Code == 0 means check alive
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|code
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
block|,
literal|"task"
block|,
literal|"isAlive"
block|,
name|pid
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
block|,
literal|"task"
block|,
literal|"kill"
block|,
name|pid
block|}
return|;
block|}
block|}
comment|// Use the bash-builtin instead of the Unix kill command (usually
comment|// /bin/kill) as the bash-builtin supports "--" in all Hadoop supported
comment|// OSes.
specifier|final
name|String
name|quotedPid
init|=
name|bashQuote
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSetsidAvailable
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -"
operator|+
name|code
operator|+
literal|" -- -"
operator|+
name|quotedPid
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -"
operator|+
name|code
operator|+
literal|" "
operator|+
name|quotedPid
block|}
return|;
block|}
block|}
comment|/** Regular expression for environment variables: {@value}. */
DECL|field|ENV_NAME_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|ENV_NAME_REGEX
init|=
literal|"[A-Za-z_][A-Za-z0-9_]*"
decl_stmt|;
comment|/** Return a regular expression string that match environment variables. */
DECL|method|getEnvironmentVariableRegex ()
specifier|public
specifier|static
name|String
name|getEnvironmentVariableRegex
parameter_list|()
block|{
return|return
operator|(
name|WINDOWS
operator|)
condition|?
literal|"%("
operator|+
name|ENV_NAME_REGEX
operator|+
literal|"?)%"
else|:
literal|"\\$("
operator|+
name|ENV_NAME_REGEX
operator|+
literal|")"
return|;
block|}
comment|/**    * Returns a File referencing a script with the given basename, inside the    * given parent directory.  The file extension is inferred by platform:    *<code>".cmd"</code> on Windows, or<code>".sh"</code> otherwise.    *    * @param parent File parent directory    * @param basename String script file basename    * @return File referencing the script in the directory    */
DECL|method|appendScriptExtension (File parent, String basename)
specifier|public
specifier|static
name|File
name|appendScriptExtension
parameter_list|(
name|File
name|parent
parameter_list|,
name|String
name|basename
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|appendScriptExtension
argument_list|(
name|basename
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a script file name with the given basename.    *    * The file extension is inferred by platform:    *<code>".cmd"</code> on Windows, or<code>".sh"</code> otherwise.    *    * @param basename String script file basename    * @return String script file name    */
DECL|method|appendScriptExtension (String basename)
specifier|public
specifier|static
name|String
name|appendScriptExtension
parameter_list|(
name|String
name|basename
parameter_list|)
block|{
return|return
name|basename
operator|+
operator|(
name|WINDOWS
condition|?
literal|".cmd"
else|:
literal|".sh"
operator|)
return|;
block|}
comment|/**    * Returns a command to run the given script.  The script interpreter is    * inferred by platform: cmd on Windows or bash otherwise.    *    * @param script File script to run    * @return String[] command to run the script    */
DECL|method|getRunScriptCommand (File script)
specifier|public
specifier|static
name|String
index|[]
name|getRunScriptCommand
parameter_list|(
name|File
name|script
parameter_list|)
block|{
name|String
name|absolutePath
init|=
name|script
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
return|return
name|WINDOWS
condition|?
operator|new
name|String
index|[]
block|{
literal|"cmd"
block|,
literal|"/c"
block|,
name|absolutePath
block|}
else|:
operator|new
name|String
index|[]
block|{
literal|"/bin/bash"
block|,
name|bashQuote
argument_list|(
name|absolutePath
argument_list|)
block|}
return|;
block|}
comment|/** a Unix command to set permission: {@value}. */
DECL|field|SET_PERMISSION_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|SET_PERMISSION_COMMAND
init|=
literal|"chmod"
decl_stmt|;
comment|/** a Unix command to set owner: {@value}. */
DECL|field|SET_OWNER_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|SET_OWNER_COMMAND
init|=
literal|"chown"
decl_stmt|;
comment|/** a Unix command to set the change user's groups list: {@value}. */
DECL|field|SET_GROUP_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|SET_GROUP_COMMAND
init|=
literal|"chgrp"
decl_stmt|;
comment|/** a Unix command to create a link: {@value}. */
DECL|field|LINK_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|LINK_COMMAND
init|=
literal|"ln"
decl_stmt|;
comment|/** a Unix command to get a link target: {@value}. */
DECL|field|READ_LINK_COMMAND
specifier|public
specifier|static
specifier|final
name|String
name|READ_LINK_COMMAND
init|=
literal|"readlink"
decl_stmt|;
comment|/**Time after which the executing script would be timedout. */
DECL|field|timeOutInterval
specifier|protected
name|long
name|timeOutInterval
init|=
literal|0L
decl_stmt|;
comment|/** If or not script timed out*/
DECL|field|timedOut
specifier|private
specifier|final
name|AtomicBoolean
name|timedOut
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/** Indicates if the parent env vars should be inherited or not*/
DECL|field|inheritParentEnv
specifier|protected
name|boolean
name|inheritParentEnv
init|=
literal|true
decl_stmt|;
comment|/**    *  Centralized logic to discover and validate the sanity of the Hadoop    *  home directory.    *    *  This does a lot of work so it should only be called    *  privately for initialization once per process.    *    * @return A directory that exists and via was specified on the command line    * via<code>-Dhadoop.home.dir</code> or the<code>HADOOP_HOME</code>    * environment variable.    * @throws FileNotFoundException if the properties are absent or the specified    * path is not a reference to a valid directory.    */
DECL|method|checkHadoopHome ()
specifier|private
specifier|static
name|File
name|checkHadoopHome
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
comment|// first check the Dflag hadoop.home.dir with JVM scope
name|String
name|home
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_HADOOP_HOME_DIR
argument_list|)
decl_stmt|;
comment|// fall back to the system/user-global env variable
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|home
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|ENV_HADOOP_HOME
argument_list|)
expr_stmt|;
block|}
return|return
name|checkHadoopHomeInner
argument_list|(
name|home
argument_list|)
return|;
block|}
comment|/*   A set of exception strings used to construct error messages;   these are referred to in tests   */
DECL|field|E_DOES_NOT_EXIST
specifier|static
specifier|final
name|String
name|E_DOES_NOT_EXIST
init|=
literal|"does not exist"
decl_stmt|;
DECL|field|E_IS_RELATIVE
specifier|static
specifier|final
name|String
name|E_IS_RELATIVE
init|=
literal|"is not an absolute path."
decl_stmt|;
DECL|field|E_NOT_DIRECTORY
specifier|static
specifier|final
name|String
name|E_NOT_DIRECTORY
init|=
literal|"is not a directory."
decl_stmt|;
DECL|field|E_NO_EXECUTABLE
specifier|static
specifier|final
name|String
name|E_NO_EXECUTABLE
init|=
literal|"Could not locate Hadoop executable"
decl_stmt|;
DECL|field|E_NOT_EXECUTABLE_FILE
specifier|static
specifier|final
name|String
name|E_NOT_EXECUTABLE_FILE
init|=
literal|"Not an executable file"
decl_stmt|;
DECL|field|E_HADOOP_PROPS_UNSET
specifier|static
specifier|final
name|String
name|E_HADOOP_PROPS_UNSET
init|=
name|ENV_HADOOP_HOME
operator|+
literal|" and "
operator|+
name|SYSPROP_HADOOP_HOME_DIR
operator|+
literal|" are unset."
decl_stmt|;
DECL|field|E_HADOOP_PROPS_EMPTY
specifier|static
specifier|final
name|String
name|E_HADOOP_PROPS_EMPTY
init|=
name|ENV_HADOOP_HOME
operator|+
literal|" or "
operator|+
name|SYSPROP_HADOOP_HOME_DIR
operator|+
literal|" set to an empty string"
decl_stmt|;
DECL|field|E_NOT_A_WINDOWS_SYSTEM
specifier|static
specifier|final
name|String
name|E_NOT_A_WINDOWS_SYSTEM
init|=
literal|"Not a Windows system"
decl_stmt|;
comment|/**    *  Validate the accessibility of the Hadoop home directory.    *    * @return A directory that is expected to be the hadoop home directory    * @throws FileNotFoundException if the specified    * path is not a reference to a valid directory.    */
annotation|@
name|VisibleForTesting
DECL|method|checkHadoopHomeInner (String home)
specifier|static
name|File
name|checkHadoopHomeInner
parameter_list|(
name|String
name|home
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|// couldn't find either setting for hadoop's home directory
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|E_HADOOP_PROPS_UNSET
argument_list|)
throw|;
block|}
comment|// strip off leading and trailing double quotes
while|while
condition|(
name|home
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|home
operator|=
name|home
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|home
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|home
operator|=
name|home
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|home
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// after stripping any quotes, check for home dir being non-empty
if|if
condition|(
name|home
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|E_HADOOP_PROPS_EMPTY
argument_list|)
throw|;
block|}
comment|// check that the hadoop home dir value
comment|// is an absolute reference to a directory
name|File
name|homedir
init|=
operator|new
name|File
argument_list|(
name|home
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|homedir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Hadoop home directory "
operator|+
name|homedir
operator|+
literal|" "
operator|+
name|E_IS_RELATIVE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|homedir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Hadoop home directory "
operator|+
name|homedir
operator|+
literal|" "
operator|+
name|E_DOES_NOT_EXIST
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|homedir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Hadoop home directory "
operator|+
name|homedir
operator|+
literal|" "
operator|+
name|E_NOT_DIRECTORY
argument_list|)
throw|;
block|}
return|return
name|homedir
return|;
block|}
comment|/**    * The Hadoop home directory.    */
DECL|field|HADOOP_HOME_FILE
specifier|private
specifier|static
specifier|final
name|File
name|HADOOP_HOME_FILE
decl_stmt|;
comment|/**    * Rethrowable cause for the failure to determine the hadoop    * home directory    */
DECL|field|HADOOP_HOME_DIR_FAILURE_CAUSE
specifier|private
specifier|static
specifier|final
name|IOException
name|HADOOP_HOME_DIR_FAILURE_CAUSE
decl_stmt|;
static|static
block|{
name|File
name|home
decl_stmt|;
name|IOException
name|ex
decl_stmt|;
try|try
block|{
name|home
operator|=
name|checkHadoopHome
argument_list|()
expr_stmt|;
name|ex
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to detect a valid hadoop home directory"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|ex
operator|=
name|ioe
expr_stmt|;
name|home
operator|=
literal|null
expr_stmt|;
block|}
name|HADOOP_HOME_FILE
operator|=
name|home
expr_stmt|;
name|HADOOP_HOME_DIR_FAILURE_CAUSE
operator|=
name|ex
expr_stmt|;
block|}
comment|/**    * Optionally extend an error message with some OS-specific text.    * @param message core error message    * @return error message, possibly with some extra text    */
DECL|method|addOsText (String message)
specifier|private
specifier|static
name|String
name|addOsText
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
name|WINDOWS
condition|?
operator|(
name|message
operator|+
literal|" -see "
operator|+
name|WINDOWS_PROBLEMS
operator|)
else|:
name|message
return|;
block|}
comment|/**    * Create a {@code FileNotFoundException} with the inner nested cause set    * to the given exception. Compensates for the fact that FNFE doesn't    * have an initializer that takes an exception.    * @param text error text    * @param ex inner exception    * @return a new exception to throw.    */
DECL|method|fileNotFoundException (String text, Exception ex)
specifier|private
specifier|static
name|FileNotFoundException
name|fileNotFoundException
parameter_list|(
name|String
name|text
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
return|return
operator|(
name|FileNotFoundException
operator|)
operator|new
name|FileNotFoundException
argument_list|(
name|text
argument_list|)
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
return|;
block|}
comment|/**    * Get the Hadoop home directory. Raises an exception if not found    * @return the home dir    * @throws IOException if the home directory cannot be located.    */
DECL|method|getHadoopHome ()
specifier|public
specifier|static
name|String
name|getHadoopHome
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHadoopHomeDir
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
comment|/**    * Get the Hadoop home directory. If it is invalid,    * throw an exception.    * @return a path referring to hadoop home.    * @throws FileNotFoundException if the directory doesn't exist.    */
DECL|method|getHadoopHomeDir ()
specifier|private
specifier|static
name|File
name|getHadoopHomeDir
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|HADOOP_HOME_DIR_FAILURE_CAUSE
operator|!=
literal|null
condition|)
block|{
throw|throw
name|fileNotFoundException
argument_list|(
name|addOsText
argument_list|(
name|HADOOP_HOME_DIR_FAILURE_CAUSE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|HADOOP_HOME_DIR_FAILURE_CAUSE
argument_list|)
throw|;
block|}
return|return
name|HADOOP_HOME_FILE
return|;
block|}
comment|/**    *  Fully qualify the path to a binary that should be in a known hadoop    *  bin location. This is primarily useful for disambiguating call-outs    *  to executable sub-components of Hadoop to avoid clashes with other    *  executables that may be in the path.  Caveat:  this call doesn't    *  just format the path to the bin directory.  It also checks for file    *  existence of the composed path. The output of this call should be    *  cached by callers.    *    * @param executable executable    * @return executable file reference    * @throws FileNotFoundException if the path does not exist    */
DECL|method|getQualifiedBin (String executable)
specifier|public
specifier|static
name|File
name|getQualifiedBin
parameter_list|(
name|String
name|executable
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|// construct hadoop bin path to the specified executable
return|return
name|getQualifiedBinInner
argument_list|(
name|getHadoopHomeDir
argument_list|()
argument_list|,
name|executable
argument_list|)
return|;
block|}
comment|/**    * Inner logic of {@link #getQualifiedBin(String)}, accessible    * for tests.    * @param hadoopHomeDir home directory (assumed to be valid)    * @param executable executable    * @return path to the binary    * @throws FileNotFoundException if the executable was not found/valid    */
DECL|method|getQualifiedBinInner (File hadoopHomeDir, String executable)
specifier|static
name|File
name|getQualifiedBinInner
parameter_list|(
name|File
name|hadoopHomeDir
parameter_list|,
name|String
name|executable
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|String
name|binDirText
init|=
literal|"Hadoop bin directory "
decl_stmt|;
name|File
name|bin
init|=
operator|new
name|File
argument_list|(
name|hadoopHomeDir
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bin
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|addOsText
argument_list|(
name|binDirText
operator|+
name|E_DOES_NOT_EXIST
operator|+
literal|": "
operator|+
name|bin
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|bin
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|addOsText
argument_list|(
name|binDirText
operator|+
name|E_NOT_DIRECTORY
operator|+
literal|": "
operator|+
name|bin
argument_list|)
argument_list|)
throw|;
block|}
name|File
name|exeFile
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|executable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exeFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|addOsText
argument_list|(
name|E_NO_EXECUTABLE
operator|+
literal|": "
operator|+
name|exeFile
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|exeFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|addOsText
argument_list|(
name|E_NOT_EXECUTABLE_FILE
operator|+
literal|": "
operator|+
name|exeFile
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|exeFile
operator|.
name|getCanonicalFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// this isn't going to happen, because of all the upfront checks.
comment|// so if it does, it gets converted to a FNFE and rethrown
throw|throw
name|fileNotFoundException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    *  Fully qualify the path to a binary that should be in a known hadoop    *  bin location. This is primarily useful for disambiguating call-outs    *  to executable sub-components of Hadoop to avoid clashes with other    *  executables that may be in the path.  Caveat:  this call doesn't    *  just format the path to the bin directory.  It also checks for file    *  existence of the composed path. The output of this call should be    *  cached by callers.    *    * @param executable executable    * @return executable file reference    * @throws FileNotFoundException if the path does not exist    * @throws IOException on path canonicalization failures    */
DECL|method|getQualifiedBinPath (String executable)
specifier|public
specifier|static
name|String
name|getQualifiedBinPath
parameter_list|(
name|String
name|executable
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getQualifiedBin
argument_list|(
name|executable
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
comment|/**    * Location of winutils as a string; null if not found.    *<p>    *<i>Important: caller must check for this value being null</i>.    * The lack of such checks has led to many support issues being raised.    *<p>    * @deprecated use one of the exception-raising getter methods,    * specifically {@link #getWinUtilsPath()} or {@link #getWinUtilsFile()}    */
annotation|@
name|Deprecated
DECL|field|WINUTILS
specifier|public
specifier|static
specifier|final
name|String
name|WINUTILS
decl_stmt|;
comment|/** Canonical path to winutils, private to Shell. */
DECL|field|WINUTILS_PATH
specifier|private
specifier|static
specifier|final
name|String
name|WINUTILS_PATH
decl_stmt|;
comment|/** file reference to winutils. */
DECL|field|WINUTILS_FILE
specifier|private
specifier|static
specifier|final
name|File
name|WINUTILS_FILE
decl_stmt|;
comment|/** the exception raised on a failure to init the WINUTILS fields. */
DECL|field|WINUTILS_FAILURE
specifier|private
specifier|static
specifier|final
name|IOException
name|WINUTILS_FAILURE
decl_stmt|;
comment|/*    * Static WINUTILS_* field initializer.    * On non-Windows systems sets the paths to null, and    * adds a specific exception to the failure cause, so    * that on any attempt to resolve the paths will raise    * a meaningful exception.    */
static|static
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
comment|// invariant: either there's a valid file and path,
comment|// or there is a cached IO exception.
if|if
condition|(
name|WINDOWS
condition|)
block|{
try|try
block|{
name|file
operator|=
name|getQualifiedBin
argument_list|(
name|WINUTILS_EXE
argument_list|)
expr_stmt|;
name|path
operator|=
name|file
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
name|ioe
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Did not find {}: {}"
argument_list|,
name|WINUTILS_EXE
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// stack trace comes at debug level
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to find "
operator|+
name|WINUTILS_EXE
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
name|path
operator|=
literal|null
expr_stmt|;
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// on a non-windows system, the invariant is kept
comment|// by adding an explicit exception.
name|ioe
operator|=
operator|new
name|FileNotFoundException
argument_list|(
name|E_NOT_A_WINDOWS_SYSTEM
argument_list|)
expr_stmt|;
block|}
name|WINUTILS_PATH
operator|=
name|path
expr_stmt|;
name|WINUTILS_FILE
operator|=
name|file
expr_stmt|;
name|WINUTILS
operator|=
name|path
expr_stmt|;
name|WINUTILS_FAILURE
operator|=
name|ioe
expr_stmt|;
block|}
comment|/**    * Predicate to indicate whether or not the path to winutils is known.    *    * If true, then {@link #WINUTILS} is non-null, and both    * {@link #getWinUtilsPath()} and {@link #getWinUtilsFile()}    * will successfully return this value. Always false on non-windows systems.    * @return true if there is a valid path to the binary    */
DECL|method|hasWinutilsPath ()
specifier|public
specifier|static
name|boolean
name|hasWinutilsPath
parameter_list|()
block|{
return|return
name|WINUTILS_PATH
operator|!=
literal|null
return|;
block|}
comment|/**    * Locate the winutils binary, or fail with a meaningful    * exception and stack trace as an RTE.    * This method is for use in methods which don't explicitly throw    * an<code>IOException</code>.    * @return the path to {@link #WINUTILS_EXE}    * @throws RuntimeException if the path is not resolvable    */
DECL|method|getWinUtilsPath ()
specifier|public
specifier|static
name|String
name|getWinUtilsPath
parameter_list|()
block|{
if|if
condition|(
name|WINUTILS_FAILURE
operator|==
literal|null
condition|)
block|{
return|return
name|WINUTILS_PATH
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|WINUTILS_FAILURE
operator|.
name|toString
argument_list|()
argument_list|,
name|WINUTILS_FAILURE
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get a file reference to winutils.    * Always raises an exception if there isn't one    * @return the file instance referring to the winutils bin.    * @throws FileNotFoundException on any failure to locate that file.    */
DECL|method|getWinUtilsFile ()
specifier|public
specifier|static
name|File
name|getWinUtilsFile
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|WINUTILS_FAILURE
operator|==
literal|null
condition|)
block|{
return|return
name|WINUTILS_FILE
return|;
block|}
else|else
block|{
comment|// raise a new exception to generate a new stack trace
throw|throw
name|fileNotFoundException
argument_list|(
name|WINUTILS_FAILURE
operator|.
name|toString
argument_list|()
argument_list|,
name|WINUTILS_FAILURE
argument_list|)
throw|;
block|}
block|}
DECL|field|isBashSupported
specifier|public
specifier|static
specifier|final
name|boolean
name|isBashSupported
init|=
name|checkIsBashSupported
argument_list|()
decl_stmt|;
DECL|method|checkIsBashSupported ()
specifier|private
specifier|static
name|boolean
name|checkIsBashSupported
parameter_list|()
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ShellCommandExecutor
name|shexec
decl_stmt|;
name|boolean
name|supported
init|=
literal|true
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"echo 1000"
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bash is not supported by the OS"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|supported
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Bash execution is not allowed by the JVM "
operator|+
literal|"security manager.Considering it not supported."
argument_list|)
expr_stmt|;
name|supported
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|supported
return|;
block|}
comment|/**    * Flag which is true if setsid exists.    */
DECL|field|isSetsidAvailable
specifier|public
specifier|static
specifier|final
name|boolean
name|isSetsidAvailable
init|=
name|isSetsidSupported
argument_list|()
decl_stmt|;
comment|/**    * Look for<code>setsid</code>.    * @return true if<code>setsid</code> was present    */
DECL|method|isSetsidSupported ()
specifier|private
specifier|static
name|boolean
name|isSetsidSupported
parameter_list|()
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
name|boolean
name|setsidSupported
init|=
literal|true
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"setsid"
block|,
literal|"bash"
block|,
literal|"-c"
block|,
literal|"echo $$"
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setsid is not available on this machine. So not using it."
argument_list|)
expr_stmt|;
name|setsidSupported
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setsid is not allowed to run by the JVM "
operator|+
literal|"security manager. So not using it."
argument_list|)
expr_stmt|;
name|setsidSupported
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|err
parameter_list|)
block|{
if|if
condition|(
name|err
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"posix_spawn is not "
operator|+
literal|"a supported process launch mechanism"
argument_list|)
operator|&&
operator|(
name|Shell
operator|.
name|FREEBSD
operator|||
name|Shell
operator|.
name|MAC
operator|)
condition|)
block|{
comment|// HADOOP-11924: This is a workaround to avoid failure of class init
comment|// by JDK issue on TR locale(JDK-8047340).
name|LOG
operator|.
name|info
argument_list|(
literal|"Avoiding JDK-8047340 on BSD-based systems."
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|setsidSupported
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// handle the exit code
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"setsid exited with exit code "
operator|+
operator|(
name|shexec
operator|!=
literal|null
condition|?
name|shexec
operator|.
name|getExitCode
argument_list|()
else|:
literal|"(null executor)"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|setsidSupported
return|;
block|}
comment|/** Token separator regex used to parse Shell tool outputs. */
DECL|field|TOKEN_SEPARATOR_REGEX
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_SEPARATOR_REGEX
init|=
name|WINDOWS
condition|?
literal|"[|\n\r]"
else|:
literal|"[ \t\n\r\f]"
decl_stmt|;
DECL|field|interval
specifier|private
name|long
name|interval
decl_stmt|;
comment|// refresh interval in msec
DECL|field|lastTime
specifier|private
name|long
name|lastTime
decl_stmt|;
comment|// last time the command was performed
DECL|field|redirectErrorStream
specifier|private
specifier|final
name|boolean
name|redirectErrorStream
decl_stmt|;
comment|// merge stdout and stderr
DECL|field|environment
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
decl_stmt|;
comment|// env for the command execution
DECL|field|dir
specifier|private
name|File
name|dir
decl_stmt|;
DECL|field|process
specifier|private
name|Process
name|process
decl_stmt|;
comment|// sub process used to execute the command
DECL|field|exitCode
specifier|private
name|int
name|exitCode
decl_stmt|;
comment|/** Flag to indicate whether or not the script has finished executing. */
DECL|field|completed
specifier|private
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**    * Create an instance with no minimum interval between runs; stderr is    * not merged with stdout.    */
DECL|method|Shell ()
specifier|protected
name|Shell
parameter_list|()
block|{
name|this
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an instance with a minimum interval between executions; stderr is    * not merged with stdout.    * @param interval interval in milliseconds between command executions.    */
DECL|method|Shell (long interval)
specifier|protected
name|Shell
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
argument_list|(
name|interval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a shell instance which can be re-executed when the {@link #run()}    * method is invoked with a given elapsed time between calls.    *    * @param interval the minimum duration in milliseconds to wait before    *        re-executing the command. If set to 0, there is no minimum.    * @param redirectErrorStream should the error stream be merged with    *        the normal output stream?    */
DECL|method|Shell (long interval, boolean redirectErrorStream)
specifier|protected
name|Shell
parameter_list|(
name|long
name|interval
parameter_list|,
name|boolean
name|redirectErrorStream
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
name|this
operator|.
name|lastTime
operator|=
operator|(
name|interval
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
operator|-
name|interval
expr_stmt|;
name|this
operator|.
name|redirectErrorStream
operator|=
name|redirectErrorStream
expr_stmt|;
block|}
comment|/**    * Set the environment for the command.    * @param env Mapping of environment variables    */
DECL|method|setEnvironment (Map<String, String> env)
specifier|protected
name|void
name|setEnvironment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|env
expr_stmt|;
block|}
comment|/**    * Set the working directory.    * @param dir The directory where the command will be executed    */
DECL|method|setWorkingDirectory (File dir)
specifier|protected
name|void
name|setWorkingDirectory
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
comment|/** Check to see if a command needs to be executed and execute if needed. */
DECL|method|run ()
specifier|protected
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastTime
operator|+
name|interval
operator|>
name|Time
operator|.
name|monotonicNow
argument_list|()
condition|)
block|{
return|return;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
comment|// reset for next run
if|if
condition|(
name|Shell
operator|.
name|MAC
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"jdk.lang.Process.launchMechanism"
argument_list|,
literal|"POSIX_SPAWN"
argument_list|)
expr_stmt|;
block|}
name|runCommand
argument_list|()
expr_stmt|;
block|}
comment|/** Run the command. */
DECL|method|runCommand ()
specifier|private
name|void
name|runCommand
parameter_list|()
throws|throws
name|IOException
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|getExecString
argument_list|()
argument_list|)
decl_stmt|;
name|Timer
name|timeOutTimer
init|=
literal|null
decl_stmt|;
name|ShellTimeoutTimerTask
name|timeoutTimerTask
init|=
literal|null
decl_stmt|;
name|timedOut
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove all env vars from the Builder to prevent leaking of env vars from
comment|// the parent process.
if|if
condition|(
operator|!
name|inheritParentEnv
condition|)
block|{
name|builder
operator|.
name|environment
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|environment
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|environment
argument_list|()
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|environment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|directory
argument_list|(
name|this
operator|.
name|dir
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|redirectErrorStream
argument_list|(
name|redirectErrorStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
synchronized|synchronized
init|(
name|WindowsProcessLaunchLock
init|)
block|{
comment|// To workaround the race condition issue with child processes
comment|// inheriting unintended handles during process launch that can
comment|// lead to hangs on reading output and error streams, we
comment|// serialize process creation. More info available at:
comment|// http://support.microsoft.com/kb/315939
name|process
operator|=
name|builder
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|process
operator|=
name|builder
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeOutInterval
operator|>
literal|0
condition|)
block|{
name|timeOutTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Shell command timeout"
argument_list|)
expr_stmt|;
name|timeoutTimerTask
operator|=
operator|new
name|ShellTimeoutTimerTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//One time scheduling.
name|timeOutTimer
operator|.
name|schedule
argument_list|(
name|timeoutTimerTask
argument_list|,
name|timeOutInterval
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BufferedReader
name|errReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|inReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|errMsg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// read error and input streams as this would free up the buffers
comment|// free the error stream buffer
name|Thread
name|errThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|line
init|=
name|errReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|isInterrupted
argument_list|()
condition|)
block|{
name|errMsg
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|errMsg
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|errReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the error stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|errThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught "
operator|+
name|oe
operator|+
literal|". One possible reason is that ulimit"
operator|+
literal|" setting of 'max user processes' is too low. If so, do"
operator|+
literal|" 'ulimit -u<largerNum>' and try again."
argument_list|)
expr_stmt|;
throw|throw
name|oe
throw|;
block|}
try|try
block|{
name|parseExecResult
argument_list|(
name|inReader
argument_list|)
expr_stmt|;
comment|// parse the output
comment|// clear the input stream buffer
name|String
name|line
init|=
name|inReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|inReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
comment|// wait for the process to finish and check the exit code
name|exitCode
operator|=
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
comment|// make sure that the error thread exits
name|joinThread
argument_list|(
name|errThread
argument_list|)
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//the timeout thread handling
comment|//taken care in finally block
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ExitCodeException
argument_list|(
name|exitCode
argument_list|,
name|errMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|InterruptedIOException
name|iie
init|=
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|iie
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|iie
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|timeOutTimer
operator|!=
literal|null
condition|)
block|{
name|timeOutTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
comment|// close the input stream
try|try
block|{
comment|// JDK 7 tries to automatically drain the input streams for us
comment|// when the process exits, but since close is not synchronized,
comment|// it creates a race if we close the stream first and the same
comment|// fd is recycled.  the stream draining thread will attempt to
comment|// drain that fd!!  it may block, OOM, or cause bizarre behavior
comment|// see: https://bugs.openjdk.java.net/browse/JDK-8024521
comment|//      issue is fixed in build 7u60
name|InputStream
name|stdout
init|=
name|process
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|stdout
init|)
block|{
name|inReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing the input stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
name|errThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|joinThread
argument_list|(
name|errThread
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|InputStream
name|stderr
init|=
name|process
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|stderr
init|)
block|{
name|errReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing the error stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|lastTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|joinThread (Thread t)
specifier|private
specifier|static
name|void
name|joinThread
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
while|while
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while joining on: "
operator|+
name|t
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// propagate interrupt
block|}
block|}
block|}
comment|/** return an array containing the command name and its parameters. */
DECL|method|getExecString ()
specifier|protected
specifier|abstract
name|String
index|[]
name|getExecString
parameter_list|()
function_decl|;
comment|/** Parse the execution result */
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
specifier|abstract
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get an environment variable.    * @param env the environment var    * @return the value or null if it was unset.    */
DECL|method|getEnvironment (String env)
specifier|public
name|String
name|getEnvironment
parameter_list|(
name|String
name|env
parameter_list|)
block|{
return|return
name|environment
operator|.
name|get
argument_list|(
name|env
argument_list|)
return|;
block|}
comment|/** get the current sub-process executing the given command.    * @return process executing the command    */
DECL|method|getProcess ()
specifier|public
name|Process
name|getProcess
parameter_list|()
block|{
return|return
name|process
return|;
block|}
comment|/** get the exit code.    * @return the exit code of the process    */
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
comment|/**    * This is an IOException with exit code added.    */
DECL|class|ExitCodeException
specifier|public
specifier|static
class|class
name|ExitCodeException
extends|extends
name|IOException
block|{
DECL|field|exitCode
specifier|private
specifier|final
name|int
name|exitCode
decl_stmt|;
DECL|method|ExitCodeException (int exitCode, String message)
specifier|public
name|ExitCodeException
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ExitCodeException "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"exitCode="
argument_list|)
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|super
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|interface|CommandExecutor
specifier|public
interface|interface
name|CommandExecutor
block|{
DECL|method|execute ()
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getExitCode ()
name|int
name|getExitCode
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getOutput ()
name|String
name|getOutput
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|close ()
name|void
name|close
parameter_list|()
function_decl|;
block|}
comment|/**    * A simple shell command executor.    *    *<code>ShellCommandExecutor</code>should be used in cases where the output    * of the command needs no explicit parsing and where the command, working    * directory and the environment remains unchanged. The output of the command    * is stored as-is and is expected to be small.    */
DECL|class|ShellCommandExecutor
specifier|public
specifier|static
class|class
name|ShellCommandExecutor
extends|extends
name|Shell
implements|implements
name|CommandExecutor
block|{
DECL|field|command
specifier|private
name|String
index|[]
name|command
decl_stmt|;
DECL|field|output
specifier|private
name|StringBuffer
name|output
decl_stmt|;
DECL|method|ShellCommandExecutor (String[] execString)
specifier|public
name|ShellCommandExecutor
parameter_list|(
name|String
index|[]
name|execString
parameter_list|)
block|{
name|this
argument_list|(
name|execString
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ShellCommandExecutor (String[] execString, File dir)
specifier|public
name|ShellCommandExecutor
parameter_list|(
name|String
index|[]
name|execString
parameter_list|,
name|File
name|dir
parameter_list|)
block|{
name|this
argument_list|(
name|execString
argument_list|,
name|dir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ShellCommandExecutor (String[] execString, File dir, Map<String, String> env)
specifier|public
name|ShellCommandExecutor
parameter_list|(
name|String
index|[]
name|execString
parameter_list|,
name|File
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
name|this
argument_list|(
name|execString
argument_list|,
name|dir
argument_list|,
name|env
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|ShellCommandExecutor (String[] execString, File dir, Map<String, String> env, long timeout)
specifier|public
name|ShellCommandExecutor
parameter_list|(
name|String
index|[]
name|execString
parameter_list|,
name|File
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|this
argument_list|(
name|execString
argument_list|,
name|dir
argument_list|,
name|env
argument_list|,
name|timeout
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new instance of the ShellCommandExecutor to execute a command.      *      * @param execString The command to execute with arguments      * @param dir If not-null, specifies the directory which should be set      *            as the current working directory for the command.      *            If null, the current working directory is not modified.      * @param env If not-null, environment of the command will include the      *            key-value pairs specified in the map. If null, the current      *            environment is not modified.      * @param timeout Specifies the time in milliseconds, after which the      *                command will be killed and the status marked as timed-out.      *                If 0, the command will not be timed out.      * @param inheritParentEnv Indicates if the process should inherit the env      *                         vars from the parent process or not.      */
DECL|method|ShellCommandExecutor (String[] execString, File dir, Map<String, String> env, long timeout, boolean inheritParentEnv)
specifier|public
name|ShellCommandExecutor
parameter_list|(
name|String
index|[]
name|execString
parameter_list|,
name|File
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|inheritParentEnv
parameter_list|)
block|{
name|command
operator|=
name|execString
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|setWorkingDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|!=
literal|null
condition|)
block|{
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
name|timeOutInterval
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|inheritParentEnv
operator|=
name|inheritParentEnv
expr_stmt|;
block|}
comment|/**      * Execute the shell command.      * @throws IOException if the command fails, or if the command is      * not well constructed.      */
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|s
range|:
name|command
control|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"(null) entry in command string: "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|command
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|public
name|String
index|[]
name|getExecString
parameter_list|()
block|{
return|return
name|command
return|;
block|}
annotation|@
name|Override
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
name|int
name|nRead
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|lines
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get the output of the shell command. */
DECL|method|getOutput ()
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
operator|(
name|output
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the commands of this instance.      * Arguments with spaces in are presented with quotes round; other      * arguments are presented raw      *      * @return a string representation of the object.      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
name|getExecString
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
comment|/**    * To check if the passed script to shell command executor timed out or    * not.    *    * @return if the script timed out.    */
DECL|method|isTimedOut ()
specifier|public
name|boolean
name|isTimedOut
parameter_list|()
block|{
return|return
name|timedOut
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Declare that the command has timed out.    *    */
DECL|method|setTimedOut ()
specifier|private
name|void
name|setTimedOut
parameter_list|()
block|{
name|this
operator|.
name|timedOut
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Static method to execute a shell command.    * Covers most of the simple cases without requiring the user to implement    * the<code>Shell</code> interface.    * @param cmd shell command to execute.    * @return the output of the executed command.    */
DECL|method|execCommand (String .... cmd)
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execCommand
argument_list|(
literal|null
argument_list|,
name|cmd
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**    * Static method to execute a shell command.    * Covers most of the simple cases without requiring the user to implement    * the<code>Shell</code> interface.    * @param env the map of environment key=value    * @param cmd shell command to execute.    * @param timeout time in milliseconds after which script should be marked timeout    * @return the output of the executed command.    * @throws IOException on any problem.    */
DECL|method|execCommand (Map<String, String> env, String[] cmd, long timeout)
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
index|[]
name|cmd
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|ShellCommandExecutor
name|exec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|cmd
argument_list|,
literal|null
argument_list|,
name|env
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|exec
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|exec
operator|.
name|getOutput
argument_list|()
return|;
block|}
comment|/**    * Static method to execute a shell command.    * Covers most of the simple cases without requiring the user to implement    * the<code>Shell</code> interface.    * @param env the map of environment key=value    * @param cmd shell command to execute.    * @return the output of the executed command.    * @throws IOException on any problem.    */
DECL|method|execCommand (Map<String,String> env, String ... cmd)
specifier|public
specifier|static
name|String
name|execCommand
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|execCommand
argument_list|(
name|env
argument_list|,
name|cmd
argument_list|,
literal|0L
argument_list|)
return|;
block|}
comment|/**    * Timer which is used to timeout scripts spawned off by shell.    */
DECL|class|ShellTimeoutTimerTask
specifier|private
specifier|static
class|class
name|ShellTimeoutTimerTask
extends|extends
name|TimerTask
block|{
DECL|field|shell
specifier|private
specifier|final
name|Shell
name|shell
decl_stmt|;
DECL|method|ShellTimeoutTimerTask (Shell shell)
specifier|public
name|ShellTimeoutTimerTask
parameter_list|(
name|Shell
name|shell
parameter_list|)
block|{
name|this
operator|.
name|shell
operator|=
name|shell
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Process
name|p
init|=
name|shell
operator|.
name|getProcess
argument_list|()
decl_stmt|;
try|try
block|{
name|p
operator|.
name|exitValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Process has not terminated.
comment|//So check if it has completed
comment|//if not just destroy it.
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|shell
operator|.
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
name|shell
operator|.
name|setTimedOut
argument_list|()
expr_stmt|;
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

