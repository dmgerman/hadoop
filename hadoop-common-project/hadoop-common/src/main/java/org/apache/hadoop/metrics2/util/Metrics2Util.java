begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Utility class to simplify creation of hadoop metrics2 source/sink.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Metrics2Util
specifier|public
class|class
name|Metrics2Util
block|{
comment|/**    * A pair of a name and its corresponding value. Defines a custom    * comparator so the TopN PriorityQueue sorts based on the count.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NameValuePair
specifier|public
specifier|static
class|class
name|NameValuePair
implements|implements
name|Comparable
argument_list|<
name|NameValuePair
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
decl_stmt|;
DECL|method|NameValuePair (String metricName, long value)
specifier|public
name|NameValuePair
parameter_list|(
name|String
name|metricName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|metricName
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getValue ()
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (NameValuePair other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|NameValuePair
name|other
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|value
operator|-
name|other
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|NameValuePair
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|NameValuePair
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * A fixed-size priority queue, used to retrieve top-n of offered entries.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TopN
specifier|public
specifier|static
class|class
name|TopN
extends|extends
name|PriorityQueue
argument_list|<
name|NameValuePair
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5134028249611535803L
decl_stmt|;
DECL|field|n
specifier|private
name|int
name|n
decl_stmt|;
comment|//> 0
DECL|field|total
specifier|private
name|long
name|total
init|=
literal|0
decl_stmt|;
DECL|method|TopN (int n)
specifier|public
name|TopN
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|offer (NameValuePair entry)
specifier|public
name|boolean
name|offer
parameter_list|(
name|NameValuePair
name|entry
parameter_list|)
block|{
name|updateTotal
argument_list|(
name|entry
operator|.
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|==
name|n
condition|)
block|{
name|NameValuePair
name|smallest
init|=
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|smallest
operator|.
name|value
operator|>=
name|entry
operator|.
name|value
condition|)
block|{
return|return
literal|false
return|;
block|}
name|poll
argument_list|()
expr_stmt|;
comment|// remove smallest
block|}
return|return
name|super
operator|.
name|offer
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|updateTotal (long value)
specifier|private
name|void
name|updateTotal
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|total
operator|+=
name|value
expr_stmt|;
block|}
DECL|method|getTotal ()
specifier|public
name|long
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
block|}
block|}
end_class

end_unit

