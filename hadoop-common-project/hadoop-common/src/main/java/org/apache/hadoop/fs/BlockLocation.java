begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/*  * A BlockLocation lists hosts, offset and length  * of block.   *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|BlockLocation
specifier|public
class|class
name|BlockLocation
implements|implements
name|Writable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|BlockLocation
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|BlockLocation
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|hosts
specifier|private
name|String
index|[]
name|hosts
decl_stmt|;
comment|//hostnames of datanodes
DECL|field|names
specifier|private
name|String
index|[]
name|names
decl_stmt|;
comment|//hostname:portNumber of datanodes
DECL|field|topologyPaths
specifier|private
name|String
index|[]
name|topologyPaths
decl_stmt|;
comment|// full path name in network topology
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
comment|//offset of the of the block in the file
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|corrupt
specifier|private
name|boolean
name|corrupt
decl_stmt|;
comment|/**    * Default Constructor    */
DECL|method|BlockLocation ()
specifier|public
name|BlockLocation
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor with host, name, offset and length    */
DECL|method|BlockLocation (String[] names, String[] hosts, long offset, long length)
specifier|public
name|BlockLocation
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor with host, name, offset, length and corrupt flag    */
DECL|method|BlockLocation (String[] names, String[] hosts, long offset, long length, boolean corrupt)
specifier|public
name|BlockLocation
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|corrupt
parameter_list|)
block|{
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|names
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
block|}
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hosts
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|topologyPaths
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|corrupt
operator|=
name|corrupt
expr_stmt|;
block|}
comment|/**    * Constructor with host, name, network topology, offset and length    */
DECL|method|BlockLocation (String[] names, String[] hosts, String[] topologyPaths, long offset, long length)
specifier|public
name|BlockLocation
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|topologyPaths
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|topologyPaths
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor with host, name, network topology, offset, length     * and corrupt flag    */
DECL|method|BlockLocation (String[] names, String[] hosts, String[] topologyPaths, long offset, long length, boolean corrupt)
specifier|public
name|BlockLocation
parameter_list|(
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|topologyPaths
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|corrupt
parameter_list|)
block|{
name|this
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|corrupt
argument_list|)
expr_stmt|;
if|if
condition|(
name|topologyPaths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|topologyPaths
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|topologyPaths
operator|=
name|topologyPaths
expr_stmt|;
block|}
block|}
comment|/**    * Get the list of hosts (hostname) hosting this block    */
DECL|method|getHosts ()
specifier|public
name|String
index|[]
name|getHosts
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|hosts
operator|==
literal|null
operator|)
operator|||
operator|(
name|hosts
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|hosts
return|;
block|}
block|}
comment|/**    * Get the list of names (hostname:port) hosting this block    */
DECL|method|getNames ()
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|names
operator|==
literal|null
operator|)
operator|||
operator|(
name|names
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|names
return|;
block|}
block|}
comment|/**    * Get the list of network topology paths for each of the hosts.    * The last component of the path is the host.    */
DECL|method|getTopologyPaths ()
specifier|public
name|String
index|[]
name|getTopologyPaths
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|topologyPaths
operator|==
literal|null
operator|)
operator|||
operator|(
name|topologyPaths
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|topologyPaths
return|;
block|}
block|}
comment|/**    * Get the start offset of file associated with this block    */
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * Get the length of the block    */
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * Get the corrupt flag.    */
DECL|method|isCorrupt ()
specifier|public
name|boolean
name|isCorrupt
parameter_list|()
block|{
return|return
name|corrupt
return|;
block|}
comment|/**    * Set the start offset of file associated with this block    */
DECL|method|setOffset (long offset)
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
comment|/**    * Set the length of block    */
DECL|method|setLength (long length)
specifier|public
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/**    * Set the corrupt flag.    */
DECL|method|setCorrupt (boolean corrupt)
specifier|public
name|void
name|setCorrupt
parameter_list|(
name|boolean
name|corrupt
parameter_list|)
block|{
name|this
operator|.
name|corrupt
operator|=
name|corrupt
expr_stmt|;
block|}
comment|/**    * Set the hosts hosting this block    */
DECL|method|setHosts (String[] hosts)
specifier|public
name|void
name|setHosts
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hosts
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
block|}
comment|/**    * Set the names (host:port) hosting this block    */
DECL|method|setNames (String[] names)
specifier|public
name|void
name|setNames
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|names
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
block|}
block|}
comment|/**    * Set the network topology paths of the hosts    */
DECL|method|setTopologyPaths (String[] topologyPaths)
specifier|public
name|void
name|setTopologyPaths
parameter_list|(
name|String
index|[]
name|topologyPaths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|topologyPaths
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|topologyPaths
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|topologyPaths
operator|=
name|topologyPaths
expr_stmt|;
block|}
block|}
comment|/**    * Implement write of Writable    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|corrupt
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|name
init|=
operator|new
name|Text
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|name
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|hosts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|host
init|=
operator|new
name|Text
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|host
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|topologyPaths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topologyPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|host
init|=
operator|new
name|Text
argument_list|(
name|topologyPaths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|host
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implement readFields of Writable    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|corrupt
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|int
name|numNames
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|names
operator|=
operator|new
name|String
index|[
name|numNames
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNames
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|name
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|name
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|names
index|[
name|i
index|]
operator|=
name|name
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|int
name|numHosts
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|hosts
operator|=
operator|new
name|String
index|[
name|numHosts
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHosts
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|host
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|host
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|hosts
index|[
name|i
index|]
operator|=
name|host
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|int
name|numTops
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|topologyPaths
operator|=
operator|new
name|String
index|[
name|numTops
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTops
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|path
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|path
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|topologyPaths
index|[
name|i
index|]
operator|=
name|path
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|corrupt
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"(corrupt)"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|h
range|:
name|hosts
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

