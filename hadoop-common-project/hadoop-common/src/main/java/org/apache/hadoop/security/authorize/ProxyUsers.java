begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"HBase"
block|,
literal|"Hive"
block|}
argument_list|)
DECL|class|ProxyUsers
specifier|public
class|class
name|ProxyUsers
block|{
DECL|field|CONF_HADOOP_PROXYUSER
specifier|public
specifier|static
specifier|final
name|String
name|CONF_HADOOP_PROXYUSER
init|=
literal|"hadoop.proxyuser"
decl_stmt|;
DECL|field|sip
specifier|private
specifier|static
specifier|volatile
name|ImpersonationProvider
name|sip
decl_stmt|;
comment|/**    * Returns an instance of ImpersonationProvider.    * Looks up the configuration to see if there is custom class specified.    * @param conf    * @return ImpersonationProvider    */
DECL|method|getInstance (Configuration conf)
specifier|private
specifier|static
name|ImpersonationProvider
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ImpersonationProvider
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_IMPERSONATION_PROVIDER_CLASS
argument_list|,
name|DefaultImpersonationProvider
operator|.
name|class
argument_list|,
name|ImpersonationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * refresh Impersonation rules    */
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
specifier|static
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|()
block|{
comment|//load server side configuration;
name|refreshSuperUserGroupsConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Refreshes configuration using the specified Proxy user prefix for    * properties.    *    * @param conf configuration    * @param proxyUserPrefix proxy user configuration prefix    */
DECL|method|refreshSuperUserGroupsConfiguration (Configuration conf, String proxyUserPrefix)
specifier|public
specifier|static
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|proxyUserPrefix
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|proxyUserPrefix
operator|!=
literal|null
operator|&&
operator|!
name|proxyUserPrefix
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"prefix cannot be NULL or empty"
argument_list|)
expr_stmt|;
comment|// sip is volatile. Any assignment to it as well as the object's state
comment|// will be visible to all the other threads.
name|ImpersonationProvider
name|ip
init|=
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ip
operator|.
name|init
argument_list|(
name|proxyUserPrefix
argument_list|)
expr_stmt|;
name|sip
operator|=
name|ip
expr_stmt|;
name|ProxyServers
operator|.
name|refresh
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Refreshes configuration using the default Proxy user prefix for properties.    * @param conf configuration    */
DECL|method|refreshSuperUserGroupsConfiguration (Configuration conf)
specifier|public
specifier|static
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|,
name|CONF_HADOOP_PROXYUSER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Authorize the superuser which is doing doAs    *     * @param user ugi of the effective or proxy user which contains a real user    * @param remoteAddress the ip address of client    * @throws AuthorizationException    */
DECL|method|authorize (UserGroupInformation user, String remoteAddress)
specifier|public
specifier|static
name|void
name|authorize
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|String
name|remoteAddress
parameter_list|)
throws|throws
name|AuthorizationException
block|{
if|if
condition|(
name|sip
operator|==
literal|null
condition|)
block|{
comment|// In a race situation, It is possible for multiple threads to satisfy this condition.
comment|// The last assignment will prevail.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
name|sip
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function is kept to provide backward compatibility.    * @param user    * @param remoteAddress    * @param conf    * @throws AuthorizationException    * @deprecated use {@link #authorize(UserGroupInformation, String)} instead.    */
annotation|@
name|Deprecated
DECL|method|authorize (UserGroupInformation user, String remoteAddress, Configuration conf)
specifier|public
specifier|static
name|void
name|authorize
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|String
name|remoteAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|AuthorizationException
block|{
name|authorize
argument_list|(
name|user
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDefaultImpersonationProvider ()
specifier|public
specifier|static
name|DefaultImpersonationProvider
name|getDefaultImpersonationProvider
parameter_list|()
block|{
return|return
operator|(
operator|(
name|DefaultImpersonationProvider
operator|)
name|sip
operator|)
return|;
block|}
block|}
end_class

end_unit

