begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CodecPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Compression related stuff.  */
end_comment

begin_class
DECL|class|Compression
specifier|final
class|class
name|Compression
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Compression
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Prevent the instantiation of class.    */
DECL|method|Compression ()
specifier|private
name|Compression
parameter_list|()
block|{
comment|// nothing
block|}
DECL|class|FinishOnFlushCompressionStream
specifier|static
class|class
name|FinishOnFlushCompressionStream
extends|extends
name|FilterOutputStream
block|{
DECL|method|FinishOnFlushCompressionStream (CompressionOutputStream cout)
specifier|public
name|FinishOnFlushCompressionStream
parameter_list|(
name|CompressionOutputStream
name|cout
parameter_list|)
block|{
name|super
argument_list|(
name|cout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|CompressionOutputStream
name|cout
init|=
operator|(
name|CompressionOutputStream
operator|)
name|out
decl_stmt|;
name|cout
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|cout
operator|.
name|resetState
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Compression algorithms.    */
DECL|enum|Algorithm
specifier|static
enum|enum
name|Algorithm
block|{
DECL|enumConstant|LZO
DECL|method|LZO (TFile.COMPRESSION_LZO)
name|LZO
parameter_list|(
name|TFile
operator|.
name|COMPRESSION_LZO
parameter_list|)
block|{
specifier|private
specifier|transient
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|defaultClazz
init|=
literal|"org.apache.hadoop.io.compress.LzoCodec"
decl_stmt|;
specifier|private
specifier|transient
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isSupported
parameter_list|()
block|{
if|if
condition|(
operator|!
name|checked
condition|)
block|{
name|checked
operator|=
literal|true
expr_stmt|;
name|String
name|extClazzConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_LZO_CLASS
argument_list|)
decl_stmt|;
name|String
name|extClazz
init|=
operator|(
name|extClazzConf
operator|!=
literal|null
operator|)
condition|?
name|extClazzConf
else|:
name|System
operator|.
name|getProperty
argument_list|(
name|CONF_LZO_CLASS
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
operator|(
name|extClazz
operator|!=
literal|null
operator|)
condition|?
name|extClazz
else|:
name|defaultClazz
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to load Lzo codec class: "
operator|+
name|clazz
argument_list|)
expr_stmt|;
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// that is okay
block|}
block|}
return|return
name|codec
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
name|CompressionCodec
name|getCodec
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LZO codec class not specified. Did you forget to set property "
operator|+
name|CONF_LZO_CLASS
operator|+
literal|"?"
argument_list|)
throw|;
block|}
return|return
name|codec
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|InputStream
name|createDecompressionStream
parameter_list|(
name|InputStream
name|downStream
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LZO codec class not specified. Did you forget to set property "
operator|+
name|CONF_LZO_CLASS
operator|+
literal|"?"
argument_list|)
throw|;
block|}
name|InputStream
name|bis1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
name|bis1
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|downStream
argument_list|,
name|downStreamBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bis1
operator|=
name|downStream
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.compression.codec.lzo.buffersize"
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|cis
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|bis1
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis2
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|cis
argument_list|,
name|DATA_IBUF_SIZE
argument_list|)
decl_stmt|;
return|return
name|bis2
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|OutputStream
name|createCompressionStream
parameter_list|(
name|OutputStream
name|downStream
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LZO codec class not specified. Did you forget to set property "
operator|+
name|CONF_LZO_CLASS
operator|+
literal|"?"
argument_list|)
throw|;
block|}
name|OutputStream
name|bos1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
name|bos1
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|downStream
argument_list|,
name|downStreamBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos1
operator|=
name|downStream
expr_stmt|;
block|}
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.compression.codec.lzo.buffersize"
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|CompressionOutputStream
name|cos
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|bos1
argument_list|,
name|compressor
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos2
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FinishOnFlushCompressionStream
argument_list|(
name|cos
argument_list|)
argument_list|,
name|DATA_OBUF_SIZE
argument_list|)
decl_stmt|;
return|return
name|bos2
return|;
block|}
block|}
block|,
DECL|enumConstant|GZ
DECL|method|GZ (TFile.COMPRESSION_GZ)
name|GZ
parameter_list|(
name|TFile
operator|.
name|COMPRESSION_GZ
parameter_list|)
block|{
specifier|private
specifier|transient
name|DefaultCodec
name|codec
decl_stmt|;
annotation|@
name|Override
name|CompressionCodec
name|getCodec
parameter_list|()
block|{
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|codec
operator|=
operator|new
name|DefaultCodec
argument_list|()
expr_stmt|;
name|codec
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|codec
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|InputStream
name|createDecompressionStream
parameter_list|(
name|InputStream
name|downStream
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set the internal buffer size to read from down stream.
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
name|codec
operator|.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|downStreamBufferSize
argument_list|)
expr_stmt|;
block|}
name|CompressionInputStream
name|cis
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|downStream
argument_list|,
name|decompressor
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bis2
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|cis
argument_list|,
name|DATA_IBUF_SIZE
argument_list|)
decl_stmt|;
return|return
name|bis2
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|OutputStream
name|createCompressionStream
parameter_list|(
name|OutputStream
name|downStream
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|bos1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
name|bos1
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|downStream
argument_list|,
name|downStreamBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos1
operator|=
name|downStream
expr_stmt|;
block|}
name|codec
operator|.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|32
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|CompressionOutputStream
name|cos
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|bos1
argument_list|,
name|compressor
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos2
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FinishOnFlushCompressionStream
argument_list|(
name|cos
argument_list|)
argument_list|,
name|DATA_OBUF_SIZE
argument_list|)
decl_stmt|;
return|return
name|bos2
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|,
DECL|enumConstant|NONE
DECL|method|NONE (TFile.COMPRESSION_NONE)
name|NONE
parameter_list|(
name|TFile
operator|.
name|COMPRESSION_NONE
parameter_list|)
block|{
annotation|@
name|Override
name|CompressionCodec
name|getCodec
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|InputStream
name|createDecompressionStream
parameter_list|(
name|InputStream
name|downStream
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|BufferedInputStream
argument_list|(
name|downStream
argument_list|,
name|downStreamBufferSize
argument_list|)
return|;
block|}
return|return
name|downStream
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|OutputStream
name|createCompressionStream
parameter_list|(
name|OutputStream
name|downStream
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|downStreamBufferSize
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|BufferedOutputStream
argument_list|(
name|downStream
argument_list|,
name|downStreamBufferSize
argument_list|)
return|;
block|}
return|return
name|downStream
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|;
comment|// We require that all compression related settings are configured
comment|// statically in the Configuration object.
DECL|field|conf
specifier|protected
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|compressName
specifier|private
specifier|final
name|String
name|compressName
decl_stmt|;
comment|// data input buffer size to absorb small reads from application.
DECL|field|DATA_IBUF_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DATA_IBUF_SIZE
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
comment|// data output buffer size to absorb small writes from application.
DECL|field|DATA_OBUF_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DATA_OBUF_SIZE
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
DECL|field|CONF_LZO_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|CONF_LZO_CLASS
init|=
literal|"io.compression.codec.lzo.class"
decl_stmt|;
DECL|method|Algorithm (String name)
name|Algorithm
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|compressName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getCodec ()
specifier|abstract
name|CompressionCodec
name|getCodec
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|createDecompressionStream ( InputStream downStream, Decompressor decompressor, int downStreamBufferSize)
specifier|public
specifier|abstract
name|InputStream
name|createDecompressionStream
parameter_list|(
name|InputStream
name|downStream
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createCompressionStream ( OutputStream downStream, Compressor compressor, int downStreamBufferSize)
specifier|public
specifier|abstract
name|OutputStream
name|createCompressionStream
parameter_list|(
name|OutputStream
name|downStream
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|int
name|downStreamBufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isSupported ()
specifier|public
specifier|abstract
name|boolean
name|isSupported
parameter_list|()
function_decl|;
DECL|method|getCompressor ()
specifier|public
name|Compressor
name|getCompressor
parameter_list|()
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|Compressor
name|compressor
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
comment|// Somebody returns the compressor to CodecPool but is still using
comment|// it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Compressor obtained from CodecPool already finished()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got a compressor: "
operator|+
name|compressor
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**            * Following statement is necessary to get around bugs in 0.18 where a            * compressor is referenced after returned back to the codec pool.            */
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|compressor
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|returnCompressor (Compressor compressor)
specifier|public
name|void
name|returnCompressor
parameter_list|(
name|Compressor
name|compressor
parameter_list|)
block|{
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Return a compressor: "
operator|+
name|compressor
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDecompressor ()
specifier|public
name|Decompressor
name|getDecompressor
parameter_list|()
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
name|getCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|Decompressor
name|decompressor
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
if|if
condition|(
name|decompressor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|decompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
comment|// Somebody returns the decompressor to CodecPool but is still using
comment|// it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deompressor obtained from CodecPool already finished()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got a decompressor: "
operator|+
name|decompressor
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**            * Following statement is necessary to get around bugs in 0.18 where a            * decompressor is referenced after returned back to the codec pool.            */
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|decompressor
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|returnDecompressor (Decompressor decompressor)
specifier|public
name|void
name|returnDecompressor
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|)
block|{
if|if
condition|(
name|decompressor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returned a decompressor: "
operator|+
name|decompressor
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|decompressor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|compressName
return|;
block|}
block|}
DECL|method|getCompressionAlgorithmByName (String compressName)
specifier|static
name|Algorithm
name|getCompressionAlgorithmByName
parameter_list|(
name|String
name|compressName
parameter_list|)
block|{
name|Algorithm
index|[]
name|algos
init|=
name|Algorithm
operator|.
name|class
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
for|for
control|(
name|Algorithm
name|a
range|:
name|algos
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|compressName
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported compression algorithm name: "
operator|+
name|compressName
argument_list|)
throw|;
block|}
DECL|method|getSupportedAlgorithms ()
specifier|static
name|String
index|[]
name|getSupportedAlgorithms
parameter_list|()
block|{
name|Algorithm
index|[]
name|algos
init|=
name|Algorithm
operator|.
name|class
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Algorithm
name|a
range|:
name|algos
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isSupported
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

