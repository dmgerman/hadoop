begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A utility class that maintains encoding state during an encode call using  * byte array inputs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ByteArrayEncodingState
class|class
name|ByteArrayEncodingState
extends|extends
name|EncodingState
block|{
DECL|field|inputs
name|byte
index|[]
index|[]
name|inputs
decl_stmt|;
DECL|field|outputs
name|byte
index|[]
index|[]
name|outputs
decl_stmt|;
DECL|field|inputOffsets
name|int
index|[]
name|inputOffsets
decl_stmt|;
DECL|field|outputOffsets
name|int
index|[]
name|outputOffsets
decl_stmt|;
DECL|method|ByteArrayEncodingState (RawErasureEncoder encoder, byte[][] inputs, byte[][] outputs)
name|ByteArrayEncodingState
parameter_list|(
name|RawErasureEncoder
name|encoder
parameter_list|,
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|byte
index|[]
name|validInput
init|=
name|CoderUtil
operator|.
name|findFirstValidInput
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|this
operator|.
name|encodeLength
operator|=
name|validInput
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
name|checkParameters
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|checkBuffers
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
name|checkBuffers
argument_list|(
name|outputs
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputOffsets
operator|=
operator|new
name|int
index|[
name|inputs
operator|.
name|length
index|]
expr_stmt|;
comment|// ALL ZERO
name|this
operator|.
name|outputOffsets
operator|=
operator|new
name|int
index|[
name|outputs
operator|.
name|length
index|]
expr_stmt|;
comment|// ALL ZERO
block|}
DECL|method|ByteArrayEncodingState (RawErasureEncoder encoder, int encodeLength, byte[][] inputs, int[] inputOffsets, byte[][] outputs, int[] outputOffsets)
name|ByteArrayEncodingState
parameter_list|(
name|RawErasureEncoder
name|encoder
parameter_list|,
name|int
name|encodeLength
parameter_list|,
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|inputOffsets
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|,
name|int
index|[]
name|outputOffsets
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|this
operator|.
name|encodeLength
operator|=
name|encodeLength
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
name|this
operator|.
name|inputOffsets
operator|=
name|inputOffsets
expr_stmt|;
name|this
operator|.
name|outputOffsets
operator|=
name|outputOffsets
expr_stmt|;
block|}
comment|/**    * Convert to a ByteBufferEncodingState when it's backed by on-heap arrays.    */
DECL|method|convertToByteBufferState ()
name|ByteBufferEncodingState
name|convertToByteBufferState
parameter_list|()
block|{
name|ByteBuffer
index|[]
name|newInputs
init|=
operator|new
name|ByteBuffer
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
name|ByteBuffer
index|[]
name|newOutputs
init|=
operator|new
name|ByteBuffer
index|[
name|outputs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newInputs
index|[
name|i
index|]
operator|=
name|CoderUtil
operator|.
name|cloneAsDirectByteBuffer
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|inputOffsets
index|[
name|i
index|]
argument_list|,
name|encodeLength
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newOutputs
index|[
name|i
index|]
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|encodeLength
argument_list|)
expr_stmt|;
block|}
name|ByteBufferEncodingState
name|bbeState
init|=
operator|new
name|ByteBufferEncodingState
argument_list|(
name|encoder
argument_list|,
name|encodeLength
argument_list|,
name|newInputs
argument_list|,
name|newOutputs
argument_list|)
decl_stmt|;
return|return
name|bbeState
return|;
block|}
comment|/**    * Check and ensure the buffers are of the desired length.    * @param buffers the buffers to check    */
DECL|method|checkBuffers (byte[][] buffers)
name|void
name|checkBuffers
parameter_list|(
name|byte
index|[]
index|[]
name|buffers
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|buffer
range|:
name|buffers
control|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid buffer found, not allowing null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
operator|!=
name|encodeLength
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid buffer not of length "
operator|+
name|encodeLength
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

