begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
operator|.
name|RpcStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
DECL|class|ExternalCall
specifier|public
specifier|abstract
class|class
name|ExternalCall
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Call
block|{
DECL|field|action
specifier|private
specifier|final
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
decl_stmt|;
DECL|field|done
specifier|private
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|result
specifier|private
name|T
name|result
decl_stmt|;
DECL|field|error
specifier|private
name|Throwable
name|error
decl_stmt|;
DECL|method|ExternalCall (PrivilegedExceptionAction<T> action)
specifier|public
name|ExternalCall
parameter_list|(
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDetailedMetricsName ()
specifier|public
name|String
name|getDetailedMetricsName
parameter_list|()
block|{
return|return
literal|"(external)"
return|;
block|}
DECL|method|getRemoteUser ()
specifier|public
specifier|abstract
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
function_decl|;
DECL|method|get ()
specifier|public
specifier|final
name|T
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|waitForCompletion
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|error
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|// wait for response to be triggered to support postponed calls
DECL|method|waitForCompletion ()
specifier|private
name|void
name|waitForCompletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|done
init|)
block|{
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|done
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
name|ie
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|isDone ()
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|done
operator|.
name|get
argument_list|()
return|;
block|}
comment|// invoked by ipc handler
annotation|@
name|Override
DECL|method|run ()
specifier|public
specifier|final
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|result
operator|=
name|action
operator|.
name|run
argument_list|()
expr_stmt|;
name|sendResponse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|abortResponse
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doResponse (Throwable t, RpcStatusProto status)
specifier|final
name|void
name|doResponse
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|RpcStatusProto
name|status
parameter_list|)
block|{
synchronized|synchronized
init|(
name|done
init|)
block|{
name|error
operator|=
name|t
expr_stmt|;
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|done
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

