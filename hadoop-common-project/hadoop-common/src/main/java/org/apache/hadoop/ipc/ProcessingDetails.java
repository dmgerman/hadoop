begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Stores the times that a call takes to be processed through each step.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ProcessingDetails
specifier|public
class|class
name|ProcessingDetails
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProcessingDetails
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|valueTimeUnit
specifier|private
specifier|final
name|TimeUnit
name|valueTimeUnit
decl_stmt|;
comment|/**    * The different stages to track the time of.    */
DECL|enum|Timing
specifier|public
enum|enum
name|Timing
block|{
DECL|enumConstant|ENQUEUE
name|ENQUEUE
block|,
comment|// time for reader to insert in call queue.
DECL|enumConstant|QUEUE
name|QUEUE
block|,
comment|// time in the call queue.
DECL|enumConstant|HANDLER
name|HANDLER
block|,
comment|// handler overhead not spent in processing/response.
DECL|enumConstant|PROCESSING
name|PROCESSING
block|,
comment|// time handler spent processing the call. always equal to
comment|// lock_free + lock_wait + lock_shared + lock_exclusive
DECL|enumConstant|LOCKFREE
name|LOCKFREE
block|,
comment|// processing with no lock.
DECL|enumConstant|LOCKWAIT
name|LOCKWAIT
block|,
comment|// processing while waiting for lock.
DECL|enumConstant|LOCKSHARED
name|LOCKSHARED
block|,
comment|// processing with a read lock.
DECL|enumConstant|LOCKEXCLUSIVE
name|LOCKEXCLUSIVE
block|,
comment|// processing with a write lock.
DECL|enumConstant|RESPONSE
name|RESPONSE
block|;
comment|// time to encode and send response.
block|}
DECL|field|timings
specifier|private
name|long
index|[]
name|timings
init|=
operator|new
name|long
index|[
name|Timing
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
DECL|method|ProcessingDetails (TimeUnit timeUnit)
name|ProcessingDetails
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|valueTimeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
DECL|method|get (Timing type)
specifier|public
name|long
name|get
parameter_list|(
name|Timing
name|type
parameter_list|)
block|{
comment|// When using nanoTime to fetch timing information, it is possible to see
comment|// time "move backward" slightly under unusual/rare circumstances. To avoid
comment|// displaying a confusing number, round such timings to 0 here.
name|long
name|ret
init|=
name|timings
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
decl_stmt|;
return|return
name|ret
operator|<
literal|0
condition|?
literal|0
else|:
name|ret
return|;
block|}
DECL|method|get (Timing type, TimeUnit timeUnit)
specifier|public
name|long
name|get
parameter_list|(
name|Timing
name|type
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
name|timeUnit
operator|.
name|convert
argument_list|(
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|valueTimeUnit
argument_list|)
return|;
block|}
DECL|method|set (Timing type, long value)
specifier|public
name|void
name|set
parameter_list|(
name|Timing
name|type
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|timings
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|value
expr_stmt|;
block|}
DECL|method|set (Timing type, long value, TimeUnit timeUnit)
specifier|public
name|void
name|set
parameter_list|(
name|Timing
name|type
parameter_list|,
name|long
name|value
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|set
argument_list|(
name|type
argument_list|,
name|valueTimeUnit
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|add (Timing type, long value, TimeUnit timeUnit)
specifier|public
name|void
name|add
parameter_list|(
name|Timing
name|type
parameter_list|,
name|long
name|value
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|timings
index|[
name|type
operator|.
name|ordinal
argument_list|()
index|]
operator|+=
name|valueTimeUnit
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|Timing
name|type
range|:
name|Timing
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"Time="
argument_list|)
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

