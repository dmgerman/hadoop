begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A class defining a set of static helper methods to provide conversion between  * bytes and string for UUID-based client Id.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClientId
specifier|public
class|class
name|ClientId
block|{
comment|/** The byte array of a UUID should be 16 */
DECL|field|BYTE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|BYTE_LENGTH
init|=
literal|16
decl_stmt|;
DECL|field|shiftWidth
specifier|private
specifier|static
specifier|final
name|int
name|shiftWidth
init|=
literal|8
decl_stmt|;
comment|/**    * Return clientId as byte[]    */
DECL|method|getClientId ()
specifier|public
specifier|static
name|byte
index|[]
name|getClientId
parameter_list|()
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
name|BYTE_LENGTH
index|]
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
comment|/** Convert a clientId byte[] to string */
DECL|method|toString (byte[] clientId)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|clientId
parameter_list|)
block|{
comment|// clientId can be null or an empty array
if|if
condition|(
name|clientId
operator|==
literal|null
operator|||
name|clientId
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|// otherwise should be 16 bytes
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|clientId
operator|.
name|length
operator|==
name|BYTE_LENGTH
argument_list|)
expr_stmt|;
name|long
name|msb
init|=
name|getMsb
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
name|long
name|lsb
init|=
name|getLsb
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|UUID
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getMsb (byte[] clientId)
specifier|public
specifier|static
name|long
name|getMsb
parameter_list|(
name|byte
index|[]
name|clientId
parameter_list|)
block|{
name|long
name|msb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BYTE_LENGTH
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|msb
operator|=
operator|(
name|msb
operator|<<
name|shiftWidth
operator|)
operator||
operator|(
name|clientId
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|msb
return|;
block|}
DECL|method|getLsb (byte[] clientId)
specifier|public
specifier|static
name|long
name|getLsb
parameter_list|(
name|byte
index|[]
name|clientId
parameter_list|)
block|{
name|long
name|lsb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|BYTE_LENGTH
operator|/
literal|2
init|;
name|i
operator|<
name|BYTE_LENGTH
condition|;
name|i
operator|++
control|)
block|{
name|lsb
operator|=
operator|(
name|lsb
operator|<<
name|shiftWidth
operator|)
operator||
operator|(
name|clientId
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|lsb
return|;
block|}
comment|/** Convert from clientId string byte[] representation of clientId */
DECL|method|toBytes (String id)
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
name|BYTE_LENGTH
index|]
argument_list|)
decl_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|array
argument_list|()
return|;
block|}
block|}
end_class

end_unit

