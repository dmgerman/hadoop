begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class that provides utility functions for checking disk problem  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DiskChecker
specifier|public
class|class
name|DiskChecker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DiskChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|DiskErrorException
specifier|public
specifier|static
class|class
name|DiskErrorException
extends|extends
name|IOException
block|{
DECL|method|DiskErrorException (String msg)
specifier|public
name|DiskErrorException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|DiskErrorException (String msg, Throwable cause)
specifier|public
name|DiskErrorException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DiskOutOfSpaceException
specifier|public
specifier|static
class|class
name|DiskOutOfSpaceException
extends|extends
name|IOException
block|{
DECL|method|DiskOutOfSpaceException (String msg)
specifier|public
name|DiskOutOfSpaceException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Provider that abstracts some FileOutputStream operations for
comment|// testability.
DECL|field|fileIoProvider
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|FileIoProvider
argument_list|>
name|fileIoProvider
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|DefaultFileIoProvider
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Create the directory if it doesn't exist and check that dir is readable,    * writable and executable    *      * @param dir    * @throws DiskErrorException    */
DECL|method|checkDir (File dir)
specifier|public
specifier|static
name|void
name|checkDir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|DiskErrorException
block|{
if|if
condition|(
operator|!
name|mkdirsWithExistsCheck
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Cannot create directory: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|checkAccessByFileMethods
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|doDiskIo
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the local directory if necessary, check permissions and also ensure    * it can be read from and written into.    *    * @param localFS local filesystem    * @param dir directory    * @param expected permission    * @throws DiskErrorException    * @throws IOException    */
DECL|method|checkDir (LocalFileSystem localFS, Path dir, FsPermission expected)
specifier|public
specifier|static
name|void
name|checkDir
parameter_list|(
name|LocalFileSystem
name|localFS
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|expected
parameter_list|)
throws|throws
name|DiskErrorException
throws|,
name|IOException
block|{
name|mkdirsWithExistsAndPermissionCheck
argument_list|(
name|localFS
argument_list|,
name|dir
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|checkAccessByFileMethods
argument_list|(
name|localFS
operator|.
name|pathToFile
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|doDiskIo
argument_list|(
name|localFS
operator|.
name|pathToFile
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks that the current running process can read, write, and execute the    * given directory by using methods of the File object.    *     * @param dir File to check    * @throws DiskErrorException if dir is not readable, not writable, or not    *   executable    */
DECL|method|checkAccessByFileMethods (File dir)
specifier|private
specifier|static
name|void
name|checkAccessByFileMethods
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|DiskErrorException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Not a directory: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canRead
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Directory is not readable: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canWrite
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Directory is not writable: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|canExecute
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Directory is not executable: "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * The semantics of mkdirsWithExistsCheck method is different from the mkdirs    * method provided in the Sun's java.io.File class in the following way:    * While creating the non-existent parent directories, this method checks for    * the existence of those directories if the mkdir fails at any point (since    * that directory might have just been created by some other process).    * If both mkdir() and the exists() check fails for any seemingly    * non-existent directory, then we signal an error; Sun's mkdir would signal    * an error (return false) if a directory it is attempting to create already    * exists or the mkdir fails.    * @param dir    * @return true on success, false on failure    */
DECL|method|mkdirsWithExistsCheck (File dir)
specifier|private
specifier|static
name|boolean
name|mkdirsWithExistsCheck
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|mkdir
argument_list|()
operator|||
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|File
name|canonDir
decl_stmt|;
try|try
block|{
name|canonDir
operator|=
name|dir
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|parent
init|=
name|canonDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
operator|(
name|parent
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|mkdirsWithExistsCheck
argument_list|(
operator|new
name|File
argument_list|(
name|parent
argument_list|)
argument_list|)
operator|&&
operator|(
name|canonDir
operator|.
name|mkdir
argument_list|()
operator|||
name|canonDir
operator|.
name|exists
argument_list|()
operator|)
operator|)
return|;
block|}
comment|/**    * Create the directory or check permissions if it already exists.    *    * The semantics of mkdirsWithExistsAndPermissionCheck method is different    * from the mkdirs method provided in the Sun's java.io.File class in the    * following way:    * While creating the non-existent parent directories, this method checks for    * the existence of those directories if the mkdir fails at any point (since    * that directory might have just been created by some other process).    * If both mkdir() and the exists() check fails for any seemingly    * non-existent directory, then we signal an error; Sun's mkdir would signal    * an error (return false) if a directory it is attempting to create already    * exists or the mkdir fails.    *    * @param localFS local filesystem    * @param dir directory to be created or checked    * @param expected expected permission    * @throws IOException    */
DECL|method|mkdirsWithExistsAndPermissionCheck ( LocalFileSystem localFS, Path dir, FsPermission expected)
specifier|static
name|void
name|mkdirsWithExistsAndPermissionCheck
parameter_list|(
name|LocalFileSystem
name|localFS
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|directory
init|=
name|localFS
operator|.
name|pathToFile
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
name|created
operator|=
name|mkdirsWithExistsCheck
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
operator|||
operator|!
name|localFS
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
name|localFS
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// State related to running disk IO checks.
DECL|field|DISK_IO_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DISK_IO_FILE_PREFIX
init|=
literal|"DiskChecker.OK_TO_DELETE_."
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|DISK_IO_MAX_ITERATIONS
specifier|static
specifier|final
name|int
name|DISK_IO_MAX_ITERATIONS
init|=
literal|3
decl_stmt|;
comment|/**    * Performs some disk IO by writing to a new file in the given directory    * and sync'ing file contents to disk.    *    * This increases the likelihood of catching catastrophic disk/controller    * failures sooner.    *    * @param dir directory to be checked.    * @throws DiskErrorException if we hit an error while trying to perform    *         disk IO against the file.    */
DECL|method|doDiskIo (File dir)
specifier|private
specifier|static
name|void
name|doDiskIo
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|DiskErrorException
block|{
try|try
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DISK_IO_MAX_ITERATIONS
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|File
name|file
init|=
name|getFileNameForDiskIoCheck
argument_list|(
name|dir
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|diskIoCheckWithoutNativeIo
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Let's retry a few times before we really give up and
comment|// declare the disk as bad.
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
throw|throw
name|ioe
throw|;
comment|// Just rethrow the last exception to signal failure.
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Error checking directory "
operator|+
name|dir
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Try to perform some disk IO by writing to the given file    * without using Native IO.    *    * @param file    * @throws IOException if there was a non-retriable error.    */
DECL|method|diskIoCheckWithoutNativeIo (File file)
specifier|private
specifier|static
name|void
name|diskIoCheckWithoutNativeIo
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|FileIoProvider
name|provider
init|=
name|fileIoProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|fos
operator|=
name|provider
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|provider
operator|.
name|write
argument_list|(
name|fos
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fos
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|file
argument_list|)
throw|;
block|}
name|file
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|fos
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Generate a path name for a test file under the given directory.    *    * @return file object.    */
annotation|@
name|VisibleForTesting
DECL|method|getFileNameForDiskIoCheck (File dir, int iterationCount)
specifier|static
name|File
name|getFileNameForDiskIoCheck
parameter_list|(
name|File
name|dir
parameter_list|,
name|int
name|iterationCount
parameter_list|)
block|{
if|if
condition|(
name|iterationCount
operator|<
name|DISK_IO_MAX_ITERATIONS
condition|)
block|{
comment|// Use file names of the format prefix.001 by default.
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|DISK_IO_FILE_PREFIX
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|iterationCount
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// If the first few checks then fail, try using a randomly generated
comment|// file name.
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|DISK_IO_FILE_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * An interface that abstracts operations on {@link FileOutputStream}    * objects for testability.    */
DECL|interface|FileIoProvider
interface|interface
name|FileIoProvider
block|{
DECL|method|get (File f)
name|FileOutputStream
name|get
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
function_decl|;
DECL|method|write (FileOutputStream fos, byte[] data)
name|void
name|write
parameter_list|(
name|FileOutputStream
name|fos
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * The default implementation of {@link FileIoProvider}.    */
DECL|class|DefaultFileIoProvider
specifier|private
specifier|static
class|class
name|DefaultFileIoProvider
implements|implements
name|FileIoProvider
block|{
comment|/**      * See {@link FileOutputStream#FileOutputStream(File)}.      */
annotation|@
name|Override
DECL|method|get (File f)
specifier|public
name|FileOutputStream
name|get
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/**      * See {@link FileOutputStream#write(byte[])}.      */
annotation|@
name|Override
DECL|method|write (FileOutputStream fos, byte[] data)
specifier|public
name|void
name|write
parameter_list|(
name|FileOutputStream
name|fos
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|fos
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Replace the {@link FileIoProvider} for tests.    * This method MUST NOT be used outside of unit tests.    *    * @param newFosProvider    * @return the old FileIoProvider.    */
annotation|@
name|VisibleForTesting
DECL|method|replaceFileOutputStreamProvider ( FileIoProvider newFosProvider)
specifier|static
name|FileIoProvider
name|replaceFileOutputStreamProvider
parameter_list|(
name|FileIoProvider
name|newFosProvider
parameter_list|)
block|{
return|return
name|fileIoProvider
operator|.
name|getAndSet
argument_list|(
name|newFosProvider
argument_list|)
return|;
block|}
comment|/**    * Retrieve the current {@link FileIoProvider}.    * This method MUST NOT be used outside of unit tests.    *    * @return the current FileIoProvider.    */
annotation|@
name|VisibleForTesting
DECL|method|getFileOutputStreamProvider ()
specifier|static
name|FileIoProvider
name|getFileOutputStreamProvider
parameter_list|()
block|{
return|return
name|fileIoProvider
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

