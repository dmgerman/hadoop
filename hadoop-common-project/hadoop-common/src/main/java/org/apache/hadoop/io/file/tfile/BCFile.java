begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|CompareUtils
operator|.
name|Scalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|CompareUtils
operator|.
name|ScalarComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|CompareUtils
operator|.
name|ScalarLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Utils
operator|.
name|Version
import|;
end_import

begin_comment
comment|/**  * Block Compressed file, the underlying physical storage layer for TFile.  * BCFile provides the basic block level compression for the data block and meta  * blocks. It is separated from TFile as it may be used for other  * block-compressed file implementation.  */
end_comment

begin_class
DECL|class|BCFile
specifier|final
class|class
name|BCFile
block|{
comment|// the current version of BCFile impl, increment them (major or minor) made
comment|// enough changes
DECL|field|API_VERSION
specifier|static
specifier|final
name|Version
name|API_VERSION
init|=
operator|new
name|Version
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BCFile
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Prevent the instantiation of BCFile objects.    */
DECL|method|BCFile ()
specifier|private
name|BCFile
parameter_list|()
block|{
comment|// nothing
block|}
comment|/**    * BCFile writer, the entry point for creating a new BCFile.    */
DECL|class|Writer
specifier|static
specifier|public
class|class
name|Writer
implements|implements
name|Closeable
block|{
DECL|field|out
specifier|private
specifier|final
name|FSDataOutputStream
name|out
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// the single meta block containing index of compressed data blocks
DECL|field|dataIndex
specifier|final
name|DataIndex
name|dataIndex
decl_stmt|;
comment|// index for meta blocks
DECL|field|metaIndex
specifier|final
name|MetaIndex
name|metaIndex
decl_stmt|;
DECL|field|blkInProgress
name|boolean
name|blkInProgress
init|=
literal|false
decl_stmt|;
DECL|field|metaBlkSeen
specifier|private
name|boolean
name|metaBlkSeen
init|=
literal|false
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|errorCount
name|long
name|errorCount
init|=
literal|0
decl_stmt|;
comment|// reusable buffers.
DECL|field|fsOutputBuffer
specifier|private
name|BytesWritable
name|fsOutputBuffer
decl_stmt|;
comment|/**      * Call-back interface to register a block after a block is closed.      */
DECL|interface|BlockRegister
specifier|private
specifier|static
interface|interface
name|BlockRegister
block|{
comment|/**        * Register a block that is fully closed.        *         * @param raw        *          The size of block in terms of uncompressed bytes.        * @param offsetStart        *          The start offset of the block.        * @param offsetEnd        *          One byte after the end of the block. Compressed block size is        *          offsetEnd - offsetStart.        */
DECL|method|register (long raw, long offsetStart, long offsetEnd)
specifier|public
name|void
name|register
parameter_list|(
name|long
name|raw
parameter_list|,
name|long
name|offsetStart
parameter_list|,
name|long
name|offsetEnd
parameter_list|)
function_decl|;
block|}
comment|/**      * Intermediate class that maintain the state of a Writable Compression      * Block.      */
DECL|class|WBlockState
specifier|private
specifier|static
specifier|final
class|class
name|WBlockState
block|{
DECL|field|compressAlgo
specifier|private
specifier|final
name|Algorithm
name|compressAlgo
decl_stmt|;
DECL|field|compressor
specifier|private
name|Compressor
name|compressor
decl_stmt|;
comment|// !null only if using native
comment|// Hadoop compression
DECL|field|fsOut
specifier|private
specifier|final
name|FSDataOutputStream
name|fsOut
decl_stmt|;
DECL|field|posStart
specifier|private
specifier|final
name|long
name|posStart
decl_stmt|;
DECL|field|fsBufferedOutput
specifier|private
specifier|final
name|SimpleBufferedOutputStream
name|fsBufferedOutput
decl_stmt|;
DECL|field|out
specifier|private
name|OutputStream
name|out
decl_stmt|;
comment|/**        * @param compressionAlgo        *          The compression algorithm to be used to for compression.        * @throws IOException        */
DECL|method|WBlockState (Algorithm compressionAlgo, FSDataOutputStream fsOut, BytesWritable fsOutputBuffer, Configuration conf)
specifier|public
name|WBlockState
parameter_list|(
name|Algorithm
name|compressionAlgo
parameter_list|,
name|FSDataOutputStream
name|fsOut
parameter_list|,
name|BytesWritable
name|fsOutputBuffer
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressAlgo
operator|=
name|compressionAlgo
expr_stmt|;
name|this
operator|.
name|fsOut
operator|=
name|fsOut
expr_stmt|;
name|this
operator|.
name|posStart
operator|=
name|fsOut
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|fsOutputBuffer
operator|.
name|setCapacity
argument_list|(
name|TFile
operator|.
name|getFSOutputBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsBufferedOutput
operator|=
operator|new
name|SimpleBufferedOutputStream
argument_list|(
name|this
operator|.
name|fsOut
argument_list|,
name|fsOutputBuffer
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressAlgo
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|out
operator|=
name|compressionAlgo
operator|.
name|createCompressionStream
argument_list|(
name|fsBufferedOutput
argument_list|,
name|compressor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|compressAlgo
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**        * Get the output stream for BlockAppender's consumption.        *         * @return the output stream suitable for writing block data.        */
DECL|method|getOutputStream ()
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|out
return|;
block|}
comment|/**        * Get the current position in file.        *         * @return The current byte offset in underlying file.        * @throws IOException        */
DECL|method|getCurrentPos ()
name|long
name|getCurrentPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fsOut
operator|.
name|getPos
argument_list|()
operator|+
name|fsBufferedOutput
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getStartPos ()
name|long
name|getStartPos
parameter_list|()
block|{
return|return
name|posStart
return|;
block|}
comment|/**        * Current size of compressed data.        *         * @return        * @throws IOException        */
DECL|method|getCompressedSize ()
name|long
name|getCompressedSize
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|ret
init|=
name|getCurrentPos
argument_list|()
operator|-
name|posStart
decl_stmt|;
return|return
name|ret
return|;
block|}
comment|/**        * Finishing up the current block.        */
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|compressAlgo
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
name|compressor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Access point to stuff data into a block.      *       * TODO: Change DataOutputStream to something else that tracks the size as      * long instead of int. Currently, we will wrap around if the row block size      * is greater than 4GB.      */
DECL|class|BlockAppender
specifier|public
class|class
name|BlockAppender
extends|extends
name|DataOutputStream
block|{
DECL|field|blockRegister
specifier|private
specifier|final
name|BlockRegister
name|blockRegister
decl_stmt|;
DECL|field|wBlkState
specifier|private
specifier|final
name|WBlockState
name|wBlkState
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"hiding"
argument_list|)
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**        * Constructor        *         * @param register        *          the block register, which is called when the block is closed.        * @param wbs        *          The writable compression block state.        */
DECL|method|BlockAppender (BlockRegister register, WBlockState wbs)
name|BlockAppender
parameter_list|(
name|BlockRegister
name|register
parameter_list|,
name|WBlockState
name|wbs
parameter_list|)
block|{
name|super
argument_list|(
name|wbs
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockRegister
operator|=
name|register
expr_stmt|;
name|this
operator|.
name|wBlkState
operator|=
name|wbs
expr_stmt|;
block|}
comment|/**        * Get the raw size of the block.        *         * @return the number of uncompressed bytes written through the        *         BlockAppender so far.        * @throws IOException        */
DECL|method|getRawSize ()
specifier|public
name|long
name|getRawSize
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**          * Expecting the size() of a block not exceeding 4GB. Assuming the          * size() will wrap to negative integer if it exceeds 2GB.          */
return|return
name|size
argument_list|()
operator|&
literal|0x00000000ffffffffL
return|;
block|}
comment|/**        * Get the compressed size of the block in progress.        *         * @return the number of compressed bytes written to the underlying FS        *         file. The size may be smaller than actual need to compress the        *         all data written due to internal buffering inside the        *         compressor.        * @throws IOException        */
DECL|method|getCompressedSize ()
specifier|public
name|long
name|getCompressedSize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wBlkState
operator|.
name|getCompressedSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|// The down stream is a special kind of stream that finishes a
comment|// compression block upon flush. So we disable flush() here.
block|}
comment|/**        * Signaling the end of write to the block. The block register will be        * called for registering the finished block.        */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|true
condition|)
block|{
return|return;
block|}
try|try
block|{
operator|++
name|errorCount
expr_stmt|;
name|wBlkState
operator|.
name|finish
argument_list|()
expr_stmt|;
name|blockRegister
operator|.
name|register
argument_list|(
name|getRawSize
argument_list|()
argument_list|,
name|wBlkState
operator|.
name|getStartPos
argument_list|()
argument_list|,
name|wBlkState
operator|.
name|getCurrentPos
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|errorCount
expr_stmt|;
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|blkInProgress
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Constructor      *       * @param fout      *          FS output stream.      * @param compressionName      *          Name of the compression algorithm, which will be used for all      *          data blocks.      * @throws IOException      * @see Compression#getSupportedAlgorithms      */
DECL|method|Writer (FSDataOutputStream fout, String compressionName, Configuration conf)
specifier|public
name|Writer
parameter_list|(
name|FSDataOutputStream
name|fout
parameter_list|,
name|String
name|compressionName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fout
operator|.
name|getPos
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Output file not at zero offset."
argument_list|)
throw|;
block|}
name|this
operator|.
name|out
operator|=
name|fout
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|dataIndex
operator|=
operator|new
name|DataIndex
argument_list|(
name|compressionName
argument_list|)
expr_stmt|;
name|metaIndex
operator|=
operator|new
name|MetaIndex
argument_list|()
expr_stmt|;
name|fsOutputBuffer
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
name|Magic
operator|.
name|write
argument_list|(
name|fout
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close the BCFile Writer. Attempting to use the Writer after calling      *<code>close</code> is not allowed and may lead to undetermined results.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|true
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|errorCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|blkInProgress
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Close() called with active block appender."
argument_list|)
throw|;
block|}
comment|// add metaBCFileIndex to metaIndex as the last meta block
name|BlockAppender
name|appender
init|=
name|prepareMetaBlock
argument_list|(
name|DataIndex
operator|.
name|BLOCK_NAME
argument_list|,
name|getDefaultCompressionAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|dataIndex
operator|.
name|write
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|offsetIndexMeta
init|=
name|out
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|metaIndex
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Meta Index and the trailing section are written out directly.
name|out
operator|.
name|writeLong
argument_list|(
name|offsetIndexMeta
argument_list|)
expr_stmt|;
name|API_VERSION
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Magic
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getDefaultCompressionAlgorithm ()
specifier|private
name|Algorithm
name|getDefaultCompressionAlgorithm
parameter_list|()
block|{
return|return
name|dataIndex
operator|.
name|getDefaultCompressionAlgorithm
argument_list|()
return|;
block|}
DECL|method|prepareMetaBlock (String name, Algorithm compressAlgo)
specifier|private
name|BlockAppender
name|prepareMetaBlock
parameter_list|(
name|String
name|name
parameter_list|,
name|Algorithm
name|compressAlgo
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaBlockAlreadyExists
block|{
if|if
condition|(
name|blkInProgress
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create Meta Block until previous block is closed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|metaIndex
operator|.
name|getMetaByName
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaBlockAlreadyExists
argument_list|(
literal|"name="
operator|+
name|name
argument_list|)
throw|;
block|}
name|MetaBlockRegister
name|mbr
init|=
operator|new
name|MetaBlockRegister
argument_list|(
name|name
argument_list|,
name|compressAlgo
argument_list|)
decl_stmt|;
name|WBlockState
name|wbs
init|=
operator|new
name|WBlockState
argument_list|(
name|compressAlgo
argument_list|,
name|out
argument_list|,
name|fsOutputBuffer
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BlockAppender
name|ba
init|=
operator|new
name|BlockAppender
argument_list|(
name|mbr
argument_list|,
name|wbs
argument_list|)
decl_stmt|;
name|blkInProgress
operator|=
literal|true
expr_stmt|;
name|metaBlkSeen
operator|=
literal|true
expr_stmt|;
return|return
name|ba
return|;
block|}
comment|/**      * Create a Meta Block and obtain an output stream for adding data into the      * block. There can only be one BlockAppender stream active at any time.      * Regular Blocks may not be created after the first Meta Blocks. The caller      * must call BlockAppender.close() to conclude the block creation.      *       * @param name      *          The name of the Meta Block. The name must not conflict with      *          existing Meta Blocks.      * @param compressionName      *          The name of the compression algorithm to be used.      * @return The BlockAppender stream      * @throws IOException      * @throws MetaBlockAlreadyExists      *           If the meta block with the name already exists.      */
DECL|method|prepareMetaBlock (String name, String compressionName)
specifier|public
name|BlockAppender
name|prepareMetaBlock
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|compressionName
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaBlockAlreadyExists
block|{
return|return
name|prepareMetaBlock
argument_list|(
name|name
argument_list|,
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressionName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a Meta Block and obtain an output stream for adding data into the      * block. The Meta Block will be compressed with the same compression      * algorithm as data blocks. There can only be one BlockAppender stream      * active at any time. Regular Blocks may not be created after the first      * Meta Blocks. The caller must call BlockAppender.close() to conclude the      * block creation.      *       * @param name      *          The name of the Meta Block. The name must not conflict with      *          existing Meta Blocks.      * @return The BlockAppender stream      * @throws MetaBlockAlreadyExists      *           If the meta block with the name already exists.      * @throws IOException      */
DECL|method|prepareMetaBlock (String name)
specifier|public
name|BlockAppender
name|prepareMetaBlock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaBlockAlreadyExists
block|{
return|return
name|prepareMetaBlock
argument_list|(
name|name
argument_list|,
name|getDefaultCompressionAlgorithm
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a Data Block and obtain an output stream for adding data into the      * block. There can only be one BlockAppender stream active at any time.      * Data Blocks may not be created after the first Meta Blocks. The caller      * must call BlockAppender.close() to conclude the block creation.      *       * @return The BlockAppender stream      * @throws IOException      */
DECL|method|prepareDataBlock ()
specifier|public
name|BlockAppender
name|prepareDataBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|blkInProgress
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create Data Block until previous block is closed."
argument_list|)
throw|;
block|}
if|if
condition|(
name|metaBlkSeen
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create Data Block after Meta Blocks."
argument_list|)
throw|;
block|}
name|DataBlockRegister
name|dbr
init|=
operator|new
name|DataBlockRegister
argument_list|()
decl_stmt|;
name|WBlockState
name|wbs
init|=
operator|new
name|WBlockState
argument_list|(
name|getDefaultCompressionAlgorithm
argument_list|()
argument_list|,
name|out
argument_list|,
name|fsOutputBuffer
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BlockAppender
name|ba
init|=
operator|new
name|BlockAppender
argument_list|(
name|dbr
argument_list|,
name|wbs
argument_list|)
decl_stmt|;
name|blkInProgress
operator|=
literal|true
expr_stmt|;
return|return
name|ba
return|;
block|}
comment|/**      * Callback to make sure a meta block is added to the internal list when its      * stream is closed.      */
DECL|class|MetaBlockRegister
specifier|private
class|class
name|MetaBlockRegister
implements|implements
name|BlockRegister
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|compressAlgo
specifier|private
specifier|final
name|Algorithm
name|compressAlgo
decl_stmt|;
DECL|method|MetaBlockRegister (String name, Algorithm compressAlgo)
name|MetaBlockRegister
parameter_list|(
name|String
name|name
parameter_list|,
name|Algorithm
name|compressAlgo
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|compressAlgo
operator|=
name|compressAlgo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|register (long raw, long begin, long end)
specifier|public
name|void
name|register
parameter_list|(
name|long
name|raw
parameter_list|,
name|long
name|begin
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|metaIndex
operator|.
name|addEntry
argument_list|(
operator|new
name|MetaIndexEntry
argument_list|(
name|name
argument_list|,
name|compressAlgo
argument_list|,
operator|new
name|BlockRegion
argument_list|(
name|begin
argument_list|,
name|end
operator|-
name|begin
argument_list|,
name|raw
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to make sure a data block is added to the internal list when      * it's being closed.      *       */
DECL|class|DataBlockRegister
specifier|private
class|class
name|DataBlockRegister
implements|implements
name|BlockRegister
block|{
DECL|method|DataBlockRegister ()
name|DataBlockRegister
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
DECL|method|register (long raw, long begin, long end)
specifier|public
name|void
name|register
parameter_list|(
name|long
name|raw
parameter_list|,
name|long
name|begin
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|dataIndex
operator|.
name|addBlockRegion
argument_list|(
operator|new
name|BlockRegion
argument_list|(
name|begin
argument_list|,
name|end
operator|-
name|begin
argument_list|,
name|raw
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * BCFile Reader, interface to read the file's data and meta blocks.    */
DECL|class|Reader
specifier|static
specifier|public
class|class
name|Reader
implements|implements
name|Closeable
block|{
DECL|field|in
specifier|private
specifier|final
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dataIndex
specifier|final
name|DataIndex
name|dataIndex
decl_stmt|;
comment|// Index for meta blocks
DECL|field|metaIndex
specifier|final
name|MetaIndex
name|metaIndex
decl_stmt|;
DECL|field|version
specifier|final
name|Version
name|version
decl_stmt|;
comment|/**      * Intermediate class that maintain the state of a Readable Compression      * Block.      */
DECL|class|RBlockState
specifier|static
specifier|private
specifier|final
class|class
name|RBlockState
block|{
DECL|field|compressAlgo
specifier|private
specifier|final
name|Algorithm
name|compressAlgo
decl_stmt|;
DECL|field|decompressor
specifier|private
name|Decompressor
name|decompressor
decl_stmt|;
DECL|field|region
specifier|private
specifier|final
name|BlockRegion
name|region
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
DECL|method|RBlockState (Algorithm compressionAlgo, FSDataInputStream fsin, BlockRegion region, Configuration conf)
specifier|public
name|RBlockState
parameter_list|(
name|Algorithm
name|compressionAlgo
parameter_list|,
name|FSDataInputStream
name|fsin
parameter_list|,
name|BlockRegion
name|region
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressAlgo
operator|=
name|compressionAlgo
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|decompressor
operator|=
name|compressionAlgo
operator|.
name|getDecompressor
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|in
operator|=
name|compressAlgo
operator|.
name|createDecompressionStream
argument_list|(
operator|new
name|BoundedRangeFileInputStream
argument_list|(
name|fsin
argument_list|,
name|this
operator|.
name|region
operator|.
name|getOffset
argument_list|()
argument_list|,
name|this
operator|.
name|region
operator|.
name|getCompressedSize
argument_list|()
argument_list|)
argument_list|,
name|decompressor
argument_list|,
name|TFile
operator|.
name|getFSInputBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|compressAlgo
operator|.
name|returnDecompressor
argument_list|(
name|decompressor
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**        * Get the output stream for BlockAppender's consumption.        *         * @return the output stream suitable for writing block data.        */
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
return|return
name|in
return|;
block|}
DECL|method|getCompressionName ()
specifier|public
name|String
name|getCompressionName
parameter_list|()
block|{
return|return
name|compressAlgo
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getBlockRegion ()
specifier|public
name|BlockRegion
name|getBlockRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|compressAlgo
operator|.
name|returnDecompressor
argument_list|(
name|decompressor
argument_list|)
expr_stmt|;
name|decompressor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Access point to read a block.      */
DECL|class|BlockReader
specifier|public
specifier|static
class|class
name|BlockReader
extends|extends
name|DataInputStream
block|{
DECL|field|rBlkState
specifier|private
specifier|final
name|RBlockState
name|rBlkState
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|BlockReader (RBlockState rbs)
name|BlockReader
parameter_list|(
name|RBlockState
name|rbs
parameter_list|)
block|{
name|super
argument_list|(
name|rbs
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|rBlkState
operator|=
name|rbs
expr_stmt|;
block|}
comment|/**        * Finishing reading the block. Release all resources.        */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|true
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// Do not set rBlkState to null. People may access stats after calling
comment|// close().
name|rBlkState
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**        * Get the name of the compression algorithm used to compress the block.        *         * @return name of the compression algorithm.        */
DECL|method|getCompressionName ()
specifier|public
name|String
name|getCompressionName
parameter_list|()
block|{
return|return
name|rBlkState
operator|.
name|getCompressionName
argument_list|()
return|;
block|}
comment|/**        * Get the uncompressed size of the block.        *         * @return uncompressed size of the block.        */
DECL|method|getRawSize ()
specifier|public
name|long
name|getRawSize
parameter_list|()
block|{
return|return
name|rBlkState
operator|.
name|getBlockRegion
argument_list|()
operator|.
name|getRawSize
argument_list|()
return|;
block|}
comment|/**        * Get the compressed size of the block.        *         * @return compressed size of the block.        */
DECL|method|getCompressedSize ()
specifier|public
name|long
name|getCompressedSize
parameter_list|()
block|{
return|return
name|rBlkState
operator|.
name|getBlockRegion
argument_list|()
operator|.
name|getCompressedSize
argument_list|()
return|;
block|}
comment|/**        * Get the starting position of the block in the file.        *         * @return the starting position of the block in the file.        */
DECL|method|getStartPos ()
specifier|public
name|long
name|getStartPos
parameter_list|()
block|{
return|return
name|rBlkState
operator|.
name|getBlockRegion
argument_list|()
operator|.
name|getOffset
argument_list|()
return|;
block|}
block|}
comment|/**      * Constructor      *       * @param fin      *          FS input stream.      * @param fileLength      *          Length of the corresponding file      * @throws IOException      */
DECL|method|Reader (FSDataInputStream fin, long fileLength, Configuration conf)
specifier|public
name|Reader
parameter_list|(
name|FSDataInputStream
name|fin
parameter_list|,
name|long
name|fileLength
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|fin
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// move the cursor to the beginning of the tail, containing: offset to the
comment|// meta block index, version and magic
name|fin
operator|.
name|seek
argument_list|(
name|fileLength
operator|-
name|Magic
operator|.
name|size
argument_list|()
operator|-
name|Version
operator|.
name|size
argument_list|()
operator|-
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
argument_list|)
expr_stmt|;
name|long
name|offsetIndexMeta
init|=
name|fin
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|version
operator|=
operator|new
name|Version
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|Magic
operator|.
name|readAndVerify
argument_list|(
name|fin
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|compatibleWith
argument_list|(
name|BCFile
operator|.
name|API_VERSION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Incompatible BCFile fileBCFileVersion."
argument_list|)
throw|;
block|}
comment|// read meta index
name|fin
operator|.
name|seek
argument_list|(
name|offsetIndexMeta
argument_list|)
expr_stmt|;
name|metaIndex
operator|=
operator|new
name|MetaIndex
argument_list|(
name|fin
argument_list|)
expr_stmt|;
comment|// read data:BCFile.index, the data block index
name|BlockReader
name|blockR
init|=
name|getMetaBlock
argument_list|(
name|DataIndex
operator|.
name|BLOCK_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|dataIndex
operator|=
operator|new
name|DataIndex
argument_list|(
name|blockR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|blockR
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the name of the default compression algorithm.      *       * @return the name of the default compression algorithm.      */
DECL|method|getDefaultCompressionName ()
specifier|public
name|String
name|getDefaultCompressionName
parameter_list|()
block|{
return|return
name|dataIndex
operator|.
name|getDefaultCompressionAlgorithm
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Get version of BCFile file being read.      *       * @return version of BCFile file being read.      */
DECL|method|getBCFileVersion ()
specifier|public
name|Version
name|getBCFileVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Get version of BCFile API.      *       * @return version of BCFile API.      */
DECL|method|getAPIVersion ()
specifier|public
name|Version
name|getAPIVersion
parameter_list|()
block|{
return|return
name|API_VERSION
return|;
block|}
comment|/**      * Finishing reading the BCFile. Release all resources.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to be done now
block|}
comment|/**      * Get the number of data blocks.      *       * @return the number of data blocks.      */
DECL|method|getBlockCount ()
specifier|public
name|int
name|getBlockCount
parameter_list|()
block|{
return|return
name|dataIndex
operator|.
name|getBlockRegionList
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Stream access to a Meta Block.      *       * @param name      *          meta block name      * @return BlockReader input stream for reading the meta block.      * @throws IOException      * @throws MetaBlockDoesNotExist      *           The Meta Block with the given name does not exist.      */
DECL|method|getMetaBlock (String name)
specifier|public
name|BlockReader
name|getMetaBlock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaBlockDoesNotExist
block|{
name|MetaIndexEntry
name|imeBCIndex
init|=
name|metaIndex
operator|.
name|getMetaByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|imeBCIndex
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaBlockDoesNotExist
argument_list|(
literal|"name="
operator|+
name|name
argument_list|)
throw|;
block|}
name|BlockRegion
name|region
init|=
name|imeBCIndex
operator|.
name|getRegion
argument_list|()
decl_stmt|;
return|return
name|createReader
argument_list|(
name|imeBCIndex
operator|.
name|getCompressionAlgorithm
argument_list|()
argument_list|,
name|region
argument_list|)
return|;
block|}
comment|/**      * Stream access to a Data Block.      *       * @param blockIndex      *          0-based data block index.      * @return BlockReader input stream for reading the data block.      * @throws IOException      */
DECL|method|getDataBlock (int blockIndex)
specifier|public
name|BlockReader
name|getDataBlock
parameter_list|(
name|int
name|blockIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockIndex
operator|<
literal|0
operator|||
name|blockIndex
operator|>=
name|getBlockCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"blockIndex=%d, numBlocks=%d"
argument_list|,
name|blockIndex
argument_list|,
name|getBlockCount
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|BlockRegion
name|region
init|=
name|dataIndex
operator|.
name|getBlockRegionList
argument_list|()
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
decl_stmt|;
return|return
name|createReader
argument_list|(
name|dataIndex
operator|.
name|getDefaultCompressionAlgorithm
argument_list|()
argument_list|,
name|region
argument_list|)
return|;
block|}
DECL|method|createReader (Algorithm compressAlgo, BlockRegion region)
specifier|private
name|BlockReader
name|createReader
parameter_list|(
name|Algorithm
name|compressAlgo
parameter_list|,
name|BlockRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|RBlockState
name|rbs
init|=
operator|new
name|RBlockState
argument_list|(
name|compressAlgo
argument_list|,
name|in
argument_list|,
name|region
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockReader
argument_list|(
name|rbs
argument_list|)
return|;
block|}
comment|/**      * Find the smallest Block index whose starting offset is greater than or      * equal to the specified offset.      *       * @param offset      *          User-specific offset.      * @return the index to the data Block if such block exists; or -1      *         otherwise.      */
DECL|method|getBlockIndexNear (long offset)
specifier|public
name|int
name|getBlockIndexNear
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|BlockRegion
argument_list|>
name|list
init|=
name|dataIndex
operator|.
name|getBlockRegionList
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|Utils
operator|.
name|lowerBound
argument_list|(
name|list
argument_list|,
operator|new
name|ScalarLong
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|new
name|ScalarComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|idx
return|;
block|}
block|}
comment|/**    * Index for all Meta blocks.    */
DECL|class|MetaIndex
specifier|static
class|class
name|MetaIndex
block|{
comment|// use a tree map, for getting a meta block entry by name
DECL|field|index
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
name|index
decl_stmt|;
comment|// for write
DECL|method|MetaIndex ()
specifier|public
name|MetaIndex
parameter_list|()
block|{
name|index
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// for read, construct the map from the file
DECL|method|MetaIndex (DataInput in)
specifier|public
name|MetaIndex
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|Utils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|index
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|nx
init|=
literal|0
init|;
name|nx
operator|<
name|count
condition|;
name|nx
operator|++
control|)
block|{
name|MetaIndexEntry
name|indexEntry
init|=
operator|new
name|MetaIndexEntry
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|index
operator|.
name|put
argument_list|(
name|indexEntry
operator|.
name|getMetaName
argument_list|()
argument_list|,
name|indexEntry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addEntry (MetaIndexEntry indexEntry)
specifier|public
name|void
name|addEntry
parameter_list|(
name|MetaIndexEntry
name|indexEntry
parameter_list|)
block|{
name|index
operator|.
name|put
argument_list|(
name|indexEntry
operator|.
name|getMetaName
argument_list|()
argument_list|,
name|indexEntry
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetaByName (String name)
specifier|public
name|MetaIndexEntry
name|getMetaByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|index
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|index
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaIndexEntry
name|indexEntry
range|:
name|index
operator|.
name|values
argument_list|()
control|)
block|{
name|indexEntry
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * An entry describes a meta block in the MetaIndex.    */
DECL|class|MetaIndexEntry
specifier|static
specifier|final
class|class
name|MetaIndexEntry
block|{
DECL|field|metaName
specifier|private
specifier|final
name|String
name|metaName
decl_stmt|;
DECL|field|compressionAlgorithm
specifier|private
specifier|final
name|Algorithm
name|compressionAlgorithm
decl_stmt|;
DECL|field|defaultPrefix
specifier|private
specifier|final
specifier|static
name|String
name|defaultPrefix
init|=
literal|"data:"
decl_stmt|;
DECL|field|region
specifier|private
specifier|final
name|BlockRegion
name|region
decl_stmt|;
DECL|method|MetaIndexEntry (DataInput in)
specifier|public
name|MetaIndexEntry
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fullMetaName
init|=
name|Utils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullMetaName
operator|.
name|startsWith
argument_list|(
name|defaultPrefix
argument_list|)
condition|)
block|{
name|metaName
operator|=
name|fullMetaName
operator|.
name|substring
argument_list|(
name|defaultPrefix
operator|.
name|length
argument_list|()
argument_list|,
name|fullMetaName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted Meta region Index"
argument_list|)
throw|;
block|}
name|compressionAlgorithm
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|Utils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|=
operator|new
name|BlockRegion
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|MetaIndexEntry (String metaName, Algorithm compressionAlgorithm, BlockRegion region)
specifier|public
name|MetaIndexEntry
parameter_list|(
name|String
name|metaName
parameter_list|,
name|Algorithm
name|compressionAlgorithm
parameter_list|,
name|BlockRegion
name|region
parameter_list|)
block|{
name|this
operator|.
name|metaName
operator|=
name|metaName
expr_stmt|;
name|this
operator|.
name|compressionAlgorithm
operator|=
name|compressionAlgorithm
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
DECL|method|getMetaName ()
specifier|public
name|String
name|getMetaName
parameter_list|()
block|{
return|return
name|metaName
return|;
block|}
DECL|method|getCompressionAlgorithm ()
specifier|public
name|Algorithm
name|getCompressionAlgorithm
parameter_list|()
block|{
return|return
name|compressionAlgorithm
return|;
block|}
DECL|method|getRegion ()
specifier|public
name|BlockRegion
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Utils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|defaultPrefix
operator|+
name|metaName
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|compressionAlgorithm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Index of all compressed data blocks.    */
DECL|class|DataIndex
specifier|static
class|class
name|DataIndex
block|{
DECL|field|BLOCK_NAME
specifier|final
specifier|static
name|String
name|BLOCK_NAME
init|=
literal|"BCFile.index"
decl_stmt|;
DECL|field|defaultCompressionAlgorithm
specifier|private
specifier|final
name|Algorithm
name|defaultCompressionAlgorithm
decl_stmt|;
comment|// for data blocks, each entry specifies a block's offset, compressed size
comment|// and raw size
DECL|field|listRegions
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|BlockRegion
argument_list|>
name|listRegions
decl_stmt|;
comment|// for read, deserialized from a file
DECL|method|DataIndex (DataInput in)
specifier|public
name|DataIndex
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultCompressionAlgorithm
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|Utils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|Utils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|listRegions
operator|=
operator|new
name|ArrayList
argument_list|<
name|BlockRegion
argument_list|>
argument_list|(
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|BlockRegion
name|region
init|=
operator|new
name|BlockRegion
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|listRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for write
DECL|method|DataIndex (String defaultCompressionAlgorithmName)
specifier|public
name|DataIndex
parameter_list|(
name|String
name|defaultCompressionAlgorithmName
parameter_list|)
block|{
name|this
operator|.
name|defaultCompressionAlgorithm
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|defaultCompressionAlgorithmName
argument_list|)
expr_stmt|;
name|listRegions
operator|=
operator|new
name|ArrayList
argument_list|<
name|BlockRegion
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getDefaultCompressionAlgorithm ()
specifier|public
name|Algorithm
name|getDefaultCompressionAlgorithm
parameter_list|()
block|{
return|return
name|defaultCompressionAlgorithm
return|;
block|}
DECL|method|getBlockRegionList ()
specifier|public
name|ArrayList
argument_list|<
name|BlockRegion
argument_list|>
name|getBlockRegionList
parameter_list|()
block|{
return|return
name|listRegions
return|;
block|}
DECL|method|addBlockRegion (BlockRegion region)
specifier|public
name|void
name|addBlockRegion
parameter_list|(
name|BlockRegion
name|region
parameter_list|)
block|{
name|listRegions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Utils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|defaultCompressionAlgorithm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|listRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockRegion
name|region
range|:
name|listRegions
control|)
block|{
name|region
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Magic number uniquely identifying a BCFile in the header/footer.    */
DECL|class|Magic
specifier|static
specifier|final
class|class
name|Magic
block|{
DECL|field|AB_MAGIC_BCFILE
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|AB_MAGIC_BCFILE
init|=
block|{
comment|// ... total of 16 bytes
operator|(
name|byte
operator|)
literal|0xd1
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0xd3
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0xb5
block|,
operator|(
name|byte
operator|)
literal|0xd7
block|,
operator|(
name|byte
operator|)
literal|0xb6
block|,
operator|(
name|byte
operator|)
literal|0x39
block|,
operator|(
name|byte
operator|)
literal|0xdf
block|,
operator|(
name|byte
operator|)
literal|0x41
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0xba
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|,
operator|(
name|byte
operator|)
literal|0x50
block|}
decl_stmt|;
DECL|method|readAndVerify (DataInput in)
specifier|public
specifier|static
name|void
name|readAndVerify
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|abMagic
init|=
operator|new
name|byte
index|[
name|size
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|abMagic
argument_list|)
expr_stmt|;
comment|// check against AB_MAGIC_BCFILE, if not matching, throw an
comment|// Exception
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|abMagic
argument_list|,
name|AB_MAGIC_BCFILE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a valid BCFile."
argument_list|)
throw|;
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|AB_MAGIC_BCFILE
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
specifier|static
name|int
name|size
parameter_list|()
block|{
return|return
name|AB_MAGIC_BCFILE
operator|.
name|length
return|;
block|}
block|}
comment|/**    * Block region.    */
DECL|class|BlockRegion
specifier|static
specifier|final
class|class
name|BlockRegion
implements|implements
name|Scalar
block|{
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|compressedSize
specifier|private
specifier|final
name|long
name|compressedSize
decl_stmt|;
DECL|field|rawSize
specifier|private
specifier|final
name|long
name|rawSize
decl_stmt|;
DECL|method|BlockRegion (DataInput in)
specifier|public
name|BlockRegion
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|offset
operator|=
name|Utils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|compressedSize
operator|=
name|Utils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|rawSize
operator|=
name|Utils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockRegion (long offset, long compressedSize, long rawSize)
specifier|public
name|BlockRegion
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|compressedSize
parameter_list|,
name|long
name|rawSize
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|compressedSize
operator|=
name|compressedSize
expr_stmt|;
name|this
operator|.
name|rawSize
operator|=
name|rawSize
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Utils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|compressedSize
argument_list|)
expr_stmt|;
name|Utils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|rawSize
argument_list|)
expr_stmt|;
block|}
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|getCompressedSize ()
specifier|public
name|long
name|getCompressedSize
parameter_list|()
block|{
return|return
name|compressedSize
return|;
block|}
DECL|method|getRawSize ()
specifier|public
name|long
name|getRawSize
parameter_list|()
block|{
return|return
name|rawSize
return|;
block|}
annotation|@
name|Override
DECL|method|magnitude ()
specifier|public
name|long
name|magnitude
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
block|}
block|}
end_class

end_unit

