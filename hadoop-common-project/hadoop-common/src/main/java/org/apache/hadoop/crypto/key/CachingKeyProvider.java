begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_comment
comment|/**  * A<code>KeyProviderExtension</code> implementation providing a short lived  * cache for<code>KeyVersions</code> and<code>Metadata</code>to avoid burst  * of requests to hit the underlying<code>KeyProvider</code>.  */
end_comment

begin_class
DECL|class|CachingKeyProvider
specifier|public
class|class
name|CachingKeyProvider
extends|extends
name|KeyProviderExtension
argument_list|<
name|CachingKeyProvider
operator|.
name|CacheExtension
argument_list|>
block|{
DECL|class|CacheExtension
specifier|static
class|class
name|CacheExtension
implements|implements
name|KeyProviderExtension
operator|.
name|Extension
block|{
DECL|field|provider
specifier|private
specifier|final
name|KeyProvider
name|provider
decl_stmt|;
DECL|field|keyVersionCache
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|KeyVersion
argument_list|>
name|keyVersionCache
decl_stmt|;
DECL|field|currentKeyCache
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|KeyVersion
argument_list|>
name|currentKeyCache
decl_stmt|;
DECL|field|keyMetadataCache
specifier|private
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
name|keyMetadataCache
decl_stmt|;
DECL|method|CacheExtension (KeyProvider prov, long keyTimeoutMillis, long currKeyTimeoutMillis)
name|CacheExtension
parameter_list|(
name|KeyProvider
name|prov
parameter_list|,
name|long
name|keyTimeoutMillis
parameter_list|,
name|long
name|currKeyTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|prov
expr_stmt|;
name|keyVersionCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|keyTimeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyVersion
name|kv
init|=
name|provider
operator|.
name|getKeyVersion
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeyNotFoundException
argument_list|()
throw|;
block|}
return|return
name|kv
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keyMetadataCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|keyTimeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Metadata
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|Metadata
name|meta
init|=
name|provider
operator|.
name|getMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeyNotFoundException
argument_list|()
throw|;
block|}
return|return
name|meta
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|currentKeyCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|currKeyTimeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|KeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|KeyVersion
name|load
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyVersion
name|kv
init|=
name|provider
operator|.
name|getCurrentKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KeyNotFoundException
argument_list|()
throw|;
block|}
return|return
name|kv
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|KeyNotFoundException
specifier|private
specifier|static
class|class
name|KeyNotFoundException
extends|extends
name|Exception
block|{ }
DECL|method|CachingKeyProvider (KeyProvider keyProvider, long keyTimeoutMillis, long currKeyTimeoutMillis)
specifier|public
name|CachingKeyProvider
parameter_list|(
name|KeyProvider
name|keyProvider
parameter_list|,
name|long
name|keyTimeoutMillis
parameter_list|,
name|long
name|currKeyTimeoutMillis
parameter_list|)
block|{
name|super
argument_list|(
name|keyProvider
argument_list|,
operator|new
name|CacheExtension
argument_list|(
name|keyProvider
argument_list|,
name|keyTimeoutMillis
argument_list|,
name|currKeyTimeoutMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey (String name)
specifier|public
name|KeyVersion
name|getCurrentKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getExtension
argument_list|()
operator|.
name|currentKeyCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|KeyNotFoundException
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersion (String versionName)
specifier|public
name|KeyVersion
name|getKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getExtension
argument_list|()
operator|.
name|keyVersionCache
operator|.
name|get
argument_list|(
name|versionName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|KeyNotFoundException
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|deleteKey (String name)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|getKeyProvider
argument_list|()
operator|.
name|deleteKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getExtension
argument_list|()
operator|.
name|currentKeyCache
operator|.
name|invalidate
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getExtension
argument_list|()
operator|.
name|keyMetadataCache
operator|.
name|invalidate
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// invalidating all key versions as we don't know
comment|// which ones belonged to the deleted key
name|getExtension
argument_list|()
operator|.
name|keyVersionCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name, byte[] material)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyVersion
name|key
init|=
name|getKeyProvider
argument_list|()
operator|.
name|rollNewVersion
argument_list|(
name|name
argument_list|,
name|material
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|KeyVersion
name|key
init|=
name|getKeyProvider
argument_list|()
operator|.
name|rollNewVersion
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|invalidateCache (String name)
specifier|public
name|void
name|invalidateCache
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|getKeyProvider
argument_list|()
operator|.
name|invalidateCache
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getExtension
argument_list|()
operator|.
name|currentKeyCache
operator|.
name|invalidate
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getExtension
argument_list|()
operator|.
name|keyMetadataCache
operator|.
name|invalidate
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// invalidating all key versions as we don't know
comment|// which ones belonged to the deleted key
name|getExtension
argument_list|()
operator|.
name|keyVersionCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetadata (String name)
specifier|public
name|Metadata
name|getMetadata
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getExtension
argument_list|()
operator|.
name|keyMetadataCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|KeyNotFoundException
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

