begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
operator|.
name|VerProtocolImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcPayloadHeader
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|GetProtocolSignatureRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|GetProtocolSignatureResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|GetProtocolVersionsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|GetProtocolVersionsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|ProtocolSignatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|ProtocolInfoProtos
operator|.
name|ProtocolVersionProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This class serves the requests for protocol versions and signatures by  * looking them up in the server registry.  */
end_comment

begin_class
DECL|class|ProtocolMetaInfoServerSideTranslatorPB
specifier|public
class|class
name|ProtocolMetaInfoServerSideTranslatorPB
implements|implements
name|ProtocolMetaInfoPB
block|{
DECL|field|server
name|RPC
operator|.
name|Server
name|server
decl_stmt|;
DECL|method|ProtocolMetaInfoServerSideTranslatorPB (RPC.Server server)
specifier|public
name|ProtocolMetaInfoServerSideTranslatorPB
parameter_list|(
name|RPC
operator|.
name|Server
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersions ( RpcController controller, GetProtocolVersionsRequestProto request)
specifier|public
name|GetProtocolVersionsResponseProto
name|getProtocolVersions
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetProtocolVersionsRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|String
name|protocol
init|=
name|request
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|GetProtocolVersionsResponseProto
operator|.
name|Builder
name|builder
init|=
name|GetProtocolVersionsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RpcKind
name|r
range|:
name|RpcKind
operator|.
name|values
argument_list|()
control|)
block|{
name|long
index|[]
name|versions
decl_stmt|;
try|try
block|{
name|versions
operator|=
name|getProtocolVersionForRpcKind
argument_list|(
name|r
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ProtocolVersionProto
operator|.
name|Builder
name|b
init|=
name|ProtocolVersionProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|versions
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setRpcKind
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|v
range|:
name|versions
control|)
block|{
name|b
operator|.
name|addVersions
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addProtocolVersions
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature ( RpcController controller, GetProtocolSignatureRequestProto request)
specifier|public
name|GetProtocolSignatureResponseProto
name|getProtocolSignature
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetProtocolSignatureRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|GetProtocolSignatureResponseProto
operator|.
name|Builder
name|builder
init|=
name|GetProtocolSignatureResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|request
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|String
name|rpcKind
init|=
name|request
operator|.
name|getRpcKind
argument_list|()
decl_stmt|;
name|long
index|[]
name|versions
decl_stmt|;
try|try
block|{
name|versions
operator|=
name|getProtocolVersionForRpcKind
argument_list|(
name|RpcKind
operator|.
name|valueOf
argument_list|(
name|rpcKind
argument_list|)
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
if|if
condition|(
name|versions
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
for|for
control|(
name|long
name|v
range|:
name|versions
control|)
block|{
name|ProtocolSignatureProto
operator|.
name|Builder
name|sigBuilder
init|=
name|ProtocolSignatureProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|sigBuilder
operator|.
name|setVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
try|try
block|{
name|ProtocolSignature
name|signature
init|=
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|protocol
argument_list|,
name|v
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
range|:
name|signature
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|sigBuilder
operator|.
name|addMethods
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addProtocolSignature
argument_list|(
name|sigBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getProtocolVersionForRpcKind (RpcKind rpcKind, String protocol)
specifier|private
name|long
index|[]
name|getProtocolVersionForRpcKind
parameter_list|(
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|protocolClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
name|String
name|protocolName
init|=
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|protocolClass
argument_list|)
decl_stmt|;
name|VerProtocolImpl
index|[]
name|vers
init|=
name|server
operator|.
name|getSupportedProtocolVersions
argument_list|(
name|rpcKind
argument_list|,
name|protocolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
index|[]
name|versions
init|=
operator|new
name|long
index|[
name|vers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|versions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|versions
index|[
name|i
index|]
operator|=
name|vers
index|[
name|i
index|]
operator|.
name|version
expr_stmt|;
block|}
return|return
name|versions
return|;
block|}
block|}
end_class

end_unit

