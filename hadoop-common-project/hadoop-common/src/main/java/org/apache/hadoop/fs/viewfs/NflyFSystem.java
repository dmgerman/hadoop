begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ScriptBasedMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Nfly is a multi filesystem mount point.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|NflyFSystem
specifier|final
class|class
name|NflyFSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NflyFSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NFLY_TMP_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NFLY_TMP_PREFIX
init|=
literal|"_nfly_tmp_"
decl_stmt|;
DECL|enum|NflyKey
enum|enum
name|NflyKey
block|{
comment|// minimum replication, if local filesystem is included +1 is recommended
DECL|enumConstant|minReplication
name|minReplication
block|,
comment|// forces to check all the replicas and fetch the one with the most recent
comment|// time stamp
comment|//
DECL|enumConstant|readMostRecent
name|readMostRecent
block|,
comment|// create missing replica from far to near, including local?
DECL|enumConstant|repairOnRead
name|repairOnRead
block|}
DECL|field|DEFAULT_MIN_REPLICATION
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_REPLICATION
init|=
literal|2
decl_stmt|;
DECL|field|nflyURI
specifier|private
specifier|static
name|URI
name|nflyURI
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"nfly:///"
argument_list|)
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|NflyNode
index|[]
name|nodes
decl_stmt|;
DECL|field|minReplication
specifier|private
specifier|final
name|int
name|minReplication
decl_stmt|;
DECL|field|nflyFlags
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|NflyKey
argument_list|>
name|nflyFlags
decl_stmt|;
DECL|field|myNode
specifier|private
specifier|final
name|Node
name|myNode
decl_stmt|;
DECL|field|topology
specifier|private
specifier|final
name|NetworkTopology
name|topology
decl_stmt|;
comment|/**    * URI's authority is used as an approximation of the distance from the    * client. It's sufficient for DC but not accurate because worker nodes can be    * closer.    */
DECL|class|NflyNode
specifier|private
specifier|static
class|class
name|NflyNode
extends|extends
name|NodeBase
block|{
DECL|field|fs
specifier|private
specifier|final
name|ChRootedFileSystem
name|fs
decl_stmt|;
DECL|method|NflyNode (String hostName, String rackName, URI uri, Configuration conf)
name|NflyNode
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|rackName
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|hostName
argument_list|,
name|rackName
argument_list|,
operator|new
name|ChRootedFileSystem
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|NflyNode (String hostName, String rackName, ChRootedFileSystem fs)
name|NflyNode
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|rackName
parameter_list|,
name|ChRootedFileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|hostName
argument_list|,
name|rackName
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
DECL|method|getFs ()
name|ChRootedFileSystem
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|MRNflyNode
specifier|private
specifier|static
specifier|final
class|class
name|MRNflyNode
extends|extends
name|NflyNode
implements|implements
name|Comparable
argument_list|<
name|MRNflyNode
argument_list|>
block|{
DECL|field|status
specifier|private
name|FileStatus
name|status
decl_stmt|;
DECL|method|MRNflyNode (NflyNode n)
specifier|private
name|MRNflyNode
parameter_list|(
name|NflyNode
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|,
name|n
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|n
operator|.
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|updateFileStatus (Path f)
specifier|private
name|void
name|updateFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileStatus
name|tmpStatus
init|=
name|getFs
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|status
operator|=
name|tmpStatus
operator|==
literal|null
condition|?
name|notFoundStatus
argument_list|(
name|f
argument_list|)
else|:
name|tmpStatus
expr_stmt|;
block|}
comment|// TODO allow configurable error margin for FileSystems with different
comment|// timestamp precisions
annotation|@
name|Override
DECL|method|compareTo (MRNflyNode other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|MRNflyNode
name|other
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|status
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
return|;
comment|// move non-null towards head
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|status
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// move this towards head
block|}
else|else
block|{
specifier|final
name|long
name|mtime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|their
init|=
name|other
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|their
argument_list|,
name|mtime
argument_list|)
return|;
comment|// move more recent towards head
block|}
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|MRNflyNode
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MRNflyNode
name|other
init|=
operator|(
name|MRNflyNode
operator|)
name|o
decl_stmt|;
return|return
literal|0
operator|==
name|compareTo
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// satisfy findbugs
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|nflyStatus ()
specifier|private
name|FileStatus
name|nflyStatus
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|NflyStatus
argument_list|(
name|getFs
argument_list|()
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|cloneStatus ()
specifier|private
name|FileStatus
name|cloneStatus
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|status
operator|.
name|isSymlink
argument_list|()
condition|?
name|status
operator|.
name|getSymlink
argument_list|()
else|:
literal|null
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|workSet ()
specifier|private
name|MRNflyNode
index|[]
name|workSet
parameter_list|()
block|{
specifier|final
name|MRNflyNode
index|[]
name|res
init|=
operator|new
name|MRNflyNode
index|[
name|nodes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
operator|new
name|MRNflyNode
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Utility to replace null with DEFAULT_RACK.    *    * @param rackString rack value, can be null    * @return non-null rack string    */
DECL|method|getRack (String rackString)
specifier|private
specifier|static
name|String
name|getRack
parameter_list|(
name|String
name|rackString
parameter_list|)
block|{
return|return
name|rackString
operator|==
literal|null
condition|?
name|NetworkTopology
operator|.
name|DEFAULT_RACK
else|:
name|rackString
return|;
block|}
comment|/**    * Creates a new Nfly instance.    *    * @param uris the list of uris in the mount point    * @param conf configuration object    * @param minReplication minimum copies to commit a write op    * @param nflyFlags modes such readMostRecent    * @throws IOException    */
DECL|method|NflyFSystem (URI[] uris, Configuration conf, int minReplication, EnumSet<NflyKey> nflyFlags)
specifier|private
name|NflyFSystem
parameter_list|(
name|URI
index|[]
name|uris
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|minReplication
parameter_list|,
name|EnumSet
argument_list|<
name|NflyKey
argument_list|>
name|nflyFlags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|uris
operator|.
name|length
operator|<
name|minReplication
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|minReplication
operator|+
literal|"< "
operator|+
name|uris
operator|.
name|length
operator|+
literal|": Minimum replication< #destinations"
argument_list|)
throw|;
block|}
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|localHostName
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
comment|// build a list for topology resolution
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|hostStrings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|uris
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|uris
control|)
block|{
specifier|final
name|String
name|uriHost
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
comment|// assume local file system or another closest filesystem if no authority
name|hostStrings
operator|.
name|add
argument_list|(
name|uriHost
operator|==
literal|null
condition|?
name|localHostName
else|:
name|uriHost
argument_list|)
expr_stmt|;
block|}
comment|// resolve the client node
name|hostStrings
operator|.
name|add
argument_list|(
name|localHostName
argument_list|)
expr_stmt|;
specifier|final
name|DNSToSwitchMapping
name|tmpDns
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|ScriptBasedMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// this is an ArrayList
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rackStrings
init|=
name|tmpDns
operator|.
name|resolve
argument_list|(
name|hostStrings
argument_list|)
decl_stmt|;
name|nodes
operator|=
operator|new
name|NflyNode
index|[
name|uris
operator|.
name|length
index|]
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|rackIter
init|=
name|rackStrings
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
operator|new
name|NflyNode
argument_list|(
name|hostStrings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rackIter
operator|.
name|next
argument_list|()
argument_list|,
name|uris
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// sort all the uri's by distance from myNode, the local file system will
comment|// automatically be the the first one.
comment|//
name|myNode
operator|=
operator|new
name|NodeBase
argument_list|(
name|localHostName
argument_list|,
name|getRack
argument_list|(
name|rackIter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|topology
operator|=
name|NetworkTopology
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|topology
operator|.
name|sortByDistance
argument_list|(
name|myNode
argument_list|,
name|nodes
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|minReplication
operator|=
name|minReplication
expr_stmt|;
name|this
operator|.
name|nflyFlags
operator|=
name|nflyFlags
expr_stmt|;
name|statistics
operator|=
name|getStatistics
argument_list|(
name|nflyURI
operator|.
name|getScheme
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Transactional output stream. When creating path /dir/file    * 1) create invisible /real/dir_i/_nfly_tmp_file    * 2) when more than min replication was written, write is committed by    *   renaming all successfully written files to /real/dir_i/file    */
DECL|class|NflyOutputStream
specifier|private
specifier|final
class|class
name|NflyOutputStream
extends|extends
name|OutputStream
block|{
comment|// actual path
DECL|field|nflyPath
specifier|private
specifier|final
name|Path
name|nflyPath
decl_stmt|;
comment|// tmp path before commit
DECL|field|tmpPath
specifier|private
specifier|final
name|Path
name|tmpPath
decl_stmt|;
comment|// broadcast set
DECL|field|outputStreams
specifier|private
specifier|final
name|FSDataOutputStream
index|[]
name|outputStreams
decl_stmt|;
comment|// status set: 1 working, 0 problem
DECL|field|opSet
specifier|private
specifier|final
name|BitSet
name|opSet
decl_stmt|;
DECL|field|useOverwrite
specifier|private
specifier|final
name|boolean
name|useOverwrite
decl_stmt|;
DECL|method|NflyOutputStream (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|private
name|NflyOutputStream
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|nflyPath
operator|=
name|f
expr_stmt|;
name|tmpPath
operator|=
name|getNflyTmpPath
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|outputStreams
operator|=
operator|new
name|FSDataOutputStream
index|[
name|nodes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputStreams
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputStreams
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|fs
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|,
name|permission
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
name|opSet
operator|=
operator|new
name|BitSet
argument_list|(
name|outputStreams
operator|.
name|length
argument_list|)
expr_stmt|;
name|opSet
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|outputStreams
operator|.
name|length
argument_list|)
expr_stmt|;
name|useOverwrite
operator|=
literal|false
expr_stmt|;
block|}
comment|//
comment|// TODO consider how to clean up and throw an exception early when the clear
comment|// bits under min replication
comment|//
DECL|method|mayThrow (List<IOException> ioExceptions)
specifier|private
name|void
name|mayThrow
parameter_list|(
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IOException
name|ioe
init|=
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|opSet
operator|.
name|cardinality
argument_list|()
operator|<
name|minReplication
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exceptions occurred: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write (int d)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|d
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
try|try
block|{
name|outputStreams
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|osException
argument_list|(
name|i
argument_list|,
literal|"write"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
block|}
name|mayThrow
argument_list|(
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
DECL|method|osException (int i, String op, Throwable t, List<IOException> ioExceptions)
specifier|private
name|void
name|osException
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|op
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
parameter_list|)
block|{
name|opSet
operator|.
name|clear
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|processThrowable
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|,
name|op
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|tmpPath
argument_list|,
name|nflyPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] bytes, int offset, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
try|try
block|{
name|outputStreams
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|osException
argument_list|(
name|i
argument_list|,
literal|"write"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
block|}
name|mayThrow
argument_list|(
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
try|try
block|{
name|outputStreams
index|[
name|i
index|]
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|osException
argument_list|(
name|i
argument_list|,
literal|"flush"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
block|}
name|mayThrow
argument_list|(
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
try|try
block|{
name|outputStreams
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|osException
argument_list|(
name|i
argument_list|,
literal|"close"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opSet
operator|.
name|cardinality
argument_list|()
operator|<
name|minReplication
condition|)
block|{
name|cleanupAllTmpFiles
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to sufficiently replicate: min="
operator|+
name|minReplication
operator|+
literal|" actual="
operator|+
name|opSet
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanupAllTmpFiles ()
specifier|private
name|void
name|cleanupAllTmpFiles
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputStreams
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|,
literal|"delete"
argument_list|,
name|t
argument_list|,
literal|null
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|commit ()
specifier|private
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
specifier|final
name|NflyNode
name|nflyNode
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|useOverwrite
condition|)
block|{
name|nflyNode
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|nflyPath
argument_list|)
expr_stmt|;
block|}
name|nflyNode
operator|.
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|nflyPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|osException
argument_list|(
name|i
argument_list|,
literal|"commit"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opSet
operator|.
name|cardinality
argument_list|()
operator|<
name|minReplication
condition|)
block|{
comment|// cleanup should be done outside. If rename failed, it's unlikely that
comment|// delete will work either. It's the same kind of metadata-only op
comment|//
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
comment|// best effort to have a consistent timestamp
specifier|final
name|long
name|commitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|=
name|opSet
operator|.
name|nextSetBit
argument_list|(
name|i
operator|+
literal|1
argument_list|)
control|)
block|{
try|try
block|{
name|nodes
index|[
name|i
index|]
operator|.
name|fs
operator|.
name|setTimes
argument_list|(
name|nflyPath
argument_list|,
name|commitTime
argument_list|,
name|commitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to set timestamp: "
operator|+
name|nodes
index|[
name|i
index|]
operator|+
literal|" "
operator|+
name|nflyPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getNflyTmpPath (Path f)
specifier|private
name|Path
name|getNflyTmpPath
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|,
name|NFLY_TMP_PREFIX
operator|+
name|f
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * // TODO    * Some file status implementations have expensive deserialization or metadata    * retrieval. This probably does not go beyond RawLocalFileSystem. Wrapping    * the the real file status to preserve this behavior. Otherwise, calling    * realStatus getters in constructor defeats this design.    */
DECL|class|NflyStatus
specifier|static
specifier|final
class|class
name|NflyStatus
extends|extends
name|FileStatus
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x21f276d8
decl_stmt|;
DECL|field|realStatus
specifier|private
specifier|final
name|FileStatus
name|realStatus
decl_stmt|;
DECL|field|strippedRoot
specifier|private
specifier|final
name|String
name|strippedRoot
decl_stmt|;
DECL|method|NflyStatus (ChRootedFileSystem realFs, FileStatus realStatus)
specifier|private
name|NflyStatus
parameter_list|(
name|ChRootedFileSystem
name|realFs
parameter_list|,
name|FileStatus
name|realStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|realStatus
operator|=
name|realStatus
expr_stmt|;
name|this
operator|.
name|strippedRoot
operator|=
name|realFs
operator|.
name|stripOutRoot
argument_list|(
name|realStatus
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stripRoot ()
name|String
name|stripRoot
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|strippedRoot
return|;
block|}
annotation|@
name|Override
DECL|method|getLen ()
specifier|public
name|long
name|getLen
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getLen
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isFile ()
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|isFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSymlink ()
specifier|public
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|isSymlink
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockSize ()
specifier|public
name|long
name|getBlockSize
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getBlockSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReplication ()
specifier|public
name|short
name|getReplication
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getReplication
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAccessTime ()
specifier|public
name|long
name|getAccessTime
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getAccessTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPermission ()
specifier|public
name|FsPermission
name|getPermission
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getPermission
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getOwner
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getGroup
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setPath (Path p)
specifier|public
name|void
name|setPath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|realStatus
operator|.
name|setPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSymlink ()
specifier|public
name|Path
name|getSymlink
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|realStatus
operator|.
name|getSymlink
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setSymlink (Path p)
specifier|public
name|void
name|setSymlink
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|realStatus
operator|.
name|setSymlink
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|realStatus
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|realStatus
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|nflyURI
return|;
block|}
comment|/**    * Category: READ.    *    * @param f the file name to open    * @param bufferSize the size of the buffer to be used.    * @return input stream according to nfly flags (closest, most recent)    * @throws IOException    * @throws FileNotFoundException iff all destinations generate this exception    */
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO proxy stream for reads
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|(
name|nodes
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
specifier|final
name|MRNflyNode
index|[]
name|mrNodes
init|=
name|workSet
argument_list|()
decl_stmt|;
comment|// naively iterate until one can be opened
comment|//
for|for
control|(
specifier|final
name|MRNflyNode
name|nflyNode
range|:
name|mrNodes
control|)
block|{
try|try
block|{
if|if
condition|(
name|nflyFlags
operator|.
name|contains
argument_list|(
name|NflyKey
operator|.
name|repairOnRead
argument_list|)
operator|||
name|nflyFlags
operator|.
name|contains
argument_list|(
name|NflyKey
operator|.
name|readMostRecent
argument_list|)
condition|)
block|{
comment|// calling file status to avoid pulling bytes prematurely
name|nflyNode
operator|.
name|updateFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|nflyNode
operator|.
name|getFs
argument_list|()
operator|.
name|open
argument_list|(
name|f
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|nflyNode
operator|.
name|status
operator|=
name|notFoundStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"open"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"open"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nflyFlags
operator|.
name|contains
argument_list|(
name|NflyKey
operator|.
name|readMostRecent
argument_list|)
condition|)
block|{
comment|// sort from most recent to least recent
name|Arrays
operator|.
name|sort
argument_list|(
name|mrNodes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FSDataInputStream
name|fsdisAfterRepair
init|=
name|repairAndOpen
argument_list|(
name|mrNodes
argument_list|,
name|f
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsdisAfterRepair
operator|!=
literal|null
condition|)
block|{
return|return
name|fsdisAfterRepair
return|;
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
DECL|method|notFoundStatus (Path f)
specifier|private
specifier|static
name|FileStatus
name|notFoundStatus
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|/**    * Iterate all available nodes in the proximity order to attempt repair of all    * FileNotFound nodes.    *    * @param mrNodes work set copy of nodes    * @param f path to repair and open    * @param bufferSize buffer size for read RPC    * @return the closest/most recent replica stream AFTER repair    */
DECL|method|repairAndOpen (MRNflyNode[] mrNodes, Path f, int bufferSize)
specifier|private
name|FSDataInputStream
name|repairAndOpen
parameter_list|(
name|MRNflyNode
index|[]
name|mrNodes
parameter_list|,
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|long
name|maxMtime
init|=
literal|0L
decl_stmt|;
for|for
control|(
specifier|final
name|MRNflyNode
name|srcNode
range|:
name|mrNodes
control|)
block|{
if|if
condition|(
name|srcNode
operator|.
name|status
operator|==
literal|null
comment|// not available
operator|||
name|srcNode
operator|.
name|status
operator|.
name|getLen
argument_list|()
operator|<
literal|0L
condition|)
block|{
comment|// not found
continue|continue;
comment|// not available
block|}
if|if
condition|(
name|srcNode
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
operator|>
name|maxMtime
condition|)
block|{
name|maxMtime
operator|=
name|srcNode
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
comment|// attempt to repair all notFound nodes with srcNode
comment|//
for|for
control|(
specifier|final
name|MRNflyNode
name|dstNode
range|:
name|mrNodes
control|)
block|{
if|if
condition|(
name|dstNode
operator|.
name|status
operator|==
literal|null
comment|// not available
operator|||
name|srcNode
operator|.
name|compareTo
argument_list|(
name|dstNode
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// same mtime
continue|continue;
block|}
try|try
block|{
comment|// status is absolute from the underlying mount, making it chrooted
comment|//
specifier|final
name|FileStatus
name|srcStatus
init|=
name|srcNode
operator|.
name|cloneStatus
argument_list|()
decl_stmt|;
name|srcStatus
operator|.
name|setPath
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|tmpPath
init|=
name|getNflyTmpPath
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcNode
operator|.
name|getFs
argument_list|()
argument_list|,
name|srcStatus
argument_list|,
name|dstNode
operator|.
name|getFs
argument_list|()
argument_list|,
name|tmpPath
argument_list|,
literal|false
argument_list|,
comment|// don't delete
literal|true
argument_list|,
comment|// overwrite
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|dstNode
operator|.
name|getFs
argument_list|()
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstNode
operator|.
name|getFs
argument_list|()
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|f
argument_list|)
condition|)
block|{
try|try
block|{
name|dstNode
operator|.
name|getFs
argument_list|()
operator|.
name|setTimes
argument_list|(
name|f
argument_list|,
name|srcNode
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|srcNode
operator|.
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// save getFileStatus rpc
name|srcStatus
operator|.
name|setPath
argument_list|(
name|dstNode
operator|.
name|getFs
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|dstNode
operator|.
name|status
operator|=
name|srcStatus
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// can blame the source by statusSet.clear(ai), however, it would
comment|// cost an extra RPC, so just rely on the loop below that will attempt
comment|// an open anyhow
comment|//
name|LOG
operator|.
name|info
argument_list|(
name|f
operator|+
literal|" "
operator|+
name|srcNode
operator|+
literal|"->"
operator|+
name|dstNode
operator|+
literal|": Failed to repair"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Since Java7, QuickSort is used instead of MergeSort.
comment|// QuickSort may not be stable and thus the equal most recent nodes, may no
comment|// longer appear in the NetworkTopology order.
comment|//
if|if
condition|(
name|maxMtime
operator|>
literal|0
condition|)
block|{
specifier|final
name|List
argument_list|<
name|MRNflyNode
argument_list|>
name|mrList
init|=
operator|new
name|ArrayList
argument_list|<
name|MRNflyNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|MRNflyNode
name|openNode
range|:
name|mrNodes
control|)
block|{
if|if
condition|(
name|openNode
operator|.
name|status
operator|!=
literal|null
operator|&&
name|openNode
operator|.
name|status
operator|.
name|getLen
argument_list|()
operator|>=
literal|0L
condition|)
block|{
if|if
condition|(
name|openNode
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
operator|==
name|maxMtime
condition|)
block|{
name|mrList
operator|.
name|add
argument_list|(
name|openNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// assert mrList.size> 0
specifier|final
name|MRNflyNode
index|[]
name|readNodes
init|=
name|mrList
operator|.
name|toArray
argument_list|(
operator|new
name|MRNflyNode
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|topology
operator|.
name|sortByDistance
argument_list|(
name|myNode
argument_list|,
name|readNodes
argument_list|,
name|readNodes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MRNflyNode
name|rNode
range|:
name|readNodes
control|)
block|{
try|try
block|{
return|return
name|rNode
operator|.
name|getFs
argument_list|()
operator|.
name|open
argument_list|(
name|f
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|f
operator|+
literal|": Failed to open at "
operator|+
name|rNode
operator|.
name|getFs
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|mayThrowFileNotFound (List<IOException> ioExceptions, int numNotFounds)
specifier|private
name|void
name|mayThrowFileNotFound
parameter_list|(
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
parameter_list|,
name|int
name|numNotFounds
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|numNotFounds
operator|==
name|nodes
operator|.
name|length
condition|)
block|{
throw|throw
operator|(
name|FileNotFoundException
operator|)
name|ioExceptions
operator|.
name|get
argument_list|(
name|nodes
operator|.
name|length
operator|-
literal|1
argument_list|)
throw|;
block|}
block|}
comment|// WRITE
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|NflyOutputStream
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
comment|// WRITE
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|// WRITE
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
name|boolean
name|succ
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NflyNode
name|nflyNode
range|:
name|nodes
control|)
block|{
try|try
block|{
name|succ
operator|&=
name|nflyNode
operator|.
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"rename"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"rename"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
comment|// if all destinations threw exceptions throw, otherwise return
comment|//
if|if
condition|(
name|ioExceptions
operator|.
name|size
argument_list|()
operator|==
name|nodes
operator|.
name|length
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
return|return
name|succ
return|;
block|}
comment|// WRITE
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
name|boolean
name|succ
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NflyNode
name|nflyNode
range|:
name|nodes
control|)
block|{
try|try
block|{
name|succ
operator|&=
name|nflyNode
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"delete"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"delete"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|succ
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
comment|// if all destinations threw exceptions throw, otherwise return
comment|//
if|if
condition|(
name|ioExceptions
operator|.
name|size
argument_list|()
operator|==
name|nodes
operator|.
name|length
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
return|return
name|succ
return|;
block|}
comment|/**    * Returns the closest non-failing destination's result.    *    * @param f given path    * @return array of file statuses according to nfly modes    * @throws FileNotFoundException    * @throws IOException    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|(
name|nodes
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|MRNflyNode
index|[]
name|mrNodes
init|=
name|workSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|nflyFlags
operator|.
name|contains
argument_list|(
name|NflyKey
operator|.
name|readMostRecent
argument_list|)
condition|)
block|{
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|MRNflyNode
name|nflyNode
range|:
name|mrNodes
control|)
block|{
try|try
block|{
name|nflyNode
operator|.
name|updateFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"listStatus"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"listStatus"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|mrNodes
argument_list|)
expr_stmt|;
block|}
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|MRNflyNode
name|nflyNode
range|:
name|mrNodes
control|)
block|{
try|try
block|{
specifier|final
name|FileStatus
index|[]
name|realStats
init|=
name|nflyNode
operator|.
name|getFs
argument_list|()
operator|.
name|listStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
index|[]
name|nflyStats
init|=
operator|new
name|FileStatus
index|[
name|realStats
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|realStats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nflyStats
index|[
name|i
index|]
operator|=
operator|new
name|NflyStatus
argument_list|(
name|nflyNode
operator|.
name|getFs
argument_list|()
argument_list|,
name|realStats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|nflyStats
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"listStatus"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"listStatus"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
comment|// TODO important for splits
return|return
name|super
operator|.
name|listLocatedStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
for|for
control|(
specifier|final
name|NflyNode
name|nflyNode
range|:
name|nodes
control|)
block|{
name|nflyNode
operator|.
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|nodes
index|[
literal|0
index|]
operator|.
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
return|;
comment|// 0 is as good as any
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|succ
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NflyNode
name|nflyNode
range|:
name|nodes
control|)
block|{
name|succ
operator|&=
name|nflyNode
operator|.
name|fs
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO proxy stream for reads
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|(
name|nodes
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|numNotFounds
init|=
literal|0
decl_stmt|;
specifier|final
name|MRNflyNode
index|[]
name|mrNodes
init|=
name|workSet
argument_list|()
decl_stmt|;
name|long
name|maxMtime
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|maxMtimeIdx
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
comment|// naively iterate until one can be returned
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mrNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MRNflyNode
name|nflyNode
init|=
name|mrNodes
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|nflyNode
operator|.
name|updateFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|nflyFlags
operator|.
name|contains
argument_list|(
name|NflyKey
operator|.
name|readMostRecent
argument_list|)
condition|)
block|{
specifier|final
name|long
name|nflyTime
init|=
name|nflyNode
operator|.
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|nflyTime
operator|>
name|maxMtime
condition|)
block|{
name|maxMtime
operator|=
name|nflyTime
expr_stmt|;
name|maxMtimeIdx
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|nflyNode
operator|.
name|nflyStatus
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|numNotFounds
operator|++
expr_stmt|;
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"getFileStatus"
argument_list|,
name|fnfe
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|processThrowable
argument_list|(
name|nflyNode
argument_list|,
literal|"getFileStatus"
argument_list|,
name|t
argument_list|,
name|ioExceptions
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxMtimeIdx
operator|>=
literal|0
condition|)
block|{
return|return
name|mrNodes
index|[
name|maxMtimeIdx
index|]
operator|.
name|nflyStatus
argument_list|()
return|;
block|}
name|mayThrowFileNotFound
argument_list|(
name|ioExceptions
argument_list|,
name|numNotFounds
argument_list|)
expr_stmt|;
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ioExceptions
argument_list|)
throw|;
block|}
DECL|method|processThrowable (NflyNode nflyNode, String op, Throwable t, List<IOException> ioExceptions, Path... f)
specifier|private
specifier|static
name|void
name|processThrowable
parameter_list|(
name|NflyNode
name|nflyNode
parameter_list|,
name|String
name|op
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|List
argument_list|<
name|IOException
argument_list|>
name|ioExceptions
parameter_list|,
name|Path
modifier|...
name|f
parameter_list|)
block|{
specifier|final
name|String
name|errMsg
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|f
argument_list|)
operator|+
literal|": failed to "
operator|+
name|op
operator|+
literal|" "
operator|+
name|nflyNode
operator|.
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
specifier|final
name|IOException
name|ioex
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|FileNotFoundException
condition|)
block|{
name|ioex
operator|=
operator|new
name|FileNotFoundException
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
name|ioex
operator|.
name|initCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ioex
operator|=
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioExceptions
operator|!=
literal|null
condition|)
block|{
name|ioExceptions
operator|.
name|add
argument_list|(
name|ioex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initializes an nfly mountpoint in viewfs.    *    * @param uris destinations to replicate writes to    * @param conf file system configuration    * @param settings comma-separated list of k=v pairs.    * @return an Nfly filesystem    * @throws IOException    */
DECL|method|createFileSystem (URI[] uris, Configuration conf, String settings)
specifier|static
name|FileSystem
name|createFileSystem
parameter_list|(
name|URI
index|[]
name|uris
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
comment|// assert settings != null
name|int
name|minRepl
init|=
name|DEFAULT_MIN_REPLICATION
decl_stmt|;
name|EnumSet
argument_list|<
name|NflyKey
argument_list|>
name|nflyFlags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NflyKey
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|kvPairs
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|settings
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|kvPairs
control|)
block|{
specifier|final
name|String
index|[]
name|kvPair
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|kv
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|kvPair
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|kv
argument_list|)
throw|;
block|}
name|NflyKey
name|nflyKey
init|=
name|NflyKey
operator|.
name|valueOf
argument_list|(
name|kvPair
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nflyKey
condition|)
block|{
case|case
name|minReplication
case|:
name|minRepl
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|kvPair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|repairOnRead
case|:
case|case
name|readMostRecent
case|:
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|kvPair
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|nflyFlags
operator|.
name|add
argument_list|(
name|nflyKey
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|nflyKey
operator|+
literal|": Infeasible"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|NflyFSystem
argument_list|(
name|uris
argument_list|,
name|conf
argument_list|,
name|minRepl
argument_list|,
name|nflyFlags
argument_list|)
return|;
block|}
block|}
end_class

end_unit

