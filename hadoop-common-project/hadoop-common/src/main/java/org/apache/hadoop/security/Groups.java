begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Ticker
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A user-to-groups mapping service.  *   * {@link Groups} allows for server to get the various group memberships  * of a given user via the {@link #getGroups(String)} call, thus ensuring   * a consistent user-to-groups mapping and protects against vagaries of   * different mappings on servers and clients in a Hadoop cluster.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Groups
specifier|public
class|class
name|Groups
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Groups
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|impl
specifier|private
specifier|final
name|GroupMappingServiceProvider
name|impl
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cache
decl_stmt|;
DECL|field|staticMapRef
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|staticMapRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cacheTimeout
specifier|private
specifier|final
name|long
name|cacheTimeout
decl_stmt|;
DECL|field|negativeCacheTimeout
specifier|private
specifier|final
name|long
name|negativeCacheTimeout
decl_stmt|;
DECL|field|warningDeltaMs
specifier|private
specifier|final
name|long
name|warningDeltaMs
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
DECL|field|negativeCache
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|negativeCache
decl_stmt|;
DECL|field|reloadGroupsInBackground
specifier|private
specifier|final
name|boolean
name|reloadGroupsInBackground
decl_stmt|;
DECL|field|reloadGroupsThreadCount
specifier|private
specifier|final
name|int
name|reloadGroupsThreadCount
decl_stmt|;
DECL|field|backgroundRefreshSuccess
specifier|private
specifier|final
name|AtomicLong
name|backgroundRefreshSuccess
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|backgroundRefreshException
specifier|private
specifier|final
name|AtomicLong
name|backgroundRefreshException
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|backgroundRefreshQueued
specifier|private
specifier|final
name|AtomicLong
name|backgroundRefreshQueued
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|backgroundRefreshRunning
specifier|private
specifier|final
name|AtomicLong
name|backgroundRefreshRunning
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|Groups (Configuration conf)
specifier|public
name|Groups
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Groups (Configuration conf, final Timer timer)
specifier|public
name|Groups
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Timer
name|timer
parameter_list|)
block|{
name|impl
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|JniBasedUnixGroupsMappingWithFallback
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cacheTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS_DEFAULT
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|negativeCacheTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS_DEFAULT
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|warningDeltaMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_WARN_AFTER_MS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_WARN_AFTER_MS_DEFAULT
argument_list|)
expr_stmt|;
name|reloadGroupsInBackground
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_DEFAULT
argument_list|)
expr_stmt|;
name|reloadGroupsThreadCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_THREADS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_THREADS_DEFAULT
argument_list|)
expr_stmt|;
name|parseStaticMapping
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|refreshAfterWrite
argument_list|(
name|cacheTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
operator|new
name|TimerToTickerAdapter
argument_list|(
name|timer
argument_list|)
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|10
operator|*
name|cacheTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|GroupCacheLoader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|negativeCacheTimeout
operator|>
literal|0
condition|)
block|{
name|Cache
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tempMap
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterWrite
argument_list|(
name|negativeCacheTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|ticker
argument_list|(
operator|new
name|TimerToTickerAdapter
argument_list|(
name|timer
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|negativeCache
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
name|tempMap
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Group mapping impl="
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; cacheTimeout="
operator|+
name|cacheTimeout
operator|+
literal|"; warningDeltaMs="
operator|+
name|warningDeltaMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNegativeCache ()
name|Set
argument_list|<
name|String
argument_list|>
name|getNegativeCache
parameter_list|()
block|{
return|return
name|negativeCache
return|;
block|}
comment|/*    * Parse the hadoop.user.group.static.mapping.overrides configuration to    * staticUserToGroupsMap    */
DECL|method|parseStaticMapping (Configuration conf)
specifier|private
name|void
name|parseStaticMapping
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|staticMapping
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES_DEFAULT
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|mappings
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|staticMapping
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|staticUserToGroupsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|users
range|:
name|mappings
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|userToGroups
init|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|users
argument_list|,
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|userToGroups
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
name|userToGroups
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Configuration "
operator|+
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES
operator|+
literal|" is invalid"
argument_list|)
throw|;
block|}
name|String
index|[]
name|userToGroupsArray
init|=
name|userToGroups
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|userToGroups
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|userToGroupsArray
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|userToGroupsArray
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|groups
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|userToGroupsArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|staticUserToGroupsMap
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
name|staticMapRef
operator|.
name|set
argument_list|(
name|staticUserToGroupsMap
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|staticUserToGroupsMap
argument_list|)
expr_stmt|;
block|}
DECL|method|isNegativeCacheEnabled ()
specifier|private
name|boolean
name|isNegativeCacheEnabled
parameter_list|()
block|{
return|return
name|negativeCacheTimeout
operator|>
literal|0
return|;
block|}
DECL|method|noGroupsForUser (String user)
specifier|private
name|IOException
name|noGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
operator|new
name|IOException
argument_list|(
literal|"No groups found for user "
operator|+
name|user
argument_list|)
return|;
block|}
comment|/**    * Get the group memberships of a given user.    * If the user's group is not cached, this method may block.    * @param user User's name    * @return the group memberships of the user    * @throws IOException if user does not exist    */
DECL|method|getGroups (final String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
specifier|final
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No need to lookup for groups of static users
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|staticUserToGroupsMap
init|=
name|staticMapRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|staticUserToGroupsMap
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|staticMapping
init|=
name|staticUserToGroupsMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticMapping
operator|!=
literal|null
condition|)
block|{
return|return
name|staticMapping
return|;
block|}
block|}
comment|// Check the negative cache first
if|if
condition|(
name|isNegativeCacheEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|negativeCache
operator|.
name|contains
argument_list|(
name|user
argument_list|)
condition|)
block|{
throw|throw
name|noGroupsForUser
argument_list|(
name|user
argument_list|)
throw|;
block|}
block|}
try|try
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
DECL|method|getBackgroundRefreshSuccess ()
specifier|public
name|long
name|getBackgroundRefreshSuccess
parameter_list|()
block|{
return|return
name|backgroundRefreshSuccess
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getBackgroundRefreshException ()
specifier|public
name|long
name|getBackgroundRefreshException
parameter_list|()
block|{
return|return
name|backgroundRefreshException
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getBackgroundRefreshQueued ()
specifier|public
name|long
name|getBackgroundRefreshQueued
parameter_list|()
block|{
return|return
name|backgroundRefreshQueued
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getBackgroundRefreshRunning ()
specifier|public
name|long
name|getBackgroundRefreshRunning
parameter_list|()
block|{
return|return
name|backgroundRefreshRunning
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Convert millisecond times from hadoop's timer to guava's nanosecond ticker.    */
DECL|class|TimerToTickerAdapter
specifier|private
specifier|static
class|class
name|TimerToTickerAdapter
extends|extends
name|Ticker
block|{
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|method|TimerToTickerAdapter (Timer timer)
specifier|public
name|TimerToTickerAdapter
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|long
name|read
parameter_list|()
block|{
specifier|final
name|long
name|NANOSECONDS_PER_MS
init|=
literal|1000000
decl_stmt|;
return|return
name|timer
operator|.
name|monotonicNow
argument_list|()
operator|*
name|NANOSECONDS_PER_MS
return|;
block|}
block|}
comment|/**    * Deals with loading data into the cache.    */
DECL|class|GroupCacheLoader
specifier|private
class|class
name|GroupCacheLoader
extends|extends
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|executorService
specifier|private
name|ListeningExecutorService
name|executorService
decl_stmt|;
DECL|method|GroupCacheLoader ()
name|GroupCacheLoader
parameter_list|()
block|{
if|if
condition|(
name|reloadGroupsInBackground
condition|)
block|{
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"Group-Cache-Reload"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// With coreThreadCount == maxThreadCount we effectively
comment|// create a fixed size thread pool. As allowCoreThreadTimeOut
comment|// has been set, all threads will die after 60 seconds of non use
name|ThreadPoolExecutor
name|parentExecutor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|reloadGroupsThreadCount
argument_list|,
name|reloadGroupsThreadCount
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
argument_list|,
name|threadFactory
argument_list|)
decl_stmt|;
name|parentExecutor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executorService
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|parentExecutor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method will block if a cache entry doesn't exist, and      * any subsequent requests for the same user will wait on this      * request to return. If a user already exists in the cache,      * and when the key expires, the first call to reload the key      * will block, but subsequent requests will return the old      * value until the blocking thread returns.      * If reloadGroupsInBackground is true, then the thread that      * needs to refresh an expired key will not block either. Instead      * it will return the old cache value and schedule a background      * refresh      * @param user key of cache      * @return List of groups belonging to user      * @throws IOException to prevent caching negative entries      */
annotation|@
name|Override
DECL|method|load (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|load
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|TraceScope
name|scope
init|=
literal|null
decl_stmt|;
name|Tracer
name|tracer
init|=
name|Tracer
operator|.
name|curThreadTracer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
name|scope
operator|=
name|tracer
operator|.
name|newScope
argument_list|(
literal|"Groups#fetchGroupList"
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addKVAnnotation
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
try|try
block|{
name|groups
operator|=
name|fetchGroupList
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isNegativeCacheEnabled
argument_list|()
condition|)
block|{
name|negativeCache
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|// We throw here to prevent Cache from retaining an empty group
throw|throw
name|noGroupsForUser
argument_list|(
name|user
argument_list|)
throw|;
block|}
comment|// return immutable de-duped list
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|groups
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Override the reload method to provide an asynchronous implementation. If      * reloadGroupsInBackground is false, then this method defers to the super      * implementation, otherwise is arranges for the cache to be updated later      */
annotation|@
name|Override
DECL|method|reload (final String key, List<String> oldValue)
specifier|public
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|reload
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|oldValue
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|reloadGroupsInBackground
condition|)
block|{
return|return
name|super
operator|.
name|reload
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|)
return|;
block|}
name|backgroundRefreshQueued
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listenableFuture
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|backgroundRefreshQueued
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|backgroundRefreshRunning
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|load
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|results
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|listenableFuture
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
block|{
name|backgroundRefreshSuccess
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|backgroundRefreshRunning
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|backgroundRefreshException
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|backgroundRefreshRunning
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|listenableFuture
return|;
block|}
comment|/**      * Queries impl for groups belonging to the user. This could involve I/O and take awhile.      */
DECL|method|fetchGroupList (String user)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fetchGroupList
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startMs
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupList
init|=
name|impl
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|long
name|endMs
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|deltaMs
init|=
name|endMs
operator|-
name|startMs
decl_stmt|;
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|addGetGroups
argument_list|(
name|deltaMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|deltaMs
operator|>
name|warningDeltaMs
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Potential performance problem: getGroups(user="
operator|+
name|user
operator|+
literal|") "
operator|+
literal|"took "
operator|+
name|deltaMs
operator|+
literal|" milliseconds."
argument_list|)
expr_stmt|;
block|}
return|return
name|groupList
return|;
block|}
block|}
comment|/**    * Refresh all user-to-groups mappings.    */
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"clearing userToGroupsMap cache"
argument_list|)
expr_stmt|;
try|try
block|{
name|impl
operator|.
name|cacheGroupsRefresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error refreshing groups cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNegativeCacheEnabled
argument_list|()
condition|)
block|{
name|negativeCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add groups to cache    *    * @param groups list of groups to add to cache    */
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
try|try
block|{
name|impl
operator|.
name|cacheGroupsAdd
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error caching groups"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|GROUPS
specifier|private
specifier|static
name|Groups
name|GROUPS
init|=
literal|null
decl_stmt|;
comment|/**    * Get the groups being used to map user-to-groups.    * @return the groups being used to map user-to-groups.    */
DECL|method|getUserToGroupsMappingService ()
specifier|public
specifier|static
name|Groups
name|getUserToGroupsMappingService
parameter_list|()
block|{
return|return
name|getUserToGroupsMappingService
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the groups being used to map user-to-groups.    * @param conf    * @return the groups being used to map user-to-groups.    */
DECL|method|getUserToGroupsMappingService ( Configuration conf)
specifier|public
specifier|static
specifier|synchronized
name|Groups
name|getUserToGroupsMappingService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|GROUPS
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" Creating new Groups object"
argument_list|)
expr_stmt|;
block|}
name|GROUPS
operator|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|GROUPS
return|;
block|}
comment|/**    * Create new groups used to map user-to-groups with loaded configuration.    * @param conf    * @return the groups being used to map user-to-groups.    */
annotation|@
name|Private
specifier|public
specifier|static
specifier|synchronized
name|Groups
DECL|method|getUserToGroupsMappingServiceWithLoadedConfiguration ( Configuration conf)
name|getUserToGroupsMappingServiceWithLoadedConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|GROUPS
operator|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|GROUPS
return|;
block|}
block|}
end_class

end_unit

