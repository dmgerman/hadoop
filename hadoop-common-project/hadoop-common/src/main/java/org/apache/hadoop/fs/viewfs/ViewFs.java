begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|Constants
operator|.
name|PERMISSION_555
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|local
operator|.
name|LocalConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|InodeTree
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|InodeTree
operator|.
name|INodeLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * ViewFs (extends the AbstractFileSystem interface) implements a client-side  * mount table. The viewFs file system is implemented completely in memory on  * the client side. The client-side mount table allows a client to provide a   * customized view of a file system namespace that is composed from   * one or more individual file systems (a localFs or Hdfs, S3fs, etc).  * For example one could have a mount table that provides links such as  *<ul>  *<li>  /user          -> hdfs://nnContainingUserDir/user  *<li>  /project/foo   -> hdfs://nnProject1/projects/foo  *<li>  /project/bar   -> hdfs://nnProject2/projects/bar  *<li>  /tmp           -> hdfs://nnTmp/privateTmpForUserXXX  *</ul>   *   * ViewFs is specified with the following URI:<b>viewfs:///</b>   *<p>  * To use viewfs one would typically set the default file system in the  * config  (i.e. fs.default.name< = viewfs:///) along with the  * mount table config variables as described below.   *   *<p>  *<b> ** Config variables to specify the mount table entries **</b>  *<p>  *   * The file system is initialized from the standard Hadoop config through  * config variables.  * See {@link FsConstants} for URI and Scheme constants;   * See {@link Constants} for config var constants;   * see {@link ConfigUtil} for convenient lib.  *   *<p>  * All the mount table config entries for view fs are prefixed by   *<b>fs.viewfs.mounttable.</b>  * For example the above example can be specified with the following  *  config variables:  *<ul>  *<li> fs.viewfs.mounttable.default.link./user=  *  hdfs://nnContainingUserDir/user  *<li> fs.viewfs.mounttable.default.link./project/foo=  *  hdfs://nnProject1/projects/foo  *<li> fs.viewfs.mounttable.default.link./project/bar=  *  hdfs://nnProject2/projects/bar  *<li> fs.viewfs.mounttable.default.link./tmp=  *  hdfs://nnTmp/privateTmpForUserXXX  *</ul>  *    * The default mount table (when no authority is specified) is   * from config variables prefixed by<b>fs.viewFs.mounttable.default</b>  * The authority component of a URI can be used to specify a different mount  * table. For example,  *<ul>  *<li>  viewfs://sanjayMountable/  *</ul>  * is initialized from fs.viewFs.mounttable.sanjayMountable.* config variables.  *   *<p>   *<b> **** Merge Mounts ****</b>(NOTE: merge mounts are not implemented yet.)  *<p>  *    *   One can also use "MergeMounts" to merge several directories (this is  *   sometimes  called union-mounts or junction-mounts in the literature.  *   For example of the home directories are stored on say two file systems  *   (because they do not fit on one) then one could specify a mount  *   entry such as following merges two dirs:  *<ul>  *<li> /user -> hdfs://nnUser1/user,hdfs://nnUser2/user  *</ul>  *  Such a mergeLink can be specified with the following config var where ","  *  is used as the separator for each of links to be merged:  *<ul>  *<li> fs.viewfs.mounttable.default.linkMerge./user=  *  hdfs://nnUser1/user,hdfs://nnUser1/user  *</ul>  *   A special case of the merge mount is where mount table's root is merged  *   with the root (slash) of another file system:  *<ul>  *<li>    fs.viewfs.mounttable.default.linkMergeSlash=hdfs://nn99/  *</ul>  *   In this cases the root of the mount table is merged with the root of  *<b>hdfs://nn99/</b>   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
comment|/*Evolving for a release,to be changed to Stable */
DECL|class|ViewFs
specifier|public
class|class
name|ViewFs
extends|extends
name|AbstractFileSystem
block|{
DECL|field|creationTime
specifier|final
name|long
name|creationTime
decl_stmt|;
comment|// of the the mount table
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// the user/group of user who created mtable
DECL|field|config
specifier|final
name|Configuration
name|config
decl_stmt|;
DECL|field|fsState
name|InodeTree
argument_list|<
name|AbstractFileSystem
argument_list|>
name|fsState
decl_stmt|;
comment|// the fs state; ie the mount table
DECL|field|homeDir
name|Path
name|homeDir
init|=
literal|null
decl_stmt|;
DECL|method|readOnlyMountTable (final String operation, final String p)
specifier|static
name|AccessControlException
name|readOnlyMountTable
parameter_list|(
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|String
name|p
parameter_list|)
block|{
return|return
operator|new
name|AccessControlException
argument_list|(
literal|"InternalDir of ViewFileSystem is readonly; operation="
operator|+
name|operation
operator|+
literal|"Path="
operator|+
name|p
argument_list|)
return|;
block|}
DECL|method|readOnlyMountTable (final String operation, final Path p)
specifier|static
name|AccessControlException
name|readOnlyMountTable
parameter_list|(
specifier|final
name|String
name|operation
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
block|{
return|return
name|readOnlyMountTable
argument_list|(
name|operation
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MountPoint
specifier|static
specifier|public
class|class
name|MountPoint
block|{
DECL|field|src
specifier|private
name|Path
name|src
decl_stmt|;
comment|// the src of the mount
DECL|field|targets
specifier|private
name|URI
index|[]
name|targets
decl_stmt|;
comment|//  target of the mount; Multiple targets imply mergeMount
DECL|method|MountPoint (Path srcPath, URI[] targetURIs)
name|MountPoint
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|URI
index|[]
name|targetURIs
parameter_list|)
block|{
name|src
operator|=
name|srcPath
expr_stmt|;
name|targets
operator|=
name|targetURIs
expr_stmt|;
block|}
DECL|method|getSrc ()
name|Path
name|getSrc
parameter_list|()
block|{
return|return
name|src
return|;
block|}
DECL|method|getTargets ()
name|URI
index|[]
name|getTargets
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
block|}
DECL|method|ViewFs (final Configuration conf)
specifier|public
name|ViewFs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * This constructor has the signature needed by    * {@link AbstractFileSystem#createFileSystem(URI, Configuration)}.    *     * @param theUri which must be that of ViewFs    * @param conf    * @throws IOException    * @throws URISyntaxException     */
DECL|method|ViewFs (final URI theUri, final Configuration conf)
name|ViewFs
parameter_list|(
specifier|final
name|URI
name|theUri
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|theUri
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|creationTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|config
operator|=
name|conf
expr_stmt|;
comment|// Now build  client side view (i.e. client side mount table) from config.
name|String
name|authority
init|=
name|theUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|fsState
operator|=
operator|new
name|InodeTree
argument_list|<
name|AbstractFileSystem
argument_list|>
argument_list|(
name|conf
argument_list|,
name|authority
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AbstractFileSystem
name|getTargetFileSystem
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedFileSystemException
block|{
name|String
name|pathString
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pathString
operator|=
literal|"/"
expr_stmt|;
block|}
return|return
operator|new
name|ChRootedFs
argument_list|(
name|AbstractFileSystem
operator|.
name|createFileSystem
argument_list|(
name|uri
argument_list|,
name|config
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractFileSystem
name|getTargetFileSystem
parameter_list|(
specifier|final
name|INodeDir
argument_list|<
name|AbstractFileSystem
argument_list|>
name|dir
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|InternalDirOfViewFs
argument_list|(
name|dir
argument_list|,
name|creationTime
argument_list|,
name|ugi
argument_list|,
name|getUri
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AbstractFileSystem
name|getTargetFileSystem
parameter_list|(
name|URI
index|[]
name|mergeFsURIList
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|UnsupportedFileSystemException
block|{
throw|throw
operator|new
name|UnsupportedFileSystemException
argument_list|(
literal|"mergefs not implemented yet"
argument_list|)
throw|;
comment|// return MergeFs.createMergeFs(mergeFsURIList, config);
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|LocalConfigKeys
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUriDefaultPort ()
specifier|public
name|int
name|getUriDefaultPort
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
if|if
condition|(
name|homeDir
operator|==
literal|null
condition|)
block|{
name|String
name|base
init|=
name|fsState
operator|.
name|getHomeDirPrefixValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|base
operator|=
literal|"/user"
expr_stmt|;
block|}
name|homeDir
operator|=
operator|(
name|base
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|?
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
else|:
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|base
operator|+
literal|"/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|homeDir
return|;
block|}
annotation|@
name|Override
DECL|method|resolvePath (final Path f)
specifier|public
name|Path
name|resolvePath
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|AccessControlException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
specifier|final
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
decl_stmt|;
name|res
operator|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|resolvePath
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createInternal (final Path f, final EnumSet<CreateFlag> flag, final FsPermission absolutePermission, final int bufferSize, final short replication, final long blockSize, final Progressable progress, final ChecksumOpt checksumOpt, final boolean createParent)
specifier|public
name|FSDataOutputStream
name|createInternal
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
specifier|final
name|FsPermission
name|absolutePermission
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|,
specifier|final
name|ChecksumOpt
name|checksumOpt
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
throws|,
name|FileNotFoundException
throws|,
name|ParentNotDirectoryException
throws|,
name|UnsupportedFileSystemException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|createParent
condition|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"create"
argument_list|,
name|f
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
assert|assert
operator|(
name|res
operator|.
name|remainingPath
operator|!=
literal|null
operator|)
assert|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|createInternal
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|flag
argument_list|,
name|absolutePermission
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|checksumOpt
argument_list|,
name|createParent
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// If internal dir or target is a mount link (ie remainingPath is Slash)
if|if
condition|(
name|res
operator|.
name|isInternalDir
argument_list|()
operator|||
name|res
operator|.
name|remainingPath
operator|==
name|InodeTree
operator|.
name|SlashPath
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Cannot delete internal mount table directory: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|delete
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path f, final long start, final long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileBlockLocations
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileChecksum
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//  FileStatus#getPath is a fully qualified path relative to the root of
comment|// target file system.
comment|// We need to change it to viewfs URI - relative to root of mount table.
comment|// The implementors of RawLocalFileSystem were trying to be very smart.
comment|// They implement FileStatus#getOwener lazily -- the object
comment|// returned is really a RawLocalFileSystem that expect the
comment|// FileStatus#getPath to be unchanged so that it can get owner when needed.
comment|// Hence we need to interpose a new ViewFsFileStatus that works around.
name|FileStatus
name|status
init|=
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
decl_stmt|;
return|return
operator|new
name|ViewFsFileStatus
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|access (Path path, FsAction mode)
specifier|public
name|void
name|access
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|access
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileLinkStatus (final Path f)
specifier|public
name|FileStatus
name|getFileLinkStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnsupportedFileSystemException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// do not follow mount link
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getFileLinkStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFsStatus ()
specifier|public
name|FsStatus
name|getFsStatus
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
operator|new
name|FsStatus
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatusIterator (final Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|listStatusIterator
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
specifier|final
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|fsIter
init|=
name|res
operator|.
name|targetFileSystem
operator|.
name|listStatusIterator
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
return|return
name|fsIter
return|;
block|}
return|return
operator|new
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
specifier|final
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|myIter
decl_stmt|;
specifier|final
name|ChRootedFs
name|targetFs
decl_stmt|;
block|{
comment|// Init
name|myIter
operator|=
name|fsIter
expr_stmt|;
name|targetFs
operator|=
operator|(
name|ChRootedFs
operator|)
name|res
operator|.
name|targetFileSystem
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|myIter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|myIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|targetFs
operator|.
name|stripOutRoot
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ViewFsFileStatus
argument_list|(
name|status
argument_list|,
name|makeQualified
argument_list|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|res
operator|.
name|resolvedPath
argument_list|,
name|suffix
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statusLst
init|=
name|res
operator|.
name|targetFileSystem
operator|.
name|listStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
comment|// We need to change the name in the FileStatus as described in
comment|// {@link #getFileStatus }
name|ChRootedFs
name|targetFs
decl_stmt|;
name|targetFs
operator|=
operator|(
name|ChRootedFs
operator|)
name|res
operator|.
name|targetFileSystem
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statusLst
control|)
block|{
name|String
name|suffix
init|=
name|targetFs
operator|.
name|stripOutRoot
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|statusLst
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|ViewFsFileStatus
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|makeQualified
argument_list|(
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|res
operator|.
name|resolvedPath
argument_list|,
name|suffix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statusLst
return|;
block|}
annotation|@
name|Override
DECL|method|mkdir (final Path dir, final FsPermission permission, final boolean createParent)
specifier|public
name|void
name|mkdir
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|mkdir
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|permission
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|open
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|truncate (final Path f, final long newLength)
specifier|public
name|boolean
name|truncate
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|newLength
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|truncate
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|newLength
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (final Path src, final Path dst, final boolean overwrite)
specifier|public
name|void
name|renameInternal
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
comment|// passing resolveLastComponet as false to catch renaming a mount point
comment|// itself we need to catch this as an internal operation and fail.
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|resSrc
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|src
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|resSrc
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Cannot Rename within internal dirs of mount table: it is readOnly"
argument_list|)
throw|;
block|}
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|resDst
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|resDst
operator|.
name|isInternalDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Cannot Rename within internal dirs of mount table: it is readOnly"
argument_list|)
throw|;
block|}
comment|/**     // Alternate 1: renames within same file system - valid but we disallow     // Alternate 2: (as described in next para - valid but we have disallowed it     //     // Note we compare the URIs. the URIs include the link targets.      // hence we allow renames across mount links as long as the mount links     // point to the same target.     if (!resSrc.targetFileSystem.getUri().equals(               resDst.targetFileSystem.getUri())) {       throw new IOException("Renames across Mount points not supported");     }     */
comment|//
comment|// Alternate 3 : renames ONLY within the the same mount links.
comment|//
if|if
condition|(
name|resSrc
operator|.
name|targetFileSystem
operator|!=
name|resDst
operator|.
name|targetFileSystem
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Renames across Mount points not supported"
argument_list|)
throw|;
block|}
name|resSrc
operator|.
name|targetFileSystem
operator|.
name|renameInternal
argument_list|(
name|resSrc
operator|.
name|remainingPath
argument_list|,
name|resDst
operator|.
name|remainingPath
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (final Path src, final Path dst)
specifier|public
name|void
name|renameInternal
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
throws|,
name|FileNotFoundException
throws|,
name|ParentNotDirectoryException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|renameInternal
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|supportsSymlinks ()
specifier|public
name|boolean
name|supportsSymlinks
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createSymlink (final Path target, final Path link, final boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
specifier|final
name|Path
name|target
parameter_list|,
specifier|final
name|Path
name|link
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|link
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|createParent
condition|)
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"createSymlink"
argument_list|,
name|link
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
assert|assert
operator|(
name|res
operator|.
name|remainingPath
operator|!=
literal|null
operator|)
assert|;
name|res
operator|.
name|targetFileSystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|res
operator|.
name|remainingPath
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLinkTarget (final Path f)
specifier|public
name|Path
name|getLinkTarget
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// do not follow mount link
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getLinkTarget
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path f, final String username, final String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setOwner
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path f, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setPermission
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path f, final short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|setReplication
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|replication
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path f, final long mtime, final long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|f
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setTimes
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (final boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
specifier|final
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
comment|// This is a file system level operations, however ViewFs
comment|// points to many file systems. Noop for ViewFs.
block|}
DECL|method|getMountPoints ()
specifier|public
name|MountPoint
index|[]
name|getMountPoints
parameter_list|()
block|{
name|List
argument_list|<
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|AbstractFileSystem
argument_list|>
argument_list|>
name|mountPoints
init|=
name|fsState
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|MountPoint
index|[]
name|result
init|=
operator|new
name|MountPoint
index|[
name|mountPoints
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mountPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|MountPoint
argument_list|(
operator|new
name|Path
argument_list|(
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|src
argument_list|)
argument_list|,
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|target
operator|.
name|targetDirLinkList
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationTokens (String renewer)
specifier|public
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|AbstractFileSystem
argument_list|>
argument_list|>
name|mountPoints
init|=
name|fsState
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|int
name|initialListSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InodeTree
operator|.
name|MountPoint
argument_list|<
name|AbstractFileSystem
argument_list|>
name|im
range|:
name|mountPoints
control|)
block|{
name|initialListSize
operator|+=
name|im
operator|.
name|target
operator|.
name|targetDirLinkList
operator|.
name|length
expr_stmt|;
block|}
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|initialListSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mountPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
name|mountPoints
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|target
operator|.
name|targetFileSystem
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|isValidName (String src)
specifier|public
name|boolean
name|isValidName
parameter_list|(
name|String
name|src
parameter_list|)
block|{
comment|// Prefix validated at mount time and rest of path validated by mount target.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|modifyAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|modifyAclEntries
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|removeAclEntries
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeDefaultAcl (Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|removeDefaultAcl
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAcl (Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|removeAcl
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAcl (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setAcl
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAclStatus (Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getAclStatus
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setXAttr (Path path, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|setXAttr
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getXAttr (Path path, String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getXAttr
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getXAttrs
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path, List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|getXAttrs
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|names
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listXAttrs (Path path)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|targetFileSystem
operator|.
name|listXAttrs
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeXAttr (Path path, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
name|fsState
operator|.
name|resolve
argument_list|(
name|getUriPath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|res
operator|.
name|targetFileSystem
operator|.
name|removeXAttr
argument_list|(
name|res
operator|.
name|remainingPath
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/*    * An instance of this class represents an internal dir of the viewFs     * ie internal dir of the mount table.    * It is a ready only mount tbale and create, mkdir or delete operations    * are not allowed.    * If called on create or mkdir then this target is the parent of the    * directory in which one is trying to create or mkdir; hence    * in this case the path name passed in is the last component.     * Otherwise this target is the end point of the path and hence    * the path name passed in is null.     */
DECL|class|InternalDirOfViewFs
specifier|static
class|class
name|InternalDirOfViewFs
extends|extends
name|AbstractFileSystem
block|{
DECL|field|theInternalDir
specifier|final
name|InodeTree
operator|.
name|INodeDir
argument_list|<
name|AbstractFileSystem
argument_list|>
name|theInternalDir
decl_stmt|;
DECL|field|creationTime
specifier|final
name|long
name|creationTime
decl_stmt|;
comment|// of the the mount table
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// the user/group of user who created mtable
DECL|field|myUri
specifier|final
name|URI
name|myUri
decl_stmt|;
comment|// the URI of the outer ViewFs
DECL|method|InternalDirOfViewFs (final InodeTree.INodeDir<AbstractFileSystem> dir, final long cTime, final UserGroupInformation ugi, final URI uri)
specifier|public
name|InternalDirOfViewFs
parameter_list|(
specifier|final
name|InodeTree
operator|.
name|INodeDir
argument_list|<
name|AbstractFileSystem
argument_list|>
name|dir
parameter_list|,
specifier|final
name|long
name|cTime
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|FsConstants
operator|.
name|VIEWFS_SCHEME
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|theInternalDir
operator|=
name|dir
expr_stmt|;
name|creationTime
operator|=
name|cTime
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
name|myUri
operator|=
name|uri
expr_stmt|;
block|}
DECL|method|checkPathIsSlash (final Path f)
specifier|static
specifier|private
name|void
name|checkPathIsSlash
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|!=
name|InodeTree
operator|.
name|SlashPath
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Internal implementation error: expected file name to be /"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createInternal (final Path f, final EnumSet<CreateFlag> flag, final FsPermission absolutePermission, final int bufferSize, final short replication, final long blockSize, final Progressable progress, final ChecksumOpt checksumOpt, final boolean createParent)
specifier|public
name|FSDataOutputStream
name|createInternal
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
specifier|final
name|FsPermission
name|absolutePermission
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|,
specifier|final
name|ChecksumOpt
name|checksumOpt
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
throws|,
name|FileNotFoundException
throws|,
name|ParentNotDirectoryException
throws|,
name|UnsupportedFileSystemException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"create"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"delete"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path f, final long start, final long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_555
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|theInternalDir
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileLinkStatus (final Path f)
specifier|public
name|FileStatus
name|getFileLinkStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|// look up i internalDirs children - ignore first Slash
name|INode
argument_list|<
name|AbstractFileSystem
argument_list|>
name|inode
init|=
name|theInternalDir
operator|.
name|children
operator|.
name|get
argument_list|(
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"viewFs internal mount table - missing entry:"
operator|+
name|f
argument_list|)
throw|;
block|}
name|FileStatus
name|result
decl_stmt|;
if|if
condition|(
name|inode
operator|instanceof
name|INodeLink
condition|)
block|{
name|INodeLink
argument_list|<
name|AbstractFileSystem
argument_list|>
name|inodelink
init|=
operator|(
name|INodeLink
argument_list|<
name|AbstractFileSystem
argument_list|>
operator|)
name|inode
decl_stmt|;
name|result
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_555
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|inodelink
operator|.
name|getTargetLink
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_555
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getFsStatus ()
specifier|public
name|FsStatus
name|getFsStatus
parameter_list|()
block|{
return|return
operator|new
name|FsStatus
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FsServerDefaults not implemented yet"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUriDefaultPort ()
specifier|public
name|int
name|getUriDefaultPort
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|result
init|=
operator|new
name|FileStatus
index|[
name|theInternalDir
operator|.
name|children
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|INode
argument_list|<
name|AbstractFileSystem
argument_list|>
argument_list|>
name|iEntry
range|:
name|theInternalDir
operator|.
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|INode
argument_list|<
name|AbstractFileSystem
argument_list|>
name|inode
init|=
name|iEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|instanceof
name|INodeLink
condition|)
block|{
name|INodeLink
argument_list|<
name|AbstractFileSystem
argument_list|>
name|link
init|=
operator|(
name|INodeLink
argument_list|<
name|AbstractFileSystem
argument_list|>
operator|)
name|inode
decl_stmt|;
name|result
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_555
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|link
operator|.
name|getTargetLink
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|creationTime
argument_list|,
name|creationTime
argument_list|,
name|PERMISSION_555
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|inode
operator|.
name|fullPath
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|myUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|mkdir (final Path dir, final FsPermission permission, final boolean createParent)
specifier|public
name|void
name|mkdir
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileAlreadyExistsException
block|{
if|if
condition|(
name|theInternalDir
operator|.
name|isRoot
operator|&&
name|dir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"/ already exits"
argument_list|)
throw|;
block|}
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"mkdir"
argument_list|,
name|dir
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path points to dir not a file"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|truncate (final Path f, final long newLength)
specifier|public
name|boolean
name|truncate
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|newLength
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"truncate"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (final Path src, final Path dst)
specifier|public
name|void
name|renameInternal
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|checkPathIsSlash
argument_list|(
name|dst
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"rename"
argument_list|,
name|src
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|supportsSymlinks ()
specifier|public
name|boolean
name|supportsSymlinks
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createSymlink (final Path target, final Path link, final boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
specifier|final
name|Path
name|target
parameter_list|,
specifier|final
name|Path
name|link
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"createSymlink"
argument_list|,
name|link
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getLinkTarget (final Path f)
specifier|public
name|Path
name|getLinkTarget
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|getFileLinkStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getSymlink
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path f, final String username, final String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setOwner"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path f, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setPermission"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path f, final short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setReplication"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path f, final long mtime, final long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|f
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setTimes"
argument_list|,
name|f
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (final boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
specifier|final
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setVerifyChecksum"
argument_list|,
literal|""
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|modifyAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"modifyAclEntries"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|removeAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"removeAclEntries"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|removeDefaultAcl (Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"removeDefaultAcl"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|removeAcl (Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"removeAcl"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setAcl (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setAcl"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getAclStatus (Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
operator|.
name|owner
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|group
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|addEntries
argument_list|(
name|AclUtil
operator|.
name|getMinimalAcl
argument_list|(
name|PERMISSION_555
argument_list|)
argument_list|)
operator|.
name|stickyBit
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setXAttr (Path path, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"setXAttr"
argument_list|,
name|path
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getXAttr (Path path, String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotInMountpointException
argument_list|(
name|path
argument_list|,
literal|"getXAttr"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotInMountpointException
argument_list|(
name|path
argument_list|,
literal|"getXAttrs"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path, List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotInMountpointException
argument_list|(
name|path
argument_list|,
literal|"getXAttrs"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listXAttrs (Path path)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotInMountpointException
argument_list|(
name|path
argument_list|,
literal|"listXAttrs"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|removeXAttr (Path path, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathIsSlash
argument_list|(
name|path
argument_list|)
expr_stmt|;
throw|throw
name|readOnlyMountTable
argument_list|(
literal|"removeXAttr"
argument_list|,
name|path
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

