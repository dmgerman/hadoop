begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This is a debugging class that can be used by callers to track  * whether a specific lock is being held for too long and periodically  * log a warning and stack trace, if so.  *  * The logged warnings are throttled so that logs are not spammed.  *  * A new instance of InstrumentedLock can be created for each object  * that needs to be instrumented.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InstrumentedLock
specifier|public
class|class
name|InstrumentedLock
implements|implements
name|Lock
block|{
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|Log
name|logger
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Timer
name|clock
decl_stmt|;
comment|/** Minimum gap between two lock warnings. */
DECL|field|minLoggingGap
specifier|private
specifier|final
name|long
name|minLoggingGap
decl_stmt|;
comment|/** Threshold for detecting long lock held time. */
DECL|field|lockWarningThreshold
specifier|private
specifier|final
name|long
name|lockWarningThreshold
decl_stmt|;
comment|// Tracking counters for lock statistics.
DECL|field|lockAcquireTimestamp
specifier|private
specifier|volatile
name|long
name|lockAcquireTimestamp
decl_stmt|;
DECL|field|lastLogTimestamp
specifier|private
specifier|final
name|AtomicLong
name|lastLogTimestamp
decl_stmt|;
DECL|field|warningsSuppressed
specifier|private
specifier|final
name|AtomicLong
name|warningsSuppressed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Create a instrumented lock instance which logs a warning message    * when lock held time is above given threshold.    *    * @param name the identifier of the lock object    * @param logger this class does not have its own logger, will log to the    *               given logger instead    * @param minLoggingGapMs  the minimum time gap between two log messages,    *                         this is to avoid spamming to many logs    * @param lockWarningThresholdMs the time threshold to view lock held    *                               time as being "too long"    */
DECL|method|InstrumentedLock (String name, Log logger, long minLoggingGapMs, long lockWarningThresholdMs)
specifier|public
name|InstrumentedLock
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|logger
parameter_list|,
name|long
name|minLoggingGapMs
parameter_list|,
name|long
name|lockWarningThresholdMs
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
operator|new
name|ReentrantLock
argument_list|()
argument_list|,
name|minLoggingGapMs
argument_list|,
name|lockWarningThresholdMs
argument_list|)
expr_stmt|;
block|}
DECL|method|InstrumentedLock (String name, Log logger, Lock lock, long minLoggingGapMs, long lockWarningThresholdMs)
specifier|public
name|InstrumentedLock
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|logger
parameter_list|,
name|Lock
name|lock
parameter_list|,
name|long
name|minLoggingGapMs
parameter_list|,
name|long
name|lockWarningThresholdMs
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
name|lock
argument_list|,
name|minLoggingGapMs
argument_list|,
name|lockWarningThresholdMs
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|InstrumentedLock (String name, Log logger, Lock lock, long minLoggingGapMs, long lockWarningThresholdMs, Timer clock)
name|InstrumentedLock
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|logger
parameter_list|,
name|Lock
name|lock
parameter_list|,
name|long
name|minLoggingGapMs
parameter_list|,
name|long
name|lockWarningThresholdMs
parameter_list|,
name|Timer
name|clock
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|minLoggingGap
operator|=
name|minLoggingGapMs
expr_stmt|;
name|lockWarningThreshold
operator|=
name|lockWarningThresholdMs
expr_stmt|;
name|lastLogTimestamp
operator|=
operator|new
name|AtomicLong
argument_list|(
name|clock
operator|.
name|monotonicNow
argument_list|()
operator|-
name|Math
operator|.
name|max
argument_list|(
name|minLoggingGap
argument_list|,
name|lockWarningThreshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|startLockTiming
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lockInterruptibly ()
specifier|public
name|void
name|lockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
name|startLockTiming
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tryLock ()
specifier|public
name|boolean
name|tryLock
parameter_list|()
block|{
if|if
condition|(
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|startLockTiming
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|tryLock (long time, TimeUnit unit)
specifier|public
name|boolean
name|tryLock
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|lock
operator|.
name|tryLock
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|startLockTiming
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|unlock ()
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|long
name|localLockReleaseTime
init|=
name|clock
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|localLockAcquireTime
init|=
name|lockAcquireTimestamp
decl_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|check
argument_list|(
name|localLockAcquireTime
argument_list|,
name|localLockReleaseTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newCondition ()
specifier|public
name|Condition
name|newCondition
parameter_list|()
block|{
return|return
name|lock
operator|.
name|newCondition
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|logWarning (long lockHeldTime, long suppressed)
name|void
name|logWarning
parameter_list|(
name|long
name|lockHeldTime
parameter_list|,
name|long
name|suppressed
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Lock held time above threshold: "
operator|+
literal|"lock identifier: %s "
operator|+
literal|"lockHeldTimeMs=%d ms. Suppressed %d lock warnings. "
operator|+
literal|"The stack trace is: %s"
argument_list|,
name|name
argument_list|,
name|lockHeldTime
argument_list|,
name|suppressed
argument_list|,
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Starts timing for the instrumented lock.    */
DECL|method|startLockTiming ()
specifier|protected
name|void
name|startLockTiming
parameter_list|()
block|{
name|lockAcquireTimestamp
operator|=
name|clock
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
comment|/**    * Log a warning if the lock was held for too long.    *    * Should be invoked by the caller immediately AFTER releasing the lock.    *    * @param acquireTime  - timestamp just after acquiring the lock.    * @param releaseTime - timestamp just before releasing the lock.    */
DECL|method|check (long acquireTime, long releaseTime)
specifier|protected
name|void
name|check
parameter_list|(
name|long
name|acquireTime
parameter_list|,
name|long
name|releaseTime
parameter_list|)
block|{
if|if
condition|(
operator|!
name|logger
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|lockHeldTime
init|=
name|releaseTime
operator|-
name|acquireTime
decl_stmt|;
if|if
condition|(
name|lockWarningThreshold
operator|-
name|lockHeldTime
operator|<
literal|0
condition|)
block|{
name|long
name|now
decl_stmt|;
name|long
name|localLastLogTs
decl_stmt|;
do|do
block|{
name|now
operator|=
name|clock
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|localLastLogTs
operator|=
name|lastLogTimestamp
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|deltaSinceLastLog
init|=
name|now
operator|-
name|localLastLogTs
decl_stmt|;
comment|// check should print log or not
if|if
condition|(
name|deltaSinceLastLog
operator|-
name|minLoggingGap
operator|<
literal|0
condition|)
block|{
name|warningsSuppressed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
do|while
condition|(
operator|!
name|lastLogTimestamp
operator|.
name|compareAndSet
argument_list|(
name|localLastLogTs
argument_list|,
name|now
argument_list|)
condition|)
do|;
name|long
name|suppressed
init|=
name|warningsSuppressed
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logWarning
argument_list|(
name|lockHeldTime
argument_list|,
name|suppressed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLock ()
specifier|protected
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
DECL|method|getTimer ()
specifier|protected
name|Timer
name|getTimer
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
block|}
end_class

end_unit

