begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zstd
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zstd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DirectDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A {@link Decompressor} based on the zStandard compression algorithm.  * https://github.com/facebook/zstd  */
end_comment

begin_class
DECL|class|ZStandardDecompressor
specifier|public
class|class
name|ZStandardDecompressor
implements|implements
name|Decompressor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZStandardDecompressor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stream
specifier|private
name|long
name|stream
decl_stmt|;
DECL|field|directBufferSize
specifier|private
name|int
name|directBufferSize
decl_stmt|;
DECL|field|compressedDirectBuf
specifier|private
name|ByteBuffer
name|compressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|compressedDirectBufOff
DECL|field|bytesInCompressedBuffer
specifier|private
name|int
name|compressedDirectBufOff
decl_stmt|,
name|bytesInCompressedBuffer
decl_stmt|;
DECL|field|uncompressedDirectBuf
specifier|private
name|ByteBuffer
name|uncompressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|userBuf
specifier|private
name|byte
index|[]
name|userBuf
init|=
literal|null
decl_stmt|;
DECL|field|userBufOff
DECL|field|userBufferBytesToConsume
specifier|private
name|int
name|userBufOff
init|=
literal|0
decl_stmt|,
name|userBufferBytesToConsume
init|=
literal|0
decl_stmt|;
DECL|field|finished
specifier|private
name|boolean
name|finished
decl_stmt|;
DECL|field|remaining
specifier|private
name|int
name|remaining
init|=
literal|0
decl_stmt|;
DECL|field|nativeZStandardLoaded
specifier|private
specifier|static
name|boolean
name|nativeZStandardLoaded
init|=
literal|false
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Initialize the native library
name|initIDs
argument_list|()
expr_stmt|;
name|nativeZStandardLoaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error loading zstandard native libraries: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isNativeCodeLoaded ()
specifier|public
specifier|static
name|boolean
name|isNativeCodeLoaded
parameter_list|()
block|{
return|return
name|nativeZStandardLoaded
return|;
block|}
DECL|method|getRecommendedBufferSize ()
specifier|public
specifier|static
name|int
name|getRecommendedBufferSize
parameter_list|()
block|{
return|return
name|getStreamSize
argument_list|()
return|;
block|}
DECL|method|ZStandardDecompressor ()
specifier|public
name|ZStandardDecompressor
parameter_list|()
block|{
name|this
argument_list|(
name|getStreamSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new decompressor.    */
DECL|method|ZStandardDecompressor (int bufferSize)
specifier|public
name|ZStandardDecompressor
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|directBufferSize
operator|=
name|bufferSize
expr_stmt|;
name|compressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|stream
operator|=
name|create
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setInput (byte[] b, int off, int len)
specifier|public
name|void
name|setInput
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|this
operator|.
name|userBuf
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|userBufOff
operator|=
name|off
expr_stmt|;
name|this
operator|.
name|userBufferBytesToConsume
operator|=
name|len
expr_stmt|;
name|setInputFromSavedData
argument_list|()
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
DECL|method|setInputFromSavedData ()
specifier|private
name|void
name|setInputFromSavedData
parameter_list|()
block|{
name|compressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|bytesInCompressedBuffer
operator|=
name|userBufferBytesToConsume
expr_stmt|;
if|if
condition|(
name|bytesInCompressedBuffer
operator|>
name|directBufferSize
condition|)
block|{
name|bytesInCompressedBuffer
operator|=
name|directBufferSize
expr_stmt|;
block|}
name|compressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|put
argument_list|(
name|userBuf
argument_list|,
name|userBufOff
argument_list|,
name|bytesInCompressedBuffer
argument_list|)
expr_stmt|;
name|userBufOff
operator|+=
name|bytesInCompressedBuffer
expr_stmt|;
name|userBufferBytesToConsume
operator|-=
name|bytesInCompressedBuffer
expr_stmt|;
block|}
comment|// dictionary is not supported
annotation|@
name|Override
DECL|method|setDictionary (byte[] b, int off, int len)
specifier|public
name|void
name|setDictionary
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Dictionary support is not enabled"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|needsInput ()
specifier|public
name|boolean
name|needsInput
parameter_list|()
block|{
comment|// Consume remaining compressed data?
if|if
condition|(
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if we have consumed all input
if|if
condition|(
name|bytesInCompressedBuffer
operator|-
name|compressedDirectBufOff
operator|<=
literal|0
condition|)
block|{
comment|// Check if we have consumed all user-input
if|if
condition|(
name|userBufferBytesToConsume
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|setInputFromSavedData
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// dictionary is not supported.
annotation|@
name|Override
DECL|method|needsDictionary ()
specifier|public
name|boolean
name|needsDictionary
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|finished ()
specifier|public
name|boolean
name|finished
parameter_list|()
block|{
comment|// finished == true if ZSTD_decompressStream() returns 0
comment|// also check we have nothing left in our buffer
return|return
operator|(
name|finished
operator|&&
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|decompress (byte[] b, int off, int len)
specifier|public
name|int
name|decompress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
comment|// Check if there is uncompressed data
name|int
name|n
init|=
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
return|return
name|populateUncompressedBuffer
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|// Re-initialize the output direct buffer
name|uncompressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
comment|// Decompress data
name|n
operator|=
name|inflateBytesDirect
argument_list|(
name|compressedDirectBuf
argument_list|,
name|compressedDirectBufOff
argument_list|,
name|bytesInCompressedBuffer
argument_list|,
name|uncompressedDirectBuf
argument_list|,
literal|0
argument_list|,
name|directBufferSize
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|limit
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// Get at most 'len' bytes
return|return
name|populateUncompressedBuffer
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**    *<p>Returns the number of bytes remaining in the input buffers;    * normally called when finished() is true to determine amount of post-stream    * data.</p>    *    * @return the total (non-negative) number of unprocessed bytes in input    */
annotation|@
name|Override
DECL|method|getRemaining ()
specifier|public
name|int
name|getRemaining
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
comment|// userBuf + compressedDirectBuf
return|return
name|userBufferBytesToConsume
operator|+
name|remaining
return|;
block|}
comment|/**    * Resets everything including the input buffers (user and direct).    */
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|remaining
operator|=
literal|0
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
name|compressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|bytesInCompressedBuffer
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|userBufOff
operator|=
literal|0
expr_stmt|;
name|userBufferBytesToConsume
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end ()
specifier|public
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|0
condition|)
block|{
name|free
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|checkStream ()
specifier|private
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Stream not initialized"
argument_list|)
throw|;
block|}
block|}
DECL|method|populateUncompressedBuffer (byte[] b, int off, int len, int n)
specifier|private
name|int
name|populateUncompressedBuffer
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|method|initIDs ()
specifier|private
specifier|native
specifier|static
name|void
name|initIDs
parameter_list|()
function_decl|;
DECL|method|create ()
specifier|private
specifier|native
specifier|static
name|long
name|create
parameter_list|()
function_decl|;
DECL|method|init (long stream)
specifier|private
specifier|native
specifier|static
name|void
name|init
parameter_list|(
name|long
name|stream
parameter_list|)
function_decl|;
DECL|method|inflateBytesDirect (ByteBuffer src, int srcOffset, int srcLen, ByteBuffer dst, int dstOffset, int dstLen)
specifier|private
specifier|native
name|int
name|inflateBytesDirect
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|srcLen
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|,
name|int
name|dstOffset
parameter_list|,
name|int
name|dstLen
parameter_list|)
function_decl|;
DECL|method|free (long strm)
specifier|private
specifier|native
specifier|static
name|void
name|free
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|getStreamSize ()
specifier|private
specifier|native
specifier|static
name|int
name|getStreamSize
parameter_list|()
function_decl|;
DECL|method|inflateDirect (ByteBuffer src, ByteBuffer dst)
name|int
name|inflateDirect
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|this
operator|instanceof
name|ZStandardDecompressor
operator|.
name|ZStandardDirectDecompressor
operator|)
assert|;
name|int
name|originalPosition
init|=
name|dst
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|inflateBytesDirect
argument_list|(
name|src
argument_list|,
name|src
operator|.
name|position
argument_list|()
argument_list|,
name|src
operator|.
name|limit
argument_list|()
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|dst
operator|.
name|limit
argument_list|()
argument_list|)
decl_stmt|;
name|dst
operator|.
name|position
argument_list|(
name|originalPosition
operator|+
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesInCompressedBuffer
operator|>
literal|0
condition|)
block|{
name|src
operator|.
name|position
argument_list|(
name|compressedDirectBufOff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|src
operator|.
name|position
argument_list|(
name|src
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
comment|/**    * A {@link DirectDecompressor} for ZStandard    * https://github.com/facebook/zstd.    */
DECL|class|ZStandardDirectDecompressor
specifier|public
specifier|static
class|class
name|ZStandardDirectDecompressor
extends|extends
name|ZStandardDecompressor
implements|implements
name|DirectDecompressor
block|{
DECL|method|ZStandardDirectDecompressor (int directBufferSize)
specifier|public
name|ZStandardDirectDecompressor
parameter_list|(
name|int
name|directBufferSize
parameter_list|)
block|{
name|super
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finished ()
specifier|public
name|boolean
name|finished
parameter_list|()
block|{
return|return
operator|(
name|endOfInput
operator|&&
name|super
operator|.
name|finished
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|endOfInput
operator|=
literal|true
expr_stmt|;
block|}
DECL|field|endOfInput
specifier|private
name|boolean
name|endOfInput
decl_stmt|;
annotation|@
name|Override
DECL|method|decompress (ByteBuffer src, ByteBuffer dst)
specifier|public
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dst
operator|.
name|isDirect
argument_list|()
operator|:
literal|"dst.isDirect()"
assert|;
assert|assert
name|src
operator|.
name|isDirect
argument_list|()
operator|:
literal|"src.isDirect()"
assert|;
assert|assert
name|dst
operator|.
name|remaining
argument_list|()
operator|>
literal|0
operator|:
literal|"dst.remaining()> 0"
assert|;
name|this
operator|.
name|inflateDirect
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|endOfInput
operator|=
operator|!
name|src
operator|.
name|hasRemaining
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDictionary (byte[] b, int off, int len)
specifier|public
name|void
name|setDictionary
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"byte[] arrays are not supported for DirectDecompressor"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|decompress (byte[] b, int off, int len)
specifier|public
name|int
name|decompress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"byte[] arrays are not supported for DirectDecompressor"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

