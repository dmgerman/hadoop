begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AESCTRCryptoCodec
specifier|public
specifier|abstract
class|class
name|AESCTRCryptoCodec
extends|extends
name|CryptoCodec
block|{
comment|/**    * For AES, the algorithm block is fixed size of 128 bits.    * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard    */
DECL|field|AES_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|AES_BLOCK_SIZE
init|=
literal|16
decl_stmt|;
annotation|@
name|Override
DECL|method|getAlgorithmBlockSize ()
specifier|public
name|int
name|getAlgorithmBlockSize
parameter_list|()
block|{
return|return
name|AES_BLOCK_SIZE
return|;
block|}
comment|/**    * IV is produced by combining initial IV and the counter using addition.    * IV length should be the same as {@link #AES_BLOCK_SIZE}    */
annotation|@
name|Override
DECL|method|calculateIV (byte[] initIV, long counter, byte[] IV)
specifier|public
name|void
name|calculateIV
parameter_list|(
name|byte
index|[]
name|initIV
parameter_list|,
name|long
name|counter
parameter_list|,
name|byte
index|[]
name|IV
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|initIV
operator|.
name|length
operator|==
name|AES_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|IV
operator|.
name|length
operator|==
name|AES_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|IV
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|initIV
argument_list|)
expr_stmt|;
name|buf
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
expr_stmt|;
name|counter
operator|+=
name|buf
operator|.
name|getLong
argument_list|(
name|AES_BLOCK_SIZE
operator|-
literal|8
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|AES_BLOCK_SIZE
operator|-
literal|8
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

