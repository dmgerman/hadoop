begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Contains either a value of type T, or an IOException.  *  * This can be useful as a return value for batch APIs that need granular  * error reporting.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Fallible
specifier|public
class|class
name|Fallible
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|val
specifier|private
specifier|final
name|T
name|val
decl_stmt|;
DECL|field|ioe
specifier|private
specifier|final
name|IOException
name|ioe
decl_stmt|;
DECL|method|Fallible (T val)
specifier|public
name|Fallible
parameter_list|(
name|T
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|ioe
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Fallible (IOException ioe)
specifier|public
name|Fallible
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ioe
operator|=
name|ioe
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|val
return|;
block|}
block|}
end_class

end_unit

