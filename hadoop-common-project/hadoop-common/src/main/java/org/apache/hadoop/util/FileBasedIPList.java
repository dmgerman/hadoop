begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * FileBasedIPList loads a list of subnets in CIDR format and ip addresses from  * a file.  *  * Given an ip address, isIn  method returns true if ip belongs to one of the  * subnets.  *  * Thread safe.  */
end_comment

begin_class
DECL|class|FileBasedIPList
specifier|public
class|class
name|FileBasedIPList
implements|implements
name|IPList
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileBasedIPList
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|addressList
specifier|private
specifier|final
name|MachineList
name|addressList
decl_stmt|;
DECL|method|FileBasedIPList (String fileName)
specifier|public
name|FileBasedIPList
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|String
index|[]
name|lines
decl_stmt|;
try|try
block|{
name|lines
operator|=
name|readLines
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lines
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|lines
operator|!=
literal|null
condition|)
block|{
name|addressList
operator|=
operator|new
name|MachineList
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lines
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addressList
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|reload ()
specifier|public
name|FileBasedIPList
name|reload
parameter_list|()
block|{
return|return
operator|new
name|FileBasedIPList
argument_list|(
name|fileName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isIn (String ipAddress)
specifier|public
name|boolean
name|isIn
parameter_list|(
name|String
name|ipAddress
parameter_list|)
block|{
if|if
condition|(
name|ipAddress
operator|==
literal|null
operator|||
name|addressList
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|addressList
operator|.
name|includes
argument_list|(
name|ipAddress
argument_list|)
return|;
block|}
comment|/**    * Reads the lines in a file.    * @param fileName    * @return lines in a String array; null if the file does not exist or if the    * file name is null    * @throws IOException    */
DECL|method|readLines (String fileName)
specifier|private
specifier|static
name|String
index|[]
name|readLines
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|Reader
name|fileReader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|;               BufferedReader bufferedReader = new BufferedReader(fileReader)
block|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded IP list of size = "
operator|+
name|lines
operator|.
name|size
argument_list|()
operator|+
literal|" from file = "
operator|+
name|fileName
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|lines
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lines
operator|.
name|size
argument_list|()
index|]
argument_list|)
operator|)
return|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Missing ip list file : "
operator|+
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
literal|null
return|;
block|}
end_class

unit|}
end_unit

