begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
operator|.
name|EXIT_INTERRUPTED
import|;
end_import

begin_comment
comment|/**  * Handles interrupts by shutting down a service, escalating if the service  * does not shut down in time, or when other interrupts are received.  *<ol>  *<li>The service is given a time in milliseconds to stop:  *   if it exceeds this it the process exits anyway.</li>  *<li>the exit operation used is {@link ServiceLauncher#exit(int, String)}  *   with the exit code {@link LauncherExitCodes#EXIT_INTERRUPTED}</li>  *<li>If a second shutdown signal is received during the shutdown  *   process, {@link ExitUtil#halt(int)} is invoked. This handles the   *   problem of blocking shutdown hooks.</li>  *</ol>  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InterruptEscalator
specifier|public
class|class
name|InterruptEscalator
implements|implements
name|IrqHandler
operator|.
name|Interrupted
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InterruptEscalator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Flag to indicate when a shutdown signal has already been received.    * This allows the operation to be escalated.    */
DECL|field|signalAlreadyReceived
specifier|private
specifier|final
name|AtomicBoolean
name|signalAlreadyReceived
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|ownerRef
specifier|private
specifier|final
name|WeakReference
argument_list|<
name|ServiceLauncher
argument_list|>
name|ownerRef
decl_stmt|;
DECL|field|shutdownTimeMillis
specifier|private
specifier|final
name|int
name|shutdownTimeMillis
decl_stmt|;
comment|/**    * Previous interrupt handlers. These are not queried.    */
DECL|field|interruptHandlers
specifier|private
specifier|final
name|List
argument_list|<
name|IrqHandler
argument_list|>
name|interruptHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|forcedShutdownTimedOut
specifier|private
name|boolean
name|forcedShutdownTimedOut
decl_stmt|;
DECL|method|InterruptEscalator (ServiceLauncher owner, int shutdownTimeMillis)
specifier|public
name|InterruptEscalator
parameter_list|(
name|ServiceLauncher
name|owner
parameter_list|,
name|int
name|shutdownTimeMillis
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|owner
operator|!=
literal|null
argument_list|,
literal|"null owner"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ownerRef
operator|=
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|this
operator|.
name|shutdownTimeMillis
operator|=
name|shutdownTimeMillis
expr_stmt|;
block|}
DECL|method|getOwner ()
specifier|private
name|ServiceLauncher
name|getOwner
parameter_list|()
block|{
return|return
name|ownerRef
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getService ()
specifier|private
name|Service
name|getService
parameter_list|()
block|{
name|ServiceLauncher
name|owner
init|=
name|getOwner
argument_list|()
decl_stmt|;
return|return
name|owner
operator|!=
literal|null
condition|?
name|owner
operator|.
name|getService
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"InterruptEscalator{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" signalAlreadyReceived="
argument_list|)
operator|.
name|append
argument_list|(
name|signalAlreadyReceived
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceLauncher
name|owner
init|=
name|ownerRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", owner= "
argument_list|)
operator|.
name|append
argument_list|(
name|owner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", shutdownTimeMillis="
argument_list|)
operator|.
name|append
argument_list|(
name|shutdownTimeMillis
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", forcedShutdownTimedOut="
argument_list|)
operator|.
name|append
argument_list|(
name|forcedShutdownTimedOut
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|interrupted (IrqHandler.InterruptData interruptData)
specifier|public
name|void
name|interrupted
parameter_list|(
name|IrqHandler
operator|.
name|InterruptData
name|interruptData
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Service interrupted by "
operator|+
name|interruptData
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|signalAlreadyReceived
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|message
operator|=
literal|"Repeated interrupt: escalating to a JVM halt"
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// signal already received. On a second request to a hard JVM
comment|// halt and so bypass any blocking shutdown hooks.
name|ExitUtil
operator|.
name|halt
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_INTERRUPTED
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Service
name|service
init|=
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
comment|//start an async shutdown thread with a timeout
name|ServiceForcedShutdown
name|shutdown
init|=
operator|new
name|ServiceForcedShutdown
argument_list|(
name|service
argument_list|,
name|shutdownTimeMillis
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|shutdown
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"Service Forced Shutdown"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//wait for that thread to finish
try|try
block|{
name|thread
operator|.
name|join
argument_list|(
name|shutdownTimeMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|//ignored
block|}
name|forcedShutdownTimedOut
operator|=
operator|!
name|shutdown
operator|.
name|getServiceWasShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|forcedShutdownTimedOut
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Service did not shut down in time"
argument_list|)
expr_stmt|;
block|}
block|}
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|EXIT_INTERRUPTED
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register an interrupt handler.    * @param signalName signal name    * @throws IllegalArgumentException if the registration failed    */
DECL|method|register (String signalName)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|String
name|signalName
parameter_list|)
block|{
name|IrqHandler
name|handler
init|=
operator|new
name|IrqHandler
argument_list|(
name|signalName
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|handler
operator|.
name|bind
argument_list|()
expr_stmt|;
name|interruptHandlers
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Look up the handler for a signal.    * @param signalName signal name    * @return a handler if found    */
DECL|method|lookup (String signalName)
specifier|public
specifier|synchronized
name|IrqHandler
name|lookup
parameter_list|(
name|String
name|signalName
parameter_list|)
block|{
for|for
control|(
name|IrqHandler
name|irqHandler
range|:
name|interruptHandlers
control|)
block|{
if|if
condition|(
name|irqHandler
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|signalName
argument_list|)
condition|)
block|{
return|return
name|irqHandler
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Flag set if forced shut down timed out.    * @return true if a shutdown was attempted and it timed out    */
DECL|method|isForcedShutdownTimedOut ()
specifier|public
name|boolean
name|isForcedShutdownTimedOut
parameter_list|()
block|{
return|return
name|forcedShutdownTimedOut
return|;
block|}
comment|/**    * Flag set if a signal has been received.    * @return true if there has been one interrupt already.    */
DECL|method|isSignalAlreadyReceived ()
specifier|public
name|boolean
name|isSignalAlreadyReceived
parameter_list|()
block|{
return|return
name|signalAlreadyReceived
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Forced shutdown runnable.    */
DECL|class|ServiceForcedShutdown
specifier|protected
specifier|static
class|class
name|ServiceForcedShutdown
implements|implements
name|Runnable
block|{
DECL|field|shutdownTimeMillis
specifier|private
specifier|final
name|int
name|shutdownTimeMillis
decl_stmt|;
DECL|field|serviceWasShutdown
specifier|private
specifier|final
name|AtomicBoolean
name|serviceWasShutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
DECL|method|ServiceForcedShutdown (Service service, int shutdownTimeMillis)
specifier|public
name|ServiceForcedShutdown
parameter_list|(
name|Service
name|service
parameter_list|,
name|int
name|shutdownTimeMillis
parameter_list|)
block|{
name|this
operator|.
name|shutdownTimeMillis
operator|=
name|shutdownTimeMillis
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * Shutdown callback: stop the service and set an atomic boolean      * if it stopped within the shutdown time.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|serviceWasShutdown
operator|.
name|set
argument_list|(
name|service
operator|.
name|waitForServiceToStop
argument_list|(
name|shutdownTimeMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceWasShutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Probe for the service being shutdown.      * @return true if the service has been shutdown in the runnable      */
DECL|method|getServiceWasShutdown ()
specifier|private
name|boolean
name|getServiceWasShutdown
parameter_list|()
block|{
return|return
name|serviceWasShutdown
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

