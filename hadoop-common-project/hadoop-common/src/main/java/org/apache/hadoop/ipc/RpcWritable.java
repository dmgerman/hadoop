begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RpcWritable
specifier|public
specifier|abstract
class|class
name|RpcWritable
implements|implements
name|Writable
block|{
DECL|method|wrap (Object o)
specifier|static
name|RpcWritable
name|wrap
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RpcWritable
condition|)
block|{
return|return
operator|(
name|RpcWritable
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Message
condition|)
block|{
return|return
operator|new
name|ProtobufWrapper
argument_list|(
operator|(
name|Message
operator|)
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Writable
condition|)
block|{
return|return
operator|new
name|WritableWrapper
argument_list|(
operator|(
name|Writable
operator|)
name|o
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot wrap "
operator|+
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|// don't support old inefficient Writable methods.
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
specifier|final
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// methods optimized for reduced intermediate byte[] allocations.
DECL|method|writeTo (ResponseBuffer out)
specifier|abstract
name|void
name|writeTo
parameter_list|(
name|ResponseBuffer
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readFrom (ByteBuffer bb)
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|readFrom
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// adapter for Writables.
DECL|class|WritableWrapper
specifier|static
class|class
name|WritableWrapper
extends|extends
name|RpcWritable
block|{
DECL|field|writable
specifier|private
specifier|final
name|Writable
name|writable
decl_stmt|;
DECL|method|WritableWrapper (Writable writable)
name|WritableWrapper
parameter_list|(
name|Writable
name|writable
parameter_list|)
block|{
name|this
operator|.
name|writable
operator|=
name|writable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo (ResponseBuffer out)
specifier|public
name|void
name|writeTo
parameter_list|(
name|ResponseBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writable
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|readFrom (ByteBuffer bb)
argument_list|<
name|T
argument_list|>
name|T
name|readFrom
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a stream that may consume up to the entire ByteBuffer.
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|position
argument_list|()
operator|+
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bb
operator|.
name|remaining
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writable
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// advance over the bytes read.
name|bb
operator|.
name|position
argument_list|(
name|bb
operator|.
name|limit
argument_list|()
operator|-
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|writable
return|;
block|}
block|}
comment|// adapter for Protobufs.
DECL|class|ProtobufWrapper
specifier|static
class|class
name|ProtobufWrapper
extends|extends
name|RpcWritable
block|{
DECL|field|message
specifier|private
name|Message
name|message
decl_stmt|;
DECL|method|ProtobufWrapper (Message message)
name|ProtobufWrapper
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo (ResponseBuffer out)
name|void
name|writeTo
parameter_list|(
name|ResponseBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|message
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
name|length
operator|+=
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|ensureCapacity
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|readFrom (ByteBuffer bb)
argument_list|<
name|T
argument_list|>
name|T
name|readFrom
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// using the parser with a byte[]-backed coded input stream is the
comment|// most efficient way to deserialize a protobuf.  it has a direct
comment|// path to the PB ctor that doesn't create multi-layered streams
comment|// that internally buffer.
name|CodedInputStream
name|cis
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|position
argument_list|()
operator|+
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bb
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|cis
operator|.
name|pushLimit
argument_list|(
name|cis
operator|.
name|readRawVarint32
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|message
operator|.
name|getParserForType
argument_list|()
operator|.
name|parseFrom
argument_list|(
name|cis
argument_list|)
expr_stmt|;
name|cis
operator|.
name|checkLastTagWas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// advance over the bytes read.
name|bb
operator|.
name|position
argument_list|(
name|bb
operator|.
name|position
argument_list|()
operator|+
name|cis
operator|.
name|getTotalBytesRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|message
return|;
block|}
block|}
comment|// adapter to allow decoding of writables and protobufs from a byte buffer.
DECL|class|Buffer
specifier|static
class|class
name|Buffer
extends|extends
name|RpcWritable
block|{
DECL|field|bb
specifier|private
name|ByteBuffer
name|bb
decl_stmt|;
DECL|method|wrap (ByteBuffer bb)
specifier|static
name|Buffer
name|wrap
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
return|return
operator|new
name|Buffer
argument_list|(
name|bb
argument_list|)
return|;
block|}
DECL|method|Buffer ()
name|Buffer
parameter_list|()
block|{}
DECL|method|Buffer (ByteBuffer bb)
name|Buffer
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|this
operator|.
name|bb
operator|=
name|bb
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo (ResponseBuffer out)
name|void
name|writeTo
parameter_list|(
name|ResponseBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|ensureCapacity
argument_list|(
name|bb
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|position
argument_list|()
operator|+
name|bb
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bb
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|readFrom (ByteBuffer bb)
argument_list|<
name|T
argument_list|>
name|T
name|readFrom
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// effectively consume the rest of the buffer from the callers
comment|// perspective.
name|this
operator|.
name|bb
operator|=
name|bb
operator|.
name|slice
argument_list|()
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|bb
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|newInstance (Class<T> valueClass, Configuration conf)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|valueClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|instance
decl_stmt|;
try|try
block|{
comment|// this is much faster than ReflectionUtils!
name|instance
operator|=
name|valueClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|instance
operator|instanceof
name|Configurable
condition|)
block|{
operator|(
operator|(
name|Configurable
operator|)
name|instance
operator|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|getValue
argument_list|(
name|instance
argument_list|)
return|;
block|}
DECL|method|getValue (T value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|T
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RpcWritable
operator|.
name|wrap
argument_list|(
name|value
argument_list|)
operator|.
name|readFrom
argument_list|(
name|bb
argument_list|)
return|;
block|}
DECL|method|remaining ()
name|int
name|remaining
parameter_list|()
block|{
return|return
name|bb
operator|.
name|remaining
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

