begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslPropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CombinedIPWhiteList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * An implementation of the SaslPropertiesResolver.  * Uses a white list of IPs.  * If the connection's IP address is in the list of IP addresses, the salProperties  * will be unchanged.  * If the connection's IP is not in the list of IP addresses, then QOP for the  * connection will be restricted to "hadoop.rpc.protection.non-whitelist"  *  * Uses 3 IPList implementations together to form an aggregate whitelist.  * 1. ConstantIPList - to check against a set of hardcoded IPs  * 2. Fixed IP List - to check against a list of IP addresses which are specified externally, but  * will not change over runtime.  * 3. Variable IP List - to check against a list of IP addresses which are specified externally and  * could change during runtime.  * A connection IP address will checked against these 3 IP Lists in the order specified above.  * Once a match is found , the IP address is determined to be in whitelist.  *  * The behavior can be configured using a bunch of configuration parameters.  *  */
end_comment

begin_class
DECL|class|WhitelistBasedResolver
specifier|public
class|class
name|WhitelistBasedResolver
extends|extends
name|SaslPropertiesResolver
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WhitelistBasedResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FIXEDWHITELIST_DEFAULT_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|FIXEDWHITELIST_DEFAULT_LOCATION
init|=
literal|"/etc/hadoop/fixedwhitelist"
decl_stmt|;
DECL|field|VARIABLEWHITELIST_DEFAULT_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLEWHITELIST_DEFAULT_LOCATION
init|=
literal|"/etc/hadoop/whitelist"
decl_stmt|;
comment|/**    * Path to the file to containing subnets and ip addresses to form fixed whitelist.    */
DECL|field|HADOOP_SECURITY_SASL_FIXEDWHITELIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_SECURITY_SASL_FIXEDWHITELIST_FILE
init|=
literal|"hadoop.security.sasl.fixedwhitelist.file"
decl_stmt|;
comment|/**    * Enables/Disables variable whitelist    */
DECL|field|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_ENABLE
init|=
literal|"hadoop.security.sasl.variablewhitelist.enable"
decl_stmt|;
comment|/**    * Path to the file to containing subnets and ip addresses to form variable whitelist.    */
DECL|field|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_FILE
init|=
literal|"hadoop.security.sasl.variablewhitelist.file"
decl_stmt|;
comment|/**    * time in seconds by which the variable whitelist file is checked for updates    */
DECL|field|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_CACHE_SECS
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_CACHE_SECS
init|=
literal|"hadoop.security.sasl.variablewhitelist.cache.secs"
decl_stmt|;
comment|/**    * comma separated list containing alternate hadoop.rpc.protection values for    * clients which are not in whitelist    */
DECL|field|HADOOP_RPC_PROTECTION_NON_WHITELIST
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_RPC_PROTECTION_NON_WHITELIST
init|=
literal|"hadoop.rpc.protection.non-whitelist"
decl_stmt|;
DECL|field|whiteList
specifier|private
name|CombinedIPWhiteList
name|whiteList
decl_stmt|;
DECL|field|saslProps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|fixedFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_SASL_FIXEDWHITELIST_FILE
argument_list|,
name|FIXEDWHITELIST_DEFAULT_LOCATION
argument_list|)
decl_stmt|;
name|String
name|variableFile
init|=
literal|null
decl_stmt|;
name|long
name|expiryTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|variableFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_FILE
argument_list|,
name|VARIABLEWHITELIST_DEFAULT_LOCATION
argument_list|)
expr_stmt|;
name|expiryTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|HADOOP_SECURITY_SASL_VARIABLEWHITELIST_CACHE_SECS
argument_list|,
literal|3600
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
name|whiteList
operator|=
operator|new
name|CombinedIPWhiteList
argument_list|(
name|fixedFile
argument_list|,
name|variableFile
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|saslProps
operator|=
name|getSaslProperties
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Identify the Sasl Properties to be used for a connection with a client.    * @param clientAddress client's address    * @return the sasl properties to be used for the connection.    */
annotation|@
name|Override
DECL|method|getServerProperties (InetAddress clientAddress)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServerProperties
parameter_list|(
name|InetAddress
name|clientAddress
parameter_list|)
block|{
if|if
condition|(
name|clientAddress
operator|==
literal|null
condition|)
block|{
return|return
name|saslProps
return|;
block|}
return|return
name|whiteList
operator|.
name|isIn
argument_list|(
name|clientAddress
operator|.
name|getHostAddress
argument_list|()
argument_list|)
condition|?
name|getDefaultProperties
argument_list|()
else|:
name|saslProps
return|;
block|}
DECL|method|getServerProperties (String clientAddress)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServerProperties
parameter_list|(
name|String
name|clientAddress
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|clientAddress
operator|==
literal|null
condition|)
block|{
return|return
name|saslProps
return|;
block|}
return|return
name|getServerProperties
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|clientAddress
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSaslProperties (Configuration conf)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSaslProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|qop
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HADOOP_RPC_PROTECTION_NON_WHITELIST
argument_list|,
name|QualityOfProtection
operator|.
name|PRIVACY
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qop
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|qop
index|[
name|i
index|]
operator|=
name|QualityOfProtection
operator|.
name|valueOf
argument_list|(
name|qop
index|[
name|i
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|.
name|getSaslQop
argument_list|()
expr_stmt|;
block|}
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|qop
argument_list|)
argument_list|)
expr_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|SERVER_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|saslProps
return|;
block|}
block|}
end_class

end_unit

