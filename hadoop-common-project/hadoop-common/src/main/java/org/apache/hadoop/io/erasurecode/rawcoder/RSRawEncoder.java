begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
operator|.
name|RSUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A raw erasure encoder in RS code scheme in pure Java in case native one  * isn't available in some environment. Please always use native implementations  * when possible.  */
end_comment

begin_class
DECL|class|RSRawEncoder
specifier|public
class|class
name|RSRawEncoder
extends|extends
name|AbstractRawErasureEncoder
block|{
DECL|field|generatingPolynomial
specifier|private
name|int
index|[]
name|generatingPolynomial
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (int numDataUnits, int numParityUnits, int chunkSize)
specifier|public
name|void
name|initialize
parameter_list|(
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|int
name|chunkSize
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|getNumDataUnits
argument_list|()
operator|+
name|getNumParityUnits
argument_list|()
operator|<
name|RSUtil
operator|.
name|GF
operator|.
name|getFieldSize
argument_list|()
operator|)
assert|;
name|int
index|[]
name|primitivePower
init|=
name|RSUtil
operator|.
name|getPrimitivePower
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
decl_stmt|;
comment|// compute generating polynomial
name|int
index|[]
name|gen
init|=
block|{
literal|1
block|}
decl_stmt|;
name|int
index|[]
name|poly
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|poly
index|[
literal|0
index|]
operator|=
name|primitivePower
index|[
name|i
index|]
expr_stmt|;
name|poly
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|gen
operator|=
name|RSUtil
operator|.
name|GF
operator|.
name|multiply
argument_list|(
name|gen
argument_list|,
name|poly
argument_list|)
expr_stmt|;
block|}
comment|// generating polynomial has all generating roots
name|generatingPolynomial
operator|=
name|gen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doEncode (ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|protected
name|void
name|doEncode
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
block|{
comment|// parity units + data units
name|ByteBuffer
index|[]
name|all
init|=
operator|new
name|ByteBuffer
index|[
name|outputs
operator|.
name|length
operator|+
name|inputs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|outputs
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|0
argument_list|,
name|outputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inputs
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
name|outputs
operator|.
name|length
argument_list|,
name|inputs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Compute the remainder
name|RSUtil
operator|.
name|GF
operator|.
name|remainder
argument_list|(
name|all
argument_list|,
name|generatingPolynomial
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doEncode (byte[][] inputs, int[] inputOffsets, int dataLen, byte[][] outputs, int[] outputOffsets)
specifier|protected
name|void
name|doEncode
parameter_list|(
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|inputOffsets
parameter_list|,
name|int
name|dataLen
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|,
name|int
index|[]
name|outputOffsets
parameter_list|)
block|{
comment|// parity units + data units
name|byte
index|[]
index|[]
name|all
init|=
operator|new
name|byte
index|[
name|outputs
operator|.
name|length
operator|+
name|inputs
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|outputs
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
literal|0
argument_list|,
name|outputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inputs
argument_list|,
literal|0
argument_list|,
name|all
argument_list|,
name|outputs
operator|.
name|length
argument_list|,
name|inputs
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|inputOffsets
operator|.
name|length
operator|+
name|outputOffsets
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|outputOffsets
argument_list|,
literal|0
argument_list|,
name|offsets
argument_list|,
literal|0
argument_list|,
name|outputOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|inputOffsets
argument_list|,
literal|0
argument_list|,
name|offsets
argument_list|,
name|outputOffsets
operator|.
name|length
argument_list|,
name|inputOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Compute the remainder
name|RSUtil
operator|.
name|GF
operator|.
name|remainder
argument_list|(
name|all
argument_list|,
name|offsets
argument_list|,
name|dataLen
argument_list|,
name|generatingPolynomial
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

