begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputValidation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|Stringable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Names a file or directory in a {@link FileSystem}.  * Path strings use slash as the directory separator.  */
end_comment

begin_class
annotation|@
name|Stringable
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Path
specifier|public
class|class
name|Path
implements|implements
name|Comparable
argument_list|<
name|Path
argument_list|>
implements|,
name|Serializable
implements|,
name|ObjectInputValidation
block|{
comment|/**    * The directory separator, a slash.    */
DECL|field|SEPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|/**    * The directory separator, a slash, as a character.    */
DECL|field|SEPARATOR_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|SEPARATOR_CHAR
init|=
literal|'/'
decl_stmt|;
comment|/**    * The current directory, ".".    */
DECL|field|CUR_DIR
specifier|public
specifier|static
specifier|final
name|String
name|CUR_DIR
init|=
literal|"."
decl_stmt|;
comment|/**    * Whether the current host is a Windows machine.    */
DECL|field|WINDOWS
specifier|public
specifier|static
specifier|final
name|boolean
name|WINDOWS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
comment|/**    *  Pre-compiled regular expressions to detect path formats.    */
DECL|field|HAS_DRIVE_LETTER_SPECIFIER
specifier|private
specifier|static
specifier|final
name|Pattern
name|HAS_DRIVE_LETTER_SPECIFIER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^/?[a-zA-Z]:"
argument_list|)
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0xad00f
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
comment|// a hierarchical uri
comment|/**    * Test whether this Path uses a scheme and is relative.    * Pathnames with scheme and relative path are illegal.    */
DECL|method|checkNotSchemeWithRelative ()
name|void
name|checkNotSchemeWithRelative
parameter_list|()
block|{
if|if
condition|(
name|toUri
argument_list|()
operator|.
name|isAbsolute
argument_list|()
operator|&&
operator|!
name|isUriPathAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Unsupported name: has scheme but relative path-part"
argument_list|)
throw|;
block|}
block|}
DECL|method|checkNotRelative ()
name|void
name|checkNotRelative
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isAbsolute
argument_list|()
operator|&&
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Path is relative"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a version of the given Path without the scheme information.    *    * @param path the source Path    * @return a copy of this Path without the scheme information    */
DECL|method|getPathWithoutSchemeAndAuthority (Path path)
specifier|public
specifier|static
name|Path
name|getPathWithoutSchemeAndAuthority
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// This code depends on Path.toString() to remove the leading slash before
comment|// the drive specification on Windows.
name|Path
name|newPath
init|=
name|path
operator|.
name|isUriPathAbsolute
argument_list|()
condition|?
operator|new
name|Path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
else|:
name|path
decl_stmt|;
return|return
name|newPath
return|;
block|}
comment|/**    * Create a new Path based on the child path resolved against the parent path.    *    * @param parent the parent path    * @param child the child path    */
DECL|method|Path (String parent, String child)
specifier|public
name|Path
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Path based on the child path resolved against the parent path.    *    * @param parent the parent path    * @param child the child path    */
DECL|method|Path (Path parent, String child)
specifier|public
name|Path
parameter_list|(
name|Path
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
operator|new
name|Path
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Path based on the child path resolved against the parent path.    *    * @param parent the parent path    * @param child the child path    */
DECL|method|Path (String parent, Path child)
specifier|public
name|Path
parameter_list|(
name|String
name|parent
parameter_list|,
name|Path
name|child
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|parent
argument_list|)
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Path based on the child path resolved against the parent path.    *    * @param parent the parent path    * @param child the child path    */
DECL|method|Path (Path parent, Path child)
specifier|public
name|Path
parameter_list|(
name|Path
name|parent
parameter_list|,
name|Path
name|child
parameter_list|)
block|{
comment|// Add a slash to parent's path so resolution is compatible with URI's
name|URI
name|parentUri
init|=
name|parent
operator|.
name|uri
decl_stmt|;
name|String
name|parentPath
init|=
name|parentUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|parentPath
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|||
name|parentPath
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|parentUri
operator|=
operator|new
name|URI
argument_list|(
name|parentUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|parentUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|parentUri
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
argument_list|,
literal|null
argument_list|,
name|parentUri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|URI
name|resolved
init|=
name|parentUri
operator|.
name|resolve
argument_list|(
name|child
operator|.
name|uri
argument_list|)
decl_stmt|;
name|initialize
argument_list|(
name|resolved
operator|.
name|getScheme
argument_list|()
argument_list|,
name|resolved
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|resolved
operator|.
name|getPath
argument_list|()
argument_list|,
name|resolved
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPathArg ( String path )
specifier|private
name|void
name|checkPathArg
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// disallow construction of a Path from an empty string
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not create a Path from a null string"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not create a Path from an empty string"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct a path from a String.  Path strings are URIs, but with    * unescaped elements and some additional normalization.    *    * @param pathString the path string    */
DECL|method|Path (String pathString)
specifier|public
name|Path
parameter_list|(
name|String
name|pathString
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|checkPathArg
argument_list|(
name|pathString
argument_list|)
expr_stmt|;
comment|// We can't use 'new URI(String)' directly, since it assumes things are
comment|// escaped, which we don't require of Paths.
comment|// add a slash in front of paths with Windows drive letters
if|if
condition|(
name|hasWindowsDrive
argument_list|(
name|pathString
argument_list|)
operator|&&
name|pathString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|pathString
operator|=
literal|"/"
operator|+
name|pathString
expr_stmt|;
block|}
comment|// parse uri components
name|String
name|scheme
init|=
literal|null
decl_stmt|;
name|String
name|authority
init|=
literal|null
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// parse uri scheme, if any
name|int
name|colon
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|slash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|colon
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|slash
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|colon
operator|<
name|slash
operator|)
operator|)
condition|)
block|{
comment|// has a scheme
name|scheme
operator|=
name|pathString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
expr_stmt|;
name|start
operator|=
name|colon
operator|+
literal|1
expr_stmt|;
block|}
comment|// parse uri authority, if any
if|if
condition|(
name|pathString
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|,
name|start
argument_list|)
operator|&&
operator|(
name|pathString
operator|.
name|length
argument_list|()
operator|-
name|start
operator|>
literal|2
operator|)
condition|)
block|{
comment|// has authority
name|int
name|nextSlash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|start
operator|+
literal|2
argument_list|)
decl_stmt|;
name|int
name|authEnd
init|=
name|nextSlash
operator|>
literal|0
condition|?
name|nextSlash
else|:
name|pathString
operator|.
name|length
argument_list|()
decl_stmt|;
name|authority
operator|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|2
argument_list|,
name|authEnd
argument_list|)
expr_stmt|;
name|start
operator|=
name|authEnd
expr_stmt|;
block|}
comment|// uri path is the rest of the string -- query& fragment not supported
name|String
name|path
init|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pathString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|initialize
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a path from a URI    *    * @param aUri the source URI    */
DECL|method|Path (URI aUri)
specifier|public
name|Path
parameter_list|(
name|URI
name|aUri
parameter_list|)
block|{
name|uri
operator|=
name|aUri
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a Path from components.    *    * @param scheme the scheme    * @param authority the authority    * @param path the path    */
DECL|method|Path (String scheme, String authority, String path)
specifier|public
name|Path
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|authority
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|checkPathArg
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// add a slash in front of paths with Windows drive letters
if|if
condition|(
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
comment|// add "./" in front of Linux relative paths so that a path containing
comment|// a colon e.q. "a:b" will not be interpreted as scheme "a".
if|if
condition|(
operator|!
name|WINDOWS
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|path
operator|=
literal|"./"
operator|+
name|path
expr_stmt|;
block|}
name|initialize
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (String scheme, String authority, String path, String fragment)
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|authority
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|fragment
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|normalizePath
argument_list|(
name|scheme
argument_list|,
name|path
argument_list|)
argument_list|,
literal|null
argument_list|,
name|fragment
argument_list|)
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Merge 2 paths such that the second path is appended relative to the first.    * The returned path has the scheme and authority of the first path.  On    * Windows, the drive specification in the second path is discarded.    *     * @param path1 the first path    * @param path2 the second path, to be appended relative to path1    * @return the merged path    */
DECL|method|mergePaths (Path path1, Path path2)
specifier|public
specifier|static
name|Path
name|mergePaths
parameter_list|(
name|Path
name|path1
parameter_list|,
name|Path
name|path2
parameter_list|)
block|{
name|String
name|path2Str
init|=
name|path2
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|path2Str
operator|=
name|path2Str
operator|.
name|substring
argument_list|(
name|startPositionWithoutWindowsDrive
argument_list|(
name|path2Str
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add path components explicitly, because simply concatenating two path
comment|// string is not safe, for example:
comment|// "/" + "/foo" yields "//foo", which will be parsed as authority in Path
return|return
operator|new
name|Path
argument_list|(
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|path1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
name|path2Str
argument_list|)
return|;
block|}
comment|/**    * Normalize a path string to use non-duplicated forward slashes as    * the path separator and remove any trailing path separators.    *    * @param scheme the URI scheme. Used to deduce whether we    * should replace backslashes or not    * @param path the scheme-specific part    * @return the normalized path string    */
DECL|method|normalizePath (String scheme, String path)
specifier|private
specifier|static
name|String
name|normalizePath
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// Remove double forward slashes.
name|path
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|path
argument_list|,
literal|"//"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// Remove backslashes if this looks like a Windows path. Avoid
comment|// the substitution if it looks like a non-local URI.
if|if
condition|(
name|WINDOWS
operator|&&
operator|(
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
operator|||
operator|(
name|scheme
operator|==
literal|null
operator|)
operator|||
operator|(
name|scheme
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|scheme
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|path
operator|=
name|StringUtils
operator|.
name|replace
argument_list|(
name|path
argument_list|,
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
comment|// trim trailing slash from non-root path (ignoring windows drive)
name|int
name|minLength
init|=
name|startPositionWithoutWindowsDrive
argument_list|(
name|path
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
name|minLength
operator|&&
name|path
operator|.
name|endsWith
argument_list|(
name|SEPARATOR
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|hasWindowsDrive (String path)
specifier|private
specifier|static
name|boolean
name|hasWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|WINDOWS
operator|&&
name|HAS_DRIVE_LETTER_SPECIFIER
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|find
argument_list|()
operator|)
return|;
block|}
DECL|method|startPositionWithoutWindowsDrive (String path)
specifier|private
specifier|static
name|int
name|startPositionWithoutWindowsDrive
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
name|SEPARATOR_CHAR
condition|?
literal|3
else|:
literal|2
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Determine whether a given path string represents an absolute path on    * Windows. e.g. "C:/a/b" is an absolute path. "C:a/b" is not.    *    * @param pathString the path string to evaluate    * @param slashed true if the given path is prefixed with "/"    * @return true if the supplied path looks like an absolute path with a Windows    * drive-specifier    */
DECL|method|isWindowsAbsolutePath (final String pathString, final boolean slashed)
specifier|public
specifier|static
name|boolean
name|isWindowsAbsolutePath
parameter_list|(
specifier|final
name|String
name|pathString
parameter_list|,
specifier|final
name|boolean
name|slashed
parameter_list|)
block|{
name|int
name|start
init|=
name|startPositionWithoutWindowsDrive
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
return|return
name|start
operator|>
literal|0
operator|&&
name|pathString
operator|.
name|length
argument_list|()
operator|>
name|start
operator|&&
operator|(
operator|(
name|pathString
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|==
name|SEPARATOR_CHAR
operator|)
operator|||
operator|(
name|pathString
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|==
literal|'\\'
operator|)
operator|)
return|;
block|}
comment|/**    * Convert this Path to a URI.    *    * @return this Path as a URI    */
DECL|method|toUri ()
specifier|public
name|URI
name|toUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    * Return the FileSystem that owns this Path.    *    * @param conf the configuration to use when resolving the FileSystem    * @return the FileSystem that owns this Path    * @throws java.io.IOException thrown if there's an issue resolving the    * FileSystem    */
DECL|method|getFileSystem (Configuration conf)
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Returns true if the path component (i.e. directory) of this URI is    * absolute<strong>and</strong> the scheme is null,<b>and</b> the authority    * is null.    *    * @return whether the path is absolute and the URI has no scheme nor    * authority parts    */
DECL|method|isAbsoluteAndSchemeAuthorityNull ()
specifier|public
name|boolean
name|isAbsoluteAndSchemeAuthorityNull
parameter_list|()
block|{
return|return
operator|(
name|isUriPathAbsolute
argument_list|()
operator|&&
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|&&
name|uri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
operator|)
return|;
block|}
comment|/**    * Returns true if the path component (i.e. directory) of this URI is    * absolute.    *    * @return whether this URI's path is absolute    */
DECL|method|isUriPathAbsolute ()
specifier|public
name|boolean
name|isUriPathAbsolute
parameter_list|()
block|{
name|int
name|start
init|=
name|startPositionWithoutWindowsDrive
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SEPARATOR
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|/**    * Returns true if the path component (i.e. directory) of this URI is    * absolute.  This method is a wrapper for {@link #isUriPathAbsolute()}.    *    * @return whether this URI's path is absolute    */
DECL|method|isAbsolute ()
specifier|public
name|boolean
name|isAbsolute
parameter_list|()
block|{
return|return
name|isUriPathAbsolute
argument_list|()
return|;
block|}
comment|/**    * Returns true if and only if this path represents the root of a file system.    *    * @return true if and only if this path represents the root of a file system    */
DECL|method|isRoot ()
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
return|;
block|}
comment|/**    * Returns the final component of this path.    *    * @return the final component of this path    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
return|return
name|path
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns the parent of a path or null if at root.    * @return the parent of a path or null if at root    */
DECL|method|getParent ()
specifier|public
name|Path
name|getParent
parameter_list|()
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|lastSlash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|startPositionWithoutWindowsDrive
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|path
operator|.
name|length
argument_list|()
operator|==
name|start
operator|)
operator|||
comment|// empty path
operator|(
name|lastSlash
operator|==
name|start
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|==
name|start
operator|+
literal|1
operator|)
condition|)
block|{
comment|// at root
return|return
literal|null
return|;
block|}
name|String
name|parent
decl_stmt|;
if|if
condition|(
name|lastSlash
operator|==
operator|-
literal|1
condition|)
block|{
name|parent
operator|=
name|CUR_DIR
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSlash
operator|==
name|start
condition|?
name|start
operator|+
literal|1
else|:
name|lastSlash
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|parent
argument_list|)
return|;
block|}
comment|/**    * Adds a suffix to the final name in the path.    *    * @param suffix the suffix to add    * @return a new path with the suffix added    */
DECL|method|suffix (String suffix)
specifier|public
name|Path
name|suffix
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|getName
argument_list|()
operator|+
name|suffix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// we can't use uri.toString(), which escapes everything, because we want
comment|// illegal characters unescaped in the string, for glob processing, etc.
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"//"
argument_list|)
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
literal|0
operator|&&
name|hasWindowsDrive
argument_list|(
name|path
argument_list|)
operator|&&
comment|// has windows drive
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|&&
comment|// but no scheme
name|uri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
condition|)
comment|// or authority
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// remove slash before drive
name|buffer
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Path
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Path
name|that
init|=
operator|(
name|Path
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|uri
operator|.
name|equals
argument_list|(
name|that
operator|.
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uri
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Path o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Path
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|uri
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|uri
argument_list|)
return|;
block|}
comment|/**    * Returns the number of elements in this path.    * @return the number of elements in this path    */
DECL|method|depth ()
specifier|public
name|int
name|depth
parameter_list|()
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|int
name|slash
init|=
name|path
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|?
operator|-
literal|1
else|:
literal|0
decl_stmt|;
while|while
condition|(
name|slash
operator|!=
operator|-
literal|1
condition|)
block|{
name|depth
operator|++
expr_stmt|;
name|slash
operator|=
name|path
operator|.
name|indexOf
argument_list|(
name|SEPARATOR
argument_list|,
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
comment|/**    * Returns a qualified path object for the {@link FileSystem}'s working    * directory.    *      * @param fs the target FileSystem    * @return a qualified path object for the FileSystem's working directory    * @deprecated use {@link #makeQualified(URI, Path)}    */
annotation|@
name|Deprecated
DECL|method|makeQualified (FileSystem fs)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a qualified path object.    *    * @param defaultUri if this path is missing the scheme or authority    * components, borrow them from this URI    * @param workingDir if this path isn't absolute, treat it as relative to this    * working directory    * @return this path if it contains a scheme and authority and is absolute, or    * a new path that includes a path and authority and is fully qualified    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|method|makeQualified (URI defaultUri, Path workingDir )
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|URI
name|defaultUri
parameter_list|,
name|Path
name|workingDir
parameter_list|)
block|{
name|Path
name|path
init|=
name|this
decl_stmt|;
if|if
condition|(
operator|!
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|URI
name|pathUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|pathUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|pathUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|fragment
init|=
name|pathUri
operator|.
name|getFragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
operator|&&
operator|(
name|authority
operator|!=
literal|null
operator|||
name|defaultUri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
operator|)
condition|)
return|return
name|path
return|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
name|scheme
operator|=
name|defaultUri
operator|.
name|getScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
name|authority
operator|=
name|defaultUri
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
name|authority
operator|=
literal|""
expr_stmt|;
block|}
block|}
name|URI
name|newUri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newUri
operator|=
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|normalizePath
argument_list|(
name|scheme
argument_list|,
name|pathUri
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|fragment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|newUri
argument_list|)
return|;
block|}
comment|/**    * Validate the contents of a deserialized Path, so as    * to defend against malicious object streams.    * @throws InvalidObjectException if there's no URI    */
annotation|@
name|Override
DECL|method|validateObject ()
specifier|public
name|void
name|validateObject
parameter_list|()
throws|throws
name|InvalidObjectException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No URI in deserialized Path"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

