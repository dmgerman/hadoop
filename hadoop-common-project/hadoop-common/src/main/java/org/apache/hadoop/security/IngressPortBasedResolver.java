begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of SaslPropertiesResolver. Used on server side,  * returns SASL properties based on the port the client is connecting  * to. This should be used along with server side enabling multiple ports  * TODO: when NN multiple listener is enabled, automatically use this  * resolver without having to set in config.  *  * For configuration, for example if server runs on two ports 9000 and 9001,  * and we want to specify 9000 to use auth-conf and 9001 to use auth.  *  * We need to set the following configuration properties:  * ingress.port.sasl.configured.ports=9000,9001  * ingress.port.sasl.prop.9000=privacy  * ingress.port.sasl.prop.9001=authentication  *  * One note is that, if there is misconfiguration that a port, say, 9002 is  * given in ingress.port.sasl.configured.ports, but it's sasl prop is not  * set, a default of QOP of privacy (auth-conf) will be used. In addition,  * if a port is not given even in ingress.port.sasl.configured.ports, but  * is being checked in getServerProperties(), the default SASL prop will  * be returned. Both of these two cases are considered misconfiguration.  */
end_comment

begin_class
DECL|class|IngressPortBasedResolver
specifier|public
class|class
name|IngressPortBasedResolver
extends|extends
name|SaslPropertiesResolver
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IngressPortBasedResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|INGRESS_PORT_SASL_PROP_PREFIX
specifier|static
specifier|final
name|String
name|INGRESS_PORT_SASL_PROP_PREFIX
init|=
literal|"ingress.port.sasl.prop"
decl_stmt|;
DECL|field|INGRESS_PORT_SASL_CONFIGURED_PORTS
specifier|static
specifier|final
name|String
name|INGRESS_PORT_SASL_CONFIGURED_PORTS
init|=
literal|"ingress.port.sasl.configured.ports"
decl_stmt|;
comment|// no need to concurrent map, because after setConf() it never change,
comment|// only for read.
DECL|field|portPropMapping
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|portPropMapping
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|portPropMapping
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|portStrings
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|INGRESS_PORT_SASL_CONFIGURED_PORTS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|portString
range|:
name|portStrings
control|)
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portString
argument_list|)
decl_stmt|;
name|String
name|configKey
init|=
name|INGRESS_PORT_SASL_PROP_PREFIX
operator|+
literal|"."
operator|+
name|portString
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|getSaslProperties
argument_list|(
name|conf
argument_list|,
name|configKey
argument_list|,
name|SaslRpcServer
operator|.
name|QualityOfProtection
operator|.
name|PRIVACY
argument_list|)
decl_stmt|;
name|portPropMapping
operator|.
name|put
argument_list|(
name|port
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured with port to QOP mapping as:"
operator|+
name|portPropMapping
argument_list|)
expr_stmt|;
block|}
comment|/**    * Identify the Sasl Properties to be used for a connection with a client.    * @param clientAddress client's address    * @param ingressPort the port that the client is connecting    * @return the sasl properties to be used for the connection.    */
annotation|@
name|Override
annotation|@
name|VisibleForTesting
DECL|method|getServerProperties (InetAddress clientAddress, int ingressPort)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServerProperties
parameter_list|(
name|InetAddress
name|clientAddress
parameter_list|,
name|int
name|ingressPort
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolving SASL properties for "
operator|+
name|clientAddress
operator|+
literal|" "
operator|+
name|ingressPort
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|portPropMapping
operator|.
name|containsKey
argument_list|(
name|ingressPort
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An un-configured port is being requested "
operator|+
name|ingressPort
operator|+
literal|" using default"
argument_list|)
expr_stmt|;
return|return
name|getDefaultProperties
argument_list|()
return|;
block|}
return|return
name|portPropMapping
operator|.
name|get
argument_list|(
name|ingressPort
argument_list|)
return|;
block|}
block|}
end_class

end_unit

