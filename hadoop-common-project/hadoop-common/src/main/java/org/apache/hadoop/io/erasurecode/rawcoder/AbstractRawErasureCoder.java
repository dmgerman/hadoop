begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A common class of basic facilities to be shared by encoder and decoder  *  * It implements the {@link RawErasureCoder} interface.  */
end_comment

begin_class
DECL|class|AbstractRawErasureCoder
specifier|public
specifier|abstract
class|class
name|AbstractRawErasureCoder
extends|extends
name|Configured
implements|implements
name|RawErasureCoder
block|{
comment|// Hope to reset coding buffers a little faster using it
DECL|field|zeroChunkBytes
specifier|private
name|byte
index|[]
name|zeroChunkBytes
decl_stmt|;
DECL|field|numDataUnits
specifier|private
name|int
name|numDataUnits
decl_stmt|;
DECL|field|numParityUnits
specifier|private
name|int
name|numParityUnits
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (int numDataUnits, int numParityUnits, int chunkSize)
specifier|public
name|void
name|initialize
parameter_list|(
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|int
name|chunkSize
parameter_list|)
block|{
name|this
operator|.
name|numDataUnits
operator|=
name|numDataUnits
expr_stmt|;
name|this
operator|.
name|numParityUnits
operator|=
name|numParityUnits
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|zeroChunkBytes
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
comment|// With ZERO by default
block|}
annotation|@
name|Override
DECL|method|getNumDataUnits ()
specifier|public
name|int
name|getNumDataUnits
parameter_list|()
block|{
return|return
name|numDataUnits
return|;
block|}
annotation|@
name|Override
DECL|method|getNumParityUnits ()
specifier|public
name|int
name|getNumParityUnits
parameter_list|()
block|{
return|return
name|numParityUnits
return|;
block|}
annotation|@
name|Override
DECL|method|getChunkSize ()
specifier|public
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
annotation|@
name|Override
DECL|method|preferDirectBuffer ()
specifier|public
name|boolean
name|preferDirectBuffer
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
block|{
comment|// Nothing to do by default
block|}
comment|/**    * Convert an array of heap ByteBuffers to an array of byte array.    * @param buffers    * @return an array of byte array    */
DECL|method|toArrays (ByteBuffer[] buffers)
specifier|protected
specifier|static
name|byte
index|[]
index|[]
name|toArrays
parameter_list|(
name|ByteBuffer
index|[]
name|buffers
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|bytesArr
init|=
operator|new
name|byte
index|[
name|buffers
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|ByteBuffer
name|buffer
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|=
name|buffers
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|bytesArr
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|buffer
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|bytesArr
index|[
name|i
index|]
operator|=
name|buffer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ByteBuffer passed, "
operator|+
literal|"expecting heap buffer"
argument_list|)
throw|;
block|}
block|}
return|return
name|bytesArr
return|;
block|}
comment|/**    * Ensure the buffer (either input or output) ready to read or write with ZERO    * bytes fully in chunkSize.    * @param buffer    * @return the buffer itself    */
DECL|method|resetBuffer (ByteBuffer buffer)
specifier|protected
name|ByteBuffer
name|resetBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|zeroChunkBytes
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
comment|/**    * Ensure the buffer (either input or output) ready to read or write with ZERO    * bytes fully in chunkSize.    * @param buffer bytes array buffer    * @return the buffer itself    */
DECL|method|resetBuffer (byte[] buffer)
specifier|protected
name|byte
index|[]
name|resetBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zeroChunkBytes
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

