begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Builder for filesystem/filecontext operations of various kinds,  * with option support.  *  *<code>  *   .opt("foofs:option.a", true)  *   .opt("foofs:option.b", "value")  *   .opt("barfs:cache", true)  *   .must("foofs:cache", true)  *   .must("barfs:cache-size", 256 * 1024 * 1024)  *   .build();  *</code>  *  * Configuration keys declared in an {@code opt()} may be ignored by  * a builder which does not recognise them.  *  * Configuration keys declared in a {@code must()} function set must  * be understood by the implementation or a  * {@link IllegalArgumentException} will be thrown.  *  * @param<S> Return type on the {@link #build()} call.  * @param<B> type of builder itself.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
specifier|abstract
class|class
DECL|class|AbstractFSBuilderImpl
name|AbstractFSBuilderImpl
parameter_list|<
name|S
parameter_list|,
name|B
extends|extends
name|FSBuilder
parameter_list|<
name|S
parameter_list|,
name|B
parameter_list|>
parameter_list|>
implements|implements
name|FSBuilder
argument_list|<
name|S
argument_list|,
name|B
argument_list|>
block|{
DECL|field|UNKNOWN_MANDATORY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN_MANDATORY_KEY
init|=
literal|"Unknown mandatory key"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|E_BOTH_A_PATH_AND_A_PATH_HANDLE
specifier|static
specifier|final
name|String
name|E_BOTH_A_PATH_AND_A_PATH_HANDLE
init|=
literal|"Both a path and a pathHandle has been provided to the constructor"
decl_stmt|;
DECL|field|optionalPath
specifier|private
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|optionalPath
decl_stmt|;
DECL|field|optionalPathHandle
specifier|private
specifier|final
name|Optional
argument_list|<
name|PathHandle
argument_list|>
name|optionalPathHandle
decl_stmt|;
comment|/**    * Contains optional and mandatory parameters.    *    * It does not load default configurations from default files.    */
DECL|field|options
specifier|private
specifier|final
name|Configuration
name|options
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/** Keep track of the keys for mandatory options. */
DECL|field|mandatoryKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mandatoryKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Constructor with both optional path and path handle.    * Either or both argument may be empty, but it is an error for    * both to be defined.    * @param optionalPath a path or empty    * @param optionalPathHandle a path handle/empty    * @throws IllegalArgumentException if both parameters are set.    */
DECL|method|AbstractFSBuilderImpl ( @onnull Optional<Path> optionalPath, @Nonnull Optional<PathHandle> optionalPathHandle)
specifier|protected
name|AbstractFSBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
name|Optional
argument_list|<
name|Path
argument_list|>
name|optionalPath
parameter_list|,
annotation|@
name|Nonnull
name|Optional
argument_list|<
name|PathHandle
argument_list|>
name|optionalPathHandle
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
operator|(
name|checkNotNull
argument_list|(
name|optionalPath
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|&&
name|checkNotNull
argument_list|(
name|optionalPathHandle
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
argument_list|,
name|E_BOTH_A_PATH_AND_A_PATH_HANDLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|optionalPath
operator|=
name|optionalPath
expr_stmt|;
name|this
operator|.
name|optionalPathHandle
operator|=
name|optionalPathHandle
expr_stmt|;
block|}
DECL|method|AbstractFSBuilderImpl (@onnull final Path path)
specifier|protected
name|AbstractFSBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Path
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|path
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractFSBuilderImpl (@onnull final PathHandle pathHandle)
specifier|protected
name|AbstractFSBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|PathHandle
name|pathHandle
parameter_list|)
block|{
name|this
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|pathHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the cast builder.    * @return this object, typecast    */
DECL|method|getThisBuilder ()
specifier|public
name|B
name|getThisBuilder
parameter_list|()
block|{
return|return
operator|(
name|B
operator|)
name|this
return|;
block|}
comment|/**    * Get the optional path; may be empty.    * @return the optional path field.    */
DECL|method|getOptionalPath ()
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|getOptionalPath
parameter_list|()
block|{
return|return
name|optionalPath
return|;
block|}
comment|/**    * Get the path: only valid if constructed with a path.    * @return the path    * @throws NoSuchElementException if the field is empty.    */
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|optionalPath
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Get the optional path handle; may be empty.    * @return the optional path handle field.    */
DECL|method|getOptionalPathHandle ()
specifier|public
name|Optional
argument_list|<
name|PathHandle
argument_list|>
name|getOptionalPathHandle
parameter_list|()
block|{
return|return
name|optionalPathHandle
return|;
block|}
comment|/**    * Get the PathHandle: only valid if constructed with a PathHandle.    * @return the PathHandle    * @throws NoSuchElementException if the field is empty.    */
DECL|method|getPathHandle ()
specifier|public
name|PathHandle
name|getPathHandle
parameter_list|()
block|{
return|return
name|optionalPathHandle
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Set optional Builder parameter.    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, @Nonnull final String value)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set optional boolean parameter for the Builder.    *    * @see #opt(String, String)    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, boolean value)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set optional int parameter for the Builder.    *    * @see #opt(String, String)    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, int value)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set optional float parameter for the Builder.    *    * @see #opt(String, String)    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, float value)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setFloat
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set optional double parameter for the Builder.    *    * @see #opt(String, String)    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, double value)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDouble
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set an array of string values as optional parameter for the Builder.    *    * @see #opt(String, String)    */
annotation|@
name|Override
DECL|method|opt (@onnull final String key, @Nonnull final String... values)
specifier|public
name|B
name|opt
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
modifier|...
name|values
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setStrings
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set mandatory option to the Builder.    *    * If the option is not supported or unavailable on the {@link FileSystem},    * the client should expect {@link #build()} throws IllegalArgumentException.    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, @Nonnull final String value)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set mandatory boolean option.    *    * @see #must(String, String)    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, boolean value)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBoolean
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set mandatory int option.    *    * @see #must(String, String)    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, int value)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setInt
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set mandatory float option.    *    * @see #must(String, String)    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, float value)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setFloat
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set mandatory double option.    *    * @see #must(String, String)    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, double value)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDouble
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Set a string array as mandatory option.    *    * @see #must(String, String)    */
annotation|@
name|Override
DECL|method|must (@onnull final String key, @Nonnull final String... values)
specifier|public
name|B
name|must
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|key
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
modifier|...
name|values
parameter_list|)
block|{
name|mandatoryKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|options
operator|.
name|setStrings
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Get the mutable option configuration.    * @return the option configuration.    */
DECL|method|getOptions ()
specifier|public
name|Configuration
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
comment|/**    * Get all the keys that are set as mandatory keys.    */
DECL|method|getMandatoryKeys ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMandatoryKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|mandatoryKeys
argument_list|)
return|;
block|}
comment|/**    * Reject a configuration if one or more mandatory keys are    * not in the set of mandatory keys.    * The first invalid key raises the exception; the order of the    * scan and hence the specific key raising the exception is undefined.    * @param knownKeys a possibly empty collection of known keys    * @param extraErrorText extra error text to include.    * @throws IllegalArgumentException if any key is unknown.    */
DECL|method|rejectUnknownMandatoryKeys (final Collection<String> knownKeys, String extraErrorText)
specifier|protected
name|void
name|rejectUnknownMandatoryKeys
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|knownKeys
parameter_list|,
name|String
name|extraErrorText
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|rejectUnknownMandatoryKeys
argument_list|(
name|mandatoryKeys
argument_list|,
name|knownKeys
argument_list|,
name|extraErrorText
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reject a configuration if one or more mandatory keys are    * not in the set of mandatory keys.    * The first invalid key raises the exception; the order of the    * scan and hence the specific key raising the exception is undefined.    * @param mandatory the set of mandatory keys    * @param knownKeys a possibly empty collection of known keys    * @param extraErrorText extra error text to include.    * @throws IllegalArgumentException if any key is unknown.    */
DECL|method|rejectUnknownMandatoryKeys ( final Set<String> mandatory, final Collection<String> knownKeys, final String extraErrorText)
specifier|public
specifier|static
name|void
name|rejectUnknownMandatoryKeys
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mandatory
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|knownKeys
parameter_list|,
specifier|final
name|String
name|extraErrorText
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|String
name|eText
init|=
name|extraErrorText
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
operator|(
name|extraErrorText
operator|+
literal|" "
operator|)
decl_stmt|;
name|mandatory
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|)
lambda|->
name|checkArgument
argument_list|(
name|knownKeys
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|,
name|UNKNOWN_MANDATORY_KEY
operator|+
literal|" %s\"%s\""
argument_list|,
name|eText
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

