begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * The {code PrintableString} class converts any string to a printable string  * by replacing non-printable characters with ?.  *  * Categories of Unicode non-printable characters:  *<ul>  *<li> Control characters   (Cc)  *<li> Formatting Unicode   (Cf)  *<li> Private use Unicode  (Co)  *<li> Unassigned Unicode   (Cn)  *<li> Standalone surrogate (Unfortunately no matching Unicode category)  *</ul>  *  * @see Character  * @see<a href="http://www.unicode.org/">The Unicode Consortium</a>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|PrintableString
class|class
name|PrintableString
block|{
DECL|field|REPLACEMENT_CHAR
specifier|private
specifier|static
specifier|final
name|char
name|REPLACEMENT_CHAR
init|=
literal|'?'
decl_stmt|;
DECL|field|printableString
specifier|private
specifier|final
name|String
name|printableString
decl_stmt|;
DECL|method|PrintableString (String rawString)
name|PrintableString
parameter_list|(
name|String
name|rawString
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|rawString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|rawString
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|int
name|codePoint
init|=
name|rawString
operator|.
name|codePointAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|Character
operator|.
name|getType
argument_list|(
name|codePoint
argument_list|)
condition|)
block|{
case|case
name|Character
operator|.
name|CONTROL
case|:
comment|// Cc
case|case
name|Character
operator|.
name|FORMAT
case|:
comment|// Cf
case|case
name|Character
operator|.
name|PRIVATE_USE
case|:
comment|// Co
case|case
name|Character
operator|.
name|SURROGATE
case|:
comment|// Cs
case|case
name|Character
operator|.
name|UNASSIGNED
case|:
comment|// Cn
name|stringBuilder
operator|.
name|append
argument_list|(
name|REPLACEMENT_CHAR
argument_list|)
expr_stmt|;
break|break;
default|default:
name|stringBuilder
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toChars
argument_list|(
name|codePoint
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|printableString
operator|=
name|stringBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|printableString
return|;
block|}
block|}
end_class

end_unit

