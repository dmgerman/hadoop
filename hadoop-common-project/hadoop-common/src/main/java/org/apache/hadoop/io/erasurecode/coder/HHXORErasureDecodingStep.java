begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
operator|.
name|util
operator|.
name|HHUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureEncoder
import|;
end_import

begin_comment
comment|/**  * Hitchhiker-XOR Erasure decoding step, a wrapper of all the necessary  * information to perform a decoding step involved in the whole process of  * decoding a block group.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HHXORErasureDecodingStep
specifier|public
class|class
name|HHXORErasureDecodingStep
extends|extends
name|HHErasureCodingStep
block|{
DECL|field|pbIndex
specifier|private
name|int
name|pbIndex
decl_stmt|;
DECL|field|piggyBackIndex
specifier|private
name|int
index|[]
name|piggyBackIndex
decl_stmt|;
DECL|field|piggyBackFullIndex
specifier|private
name|int
index|[]
name|piggyBackFullIndex
decl_stmt|;
DECL|field|erasedIndexes
specifier|private
name|int
index|[]
name|erasedIndexes
decl_stmt|;
DECL|field|rsRawDecoder
specifier|private
name|RawErasureDecoder
name|rsRawDecoder
decl_stmt|;
DECL|field|xorRawEncoder
specifier|private
name|RawErasureEncoder
name|xorRawEncoder
decl_stmt|;
comment|/**    * The constructor with all the necessary info.    * @param inputBlocks    * @param erasedIndexes the indexes of erased blocks in inputBlocks array    * @param outputBlocks    * @param rawDecoder underlying RS decoder for hitchhiker decoding    * @param rawEncoder underlying XOR encoder for hitchhiker decoding    */
DECL|method|HHXORErasureDecodingStep (ECBlock[] inputBlocks, int[] erasedIndexes, ECBlock[] outputBlocks, RawErasureDecoder rawDecoder, RawErasureEncoder rawEncoder)
specifier|public
name|HHXORErasureDecodingStep
parameter_list|(
name|ECBlock
index|[]
name|inputBlocks
parameter_list|,
name|int
index|[]
name|erasedIndexes
parameter_list|,
name|ECBlock
index|[]
name|outputBlocks
parameter_list|,
name|RawErasureDecoder
name|rawDecoder
parameter_list|,
name|RawErasureEncoder
name|rawEncoder
parameter_list|)
block|{
name|super
argument_list|(
name|inputBlocks
argument_list|,
name|outputBlocks
argument_list|)
expr_stmt|;
name|this
operator|.
name|pbIndex
operator|=
name|rawDecoder
operator|.
name|getNumParityUnits
argument_list|()
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|erasedIndexes
operator|=
name|erasedIndexes
expr_stmt|;
name|this
operator|.
name|rsRawDecoder
operator|=
name|rawDecoder
expr_stmt|;
name|this
operator|.
name|xorRawEncoder
operator|=
name|rawEncoder
expr_stmt|;
name|this
operator|.
name|piggyBackIndex
operator|=
name|HHUtil
operator|.
name|initPiggyBackIndexWithoutPBVec
argument_list|(
name|rawDecoder
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|rawDecoder
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|piggyBackFullIndex
operator|=
name|HHUtil
operator|.
name|initPiggyBackFullIndexVec
argument_list|(
name|rawDecoder
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|piggyBackIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performCoding (ECChunk[] inputChunks, ECChunk[] outputChunks)
specifier|public
name|void
name|performCoding
parameter_list|(
name|ECChunk
index|[]
name|inputChunks
parameter_list|,
name|ECChunk
index|[]
name|outputChunks
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|erasedIndexes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|ByteBuffer
index|[]
name|inputBuffers
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|inputChunks
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|outputBuffers
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|outputChunks
argument_list|)
decl_stmt|;
name|performCoding
argument_list|(
name|inputBuffers
argument_list|,
name|outputBuffers
argument_list|)
expr_stmt|;
block|}
DECL|method|performCoding (ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|private
name|void
name|performCoding
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDataUnits
init|=
name|rsRawDecoder
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParityUnits
init|=
name|rsRawDecoder
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numTotalUnits
init|=
name|numDataUnits
operator|+
name|numParityUnits
decl_stmt|;
specifier|final
name|int
name|subPacketSize
init|=
name|getSubPacketSize
argument_list|()
decl_stmt|;
name|ByteBuffer
name|fisrtValidInput
init|=
name|HHUtil
operator|.
name|findFirstValidInput
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
specifier|final
name|int
name|bufSize
init|=
name|fisrtValidInput
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|length
operator|!=
name|numTotalUnits
operator|*
name|getSubPacketSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid inputs length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputs
operator|.
name|length
operator|!=
name|erasedIndexes
operator|.
name|length
operator|*
name|getSubPacketSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid outputs length"
argument_list|)
throw|;
block|}
comment|// notes:inputs length = numDataUnits * subPacketizationSize
comment|// first numDataUnits length is first sub-stripe,
comment|// second numDataUnits length is second sub-stripe
name|ByteBuffer
index|[]
index|[]
name|newIn
init|=
operator|new
name|ByteBuffer
index|[
name|subPacketSize
index|]
index|[
name|numTotalUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTotalUnits
condition|;
operator|++
name|j
control|)
block|{
name|newIn
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|inputs
index|[
name|i
operator|*
name|numTotalUnits
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
name|ByteBuffer
index|[]
index|[]
name|newOut
init|=
operator|new
name|ByteBuffer
index|[
name|subPacketSize
index|]
index|[
name|erasedIndexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|erasedIndexes
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|newOut
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|outputs
index|[
name|i
operator|*
name|erasedIndexes
operator|.
name|length
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|erasedIndexes
operator|.
name|length
operator|==
literal|1
operator|&&
name|erasedIndexes
index|[
literal|0
index|]
operator|<
name|numDataUnits
condition|)
block|{
comment|// Only reconstruct one data unit missing
name|doDecodeSingle
argument_list|(
name|newIn
argument_list|,
name|newOut
argument_list|,
name|erasedIndexes
index|[
literal|0
index|]
argument_list|,
name|bufSize
argument_list|,
name|fisrtValidInput
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDecodeMultiAndParity
argument_list|(
name|newIn
argument_list|,
name|newOut
argument_list|,
name|erasedIndexes
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDecodeSingle (ByteBuffer[][] inputs, ByteBuffer[][] outputs, int erasedLocationToFix, int bufSize, boolean isDirect)
specifier|private
name|void
name|doDecodeSingle
parameter_list|(
name|ByteBuffer
index|[]
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
index|[]
name|outputs
parameter_list|,
name|int
name|erasedLocationToFix
parameter_list|,
name|int
name|bufSize
parameter_list|,
name|boolean
name|isDirect
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDataUnits
init|=
name|rsRawDecoder
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParityUnits
init|=
name|rsRawDecoder
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|subPacketSize
init|=
name|getSubPacketSize
argument_list|()
decl_stmt|;
name|int
index|[]
index|[]
name|inputPositions
init|=
operator|new
name|int
index|[
name|subPacketSize
index|]
index|[
name|inputs
index|[
literal|0
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputs
index|[
name|i
index|]
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|inputPositions
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|ByteBuffer
index|[]
name|tempInputs
init|=
operator|new
name|ByteBuffer
index|[
name|numDataUnits
operator|+
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tempInputs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tempInputs
index|[
name|i
index|]
operator|=
name|inputs
index|[
literal|1
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
name|ByteBuffer
index|[]
index|[]
name|tmpOutputs
init|=
operator|new
name|ByteBuffer
index|[
name|subPacketSize
index|]
index|[
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getSubPacketSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|erasedIndexes
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|tmpOutputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|outputs
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|m
init|=
name|erasedIndexes
operator|.
name|length
init|;
name|m
operator|<
name|numParityUnits
condition|;
operator|++
name|m
control|)
block|{
name|tmpOutputs
index|[
name|i
index|]
index|[
name|m
index|]
operator|=
name|HHUtil
operator|.
name|allocateByteBuffer
argument_list|(
name|isDirect
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|// First consider the second subPacket
name|int
index|[]
name|erasedLocation
init|=
operator|new
name|int
index|[
name|numParityUnits
index|]
decl_stmt|;
name|erasedLocation
index|[
literal|0
index|]
operator|=
name|erasedLocationToFix
expr_stmt|;
comment|// assign the erased locations based on the locations not read for
comment|// second subPacket but from decoding
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|erasedLocation
index|[
name|i
index|]
operator|=
name|numDataUnits
operator|+
name|i
expr_stmt|;
name|tempInputs
index|[
name|numDataUnits
operator|+
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|rsRawDecoder
operator|.
name|decode
argument_list|(
name|tempInputs
argument_list|,
name|erasedLocation
argument_list|,
name|tmpOutputs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
name|piggyBackParityIndex
init|=
name|piggyBackFullIndex
index|[
name|erasedLocationToFix
index|]
decl_stmt|;
name|ByteBuffer
name|piggyBack
init|=
name|HHUtil
operator|.
name|getPiggyBackForDecode
argument_list|(
name|inputs
argument_list|,
name|tmpOutputs
argument_list|,
name|piggyBackParityIndex
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|,
name|pbIndex
argument_list|)
decl_stmt|;
comment|// Second consider the first subPacket.
comment|// get the value of the piggyback associated with the erased location
if|if
condition|(
name|isDirect
condition|)
block|{
comment|// decode the erased value in the first subPacket by using the piggyback
name|int
name|idxToWrite
init|=
literal|0
decl_stmt|;
name|doDecodeByPiggyBack
argument_list|(
name|inputs
index|[
literal|0
index|]
argument_list|,
name|tmpOutputs
index|[
literal|0
index|]
index|[
name|idxToWrite
index|]
argument_list|,
name|piggyBack
argument_list|,
name|erasedLocationToFix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteBuffer
name|buffer
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|newInputs
init|=
operator|new
name|byte
index|[
name|getSubPacketSize
argument_list|()
index|]
index|[
name|inputs
index|[
literal|0
index|]
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|int
index|[]
index|[]
name|inputOffsets
init|=
operator|new
name|int
index|[
name|getSubPacketSize
argument_list|()
index|]
index|[
name|inputs
index|[
literal|0
index|]
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|newOutputs
init|=
operator|new
name|byte
index|[
name|getSubPacketSize
argument_list|()
index|]
index|[
name|numParityUnits
index|]
index|[]
decl_stmt|;
name|int
index|[]
index|[]
name|outOffsets
init|=
operator|new
name|int
index|[
name|getSubPacketSize
argument_list|()
index|]
index|[
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getSubPacketSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputs
index|[
literal|0
index|]
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|buffer
operator|=
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|inputOffsets
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|newInputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|buffer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getSubPacketSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numParityUnits
condition|;
operator|++
name|j
control|)
block|{
name|buffer
operator|=
name|tmpOutputs
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|outOffsets
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|newOutputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|buffer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|byte
index|[]
name|newPiggyBack
init|=
name|piggyBack
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// decode the erased value in the first subPacket by using the piggyback
name|int
name|idxToWrite
init|=
literal|0
decl_stmt|;
name|doDecodeByPiggyBack
argument_list|(
name|newInputs
index|[
literal|0
index|]
argument_list|,
name|inputOffsets
index|[
literal|0
index|]
argument_list|,
name|newOutputs
index|[
literal|0
index|]
index|[
name|idxToWrite
index|]
argument_list|,
name|outOffsets
index|[
literal|0
index|]
index|[
name|idxToWrite
index|]
argument_list|,
name|newPiggyBack
argument_list|,
name|erasedLocationToFix
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputs
index|[
name|i
index|]
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|position
argument_list|(
name|inputPositions
index|[
name|i
index|]
index|[
name|j
index|]
operator|+
name|bufSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doDecodeByPiggyBack (ByteBuffer[] inputs, ByteBuffer outputs, ByteBuffer piggyBack, int erasedLocationToFix)
specifier|private
name|void
name|doDecodeByPiggyBack
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
name|outputs
parameter_list|,
name|ByteBuffer
name|piggyBack
parameter_list|,
name|int
name|erasedLocationToFix
parameter_list|)
block|{
specifier|final
name|int
name|thisPiggyBackSetIdx
init|=
name|piggyBackFullIndex
index|[
name|erasedLocationToFix
index|]
decl_stmt|;
specifier|final
name|int
name|startIndex
init|=
name|piggyBackIndex
index|[
name|thisPiggyBackSetIdx
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|int
name|endIndex
init|=
name|piggyBackIndex
index|[
name|thisPiggyBackSetIdx
index|]
decl_stmt|;
comment|// recover first sub-stripe data by XOR piggyback
name|int
name|bufSize
init|=
name|piggyBack
operator|.
name|remaining
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|piggyBack
operator|.
name|position
argument_list|()
init|;
name|i
operator|<
name|piggyBack
operator|.
name|position
argument_list|()
operator|+
name|bufSize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|startIndex
init|;
name|j
operator|<
name|endIndex
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|piggyBack
operator|.
name|put
argument_list|(
name|i
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|piggyBack
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|^
name|inputs
index|[
name|j
index|]
operator|.
name|get
argument_list|(
name|inputs
index|[
name|j
index|]
operator|.
name|position
argument_list|()
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|outputs
operator|.
name|put
argument_list|(
name|outputs
operator|.
name|position
argument_list|()
operator|+
name|i
argument_list|,
name|piggyBack
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDecodeByPiggyBack (byte[][] inputs, int[] inputOffsets, byte[] outputs, int outOffset, byte[] piggyBack, int erasedLocationToFix, int bufSize)
specifier|private
name|void
name|doDecodeByPiggyBack
parameter_list|(
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|inputOffsets
parameter_list|,
name|byte
index|[]
name|outputs
parameter_list|,
name|int
name|outOffset
parameter_list|,
name|byte
index|[]
name|piggyBack
parameter_list|,
name|int
name|erasedLocationToFix
parameter_list|,
name|int
name|bufSize
parameter_list|)
block|{
specifier|final
name|int
name|thisPiggyBackSetIdx
init|=
name|piggyBackFullIndex
index|[
name|erasedLocationToFix
index|]
decl_stmt|;
specifier|final
name|int
name|startIndex
init|=
name|piggyBackIndex
index|[
name|thisPiggyBackSetIdx
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|int
name|endIndex
init|=
name|piggyBackIndex
index|[
name|thisPiggyBackSetIdx
index|]
decl_stmt|;
comment|// recover first sub-stripe data by XOR piggyback
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufSize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|startIndex
init|;
name|j
operator|<
name|endIndex
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
name|piggyBack
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|piggyBack
index|[
name|i
index|]
operator|^
name|inputs
index|[
name|j
index|]
index|[
name|i
operator|+
name|inputOffsets
index|[
name|j
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|outputs
index|[
name|i
operator|+
name|outOffset
index|]
operator|=
name|piggyBack
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|method|doDecodeMultiAndParity (ByteBuffer[][] inputs, ByteBuffer[][] outputs, int[] erasedLocationToFix, int bufSize)
specifier|private
name|void
name|doDecodeMultiAndParity
parameter_list|(
name|ByteBuffer
index|[]
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
index|[]
name|outputs
parameter_list|,
name|int
index|[]
name|erasedLocationToFix
parameter_list|,
name|int
name|bufSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numDataUnits
init|=
name|rsRawDecoder
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParityUnits
init|=
name|rsRawDecoder
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numTotalUnits
init|=
name|numDataUnits
operator|+
name|numParityUnits
decl_stmt|;
name|int
index|[]
name|parityToFixFlag
init|=
operator|new
name|int
index|[
name|numTotalUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocationToFix
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|erasedLocationToFix
index|[
name|i
index|]
operator|>=
name|numDataUnits
condition|)
block|{
name|parityToFixFlag
index|[
name|erasedLocationToFix
index|[
name|i
index|]
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|int
index|[]
name|inputPositions
init|=
operator|new
name|int
index|[
name|inputs
index|[
literal|0
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputPositions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|inputPositions
index|[
name|i
index|]
operator|=
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
block|}
comment|// decoded first sub-stripe
name|rsRawDecoder
operator|.
name|decode
argument_list|(
name|inputs
index|[
literal|0
index|]
argument_list|,
name|erasedLocationToFix
argument_list|,
name|outputs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
comment|// dataLen bytes consumed
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|.
name|position
argument_list|(
name|inputPositions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ByteBuffer
index|[]
name|tempInput
init|=
operator|new
name|ByteBuffer
index|[
name|numDataUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataUnits
condition|;
operator|++
name|i
control|)
block|{
name|tempInput
index|[
name|i
index|]
operator|=
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
expr_stmt|;
comment|//
comment|//      if (!isDirect&& tempInput[i] != null) {
comment|//        tempInput[i].position(tempInput[i].position() - bufSize);
comment|//      }
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocationToFix
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|erasedLocationToFix
index|[
name|i
index|]
operator|<
name|numDataUnits
condition|)
block|{
name|tempInput
index|[
name|erasedLocationToFix
index|[
name|i
index|]
index|]
operator|=
name|outputs
index|[
literal|0
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|ByteBuffer
index|[]
name|piggyBack
init|=
name|HHUtil
operator|.
name|getPiggyBacksFromInput
argument_list|(
name|tempInput
argument_list|,
name|piggyBackIndex
argument_list|,
name|numParityUnits
argument_list|,
literal|0
argument_list|,
name|xorRawEncoder
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|numDataUnits
operator|+
literal|1
init|;
name|j
operator|<
name|numTotalUnits
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|parityToFixFlag
index|[
name|j
index|]
operator|==
literal|0
operator|&&
name|inputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
block|{
comment|// f(b) + f(a1,a2,a3....)
for|for
control|(
name|int
name|k
init|=
name|inputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|position
argument_list|()
init|,
name|m
init|=
name|piggyBack
index|[
name|j
operator|-
name|numDataUnits
operator|-
literal|1
index|]
operator|.
name|position
argument_list|()
init|;
name|k
operator|<
name|inputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|limit
argument_list|()
condition|;
operator|++
name|k
operator|,
operator|++
name|m
control|)
block|{
name|inputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|put
argument_list|(
name|k
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|inputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|^
name|piggyBack
index|[
name|j
operator|-
name|numDataUnits
operator|-
literal|1
index|]
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// decoded second sub-stripe
name|rsRawDecoder
operator|.
name|decode
argument_list|(
name|inputs
index|[
literal|1
index|]
argument_list|,
name|erasedLocationToFix
argument_list|,
name|outputs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// parity index = 0, the data have no piggyBack
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|erasedLocationToFix
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|erasedLocationToFix
index|[
name|j
index|]
operator|<
name|numTotalUnits
operator|&&
name|erasedLocationToFix
index|[
name|j
index|]
operator|>
name|numDataUnits
condition|)
block|{
name|int
name|parityIndex
init|=
name|erasedLocationToFix
index|[
name|j
index|]
operator|-
name|numDataUnits
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|outputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|position
argument_list|()
init|,
name|m
init|=
name|piggyBack
index|[
name|parityIndex
index|]
operator|.
name|position
argument_list|()
init|;
name|k
operator|<
name|outputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|limit
argument_list|()
condition|;
operator|++
name|k
operator|,
operator|++
name|m
control|)
block|{
name|outputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|put
argument_list|(
name|k
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|outputs
index|[
literal|1
index|]
index|[
name|j
index|]
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|^
name|piggyBack
index|[
name|parityIndex
index|]
operator|.
name|get
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
comment|// dataLen bytes consumed
name|inputs
index|[
literal|0
index|]
index|[
name|i
index|]
operator|.
name|position
argument_list|(
name|inputPositions
index|[
name|i
index|]
operator|+
name|bufSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

