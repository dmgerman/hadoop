begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|re2j
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|re2j
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A class for POSIX glob pattern with brace expansions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|GlobPattern
specifier|public
class|class
name|GlobPattern
block|{
DECL|field|BACKSLASH
specifier|private
specifier|static
specifier|final
name|char
name|BACKSLASH
init|=
literal|'\\'
decl_stmt|;
DECL|field|compiled
specifier|private
name|Pattern
name|compiled
decl_stmt|;
DECL|field|hasWildcard
specifier|private
name|boolean
name|hasWildcard
init|=
literal|false
decl_stmt|;
comment|/**    * Construct the glob pattern object with a glob pattern string    * @param globPattern the glob pattern string    */
DECL|method|GlobPattern (String globPattern)
specifier|public
name|GlobPattern
parameter_list|(
name|String
name|globPattern
parameter_list|)
block|{
name|set
argument_list|(
name|globPattern
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the compiled pattern    */
DECL|method|compiled ()
specifier|public
name|Pattern
name|compiled
parameter_list|()
block|{
return|return
name|compiled
return|;
block|}
comment|/**    * Compile glob pattern string    * @param globPattern the glob pattern    * @return the pattern object    */
DECL|method|compile (String globPattern)
specifier|public
specifier|static
name|Pattern
name|compile
parameter_list|(
name|String
name|globPattern
parameter_list|)
block|{
return|return
operator|new
name|GlobPattern
argument_list|(
name|globPattern
argument_list|)
operator|.
name|compiled
argument_list|()
return|;
block|}
comment|/**    * Match input against the compiled glob pattern    * @param s input chars    * @return true for successful matches    */
DECL|method|matches (CharSequence s)
specifier|public
name|boolean
name|matches
parameter_list|(
name|CharSequence
name|s
parameter_list|)
block|{
return|return
name|compiled
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**    * Set and compile a glob pattern    * @param glob  the glob pattern string    */
DECL|method|set (String glob)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|glob
parameter_list|)
block|{
name|StringBuilder
name|regex
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|setOpen
init|=
literal|0
decl_stmt|;
name|int
name|curlyOpen
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|glob
operator|.
name|length
argument_list|()
decl_stmt|;
name|hasWildcard
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|glob
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|BACKSLASH
case|:
if|if
condition|(
operator|++
name|i
operator|>=
name|len
condition|)
block|{
name|error
argument_list|(
literal|"Missing escaped character"
argument_list|,
name|glob
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|regex
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
name|glob
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
case|case
literal|'.'
case|:
case|case
literal|'$'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'|'
case|:
case|case
literal|'+'
case|:
comment|// escape regex special chars that are not glob special chars
name|regex
operator|.
name|append
argument_list|(
name|BACKSLASH
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|regex
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|hasWildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'?'
case|:
name|regex
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|hasWildcard
operator|=
literal|true
expr_stmt|;
continue|continue;
case|case
literal|'{'
case|:
comment|// start of a group
name|regex
operator|.
name|append
argument_list|(
literal|"(?:"
argument_list|)
expr_stmt|;
comment|// non-capturing
name|curlyOpen
operator|++
expr_stmt|;
name|hasWildcard
operator|=
literal|true
expr_stmt|;
continue|continue;
case|case
literal|','
case|:
name|regex
operator|.
name|append
argument_list|(
name|curlyOpen
operator|>
literal|0
condition|?
literal|'|'
else|:
name|c
argument_list|)
expr_stmt|;
continue|continue;
case|case
literal|'}'
case|:
if|if
condition|(
name|curlyOpen
operator|>
literal|0
condition|)
block|{
comment|// end of a group
name|curlyOpen
operator|--
expr_stmt|;
name|regex
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
break|break;
case|case
literal|'['
case|:
if|if
condition|(
name|setOpen
operator|>
literal|0
condition|)
block|{
name|error
argument_list|(
literal|"Unclosed character class"
argument_list|,
name|glob
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|setOpen
operator|++
expr_stmt|;
name|hasWildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'^'
case|:
comment|// ^ inside [...] can be unescaped
if|if
condition|(
name|setOpen
operator|==
literal|0
condition|)
block|{
name|regex
operator|.
name|append
argument_list|(
name|BACKSLASH
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'!'
case|:
comment|// [! needs to be translated to [^
name|regex
operator|.
name|append
argument_list|(
name|setOpen
operator|>
literal|0
operator|&&
literal|'['
operator|==
name|glob
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
condition|?
literal|'^'
else|:
literal|'!'
argument_list|)
expr_stmt|;
continue|continue;
case|case
literal|']'
case|:
comment|// Many set errors like [][] could not be easily detected here,
comment|// as []], []-] and [-] are all valid POSIX glob and java regex.
comment|// We'll just let the regex compiler do the real work.
name|setOpen
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
block|}
name|regex
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setOpen
operator|>
literal|0
condition|)
block|{
name|error
argument_list|(
literal|"Unclosed character class"
argument_list|,
name|glob
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curlyOpen
operator|>
literal|0
condition|)
block|{
name|error
argument_list|(
literal|"Unclosed group"
argument_list|,
name|glob
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|compiled
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
operator|.
name|toString
argument_list|()
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true if this is a wildcard pattern (with special chars)    */
DECL|method|hasWildcard ()
specifier|public
name|boolean
name|hasWildcard
parameter_list|()
block|{
return|return
name|hasWildcard
return|;
block|}
DECL|method|error (String message, String pattern, int pos)
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|pattern
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|String
name|fullMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s at pos %d"
argument_list|,
name|message
argument_list|,
name|pos
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PatternSyntaxException
argument_list|(
name|fullMessage
argument_list|,
name|pattern
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

