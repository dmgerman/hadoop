begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForwardingListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * This ExecutorService blocks the submission of new tasks when its queue is  * already full by using a semaphore. Task submissions require permits, task  * completions release permits.  *<p>  * This is a refactoring of {@link BlockingThreadPoolExecutorService}; that code  * contains the thread pool logic, whereas this isolates the semaphore  * and submit logic for use with other thread pools and delegation models.  *<p>  * This is inspired by<a href="https://github.com/apache/incubator-s4/blob/master/subprojects/s4-comm/src/main/java/org/apache/s4/comm/staging/BlockingThreadPoolExecutorService.java">  * this s4 threadpool</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"NullableProblems"
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SemaphoredDelegatingExecutor
specifier|public
class|class
name|SemaphoredDelegatingExecutor
extends|extends
name|ForwardingListeningExecutorService
block|{
DECL|field|queueingPermits
specifier|private
specifier|final
name|Semaphore
name|queueingPermits
decl_stmt|;
DECL|field|executorDelegatee
specifier|private
specifier|final
name|ListeningExecutorService
name|executorDelegatee
decl_stmt|;
DECL|field|permitCount
specifier|private
specifier|final
name|int
name|permitCount
decl_stmt|;
comment|/**    * Instantiate.    * @param executorDelegatee Executor to delegate to    * @param permitCount number of permits into the queue permitted    * @param fair should the semaphore be "fair"    */
DECL|method|SemaphoredDelegatingExecutor ( ListeningExecutorService executorDelegatee, int permitCount, boolean fair)
specifier|public
name|SemaphoredDelegatingExecutor
parameter_list|(
name|ListeningExecutorService
name|executorDelegatee
parameter_list|,
name|int
name|permitCount
parameter_list|,
name|boolean
name|fair
parameter_list|)
block|{
name|this
operator|.
name|permitCount
operator|=
name|permitCount
expr_stmt|;
name|queueingPermits
operator|=
operator|new
name|Semaphore
argument_list|(
name|permitCount
argument_list|,
name|fair
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorDelegatee
operator|=
name|executorDelegatee
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delegate ()
specifier|protected
name|ListeningExecutorService
name|delegate
parameter_list|()
block|{
return|return
name|executorDelegatee
return|;
block|}
annotation|@
name|Override
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|invokeAll (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Future
argument_list|<
name|T
argument_list|>
argument_list|>
name|invokeAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|invokeAny (Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeAny
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|submit (Callable<T> task)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
try|try
block|{
name|queueingPermits
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|Futures
operator|.
name|immediateFailedCheckedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|submit
argument_list|(
operator|new
name|CallableWithPermitRelease
argument_list|<>
argument_list|(
name|task
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task, T result)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ListenableFuture
argument_list|<
name|T
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|,
name|T
name|result
parameter_list|)
block|{
try|try
block|{
name|queueingPermits
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|Futures
operator|.
name|immediateFailedCheckedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|submit
argument_list|(
operator|new
name|RunnableWithPermitRelease
argument_list|(
name|task
argument_list|)
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submit (Runnable task)
specifier|public
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|submit
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
try|try
block|{
name|queueingPermits
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|Futures
operator|.
name|immediateFailedCheckedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|submit
argument_list|(
operator|new
name|RunnableWithPermitRelease
argument_list|(
name|task
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
try|try
block|{
name|queueingPermits
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|execute
argument_list|(
operator|new
name|RunnableWithPermitRelease
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of permits available; guaranteed to be    * {@code 0<= availablePermits<= size}.    * @return the number of permits available at the time of invocation.    */
DECL|method|getAvailablePermits ()
specifier|public
name|int
name|getAvailablePermits
parameter_list|()
block|{
return|return
name|queueingPermits
operator|.
name|availablePermits
argument_list|()
return|;
block|}
comment|/**    * Get the number of threads waiting to acquire a permit.    * @return snapshot of the length of the queue of blocked threads.    */
DECL|method|getWaitingCount ()
specifier|public
name|int
name|getWaitingCount
parameter_list|()
block|{
return|return
name|queueingPermits
operator|.
name|getQueueLength
argument_list|()
return|;
block|}
comment|/**    * Total number of permits.    * @return the number of permits as set in the constructor    */
DECL|method|getPermitCount ()
specifier|public
name|int
name|getPermitCount
parameter_list|()
block|{
return|return
name|permitCount
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SemaphoredDelegatingExecutor{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"permitCount="
argument_list|)
operator|.
name|append
argument_list|(
name|getPermitCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", available="
argument_list|)
operator|.
name|append
argument_list|(
name|getAvailablePermits
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", waiting="
argument_list|)
operator|.
name|append
argument_list|(
name|getWaitingCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Releases a permit after the task is executed.    */
DECL|class|RunnableWithPermitRelease
class|class
name|RunnableWithPermitRelease
implements|implements
name|Runnable
block|{
DECL|field|delegatee
specifier|private
name|Runnable
name|delegatee
decl_stmt|;
DECL|method|RunnableWithPermitRelease (Runnable delegatee)
name|RunnableWithPermitRelease
parameter_list|(
name|Runnable
name|delegatee
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|=
name|delegatee
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|delegatee
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|queueingPermits
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Releases a permit after the task is completed.    */
DECL|class|CallableWithPermitRelease
class|class
name|CallableWithPermitRelease
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
DECL|field|delegatee
specifier|private
name|Callable
argument_list|<
name|T
argument_list|>
name|delegatee
decl_stmt|;
DECL|method|CallableWithPermitRelease (Callable<T> delegatee)
name|CallableWithPermitRelease
parameter_list|(
name|Callable
argument_list|<
name|T
argument_list|>
name|delegatee
parameter_list|)
block|{
name|this
operator|.
name|delegatee
operator|=
name|delegatee
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|delegatee
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
name|queueingPermits
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

