begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FutureDataInputStreamBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_comment
comment|/**  * Builder for input streams and subclasses whose return value is  * actually a completable future: this allows for better asynchronous  * operation.  *  * To be more generic, {@link #opt(String, int)} and {@link #must(String, int)}  * variants provide implementation-agnostic way to customize the builder.  * Each FS-specific builder implementation can interpret the FS-specific  * options accordingly, for example:  *  * If the option is not related to the file system, the option will be ignored.  * If the option is must, but not supported by the file system, a  * {@link IllegalArgumentException} will be thrown.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FutureDataInputStreamBuilderImpl
specifier|public
specifier|abstract
class|class
name|FutureDataInputStreamBuilderImpl
extends|extends
name|AbstractFSBuilderImpl
argument_list|<
name|CompletableFuture
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|,
name|FutureDataInputStreamBuilder
argument_list|>
implements|implements
name|FutureDataInputStreamBuilder
block|{
DECL|field|fileSystem
specifier|private
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
decl_stmt|;
comment|/**    * Construct from a {@link FileContext}.    *    * @param fc FileContext    * @param path path.    * @throws IOException failure    */
DECL|method|FutureDataInputStreamBuilderImpl (@onnull FileContext fc, @Nonnull Path path)
specifier|protected
name|FutureDataInputStreamBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
name|FileContext
name|fc
parameter_list|,
annotation|@
name|Nonnull
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|fc
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
literal|null
expr_stmt|;
name|bufferSize
operator|=
name|IO_FILE_BUFFER_SIZE_DEFAULT
expr_stmt|;
block|}
comment|/**    * Constructor.    * @param fileSystem owner FS.    * @param path path    */
DECL|method|FutureDataInputStreamBuilderImpl (@onnull FileSystem fileSystem, @Nonnull Path path)
specifier|protected
name|FutureDataInputStreamBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
name|FileSystem
name|fileSystem
parameter_list|,
annotation|@
name|Nonnull
name|Path
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|checkNotNull
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
name|initFromFS
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor with PathHandle.    * @param fileSystem owner FS.    * @param pathHandle path handle    */
DECL|method|FutureDataInputStreamBuilderImpl (@onnull FileSystem fileSystem, @Nonnull PathHandle pathHandle)
specifier|public
name|FutureDataInputStreamBuilderImpl
parameter_list|(
annotation|@
name|Nonnull
name|FileSystem
name|fileSystem
parameter_list|,
annotation|@
name|Nonnull
name|PathHandle
name|pathHandle
parameter_list|)
block|{
name|super
argument_list|(
name|pathHandle
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|fileSystem
expr_stmt|;
name|initFromFS
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize from a filesystem.    */
DECL|method|initFromFS ()
specifier|private
name|void
name|initFromFS
parameter_list|()
block|{
name|bufferSize
operator|=
name|fileSystem
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|getFS ()
specifier|protected
name|FileSystem
name|getFS
parameter_list|()
block|{
name|checkNotNull
argument_list|(
name|fileSystem
argument_list|)
expr_stmt|;
return|return
name|fileSystem
return|;
block|}
DECL|method|getBufferSize ()
specifier|protected
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
comment|/**    * Set the size of the buffer to be used.    */
DECL|method|bufferSize (int bufSize)
specifier|public
name|FutureDataInputStreamBuilder
name|bufferSize
parameter_list|(
name|int
name|bufSize
parameter_list|)
block|{
name|bufferSize
operator|=
name|bufSize
expr_stmt|;
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
comment|/**    * Get the builder.    * This must be used after the constructor has been invoked to create    * the actual builder: it allows for subclasses to do things after    * construction.    */
DECL|method|builder ()
specifier|public
name|FutureDataInputStreamBuilder
name|builder
parameter_list|()
block|{
return|return
name|getThisBuilder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getThisBuilder ()
specifier|public
name|FutureDataInputStreamBuilder
name|getThisBuilder
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

