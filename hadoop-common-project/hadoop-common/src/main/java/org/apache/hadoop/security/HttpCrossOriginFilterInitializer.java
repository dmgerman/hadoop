begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
operator|.
name|CrossOriginFilter
import|;
end_import

begin_class
DECL|class|HttpCrossOriginFilterInitializer
specifier|public
class|class
name|HttpCrossOriginFilterInitializer
extends|extends
name|FilterInitializer
block|{
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"hadoop.http.cross-origin."
decl_stmt|;
DECL|field|ENABLED_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|ENABLED_SUFFIX
init|=
literal|"enabled"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HttpCrossOriginFilterInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|initFilter (FilterContainer container, Configuration conf)
specifier|public
name|void
name|initFilter
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|key
init|=
name|getEnabledConfigKey
argument_list|()
decl_stmt|;
name|boolean
name|enabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|container
operator|.
name|addGlobalFilter
argument_list|(
literal|"Cross Origin Filter"
argument_list|,
name|CrossOriginFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getFilterParameters
argument_list|(
name|conf
argument_list|,
name|getPrefix
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CORS filter not enabled. Please set "
operator|+
name|key
operator|+
literal|" to 'true' to enable it"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFilterParameters (Configuration conf, String prefix)
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilterParameters
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
operator|.
name|getValByRegex
argument_list|(
name|prefix
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|filterParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|filterParams
return|;
block|}
DECL|method|getPrefix ()
specifier|protected
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|HttpCrossOriginFilterInitializer
operator|.
name|PREFIX
return|;
block|}
DECL|method|getEnabledConfigKey ()
specifier|protected
name|String
name|getEnabledConfigKey
parameter_list|()
block|{
return|return
name|getPrefix
argument_list|()
operator|+
name|HttpCrossOriginFilterInitializer
operator|.
name|ENABLED_SUFFIX
return|;
block|}
block|}
end_class

end_unit

