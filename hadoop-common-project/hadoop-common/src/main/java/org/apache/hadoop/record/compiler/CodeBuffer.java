begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A wrapper around StringBuffer that automatically does indentation  *   * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CodeBuffer
specifier|public
class|class
name|CodeBuffer
block|{
DECL|field|startMarkers
specifier|static
specifier|private
name|ArrayList
argument_list|<
name|Character
argument_list|>
name|startMarkers
init|=
operator|new
name|ArrayList
argument_list|<
name|Character
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|endMarkers
specifier|static
specifier|private
name|ArrayList
argument_list|<
name|Character
argument_list|>
name|endMarkers
init|=
operator|new
name|ArrayList
argument_list|<
name|Character
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|addMarkers
argument_list|(
literal|'{'
argument_list|,
literal|'}'
argument_list|)
expr_stmt|;
name|addMarkers
argument_list|(
literal|'('
argument_list|,
literal|')'
argument_list|)
expr_stmt|;
block|}
DECL|method|addMarkers (char ch1, char ch2)
specifier|static
name|void
name|addMarkers
parameter_list|(
name|char
name|ch1
parameter_list|,
name|char
name|ch2
parameter_list|)
block|{
name|startMarkers
operator|.
name|add
argument_list|(
name|ch1
argument_list|)
expr_stmt|;
name|endMarkers
operator|.
name|add
argument_list|(
name|ch2
argument_list|)
expr_stmt|;
block|}
DECL|field|level
specifier|private
name|int
name|level
init|=
literal|0
decl_stmt|;
DECL|field|numSpaces
specifier|private
name|int
name|numSpaces
init|=
literal|2
decl_stmt|;
DECL|field|firstChar
specifier|private
name|boolean
name|firstChar
init|=
literal|true
decl_stmt|;
DECL|field|sb
specifier|private
name|StringBuffer
name|sb
decl_stmt|;
comment|/** Creates a new instance of CodeBuffer */
DECL|method|CodeBuffer ()
name|CodeBuffer
parameter_list|()
block|{
name|this
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|CodeBuffer (String s)
name|CodeBuffer
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
argument_list|(
literal|2
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|CodeBuffer (int numSpaces, String s)
name|CodeBuffer
parameter_list|(
name|int
name|numSpaces
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|numSpaces
operator|=
name|numSpaces
expr_stmt|;
name|this
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|append (String s)
name|void
name|append
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|length
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|append (char ch)
name|void
name|append
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|endMarkers
operator|.
name|contains
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|level
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|firstChar
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|level
condition|;
name|idx
operator|++
control|)
block|{
for|for
control|(
name|int
name|num
init|=
literal|0
init|;
name|num
operator|<
name|numSpaces
condition|;
name|num
operator|++
control|)
block|{
name|rawAppend
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rawAppend
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|firstChar
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|startMarkers
operator|.
name|contains
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|level
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|==
literal|'\n'
condition|)
block|{
name|firstChar
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|rawAppend (char ch)
specifier|private
name|void
name|rawAppend
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

