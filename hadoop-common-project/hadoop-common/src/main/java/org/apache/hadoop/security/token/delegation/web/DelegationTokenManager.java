begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|ZKDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Delegation Token Manager used by the  * {@link KerberosDelegationTokenAuthenticationHandler}.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DelegationTokenManager
specifier|public
class|class
name|DelegationTokenManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DelegationTokenManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ENABLE_ZK_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_ZK_KEY
init|=
literal|"zk-dt-secret-manager.enable"
decl_stmt|;
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"delegation-token."
decl_stmt|;
DECL|field|UPDATE_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_INTERVAL
init|=
name|PREFIX
operator|+
literal|"update-interval.sec"
decl_stmt|;
DECL|field|UPDATE_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|UPDATE_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|MAX_LIFETIME
specifier|public
specifier|static
specifier|final
name|String
name|MAX_LIFETIME
init|=
name|PREFIX
operator|+
literal|"max-lifetime.sec"
decl_stmt|;
DECL|field|MAX_LIFETIME_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|MAX_LIFETIME_DEFAULT
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RENEW_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|RENEW_INTERVAL
init|=
name|PREFIX
operator|+
literal|"renew-interval.sec"
decl_stmt|;
DECL|field|RENEW_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|RENEW_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|REMOVAL_SCAN_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|REMOVAL_SCAN_INTERVAL
init|=
name|PREFIX
operator|+
literal|"removal-scan-interval.sec"
decl_stmt|;
DECL|field|REMOVAL_SCAN_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|REMOVAL_SCAN_INTERVAL_DEFAULT
init|=
literal|60
operator|*
literal|60
decl_stmt|;
DECL|class|DelegationTokenSecretManager
specifier|private
specifier|static
class|class
name|DelegationTokenSecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|tokenKind
specifier|private
name|Text
name|tokenKind
decl_stmt|;
DECL|method|DelegationTokenSecretManager (Configuration conf, Text tokenKind)
specifier|public
name|DelegationTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Text
name|tokenKind
parameter_list|)
block|{
name|super
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|UPDATE_INTERVAL
argument_list|,
name|UPDATE_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|1000
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|MAX_LIFETIME
argument_list|,
name|MAX_LIFETIME_DEFAULT
argument_list|)
operator|*
literal|1000
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|RENEW_INTERVAL
argument_list|,
name|RENEW_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|1000
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|REMOVAL_SCAN_INTERVAL
argument_list|,
name|REMOVAL_SCAN_INTERVAL_DEFAULT
argument_list|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKind
operator|=
name|tokenKind
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|DelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|tokenKind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeTokenIdentifier ( Token<DelegationTokenIdentifier> token)
specifier|public
name|DelegationTokenIdentifier
name|decodeTokenIdentifier
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DelegationTokenManager
operator|.
name|decodeToken
argument_list|(
name|token
argument_list|,
name|tokenKind
argument_list|)
return|;
block|}
block|}
DECL|class|ZKSecretManager
specifier|private
specifier|static
class|class
name|ZKSecretManager
extends|extends
name|ZKDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|tokenKind
specifier|private
name|Text
name|tokenKind
decl_stmt|;
DECL|method|ZKSecretManager (Configuration conf, Text tokenKind)
specifier|public
name|ZKSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Text
name|tokenKind
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenKind
operator|=
name|tokenKind
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|DelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|tokenKind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeTokenIdentifier ( Token<DelegationTokenIdentifier> token)
specifier|public
name|DelegationTokenIdentifier
name|decodeTokenIdentifier
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DelegationTokenManager
operator|.
name|decodeToken
argument_list|(
name|token
argument_list|,
name|tokenKind
argument_list|)
return|;
block|}
block|}
DECL|field|secretManager
specifier|private
name|AbstractDelegationTokenSecretManager
name|secretManager
init|=
literal|null
decl_stmt|;
DECL|field|managedSecretManager
specifier|private
name|boolean
name|managedSecretManager
decl_stmt|;
DECL|method|DelegationTokenManager (Configuration conf, Text tokenKind)
specifier|public
name|DelegationTokenManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Text
name|tokenKind
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|ENABLE_ZK_KEY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|secretManager
operator|=
operator|new
name|ZKSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|secretManager
operator|=
operator|new
name|DelegationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenKind
argument_list|)
expr_stmt|;
block|}
name|managedSecretManager
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Sets an external<code>DelegationTokenSecretManager</code> instance to    * manage creation and verification of Delegation Tokens.    *<p/>    * This is useful for use cases where secrets must be shared across multiple    * services.    *    * @param secretManager a<code>DelegationTokenSecretManager</code> instance    */
DECL|method|setExternalDelegationTokenSecretManager ( AbstractDelegationTokenSecretManager secretManager)
specifier|public
name|void
name|setExternalDelegationTokenSecretManager
parameter_list|(
name|AbstractDelegationTokenSecretManager
name|secretManager
parameter_list|)
block|{
name|this
operator|.
name|secretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
name|managedSecretManager
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|managedSecretManager
condition|)
block|{
try|try
block|{
name|secretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not start "
operator|+
name|secretManager
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|managedSecretManager
condition|)
block|{
name|secretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createToken ( UserGroupInformation ugi, String renewer)
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|createToken
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|String
name|renewer
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating token with ugi:{}, renewer:{}."
argument_list|,
name|ugi
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
name|renewer
operator|=
operator|(
name|renewer
operator|==
literal|null
operator|)
condition|?
name|ugi
operator|.
name|getShortUserName
argument_list|()
else|:
name|renewer
expr_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AbstractDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|(
name|AbstractDelegationTokenIdentifier
operator|)
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|tokenIdentifier
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|tokenIdentifier
operator|.
name|setRenewer
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
expr_stmt|;
name|tokenIdentifier
operator|.
name|setRealUser
argument_list|(
name|realUser
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|tokenIdentifier
argument_list|,
name|secretManager
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|renewToken ( Token<? extends AbstractDelegationTokenIdentifier> token, String renewer)
specifier|public
name|long
name|renewToken
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renewing token:{} with renewer:{}."
argument_list|,
name|token
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
return|return
name|secretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|renewer
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cancelToken ( Token<? extends AbstractDelegationTokenIdentifier> token, String canceler)
specifier|public
name|void
name|cancelToken
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|String
name|canceler
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling token:{} with canceler:{}."
argument_list|,
name|token
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
name|canceler
operator|=
operator|(
name|canceler
operator|!=
literal|null
operator|)
condition|?
name|canceler
else|:
name|verifyToken
argument_list|(
name|token
argument_list|)
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|secretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|verifyToken ( Token<? extends AbstractDelegationTokenIdentifier> token)
specifier|public
name|UserGroupInformation
name|verifyToken
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|AbstractDelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractDelegationTokenIdentifier
name|id
init|=
name|secretManager
operator|.
name|decodeTokenIdentifier
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|secretManager
operator|.
name|verifyToken
argument_list|(
name|id
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|getUser
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|getDelegationTokenSecretManager ()
specifier|public
name|AbstractDelegationTokenSecretManager
name|getDelegationTokenSecretManager
parameter_list|()
block|{
return|return
name|secretManager
return|;
block|}
DECL|method|decodeToken ( Token<DelegationTokenIdentifier> token, Text tokenKind)
specifier|private
specifier|static
name|DelegationTokenIdentifier
name|decodeToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|Text
name|tokenKind
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|tokenKind
argument_list|)
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

