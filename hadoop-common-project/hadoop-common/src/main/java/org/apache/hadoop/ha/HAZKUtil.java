begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_comment
comment|/**  * Utilities for working with ZooKeeper.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HAZKUtil
specifier|public
class|class
name|HAZKUtil
block|{
comment|/**    * Parse ACL permission string, partially borrowed from    * ZooKeeperMain private method    */
DECL|method|getPermFromString (String permString)
specifier|private
specifier|static
name|int
name|getPermFromString
parameter_list|(
name|String
name|permString
parameter_list|)
block|{
name|int
name|perm
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permString
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|permString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'r'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|READ
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|WRITE
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|CREATE
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|DELETE
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|perm
operator||=
name|ZooDefs
operator|.
name|Perms
operator|.
name|ADMIN
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|BadAclFormatException
argument_list|(
literal|"Invalid permission '"
operator|+
name|c
operator|+
literal|"' in permission string '"
operator|+
name|permString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
return|return
name|perm
return|;
block|}
comment|/**    * Parse comma separated list of ACL entries to secure generated nodes, e.g.    *<code>sasl:hdfs/host1@MY.DOMAIN:cdrwa,sasl:hdfs/host2@MY.DOMAIN:cdrwa</code>    *    * @return ACL list    * @throws HadoopIllegalArgumentException if an ACL is invalid    */
DECL|method|parseACLs (String aclString)
specifier|public
specifier|static
name|List
argument_list|<
name|ACL
argument_list|>
name|parseACLs
parameter_list|(
name|String
name|aclString
parameter_list|)
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclString
operator|==
literal|null
condition|)
block|{
return|return
name|acl
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|aclComps
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|aclString
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|aclComps
control|)
block|{
comment|// from ZooKeeperMain private method
name|int
name|firstColon
init|=
name|a
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|lastColon
init|=
name|a
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstColon
operator|==
operator|-
literal|1
operator|||
name|lastColon
operator|==
operator|-
literal|1
operator|||
name|firstColon
operator|==
name|lastColon
condition|)
block|{
throw|throw
operator|new
name|BadAclFormatException
argument_list|(
literal|"ACL '"
operator|+
name|a
operator|+
literal|"' not of expected form scheme:id:perm"
argument_list|)
throw|;
block|}
name|ACL
name|newAcl
init|=
operator|new
name|ACL
argument_list|()
decl_stmt|;
name|newAcl
operator|.
name|setId
argument_list|(
operator|new
name|Id
argument_list|(
name|a
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstColon
argument_list|)
argument_list|,
name|a
operator|.
name|substring
argument_list|(
name|firstColon
operator|+
literal|1
argument_list|,
name|lastColon
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newAcl
operator|.
name|setPerms
argument_list|(
name|getPermFromString
argument_list|(
name|a
operator|.
name|substring
argument_list|(
name|lastColon
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|add
argument_list|(
name|newAcl
argument_list|)
expr_stmt|;
block|}
return|return
name|acl
return|;
block|}
comment|/**    * Parse a comma-separated list of authentication mechanisms. Each    * such mechanism should be of the form 'scheme:auth' -- the same    * syntax used for the 'addAuth' command in the ZK CLI.    *     * @param authString the comma-separated auth mechanisms    * @return a list of parsed authentications    */
DECL|method|parseAuth (String authString)
specifier|public
specifier|static
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|parseAuth
parameter_list|(
name|String
name|authString
parameter_list|)
block|{
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|authString
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|authComps
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|authString
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|comp
range|:
name|authComps
control|)
block|{
name|String
name|parts
index|[]
init|=
name|comp
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|BadAuthFormatException
argument_list|(
literal|"Auth '"
operator|+
name|comp
operator|+
literal|"' not of expected form scheme:auth"
argument_list|)
throw|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ZKAuthInfo
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Because ZK ACLs and authentication information may be secret,    * allow the configuration values to be indirected through a file    * by specifying the configuration as "@/path/to/file". If this    * syntax is used, this function will return the contents of the file    * as a String.    *     * @param valInConf the value from the Configuration     * @return either the same value, or the contents of the referenced    * file if the configured value starts with "@"    * @throws IOException if the file cannot be read    */
DECL|method|resolveConfIndirection (String valInConf)
specifier|public
specifier|static
name|String
name|resolveConfIndirection
parameter_list|(
name|String
name|valInConf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valInConf
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|valInConf
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
return|return
name|valInConf
return|;
block|}
name|String
name|path
init|=
name|valInConf
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|Files
operator|.
name|toString
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * An authentication token passed to ZooKeeper.addAuthInfo    */
DECL|class|ZKAuthInfo
specifier|static
class|class
name|ZKAuthInfo
block|{
DECL|field|scheme
specifier|private
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|auth
specifier|private
specifier|final
name|byte
index|[]
name|auth
decl_stmt|;
DECL|method|ZKAuthInfo (String scheme, byte[] auth)
specifier|public
name|ZKAuthInfo
parameter_list|(
name|String
name|scheme
parameter_list|,
name|byte
index|[]
name|auth
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|auth
operator|=
name|auth
expr_stmt|;
block|}
DECL|method|getScheme ()
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
DECL|method|getAuth ()
name|byte
index|[]
name|getAuth
parameter_list|()
block|{
return|return
name|auth
return|;
block|}
block|}
DECL|class|BadAclFormatException
specifier|static
class|class
name|BadAclFormatException
extends|extends
name|HadoopIllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|BadAclFormatException (String message)
specifier|public
name|BadAclFormatException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BadAuthFormatException
specifier|static
class|class
name|BadAuthFormatException
extends|extends
name|HadoopIllegalArgumentException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|BadAuthFormatException (String message)
specifier|public
name|BadAuthFormatException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

