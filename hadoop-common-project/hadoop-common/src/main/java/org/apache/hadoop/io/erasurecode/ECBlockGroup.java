begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_comment
comment|/**  * A group of blocks or {@link ECBlock} incurred in an erasure coding task.  */
end_comment

begin_class
DECL|class|ECBlockGroup
specifier|public
class|class
name|ECBlockGroup
block|{
DECL|field|dataBlocks
specifier|private
name|ECBlock
index|[]
name|dataBlocks
decl_stmt|;
DECL|field|parityBlocks
specifier|private
name|ECBlock
index|[]
name|parityBlocks
decl_stmt|;
comment|/**    * A constructor specifying data blocks and parity blocks.    * @param dataBlocks data blocks in the group    * @param parityBlocks parity blocks in the group    */
DECL|method|ECBlockGroup (ECBlock[] dataBlocks, ECBlock[] parityBlocks)
specifier|public
name|ECBlockGroup
parameter_list|(
name|ECBlock
index|[]
name|dataBlocks
parameter_list|,
name|ECBlock
index|[]
name|parityBlocks
parameter_list|)
block|{
name|this
operator|.
name|dataBlocks
operator|=
name|dataBlocks
expr_stmt|;
name|this
operator|.
name|parityBlocks
operator|=
name|parityBlocks
expr_stmt|;
block|}
comment|/**    * Get data blocks    * @return data blocks    */
DECL|method|getDataBlocks ()
specifier|public
name|ECBlock
index|[]
name|getDataBlocks
parameter_list|()
block|{
return|return
name|dataBlocks
return|;
block|}
comment|/**    * Get parity blocks    * @return parity blocks    */
DECL|method|getParityBlocks ()
specifier|public
name|ECBlock
index|[]
name|getParityBlocks
parameter_list|()
block|{
return|return
name|parityBlocks
return|;
block|}
comment|/**    * Any erased data block?    * @return true if any erased data block, false otherwise    */
DECL|method|anyErasedDataBlock ()
specifier|public
name|boolean
name|anyErasedDataBlock
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|dataBlocks
index|[
name|i
index|]
operator|.
name|isErased
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Any erased parity block?    * @return true if any erased parity block, false otherwise    */
DECL|method|anyErasedParityBlock ()
specifier|public
name|boolean
name|anyErasedParityBlock
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parityBlocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|parityBlocks
index|[
name|i
index|]
operator|.
name|isErased
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get erased blocks count    * @return erased count of blocks    */
DECL|method|getErasedCount ()
specifier|public
name|int
name|getErasedCount
parameter_list|()
block|{
name|int
name|erasedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ECBlock
name|dataBlock
range|:
name|dataBlocks
control|)
block|{
if|if
condition|(
name|dataBlock
operator|.
name|isErased
argument_list|()
condition|)
name|erasedCount
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ECBlock
name|parityBlock
range|:
name|parityBlocks
control|)
block|{
if|if
condition|(
name|parityBlock
operator|.
name|isErased
argument_list|()
condition|)
name|erasedCount
operator|++
expr_stmt|;
block|}
return|return
name|erasedCount
return|;
block|}
block|}
end_class

end_unit

