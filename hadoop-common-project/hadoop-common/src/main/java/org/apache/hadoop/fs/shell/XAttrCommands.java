begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Enums
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * XAttr related operations  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|XAttrCommands
class|class
name|XAttrCommands
extends|extends
name|FsCommand
block|{
DECL|field|GET_FATTR
specifier|private
specifier|static
specifier|final
name|String
name|GET_FATTR
init|=
literal|"getfattr"
decl_stmt|;
DECL|field|SET_FATTR
specifier|private
specifier|static
specifier|final
name|String
name|SET_FATTR
init|=
literal|"setfattr"
decl_stmt|;
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|GetfattrCommand
operator|.
name|class
argument_list|,
literal|"-"
operator|+
name|GET_FATTR
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|SetfattrCommand
operator|.
name|class
argument_list|,
literal|"-"
operator|+
name|SET_FATTR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implements the '-getfattr' command for the FsShell.    */
DECL|class|GetfattrCommand
specifier|public
specifier|static
class|class
name|GetfattrCommand
extends|extends
name|FsCommand
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|GET_FATTR
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"[-R] {-n name | -d} [-e en]<path>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Displays the extended attribute names and values (if any) for a "
operator|+
literal|"file or directory.\n"
operator|+
literal|"-R: Recursively list the attributes for all files and directories.\n"
operator|+
literal|"-n name: Dump the named extended attribute value.\n"
operator|+
literal|"-d: Dump all extended attribute values associated with pathname.\n"
operator|+
literal|"-e<encoding>: Encode values after retrieving them."
operator|+
literal|"Valid encodings are \"text\", \"hex\", and \"base64\". "
operator|+
literal|"Values encoded as text strings are enclosed in double quotes (\"),"
operator|+
literal|" and values encoded as hexadecimal and base64 are prefixed with "
operator|+
literal|"0x and 0s, respectively.\n"
operator|+
literal|"<path>: The file or directory.\n"
decl_stmt|;
DECL|field|enValueOfFunc
specifier|private
specifier|final
specifier|static
name|Function
argument_list|<
name|String
argument_list|,
name|XAttrCodec
argument_list|>
name|enValueOfFunc
init|=
name|Enums
operator|.
name|valueOfFunction
argument_list|(
name|XAttrCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|dump
specifier|private
name|boolean
name|dump
init|=
literal|false
decl_stmt|;
DECL|field|encoding
specifier|private
name|XAttrCodec
name|encoding
init|=
name|XAttrCodec
operator|.
name|TEXT
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-n"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|String
name|en
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-e"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|en
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|encoding
operator|=
name|enValueOfFunc
operator|.
name|apply
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|en
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid/unsupported encoding option specified: "
operator|+
name|en
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|encoding
operator|!=
literal|null
argument_list|,
literal|"Invalid/unsupported encoding option specified: "
operator|+
name|en
argument_list|)
expr_stmt|;
block|}
name|boolean
name|r
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-R"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|setRecursive
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|dump
operator|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-d"
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dump
operator|&&
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Must specify '-n name' or '-d' option."
argument_list|)
throw|;
block|}
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"<path> is missing."
argument_list|)
throw|;
block|}
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Too many arguments."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|println
argument_list|(
literal|"# file: "
operator|+
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|dump
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|item
operator|.
name|fs
operator|.
name|getXAttrs
argument_list|(
name|item
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|xattrs
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|iter
init|=
name|xattrs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|printXAttr
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|byte
index|[]
name|value
init|=
name|item
operator|.
name|fs
operator|.
name|getXAttr
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|printXAttr
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printXAttr (String name, byte[] value)
specifier|private
name|void
name|printXAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|"="
operator|+
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Implements the '-setfattr' command for the FsShell.    */
DECL|class|SetfattrCommand
specifier|public
specifier|static
class|class
name|SetfattrCommand
extends|extends
name|FsCommand
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
name|SET_FATTR
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"{-n name [-v value] | -x name}<path>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Sets an extended attribute name and value for a file or directory.\n"
operator|+
literal|"-n name: The extended attribute name.\n"
operator|+
literal|"-v value: The extended attribute value. There are three different "
operator|+
literal|"encoding methods for the value. If the argument is enclosed in double "
operator|+
literal|"quotes, then the value is the string inside the quotes. If the "
operator|+
literal|"argument is prefixed with 0x or 0X, then it is taken as a hexadecimal "
operator|+
literal|"number. If the argument begins with 0s or 0S, then it is taken as a "
operator|+
literal|"base64 encoding.\n"
operator|+
literal|"-x name: Remove the extended attribute.\n"
operator|+
literal|"<path>: The file or directory.\n"
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|value
specifier|private
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
DECL|field|xname
specifier|private
name|String
name|xname
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-n"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|String
name|v
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-v"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|xname
operator|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-x"
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|xname
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Can not specify both '-n name' and '-x name' option."
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|xname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Must specify '-n name' or '-x name' option."
argument_list|)
throw|;
block|}
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"<path> is missing."
argument_list|)
throw|;
block|}
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Too many arguments."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|item
operator|.
name|fs
operator|.
name|setXAttr
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xname
operator|!=
literal|null
condition|)
block|{
name|item
operator|.
name|fs
operator|.
name|removeXAttr
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|xname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

