begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_comment
comment|/**  * A simple shell-based implementation of {@link IdMappingServiceProvider}   * Map id to user name or group name. It does update every 15 minutes. Only a  * single instance of this class is expected to be on the server.  *   * The maps are incrementally updated as described below:  *   1. Initialize the maps as empty.   *   2. Incrementally update the maps  *      - When ShellBasedIdMapping is requested for user or group name given   *        an ID, or for ID given a user or group name, do look up in the map  *        first, if it doesn't exist, find the corresponding entry with shell  *        command, and insert the entry to the maps.  *      - When group ID is requested for a given group name, and if the  *        group name is numerical, the full group map is loaded. Because we  *        don't have a good way to find the entry for a numerical group name,  *        loading the full map helps to get in all entries.  *   3. Periodically refresh the maps for both user and group, e.g,  *      do step 1.  *   Note: for testing purpose, step 1 may initial the maps with full mapping  *   when using constructor  *   {@link ShellBasedIdMapping#ShellBasedIdMapping(Configuration, boolean)}.  */
end_comment

begin_class
DECL|class|ShellBasedIdMapping
specifier|public
class|class
name|ShellBasedIdMapping
implements|implements
name|IdMappingServiceProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShellBasedIdMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OS
specifier|private
specifier|final
specifier|static
name|String
name|OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
comment|/** Shell commands to get users and groups */
DECL|field|GET_ALL_USERS_CMD
specifier|static
specifier|final
name|String
name|GET_ALL_USERS_CMD
init|=
literal|"getent passwd | cut -d: -f1,3"
decl_stmt|;
DECL|field|GET_ALL_GROUPS_CMD
specifier|static
specifier|final
name|String
name|GET_ALL_GROUPS_CMD
init|=
literal|"getent group | cut -d: -f1,3"
decl_stmt|;
DECL|field|MAC_GET_ALL_USERS_CMD
specifier|static
specifier|final
name|String
name|MAC_GET_ALL_USERS_CMD
init|=
literal|"dscl . -list /Users UniqueID"
decl_stmt|;
DECL|field|MAC_GET_ALL_GROUPS_CMD
specifier|static
specifier|final
name|String
name|MAC_GET_ALL_GROUPS_CMD
init|=
literal|"dscl . -list /Groups PrimaryGroupID"
decl_stmt|;
DECL|field|staticMappingFile
specifier|private
specifier|final
name|File
name|staticMappingFile
decl_stmt|;
DECL|field|staticMapping
specifier|private
name|StaticMapping
name|staticMapping
init|=
literal|null
decl_stmt|;
DECL|field|constructFullMapAtInit
specifier|private
name|boolean
name|constructFullMapAtInit
init|=
literal|false
decl_stmt|;
comment|// Used for parsing the static mapping file.
DECL|field|EMPTY_LINE
specifier|private
specifier|static
specifier|final
name|Pattern
name|EMPTY_LINE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*$"
argument_list|)
decl_stmt|;
DECL|field|COMMENT_LINE
specifier|private
specifier|static
specifier|final
name|Pattern
name|COMMENT_LINE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*#.*$"
argument_list|)
decl_stmt|;
DECL|field|MAPPING_LINE
specifier|private
specifier|static
specifier|final
name|Pattern
name|MAPPING_LINE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(uid|gid)\\s+(\\d+)\\s+(\\d+)\\s*(#.*)?$"
argument_list|)
decl_stmt|;
DECL|field|timeout
specifier|final
specifier|private
name|long
name|timeout
decl_stmt|;
comment|// Maps for id to name map. Guarded by this object monitor lock
DECL|field|uidNameMap
specifier|private
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|uidNameMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|gidNameMap
specifier|private
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|gidNameMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|lastUpdateTime
specifier|private
name|long
name|lastUpdateTime
init|=
literal|0
decl_stmt|;
comment|// Last time maps were updated
comment|/*    * Constructor    * @param conf the configuration    * @param constructFullMapAtInit initialize the maps with full mapping when    *        true, otherwise initialize the maps to empty. This parameter is    *        intended for testing only, its default is false.    */
annotation|@
name|VisibleForTesting
DECL|method|ShellBasedIdMapping (Configuration conf, boolean constructFullMapAtInit)
specifier|public
name|ShellBasedIdMapping
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|constructFullMapAtInit
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|constructFullMapAtInit
operator|=
name|constructFullMapAtInit
expr_stmt|;
name|long
name|updateTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|IdMappingConstant
operator|.
name|USERGROUPID_UPDATE_MILLIS_KEY
argument_list|,
name|IdMappingConstant
operator|.
name|USERGROUPID_UPDATE_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
comment|// Minimal interval is 1 minute
if|if
condition|(
name|updateTime
operator|<
name|IdMappingConstant
operator|.
name|USERGROUPID_UPDATE_MILLIS_MIN
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"User configured user account update time is less"
operator|+
literal|" than 1 minute. Use 1 minute instead."
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|IdMappingConstant
operator|.
name|USERGROUPID_UPDATE_MILLIS_MIN
expr_stmt|;
block|}
else|else
block|{
name|timeout
operator|=
name|updateTime
expr_stmt|;
block|}
name|String
name|staticFilePath
init|=
name|conf
operator|.
name|get
argument_list|(
name|IdMappingConstant
operator|.
name|STATIC_ID_MAPPING_FILE_KEY
argument_list|,
name|IdMappingConstant
operator|.
name|STATIC_ID_MAPPING_FILE_DEFAULT
argument_list|)
decl_stmt|;
name|staticMappingFile
operator|=
operator|new
name|File
argument_list|(
name|staticFilePath
argument_list|)
expr_stmt|;
name|updateMaps
argument_list|()
expr_stmt|;
block|}
comment|/*    * Constructor    * initialize user and group maps to empty    * @param conf the configuration    */
DECL|method|ShellBasedIdMapping (Configuration conf)
specifier|public
name|ShellBasedIdMapping
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getUidNameMap ()
specifier|public
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getUidNameMap
parameter_list|()
block|{
return|return
name|uidNameMap
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getGidNameMap ()
specifier|public
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getGidNameMap
parameter_list|()
block|{
return|return
name|gidNameMap
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|clearNameMaps ()
specifier|synchronized
specifier|public
name|void
name|clearNameMaps
parameter_list|()
block|{
name|uidNameMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gidNameMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastUpdateTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|isExpired ()
specifier|synchronized
specifier|private
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lastUpdateTime
operator|>
name|timeout
return|;
block|}
comment|// If can't update the maps, will keep using the old ones
DECL|method|checkAndUpdateMaps ()
specifier|private
name|void
name|checkAndUpdateMaps
parameter_list|()
block|{
if|if
condition|(
name|isExpired
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Update cache now"
argument_list|)
expr_stmt|;
try|try
block|{
name|updateMaps
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update the maps. Will use the old ones,"
operator|+
literal|" which can potentially cause problem."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|DUPLICATE_NAME_ID_DEBUG_INFO
specifier|private
specifier|static
specifier|final
name|String
name|DUPLICATE_NAME_ID_DEBUG_INFO
init|=
literal|"NFS gateway could have problem starting with duplicate name or id on the host system.\n"
operator|+
literal|"This is because HDFS (non-kerberos cluster) uses name as the only way to identify a user or group.\n"
operator|+
literal|"The host system with duplicated user/group name or id might work fine most of the time by itself.\n"
operator|+
literal|"However when NFS gateway talks to HDFS, HDFS accepts only user and group name.\n"
operator|+
literal|"Therefore, same name means the same user or same group. To find the duplicated names/ids, one can do:\n"
operator|+
literal|"<getent passwd | cut -d: -f1,3> and<getent group | cut -d: -f1,3> on Linux systems,\n"
operator|+
literal|"<dscl . -list /Users UniqueID> and<dscl . -list /Groups PrimaryGroupID> on MacOS."
decl_stmt|;
DECL|method|reportDuplicateEntry (final String header, final Integer key, final String value, final Integer ekey, final String evalue)
specifier|private
specifier|static
name|void
name|reportDuplicateEntry
parameter_list|(
specifier|final
name|String
name|header
parameter_list|,
specifier|final
name|Integer
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|Integer
name|ekey
parameter_list|,
specifier|final
name|String
name|evalue
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"\n"
operator|+
name|header
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"new entry (%d, %s), existing entry: (%d, %s).%n%s%n%s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|ekey
argument_list|,
name|evalue
argument_list|,
literal|"The new entry is to be ignored for the following reason."
argument_list|,
name|DUPLICATE_NAME_ID_DEBUG_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * uid and gid are defined as uint32 in linux. Some systems create    * (intended or unintended)<nfsnobody, 4294967294> kind of<name,Id>    * mapping, where 4294967294 is 2**32-2 as unsigned int32. As an example,    *   https://bugzilla.redhat.com/show_bug.cgi?id=511876.    * Because user or group id are treated as Integer (signed integer or int32)    * here, the number 4294967294 is out of range. The solution is to convert    * uint32 to int32, so to map the out-of-range ID to the negative side of    * Integer, e.g. 4294967294 maps to -2 and 4294967295 maps to -1.    */
DECL|method|parseId (final String idStr)
specifier|private
specifier|static
name|Integer
name|parseId
parameter_list|(
specifier|final
name|String
name|idStr
parameter_list|)
block|{
name|Long
name|longVal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|idStr
argument_list|)
decl_stmt|;
name|int
name|intVal
init|=
name|longVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|intVal
argument_list|)
return|;
block|}
comment|/**    * Get the list of users or groups returned by the specified command,    * and save them in the corresponding map.    * @throws IOException     */
annotation|@
name|VisibleForTesting
DECL|method|updateMapInternal (BiMap<Integer, String> map, String mapName, String command, String regex, Map<Integer, Integer> staticMapping)
specifier|public
specifier|static
name|boolean
name|updateMapInternal
parameter_list|(
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|mapName
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|regex
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|staticMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|command
block|}
argument_list|)
decl_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nameId
init|=
name|line
operator|.
name|split
argument_list|(
name|regex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nameId
operator|==
literal|null
operator|)
operator|||
operator|(
name|nameId
operator|.
name|length
operator|!=
literal|2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't parse "
operator|+
name|mapName
operator|+
literal|" list entry:"
operator|+
name|line
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"add to "
operator|+
name|mapName
operator|+
literal|"map:"
operator|+
name|nameId
index|[
literal|0
index|]
operator|+
literal|" id:"
operator|+
name|nameId
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// HDFS can't differentiate duplicate names with simple authentication
specifier|final
name|Integer
name|key
init|=
name|staticMapping
operator|.
name|get
argument_list|(
name|parseId
argument_list|(
name|nameId
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|nameId
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
specifier|final
name|String
name|prevValue
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|prevValue
argument_list|)
condition|)
block|{
comment|// silently ignore equivalent entries
continue|continue;
block|}
name|reportDuplicateEntry
argument_list|(
literal|"Got multiple names associated with the same id: "
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|key
argument_list|,
name|prevValue
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|map
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
condition|)
block|{
specifier|final
name|Integer
name|prevKey
init|=
name|map
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|reportDuplicateEntry
argument_list|(
literal|"Got multiple ids associated with the same name: "
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|prevKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated "
operator|+
name|mapName
operator|+
literal|" map size: "
operator|+
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update "
operator|+
name|mapName
operator|+
literal|" map"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't close BufferedReader of command result"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|updated
return|;
block|}
DECL|method|checkSupportedPlatform ()
specifier|private
name|boolean
name|checkSupportedPlatform
parameter_list|()
block|{
if|if
condition|(
operator|!
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
operator|&&
operator|!
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Platform is not supported:"
operator|+
name|OS
operator|+
literal|". Can't update user map and group map and"
operator|+
literal|" 'nobody' will be used for any user and group."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isInteger (final String s)
specifier|private
specifier|static
name|boolean
name|isInteger
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// only got here if we didn't return false
return|return
literal|true
return|;
block|}
DECL|method|initStaticMapping ()
specifier|private
specifier|synchronized
name|void
name|initStaticMapping
parameter_list|()
throws|throws
name|IOException
block|{
name|staticMapping
operator|=
operator|new
name|StaticMapping
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticMappingFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using '"
operator|+
name|staticMappingFile
operator|+
literal|"' for static UID/GID mapping..."
argument_list|)
expr_stmt|;
name|staticMapping
operator|=
name|parseStaticMap
argument_list|(
name|staticMappingFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not doing static UID/GID mapping because '"
operator|+
name|staticMappingFile
operator|+
literal|"' does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Reset the maps to empty.    * For testing code, a full map may be re-constructed here when the object    * was created with constructFullMapAtInit being set to true.    */
DECL|method|updateMaps ()
specifier|synchronized
specifier|public
name|void
name|updateMaps
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkSupportedPlatform
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|constructFullMapAtInit
condition|)
block|{
name|loadFullMaps
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clearNameMaps
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadFullUserMap ()
specifier|synchronized
specifier|private
name|void
name|loadFullUserMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|staticMapping
operator|==
literal|null
condition|)
block|{
name|initStaticMapping
argument_list|()
expr_stmt|;
block|}
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|uMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
name|updateMapInternal
argument_list|(
name|uMap
argument_list|,
literal|"user"
argument_list|,
name|MAC_GET_ALL_USERS_CMD
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateMapInternal
argument_list|(
name|uMap
argument_list|,
literal|"user"
argument_list|,
name|GET_ALL_USERS_CMD
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
name|uidNameMap
operator|=
name|uMap
expr_stmt|;
name|lastUpdateTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|loadFullGroupMap ()
specifier|synchronized
specifier|private
name|void
name|loadFullGroupMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|staticMapping
operator|==
literal|null
condition|)
block|{
name|initStaticMapping
argument_list|()
expr_stmt|;
block|}
name|BiMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|gMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
name|updateMapInternal
argument_list|(
name|gMap
argument_list|,
literal|"group"
argument_list|,
name|MAC_GET_ALL_GROUPS_CMD
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateMapInternal
argument_list|(
name|gMap
argument_list|,
literal|"group"
argument_list|,
name|GET_ALL_GROUPS_CMD
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
name|gidNameMap
operator|=
name|gMap
expr_stmt|;
name|lastUpdateTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|loadFullMaps ()
specifier|synchronized
specifier|private
name|void
name|loadFullMaps
parameter_list|()
throws|throws
name|IOException
block|{
name|initStaticMapping
argument_list|()
expr_stmt|;
name|loadFullUserMap
argument_list|()
expr_stmt|;
name|loadFullGroupMap
argument_list|()
expr_stmt|;
block|}
comment|// search for id with given name, return "<name>:<id>"
comment|// return
comment|//     getent group<name> | cut -d: -f1,3
comment|// OR
comment|//     id -u<name> | awk '{print "<name>:"$1 }'
comment|//
DECL|method|getName2IdCmdLinux (final String name, final boolean isGrp)
specifier|private
name|String
name|getName2IdCmdLinux
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
block|{
name|String
name|cmd
decl_stmt|;
if|if
condition|(
name|isGrp
condition|)
block|{
name|cmd
operator|=
literal|"getent group "
operator|+
name|name
operator|+
literal|" | cut -d: -f1,3"
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
literal|"id -u "
operator|+
name|name
operator|+
literal|" | awk '{print \""
operator|+
name|name
operator|+
literal|":\"$1 }'"
expr_stmt|;
block|}
return|return
name|cmd
return|;
block|}
comment|// search for name with given id, return "<name>:<id>"
DECL|method|getId2NameCmdLinux (final int id, final boolean isGrp)
specifier|private
name|String
name|getId2NameCmdLinux
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
block|{
name|String
name|cmd
init|=
literal|"getent "
decl_stmt|;
name|cmd
operator|+=
name|isGrp
condition|?
literal|"group "
else|:
literal|"passwd "
expr_stmt|;
name|cmd
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
operator|+
literal|" | cut -d: -f1,3"
expr_stmt|;
return|return
name|cmd
return|;
block|}
comment|// "dscl . -read /Users/<name> | grep UniqueID" returns "UniqueId:<id>",
comment|// "dscl . -read /Groups/<name> | grep PrimaryGroupID" returns "PrimaryGoupID:<id>"
comment|// The following method returns a command that uses awk to process the result,
comment|// of these commands, and returns "<name><id>", to simulate one entry returned by
comment|// MAC_GET_ALL_USERS_CMD or MAC_GET_ALL_GROUPS_CMD.
comment|// Specificially, this method returns:
comment|// id -u<name> | awk '{print "<name>:"$1 }'
comment|// OR
comment|// dscl . -read /Groups/<name> | grep PrimaryGroupID | awk '($1 == "PrimaryGroupID:") { print "<name> " $2 }'
comment|//
DECL|method|getName2IdCmdMac (final String name, final boolean isGrp)
specifier|private
name|String
name|getName2IdCmdMac
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
block|{
name|String
name|cmd
decl_stmt|;
if|if
condition|(
name|isGrp
condition|)
block|{
name|cmd
operator|=
literal|"dscl . -read /Groups/"
operator|+
name|name
expr_stmt|;
name|cmd
operator|+=
literal|" | grep PrimaryGroupID | awk '($1 == \"PrimaryGroupID:\") "
expr_stmt|;
name|cmd
operator|+=
literal|"{ print \""
operator|+
name|name
operator|+
literal|"  \" $2 }'"
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
literal|"id -u "
operator|+
name|name
operator|+
literal|" | awk '{print \""
operator|+
name|name
operator|+
literal|"  \"$1 }'"
expr_stmt|;
block|}
return|return
name|cmd
return|;
block|}
comment|// "dscl . -search /Users UniqueID<id>" returns
comment|//<name> UniqueID = (
comment|//<id>
comment|//    )
comment|// "dscl . -search /Groups PrimaryGroupID<id>" returns
comment|//<name> PrimaryGroupID = (
comment|//<id>
comment|//    )
comment|// The following method returns a command that uses sed to process the
comment|// the result and returns "<name><id>" to simulate one entry returned
comment|// by MAC_GET_ALL_USERS_CMD or MAC_GET_ALL_GROUPS_CMD.
comment|// For certain negative id case like nfsnobody, the<id> is quoted as
comment|// "<id>", added one sed section to remove the quote.
comment|// Specifically, the method returns:
comment|// dscl . -search /Users UniqueID<id> | sed 'N;s/\\n//g;N;s/\\n//g' | sed 's/UniqueID =//g' | sed 's/)//g' | sed 's/\"//g'
comment|// OR
comment|// dscl . -search /Groups PrimaryGroupID<id> | sed 'N;s/\\n//g;N;s/\\n//g' | sed 's/PrimaryGroupID =//g' | sed 's/)//g' | sed 's/\"//g'
comment|//
DECL|method|getId2NameCmdMac (final int id, final boolean isGrp)
specifier|private
name|String
name|getId2NameCmdMac
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
block|{
name|String
name|cmd
init|=
literal|"dscl . -search /"
decl_stmt|;
name|cmd
operator|+=
name|isGrp
condition|?
literal|"Groups PrimaryGroupID "
else|:
literal|"Users UniqueID "
expr_stmt|;
name|cmd
operator|+=
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cmd
operator|+=
literal|" | sed 'N;s/\\n//g;N;s/\\n//g' | sed 's/"
expr_stmt|;
name|cmd
operator|+=
name|isGrp
condition|?
literal|"PrimaryGroupID"
else|:
literal|"UniqueID"
expr_stmt|;
name|cmd
operator|+=
literal|" = (//g' | sed 's/)//g' | sed 's/\\\"//g'"
expr_stmt|;
return|return
name|cmd
return|;
block|}
DECL|method|updateMapIncr (final String name, final boolean isGrp)
specifier|synchronized
specifier|private
name|void
name|updateMapIncr
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkSupportedPlatform
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isInteger
argument_list|(
name|name
argument_list|)
operator|&&
name|isGrp
condition|)
block|{
name|loadFullGroupMap
argument_list|()
expr_stmt|;
return|return;
block|}
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|staticMapping
operator|==
literal|null
condition|)
block|{
name|initStaticMapping
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isGrp
condition|)
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|gidNameMap
argument_list|,
literal|"group"
argument_list|,
name|getName2IdCmdLinux
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|uidNameMap
argument_list|,
literal|"user"
argument_list|,
name|getName2IdCmdLinux
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Mac
if|if
condition|(
name|isGrp
condition|)
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|gidNameMap
argument_list|,
literal|"group"
argument_list|,
name|getName2IdCmdMac
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|uidNameMap
argument_list|,
literal|"user"
argument_list|,
name|getName2IdCmdMac
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updated
condition|)
block|{
name|lastUpdateTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateMapIncr (final int id, final boolean isGrp)
specifier|synchronized
specifier|private
name|void
name|updateMapIncr
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|boolean
name|isGrp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkSupportedPlatform
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|staticMapping
operator|==
literal|null
condition|)
block|{
name|initStaticMapping
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|OS
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isGrp
condition|)
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|gidNameMap
argument_list|,
literal|"group"
argument_list|,
name|getId2NameCmdLinux
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|uidNameMap
argument_list|,
literal|"user"
argument_list|,
name|getId2NameCmdLinux
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|":"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Mac
if|if
condition|(
name|isGrp
condition|)
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|gidNameMap
argument_list|,
literal|"group"
argument_list|,
name|getId2NameCmdMac
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|gidMapping
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updated
operator|=
name|updateMapInternal
argument_list|(
name|uidNameMap
argument_list|,
literal|"user"
argument_list|,
name|getId2NameCmdMac
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"\\s+"
argument_list|,
name|staticMapping
operator|.
name|uidMapping
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updated
condition|)
block|{
name|lastUpdateTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|PassThroughMap
specifier|static
specifier|final
class|class
name|PassThroughMap
parameter_list|<
name|K
parameter_list|>
extends|extends
name|HashMap
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
block|{
DECL|method|PassThroughMap ()
specifier|public
name|PassThroughMap
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|PassThroughMap (Map<K, K> mapping)
specifier|public
name|PassThroughMap
parameter_list|(
name|Map
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
name|mapping
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
name|entry
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|super
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|get (Object key)
specifier|public
name|K
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|K
operator|)
name|key
return|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|StaticMapping
specifier|static
specifier|final
class|class
name|StaticMapping
block|{
DECL|field|uidMapping
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|uidMapping
decl_stmt|;
DECL|field|gidMapping
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gidMapping
decl_stmt|;
DECL|method|StaticMapping (Map<Integer, Integer> uidMapping, Map<Integer, Integer> gidMapping)
specifier|public
name|StaticMapping
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|uidMapping
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gidMapping
parameter_list|)
block|{
name|this
operator|.
name|uidMapping
operator|=
operator|new
name|PassThroughMap
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|uidMapping
argument_list|)
expr_stmt|;
name|this
operator|.
name|gidMapping
operator|=
operator|new
name|PassThroughMap
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|gidMapping
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseStaticMap (File staticMapFile)
specifier|static
name|StaticMapping
name|parseStaticMap
parameter_list|(
name|File
name|staticMapFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|uidMapping
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|gidMapping
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|staticMapFile
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// Skip entirely empty and comment lines.
if|if
condition|(
name|EMPTY_LINE
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
name|COMMENT_LINE
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Matcher
name|lineMatcher
init|=
name|MAPPING_LINE
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lineMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not parse line '"
operator|+
name|line
operator|+
literal|"'. Lines should be of "
operator|+
literal|"the form '[uid|gid] [remote id] [local id]'. Blank lines and "
operator|+
literal|"everything following a '#' on a line will be ignored."
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// We know the line is fine to parse without error checking like this
comment|// since it matched the regex above.
name|String
name|firstComponent
init|=
name|lineMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|remoteId
init|=
name|parseId
argument_list|(
name|lineMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|localId
init|=
name|parseId
argument_list|(
name|lineMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstComponent
operator|.
name|equals
argument_list|(
literal|"uid"
argument_list|)
condition|)
block|{
name|uidMapping
operator|.
name|put
argument_list|(
name|localId
argument_list|,
name|remoteId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gidMapping
operator|.
name|put
argument_list|(
name|localId
argument_list|,
name|remoteId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|StaticMapping
argument_list|(
name|uidMapping
argument_list|,
name|gidMapping
argument_list|)
return|;
block|}
DECL|method|getUid (String user)
specifier|synchronized
specifier|public
name|int
name|getUid
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|Integer
name|id
init|=
name|uidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|updateMapIncr
argument_list|(
name|user
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|id
operator|=
name|uidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"User just deleted?:"
operator|+
name|user
argument_list|)
throw|;
block|}
block|}
return|return
name|id
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getGid (String group)
specifier|synchronized
specifier|public
name|int
name|getGid
parameter_list|(
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|Integer
name|id
init|=
name|gidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|updateMapIncr
argument_list|(
name|group
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|gidNameMap
operator|.
name|inverse
argument_list|()
operator|.
name|get
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such group:"
operator|+
name|group
argument_list|)
throw|;
block|}
block|}
return|return
name|id
operator|.
name|intValue
argument_list|()
return|;
block|}
DECL|method|getUserName (int uid, String unknown)
specifier|synchronized
specifier|public
name|String
name|getUserName
parameter_list|(
name|int
name|uid
parameter_list|,
name|String
name|unknown
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|String
name|uname
init|=
name|uidNameMap
operator|.
name|get
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|uname
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|updateMapIncr
argument_list|(
name|uid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{               }
name|uname
operator|=
name|uidNameMap
operator|.
name|get
argument_list|(
name|uid
argument_list|)
expr_stmt|;
if|if
condition|(
name|uname
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find user name for uid "
operator|+
name|uid
operator|+
literal|". Use default user name "
operator|+
name|unknown
argument_list|)
expr_stmt|;
name|uname
operator|=
name|unknown
expr_stmt|;
block|}
block|}
return|return
name|uname
return|;
block|}
DECL|method|getGroupName (int gid, String unknown)
specifier|synchronized
specifier|public
name|String
name|getGroupName
parameter_list|(
name|int
name|gid
parameter_list|,
name|String
name|unknown
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|String
name|gname
init|=
name|gidNameMap
operator|.
name|get
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|gname
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|updateMapIncr
argument_list|(
name|gid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{               }
name|gname
operator|=
name|gidNameMap
operator|.
name|get
argument_list|(
name|gid
argument_list|)
expr_stmt|;
if|if
condition|(
name|gname
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find group name for gid "
operator|+
name|gid
operator|+
literal|". Use default group name "
operator|+
name|unknown
argument_list|)
expr_stmt|;
name|gname
operator|=
name|unknown
expr_stmt|;
block|}
block|}
return|return
name|gname
return|;
block|}
comment|// When can't map user, return user name's string hashcode
DECL|method|getUidAllowingUnknown (String user)
specifier|public
name|int
name|getUidAllowingUnknown
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|int
name|uid
decl_stmt|;
try|try
block|{
name|uid
operator|=
name|getUid
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|uid
operator|=
name|user
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't map user "
operator|+
name|user
operator|+
literal|". Use its string hashcode:"
operator|+
name|uid
argument_list|)
expr_stmt|;
block|}
return|return
name|uid
return|;
block|}
comment|// When can't map group, return group name's string hashcode
DECL|method|getGidAllowingUnknown (String group)
specifier|public
name|int
name|getGidAllowingUnknown
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|checkAndUpdateMaps
argument_list|()
expr_stmt|;
name|int
name|gid
decl_stmt|;
try|try
block|{
name|gid
operator|=
name|getGid
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gid
operator|=
name|group
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't map group "
operator|+
name|group
operator|+
literal|". Use its string hashcode:"
operator|+
name|gid
argument_list|)
expr_stmt|;
block|}
return|return
name|gid
return|;
block|}
block|}
end_class

end_unit

