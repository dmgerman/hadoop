begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Defines the types of supported storage media. The default storage  * medium is assumed to be DISK.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|enum|StorageType
specifier|public
enum|enum
name|StorageType
block|{
DECL|enumConstant|DISK
name|DISK
argument_list|(
literal|false
argument_list|)
block|,
DECL|enumConstant|SSD
name|SSD
argument_list|(
literal|false
argument_list|)
block|,
DECL|enumConstant|ARCHIVE
name|ARCHIVE
argument_list|(
literal|false
argument_list|)
block|,
DECL|enumConstant|RAM_DISK
name|RAM_DISK
argument_list|(
literal|true
argument_list|)
block|;
DECL|field|isTransient
specifier|private
specifier|final
name|boolean
name|isTransient
decl_stmt|;
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|StorageType
name|DEFAULT
init|=
name|DISK
decl_stmt|;
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|StorageType
index|[]
name|EMPTY_ARRAY
init|=
block|{}
decl_stmt|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|StorageType
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|StorageType (boolean isTransient)
name|StorageType
parameter_list|(
name|boolean
name|isTransient
parameter_list|)
block|{
name|this
operator|.
name|isTransient
operator|=
name|isTransient
expr_stmt|;
block|}
DECL|method|isTransient ()
specifier|public
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
name|isTransient
return|;
block|}
DECL|method|supportTypeQuota ()
specifier|public
name|boolean
name|supportTypeQuota
parameter_list|()
block|{
return|return
operator|!
name|isTransient
return|;
block|}
DECL|method|isMovable ()
specifier|public
name|boolean
name|isMovable
parameter_list|()
block|{
return|return
operator|!
name|isTransient
return|;
block|}
DECL|method|asList ()
specifier|public
specifier|static
name|List
argument_list|<
name|StorageType
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|VALUES
argument_list|)
return|;
block|}
DECL|method|getMovableTypes ()
specifier|public
specifier|static
name|List
argument_list|<
name|StorageType
argument_list|>
name|getMovableTypes
parameter_list|()
block|{
return|return
name|getNonTransientTypes
argument_list|()
return|;
block|}
DECL|method|getTypesSupportingQuota ()
specifier|public
specifier|static
name|List
argument_list|<
name|StorageType
argument_list|>
name|getTypesSupportingQuota
parameter_list|()
block|{
return|return
name|getNonTransientTypes
argument_list|()
return|;
block|}
DECL|method|parseStorageType (int i)
specifier|public
specifier|static
name|StorageType
name|parseStorageType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|VALUES
index|[
name|i
index|]
return|;
block|}
DECL|method|parseStorageType (String s)
specifier|public
specifier|static
name|StorageType
name|parseStorageType
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|StorageType
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNonTransientTypes ()
specifier|private
specifier|static
name|List
argument_list|<
name|StorageType
argument_list|>
name|getNonTransientTypes
parameter_list|()
block|{
name|List
argument_list|<
name|StorageType
argument_list|>
name|nonTransientTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|VALUES
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isTransient
operator|==
literal|false
condition|)
block|{
name|nonTransientTypes
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nonTransientTypes
return|;
block|}
block|}
end_enum

end_unit

