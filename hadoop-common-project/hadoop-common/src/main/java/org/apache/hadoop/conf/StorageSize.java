begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isNotBlank
import|;
end_import

begin_comment
comment|/**  * A class that contains the numeric value and the unit of measure.  */
end_comment

begin_class
DECL|class|StorageSize
specifier|public
class|class
name|StorageSize
block|{
DECL|field|unit
specifier|private
specifier|final
name|StorageUnit
name|unit
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|double
name|value
decl_stmt|;
comment|/**    * Constucts a Storage Measure, which contains the value and the unit of    * measure.    *    * @param unit - Unit of Measure    * @param value - Numeric value.    */
DECL|method|StorageSize (StorageUnit unit, double value)
specifier|public
name|StorageSize
parameter_list|(
name|StorageUnit
name|unit
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|checkState (boolean state, String errorString)
specifier|private
specifier|static
name|void
name|checkState
parameter_list|(
name|boolean
name|state
parameter_list|,
name|String
name|errorString
parameter_list|)
block|{
if|if
condition|(
operator|!
name|state
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|errorString
argument_list|)
throw|;
block|}
block|}
DECL|method|parse (String value)
specifier|public
specifier|static
name|StorageSize
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|checkState
argument_list|(
name|isNotBlank
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"value cannot be blank"
argument_list|)
expr_stmt|;
name|String
name|sanitizedValue
init|=
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|StorageUnit
name|parsedUnit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StorageUnit
name|unit
range|:
name|StorageUnit
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|unit
operator|.
name|getShortName
argument_list|()
argument_list|)
operator|||
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|unit
operator|.
name|getLongName
argument_list|()
argument_list|)
operator|||
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|unit
operator|.
name|getSuffixChar
argument_list|()
argument_list|)
condition|)
block|{
name|parsedUnit
operator|=
name|unit
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|parsedUnit
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
operator|+
literal|" is not in expected format."
operator|+
literal|"Expected format is<number><unit>. e.g. 1000MB"
argument_list|)
throw|;
block|}
name|String
name|suffix
init|=
literal|""
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// We are trying to get the longest match first, so the order of
comment|// matching is getLongName, getShortName and then getSuffixChar.
if|if
condition|(
operator|!
name|found
operator|&&
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|parsedUnit
operator|.
name|getLongName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|suffix
operator|=
name|parsedUnit
operator|.
name|getLongName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|parsedUnit
operator|.
name|getShortName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|suffix
operator|=
name|parsedUnit
operator|.
name|getShortName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|sanitizedValue
operator|.
name|endsWith
argument_list|(
name|parsedUnit
operator|.
name|getSuffixChar
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|suffix
operator|=
name|parsedUnit
operator|.
name|getSuffixChar
argument_list|()
expr_stmt|;
block|}
name|checkState
argument_list|(
name|found
argument_list|,
literal|"Something is wrong, we have to find a "
operator|+
literal|"match. Internal error."
argument_list|)
expr_stmt|;
name|String
name|valString
init|=
name|sanitizedValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|StorageSize
argument_list|(
name|parsedUnit
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|valString
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getUnit ()
specifier|public
name|StorageUnit
name|getUnit
parameter_list|()
block|{
return|return
name|unit
return|;
block|}
DECL|method|getValue ()
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

