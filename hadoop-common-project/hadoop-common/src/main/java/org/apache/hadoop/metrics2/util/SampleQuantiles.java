begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Implementation of the Cormode, Korn, Muthukrishnan, and Srivastava algorithm  * for streaming calculation of targeted high-percentile epsilon-approximate  * quantiles.  *   * This is a generalization of the earlier work by Greenwald and Khanna (GK),  * which essentially allows different error bounds on the targeted quantiles,  * which allows for far more efficient calculation of high-percentiles.  *   * See: Cormode, Korn, Muthukrishnan, and Srivastava  * "Effective Computation of Biased Quantiles over Data Streams" in ICDE 2005  *   * Greenwald and Khanna,  * "Space-efficient online computation of quantile summaries" in SIGMOD 2001  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SampleQuantiles
specifier|public
class|class
name|SampleQuantiles
block|{
comment|/**    * Total number of items in stream    */
DECL|field|count
specifier|private
name|long
name|count
init|=
literal|0
decl_stmt|;
comment|/**    * Current list of sampled items, maintained in sorted order with error bounds    */
DECL|field|samples
specifier|private
name|LinkedList
argument_list|<
name|SampleItem
argument_list|>
name|samples
decl_stmt|;
comment|/**    * Buffers incoming items to be inserted in batch. Items are inserted into     * the buffer linearly. When the buffer fills, it is flushed into the samples    * array in its entirety.    */
DECL|field|buffer
specifier|private
name|long
index|[]
name|buffer
init|=
operator|new
name|long
index|[
literal|500
index|]
decl_stmt|;
DECL|field|bufferCount
specifier|private
name|int
name|bufferCount
init|=
literal|0
decl_stmt|;
comment|/**    * Array of Quantiles that we care about, along with desired error.    */
DECL|field|quantiles
specifier|private
specifier|final
name|Quantile
name|quantiles
index|[]
decl_stmt|;
DECL|method|SampleQuantiles (Quantile[] quantiles)
specifier|public
name|SampleQuantiles
parameter_list|(
name|Quantile
index|[]
name|quantiles
parameter_list|)
block|{
name|this
operator|.
name|quantiles
operator|=
name|quantiles
expr_stmt|;
name|this
operator|.
name|samples
operator|=
operator|new
name|LinkedList
argument_list|<
name|SampleItem
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Specifies the allowable error for this rank, depending on which quantiles    * are being targeted.    *     * This is the f(r_i, n) function from the CKMS paper. It's basically how wide    * the range of this rank can be.    *     * @param rank    *          the index in the list of samples    */
DECL|method|allowableError (int rank)
specifier|private
name|double
name|allowableError
parameter_list|(
name|int
name|rank
parameter_list|)
block|{
name|int
name|size
init|=
name|samples
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|minError
init|=
name|size
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|Quantile
name|q
range|:
name|quantiles
control|)
block|{
name|double
name|error
decl_stmt|;
if|if
condition|(
name|rank
operator|<=
name|q
operator|.
name|quantile
operator|*
name|size
condition|)
block|{
name|error
operator|=
operator|(
literal|2.0
operator|*
name|q
operator|.
name|error
operator|*
operator|(
name|size
operator|-
name|rank
operator|)
operator|)
operator|/
operator|(
literal|1.0
operator|-
name|q
operator|.
name|quantile
operator|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|=
operator|(
literal|2.0
operator|*
name|q
operator|.
name|error
operator|*
name|rank
operator|)
operator|/
name|q
operator|.
name|quantile
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|<
name|minError
condition|)
block|{
name|minError
operator|=
name|error
expr_stmt|;
block|}
block|}
return|return
name|minError
return|;
block|}
comment|/**    * Add a new value from the stream.    *     * @param v    */
DECL|method|insert (long v)
specifier|synchronized
specifier|public
name|void
name|insert
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|buffer
index|[
name|bufferCount
index|]
operator|=
name|v
expr_stmt|;
name|bufferCount
operator|++
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|bufferCount
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|insertBatch
argument_list|()
expr_stmt|;
name|compress
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Merges items from buffer into the samples array in one pass.    * This is more efficient than doing an insert on every item.    */
DECL|method|insertBatch ()
specifier|private
name|void
name|insertBatch
parameter_list|()
block|{
if|if
condition|(
name|bufferCount
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferCount
argument_list|)
expr_stmt|;
comment|// Base case: no samples
name|int
name|start
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|samples
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SampleItem
name|newItem
init|=
operator|new
name|SampleItem
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|samples
operator|.
name|add
argument_list|(
name|newItem
argument_list|)
expr_stmt|;
name|start
operator|++
expr_stmt|;
block|}
name|ListIterator
argument_list|<
name|SampleItem
argument_list|>
name|it
init|=
name|samples
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|SampleItem
name|item
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|bufferCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|v
init|=
name|buffer
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|nextIndex
argument_list|()
operator|<
name|samples
operator|.
name|size
argument_list|()
operator|&&
name|item
operator|.
name|value
operator|<
name|v
condition|)
block|{
name|item
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// If we found that bigger item, back up so we insert ourselves before it
if|if
condition|(
name|item
operator|.
name|value
operator|>
name|v
condition|)
block|{
name|it
operator|.
name|previous
argument_list|()
expr_stmt|;
block|}
comment|// We use different indexes for the edge comparisons, because of the above
comment|// if statement that adjusts the iterator
name|int
name|delta
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|previousIndex
argument_list|()
operator|==
literal|0
operator|||
name|it
operator|.
name|nextIndex
argument_list|()
operator|==
name|samples
operator|.
name|size
argument_list|()
condition|)
block|{
name|delta
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|delta
operator|=
operator|(
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|allowableError
argument_list|(
name|it
operator|.
name|nextIndex
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|-
literal|1
expr_stmt|;
block|}
name|SampleItem
name|newItem
init|=
operator|new
name|SampleItem
argument_list|(
name|v
argument_list|,
literal|1
argument_list|,
name|delta
argument_list|)
decl_stmt|;
name|it
operator|.
name|add
argument_list|(
name|newItem
argument_list|)
expr_stmt|;
name|item
operator|=
name|newItem
expr_stmt|;
block|}
name|bufferCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Try to remove extraneous items from the set of sampled items. This checks    * if an item is unnecessary based on the desired error bounds, and merges it    * with the adjacent item if it is.    */
DECL|method|compress ()
specifier|private
name|void
name|compress
parameter_list|()
block|{
if|if
condition|(
name|samples
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|ListIterator
argument_list|<
name|SampleItem
argument_list|>
name|it
init|=
name|samples
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|SampleItem
name|prev
init|=
literal|null
decl_stmt|;
name|SampleItem
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|prev
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|prev
operator|.
name|g
operator|+
name|next
operator|.
name|g
operator|+
name|next
operator|.
name|delta
operator|<=
name|allowableError
argument_list|(
name|it
operator|.
name|previousIndex
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|.
name|g
operator|+=
name|prev
operator|.
name|g
expr_stmt|;
comment|// Remove prev. it.remove() kills the last thing returned.
name|it
operator|.
name|previous
argument_list|()
expr_stmt|;
name|it
operator|.
name|previous
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// it.next() is now equal to next, skip it back forward again
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the estimated value at the specified quantile.    *     * @param quantile Queried quantile, e.g. 0.50 or 0.99.    * @return Estimated value at that quantile.    */
DECL|method|query (double quantile)
specifier|private
name|long
name|query
parameter_list|(
name|double
name|quantile
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|samples
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"no data in estimator"
argument_list|)
expr_stmt|;
name|int
name|rankMin
init|=
literal|0
decl_stmt|;
name|int
name|desired
init|=
call|(
name|int
call|)
argument_list|(
name|quantile
operator|*
name|count
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|SampleItem
argument_list|>
name|it
init|=
name|samples
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|SampleItem
name|prev
init|=
literal|null
decl_stmt|;
name|SampleItem
name|cur
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|samples
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|prev
operator|=
name|cur
expr_stmt|;
name|cur
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|rankMin
operator|+=
name|prev
operator|.
name|g
expr_stmt|;
if|if
condition|(
name|rankMin
operator|+
name|cur
operator|.
name|g
operator|+
name|cur
operator|.
name|delta
operator|>
name|desired
operator|+
operator|(
name|allowableError
argument_list|(
name|i
argument_list|)
operator|/
literal|2
operator|)
condition|)
block|{
return|return
name|prev
operator|.
name|value
return|;
block|}
block|}
comment|// edge case of wanting max value
return|return
name|samples
operator|.
name|get
argument_list|(
name|samples
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|value
return|;
block|}
comment|/**    * Get a snapshot of the current values of all the tracked quantiles.    *     * @return snapshot of the tracked quantiles. If no items are added    * to the estimator, returns null.    */
DECL|method|snapshot ()
specifier|synchronized
specifier|public
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|snapshot
parameter_list|()
block|{
comment|// flush the buffer first for best results
name|insertBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|samples
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|values
init|=
operator|new
name|TreeMap
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quantiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|put
argument_list|(
name|quantiles
index|[
name|i
index|]
argument_list|,
name|query
argument_list|(
name|quantiles
index|[
name|i
index|]
operator|.
name|quantile
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**    * Returns the number of items that the estimator has processed    *     * @return count total number of items processed    */
DECL|method|getCount ()
specifier|synchronized
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**    * Returns the number of samples kept by the estimator    *     * @return count current number of samples    */
annotation|@
name|VisibleForTesting
DECL|method|getSampleCount ()
specifier|synchronized
specifier|public
name|int
name|getSampleCount
parameter_list|()
block|{
return|return
name|samples
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Resets the estimator, clearing out all previously inserted items    */
DECL|method|clear ()
specifier|synchronized
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|bufferCount
operator|=
literal|0
expr_stmt|;
name|samples
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|synchronized
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|data
init|=
name|snapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|"[no samples]"
return|;
block|}
else|else
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|": "
argument_list|)
operator|.
name|join
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
comment|/**    * Describes a measured value passed to the estimator, tracking additional    * metadata required by the CKMS algorithm.    */
DECL|class|SampleItem
specifier|private
specifier|static
class|class
name|SampleItem
block|{
comment|/**      * Value of the sampled item (e.g. a measured latency value)      */
DECL|field|value
specifier|public
specifier|final
name|long
name|value
decl_stmt|;
comment|/**      * Difference between the lowest possible rank of the previous item, and       * the lowest possible rank of this item.      *       * The sum of the g of all previous items yields this item's lower bound.       */
DECL|field|g
specifier|public
name|int
name|g
decl_stmt|;
comment|/**      * Difference between the item's greatest possible rank and lowest possible      * rank.      */
DECL|field|delta
specifier|public
specifier|final
name|int
name|delta
decl_stmt|;
DECL|method|SampleItem (long value, int lowerDelta, int delta)
specifier|public
name|SampleItem
parameter_list|(
name|long
name|value
parameter_list|,
name|int
name|lowerDelta
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|g
operator|=
name|lowerDelta
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d, %d, %d"
argument_list|,
name|value
argument_list|,
name|g
argument_list|,
name|delta
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

