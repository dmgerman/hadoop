begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|ConnectionConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HttpExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|checkNotEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|parseJSONEncKeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|parseJSONEncKeyVersions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|parseJSONKeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
operator|.
name|parseJSONMetadata
import|;
end_import

begin_comment
comment|/**  * KMS client<code>KeyProvider</code> implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMSClientProvider
specifier|public
class|class
name|KMSClientProvider
extends|extends
name|KeyProvider
implements|implements
name|CryptoExtension
implements|,
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INVALID_SIGNATURE
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_SIGNATURE
init|=
literal|"Invalid signature"
decl_stmt|;
DECL|field|ANONYMOUS_REQUESTS_DISALLOWED
specifier|private
specifier|static
specifier|final
name|String
name|ANONYMOUS_REQUESTS_DISALLOWED
init|=
literal|"Anonymous requests are disallowed"
decl_stmt|;
DECL|field|TOKEN_KIND_STR
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_KIND_STR
init|=
name|KMSDelegationToken
operator|.
name|TOKEN_KIND_STR
decl_stmt|;
DECL|field|TOKEN_KIND
specifier|public
specifier|static
specifier|final
name|Text
name|TOKEN_KIND
init|=
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
decl_stmt|;
DECL|field|SCHEME_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME_NAME
init|=
literal|"kms"
decl_stmt|;
DECL|field|UTF8
specifier|private
specifier|static
specifier|final
name|String
name|UTF8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"Content-Type"
decl_stmt|;
DECL|field|APPLICATION_JSON_MIME
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_JSON_MIME
init|=
literal|"application/json"
decl_stmt|;
DECL|field|HTTP_GET
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_GET
init|=
literal|"GET"
decl_stmt|;
DECL|field|HTTP_POST
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_POST
init|=
literal|"POST"
decl_stmt|;
DECL|field|HTTP_PUT
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT
init|=
literal|"PUT"
decl_stmt|;
DECL|field|HTTP_DELETE
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_DELETE
init|=
literal|"DELETE"
decl_stmt|;
DECL|field|CONFIG_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PREFIX
init|=
literal|"hadoop.security.kms.client."
decl_stmt|;
comment|/* It's possible to specify a timeout, in seconds, in the config file */
DECL|field|TIMEOUT_ATTR
specifier|public
specifier|static
specifier|final
name|String
name|TIMEOUT_ATTR
init|=
name|CONFIG_PREFIX
operator|+
literal|"timeout"
decl_stmt|;
DECL|field|DEFAULT_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|60
decl_stmt|;
comment|/* Number of times to retry authentication in the event of auth failure    * (normally happens due to stale authToken)     */
DECL|field|AUTH_RETRY
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_RETRY
init|=
name|CONFIG_PREFIX
operator|+
literal|"authentication.retry-count"
decl_stmt|;
DECL|field|DEFAULT_AUTH_RETRY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_AUTH_RETRY
init|=
literal|1
decl_stmt|;
DECL|field|encKeyVersionQueue
specifier|private
specifier|final
name|ValueQueue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|encKeyVersionQueue
decl_stmt|;
DECL|class|EncryptedQueueRefiller
specifier|private
class|class
name|EncryptedQueueRefiller
implements|implements
name|ValueQueue
operator|.
name|QueueRefiller
argument_list|<
name|EncryptedKeyVersion
argument_list|>
block|{
annotation|@
name|Override
DECL|method|fillQueueForKey (String keyName, Queue<EncryptedKeyVersion> keyQueue, int numEKVs)
specifier|public
name|void
name|fillQueueForKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Queue
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|keyQueue
parameter_list|,
name|int
name|numEKVs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|keyName
argument_list|,
literal|"keyName"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_GENERATE
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_NUM_KEYS
argument_list|,
literal|""
operator|+
name|numEKVs
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|keyName
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_SUB_RESOURCE
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|List
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
name|parseJSONEncKeyVersions
argument_list|(
name|keyName
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|keyQueue
operator|.
name|addAll
argument_list|(
name|ekvs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The KMS implementation of {@link TokenRenewer}.    */
DECL|class|KMSTokenRenewer
specifier|public
specifier|static
class|class
name|KMSTokenRenewer
extends|extends
name|TokenRenewer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMSTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|kind
operator|.
name|equals
argument_list|(
name|TOKEN_KIND
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renewing delegation token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|KeyProvider
name|keyProvider
init|=
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|keyProvider
operator|instanceof
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"keyProvider {} cannot renew dt."
argument_list|,
name|keyProvider
operator|==
literal|null
condition|?
literal|"null"
else|:
name|keyProvider
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|keyProvider
operator|)
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|keyProvider
operator|!=
literal|null
condition|)
block|{
name|keyProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Canceling delegation token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|KeyProvider
name|keyProvider
init|=
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|keyProvider
operator|instanceof
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"keyProvider {} cannot cancel dt."
argument_list|,
name|keyProvider
operator|==
literal|null
condition|?
literal|"null"
else|:
name|keyProvider
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|keyProvider
operator|)
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|keyProvider
operator|!=
literal|null
condition|)
block|{
name|keyProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|KMSEncryptedKeyVersion
specifier|public
specifier|static
class|class
name|KMSEncryptedKeyVersion
extends|extends
name|EncryptedKeyVersion
block|{
DECL|method|KMSEncryptedKeyVersion (String keyName, String keyVersionName, byte[] iv, String encryptedVersionName, byte[] keyMaterial)
specifier|public
name|KMSEncryptedKeyVersion
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|keyVersionName
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|,
name|String
name|encryptedVersionName
parameter_list|,
name|byte
index|[]
name|keyMaterial
parameter_list|)
block|{
name|super
argument_list|(
name|keyName
argument_list|,
name|keyVersionName
argument_list|,
name|iv
argument_list|,
operator|new
name|KMSKeyVersion
argument_list|(
literal|null
argument_list|,
name|encryptedVersionName
argument_list|,
name|keyMaterial
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeJson (Object obj, OutputStream os)
specifier|private
specifier|static
name|void
name|writeJson
parameter_list|(
name|Object
name|obj
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|ObjectMapper
name|jsonMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|jsonMapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
comment|/**    * The factory to create KMSClientProvider, which is used by the    * ServiceLoader.    */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|KeyProviderFactory
block|{
comment|/**      * This provider expects URIs in the following form :      * kms://<PROTO>@<AUTHORITY>/<PATH>      *      * where :      * - PROTO = http or https      * - AUTHORITY =<HOSTS>[:<PORT>]      * - HOSTS =<HOSTNAME>[;<HOSTS>]      * - HOSTNAME = string      * - PORT = integer      *      * This will always create a {@link LoadBalancingKMSClientProvider}      * if the uri is correct.      */
annotation|@
name|Override
DECL|method|createProvider (URI providerUri, Configuration conf)
specifier|public
name|KeyProvider
name|createProvider
parameter_list|(
name|URI
name|providerUri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SCHEME_NAME
operator|.
name|equals
argument_list|(
name|providerUri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|URL
name|origUrl
init|=
operator|new
name|URL
argument_list|(
name|extractKMSPath
argument_list|(
name|providerUri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|authority
init|=
name|origUrl
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
comment|// check for ';' which delimits the backup hosts
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|authority
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No valid authority in kms uri ["
operator|+
name|origUrl
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// Check if port is present in authority
comment|// In the current scheme, all hosts have to run on the same port
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|hostsPart
init|=
name|authority
decl_stmt|;
if|if
condition|(
name|authority
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|String
index|[]
name|t
init|=
name|authority
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not parse port in kms uri ["
operator|+
name|origUrl
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|hostsPart
operator|=
name|t
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|createProvider
argument_list|(
name|conf
argument_list|,
name|origUrl
argument_list|,
name|port
argument_list|,
name|hostsPart
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|createProvider (Configuration conf, URL origUrl, int port, String hostsPart)
specifier|private
name|KeyProvider
name|createProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URL
name|origUrl
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|hostsPart
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|hosts
init|=
name|hostsPart
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|KMSClientProvider
index|[]
name|providers
init|=
operator|new
name|KMSClientProvider
index|[
name|hosts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|providers
index|[
name|i
index|]
operator|=
operator|new
name|KMSClientProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"kms"
argument_list|,
name|origUrl
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|hosts
index|[
name|i
index|]
argument_list|,
name|port
argument_list|,
name|origUrl
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not instantiate KMSProvider."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
name|providers
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
DECL|field|kmsUrl
specifier|private
name|String
name|kmsUrl
decl_stmt|;
DECL|field|sslFactory
specifier|private
name|SSLFactory
name|sslFactory
decl_stmt|;
DECL|field|configurator
specifier|private
name|ConnectionConfigurator
name|configurator
decl_stmt|;
DECL|field|authToken
specifier|private
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|authToken
decl_stmt|;
DECL|field|authRetry
specifier|private
specifier|final
name|int
name|authRetry
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"KMSClientProvider["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|kmsUrl
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This small class exists to set the timeout values for a connection    */
DECL|class|TimeoutConnConfigurator
specifier|private
specifier|static
class|class
name|TimeoutConnConfigurator
implements|implements
name|ConnectionConfigurator
block|{
DECL|field|cc
specifier|private
name|ConnectionConfigurator
name|cc
decl_stmt|;
DECL|field|timeout
specifier|private
name|int
name|timeout
decl_stmt|;
comment|/**      * Sets the timeout and wraps another connection configurator      * @param timeout - will set both connect and read timeouts - in seconds      * @param cc - another configurator to wrap - may be null      */
DECL|method|TimeoutConnConfigurator (int timeout, ConnectionConfigurator cc)
specifier|public
name|TimeoutConnConfigurator
parameter_list|(
name|int
name|timeout
parameter_list|,
name|ConnectionConfigurator
name|cc
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
block|}
comment|/**      * Calls the wrapped configure() method, then sets timeouts      * @param conn the {@link HttpURLConnection} instance to configure.      * @return the connection      * @throws IOException      */
annotation|@
name|Override
DECL|method|configure (HttpURLConnection conn)
specifier|public
name|HttpURLConnection
name|configure
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|conn
operator|=
name|cc
operator|.
name|configure
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|setConnectTimeout
argument_list|(
name|timeout
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// conversion to milliseconds
name|conn
operator|.
name|setReadTimeout
argument_list|(
name|timeout
operator|*
literal|1000
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
block|}
DECL|method|KMSClientProvider (URI uri, Configuration conf)
specifier|public
name|KMSClientProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|kmsUrl
operator|=
name|createServiceURL
argument_list|(
name|extractKMSPath
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|new
name|URL
argument_list|(
name|kmsUrl
argument_list|)
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|int
name|timeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|TIMEOUT_ATTR
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
decl_stmt|;
name|authRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|AUTH_RETRY
argument_list|,
name|DEFAULT_AUTH_RETRY
argument_list|)
expr_stmt|;
name|configurator
operator|=
operator|new
name|TimeoutConnConfigurator
argument_list|(
name|timeout
argument_list|,
name|sslFactory
argument_list|)
expr_stmt|;
name|encKeyVersionQueue
operator|=
operator|new
name|ValueQueue
argument_list|<
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
argument_list|>
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_SIZE
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_MS
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT
argument_list|)
argument_list|,
operator|new
name|EncryptedQueueRefiller
argument_list|()
argument_list|)
expr_stmt|;
name|authToken
operator|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
block|}
DECL|method|extractKMSPath (URI uri)
specifier|private
specifier|static
name|Path
name|extractKMSPath
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
return|return
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
name|uri
argument_list|)
return|;
block|}
DECL|method|createServiceURL (Path path)
specifier|private
specifier|static
name|String
name|createServiceURL
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
init|=
operator|new
name|URL
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|URL
argument_list|(
name|str
operator|+
name|KMSRESTConstants
operator|.
name|SERVICE_VERSION
operator|+
literal|"/"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
DECL|method|createURL (String collection, String resource, String subResource, Map<String, ?> parameters)
specifier|private
name|URL
name|createURL
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|subResource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|kmsUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|resource
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|subResource
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|subResource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|param
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|param
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|s
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|configureConnection (HttpURLConnection conn)
specifier|private
name|HttpURLConnection
name|configureConnection
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|conn
decl_stmt|;
try|try
block|{
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|httpsConn
operator|.
name|setHostnameVerifier
argument_list|(
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|createConnection (final URL url, String method)
specifier|private
name|HttpURLConnection
name|createConnection
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|doAsUser
init|=
name|getDoAsUser
argument_list|()
decl_stmt|;
name|conn
operator|=
name|getActualUgi
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HttpURLConnection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|(
name|configurator
argument_list|)
decl_stmt|;
return|return
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|authToken
argument_list|,
name|doAsUser
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to {}:{}"
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getUndeclaredThrowable
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|conn
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|HTTP_POST
argument_list|)
operator|||
name|method
operator|.
name|equals
argument_list|(
name|HTTP_PUT
argument_list|)
condition|)
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|conn
operator|=
name|configureConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
DECL|method|call (HttpURLConnection conn, Object jsonOutput, int expectedResponse, Class<T> klass)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|call
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|Object
name|jsonOutput
parameter_list|,
name|int
name|expectedResponse
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klass
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|call
argument_list|(
name|conn
argument_list|,
name|jsonOutput
argument_list|,
name|expectedResponse
argument_list|,
name|klass
argument_list|,
name|authRetry
argument_list|)
return|;
block|}
DECL|method|call (HttpURLConnection conn, Object jsonOutput, int expectedResponse, Class<T> klass, int authRetryCount)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|call
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|Object
name|jsonOutput
parameter_list|,
name|int
name|expectedResponse
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klass
parameter_list|,
name|int
name|authRetryCount
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|jsonOutput
operator|!=
literal|null
condition|)
block|{
name|writeJson
argument_list|(
name|jsonOutput
argument_list|,
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
operator|(
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
operator|&&
operator|(
name|conn
operator|.
name|getResponseMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|ANONYMOUS_REQUESTS_DISALLOWED
argument_list|)
operator|||
name|conn
operator|.
name|getResponseMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|INVALID_SIGNATURE
argument_list|)
operator|)
operator|)
operator|||
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
condition|)
block|{
comment|// Ideally, this should happen only when there is an Authentication
comment|// failure. Unfortunately, the AuthenticationFilter returns 403 when it
comment|// cannot authenticate (Since a 401 requires Server to send
comment|// WWW-Authenticate header as well)..
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Response={}({}), resetting authToken"
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|KMSClientProvider
operator|.
name|this
operator|.
name|authToken
operator|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
if|if
condition|(
name|authRetryCount
operator|>
literal|0
condition|)
block|{
name|String
name|contentType
init|=
name|conn
operator|.
name|getRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|String
name|requestMethod
init|=
name|conn
operator|.
name|getRequestMethod
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|conn
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|conn
operator|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|requestMethod
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|call
argument_list|(
name|conn
argument_list|,
name|jsonOutput
argument_list|,
name|expectedResponse
argument_list|,
name|klass
argument_list|,
name|authRetryCount
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
name|HttpExceptionUtils
operator|.
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|expectedResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
operator|&&
name|conn
operator|.
name|getContentType
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|APPLICATION_JSON_MIME
argument_list|)
operator|&&
name|klass
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|ret
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|is
argument_list|,
name|klass
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|class|KMSKeyVersion
specifier|public
specifier|static
class|class
name|KMSKeyVersion
extends|extends
name|KeyVersion
block|{
DECL|method|KMSKeyVersion (String keyName, String versionName, byte[] material)
specifier|public
name|KMSKeyVersion
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|versionName
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
block|{
name|super
argument_list|(
name|keyName
argument_list|,
name|versionName
argument_list|,
name|material
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersion (String versionName)
specifier|public
name|KeyVersion
name|getKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|versionName
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
argument_list|,
name|versionName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey (String name)
specifier|public
name|KeyVersion
name|getCurrentKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|CURRENT_VERSION_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_NAMES_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|response
return|;
block|}
DECL|class|KMSMetadata
specifier|public
specifier|static
class|class
name|KMSMetadata
extends|extends
name|Metadata
block|{
DECL|method|KMSMetadata (String cipher, int bitLength, String description, Map<String, String> attributes, Date created, int versions)
specifier|public
name|KMSMetadata
parameter_list|(
name|String
name|cipher
parameter_list|,
name|int
name|bitLength
parameter_list|,
name|String
name|description
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|,
name|Date
name|created
parameter_list|,
name|int
name|versions
parameter_list|)
block|{
name|super
argument_list|(
name|cipher
argument_list|,
name|bitLength
argument_list|,
name|description
argument_list|,
name|attributes
argument_list|,
name|created
argument_list|,
name|versions
argument_list|)
expr_stmt|;
block|}
block|}
comment|// breaking keyNames into sets to keep resulting URL undler 2000 chars
DECL|method|createKeySets (String[] keyNames)
specifier|private
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|createKeySets
parameter_list|(
name|String
index|[]
name|keyNames
parameter_list|)
block|{
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|batch
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|batchLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|keyNames
control|)
block|{
name|int
name|additionalLen
init|=
name|KMSRESTConstants
operator|.
name|KEY
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|batchLen
operator|+=
name|additionalLen
expr_stmt|;
comment|// topping at 1500 to account for initial URL and encoded names
if|if
condition|(
name|batchLen
operator|>
literal|1500
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|batch
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|batch
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|batchLen
operator|=
name|additionalLen
expr_stmt|;
block|}
name|batch
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|batch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|batch
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|batch
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getKeysMetadata (String .... keyNames)
specifier|public
name|Metadata
index|[]
name|getKeysMetadata
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|keysMetadata
init|=
operator|new
name|ArrayList
argument_list|<
name|Metadata
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|keySets
init|=
name|createKeySets
argument_list|(
name|keyNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
index|[]
name|keySet
range|:
name|keySets
control|)
block|{
if|if
condition|(
name|keyNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryStr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|queryStr
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY
argument_list|,
name|keySet
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_METADATA_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|list
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|map
range|:
name|list
control|)
block|{
name|keysMetadata
operator|.
name|add
argument_list|(
name|parseJSONMetadata
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|keysMetadata
operator|.
name|toArray
argument_list|(
operator|new
name|Metadata
index|[
name|keysMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|createKeyInternal (String name, byte[] material, Options options)
specifier|private
name|KeyVersion
name|createKeyInternal
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|options
argument_list|,
literal|"options"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonKey
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|CIPHER_FIELD
argument_list|,
name|options
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|,
name|options
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|material
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|DESCRIPTION_FIELD
argument_list|,
name|options
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getAttributes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|getAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|ATTRIBUTES_FIELD
argument_list|,
name|options
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonKey
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String name, Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
return|return
name|createKeyInternal
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String name, byte[] material, Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|material
argument_list|,
literal|"material"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|createKeyInternal
argument_list|(
name|name
argument_list|,
name|material
argument_list|,
name|options
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"It should not happen"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|invalidateCache (String name)
specifier|public
name|void
name|invalidateCache
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|INVALIDATECACHE_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
comment|// invalidate the server cache first, then drain local cache.
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|drain
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|rollNewVersionInternal (String name, byte[] material)
specifier|private
name|KeyVersion
name|rollNewVersionInternal
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jsonMaterial
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|jsonMaterial
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|material
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonMaterial
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|KeyVersion
name|keyVersion
init|=
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|invalidateCache
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|keyVersion
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
return|return
name|rollNewVersionInternal
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name, byte[] material)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|material
argument_list|,
literal|"material"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|rollNewVersionInternal
argument_list|(
name|name
argument_list|,
name|material
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"It should not happen"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|generateEncryptedKey ( String encryptionKeyName)
specifier|public
name|EncryptedKeyVersion
name|generateEncryptedKey
parameter_list|(
name|String
name|encryptionKeyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
try|try
block|{
return|return
name|encKeyVersionQueue
operator|.
name|getNext
argument_list|(
name|encryptionKeyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
throw|throw
operator|(
name|SocketTimeoutException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|decryptEncryptedKey ( EncryptedKeyVersion encryptedKeyVersion)
specifier|public
name|KeyVersion
name|decryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|checkNotNull
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
literal|"iv"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
operator|.
name|equals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|)
argument_list|,
literal|"encryptedKey version name must be '%s', is '%s'"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyVersion
argument_list|()
argument_list|,
literal|"encryptedKey"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_DECRYPT
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonPayload
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|,
name|encryptedKeyVersion
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
argument_list|,
name|encryptedKeyVersion
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_SUB_RESOURCE
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonPayload
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reencryptEncryptedKey (EncryptedKeyVersion ekv)
specifier|public
name|EncryptedKeyVersion
name|reencryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|ekv
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
literal|"iv"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
argument_list|,
literal|"encryptedKey"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
operator|.
name|equals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|)
argument_list|,
literal|"encryptedKey version name must be '%s', is '%s'"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|EEK_OP
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_REENCRYPT
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonPayload
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|,
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jsonPayload
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
argument_list|,
name|ekv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|KMSRESTConstants
operator|.
name|EEK_SUB_RESOURCE
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
specifier|final
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonPayload
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONEncKeyVersion
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|,
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reencryptEncryptedKeys (List<EncryptedKeyVersion> ekvs)
specifier|public
name|void
name|reencryptEncryptedKeys
parameter_list|(
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|checkNotNull
argument_list|(
name|ekvs
argument_list|,
literal|"ekvs"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ekvs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|List
argument_list|<
name|Map
argument_list|>
name|jsonPayload
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EncryptedKeyVersion
name|ekv
range|:
name|ekvs
control|)
block|{
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|,
literal|"keyName"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
literal|"iv"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
argument_list|,
literal|"encryptedKey"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
operator|.
name|equals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|)
argument_list|,
literal|"encryptedKey version name must be '%s', is '%s'"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ekv
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyName
operator|==
literal|null
condition|)
block|{
name|keyName
operator|=
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|keyName
operator|.
name|equals
argument_list|(
name|ekv
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
argument_list|,
literal|"All EncryptedKey must have the same key name."
argument_list|)
expr_stmt|;
block|}
name|jsonPayload
operator|.
name|add
argument_list|(
name|KMSUtil
operator|.
name|toJSON
argument_list|(
name|ekv
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|keyName
argument_list|,
name|KMSRESTConstants
operator|.
name|REENCRYPT_BATCH_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|>
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonPayload
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|response
operator|.
name|size
argument_list|()
operator|==
name|ekvs
operator|.
name|size
argument_list|()
argument_list|,
literal|"Response size is different than input size."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|response
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Map
name|item
init|=
name|response
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|EncryptedKeyVersion
name|ekv
init|=
name|parseJSONEncKeyVersion
argument_list|(
name|keyName
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|ekvs
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ekv
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersions (String name)
specifier|public
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|getKeyVersions
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|VERSIONS_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|versions
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|versions
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|response
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|parseJSONKeyVersion
argument_list|(
operator|(
name|Map
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata (String name)
specifier|public
name|Metadata
name|getMetadata
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|METADATA_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONMetadata
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String name)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_DELETE
argument_list|)
decl_stmt|;
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// NOP
comment|// the client does not keep any local state, thus flushing is not required
comment|// because of the client.
comment|// the server should not keep in memory state on behalf of clients either.
block|}
annotation|@
name|Override
DECL|method|warmUpEncryptedKeys (String... keyNames)
specifier|public
name|void
name|warmUpEncryptedKeys
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|encKeyVersionQueue
operator|.
name|initializeQueuesForKeys
argument_list|(
name|keyNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|drain (String keyName)
specifier|public
name|void
name|drain
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|encKeyVersionQueue
operator|.
name|drain
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getEncKeyQueueSize (String keyName)
specifier|public
name|int
name|getEncKeyQueueSize
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
return|return
name|encKeyVersionQueue
operator|.
name|getSize
argument_list|(
name|keyName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (final Token<?> dToken)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|String
name|doAsUser
init|=
name|getDoAsUser
argument_list|()
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
name|generateDelegationToken
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renewing delegation token {} with url:{}, as:{}"
argument_list|,
name|token
argument_list|,
name|url
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|(
name|configurator
argument_list|)
decl_stmt|;
return|return
name|getActualUgi
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|authUrl
operator|.
name|renewDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (final Token<?> dToken)
specifier|public
name|Void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|String
name|doAsUser
init|=
name|getDoAsUser
argument_list|()
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
name|generateDelegationToken
argument_list|(
name|dToken
argument_list|)
decl_stmt|;
return|return
name|getActualUgi
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling delegation token {} with url:{}, as:{}"
argument_list|,
name|dToken
argument_list|,
name|url
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|(
name|configurator
argument_list|)
decl_stmt|;
name|authUrl
operator|.
name|cancelDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Get the doAs user name.    *    * 'actualUGI' is the UGI of the user creating the client    * It is possible that the creator of the KMSClientProvier    * calls this method on behalf of a proxyUser (the doAsUser).    * In which case this call has to be made as the proxy user.    *    * @return the doAs user name.    * @throws IOException    */
DECL|method|getDoAsUser ()
specifier|private
name|String
name|getDoAsUser
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|currentUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
operator|(
name|currentUgi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
operator|)
condition|?
name|currentUgi
operator|.
name|getShortUserName
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * Generate a DelegationTokenAuthenticatedURL.Token from the given generic    * typed delegation token.    *    * @param dToken The delegation token.    * @return The DelegationTokenAuthenticatedURL.Token, with its delegation    *         token set to the delegation token passed in.    */
DECL|method|generateDelegationToken ( final Token<?> dToken)
specifier|private
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|generateDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|dToken
parameter_list|)
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|AbstractDelegationTokenIdentifier
argument_list|>
name|dt
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|dToken
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|dToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|dToken
operator|.
name|getKind
argument_list|()
argument_list|,
name|dToken
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|token
operator|.
name|setDelegationToken
argument_list|(
name|dt
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|addDelegationTokens (final String renewer, Credentials credentials)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokens
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|tokens
init|=
literal|null
decl_stmt|;
name|Text
name|dtService
init|=
name|getDelegationTokenService
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|credentials
operator|.
name|getToken
argument_list|(
name|dtService
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
specifier|final
name|URL
name|url
init|=
name|createURL
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|(
name|configurator
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|doAsUser
init|=
name|getDoAsUser
argument_list|()
decl_stmt|;
name|token
operator|=
name|getActualUgi
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Not using the cached token here.. Creating a new token here
comment|// everytime.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting new token from {}, renewer:{}"
argument_list|,
name|url
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
return|return
name|authUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
argument_list|,
name|renewer
argument_list|,
name|doAsUser
argument_list|)
return|;
block|}
block|}
block|)
empty_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New token received: ({})"
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|tokens
operator|=
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|token
block|}
empty_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got NULL as delegation token"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|tokens
return|;
block|}
end_class

begin_function
DECL|method|getDelegationTokenService ()
specifier|private
name|Text
name|getDelegationTokenService
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|kmsUrl
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|dtService
init|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|addr
argument_list|)
decl_stmt|;
return|return
name|dtService
return|;
block|}
end_function

begin_function
DECL|method|containsKmsDt (UserGroupInformation ugi)
specifier|private
name|boolean
name|containsKmsDt
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add existing credentials from the UGI, since provider is cached.
name|Credentials
name|creds
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|creds
operator|.
name|getAllTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|dToken
init|=
name|creds
operator|.
name|getToken
argument_list|(
name|getDelegationTokenService
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dToken
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|getActualUgi ()
specifier|private
name|UserGroupInformation
name|getActualUgi
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|currentUgi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|UserGroupInformation
operator|.
name|logAllUserInfo
argument_list|(
name|currentUgi
argument_list|)
expr_stmt|;
block|}
comment|// Use current user by default
name|UserGroupInformation
name|actualUgi
init|=
name|currentUgi
decl_stmt|;
if|if
condition|(
name|currentUgi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Use real user for proxy user
name|actualUgi
operator|=
name|currentUgi
operator|.
name|getRealUser
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|!
name|containsKmsDt
argument_list|(
name|actualUgi
argument_list|)
operator|&&
operator|!
name|actualUgi
operator|.
name|hasKerberosCredentials
argument_list|()
condition|)
block|{
comment|// Use login user is only necessary when Kerberos is enabled
comment|// but the actual user does not have either
comment|// Kerberos credential or KMS delegation token for KMS operations
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using loginUser when Kerberos is enabled but the actual user"
operator|+
literal|" does not have either KMS Delegation Token or Kerberos Credentials"
argument_list|)
expr_stmt|;
name|actualUgi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
return|return
name|actualUgi
return|;
block|}
end_function

begin_comment
comment|/**    * Shutdown valueQueue executor threads    */
end_comment

begin_function
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|encKeyVersionQueue
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|sslFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|VisibleForTesting
DECL|method|getKMSUrl ()
name|String
name|getKMSUrl
parameter_list|()
block|{
return|return
name|kmsUrl
return|;
block|}
end_function

unit|}
end_unit

