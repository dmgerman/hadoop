begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|PseudoAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * KMS client<code>KeyProvider</code> implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMSClientProvider
specifier|public
class|class
name|KMSClientProvider
extends|extends
name|KeyProvider
block|{
DECL|field|SCHEME_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME_NAME
init|=
literal|"kms"
decl_stmt|;
DECL|field|UTF8
specifier|private
specifier|static
specifier|final
name|String
name|UTF8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"Content-Type"
decl_stmt|;
DECL|field|APPLICATION_JSON_MIME
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_JSON_MIME
init|=
literal|"application/json"
decl_stmt|;
DECL|field|HTTP_GET
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_GET
init|=
literal|"GET"
decl_stmt|;
DECL|field|HTTP_POST
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_POST
init|=
literal|"POST"
decl_stmt|;
DECL|field|HTTP_PUT
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PUT
init|=
literal|"PUT"
decl_stmt|;
DECL|field|HTTP_DELETE
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_DELETE
init|=
literal|"DELETE"
decl_stmt|;
DECL|method|parseJSONKeyVersion (Map valueMap)
specifier|private
specifier|static
name|KeyVersion
name|parseJSONKeyVersion
parameter_list|(
name|Map
name|valueMap
parameter_list|)
block|{
name|KeyVersion
name|keyVersion
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|valueMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|byte
index|[]
name|material
init|=
operator|(
name|valueMap
operator|.
name|containsKey
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
operator|)
condition|?
name|Base64
operator|.
name|decodeBase64
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|keyVersion
operator|=
operator|new
name|KMSKeyVersion
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
argument_list|,
name|material
argument_list|)
expr_stmt|;
block|}
return|return
name|keyVersion
return|;
block|}
DECL|method|parseJSONMetadata (Map valueMap)
specifier|private
specifier|static
name|Metadata
name|parseJSONMetadata
parameter_list|(
name|Map
name|valueMap
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|valueMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|metadata
operator|=
operator|new
name|KMSMetadata
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|CIPHER_FIELD
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|DESCRIPTION_FIELD
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|(
operator|(
name|Long
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|CREATED_FIELD
argument_list|)
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSIONS_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
DECL|method|writeJson (Map map, OutputStream os)
specifier|private
specifier|static
name|void
name|writeJson
parameter_list|(
name|Map
name|map
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|ObjectMapper
name|jsonMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|jsonMapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**    * The factory to create KMSClientProvider, which is used by the    * ServiceLoader.    */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|KeyProviderFactory
block|{
annotation|@
name|Override
DECL|method|createProvider (URI providerName, Configuration conf)
specifier|public
name|KeyProvider
name|createProvider
parameter_list|(
name|URI
name|providerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SCHEME_NAME
operator|.
name|equals
argument_list|(
name|providerName
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|KMSClientProvider
argument_list|(
name|providerName
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|checkNotNull (T o, String name)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkNotNull
parameter_list|(
name|T
name|o
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' cannot be null"
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
DECL|method|checkNotEmpty (String s, String name)
specifier|public
specifier|static
name|String
name|checkNotEmpty
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
DECL|field|kmsUrl
specifier|private
name|String
name|kmsUrl
decl_stmt|;
DECL|field|sslFactory
specifier|private
name|SSLFactory
name|sslFactory
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"KMSClientProvider["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|kmsUrl
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|KMSClientProvider (URI uri, Configuration conf)
specifier|public
name|KMSClientProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|unnestUri
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|kmsUrl
operator|=
name|createServiceURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"https"
operator|.
name|equalsIgnoreCase
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|sslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|sslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|createServiceURL (URL url)
specifier|private
name|String
name|createServiceURL
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|URL
argument_list|(
name|str
operator|+
name|KMSRESTConstants
operator|.
name|SERVICE_VERSION
operator|+
literal|"/"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
DECL|method|createURL (String collection, String resource, String subResource, Map<String, ?> parameters)
specifier|private
name|URL
name|createURL
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|subResource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|kmsUrl
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|resource
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subResource
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|subResource
argument_list|)
expr_stmt|;
block|}
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|param
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|param
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|s
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|configureConnection (HttpURLConnection conn)
specifier|private
name|HttpURLConnection
name|configureConnection
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|conn
decl_stmt|;
try|try
block|{
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|sslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|httpsConn
operator|.
name|setHostnameVerifier
argument_list|(
name|sslFactory
operator|.
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|createConnection (URL url, String method)
specifier|private
name|HttpURLConnection
name|createConnection
parameter_list|(
name|URL
name|url
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|conn
decl_stmt|;
try|try
block|{
name|AuthenticatedURL
name|authUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|PseudoAuthenticator
argument_list|()
argument_list|,
name|sslFactory
argument_list|)
decl_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|conn
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|HTTP_POST
argument_list|)
operator|||
name|method
operator|.
name|equals
argument_list|(
name|HTTP_PUT
argument_list|)
condition|)
block|{
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|conn
operator|=
name|configureConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
comment|// trick, riding on generics to throw an undeclared exception
DECL|method|throwEx (Throwable ex)
specifier|private
specifier|static
name|void
name|throwEx
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|KMSClientProvider
operator|.
expr|<
name|RuntimeException
operator|>
name|throwException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|throwException (Throwable ex)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|throwException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
throws|throws
name|E
block|{
throw|throw
operator|(
name|E
operator|)
name|ex
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|validateResponse (HttpURLConnection conn, int expected)
specifier|private
specifier|static
name|void
name|validateResponse
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|status
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|expected
condition|)
block|{
name|InputStream
name|es
init|=
literal|null
decl_stmt|;
try|try
block|{
name|es
operator|=
name|conn
operator|.
name|getErrorStream
argument_list|()
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
name|json
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|es
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|exClass
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|ERROR_EXCEPTION_JSON
argument_list|)
decl_stmt|;
name|String
name|exMsg
init|=
operator|(
name|String
operator|)
name|json
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|ERROR_MESSAGE_JSON
argument_list|)
decl_stmt|;
name|Exception
name|toThrow
decl_stmt|;
try|try
block|{
name|ClassLoader
name|cl
init|=
name|KMSClientProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Class
name|klass
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|exClass
argument_list|)
decl_stmt|;
name|Constructor
name|constr
init|=
name|klass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|toThrow
operator|=
operator|(
name|Exception
operator|)
name|constr
operator|.
name|newInstance
argument_list|(
name|exMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|toThrow
operator|=
operator|new
name|IOException
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"HTTP status [{0}], {1}"
argument_list|,
name|status
argument_list|,
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|throwEx
argument_list|(
name|toThrow
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|es
operator|!=
literal|null
condition|)
block|{
name|es
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|call (HttpURLConnection conn, Map jsonOutput, int expectedResponse, Class<T> klass)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|call
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|,
name|Map
name|jsonOutput
parameter_list|,
name|int
name|expectedResponse
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|klass
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|jsonOutput
operator|!=
literal|null
condition|)
block|{
name|writeJson
argument_list|(
name|jsonOutput
argument_list|,
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|conn
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|validateResponse
argument_list|(
name|conn
argument_list|,
name|expectedResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|APPLICATION_JSON_MIME
operator|.
name|equalsIgnoreCase
argument_list|(
name|conn
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|&&
name|klass
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|ret
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|is
argument_list|,
name|klass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|class|KMSKeyVersion
specifier|public
specifier|static
class|class
name|KMSKeyVersion
extends|extends
name|KeyVersion
block|{
DECL|method|KMSKeyVersion (String versionName, byte[] material)
specifier|public
name|KMSKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
block|{
name|super
argument_list|(
name|versionName
argument_list|,
name|material
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersion (String versionName)
specifier|public
name|KeyVersion
name|getKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|versionName
argument_list|,
literal|"versionName"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_VERSION_RESOURCE
argument_list|,
name|versionName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentKey (String name)
specifier|public
name|KeyVersion
name|getCurrentKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|CURRENT_VERSION_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_NAMES_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|response
return|;
block|}
DECL|class|KMSMetadata
specifier|public
specifier|static
class|class
name|KMSMetadata
extends|extends
name|Metadata
block|{
DECL|method|KMSMetadata (String cipher, int bitLength, String description, Date created, int versions)
specifier|public
name|KMSMetadata
parameter_list|(
name|String
name|cipher
parameter_list|,
name|int
name|bitLength
parameter_list|,
name|String
name|description
parameter_list|,
name|Date
name|created
parameter_list|,
name|int
name|versions
parameter_list|)
block|{
name|super
argument_list|(
name|cipher
argument_list|,
name|bitLength
argument_list|,
name|description
argument_list|,
name|created
argument_list|,
name|versions
argument_list|)
expr_stmt|;
block|}
block|}
comment|// breaking keyNames into sets to keep resulting URL undler 2000 chars
DECL|method|createKeySets (String[] keyNames)
specifier|private
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|createKeySets
parameter_list|(
name|String
index|[]
name|keyNames
parameter_list|)
block|{
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|batch
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|batchLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|keyNames
control|)
block|{
name|int
name|additionalLen
init|=
name|KMSRESTConstants
operator|.
name|KEY_OP
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|batchLen
operator|+=
name|additionalLen
expr_stmt|;
comment|// topping at 1500 to account for initial URL and encoded names
if|if
condition|(
name|batchLen
operator|>
literal|1500
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|batch
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|batch
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|batch
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|batchLen
operator|=
name|additionalLen
expr_stmt|;
block|}
name|batch
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|batch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|batch
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|batch
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getKeysMetadata (String .... keyNames)
specifier|public
name|Metadata
index|[]
name|getKeysMetadata
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|keysMetadata
init|=
operator|new
name|ArrayList
argument_list|<
name|Metadata
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|keySets
init|=
name|createKeySets
argument_list|(
name|keyNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
index|[]
name|keySet
range|:
name|keySets
control|)
block|{
if|if
condition|(
name|keyNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryStr
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|queryStr
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_OP
argument_list|,
name|keySet
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_METADATA_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|list
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
name|map
range|:
name|list
control|)
block|{
name|keysMetadata
operator|.
name|add
argument_list|(
name|parseJSONMetadata
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|keysMetadata
operator|.
name|toArray
argument_list|(
operator|new
name|Metadata
index|[
name|keysMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|createKeyInternal (String name, byte[] material, Options options)
specifier|private
name|KeyVersion
name|createKeyInternal
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|options
argument_list|,
literal|"options"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonKey
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|CIPHER_FIELD
argument_list|,
name|options
operator|.
name|getCipher
argument_list|()
argument_list|)
expr_stmt|;
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|,
name|options
operator|.
name|getBitLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|material
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jsonKey
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|DESCRIPTION_FIELD
argument_list|,
name|options
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEYS_RESOURCE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonKey
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_CREATED
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String name, Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
return|return
name|createKeyInternal
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String name, byte[] material, Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|material
argument_list|,
literal|"material"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|createKeyInternal
argument_list|(
name|name
argument_list|,
name|material
argument_list|,
name|options
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"It should not happen"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|rollNewVersionInternal (String name, byte[] material)
specifier|private
name|KeyVersion
name|rollNewVersionInternal
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jsonMaterial
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|material
operator|!=
literal|null
condition|)
block|{
name|jsonMaterial
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|material
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_POST
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_JSON_MIME
argument_list|)
expr_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
name|jsonMaterial
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONKeyVersion
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
return|return
name|rollNewVersionInternal
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name, byte[] material)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|material
argument_list|,
literal|"material"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|rollNewVersionInternal
argument_list|(
name|name
argument_list|,
name|material
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"It should not happen"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersions (String name)
specifier|public
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|getKeyVersions
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|VERSIONS_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|List
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|versions
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|versions
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|response
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|parseJSONKeyVersion
argument_list|(
operator|(
name|Map
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata (String name)
specifier|public
name|Metadata
name|getMetadata
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
name|KMSRESTConstants
operator|.
name|METADATA_SUB_RESOURCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_GET
argument_list|)
decl_stmt|;
name|Map
name|response
init|=
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|parseJSONMetadata
argument_list|(
name|response
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String name)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|createURL
argument_list|(
name|KMSRESTConstants
operator|.
name|KEY_RESOURCE
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|createConnection
argument_list|(
name|url
argument_list|,
name|HTTP_DELETE
argument_list|)
decl_stmt|;
name|call
argument_list|(
name|conn
argument_list|,
literal|null
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// NOP
comment|// the client does not keep any local state, thus flushing is not required
comment|// because of the client.
comment|// the server should not keep in memory state on behalf of clients either.
block|}
annotation|@
name|VisibleForTesting
DECL|method|buildVersionName (String name, int version)
specifier|public
specifier|static
name|String
name|buildVersionName
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|version
parameter_list|)
block|{
return|return
name|KeyProvider
operator|.
name|buildVersionName
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
end_class

end_unit

