begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/****************************************************************  * Implement the FileSystem API for the raw local filesystem.  *  *****************************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|RawLocalFileSystem
specifier|public
class|class
name|RawLocalFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|NAME
specifier|static
specifier|final
name|URI
name|NAME
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|useDeprecatedFileStatus
specifier|private
specifier|static
specifier|final
name|boolean
name|useDeprecatedFileStatus
init|=
operator|!
name|Stat
operator|.
name|isAvailable
argument_list|()
decl_stmt|;
DECL|method|RawLocalFileSystem ()
specifier|public
name|RawLocalFileSystem
parameter_list|()
block|{
name|workingDir
operator|=
name|getInitialWorkingDirectory
argument_list|()
expr_stmt|;
block|}
DECL|method|makeAbsolute (Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
block|}
comment|/** Convert a path to a File. */
DECL|method|pathToFile (Path path)
specifier|public
name|File
name|pathToFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|getWorkingDirectory
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*******************************************************    * For open()'s FSInputStream.    *******************************************************/
DECL|class|LocalFSFileInputStream
class|class
name|LocalFSFileInputStream
extends|extends
name|FSInputStream
implements|implements
name|HasFileDescriptor
block|{
DECL|field|fis
specifier|private
name|FileInputStream
name|fis
decl_stmt|;
DECL|field|position
specifier|private
name|long
name|position
decl_stmt|;
DECL|method|LocalFSFileInputStream (Path f)
specifier|public
name|LocalFSFileInputStream
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|fis
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|position
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
comment|/*      * Just forward to the fis      */
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fis
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|value
init|=
name|fis
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|++
expr_stmt|;
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|value
init|=
name|fis
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|+=
name|value
expr_stmt|;
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|value
init|=
name|fis
operator|.
name|getChannel
argument_list|()
operator|.
name|read
argument_list|(
name|bb
argument_list|,
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|value
init|=
name|fis
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getFileDescriptor ()
specifier|public
name|FileDescriptor
name|getFileDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fis
operator|.
name|getFD
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|LocalFSFileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
comment|/*********************************************************    * For create()'s FSOutputStream.    *********************************************************/
DECL|class|LocalFSFileOutputStream
class|class
name|LocalFSFileOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|fos
specifier|private
name|FileOutputStream
name|fos
decl_stmt|;
DECL|method|LocalFSFileOutputStream (Path f, boolean append)
specifier|private
name|LocalFSFileOutputStream
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|,
name|append
argument_list|)
expr_stmt|;
block|}
comment|/*      * Just forward to the fos      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append to a diretory (="
operator|+
name|f
operator|+
literal|" )"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|LocalFSFileOutputStream
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
DECL|method|create (Path f, boolean overwrite, boolean createParent, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|private
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|f
argument_list|)
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists: "
operator|+
name|f
argument_list|)
throw|;
block|}
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|mkdirs
argument_list|(
name|parent
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|LocalFSFileOutputStream
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|createNonRecursive (Path f, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|f
argument_list|)
operator|&&
operator|!
name|flags
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|LocalFSFileOutputStream
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
literal|false
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Attempt rename using Java API.
name|File
name|srcFile
init|=
name|pathToFile
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|File
name|dstFile
init|=
name|pathToFile
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFile
operator|.
name|renameTo
argument_list|(
name|dstFile
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Enforce POSIX rename behavior that a source directory replaces an existing
comment|// destination if the destination is an empty directory.  On most platforms,
comment|// this is already handled by the Java API call above.  Some platforms
comment|// (notably Windows) do not provide this behavior, so the Java API call above
comment|// fails.  Delete destination and attempt rename again.
if|if
condition|(
name|this
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|FileStatus
name|sdst
init|=
name|this
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdst
operator|.
name|isDirectory
argument_list|()
operator|&&
name|dstFile
operator|.
name|list
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting empty destination and renaming "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
operator|&&
name|srcFile
operator|.
name|renameTo
argument_list|(
name|dstFile
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// The fallback behavior accomplishes the rename by a full copy.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Falling through to a copy of "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
return|return
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|this
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Delete the given path to a file or directory.    * @param p the path to delete    * @param recursive to delete sub-directories    * @return true if the file or directory and all its contents were deleted    * @throws IOException if p is non-empty and recursive is false     */
annotation|@
name|Override
DECL|method|delete (Path p, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|p
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|pathToFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|recursive
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|f
argument_list|)
operator|.
name|length
operator|!=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is not empty"
argument_list|)
throw|;
block|}
return|return
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    *    * (<b>Note</b>: Returned list is not sorted in any given order,    * due to reliance on Java's {@link File#list()} API.)    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|localf
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|results
decl_stmt|;
if|if
condition|(
operator|!
name|localf
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|localf
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|useDeprecatedFileStatus
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|getFileStatus
argument_list|(
name|f
argument_list|)
block|}
return|;
block|}
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|DeprecatedRawLocalFileStatus
argument_list|(
name|localf
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|this
argument_list|)
block|}
return|;
block|}
name|String
index|[]
name|names
init|=
name|localf
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|results
operator|=
operator|new
name|FileStatus
index|[
name|names
operator|.
name|length
index|]
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// Assemble the path using the Path 3 arg constructor to make sure
comment|// paths with colon are properly resolved on Linux
name|results
index|[
name|j
index|]
operator|=
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|f
argument_list|,
operator|new
name|Path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore the files not found since the dir list may have have changed
comment|// since the names[] list was generated.
block|}
block|}
if|if
condition|(
name|j
operator|==
name|names
operator|.
name|length
condition|)
block|{
return|return
name|results
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|results
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/**    * Creates the specified directory hierarchy. Does not    * treat existence as an error.    */
annotation|@
name|Override
DECL|method|mkdirs (Path f)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mkdirs path arg is null"
argument_list|)
throw|;
block|}
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|File
name|p2f
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|File
name|parent2f
init|=
name|pathToFile
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent2f
operator|!=
literal|null
operator|&&
name|parent2f
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|parent2f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Parent path is not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|parent
operator|==
literal|null
operator|||
name|mkdirs
argument_list|(
name|parent
argument_list|)
operator|)
operator|&&
operator|(
name|p2f
operator|.
name|mkdir
argument_list|()
operator|||
name|p2f
operator|.
name|isDirectory
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|mkdirs
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
DECL|method|primitiveMkdir (Path f, FsPermission absolutePermission)
specifier|protected
name|boolean
name|primitiveMkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|mkdirs
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|absolutePermission
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|checkPath
argument_list|(
name|workingDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|getInitialWorkingDirectory ()
specifier|protected
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus (Path p)
specifier|public
name|FsStatus
name|getStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|partition
init|=
name|pathToFile
argument_list|(
name|p
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
else|:
name|p
argument_list|)
decl_stmt|;
comment|//File provides getUsableSpace() and getFreeSpace()
comment|//File provides no API to obtain used space, assume used = total - free
return|return
operator|new
name|FsStatus
argument_list|(
name|partition
operator|.
name|getTotalSpace
argument_list|()
argument_list|,
name|partition
operator|.
name|getTotalSpace
argument_list|()
operator|-
name|partition
operator|.
name|getFreeSpace
argument_list|()
argument_list|,
name|partition
operator|.
name|getFreeSpace
argument_list|()
argument_list|)
return|;
block|}
comment|// In the case of the local filesystem, we can just rename the file.
annotation|@
name|Override
DECL|method|moveFromLocalFile (Path src, Path dst)
specifier|public
name|void
name|moveFromLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// We can write output directly to the final location
annotation|@
name|Override
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fsOutputFile
return|;
block|}
comment|// It's in the right place - nothing to do.
annotation|@
name|Override
DECL|method|completeLocalOutput (Path fsWorkingFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsWorkingFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LocalFS"
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileLinkStatusInternal
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|deprecatedGetFileStatus (Path f)
specifier|private
name|FileStatus
name|deprecatedGetFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|path
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|DeprecatedRawLocalFileStatus
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
DECL|class|DeprecatedRawLocalFileStatus
specifier|static
class|class
name|DeprecatedRawLocalFileStatus
extends|extends
name|FileStatus
block|{
comment|/* We can add extra fields here. It breaks at least CopyFiles.FilePair().      * We recognize if the information is already loaded by check if      * onwer.equals("").      */
DECL|method|isPermissionLoaded ()
specifier|private
name|boolean
name|isPermissionLoaded
parameter_list|()
block|{
return|return
operator|!
name|super
operator|.
name|getOwner
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|DeprecatedRawLocalFileStatus (File f, long defaultBlockSize, FileSystem fs)
name|DeprecatedRawLocalFileStatus
parameter_list|(
name|File
name|f
parameter_list|,
name|long
name|defaultBlockSize
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
name|defaultBlockSize
argument_list|,
name|f
operator|.
name|lastModified
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermission ()
specifier|public
name|FsPermission
name|getPermission
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getPermission
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getOwner
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getGroup
argument_list|()
return|;
block|}
comment|/// loads permissions, owner, and group from `ls -ld`
DECL|method|loadPermissionInfo ()
specifier|private
name|void
name|loadPermissionInfo
parameter_list|()
block|{
name|IOException
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|output
init|=
name|FileUtil
operator|.
name|execCommand
argument_list|(
operator|new
name|File
argument_list|(
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|Shell
operator|.
name|getGetPermissionCommand
argument_list|()
argument_list|)
decl_stmt|;
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|output
argument_list|,
name|Shell
operator|.
name|TOKEN_SEPARATOR_REGEX
argument_list|)
decl_stmt|;
comment|//expected format
comment|//-rw-------    1 username groupname ...
name|String
name|permission
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|setPermission
argument_list|(
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|owner
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// If on windows domain, token format is DOMAIN\\user and we want to
comment|// extract only the user name
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|int
name|i
init|=
name|owner
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
name|owner
operator|=
name|owner
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
name|t
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|e
operator|=
name|ioe
expr_stmt|;
block|}
else|else
block|{
name|setPermission
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|e
operator|=
name|ioe
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while running command to get "
operator|+
literal|"file permissions : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use the command chown to set owner.    */
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|setOwner
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use the command chmod to set permission.    */
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|chmod
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|perm
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%04o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
decl_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getSetPermissionCommand
argument_list|(
name|perm
argument_list|,
literal|false
argument_list|,
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the {@link Path}'s last modified time<em>only</em> to the given    * valid time.    *    * @param mtime the modification time to set (only if greater than zero).    * @param atime currently ignored.    * @throws IOException if setting the last modified time fails.    */
annotation|@
name|Override
DECL|method|setTimes (Path p, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|pathToFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtime
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|setLastModified
argument_list|(
name|mtime
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"couldn't set last-modified time to "
operator|+
name|mtime
operator|+
literal|" for "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|supportsSymlinks ()
specifier|public
name|boolean
name|supportsSymlinks
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createSymlink (Path target, Path link, boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
name|Path
name|target
parameter_list|,
name|Path
name|link
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|targetScheme
init|=
name|target
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetScheme
operator|!=
literal|null
operator|&&
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|targetScheme
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create symlink to non-local file "
operator|+
literal|"system: "
operator|+
name|target
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|createParent
condition|)
block|{
name|mkdirs
argument_list|(
name|link
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NB: Use createSymbolicLink in java.nio.file.Path once available
name|int
name|result
init|=
name|FileUtil
operator|.
name|symLink
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|,
name|makeAbsolute
argument_list|(
name|link
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error "
operator|+
name|result
operator|+
literal|" creating symlink "
operator|+
name|link
operator|+
literal|" to "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return a FileStatus representing the given path. If the path refers    * to a symlink return a FileStatus representing the link rather than    * the object the link refers to.    */
annotation|@
name|Override
DECL|method|getFileLinkStatus (final Path f)
specifier|public
name|FileStatus
name|getFileLinkStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fi
init|=
name|getFileLinkStatusInternal
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// getFileLinkStatus is supposed to return a symlink with a
comment|// qualified path
if|if
condition|(
name|fi
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|Path
name|targetQual
init|=
name|FSLinkResolver
operator|.
name|qualifySymlinkTarget
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|fi
operator|.
name|getPath
argument_list|()
argument_list|,
name|fi
operator|.
name|getSymlink
argument_list|()
argument_list|)
decl_stmt|;
name|fi
operator|.
name|setSymlink
argument_list|(
name|targetQual
argument_list|)
expr_stmt|;
block|}
return|return
name|fi
return|;
block|}
comment|/**    * Public {@link FileStatus} methods delegate to this function, which in turn    * either call the new {@link Stat} based implementation or the deprecated    * methods based on platform support.    *     * @param f Path to stat    * @param dereference whether to dereference the final path component if a    *          symlink    * @return FileStatus of f    * @throws IOException    */
DECL|method|getFileLinkStatusInternal (final Path f, boolean dereference)
specifier|private
name|FileStatus
name|getFileLinkStatusInternal
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
name|boolean
name|dereference
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useDeprecatedFileStatus
condition|)
block|{
return|return
name|getNativeFileLinkStatus
argument_list|(
name|f
argument_list|,
name|dereference
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dereference
condition|)
block|{
return|return
name|deprecatedGetFileStatus
argument_list|(
name|f
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|deprecatedGetFileLinkStatusInternal
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
comment|/**    * Deprecated. Remains for legacy support. Should be removed when {@link Stat}    * gains support for Windows and other operating systems.    */
annotation|@
name|Deprecated
DECL|method|deprecatedGetFileLinkStatusInternal (final Path f)
specifier|private
name|FileStatus
name|deprecatedGetFileLinkStatusInternal
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|target
init|=
name|FileUtil
operator|.
name|readLink
argument_list|(
operator|new
name|File
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
name|fs
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// If f refers to a regular file or directory
if|if
condition|(
name|target
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|fs
return|;
block|}
comment|// Otherwise f refers to a symlink
return|return
operator|new
name|FileStatus
argument_list|(
name|fs
operator|.
name|getLen
argument_list|()
argument_list|,
literal|false
argument_list|,
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|)
argument_list|,
name|f
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|/* The exists method in the File class returns false for dangling        * links so we can get a FileNotFoundException for links that exist.        * It's also possible that we raced with a delete of the link. Use        * the readBasicFileAttributes method in java.nio.file.attributes        * when available.        */
if|if
condition|(
operator|!
name|target
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
name|target
argument_list|)
argument_list|,
name|f
argument_list|)
return|;
block|}
comment|// f refers to a file or directory that does not exist
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Calls out to platform's native stat(1) implementation to get file metadata    * (permissions, user, group, atime, mtime, etc). This works around the lack    * of lstat(2) in Java 6.    *     *  Currently, the {@link Stat} class used to do this only supports Linux    *  and FreeBSD, so the old {@link #deprecatedGetFileLinkStatusInternal(Path)}    *  implementation (deprecated) remains further OS support is added.    *    * @param f File to stat    * @param dereference whether to dereference symlinks    * @return FileStatus of f    * @throws IOException    */
DECL|method|getNativeFileLinkStatus (final Path f, boolean dereference)
specifier|private
name|FileStatus
name|getNativeFileLinkStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
name|boolean
name|dereference
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPath
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|(
name|f
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|dereference
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|stat
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getLinkTarget (Path f)
specifier|public
name|Path
name|getLinkTarget
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fi
init|=
name|getFileLinkStatusInternal
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// return an unqualified symlink target
return|return
name|fi
operator|.
name|getSymlink
argument_list|()
return|;
block|}
block|}
end_class

end_unit

