begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/****************************************************************  * Implement the FileSystem API for the raw local filesystem.  *  *****************************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|RawLocalFileSystem
specifier|public
class|class
name|RawLocalFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|NAME
specifier|static
specifier|final
name|URI
name|NAME
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|method|RawLocalFileSystem ()
specifier|public
name|RawLocalFileSystem
parameter_list|()
block|{
name|workingDir
operator|=
name|getInitialWorkingDirectory
argument_list|()
expr_stmt|;
block|}
DECL|method|makeAbsolute (Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
block|}
comment|/** Convert a path to a File. */
DECL|method|pathToFile (Path path)
specifier|public
name|File
name|pathToFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|getWorkingDirectory
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|TrackingFileInputStream
class|class
name|TrackingFileInputStream
extends|extends
name|FileInputStream
block|{
DECL|method|TrackingFileInputStream (File f)
specifier|public
name|TrackingFileInputStream
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|read (byte[] data)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|super
operator|.
name|read
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|read (byte[] data, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|super
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/*******************************************************    * For open()'s FSInputStream.    *******************************************************/
DECL|class|LocalFSFileInputStream
class|class
name|LocalFSFileInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|fis
specifier|private
name|FileInputStream
name|fis
decl_stmt|;
DECL|field|position
specifier|private
name|long
name|position
decl_stmt|;
DECL|method|LocalFSFileInputStream (Path f)
specifier|public
name|LocalFSFileInputStream
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fis
operator|=
operator|new
name|TrackingFileInputStream
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|fis
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|position
return|;
block|}
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
comment|/*      * Just forward to the fis      */
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fis
operator|.
name|available
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|value
init|=
name|fis
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>=
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|++
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|value
init|=
name|fis
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
DECL|method|read (long position, byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|fis
operator|.
name|getChannel
argument_list|()
operator|.
name|read
argument_list|(
name|bb
argument_list|,
name|position
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|value
init|=
name|fis
operator|.
name|skip
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|position
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|LocalFSFileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
comment|/*********************************************************    * For create()'s FSOutputStream.    *********************************************************/
DECL|class|LocalFSFileOutputStream
class|class
name|LocalFSFileOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|fos
specifier|private
name|FileOutputStream
name|fos
decl_stmt|;
DECL|method|LocalFSFileOutputStream (Path f, boolean append)
specifier|private
name|LocalFSFileOutputStream
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|,
name|append
argument_list|)
expr_stmt|;
block|}
comment|/*      * Just forward to the fos      */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected exception
throw|throw
operator|new
name|FSError
argument_list|(
name|e
argument_list|)
throw|;
comment|// assume native fs error
block|}
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot append to a diretory (="
operator|+
name|f
operator|+
literal|" )"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|LocalFSFileOutputStream
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|create (Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
DECL|method|create (Path f, boolean overwrite, boolean createParent, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|private
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|f
argument_list|)
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists: "
operator|+
name|f
argument_list|)
throw|;
block|}
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|mkdirs
argument_list|(
name|parent
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|LocalFSFileOutputStream
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
literal|false
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pathToFile
argument_list|(
name|src
argument_list|)
operator|.
name|renameTo
argument_list|(
name|pathToFile
argument_list|(
name|dst
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|this
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Delete the given path to a file or directory.    * @param p the path to delete    * @param recursive to delete sub-directories    * @return true if the file or directory and all its contents were deleted    * @throws IOException if p is non-empty and recursive is false     */
DECL|method|delete (Path p, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|p
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|pathToFile
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|recursive
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|(
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|f
argument_list|)
operator|.
name|length
operator|!=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is not empty"
argument_list|)
throw|;
block|}
return|return
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|localf
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|results
decl_stmt|;
if|if
condition|(
operator|!
name|localf
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|localf
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
operator|new
name|RawLocalFileStatus
argument_list|(
name|localf
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|this
argument_list|)
block|}
return|;
block|}
name|String
index|[]
name|names
init|=
name|localf
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|results
operator|=
operator|new
name|FileStatus
index|[
name|names
operator|.
name|length
index|]
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|results
index|[
name|j
index|]
operator|=
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|f
argument_list|,
name|names
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore the files not found since the dir list may have have changed
comment|// since the names[] list was generated.
block|}
block|}
if|if
condition|(
name|j
operator|==
name|names
operator|.
name|length
condition|)
block|{
return|return
name|results
return|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|results
argument_list|,
name|j
argument_list|)
return|;
block|}
comment|/**    * Creates the specified directory hierarchy. Does not    * treat existence as an error.    */
DECL|method|mkdirs (Path f)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mkdirs path arg is null"
argument_list|)
throw|;
block|}
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|File
name|p2f
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|File
name|parent2f
init|=
name|pathToFile
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent2f
operator|!=
literal|null
operator|&&
name|parent2f
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|parent2f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Parent path is not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|parent
operator|==
literal|null
operator|||
name|mkdirs
argument_list|(
name|parent
argument_list|)
operator|)
operator|&&
operator|(
name|p2f
operator|.
name|mkdir
argument_list|()
operator|||
name|p2f
operator|.
name|isDirectory
argument_list|()
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|mkdirs
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|setPermission
argument_list|(
name|f
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
DECL|method|primitiveMkdir (Path f, FsPermission absolutePermission)
specifier|protected
name|boolean
name|primitiveMkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|b
init|=
name|mkdirs
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|setPermission
argument_list|(
name|f
argument_list|,
name|absolutePermission
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
name|checkPath
argument_list|(
name|workingDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|getInitialWorkingDirectory ()
specifier|protected
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getStatus (Path p)
specifier|public
name|FsStatus
name|getStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|partition
init|=
name|pathToFile
argument_list|(
name|p
operator|==
literal|null
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
else|:
name|p
argument_list|)
decl_stmt|;
comment|//File provides getUsableSpace() and getFreeSpace()
comment|//File provides no API to obtain used space, assume used = total - free
return|return
operator|new
name|FsStatus
argument_list|(
name|partition
operator|.
name|getTotalSpace
argument_list|()
argument_list|,
name|partition
operator|.
name|getTotalSpace
argument_list|()
operator|-
name|partition
operator|.
name|getFreeSpace
argument_list|()
argument_list|,
name|partition
operator|.
name|getFreeSpace
argument_list|()
argument_list|)
return|;
block|}
comment|// In the case of the local filesystem, we can just rename the file.
DECL|method|moveFromLocalFile (Path src, Path dst)
specifier|public
name|void
name|moveFromLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|// We can write output directly to the final location
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fsOutputFile
return|;
block|}
comment|// It's in the right place - nothing to do.
DECL|method|completeLocalOutput (Path fsWorkingFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsWorkingFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{   }
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LocalFS"
return|;
block|}
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|path
init|=
name|pathToFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|RawLocalFileStatus
argument_list|(
name|pathToFile
argument_list|(
name|f
argument_list|)
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
DECL|class|RawLocalFileStatus
specifier|static
class|class
name|RawLocalFileStatus
extends|extends
name|FileStatus
block|{
comment|/* We can add extra fields here. It breaks at least CopyFiles.FilePair().      * We recognize if the information is already loaded by check if      * onwer.equals("").      */
DECL|method|isPermissionLoaded ()
specifier|private
name|boolean
name|isPermissionLoaded
parameter_list|()
block|{
return|return
operator|!
name|super
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|RawLocalFileStatus (File f, long defaultBlockSize, FileSystem fs)
name|RawLocalFileStatus
parameter_list|(
name|File
name|f
parameter_list|,
name|long
name|defaultBlockSize
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|f
operator|.
name|length
argument_list|()
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
name|defaultBlockSize
argument_list|,
name|f
operator|.
name|lastModified
argument_list|()
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermission ()
specifier|public
name|FsPermission
name|getPermission
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getPermission
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getOwner
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getGroup
argument_list|()
return|;
block|}
comment|/// loads permissions, owner, and group from `ls -ld`
DECL|method|loadPermissionInfo ()
specifier|private
name|void
name|loadPermissionInfo
parameter_list|()
block|{
name|IOException
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|execCommand
argument_list|(
operator|new
name|File
argument_list|(
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|Shell
operator|.
name|getGET_PERMISSION_COMMAND
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//expected format
comment|//-rw-------    1 username groupname ...
name|String
name|permission
init|=
name|t
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|length
argument_list|()
operator|>
literal|10
condition|)
block|{
comment|//files with ACLs might have a '+'
name|permission
operator|=
name|permission
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|setPermission
argument_list|(
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|setOwner
argument_list|(
name|t
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
name|t
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Shell
operator|.
name|ExitCodeException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|e
operator|=
name|ioe
expr_stmt|;
block|}
else|else
block|{
name|setPermission
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|e
operator|=
name|ioe
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while running command to get "
operator|+
literal|"file permissions : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isPermissionLoaded
argument_list|()
condition|)
block|{
name|loadPermissionInfo
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use the command chown to set owner.    */
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|groupname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"username == null&& groupname == null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|execCommand
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
argument_list|,
name|Shell
operator|.
name|SET_GROUP_COMMAND
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//OWNER[:[GROUP]]
name|String
name|s
init|=
name|username
operator|+
operator|(
name|groupname
operator|==
literal|null
condition|?
literal|""
else|:
literal|":"
operator|+
name|groupname
operator|)
decl_stmt|;
name|execCommand
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
argument_list|,
name|Shell
operator|.
name|SET_OWNER_COMMAND
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use the command chmod to set permission.    */
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|NativeIO
operator|.
name|chmod
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|execCommand
argument_list|(
name|pathToFile
argument_list|(
name|p
argument_list|)
argument_list|,
name|Shell
operator|.
name|SET_PERMISSION_COMMAND
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%05o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|execCommand (File f, String... cmd)
specifier|private
specifier|static
name|String
name|execCommand
parameter_list|(
name|File
name|f
parameter_list|,
name|String
modifier|...
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|cmd
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
literal|0
argument_list|,
name|cmd
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
index|[
name|cmd
operator|.
name|length
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|args
argument_list|)
decl_stmt|;
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

