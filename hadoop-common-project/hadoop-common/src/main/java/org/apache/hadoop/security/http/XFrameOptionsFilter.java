begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * This filter protects webapps from clickjacking attacks that  * are possible through use of Frames to embed the resources in another  * application and intercept clicks to accomplish nefarious things.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|XFrameOptionsFilter
specifier|public
class|class
name|XFrameOptionsFilter
implements|implements
name|Filter
block|{
DECL|field|X_FRAME_OPTIONS
specifier|public
specifier|static
specifier|final
name|String
name|X_FRAME_OPTIONS
init|=
literal|"X-Frame-Options"
decl_stmt|;
DECL|field|CUSTOM_HEADER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_HEADER_PARAM
init|=
literal|"xframe-options"
decl_stmt|;
DECL|field|option
specifier|private
name|String
name|option
init|=
literal|"DENY"
decl_stmt|;
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|doFilter (ServletRequest req, ServletResponse res, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
operator|(
operator|(
name|HttpServletResponse
operator|)
name|res
operator|)
operator|.
name|setHeader
argument_list|(
name|X_FRAME_OPTIONS
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
operator|new
name|XFrameOptionsResponseWrapper
argument_list|(
operator|(
name|HttpServletResponse
operator|)
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|customOption
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|CUSTOM_HEADER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|customOption
operator|!=
literal|null
condition|)
block|{
name|option
operator|=
name|customOption
expr_stmt|;
block|}
block|}
comment|/**    * Constructs a mapping of configuration properties to be used for filter    * initialization.  The mapping includes all properties that start with the    * specified configuration prefix.  Property names in the mapping are trimmed    * to remove the configuration prefix.    *    * @param conf configuration to read    * @param confPrefix configuration prefix    * @return mapping of configuration properties to be used for filter    *     initialization    */
DECL|method|getFilterParams (Configuration conf, String confPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilterParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confPrefix
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|confPrefix
argument_list|)
return|;
block|}
comment|/**    * This wrapper allows the rest of the filter pipeline to    * see the configured value when interrogating the response.    * It also blocks other filters from setting the value to    * anything other than what is configured.    *    */
DECL|class|XFrameOptionsResponseWrapper
specifier|public
class|class
name|XFrameOptionsResponseWrapper
extends|extends
name|HttpServletResponseWrapper
block|{
comment|/**      * Ctor to take wrap the provided response.      * @param response the response to wrap      */
DECL|method|XFrameOptionsResponseWrapper (HttpServletResponse response)
specifier|public
name|XFrameOptionsResponseWrapper
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|super
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addHeader (String name, String value)
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// don't allow additional values to be added along
comment|// with the configured options value
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setHeader (String name, String value)
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// don't allow overwriting of configured value
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDateHeader (String name, long date)
specifier|public
name|void
name|setDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|date
parameter_list|)
block|{
comment|// don't allow overwriting of configured value
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|setDateHeader
argument_list|(
name|name
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addDateHeader (String name, long date)
specifier|public
name|void
name|addDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|date
parameter_list|)
block|{
comment|// don't allow additional values to be added along
comment|// with the configured options value
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|addDateHeader
argument_list|(
name|name
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setIntHeader (String name, int value)
specifier|public
name|void
name|setIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
comment|// don't allow overwriting of configured value
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|setIntHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// don't allow additional values to be added along
comment|// with the configured options value
DECL|method|addIntHeader (String name, int value)
specifier|public
name|void
name|addIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
name|super
operator|.
name|addIntHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsHeader (String name)
specifier|public
name|boolean
name|containsHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|boolean
name|contains
init|=
literal|false
decl_stmt|;
comment|// allow the filterchain and subsequent
comment|// filters to see that the header is set
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
condition|)
block|{
return|return
operator|(
name|option
operator|!=
literal|null
operator|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|containsHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|contains
return|;
block|}
block|}
block|}
end_class

end_unit

