begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util.curator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|locks
operator|.
name|Reaper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|ThreadUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|ZKPaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * This is a copy of Curator 2.7.1's ChildReaper class, modified to work with  * Guava 11.0.2.  The problem is the 'paths' Collection, which calls Guava's  * Sets.newConcurrentHashSet(), which was added in Guava 15.0.  *<p>  * Utility to reap empty child nodes of a parent node. Periodically calls getChildren on  * the node and adds empty nodes to an internally managed {@link Reaper}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ChildReaper
specifier|public
class|class
name|ChildReaper
implements|implements
name|Closeable
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|reaper
specifier|private
specifier|final
name|Reaper
name|reaper
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|State
argument_list|>
name|state
init|=
operator|new
name|AtomicReference
argument_list|<
name|State
argument_list|>
argument_list|(
name|State
operator|.
name|LATENT
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|CuratorFramework
name|client
decl_stmt|;
DECL|field|paths
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newConcurrentHashSet
argument_list|()
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|Reaper
operator|.
name|Mode
name|mode
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|CloseableScheduledExecutorService
name|executor
decl_stmt|;
DECL|field|reapingThresholdMs
specifier|private
specifier|final
name|int
name|reapingThresholdMs
decl_stmt|;
DECL|field|task
specifier|private
specifier|volatile
name|Future
argument_list|<
name|?
argument_list|>
name|task
decl_stmt|;
comment|// This is copied from Curator's Reaper class
DECL|field|DEFAULT_REAPING_THRESHOLD_MS
specifier|static
specifier|final
name|int
name|DEFAULT_REAPING_THRESHOLD_MS
init|=
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
comment|// This is copied from Guava
comment|/**    * Creates a thread-safe set backed by a hash map. The set is backed by a    * {@link ConcurrentHashMap} instance, and thus carries the same concurrency    * guarantees.    *    *<p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be    * used as an element. The set is serializable.    *    * @return a new, empty thread-safe {@code Set}    * @since 15.0    */
DECL|method|newConcurrentHashSet ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|newConcurrentHashSet
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|E
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
DECL|enumConstant|LATENT
name|LATENT
block|,
DECL|enumConstant|STARTED
name|STARTED
block|,
DECL|enumConstant|CLOSED
name|CLOSED
block|}
comment|/**    * @param client the client    * @param path path to reap children from    * @param mode reaping mode    */
DECL|method|ChildReaper (CuratorFramework client, String path, Reaper.Mode mode)
specifier|public
name|ChildReaper
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Reaper
operator|.
name|Mode
name|mode
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
name|newExecutorService
argument_list|()
argument_list|,
name|DEFAULT_REAPING_THRESHOLD_MS
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param client the client    * @param path path to reap children from    * @param reapingThresholdMs threshold in milliseconds that determines that a path can be deleted    * @param mode reaping mode    */
DECL|method|ChildReaper (CuratorFramework client, String path, Reaper.Mode mode, int reapingThresholdMs)
specifier|public
name|ChildReaper
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Reaper
operator|.
name|Mode
name|mode
parameter_list|,
name|int
name|reapingThresholdMs
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
name|newExecutorService
argument_list|()
argument_list|,
name|reapingThresholdMs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param client the client    * @param path path to reap children from    * @param executor executor to use for background tasks    * @param reapingThresholdMs threshold in milliseconds that determines that a path can be deleted    * @param mode reaping mode    */
DECL|method|ChildReaper (CuratorFramework client, String path, Reaper.Mode mode, ScheduledExecutorService executor, int reapingThresholdMs)
specifier|public
name|ChildReaper
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Reaper
operator|.
name|Mode
name|mode
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|,
name|int
name|reapingThresholdMs
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
name|executor
argument_list|,
name|reapingThresholdMs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param client the client    * @param path path to reap children from    * @param executor executor to use for background tasks    * @param reapingThresholdMs threshold in milliseconds that determines that a path can be deleted    * @param mode reaping mode    * @param leaderPath if not null, uses a leader selection so that only 1 reaper is active in the cluster    */
DECL|method|ChildReaper (CuratorFramework client, String path, Reaper.Mode mode, ScheduledExecutorService executor, int reapingThresholdMs, String leaderPath)
specifier|public
name|ChildReaper
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Reaper
operator|.
name|Mode
name|mode
parameter_list|,
name|ScheduledExecutorService
name|executor
parameter_list|,
name|int
name|reapingThresholdMs
parameter_list|,
name|String
name|leaderPath
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|executor
operator|=
operator|new
name|CloseableScheduledExecutorService
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|reapingThresholdMs
operator|=
name|reapingThresholdMs
expr_stmt|;
name|this
operator|.
name|reaper
operator|=
operator|new
name|Reaper
argument_list|(
name|client
argument_list|,
name|executor
argument_list|,
name|reapingThresholdMs
argument_list|,
name|leaderPath
argument_list|)
expr_stmt|;
name|addPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**    * The reaper must be started    *    * @throws Exception errors    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|LATENT
argument_list|,
name|State
operator|.
name|STARTED
argument_list|)
argument_list|,
literal|"Cannot be started more than once"
argument_list|)
expr_stmt|;
name|task
operator|=
name|executor
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doWork
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|reapingThresholdMs
argument_list|,
name|reapingThresholdMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|compareAndSet
argument_list|(
name|State
operator|.
name|STARTED
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
condition|)
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|reaper
argument_list|)
expr_stmt|;
name|task
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a path to reap children from    *    * @param path the path    * @return this for chaining    */
DECL|method|addPath (String path)
specifier|public
name|ChildReaper
name|addPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|PathUtils
operator|.
name|validatePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Remove a path from reaping    *    * @param path the path    * @return true if the path existed and was removed    */
DECL|method|removePath (String path)
specifier|public
name|boolean
name|removePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|paths
operator|.
name|remove
argument_list|(
name|PathUtils
operator|.
name|validatePath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newExecutorService ()
specifier|private
specifier|static
name|ScheduledExecutorService
name|newExecutorService
parameter_list|()
block|{
return|return
name|ThreadUtils
operator|.
name|newFixedThreadScheduledPool
argument_list|(
literal|2
argument_list|,
literal|"ChildReaper"
argument_list|)
return|;
block|}
DECL|method|doWork ()
specifier|private
name|void
name|doWork
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|client
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|children
control|)
block|{
name|String
name|thisPath
init|=
name|ZKPaths
operator|.
name|makePath
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|thisPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|stat
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|stat
operator|.
name|getNumChildren
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|reaper
operator|.
name|addPath
argument_list|(
name|thisPath
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not get children for path: "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

