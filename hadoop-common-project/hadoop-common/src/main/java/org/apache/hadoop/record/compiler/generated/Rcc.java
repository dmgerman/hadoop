begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. Rcc.java */
end_comment

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler.generated
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Rcc
specifier|public
class|class
name|Rcc
implements|implements
name|RccConstants
block|{
DECL|field|language
specifier|private
specifier|static
name|String
name|language
init|=
literal|"java"
decl_stmt|;
DECL|field|destDir
specifier|private
specifier|static
name|String
name|destDir
init|=
literal|"."
decl_stmt|;
DECL|field|recFiles
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|recFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|cmdargs
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cmdargs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|curFile
specifier|private
specifier|static
name|JFile
name|curFile
decl_stmt|;
DECL|field|recTab
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|String
argument_list|,
name|JRecord
argument_list|>
name|recTab
decl_stmt|;
DECL|field|curDir
specifier|private
specifier|static
name|String
name|curDir
init|=
literal|"."
decl_stmt|;
DECL|field|curFileName
specifier|private
specifier|static
name|String
name|curFileName
decl_stmt|;
DECL|field|curModuleName
specifier|private
specifier|static
name|String
name|curModuleName
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|driver
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|usage ()
specifier|public
specifier|static
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: rcc --language [java|c++] ddl-files"
argument_list|)
expr_stmt|;
block|}
DECL|method|driver (String[] args)
specifier|public
specifier|static
name|int
name|driver
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-l"
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
operator|||
literal|"--language"
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|language
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-d"
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
operator|||
literal|"--destdir"
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|destDir
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|arg
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|cmdargs
operator|.
name|add
argument_list|(
name|arg
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recFiles
operator|.
name|add
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recFiles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|curFileName
operator|=
name|recFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|curFileName
argument_list|)
decl_stmt|;
try|try
block|{
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Rcc
name|parser
init|=
operator|new
name|Rcc
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
name|recTab
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|JRecord
argument_list|>
argument_list|()
expr_stmt|;
name|curFile
operator|=
name|parser
operator|.
name|Input
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"File "
operator|+
name|recFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" Not found."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
block|{
name|int
name|retCode
init|=
name|curFile
operator|.
name|genCode
argument_list|(
name|language
argument_list|,
name|destDir
argument_list|,
name|cmdargs
argument_list|)
decl_stmt|;
if|if
condition|(
name|retCode
operator|!=
literal|0
condition|)
block|{
return|return
name|retCode
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|Input ()
specifier|final
specifier|public
name|JFile
name|Input
parameter_list|()
throws|throws
name|ParseException
block|{
name|ArrayList
argument_list|<
name|JFile
argument_list|>
name|ilist
init|=
operator|new
name|ArrayList
argument_list|<
name|JFile
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|rlist
init|=
operator|new
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
argument_list|()
decl_stmt|;
name|JFile
name|i
decl_stmt|;
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|l
decl_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|INCLUDE_TKN
case|:
name|i
operator|=
name|Include
argument_list|()
expr_stmt|;
name|ilist
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|MODULE_TKN
case|:
name|l
operator|=
name|Module
argument_list|()
expr_stmt|;
name|rlist
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MODULE_TKN
case|:
case|case
name|INCLUDE_TKN
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
block|}
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JFile
argument_list|(
name|curFileName
argument_list|,
name|ilist
argument_list|,
name|rlist
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Include ()
specifier|final
specifier|public
name|JFile
name|Include
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|fname
decl_stmt|;
name|Token
name|t
decl_stmt|;
name|jj_consume_token
argument_list|(
name|INCLUDE_TKN
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|CSTRING_TKN
argument_list|)
expr_stmt|;
name|JFile
name|ret
init|=
literal|null
decl_stmt|;
name|fname
operator|=
name|t
operator|.
name|image
operator|.
name|replaceAll
argument_list|(
literal|"^\""
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\"$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|curDir
argument_list|,
name|fname
argument_list|)
decl_stmt|;
name|String
name|tmpDir
init|=
name|curDir
decl_stmt|;
name|String
name|tmpFile
init|=
name|curFileName
decl_stmt|;
name|curDir
operator|=
name|file
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|curFileName
operator|=
name|file
operator|.
name|getName
argument_list|()
expr_stmt|;
try|try
block|{
name|FileReader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Rcc
name|parser
init|=
operator|new
name|Rcc
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|parser
operator|.
name|Input
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fname
operator|+
literal|" Parsed Successfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File "
operator|+
name|fname
operator|+
literal|" Not found."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|curDir
operator|=
name|tmpDir
expr_stmt|;
name|curFileName
operator|=
name|tmpFile
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Module ()
specifier|final
specifier|public
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|Module
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|mName
decl_stmt|;
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|rlist
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MODULE_TKN
argument_list|)
expr_stmt|;
name|mName
operator|=
name|ModuleName
argument_list|()
expr_stmt|;
name|curModuleName
operator|=
name|mName
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACE_TKN
argument_list|)
expr_stmt|;
name|rlist
operator|=
name|RecordList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RBRACE_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|rlist
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|ModuleName ()
specifier|final
specifier|public
name|String
name|ModuleName
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENT_TKN
argument_list|)
expr_stmt|;
name|name
operator|+=
name|t
operator|.
name|image
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOT_TKN
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
name|DOT_TKN
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENT_TKN
argument_list|)
expr_stmt|;
name|name
operator|+=
literal|"."
operator|+
name|t
operator|.
name|image
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|name
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|RecordList ()
specifier|final
specifier|public
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|RecordList
parameter_list|()
throws|throws
name|ParseException
block|{
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|rlist
init|=
operator|new
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
argument_list|()
decl_stmt|;
name|JRecord
name|r
decl_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|Record
argument_list|()
expr_stmt|;
name|rlist
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RECORD_TKN
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|rlist
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Record ()
specifier|final
specifier|public
name|JRecord
name|Record
parameter_list|()
throws|throws
name|ParseException
block|{
name|String
name|rname
decl_stmt|;
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|flist
init|=
operator|new
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Token
name|t
decl_stmt|;
name|JField
argument_list|<
name|JType
argument_list|>
name|f
decl_stmt|;
name|jj_consume_token
argument_list|(
name|RECORD_TKN
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENT_TKN
argument_list|)
expr_stmt|;
name|rname
operator|=
name|t
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACE_TKN
argument_list|)
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|f
operator|=
name|Field
argument_list|()
expr_stmt|;
name|flist
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|SEMICOLON_TKN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|BYTE_TKN
case|:
case|case
name|BOOLEAN_TKN
case|:
case|case
name|INT_TKN
case|:
case|case
name|LONG_TKN
case|:
case|case
name|FLOAT_TKN
case|:
case|case
name|DOUBLE_TKN
case|:
case|case
name|USTRING_TKN
case|:
case|case
name|BUFFER_TKN
case|:
case|case
name|VECTOR_TKN
case|:
case|case
name|MAP_TKN
case|:
case|case
name|IDENT_TKN
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|RBRACE_TKN
argument_list|)
expr_stmt|;
name|String
name|fqn
init|=
name|curModuleName
operator|+
literal|"."
operator|+
name|rname
decl_stmt|;
name|JRecord
name|r
init|=
operator|new
name|JRecord
argument_list|(
name|fqn
argument_list|,
name|flist
argument_list|)
decl_stmt|;
name|recTab
operator|.
name|put
argument_list|(
name|fqn
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|r
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Field ()
specifier|final
specifier|public
name|JField
argument_list|<
name|JType
argument_list|>
name|Field
parameter_list|()
throws|throws
name|ParseException
block|{
name|JType
name|jt
decl_stmt|;
name|Token
name|t
decl_stmt|;
name|jt
operator|=
name|Type
argument_list|()
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENT_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|(
name|t
operator|.
name|image
argument_list|,
name|jt
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Type ()
specifier|final
specifier|public
name|JType
name|Type
parameter_list|()
throws|throws
name|ParseException
block|{
name|JType
name|jt
decl_stmt|;
name|Token
name|t
decl_stmt|;
name|String
name|rname
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|MAP_TKN
case|:
name|jt
operator|=
name|Map
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|jt
return|;
block|}
break|break;
case|case
name|VECTOR_TKN
case|:
name|jt
operator|=
name|Vector
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|jt
return|;
block|}
break|break;
case|case
name|BYTE_TKN
case|:
name|jj_consume_token
argument_list|(
name|BYTE_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JByte
argument_list|()
return|;
block|}
break|break;
case|case
name|BOOLEAN_TKN
case|:
name|jj_consume_token
argument_list|(
name|BOOLEAN_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JBoolean
argument_list|()
return|;
block|}
break|break;
case|case
name|INT_TKN
case|:
name|jj_consume_token
argument_list|(
name|INT_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JInt
argument_list|()
return|;
block|}
break|break;
case|case
name|LONG_TKN
case|:
name|jj_consume_token
argument_list|(
name|LONG_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JLong
argument_list|()
return|;
block|}
break|break;
case|case
name|FLOAT_TKN
case|:
name|jj_consume_token
argument_list|(
name|FLOAT_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JFloat
argument_list|()
return|;
block|}
break|break;
case|case
name|DOUBLE_TKN
case|:
name|jj_consume_token
argument_list|(
name|DOUBLE_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JDouble
argument_list|()
return|;
block|}
break|break;
case|case
name|USTRING_TKN
case|:
name|jj_consume_token
argument_list|(
name|USTRING_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JString
argument_list|()
return|;
block|}
break|break;
case|case
name|BUFFER_TKN
case|:
name|jj_consume_token
argument_list|(
name|BUFFER_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JBuffer
argument_list|()
return|;
block|}
break|break;
case|case
name|IDENT_TKN
case|:
name|rname
operator|=
name|ModuleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|rname
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
literal|0
argument_list|)
operator|<
literal|0
condition|)
block|{
name|rname
operator|=
name|curModuleName
operator|+
literal|"."
operator|+
name|rname
expr_stmt|;
block|}
name|JRecord
name|r
init|=
name|recTab
operator|.
name|get
argument_list|(
name|rname
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Type "
operator|+
name|rname
operator|+
literal|" not known. Exiting."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|r
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Map ()
specifier|final
specifier|public
name|JMap
name|Map
parameter_list|()
throws|throws
name|ParseException
block|{
name|JType
name|jt1
decl_stmt|;
name|JType
name|jt2
decl_stmt|;
name|jj_consume_token
argument_list|(
name|MAP_TKN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LT_TKN
argument_list|)
expr_stmt|;
name|jt1
operator|=
name|Type
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COMMA_TKN
argument_list|)
expr_stmt|;
name|jt2
operator|=
name|Type
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|GT_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JMap
argument_list|(
name|jt1
argument_list|,
name|jt2
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Vector ()
specifier|final
specifier|public
name|JVector
name|Vector
parameter_list|()
throws|throws
name|ParseException
block|{
name|JType
name|jt
decl_stmt|;
name|jj_consume_token
argument_list|(
name|VECTOR_TKN
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LT_TKN
argument_list|)
expr_stmt|;
name|jt
operator|=
name|Type
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|GT_TKN
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|new
name|JVector
argument_list|(
name|jt
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|field|token_source
specifier|public
name|RccTokenManager
name|token_source
decl_stmt|;
DECL|field|jj_input_stream
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
DECL|field|token
DECL|field|jj_nt
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|6
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
DECL|field|jj_la1_1
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_0
argument_list|()
expr_stmt|;
name|jj_la1_1
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_0 ()
specifier|private
specifier|static
name|void
name|jj_la1_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x2800
block|,
literal|0x2800
block|,
literal|0x40000000
block|,
literal|0x1000
block|,
literal|0xffc000
block|,
literal|0xffc000
block|,}
expr_stmt|;
block|}
DECL|method|jj_la1_1 ()
specifier|private
specifier|static
name|void
name|jj_la1_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x1
block|,}
expr_stmt|;
block|}
DECL|method|Rcc (java.io.InputStream stream)
specifier|public
name|Rcc
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Rcc (java.io.InputStream stream, String encoding)
specifier|public
name|Rcc
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|RccTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|ReInit (java.io.InputStream stream)
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ReInit (java.io.InputStream stream, String encoding)
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|Rcc (java.io.Reader stream)
specifier|public
name|Rcc
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|RccTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|ReInit (java.io.Reader stream)
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|Rcc (RccTokenManager tm)
specifier|public
name|Rcc
parameter_list|(
name|RccTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|ReInit (RccTokenManager tm)
specifier|public
name|void
name|ReInit
parameter_list|(
name|RccTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|jj_consume_token (int kind)
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|method|getNextToken ()
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
DECL|method|getToken (int index)
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk ()
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|generateParseException ()
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|33
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
DECL|method|enable_tracing ()
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
DECL|method|disable_tracing ()
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

