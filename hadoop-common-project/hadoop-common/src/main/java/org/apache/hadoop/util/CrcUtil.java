begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * This class provides utilities for working with CRCs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Common"
block|,
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"Yarn"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CrcUtil
specifier|public
specifier|final
class|class
name|CrcUtil
block|{
DECL|field|MULTIPLICATIVE_IDENTITY
specifier|public
specifier|static
specifier|final
name|int
name|MULTIPLICATIVE_IDENTITY
init|=
literal|0x80000000
decl_stmt|;
DECL|field|GZIP_POLYNOMIAL
specifier|public
specifier|static
specifier|final
name|int
name|GZIP_POLYNOMIAL
init|=
literal|0xEDB88320
decl_stmt|;
DECL|field|CASTAGNOLI_POLYNOMIAL
specifier|public
specifier|static
specifier|final
name|int
name|CASTAGNOLI_POLYNOMIAL
init|=
literal|0x82F63B78
decl_stmt|;
comment|/**    * Hide default constructor for a static utils class.    */
DECL|method|CrcUtil ()
specifier|private
name|CrcUtil
parameter_list|()
block|{   }
comment|/**    * Compute x^({@code lengthBytes} * 8) mod {@code mod}, where {@code mod} is    * in "reversed" (little-endian) format such that {@code mod& 1} represents    * x^31 and has an implicit term x^32.    */
DECL|method|getMonomial (long lengthBytes, int mod)
specifier|public
specifier|static
name|int
name|getMonomial
parameter_list|(
name|long
name|lengthBytes
parameter_list|,
name|int
name|mod
parameter_list|)
block|{
if|if
condition|(
name|lengthBytes
operator|==
literal|0
condition|)
block|{
return|return
name|MULTIPLICATIVE_IDENTITY
return|;
block|}
elseif|else
if|if
condition|(
name|lengthBytes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"lengthBytes must be positive, got "
operator|+
name|lengthBytes
argument_list|)
throw|;
block|}
comment|// Decompose into
comment|// x^degree == x ^ SUM(bit[i] * 2^i) == PRODUCT(x ^ (bit[i] * 2^i))
comment|// Generate each x^(2^i) by squaring.
comment|// Since 'degree' is in 'bits', but we only need to support byte
comment|// granularity we can begin with x^8.
name|int
name|multiplier
init|=
name|MULTIPLICATIVE_IDENTITY
operator|>>>
literal|8
decl_stmt|;
name|int
name|product
init|=
name|MULTIPLICATIVE_IDENTITY
decl_stmt|;
name|long
name|degree
init|=
name|lengthBytes
decl_stmt|;
while|while
condition|(
name|degree
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|degree
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|product
operator|=
operator|(
name|product
operator|==
name|MULTIPLICATIVE_IDENTITY
operator|)
condition|?
name|multiplier
else|:
name|galoisFieldMultiply
argument_list|(
name|product
argument_list|,
name|multiplier
argument_list|,
name|mod
argument_list|)
expr_stmt|;
block|}
name|multiplier
operator|=
name|galoisFieldMultiply
argument_list|(
name|multiplier
argument_list|,
name|multiplier
argument_list|,
name|mod
argument_list|)
expr_stmt|;
name|degree
operator|>>=
literal|1
expr_stmt|;
block|}
return|return
name|product
return|;
block|}
comment|/**    * @param monomial Precomputed x^(lengthBInBytes * 8) mod {@code mod}    */
DECL|method|composeWithMonomial ( int crcA, int crcB, int monomial, int mod)
specifier|public
specifier|static
name|int
name|composeWithMonomial
parameter_list|(
name|int
name|crcA
parameter_list|,
name|int
name|crcB
parameter_list|,
name|int
name|monomial
parameter_list|,
name|int
name|mod
parameter_list|)
block|{
return|return
name|galoisFieldMultiply
argument_list|(
name|crcA
argument_list|,
name|monomial
argument_list|,
name|mod
argument_list|)
operator|^
name|crcB
return|;
block|}
comment|/**    * @param lengthB length of content corresponding to {@code crcB}, in bytes.    */
DECL|method|compose (int crcA, int crcB, long lengthB, int mod)
specifier|public
specifier|static
name|int
name|compose
parameter_list|(
name|int
name|crcA
parameter_list|,
name|int
name|crcB
parameter_list|,
name|long
name|lengthB
parameter_list|,
name|int
name|mod
parameter_list|)
block|{
name|int
name|monomial
init|=
name|getMonomial
argument_list|(
name|lengthB
argument_list|,
name|mod
argument_list|)
decl_stmt|;
return|return
name|composeWithMonomial
argument_list|(
name|crcA
argument_list|,
name|crcB
argument_list|,
name|monomial
argument_list|,
name|mod
argument_list|)
return|;
block|}
comment|/**    * @return 4-byte array holding the big-endian representation of    *     {@code value}.    */
DECL|method|intToBytes (int value)
specifier|public
specifier|static
name|byte
index|[]
name|intToBytes
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
try|try
block|{
name|writeInt
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Since this should only be able to occur from code bugs within this
comment|// class rather than user input, we throw as a RuntimeException
comment|// rather than requiring this method to declare throwing IOException
comment|// for something the caller can't control.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|buf
return|;
block|}
comment|/**    * Writes big-endian representation of {@code value} into {@code buf}    * starting at {@code offset}. buf.length must be greater than or    * equal to offset + 4.    */
DECL|method|writeInt (byte[] buf, int offset, int value)
specifier|public
specifier|static
name|void
name|writeInt
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|buf
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"writeInt out of bounds: buf.length=%d, offset=%d"
argument_list|,
name|buf
operator|.
name|length
argument_list|,
name|offset
argument_list|)
argument_list|)
throw|;
block|}
name|buf
index|[
name|offset
operator|+
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads 4-byte big-endian int value from {@code buf} starting at    * {@code offset}. buf.length must be greater than or equal to offset + 4.    */
DECL|method|readInt (byte[] buf, int offset)
specifier|public
specifier|static
name|int
name|readInt
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|buf
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"readInt out of bounds: buf.length=%d, offset=%d"
argument_list|,
name|buf
operator|.
name|length
argument_list|,
name|offset
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|value
init|=
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|0
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|buf
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|)
decl_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * For use with debug statements; verifies bytes.length on creation,    * expecting it to represent exactly one CRC, and returns a hex    * formatted value.    */
DECL|method|toSingleCrcString (final byte[] bytes)
specifier|public
specifier|static
name|String
name|toSingleCrcString
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected byte[] length '%d' for single CRC. Contents: %s"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|)
argument_list|)
throw|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|readInt
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * For use with debug statements; verifies bytes.length on creation,    * expecting it to be divisible by CRC byte size, and returns a list of    * hex formatted values.    */
DECL|method|toMultiCrcString (final byte[] bytes)
specifier|public
specifier|static
name|String
name|toMultiCrcString
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|%
literal|4
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected byte[] length '%d' not divisible by 4. Contents: %s"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|)
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|readInt
argument_list|(
name|bytes
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|bytes
operator|.
name|length
operator|-
literal|4
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Galois field multiplication of {@code p} and {@code q} with the    * generator polynomial {@code m} as the modulus.    *    * @param m The little-endian polynomial to use as the modulus when    *     multiplying p and q, with implicit "1" bit beyond the bottom bit.    */
DECL|method|galoisFieldMultiply (int p, int q, int m)
specifier|private
specifier|static
name|int
name|galoisFieldMultiply
parameter_list|(
name|int
name|p
parameter_list|,
name|int
name|q
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|int
name|summation
init|=
literal|0
decl_stmt|;
comment|// Top bit is the x^0 place; each right-shift increments the degree of the
comment|// current term.
name|int
name|curTerm
init|=
name|MULTIPLICATIVE_IDENTITY
decl_stmt|;
comment|// Iteratively multiply p by x mod m as we go to represent the q[i] term
comment|// (of degree x^i) times p.
name|int
name|px
init|=
name|p
decl_stmt|;
while|while
condition|(
name|curTerm
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|q
operator|&
name|curTerm
operator|)
operator|!=
literal|0
condition|)
block|{
name|summation
operator|^=
name|px
expr_stmt|;
block|}
comment|// Bottom bit represents highest degree since we're little-endian; before
comment|// we multiply by "x" for the next term, check bottom bit to know whether
comment|// the resulting px will thus have a term matching the implicit "1" term
comment|// of "m" and thus will need to subtract "m" after mutiplying by "x".
name|boolean
name|hasMaxDegree
init|=
operator|(
operator|(
name|px
operator|&
literal|1
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|px
operator|>>>=
literal|1
expr_stmt|;
if|if
condition|(
name|hasMaxDegree
condition|)
block|{
name|px
operator|^=
name|m
expr_stmt|;
block|}
name|curTerm
operator|>>>=
literal|1
expr_stmt|;
block|}
return|return
name|summation
return|;
block|}
block|}
end_class

end_unit

