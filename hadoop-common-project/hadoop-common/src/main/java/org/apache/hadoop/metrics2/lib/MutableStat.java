begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|SampleStat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A mutable metric with stats.  *  * Useful for keeping throughput/latency stats.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MutableStat
specifier|public
class|class
name|MutableStat
extends|extends
name|MutableMetric
block|{
DECL|field|numInfo
specifier|private
specifier|final
name|MetricsInfo
name|numInfo
decl_stmt|;
DECL|field|avgInfo
specifier|private
specifier|final
name|MetricsInfo
name|avgInfo
decl_stmt|;
DECL|field|stdevInfo
specifier|private
specifier|final
name|MetricsInfo
name|stdevInfo
decl_stmt|;
DECL|field|iMinInfo
specifier|private
specifier|final
name|MetricsInfo
name|iMinInfo
decl_stmt|;
DECL|field|iMaxInfo
specifier|private
specifier|final
name|MetricsInfo
name|iMaxInfo
decl_stmt|;
DECL|field|minInfo
specifier|private
specifier|final
name|MetricsInfo
name|minInfo
decl_stmt|;
DECL|field|maxInfo
specifier|private
specifier|final
name|MetricsInfo
name|maxInfo
decl_stmt|;
DECL|field|iNumInfo
specifier|private
specifier|final
name|MetricsInfo
name|iNumInfo
decl_stmt|;
DECL|field|intervalStat
specifier|private
specifier|final
name|SampleStat
name|intervalStat
init|=
operator|new
name|SampleStat
argument_list|()
decl_stmt|;
DECL|field|prevStat
specifier|private
specifier|final
name|SampleStat
name|prevStat
init|=
operator|new
name|SampleStat
argument_list|()
decl_stmt|;
DECL|field|minMax
specifier|private
specifier|final
name|SampleStat
operator|.
name|MinMax
name|minMax
init|=
operator|new
name|SampleStat
operator|.
name|MinMax
argument_list|()
decl_stmt|;
DECL|field|numSamples
specifier|private
name|long
name|numSamples
init|=
literal|0
decl_stmt|;
DECL|field|extended
specifier|private
name|boolean
name|extended
init|=
literal|false
decl_stmt|;
comment|/**    * Construct a sample statistics metric    * @param name        of the metric    * @param description of the metric    * @param sampleName  of the metric (e.g. "Ops")    * @param valueName   of the metric (e.g. "Time", "Latency")    * @param extended    create extended stats (stdev, min/max etc.) by default.    */
DECL|method|MutableStat (String name, String description, String sampleName, String valueName, boolean extended)
specifier|public
name|MutableStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|,
name|boolean
name|extended
parameter_list|)
block|{
name|String
name|ucName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|usName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|sampleName
argument_list|)
decl_stmt|;
name|String
name|uvName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|String
name|lsName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|sampleName
argument_list|)
decl_stmt|;
name|String
name|lvName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|numInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Num"
operator|+
name|usName
argument_list|,
literal|"Number of "
operator|+
name|lsName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|iNumInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"INum"
operator|+
name|usName
argument_list|,
literal|"Interval number of "
operator|+
name|lsName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|avgInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Avg"
operator|+
name|uvName
argument_list|,
literal|"Average "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|stdevInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Stdev"
operator|+
name|uvName
argument_list|,
literal|"Standard deviation of "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|iMinInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"IMin"
operator|+
name|uvName
argument_list|,
literal|"Interval min "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|iMaxInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"IMax"
operator|+
name|uvName
argument_list|,
literal|"Interval max "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|minInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Min"
operator|+
name|uvName
argument_list|,
literal|"Min "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|maxInfo
operator|=
name|info
argument_list|(
name|ucName
operator|+
literal|"Max"
operator|+
name|uvName
argument_list|,
literal|"Max "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
name|desc
argument_list|)
expr_stmt|;
name|this
operator|.
name|extended
operator|=
name|extended
expr_stmt|;
block|}
comment|/**    * Construct a snapshot stat metric with extended stat off by default    * @param name        of the metric    * @param description of the metric    * @param sampleName  of the metric (e.g. "Ops")    * @param valueName   of the metric (e.g. "Time", "Latency")    */
DECL|method|MutableStat (String name, String description, String sampleName, String valueName)
specifier|public
name|MutableStat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|sampleName
parameter_list|,
name|String
name|valueName
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|sampleName
argument_list|,
name|valueName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set whether to display the extended stats (stdev, min/max etc.) or not    * @param extended enable/disable displaying extended stats    */
DECL|method|setExtended (boolean extended)
specifier|public
specifier|synchronized
name|void
name|setExtended
parameter_list|(
name|boolean
name|extended
parameter_list|)
block|{
name|this
operator|.
name|extended
operator|=
name|extended
expr_stmt|;
block|}
comment|/**    * Add a number of samples and their sum to the running stat    *    * Note that although use of this method will preserve accurate mean values,    * large values for numSamples may result in inaccurate variance values due    * to the use of a single step of the Welford method for variance calculation.    * @param numSamples  number of samples    * @param sum of the samples    */
DECL|method|add (long numSamples, long sum)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|long
name|numSamples
parameter_list|,
name|long
name|sum
parameter_list|)
block|{
name|intervalStat
operator|.
name|add
argument_list|(
name|numSamples
argument_list|,
name|sum
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add a snapshot to the metric    * @param value of the metric    */
DECL|method|add (long value)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|intervalStat
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|minMax
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshot (MetricsRecordBuilder builder, boolean all)
specifier|public
specifier|synchronized
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
name|numSamples
operator|+=
name|intervalStat
operator|.
name|numSamples
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addCounter
argument_list|(
name|numInfo
argument_list|,
name|numSamples
argument_list|)
operator|.
name|addGauge
argument_list|(
name|avgInfo
argument_list|,
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extended
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|stdevInfo
argument_list|,
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|iMinInfo
argument_list|,
name|lastStat
argument_list|()
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|iMaxInfo
argument_list|,
name|lastStat
argument_list|()
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|minInfo
argument_list|,
name|minMax
operator|.
name|min
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|maxInfo
argument_list|,
name|minMax
operator|.
name|max
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|iNumInfo
argument_list|,
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
argument_list|()
condition|)
block|{
if|if
condition|(
name|numSamples
operator|>
literal|0
condition|)
block|{
name|intervalStat
operator|.
name|copyTo
argument_list|(
name|prevStat
argument_list|)
expr_stmt|;
name|intervalStat
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|clearChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return a SampleStat object that supports    * calls like StdDev and Mean.    * @return SampleStat    */
DECL|method|lastStat ()
specifier|public
name|SampleStat
name|lastStat
parameter_list|()
block|{
return|return
name|changed
argument_list|()
condition|?
name|intervalStat
else|:
name|prevStat
return|;
block|}
comment|/**    * Reset the all time min max of the metric    */
DECL|method|resetMinMax ()
specifier|public
name|void
name|resetMinMax
parameter_list|()
block|{
name|minMax
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|lastStat
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

