begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Used to registry custom methods to refresh at runtime.  * Each identifier maps to one or more RefreshHandlers.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RefreshRegistry
specifier|public
class|class
name|RefreshRegistry
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RefreshRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Used to hold singleton instance
DECL|class|RegistryHolder
specifier|private
specifier|static
class|class
name|RegistryHolder
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"All"
argument_list|)
DECL|field|registry
specifier|public
specifier|static
name|RefreshRegistry
name|registry
init|=
operator|new
name|RefreshRegistry
argument_list|()
decl_stmt|;
block|}
comment|// Singleton access
DECL|method|defaultRegistry ()
specifier|public
specifier|static
name|RefreshRegistry
name|defaultRegistry
parameter_list|()
block|{
return|return
name|RegistryHolder
operator|.
name|registry
return|;
block|}
DECL|field|handlerTable
specifier|private
specifier|final
name|Multimap
argument_list|<
name|String
argument_list|,
name|RefreshHandler
argument_list|>
name|handlerTable
decl_stmt|;
DECL|method|RefreshRegistry ()
specifier|public
name|RefreshRegistry
parameter_list|()
block|{
name|handlerTable
operator|=
name|HashMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**    * Registers an object as a handler for a given identity.    * Note: will prevent handler from being GC'd, object should unregister itself    *  when done    * @param identifier a unique identifier for this resource,    *                   such as org.apache.hadoop.blacklist    * @param handler the object to register    */
DECL|method|register (String identifier, RefreshHandler handler)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|String
name|identifier
parameter_list|,
name|RefreshHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|identifier
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Identifier cannot be null"
argument_list|)
throw|;
block|}
name|handlerTable
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the registered object for a given identity.    * @param identifier the resource to unregister    * @return the true if removed    */
DECL|method|unregister (String identifier, RefreshHandler handler)
specifier|public
specifier|synchronized
name|boolean
name|unregister
parameter_list|(
name|String
name|identifier
parameter_list|,
name|RefreshHandler
name|handler
parameter_list|)
block|{
return|return
name|handlerTable
operator|.
name|remove
argument_list|(
name|identifier
argument_list|,
name|handler
argument_list|)
return|;
block|}
DECL|method|unregisterAll (String identifier)
specifier|public
specifier|synchronized
name|void
name|unregisterAll
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|handlerTable
operator|.
name|removeAll
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lookup the responsible handler and return its result.    * This should be called by the RPC server when it gets a refresh request.    * @param identifier the resource to refresh    * @param args the arguments to pass on, not including the program name    * @throws IllegalArgumentException on invalid identifier    * @return the response from the appropriate handler    */
DECL|method|dispatch (String identifier, String[] args)
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|RefreshResponse
argument_list|>
name|dispatch
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|Collection
argument_list|<
name|RefreshHandler
argument_list|>
name|handlers
init|=
name|handlerTable
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Identifier '"
operator|+
name|identifier
operator|+
literal|"' does not exist in RefreshRegistry. Valid options are: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|", "
argument_list|)
operator|.
name|join
argument_list|(
name|handlerTable
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|RefreshResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<
name|RefreshResponse
argument_list|>
argument_list|(
name|handlers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Dispatch to each handler and store response
for|for
control|(
name|RefreshHandler
name|handler
range|:
name|handlers
control|)
block|{
name|RefreshResponse
name|response
decl_stmt|;
comment|// Run the handler
try|try
block|{
name|response
operator|=
name|handler
operator|.
name|handleRefresh
argument_list|(
name|identifier
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Handler returned null."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|handlerName
argument_list|(
name|handler
argument_list|)
operator|+
literal|" responds to '"
operator|+
name|identifier
operator|+
literal|"', says: '"
operator|+
name|response
operator|.
name|getMessage
argument_list|()
operator|+
literal|"', returns "
operator|+
name|response
operator|.
name|getReturnCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|response
operator|=
operator|new
name|RefreshResponse
argument_list|(
operator|-
literal|1
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setSenderName
argument_list|(
name|handlerName
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|responses
return|;
block|}
DECL|method|handlerName (RefreshHandler h)
specifier|private
name|String
name|handlerName
parameter_list|(
name|RefreshHandler
name|h
parameter_list|)
block|{
return|return
name|h
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'@'
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|h
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

