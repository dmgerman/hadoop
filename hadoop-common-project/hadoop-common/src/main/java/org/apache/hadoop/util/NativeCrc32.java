begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_comment
comment|/**  * Wrapper around JNI support code to do checksum computation  * natively.  */
end_comment

begin_class
DECL|class|NativeCrc32
class|class
name|NativeCrc32
block|{
comment|/**    * Return true if the JNI-based native CRC extensions are available.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
return|;
block|}
comment|/**    * Verify the given buffers of data and checksums, and throw an exception    * if any checksum is invalid. The buffers given to this function should    * have their position initially at the start of the data, and their limit    * set at the end of the data. The position, limit, and mark are not    * modified.    *     * @param bytesPerSum the chunk size (eg 512 bytes)    * @param checksumType the DataChecksum type constant    * @param sums the DirectByteBuffer pointing at the beginning of the    *             stored checksums    * @param data the DirectByteBuffer pointing at the beginning of the    *             data to check    * @param basePos the position in the file where the data buffer starts     * @param fileName the name of the file being verified    * @throws ChecksumException if there is an invalid checksum    */
DECL|method|verifyChunkedSums (int bytesPerSum, int checksumType, ByteBuffer sums, ByteBuffer data, String fileName, long basePos)
specifier|public
specifier|static
name|void
name|verifyChunkedSums
parameter_list|(
name|int
name|bytesPerSum
parameter_list|,
name|int
name|checksumType
parameter_list|,
name|ByteBuffer
name|sums
parameter_list|,
name|ByteBuffer
name|data
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|basePos
parameter_list|)
throws|throws
name|ChecksumException
block|{
name|nativeVerifyChunkedSums
argument_list|(
name|bytesPerSum
argument_list|,
name|checksumType
argument_list|,
name|sums
argument_list|,
name|sums
operator|.
name|position
argument_list|()
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|position
argument_list|()
argument_list|,
name|data
operator|.
name|remaining
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|basePos
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyChunkedSumsByteArray (int bytesPerSum, int checksumType, byte[] sums, int sumsOffset, byte[] data, int dataOffset, int dataLength, String fileName, long basePos)
specifier|public
specifier|static
name|void
name|verifyChunkedSumsByteArray
parameter_list|(
name|int
name|bytesPerSum
parameter_list|,
name|int
name|checksumType
parameter_list|,
name|byte
index|[]
name|sums
parameter_list|,
name|int
name|sumsOffset
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|dataOffset
parameter_list|,
name|int
name|dataLength
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|basePos
parameter_list|)
throws|throws
name|ChecksumException
block|{
name|nativeVerifyChunkedSumsByteArray
argument_list|(
name|bytesPerSum
argument_list|,
name|checksumType
argument_list|,
name|sums
argument_list|,
name|sumsOffset
argument_list|,
name|data
argument_list|,
name|dataOffset
argument_list|,
name|dataLength
argument_list|,
name|fileName
argument_list|,
name|basePos
argument_list|)
expr_stmt|;
block|}
DECL|method|nativeVerifyChunkedSums ( int bytesPerSum, int checksumType, ByteBuffer sums, int sumsOffset, ByteBuffer data, int dataOffset, int dataLength, String fileName, long basePos)
specifier|private
specifier|static
specifier|native
name|void
name|nativeVerifyChunkedSums
parameter_list|(
name|int
name|bytesPerSum
parameter_list|,
name|int
name|checksumType
parameter_list|,
name|ByteBuffer
name|sums
parameter_list|,
name|int
name|sumsOffset
parameter_list|,
name|ByteBuffer
name|data
parameter_list|,
name|int
name|dataOffset
parameter_list|,
name|int
name|dataLength
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|basePos
parameter_list|)
function_decl|;
DECL|method|nativeVerifyChunkedSumsByteArray ( int bytesPerSum, int checksumType, byte[] sums, int sumsOffset, byte[] data, int dataOffset, int dataLength, String fileName, long basePos)
specifier|private
specifier|static
specifier|native
name|void
name|nativeVerifyChunkedSumsByteArray
parameter_list|(
name|int
name|bytesPerSum
parameter_list|,
name|int
name|checksumType
parameter_list|,
name|byte
index|[]
name|sums
parameter_list|,
name|int
name|sumsOffset
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|dataOffset
parameter_list|,
name|int
name|dataLength
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|basePos
parameter_list|)
function_decl|;
comment|// Copy the constants over from DataChecksum so that javah will pick them up
comment|// and make them available in the native code header.
DECL|field|CHECKSUM_CRC32
specifier|public
specifier|static
specifier|final
name|int
name|CHECKSUM_CRC32
init|=
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
decl_stmt|;
DECL|field|CHECKSUM_CRC32C
specifier|public
specifier|static
specifier|final
name|int
name|CHECKSUM_CRC32C
init|=
name|DataChecksum
operator|.
name|CHECKSUM_CRC32C
decl_stmt|;
block|}
end_class

end_unit

