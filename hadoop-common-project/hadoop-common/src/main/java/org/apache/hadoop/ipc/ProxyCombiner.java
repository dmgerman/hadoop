begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class used to combine two protocol proxies.  * See {@link #combine(Class, Object...)}.  */
end_comment

begin_class
DECL|class|ProxyCombiner
specifier|public
specifier|final
class|class
name|ProxyCombiner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProxyCombiner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ProxyCombiner ()
specifier|private
name|ProxyCombiner
parameter_list|()
block|{ }
comment|/**    * Combine two or more proxies which together comprise a single proxy    * interface. This can be used for a protocol interface which {@code extends}    * multiple other protocol interfaces. The returned proxy will implement    * all of the methods of the combined proxy interface, delegating calls    * to which proxy implements that method. If multiple proxies implement the    * same method, the first in the list will be used for delegation.    *    *<p/>This will check that every method on the combined interface is    * implemented by at least one of the supplied proxy objects.    *    * @param combinedProxyInterface The interface of the combined proxy.    * @param proxies The proxies which should be used as delegates.    * @param<T> The type of the proxy that will be returned.    * @return The combined proxy.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|combine (Class<T> combinedProxyInterface, Object... proxies)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|combine
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|combinedProxyInterface
parameter_list|,
name|Object
modifier|...
name|proxies
parameter_list|)
block|{
name|methodLoop
label|:
for|for
control|(
name|Method
name|m
range|:
name|combinedProxyInterface
operator|.
name|getMethods
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|proxy
range|:
name|proxies
control|)
block|{
try|try
block|{
name|proxy
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|methodLoop
continue|;
comment|// go to the next method
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// Continue to try the next proxy
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The proxies specified for "
operator|+
name|combinedProxyInterface
operator|+
literal|" do not cover method "
operator|+
name|m
argument_list|)
throw|;
block|}
name|InvocationHandler
name|handler
init|=
operator|new
name|CombinedProxyInvocationHandler
argument_list|(
name|proxies
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|combinedProxyInterface
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|combinedProxyInterface
block|}
argument_list|,
name|handler
argument_list|)
return|;
block|}
DECL|class|CombinedProxyInvocationHandler
specifier|private
specifier|static
specifier|final
class|class
name|CombinedProxyInvocationHandler
implements|implements
name|RpcInvocationHandler
block|{
DECL|field|proxies
specifier|private
specifier|final
name|Object
index|[]
name|proxies
decl_stmt|;
DECL|method|CombinedProxyInvocationHandler (Object[] proxies)
specifier|private
name|CombinedProxyInvocationHandler
parameter_list|(
name|Object
index|[]
name|proxies
parameter_list|)
block|{
name|this
operator|.
name|proxies
operator|=
name|proxies
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Exception
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|underlyingProxy
range|:
name|proxies
control|)
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|underlyingProxy
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// This shouldn't happen since the method coverage was verified in build()
name|LOG
operator|.
name|error
argument_list|(
literal|"BUG: Method {} was unable to be found on any of the "
operator|+
literal|"underlying proxies for {}"
argument_list|,
name|method
argument_list|,
name|proxy
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method "
operator|+
name|method
operator|+
literal|" not supported"
argument_list|,
name|lastException
argument_list|)
throw|;
block|}
comment|/**      * Since this is incapable of returning multiple connection IDs, simply      * return the first one. In most cases, the connection ID should be the same      * for all proxies.      */
annotation|@
name|Override
DECL|method|getConnectionId ()
specifier|public
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxies
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|MultipleIOException
operator|.
name|Builder
name|exceptionBuilder
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|proxy
range|:
name|proxies
control|)
block|{
if|if
condition|(
name|proxy
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|proxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exceptionBuilder
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exceptionBuilder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|exceptionBuilder
operator|.
name|build
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

