begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsDirectoryException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Truncates a file to a new size  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Truncate
specifier|public
class|class
name|Truncate
extends|extends
name|FsCommand
block|{
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Truncate
operator|.
name|class
argument_list|,
literal|"-truncate"
argument_list|)
expr_stmt|;
block|}
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"truncate"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"[-w]<length><path> ..."
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Truncate all files that match the specified file pattern to the "
operator|+
literal|"specified length.\n"
operator|+
literal|"-w: Requests that the command wait for block recovery to complete, "
operator|+
literal|"if necessary."
decl_stmt|;
DECL|field|newLength
specifier|protected
name|long
name|newLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|waitList
specifier|protected
name|List
argument_list|<
name|PathData
argument_list|>
name|waitList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|waitOpt
specifier|protected
name|boolean
name|waitOpt
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|waitOpt
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
try|try
block|{
name|newLength
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|displayWarning
argument_list|(
literal|"Illegal length, a non-negative integer expected"
argument_list|)
expr_stmt|;
throw|throw
name|nfe
throw|;
block|}
if|if
condition|(
name|newLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"length must be>= 0"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processArguments (LinkedList<PathData> args)
specifier|protected
name|void
name|processArguments
parameter_list|(
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|processArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitOpt
condition|)
name|waitForRecovery
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|oldLength
init|=
name|item
operator|.
name|stat
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|newLength
operator|>
name|oldLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot truncate to a larger file size. Current size: "
operator|+
name|oldLength
operator|+
literal|", truncate size: "
operator|+
name|newLength
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|item
operator|.
name|fs
operator|.
name|truncate
argument_list|(
name|item
operator|.
name|path
argument_list|,
name|newLength
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Truncated "
operator|+
name|item
operator|+
literal|" to length: "
operator|+
name|newLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|waitOpt
condition|)
block|{
name|waitList
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Truncating "
operator|+
name|item
operator|+
literal|" to length: "
operator|+
name|newLength
operator|+
literal|". "
operator|+
literal|"Wait for block recovery to complete before further updating this "
operator|+
literal|"file."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for all files in waitList to have length equal to newLength.    */
DECL|method|waitForRecovery ()
specifier|private
name|void
name|waitForRecovery
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|PathData
name|item
range|:
name|waitList
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for "
operator|+
name|item
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|item
operator|.
name|refreshStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|getLen
argument_list|()
operator|==
name|newLength
condition|)
break|break;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"Truncated "
operator|+
name|item
operator|+
literal|" to length: "
operator|+
name|newLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

