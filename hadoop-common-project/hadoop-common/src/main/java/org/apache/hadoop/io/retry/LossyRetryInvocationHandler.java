begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_comment
comment|/**  * A dummy invocation handler extending RetryInvocationHandler. It drops the  * first N number of responses. This invocation handler is only used for testing.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|LossyRetryInvocationHandler
specifier|public
class|class
name|LossyRetryInvocationHandler
parameter_list|<
name|T
parameter_list|>
extends|extends
name|RetryInvocationHandler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|numToDrop
specifier|private
specifier|final
name|int
name|numToDrop
decl_stmt|;
DECL|field|RetryCount
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|RetryCount
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|LossyRetryInvocationHandler (int numToDrop, FailoverProxyProvider<T> proxyProvider, RetryPolicy retryPolicy)
specifier|public
name|LossyRetryInvocationHandler
parameter_list|(
name|int
name|numToDrop
parameter_list|,
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|proxyProvider
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|this
operator|.
name|numToDrop
operator|=
name|numToDrop
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|RetryCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|invokeMethod (Method method, Object[] args)
specifier|protected
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|result
init|=
name|super
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|int
name|retryCount
init|=
name|RetryCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|retryCount
operator|<
name|this
operator|.
name|numToDrop
condition|)
block|{
name|RetryCount
operator|.
name|set
argument_list|(
operator|++
name|retryCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Drop the response. Current retryCount == "
operator|+
name|retryCount
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Fake Exception"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"retryCount == "
operator|+
name|retryCount
operator|+
literal|". It's time to normally process the response"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

