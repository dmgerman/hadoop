begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * GangliaContext.java  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_comment
comment|/**  * Context for sending metrics to Ganglia version 3.1.x.  *   * 3.1.1 has a slightly different wire portal compared to 3.0.x.  */
end_comment

begin_class
DECL|class|GangliaContext31
specifier|public
class|class
name|GangliaContext31
extends|extends
name|GangliaContext
block|{
DECL|field|hostName
name|String
name|hostName
init|=
literal|"UNKNOWN.example.com"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.util.GangliaContext31"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|init (String contextName, ContextFactory factory)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|contextName
parameter_list|,
name|ContextFactory
name|factory
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|contextName
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing the GangliaContext31 for Ganglia 3.1 metrics."
argument_list|)
expr_stmt|;
comment|// Take the hostname from the DNS class.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
literal|"slave.host.name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hostName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"slave.host.name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|hostName
operator|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"dfs.datanode.dns.interface"
argument_list|,
literal|"default"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dfs.datanode.dns.nameserver"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|uhe
argument_list|)
expr_stmt|;
name|hostName
operator|=
literal|"UNKNOWN.example.com"
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|emitMetric (String name, String type, String value)
specifier|protected
name|void
name|emitMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric was emitted with no name."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric name "
operator|+
name|name
operator|+
literal|" was emitted with a null value."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metric name "
operator|+
name|name
operator|+
literal|", value "
operator|+
name|value
operator|+
literal|" has no type."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Emitting metric "
operator|+
name|name
operator|+
literal|", type "
operator|+
name|type
operator|+
literal|", value "
operator|+
name|value
operator|+
literal|" from hostname"
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
name|String
name|units
init|=
name|getUnits
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|slope
init|=
name|getSlope
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|tmax
init|=
name|getTmax
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|dmax
init|=
name|getDmax
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|String
name|groupName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
comment|// The following XDR recipe was done through a careful reading of
comment|// gm_protocol.x in Ganglia 3.1 and carefully examining the output of
comment|// the gmetric utility with strace.
comment|// First we send out a metadata message
name|xdr_int
argument_list|(
literal|128
argument_list|)
expr_stmt|;
comment|// metric_id = metadata_msg
name|xdr_string
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
comment|// hostname
name|xdr_string
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// metric name
name|xdr_int
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// spoof = False
name|xdr_string
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// metric type
name|xdr_string
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// metric name
name|xdr_string
argument_list|(
name|units
argument_list|)
expr_stmt|;
comment|// units
name|xdr_int
argument_list|(
name|slope
argument_list|)
expr_stmt|;
comment|// slope
name|xdr_int
argument_list|(
name|tmax
argument_list|)
expr_stmt|;
comment|// tmax, the maximum time between metrics
name|xdr_int
argument_list|(
name|dmax
argument_list|)
expr_stmt|;
comment|// dmax, the maximum data value
name|xdr_int
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|/*Num of the entries in extra_value field for                                Ganglia 3.1.x*/
name|xdr_string
argument_list|(
literal|"GROUP"
argument_list|)
expr_stmt|;
comment|/*Group attribute*/
name|xdr_string
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
comment|/*Group value*/
for|for
control|(
name|SocketAddress
name|socketAddress
range|:
name|metricsServers
control|)
block|{
name|DatagramPacket
name|packet
init|=
operator|new
name|DatagramPacket
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|socketAddress
argument_list|)
decl_stmt|;
name|datagramSocket
operator|.
name|send
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
comment|// Now we send out a message with the actual value.
comment|// Technically, we only need to send out the metadata message once for
comment|// each metric, but I don't want to have to record which metrics we did and
comment|// did not send.
name|offset
operator|=
literal|0
expr_stmt|;
name|xdr_int
argument_list|(
literal|133
argument_list|)
expr_stmt|;
comment|// we are sending a string value
name|xdr_string
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
comment|// hostName
name|xdr_string
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// metric name
name|xdr_int
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// spoof = False
name|xdr_string
argument_list|(
literal|"%s"
argument_list|)
expr_stmt|;
comment|// format field
name|xdr_string
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// metric value
for|for
control|(
name|SocketAddress
name|socketAddress
range|:
name|metricsServers
control|)
block|{
name|DatagramPacket
name|packet
init|=
operator|new
name|DatagramPacket
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|socketAddress
argument_list|)
decl_stmt|;
name|datagramSocket
operator|.
name|send
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

