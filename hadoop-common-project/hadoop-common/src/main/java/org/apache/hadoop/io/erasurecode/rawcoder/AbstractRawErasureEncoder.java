begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * An abstract raw erasure encoder that's to be inherited by new encoders.  *  * It implements the {@link RawErasureEncoder} interface.  */
end_comment

begin_class
DECL|class|AbstractRawErasureEncoder
specifier|public
specifier|abstract
class|class
name|AbstractRawErasureEncoder
extends|extends
name|AbstractRawErasureCoder
implements|implements
name|RawErasureEncoder
block|{
annotation|@
name|Override
DECL|method|encode (ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|public
name|void
name|encode
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
block|{
name|checkParameters
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|boolean
name|hasArray
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|hasArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasArray
condition|)
block|{
name|byte
index|[]
index|[]
name|newInputs
init|=
name|toArrays
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|newOutputs
init|=
name|toArrays
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
name|doEncode
argument_list|(
name|newInputs
argument_list|,
name|newOutputs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doEncode
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Perform the real encoding work using direct ByteBuffer    * @param inputs Direct ByteBuffers expected    * @param outputs Direct ByteBuffers expected    */
DECL|method|doEncode (ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|protected
specifier|abstract
name|void
name|doEncode
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|encode (byte[][] inputs, byte[][] outputs)
specifier|public
name|void
name|encode
parameter_list|(
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|)
block|{
name|checkParameters
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|doEncode
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform the real encoding work using bytes array    * @param inputs    * @param outputs    */
DECL|method|doEncode (byte[][] inputs, byte[][] outputs)
specifier|protected
specifier|abstract
name|void
name|doEncode
parameter_list|(
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|encode (ECChunk[] inputs, ECChunk[] outputs)
specifier|public
name|void
name|encode
parameter_list|(
name|ECChunk
index|[]
name|inputs
parameter_list|,
name|ECChunk
index|[]
name|outputs
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|newInputs
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|newOutputs
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
name|encode
argument_list|(
name|newInputs
argument_list|,
name|newOutputs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check and validate decoding parameters, throw exception accordingly.    * @param inputs    * @param outputs    */
DECL|method|checkParameters (Object[] inputs, Object[] outputs)
specifier|protected
name|void
name|checkParameters
parameter_list|(
name|Object
index|[]
name|inputs
parameter_list|,
name|Object
index|[]
name|outputs
parameter_list|)
block|{
if|if
condition|(
name|inputs
operator|.
name|length
operator|!=
name|getNumDataUnits
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid inputs length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputs
operator|.
name|length
operator|!=
name|getNumParityUnits
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid outputs length"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

