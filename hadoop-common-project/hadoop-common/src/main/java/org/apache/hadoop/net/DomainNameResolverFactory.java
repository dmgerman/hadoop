begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * This class creates the DomainNameResolver instance based on the config.  * It can either create the default resolver for the whole resolving for  * hadoop or create individual resolver per nameservice or yarn.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DomainNameResolverFactory
specifier|public
specifier|final
class|class
name|DomainNameResolverFactory
block|{
DECL|method|DomainNameResolverFactory ()
specifier|private
name|DomainNameResolverFactory
parameter_list|()
block|{
comment|// Utility classes should not have a public or default constructor
block|}
comment|/**    * Create a domain name resolver to convert the domain name in the config to    * the actual IP addresses of the Namenode/Router/RM.    *    * @param conf Configuration to get the resolver from.    * @param uri the url that the resolver will be used against    * @param configKey The config key name suffixed with    *                  the nameservice/yarnservice.    * @return Domain name resolver.    */
DECL|method|newInstance ( Configuration conf, URI uri, String configKey)
specifier|public
specifier|static
name|DomainNameResolver
name|newInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|String
name|configKey
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|confKeyWithHost
init|=
name|configKey
operator|+
literal|"."
operator|+
name|host
decl_stmt|;
return|return
name|newInstance
argument_list|(
name|conf
argument_list|,
name|confKeyWithHost
argument_list|)
return|;
block|}
comment|/**    * This function gets the instance based on the config.    *    * @param conf Configuration    * @param configKey config key name.    * @return Domain name resolver.    * @throws IOException when the class cannot be found or initiated.    */
DECL|method|newInstance ( Configuration conf, String configKey)
specifier|public
specifier|static
name|DomainNameResolver
name|newInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|configKey
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|DomainNameResolver
argument_list|>
name|resolverClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|configKey
argument_list|,
name|DNSDomainNameResolver
operator|.
name|class
argument_list|,
name|DomainNameResolver
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|resolverClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

