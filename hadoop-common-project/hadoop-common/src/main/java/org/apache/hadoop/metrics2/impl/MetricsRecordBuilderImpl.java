begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * {@link MetricsRecordBuilder} implementation used for building metrics records  * by the {@link MetricsCollector}. It provides the following functionality:  *<ul>  *<li>Allows configuring filters for metrics.  *</ul>  *  */
end_comment

begin_class
DECL|class|MetricsRecordBuilderImpl
class|class
name|MetricsRecordBuilderImpl
extends|extends
name|MetricsRecordBuilder
block|{
DECL|field|parent
specifier|private
specifier|final
name|MetricsCollector
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|recInfo
specifier|private
specifier|final
name|MetricsInfo
name|recInfo
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|List
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
decl_stmt|;
DECL|field|recordFilter
DECL|field|metricFilter
specifier|private
specifier|final
name|MetricsFilter
name|recordFilter
decl_stmt|,
name|metricFilter
decl_stmt|;
DECL|field|acceptable
specifier|private
specifier|final
name|boolean
name|acceptable
decl_stmt|;
comment|/**    * @param parent {@link MetricsCollector} using this record builder    * @param info metrics information    * @param rf    * @param mf    * @param acceptable    */
DECL|method|MetricsRecordBuilderImpl (MetricsCollector parent, MetricsInfo info, MetricsFilter rf, MetricsFilter mf, boolean acceptable)
name|MetricsRecordBuilderImpl
parameter_list|(
name|MetricsCollector
name|parent
parameter_list|,
name|MetricsInfo
name|info
parameter_list|,
name|MetricsFilter
name|rf
parameter_list|,
name|MetricsFilter
name|mf
parameter_list|,
name|boolean
name|acceptable
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|recInfo
operator|=
name|info
expr_stmt|;
name|metrics
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|tags
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|recordFilter
operator|=
name|rf
expr_stmt|;
name|metricFilter
operator|=
name|mf
expr_stmt|;
name|this
operator|.
name|acceptable
operator|=
name|acceptable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parent ()
specifier|public
name|MetricsCollector
name|parent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|tag (MetricsInfo info, String value)
specifier|public
name|MetricsRecordBuilderImpl
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Interns
operator|.
name|tag
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|add (MetricsTag tag)
specifier|public
name|MetricsRecordBuilderImpl
name|add
parameter_list|(
name|MetricsTag
name|tag
parameter_list|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|add (AbstractMetric metric)
specifier|public
name|MetricsRecordBuilderImpl
name|add
parameter_list|(
name|AbstractMetric
name|metric
parameter_list|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|metric
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addCounter (MetricsInfo info, int value)
specifier|public
name|MetricsRecordBuilderImpl
name|addCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricCounterInt
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addCounter (MetricsInfo info, long value)
specifier|public
name|MetricsRecordBuilderImpl
name|addCounter
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricCounterLong
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, int value)
specifier|public
name|MetricsRecordBuilderImpl
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricGaugeInt
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, long value)
specifier|public
name|MetricsRecordBuilderImpl
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricGaugeLong
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, float value)
specifier|public
name|MetricsRecordBuilderImpl
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricGaugeFloat
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addGauge (MetricsInfo info, double value)
specifier|public
name|MetricsRecordBuilderImpl
name|addGauge
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|metricFilter
operator|==
literal|null
operator|||
name|metricFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|MetricGaugeDouble
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setContext (String value)
specifier|public
name|MetricsRecordBuilderImpl
name|setContext
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getRecord ()
specifier|public
name|MetricsRecordImpl
name|getRecord
parameter_list|()
block|{
if|if
condition|(
name|acceptable
operator|&&
operator|(
name|recordFilter
operator|==
literal|null
operator|||
name|recordFilter
operator|.
name|accepts
argument_list|(
name|tags
argument_list|)
operator|)
condition|)
block|{
return|return
operator|new
name|MetricsRecordImpl
argument_list|(
name|recInfo
argument_list|,
name|timestamp
argument_list|,
name|tags
argument_list|()
argument_list|,
name|metrics
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|tags ()
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tags
argument_list|)
return|;
block|}
DECL|method|metrics ()
name|List
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|metrics
argument_list|)
return|;
block|}
block|}
end_class

end_unit

