begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell.find
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|find
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathData
import|;
end_import

begin_comment
comment|/**  * Implements the -name expression for the  * {@link org.apache.hadoop.fs.shell.find.Find} command.  */
end_comment

begin_class
DECL|class|Name
specifier|final
class|class
name|Name
extends|extends
name|BaseExpression
block|{
comment|/** Registers this expression with the specified factory. */
DECL|method|registerExpression (ExpressionFactory factory)
specifier|public
specifier|static
name|void
name|registerExpression
parameter_list|(
name|ExpressionFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Name
operator|.
name|class
argument_list|,
literal|"-name"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|Iname
operator|.
name|class
argument_list|,
literal|"-iname"
argument_list|)
expr_stmt|;
block|}
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USAGE
init|=
block|{
literal|"-name pattern"
block|,
literal|"-iname pattern"
block|}
decl_stmt|;
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HELP
init|=
block|{
literal|"Evaluates as true if the basename of the file matches the"
block|,
literal|"pattern using standard file system globbing."
block|,
literal|"If -iname is used then the match is case insensitive."
block|}
decl_stmt|;
DECL|field|globPattern
specifier|private
name|GlobPattern
name|globPattern
decl_stmt|;
DECL|field|caseSensitive
specifier|private
name|boolean
name|caseSensitive
init|=
literal|true
decl_stmt|;
comment|/** Creates a case sensitive name expression. */
DECL|method|Name ()
specifier|public
name|Name
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a Name {@link Expression} with a specified case sensitivity.    *    * @param caseSensitive if true the comparisons are case sensitive.    */
DECL|method|Name (boolean caseSensitive)
specifier|private
name|Name
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setUsage
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|setHelp
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
name|setCaseSensitive
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
block|}
DECL|method|setCaseSensitive (boolean caseSensitive)
specifier|private
name|void
name|setCaseSensitive
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addArguments (Deque<String> args)
specifier|public
name|void
name|addArguments
parameter_list|(
name|Deque
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|addArguments
argument_list|(
name|args
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepare ()
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|argPattern
init|=
name|getArgument
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|argPattern
operator|=
name|argPattern
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|globPattern
operator|=
operator|new
name|GlobPattern
argument_list|(
name|argPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (PathData item, int depth)
specifier|public
name|Result
name|apply
parameter_list|(
name|PathData
name|item
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getPath
argument_list|(
name|item
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|globPattern
operator|.
name|matches
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Result
operator|.
name|PASS
return|;
block|}
else|else
block|{
return|return
name|Result
operator|.
name|FAIL
return|;
block|}
block|}
comment|/** Case insensitive version of the -name expression. */
DECL|class|Iname
specifier|static
class|class
name|Iname
extends|extends
name|FilterExpression
block|{
DECL|method|Iname ()
specifier|public
name|Iname
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Name
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

