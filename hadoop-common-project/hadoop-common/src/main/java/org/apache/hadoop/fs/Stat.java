begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|OSType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Wrapper for the Unix stat(1) command. Used to workaround the lack of   * lstat(2) in Java 6.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Stat
specifier|public
class|class
name|Stat
extends|extends
name|Shell
block|{
DECL|field|original
specifier|private
specifier|final
name|Path
name|original
decl_stmt|;
DECL|field|qualified
specifier|private
specifier|final
name|Path
name|qualified
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
DECL|field|dereference
specifier|private
specifier|final
name|boolean
name|dereference
decl_stmt|;
DECL|field|stat
specifier|private
name|FileStatus
name|stat
decl_stmt|;
DECL|method|Stat (Path path, long blockSize, boolean deref, FileSystem fs)
specifier|public
name|Stat
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|boolean
name|deref
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Original path
name|this
operator|.
name|original
operator|=
name|path
expr_stmt|;
comment|// Qualify with working directory and scheme/auth
name|this
operator|.
name|qualified
operator|=
name|original
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Strip back down to a plain path
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|qualified
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|dereference
operator|=
name|deref
expr_stmt|;
block|}
DECL|method|getFileStatus ()
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|run
argument_list|()
expr_stmt|;
return|return
name|stat
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFileStatusForTesting ()
name|FileStatus
name|getFileStatusForTesting
parameter_list|()
block|{
return|return
name|stat
return|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
name|String
name|derefFlag
init|=
literal|"-"
decl_stmt|;
if|if
condition|(
name|dereference
condition|)
block|{
name|derefFlag
operator|=
literal|"-L"
expr_stmt|;
block|}
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_LINUX
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"exec 'stat' '"
operator|+
name|derefFlag
operator|+
literal|"c' '%s,%F,%Y,%X,%a,%U,%G,%N' '"
operator|+
name|path
operator|+
literal|"' 2>&1"
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_FREEBSD
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"exec 'stat' '"
operator|+
name|derefFlag
operator|+
literal|"f' '%z,%HT,%m,%a,%Op,%Su,%Sg,`link\' -> `%Y\'' '"
operator|+
name|path
operator|+
literal|"' 2>&1"
block|}
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"stat is not supported on this platform"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Reset stat
name|stat
operator|=
literal|null
expr_stmt|;
name|String
name|line
init|=
name|lines
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to stat path: "
operator|+
name|original
argument_list|)
throw|;
block|}
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"No such file or directory"
argument_list|)
operator|||
name|line
operator|.
name|endsWith
argument_list|(
literal|"Not a directory"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|original
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"Too many levels of symbolic links"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Possible cyclic loop while following symbolic"
operator|+
literal|" link "
operator|+
name|original
argument_list|)
throw|;
block|}
comment|// 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,`link' -> `target'
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|","
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|length
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isDir
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"directory"
argument_list|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
comment|// Convert from seconds to milliseconds
name|long
name|modTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|long
name|accessTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// FsPermissions only supports exactly 3 octal digits
comment|// Need to pad up and trim down
name|String
name|octalPerms
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|octalPerms
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
name|octalPerms
operator|=
literal|"0"
operator|+
name|octalPerms
expr_stmt|;
block|}
name|octalPerms
operator|=
name|octalPerms
operator|.
name|substring
argument_list|(
name|octalPerms
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|FsPermission
name|perms
init|=
operator|new
name|FsPermission
argument_list|(
name|octalPerms
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|symStr
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// 'notalink'
comment|// 'link' -> `target'
comment|// '' -> ''
name|Path
name|symlink
init|=
literal|null
decl_stmt|;
name|StringTokenizer
name|symTokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|symStr
argument_list|,
literal|"`"
argument_list|)
decl_stmt|;
name|symTokens
operator|.
name|nextToken
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|target
init|=
name|symTokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|target
operator|=
name|target
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|target
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|symlink
operator|=
operator|new
name|Path
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// null if not a symlink
block|}
comment|// Set stat
name|stat
operator|=
operator|new
name|FileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
literal|1
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|accessTime
argument_list|,
name|perms
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|symlink
argument_list|,
name|qualified
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stat
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected stat output: "
operator|+
name|line
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected stat output: "
operator|+
name|line
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

