begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Class that caches the netgroups and inverts group-to-user map  * to user-to-group map, primarily intended for use with  * netgroups (as returned by getent netgrgoup) which only returns  * group to user mapping.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NetgroupCache
specifier|public
class|class
name|NetgroupCache
block|{
DECL|field|userToNetgroupsMap
specifier|private
specifier|static
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|userToNetgroupsMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Get netgroups for a given user    *    * @param user get groups for this user    * @param groups put groups into this List    */
DECL|method|getNetgroups (final String user, List<String> groups)
specifier|public
specifier|static
name|void
name|getNetgroups
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|userToNetgroupsMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|//ConcurrentHashMap does not allow null values;
comment|//So null value check can be used to check if the key exists
if|if
condition|(
name|userGroups
operator|!=
literal|null
condition|)
block|{
name|groups
operator|.
name|addAll
argument_list|(
name|userGroups
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the list of cached netgroups    *    * @return list of cached groups    */
DECL|method|getNetgroupNames ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getNetgroupNames
parameter_list|()
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|getGroups
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getGroups ()
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|userGroups
range|:
name|userToNetgroupsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|allGroups
operator|.
name|addAll
argument_list|(
name|userGroups
argument_list|)
expr_stmt|;
block|}
return|return
name|allGroups
return|;
block|}
comment|/**    * Returns true if a given netgroup is cached    *    * @param group check if this group is cached    * @return true if group is cached, false otherwise    */
DECL|method|isCached (String group)
specifier|public
specifier|static
name|boolean
name|isCached
parameter_list|(
name|String
name|group
parameter_list|)
block|{
return|return
name|getGroups
argument_list|()
operator|.
name|contains
argument_list|(
name|group
argument_list|)
return|;
block|}
comment|/**    * Clear the cache    */
DECL|method|clear ()
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|userToNetgroupsMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add group to cache    *    * @param group name of the group to add to cache    * @param users list of users for a given group    */
DECL|method|add (String group, List<String> users)
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|String
name|group
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|users
parameter_list|)
block|{
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|userToNetgroupsMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// ConcurrentHashMap does not allow null values;
comment|// So null value check can be used to check if the key exists
if|if
condition|(
name|userGroups
operator|==
literal|null
condition|)
block|{
comment|//Generate a ConcurrentHashSet (backed by the keyset of the ConcurrentHashMap)
name|userGroups
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|currentSet
init|=
name|userToNetgroupsMap
operator|.
name|putIfAbsent
argument_list|(
name|user
argument_list|,
name|userGroups
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSet
operator|!=
literal|null
condition|)
block|{
name|userGroups
operator|=
name|currentSet
expr_stmt|;
block|}
block|}
name|userGroups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

