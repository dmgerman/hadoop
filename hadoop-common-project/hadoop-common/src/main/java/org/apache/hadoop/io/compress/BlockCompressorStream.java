begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.io.compress.CompressorStream} which works  * with 'block-based' based compression algorithms, as opposed to   * 'stream-based' compression algorithms.  *  * It should be noted that this wrapper does not guarantee that blocks will  * be sized for the compressor. If the  * {@link org.apache.hadoop.io.compress.Compressor} requires buffering to  * effect meaningful compression, it is responsible for it.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockCompressorStream
specifier|public
class|class
name|BlockCompressorStream
extends|extends
name|CompressorStream
block|{
comment|// The 'maximum' size of input data to be compressed, to account
comment|// for the overhead of the compression algorithm.
DECL|field|MAX_INPUT_SIZE
specifier|private
specifier|final
name|int
name|MAX_INPUT_SIZE
decl_stmt|;
comment|/**    * Create a {@link BlockCompressorStream}.    *     * @param out stream    * @param compressor compressor to be used    * @param bufferSize size of buffer    * @param compressionOverhead maximum 'overhead' of the compression     *                            algorithm with given bufferSize    */
DECL|method|BlockCompressorStream (OutputStream out, Compressor compressor, int bufferSize, int compressionOverhead)
specifier|public
name|BlockCompressorStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|compressionOverhead
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|,
name|compressor
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|MAX_INPUT_SIZE
operator|=
name|bufferSize
operator|-
name|compressionOverhead
expr_stmt|;
block|}
comment|/**    * Create a {@link BlockCompressorStream} with given output-stream and     * compressor.    * Use default of 512 as bufferSize and compressionOverhead of     * (1% of bufferSize + 12 bytes) =  18 bytes (zlib algorithm).    *     * @param out stream    * @param compressor compressor to be used    */
DECL|method|BlockCompressorStream (OutputStream out, Compressor compressor)
specifier|public
name|BlockCompressorStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
block|{
name|this
argument_list|(
name|out
argument_list|,
name|compressor
argument_list|,
literal|512
argument_list|,
literal|18
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the data provided to the compression codec, compressing no more    * than the buffer size less the compression overhead as specified during    * construction for each block.    *    * Each block contains the uncompressed length for the block, followed by    * one or more length-prefixed blocks of compressed data.    */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity checks
if|if
condition|(
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"write beyond end of stream"
argument_list|)
throw|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|long
name|limlen
init|=
name|compressor
operator|.
name|getBytesRead
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|+
name|limlen
operator|>
name|MAX_INPUT_SIZE
operator|&&
name|limlen
operator|>
literal|0
condition|)
block|{
comment|// Adding this segment would exceed the maximum size.
comment|// Flush data if we have it.
name|finish
argument_list|()
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>
name|MAX_INPUT_SIZE
condition|)
block|{
comment|// The data we're given exceeds the maximum size. Any data
comment|// we had have been flushed, so we write out this chunk in segments
comment|// not exceeding the maximum size until it is exhausted.
name|rawWriteInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
do|do
block|{
name|int
name|bufLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|MAX_INPUT_SIZE
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|bufLen
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|compress
argument_list|()
expr_stmt|;
block|}
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|off
operator|+=
name|bufLen
expr_stmt|;
name|len
operator|-=
name|bufLen
expr_stmt|;
block|}
do|while
condition|(
name|len
operator|>
literal|0
condition|)
do|;
return|return;
block|}
comment|// Give data to the compressor
name|compressor
operator|.
name|setInput
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|compressor
operator|.
name|needsInput
argument_list|()
condition|)
block|{
comment|// compressor buffer size might be smaller than the maximum
comment|// size, so we permit it to flush if required.
name|rawWriteInt
argument_list|(
operator|(
name|int
operator|)
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|compress
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|compressor
operator|.
name|needsInput
argument_list|()
condition|)
do|;
block|}
block|}
annotation|@
name|Override
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|rawWriteInt
argument_list|(
operator|(
name|int
operator|)
name|compressor
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|compress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|compress ()
specifier|protected
name|void
name|compress
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
comment|// Write out the compressed chunk
name|rawWriteInt
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rawWriteInt (int v)
specifier|private
name|void
name|rawWriteInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

