begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * This is a special codec which does not transform the output.  * It can be declared as a codec in the option "io.compression.codecs",  * and then it will declare that it supports the file extension  * set in {@link #OPT_EXTENSION}.  *  * This allows decompression to be disabled on a job, even when there is  * a registered/discoverable decompression codec for a file extension  * -without having to change the standard codec binding mechanism.  *  * For example, to disable decompression for a gzipped files, set the  * options  *<pre>  *   io.compression.codecs = org.apache.hadoop.io.compress.PassthroughCodec  *   io.compress.passthrough.extension = .gz  *</pre>  *  *<i>Note:</i> this is not a Splittable codec: it doesn't know the  * capabilities of the passed in stream. It should be possible to  * extend this in a subclass: the inner classes are marked as protected  * to enable this.<i>Do not retrofit splitting to this class.</i>.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PassthroughCodec
specifier|public
class|class
name|PassthroughCodec
implements|implements
name|Configurable
implements|,
name|CompressionCodec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PassthroughCodec
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Classname of the codec: {@value}.    */
DECL|field|CLASSNAME
specifier|public
specifier|static
specifier|final
name|String
name|CLASSNAME
init|=
literal|"org.apache.hadoop.io.compress.PassthroughCodec"
decl_stmt|;
comment|/**    * Option to control the extension of the code: {@value}.    */
DECL|field|OPT_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|OPT_EXTENSION
init|=
literal|"io.compress.passthrough.extension"
decl_stmt|;
comment|/**    * This default extension is here so that if no extension has been defined,    * some value is still returned: {@value}..    */
DECL|field|DEFAULT_EXTENSION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_EXTENSION
init|=
literal|".passthrough"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|extension
specifier|private
name|String
name|extension
init|=
name|DEFAULT_EXTENSION
decl_stmt|;
DECL|method|PassthroughCodec ()
specifier|public
name|PassthroughCodec
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (final Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// update the default extension value at this point, adding
comment|// a dot prefix if needed.
name|String
name|ex
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OPT_EXTENSION
argument_list|,
name|DEFAULT_EXTENSION
argument_list|)
decl_stmt|;
name|extension
operator|=
name|ex
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|ex
else|:
operator|(
literal|"."
operator|+
name|ex
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering fake codec for extension {}"
argument_list|,
name|extension
argument_list|)
expr_stmt|;
return|return
name|extension
return|;
block|}
annotation|@
name|Override
DECL|method|createOutputStream (final OutputStream out)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createOutputStream (final OutputStream out, final Compressor compressor)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getCompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createCompressor ()
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createInputStream (final InputStream in)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createInputStream
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createInputStream (final InputStream in, final Decompressor decompressor)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PassthroughDecompressorStream
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDecompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
return|return
name|StubDecompressor
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|createDecompressor ()
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
return|return
operator|new
name|StubDecompressor
argument_list|()
return|;
block|}
comment|/**    * The decompressor.    */
DECL|class|PassthroughDecompressorStream
specifier|protected
specifier|static
specifier|final
class|class
name|PassthroughDecompressorStream
extends|extends
name|DecompressorStream
block|{
DECL|field|input
specifier|private
specifier|final
name|InputStream
name|input
decl_stmt|;
DECL|method|PassthroughDecompressorStream (final InputStream input)
name|PassthroughDecompressorStream
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (final byte[] b)
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (final byte[] b, final int off, final int len)
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|skip (final long n)
specifier|public
name|long
name|skip
parameter_list|(
specifier|final
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|available
argument_list|()
return|;
block|}
block|}
comment|/**    * The decompressor is a no-op. It is not needed other than    * to complete the methods offered by the interface.    */
DECL|class|StubDecompressor
specifier|protected
specifier|static
specifier|final
class|class
name|StubDecompressor
implements|implements
name|Decompressor
block|{
annotation|@
name|Override
DECL|method|setInput (final byte[] b, final int off, final int len)
specifier|public
name|void
name|setInput
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|needsInput ()
specifier|public
name|boolean
name|needsInput
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setDictionary (final byte[] b, final int off, final int len)
specifier|public
name|void
name|setDictionary
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|needsDictionary ()
specifier|public
name|boolean
name|needsDictionary
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|finished ()
specifier|public
name|boolean
name|finished
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|decompress (final byte[] b, final int off, final int len)
specifier|public
name|int
name|decompress
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getRemaining ()
specifier|public
name|int
name|getRemaining
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|end ()
specifier|public
name|void
name|end
parameter_list|()
block|{      }
block|}
block|}
end_class

end_unit

