begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.random
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|random
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PerformanceAdvisory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OpenSSL secure random using JNI.  * This implementation is thread-safe.  *<p>  *   * If using an Intel chipset with RDRAND, the high-performance hardware   * random number generator will be used and it's much faster than  * {@link java.security.SecureRandom}. If RDRAND is unavailable, default  * OpenSSL secure random generator will be used. It's still faster  * and can generate strong random bytes.  *<p>  * See https://wiki.openssl.org/index.php/Random_Numbers  * See http://en.wikipedia.org/wiki/RdRand  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OpensslSecureRandom
specifier|public
class|class
name|OpensslSecureRandom
extends|extends
name|Random
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7828193502768789584L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpensslSecureRandom
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** If native SecureRandom unavailable, use java SecureRandom */
DECL|field|fallback
specifier|private
name|java
operator|.
name|security
operator|.
name|SecureRandom
name|fallback
init|=
literal|null
decl_stmt|;
DECL|field|nativeEnabled
specifier|private
specifier|static
name|boolean
name|nativeEnabled
init|=
literal|false
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
operator|&&
name|NativeCodeLoader
operator|.
name|buildSupportsOpenssl
argument_list|()
condition|)
block|{
try|try
block|{
name|initSR
argument_list|()
expr_stmt|;
name|nativeEnabled
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load Openssl SecureRandom"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isNativeCodeLoaded ()
specifier|public
specifier|static
name|boolean
name|isNativeCodeLoaded
parameter_list|()
block|{
return|return
name|nativeEnabled
return|;
block|}
DECL|method|OpensslSecureRandom ()
specifier|public
name|OpensslSecureRandom
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nativeEnabled
condition|)
block|{
name|PerformanceAdvisory
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Build does not support openssl, "
operator|+
literal|"falling back to Java SecureRandom."
argument_list|)
expr_stmt|;
name|fallback
operator|=
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generates a user-specified number of random bytes.    * It's thread-safe.    *     * @param bytes the array to be filled in with random bytes.    */
annotation|@
name|Override
DECL|method|nextBytes (byte[] bytes)
specifier|public
name|void
name|nextBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|nativeEnabled
operator|||
operator|!
name|nextRandBytes
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|fallback
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setSeed (long seed)
specifier|public
name|void
name|setSeed
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
comment|// Self-seeding.
block|}
comment|/**    * Generates an integer containing the user-specified number of    * random bits (right justified, with leading zeros).    *    * @param numBits number of random bits to be generated, where    * 0 {@literal<=}<code>numBits</code> {@literal<=} 32.    *    * @return int an<code>int</code> containing the user-specified number    * of random bits (right justified, with leading zeros).    */
annotation|@
name|Override
DECL|method|next (int numBits)
specifier|final
specifier|protected
name|int
name|next
parameter_list|(
name|int
name|numBits
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numBits
operator|>=
literal|0
operator|&&
name|numBits
operator|<=
literal|32
argument_list|)
expr_stmt|;
name|int
name|numBytes
init|=
operator|(
name|numBits
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
name|numBytes
index|]
decl_stmt|;
name|int
name|next
init|=
literal|0
decl_stmt|;
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBytes
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
name|next
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
index|[
name|i
index|]
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
return|return
name|next
operator|>>>
operator|(
name|numBytes
operator|*
literal|8
operator|-
name|numBits
operator|)
return|;
block|}
DECL|method|initSR ()
specifier|private
specifier|native
specifier|static
name|void
name|initSR
parameter_list|()
function_decl|;
DECL|method|nextRandBytes (byte[] bytes)
specifier|private
specifier|native
name|boolean
name|nextRandBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
function_decl|;
block|}
end_class

end_unit

