begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A raw decoder in XOR code scheme in pure Java, adapted from HDFS-RAID.  */
end_comment

begin_class
DECL|class|XORRawDecoder
specifier|public
class|class
name|XORRawDecoder
extends|extends
name|AbstractRawErasureDecoder
block|{
annotation|@
name|Override
DECL|method|doDecode (ByteBuffer[] inputs, int[] erasedIndexes, ByteBuffer[] outputs)
specifier|protected
name|void
name|doDecode
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|erasedIndexes
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
block|{
assert|assert
operator|(
name|erasedIndexes
operator|.
name|length
operator|==
name|outputs
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|erasedIndexes
operator|.
name|length
operator|<=
literal|1
operator|)
assert|;
name|int
name|bufSize
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|erasedIdx
init|=
name|erasedIndexes
index|[
literal|0
index|]
decl_stmt|;
comment|// Set the output to zeros.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufSize
condition|;
name|j
operator|++
control|)
block|{
name|outputs
index|[
literal|0
index|]
operator|.
name|put
argument_list|(
name|j
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Process the inputs.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Skip the erased location.
if|if
condition|(
name|i
operator|==
name|erasedIdx
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufSize
condition|;
name|j
operator|++
control|)
block|{
name|outputs
index|[
literal|0
index|]
operator|.
name|put
argument_list|(
name|j
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|outputs
index|[
literal|0
index|]
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|^
name|inputs
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doDecode (byte[][] inputs, int[] erasedIndexes, byte[][] outputs)
specifier|protected
name|void
name|doDecode
parameter_list|(
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|erasedIndexes
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|)
block|{
assert|assert
operator|(
name|erasedIndexes
operator|.
name|length
operator|==
name|outputs
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|erasedIndexes
operator|.
name|length
operator|<=
literal|1
operator|)
assert|;
name|int
name|bufSize
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
name|int
name|erasedIdx
init|=
name|erasedIndexes
index|[
literal|0
index|]
decl_stmt|;
comment|// Set the output to zeros.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufSize
condition|;
name|j
operator|++
control|)
block|{
name|outputs
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
comment|// Process the inputs.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Skip the erased location.
if|if
condition|(
name|i
operator|==
name|erasedIdx
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufSize
condition|;
name|j
operator|++
control|)
block|{
name|outputs
index|[
literal|0
index|]
index|[
name|j
index|]
operator|^=
name|inputs
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

