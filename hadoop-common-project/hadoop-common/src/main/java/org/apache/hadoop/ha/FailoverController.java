begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The FailOverController is responsible for electing an active service  * on startup or when the current active is changing (eg due to failure),  * monitoring the health of a service, and performing a fail-over when a  * new active service is either manually selected by a user or elected.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FailoverController
specifier|public
class|class
name|FailoverController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FailoverController
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Perform pre-failover checks on the given service we plan to    * failover to, eg to prevent failing over to a service (eg due    * to it being inaccessible, already active, not healthy, etc).    *    * An option to ignore toSvc if it claims it is not ready to    * become active is provided in case performing a failover will    * allow it to become active, eg because it triggers a log roll    * so the standby can learn about new blocks and leave safemode.    *    * @param toSvc service to make active    * @param toSvcName name of service to make active    * @param forceActive ignore toSvc if it reports that it is not ready    * @throws FailoverFailedException if we should avoid failover    */
DECL|method|preFailoverChecks (HAServiceProtocol toSvc, InetSocketAddress toSvcAddr, boolean forceActive)
specifier|private
specifier|static
name|void
name|preFailoverChecks
parameter_list|(
name|HAServiceProtocol
name|toSvc
parameter_list|,
name|InetSocketAddress
name|toSvcAddr
parameter_list|,
name|boolean
name|forceActive
parameter_list|)
throws|throws
name|FailoverFailedException
block|{
name|HAServiceStatus
name|toSvcStatus
decl_stmt|;
try|try
block|{
name|toSvcStatus
operator|=
name|toSvc
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to get service state for "
operator|+
name|toSvcAddr
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|toSvcStatus
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
literal|"Can't failover to an active service"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|toSvcStatus
operator|.
name|isReadyToBecomeActive
argument_list|()
condition|)
block|{
name|String
name|notReadyReason
init|=
name|toSvcStatus
operator|.
name|getNotReadyReason
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|forceActive
condition|)
block|{
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
name|toSvcAddr
operator|+
literal|" is not ready to become active: "
operator|+
name|notReadyReason
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Service is not ready to become active, but forcing: "
operator|+
name|notReadyReason
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|HAServiceProtocolHelper
operator|.
name|monitorHealth
argument_list|(
name|toSvc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HealthCheckFailedException
name|hce
parameter_list|)
block|{
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
literal|"Can't failover to an unhealthy service"
argument_list|,
name|hce
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
literal|"Got an IO exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Failover from service 1 to service 2. If the failover fails    * then try to failback.    *    * @param fromSvc currently active service    * @param fromSvcAddr addr of the currently active service    * @param toSvc service to make active    * @param toSvcAddr addr of the service to make active    * @param fencer for fencing fromSvc    * @param forceFence to fence fromSvc even if not strictly necessary    * @param forceActive try to make toSvc active even if it is not ready    * @throws FailoverFailedException if the failover fails    */
DECL|method|failover (HAServiceProtocol fromSvc, InetSocketAddress fromSvcAddr, HAServiceProtocol toSvc, InetSocketAddress toSvcAddr, NodeFencer fencer, boolean forceFence, boolean forceActive)
specifier|public
specifier|static
name|void
name|failover
parameter_list|(
name|HAServiceProtocol
name|fromSvc
parameter_list|,
name|InetSocketAddress
name|fromSvcAddr
parameter_list|,
name|HAServiceProtocol
name|toSvc
parameter_list|,
name|InetSocketAddress
name|toSvcAddr
parameter_list|,
name|NodeFencer
name|fencer
parameter_list|,
name|boolean
name|forceFence
parameter_list|,
name|boolean
name|forceActive
parameter_list|)
throws|throws
name|FailoverFailedException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|fencer
operator|!=
literal|null
argument_list|,
literal|"failover requires a fencer"
argument_list|)
expr_stmt|;
name|preFailoverChecks
argument_list|(
name|toSvc
argument_list|,
name|toSvcAddr
argument_list|,
name|forceActive
argument_list|)
expr_stmt|;
comment|// Try to make fromSvc standby
name|boolean
name|tryFence
init|=
literal|true
decl_stmt|;
try|try
block|{
name|HAServiceProtocolHelper
operator|.
name|transitionToStandby
argument_list|(
name|fromSvc
argument_list|)
expr_stmt|;
comment|// We should try to fence if we failed or it was forced
name|tryFence
operator|=
name|forceFence
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceFailedException
name|sfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to make "
operator|+
name|fromSvcAddr
operator|+
literal|" standby ("
operator|+
name|sfe
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to make "
operator|+
name|fromSvcAddr
operator|+
literal|" standby (unable to connect)"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Fence fromSvc if it's required or forced by the user
if|if
condition|(
name|tryFence
condition|)
block|{
if|if
condition|(
operator|!
name|fencer
operator|.
name|fence
argument_list|(
name|fromSvcAddr
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
literal|"Unable to fence "
operator|+
name|fromSvcAddr
operator|+
literal|". Fencing failed."
argument_list|)
throw|;
block|}
block|}
comment|// Try to make toSvc active
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
name|Throwable
name|cause
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HAServiceProtocolHelper
operator|.
name|transitionToActive
argument_list|(
name|toSvc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceFailedException
name|sfe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to make "
operator|+
name|toSvcAddr
operator|+
literal|" active ("
operator|+
name|sfe
operator|.
name|getMessage
argument_list|()
operator|+
literal|"). Failing back."
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
name|cause
operator|=
name|sfe
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to make "
operator|+
name|toSvcAddr
operator|+
literal|" active (unable to connect). Failing back."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
name|cause
operator|=
name|ioe
expr_stmt|;
block|}
comment|// We failed to make toSvc active
if|if
condition|(
name|failed
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to failover to "
operator|+
name|toSvcAddr
decl_stmt|;
comment|// Only try to failback if we didn't fence fromSvc
if|if
condition|(
operator|!
name|tryFence
condition|)
block|{
try|try
block|{
comment|// Unconditionally fence toSvc in case it is still trying to
comment|// become active, eg we timed out waiting for its response.
comment|// Unconditionally force fromSvc to become active since it
comment|// was previously active when we initiated failover.
name|failover
argument_list|(
name|toSvc
argument_list|,
name|toSvcAddr
argument_list|,
name|fromSvc
argument_list|,
name|fromSvcAddr
argument_list|,
name|fencer
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
name|msg
operator|+=
literal|". Failback to "
operator|+
name|fromSvcAddr
operator|+
literal|" failed ("
operator|+
name|ffe
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|FailoverFailedException
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

