begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/****************************************************************  * CreateFlag specifies the file create semantic. Users can combine flags like:<br>  *<code>  * EnumSet.of(CreateFlag.CREATE, CreateFlag.APPEND)  *<code>  *<p>  *   * Use the CreateFlag as follows:  *<ol>  *<li> CREATE - to create a file if it does not exist,   * else throw FileAlreadyExists.</li>  *<li> APPEND - to append to a file if it exists,   * else throw FileNotFoundException.</li>  *<li> OVERWRITE - to truncate a file if it exists,   * else throw FileNotFoundException.</li>  *<li> CREATE|APPEND - to create a file if it does not exist,   * else append to an existing file.</li>  *<li> CREATE|OVERWRITE - to create a file if it does not exist,   * else overwrite an existing file.</li>  *<li> SYNC_BLOCK - to force closed blocks to the disk device.  * In addition {@link Syncable#hsync()} should be called after each write,  * if true synchronous behavior is required.</li>  *<li> LAZY_PERSIST - Create the block on transient storage (RAM) if  * available.</li>  *<li> APPEND_NEWBLOCK - Append data to a new block instead of end of the last  * partial block.</li>  *</ol>  *   * Following combinations are not valid and will result in  * {@link HadoopIllegalArgumentException}:  *<ol>  *<li> APPEND|OVERWRITE</li>  *<li> CREATE|APPEND|OVERWRITE</li>  *</ol>  *****************************************************************/
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|enum|CreateFlag
specifier|public
enum|enum
name|CreateFlag
block|{
comment|/**    * Create a file. See javadoc for more description    * already exists    */
DECL|enumConstant|CREATE
name|CREATE
argument_list|(
operator|(
name|short
operator|)
literal|0x01
argument_list|)
block|,
comment|/**    * Truncate/overwrite a file. Same as POSIX O_TRUNC. See javadoc for description.    */
DECL|enumConstant|OVERWRITE
name|OVERWRITE
argument_list|(
operator|(
name|short
operator|)
literal|0x02
argument_list|)
block|,
comment|/**    * Append to a file. See javadoc for more description.    */
DECL|enumConstant|APPEND
name|APPEND
argument_list|(
operator|(
name|short
operator|)
literal|0x04
argument_list|)
block|,
comment|/**    * Force closed blocks to disk. Similar to POSIX O_SYNC. See javadoc for description.    */
DECL|enumConstant|SYNC_BLOCK
name|SYNC_BLOCK
argument_list|(
operator|(
name|short
operator|)
literal|0x08
argument_list|)
block|,
comment|/**    * Create the block on transient storage (RAM) if available. If    * transient storage is unavailable then the block will be created    * on disk.    *    * HDFS will make a best effort to lazily write these files to persistent    * storage, however file contents may be lost at any time due to process/    * node restarts, hence there is no guarantee of data durability.    *    * This flag must only be used for intermediate data whose loss can be    * tolerated by the application.    */
DECL|enumConstant|LAZY_PERSIST
name|LAZY_PERSIST
argument_list|(
operator|(
name|short
operator|)
literal|0x10
argument_list|)
block|,
comment|/**    * Append data to a new block instead of the end of the last partial block.    * This is only useful for APPEND.    */
DECL|enumConstant|NEW_BLOCK
name|NEW_BLOCK
argument_list|(
operator|(
name|short
operator|)
literal|0x20
argument_list|)
block|,
comment|/**    * Advise that a block replica NOT be written to the local DataNode where    * 'local' means the same host as the client is being run on.    */
DECL|enumConstant|InterfaceAudience.LimitedPrivate
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HBase"
block|}
argument_list|)
DECL|enumConstant|NO_LOCAL_WRITE
name|NO_LOCAL_WRITE
argument_list|(
operator|(
name|short
operator|)
literal|0x40
argument_list|)
block|,
comment|/**    * Enforce the file to be a replicated file, no matter what its parent    * directory's replication or erasure coding policy is.    */
DECL|enumConstant|SHOULD_REPLICATE
name|SHOULD_REPLICATE
argument_list|(
operator|(
name|short
operator|)
literal|0x80
argument_list|)
block|;
DECL|field|mode
specifier|private
specifier|final
name|short
name|mode
decl_stmt|;
DECL|method|CreateFlag (short mode)
specifier|private
name|CreateFlag
parameter_list|(
name|short
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|getMode ()
name|short
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
comment|/**    * Validate the CreateFlag and throw exception if it is invalid    * @param flag set of CreateFlag    * @throws HadoopIllegalArgumentException if the CreateFlag is invalid    */
DECL|method|validate (EnumSet<CreateFlag> flag)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
block|{
if|if
condition|(
name|flag
operator|==
literal|null
operator|||
name|flag
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|flag
operator|+
literal|" does not specify any options"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|append
init|=
name|flag
operator|.
name|contains
argument_list|(
name|APPEND
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|overwrite
init|=
name|flag
operator|.
name|contains
argument_list|(
name|OVERWRITE
argument_list|)
decl_stmt|;
comment|// Both append and overwrite is an error
if|if
condition|(
name|append
operator|&&
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|flag
operator|+
literal|"Both append and overwrite options cannot be enabled."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate the CreateFlag for create operation    * @param path Object representing the path; usually String or {@link Path}    * @param pathExists pass true if the path exists in the file system    * @param flag set of CreateFlag    * @throws IOException on error    * @throws HadoopIllegalArgumentException if the CreateFlag is invalid    */
DECL|method|validate (Object path, boolean pathExists, EnumSet<CreateFlag> flag)
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|Object
name|path
parameter_list|,
name|boolean
name|pathExists
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|validate
argument_list|(
name|flag
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|append
init|=
name|flag
operator|.
name|contains
argument_list|(
name|APPEND
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|overwrite
init|=
name|flag
operator|.
name|contains
argument_list|(
name|OVERWRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathExists
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|append
operator|||
name|overwrite
operator|)
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"File already exists: "
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|". Append or overwrite option must be specified in "
operator|+
name|flag
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|flag
operator|.
name|contains
argument_list|(
name|CREATE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Non existing file: "
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|". Create option is not specified in "
operator|+
name|flag
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate the CreateFlag for the append operation. The flag must contain    * APPEND, and cannot contain OVERWRITE.    */
DECL|method|validateForAppend (EnumSet<CreateFlag> flag)
specifier|public
specifier|static
name|void
name|validateForAppend
parameter_list|(
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
block|{
name|validate
argument_list|(
name|flag
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flag
operator|.
name|contains
argument_list|(
name|APPEND
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|flag
operator|+
literal|" does not contain APPEND"
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

