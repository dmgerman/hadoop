begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsFilter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|class|MetricsCollectorImpl
specifier|public
class|class
name|MetricsCollectorImpl
implements|implements
name|MetricsCollector
implements|,
name|Iterable
argument_list|<
name|MetricsRecordBuilderImpl
argument_list|>
block|{
DECL|field|rbs
specifier|private
specifier|final
name|List
argument_list|<
name|MetricsRecordBuilderImpl
argument_list|>
name|rbs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|recordFilter
DECL|field|metricFilter
specifier|private
name|MetricsFilter
name|recordFilter
decl_stmt|,
name|metricFilter
decl_stmt|;
annotation|@
name|Override
DECL|method|addRecord (MetricsInfo info)
specifier|public
name|MetricsRecordBuilderImpl
name|addRecord
parameter_list|(
name|MetricsInfo
name|info
parameter_list|)
block|{
name|boolean
name|acceptable
init|=
name|recordFilter
operator|==
literal|null
operator|||
name|recordFilter
operator|.
name|accepts
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|MetricsRecordBuilderImpl
name|rb
init|=
operator|new
name|MetricsRecordBuilderImpl
argument_list|(
name|this
argument_list|,
name|info
argument_list|,
name|recordFilter
argument_list|,
name|metricFilter
argument_list|,
name|acceptable
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptable
condition|)
name|rbs
operator|.
name|add
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|rb
return|;
block|}
annotation|@
name|Override
DECL|method|addRecord (String name)
specifier|public
name|MetricsRecordBuilderImpl
name|addRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|addRecord
argument_list|(
name|info
argument_list|(
name|name
argument_list|,
name|name
operator|+
literal|" record"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRecords ()
specifier|public
name|List
argument_list|<
name|MetricsRecordImpl
argument_list|>
name|getRecords
parameter_list|()
block|{
name|List
argument_list|<
name|MetricsRecordImpl
argument_list|>
name|recs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|rbs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MetricsRecordBuilderImpl
name|rb
range|:
name|rbs
control|)
block|{
name|MetricsRecordImpl
name|mr
init|=
name|rb
operator|.
name|getRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|recs
operator|.
name|add
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|recs
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|MetricsRecordBuilderImpl
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|rbs
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|rbs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|setRecordFilter (MetricsFilter rf)
name|MetricsCollectorImpl
name|setRecordFilter
parameter_list|(
name|MetricsFilter
name|rf
parameter_list|)
block|{
name|recordFilter
operator|=
name|rf
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMetricFilter (MetricsFilter mf)
name|MetricsCollectorImpl
name|setMetricFilter
parameter_list|(
name|MetricsFilter
name|mf
parameter_list|)
block|{
name|metricFilter
operator|=
name|mf
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

