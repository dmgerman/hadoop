begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * MetricsRecordImpl.java  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.spi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|AbstractMetricsContext
operator|.
name|TagMap
import|;
end_import

begin_comment
comment|/**  * An implementation of MetricsRecord.  Keeps a back-pointer to the context  * from which it was created, and delegates back to it on<code>update</code>  * and<code>remove()</code>.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MetricsRecordImpl
specifier|public
class|class
name|MetricsRecordImpl
implements|implements
name|MetricsRecord
block|{
DECL|field|tagTable
specifier|private
name|TagMap
name|tagTable
init|=
operator|new
name|TagMap
argument_list|()
decl_stmt|;
DECL|field|metricTable
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MetricValue
argument_list|>
name|metricTable
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|MetricValue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|recordName
specifier|private
name|String
name|recordName
decl_stmt|;
DECL|field|context
specifier|private
name|AbstractMetricsContext
name|context
decl_stmt|;
comment|/** Creates a new instance of FileRecord */
DECL|method|MetricsRecordImpl (String recordName, AbstractMetricsContext context)
specifier|protected
name|MetricsRecordImpl
parameter_list|(
name|String
name|recordName
parameter_list|,
name|AbstractMetricsContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|recordName
operator|=
name|recordName
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**    * Returns the record name.     *    * @return the record name    */
annotation|@
name|Override
DECL|method|getRecordName ()
specifier|public
name|String
name|getRecordName
parameter_list|()
block|{
return|return
name|recordName
return|;
block|}
comment|/**    * Sets the named tag to the specified value.    *    * @param tagName name of the tag    * @param tagValue new value of the tag    * @throws MetricsException if the tagName conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setTag (String tagName, String tagValue)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tagName
parameter_list|,
name|String
name|tagValue
parameter_list|)
block|{
if|if
condition|(
name|tagValue
operator|==
literal|null
condition|)
block|{
name|tagValue
operator|=
literal|""
expr_stmt|;
block|}
name|tagTable
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|tagValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named tag to the specified value.    *    * @param tagName name of the tag    * @param tagValue new value of the tag    * @throws MetricsException if the tagName conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setTag (String tagName, int tagValue)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tagName
parameter_list|,
name|int
name|tagValue
parameter_list|)
block|{
name|tagTable
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|tagValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named tag to the specified value.    *    * @param tagName name of the tag    * @param tagValue new value of the tag    * @throws MetricsException if the tagName conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setTag (String tagName, long tagValue)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tagName
parameter_list|,
name|long
name|tagValue
parameter_list|)
block|{
name|tagTable
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|tagValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named tag to the specified value.    *    * @param tagName name of the tag    * @param tagValue new value of the tag    * @throws MetricsException if the tagName conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setTag (String tagName, short tagValue)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tagName
parameter_list|,
name|short
name|tagValue
parameter_list|)
block|{
name|tagTable
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|tagValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named tag to the specified value.    *    * @param tagName name of the tag    * @param tagValue new value of the tag    * @throws MetricsException if the tagName conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setTag (String tagName, byte tagValue)
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tagName
parameter_list|,
name|byte
name|tagValue
parameter_list|)
block|{
name|tagTable
operator|.
name|put
argument_list|(
name|tagName
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|tagValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes any tag of the specified name.    */
annotation|@
name|Override
DECL|method|removeTag (String tagName)
specifier|public
name|void
name|removeTag
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
name|tagTable
operator|.
name|remove
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named metric to the specified value.    *    * @param metricName name of the metric    * @param metricValue new value of the metric    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setMetric (String metricName, int metricValue)
specifier|public
name|void
name|setMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|int
name|metricValue
parameter_list|)
block|{
name|setAbsolute
argument_list|(
name|metricName
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named metric to the specified value.    *    * @param metricName name of the metric    * @param metricValue new value of the metric    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setMetric (String metricName, long metricValue)
specifier|public
name|void
name|setMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|long
name|metricValue
parameter_list|)
block|{
name|setAbsolute
argument_list|(
name|metricName
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named metric to the specified value.    *    * @param metricName name of the metric    * @param metricValue new value of the metric    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setMetric (String metricName, short metricValue)
specifier|public
name|void
name|setMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|short
name|metricValue
parameter_list|)
block|{
name|setAbsolute
argument_list|(
name|metricName
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named metric to the specified value.    *    * @param metricName name of the metric    * @param metricValue new value of the metric    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setMetric (String metricName, byte metricValue)
specifier|public
name|void
name|setMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|byte
name|metricValue
parameter_list|)
block|{
name|setAbsolute
argument_list|(
name|metricName
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the named metric to the specified value.    *    * @param metricName name of the metric    * @param metricValue new value of the metric    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|setMetric (String metricName, float metricValue)
specifier|public
name|void
name|setMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|float
name|metricValue
parameter_list|)
block|{
name|setAbsolute
argument_list|(
name|metricName
argument_list|,
operator|new
name|Float
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the named metric by the specified value.    *    * @param metricName name of the metric    * @param metricValue incremental value    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|incrMetric (String metricName, int metricValue)
specifier|public
name|void
name|incrMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|int
name|metricValue
parameter_list|)
block|{
name|setIncrement
argument_list|(
name|metricName
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the named metric by the specified value.    *    * @param metricName name of the metric    * @param metricValue incremental value    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|incrMetric (String metricName, long metricValue)
specifier|public
name|void
name|incrMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|long
name|metricValue
parameter_list|)
block|{
name|setIncrement
argument_list|(
name|metricName
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the named metric by the specified value.    *    * @param metricName name of the metric    * @param metricValue incremental value    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|incrMetric (String metricName, short metricValue)
specifier|public
name|void
name|incrMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|short
name|metricValue
parameter_list|)
block|{
name|setIncrement
argument_list|(
name|metricName
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the named metric by the specified value.    *    * @param metricName name of the metric    * @param metricValue incremental value    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|incrMetric (String metricName, byte metricValue)
specifier|public
name|void
name|incrMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|byte
name|metricValue
parameter_list|)
block|{
name|setIncrement
argument_list|(
name|metricName
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the named metric by the specified value.    *    * @param metricName name of the metric    * @param metricValue incremental value    * @throws MetricsException if the metricName or the type of the metricValue     * conflicts with the configuration    */
annotation|@
name|Override
DECL|method|incrMetric (String metricName, float metricValue)
specifier|public
name|void
name|incrMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|float
name|metricValue
parameter_list|)
block|{
name|setIncrement
argument_list|(
name|metricName
argument_list|,
operator|new
name|Float
argument_list|(
name|metricValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setAbsolute (String metricName, Number metricValue)
specifier|private
name|void
name|setAbsolute
parameter_list|(
name|String
name|metricName
parameter_list|,
name|Number
name|metricValue
parameter_list|)
block|{
name|metricTable
operator|.
name|put
argument_list|(
name|metricName
argument_list|,
operator|new
name|MetricValue
argument_list|(
name|metricValue
argument_list|,
name|MetricValue
operator|.
name|ABSOLUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setIncrement (String metricName, Number metricValue)
specifier|private
name|void
name|setIncrement
parameter_list|(
name|String
name|metricName
parameter_list|,
name|Number
name|metricValue
parameter_list|)
block|{
name|metricTable
operator|.
name|put
argument_list|(
name|metricName
argument_list|,
operator|new
name|MetricValue
argument_list|(
name|metricValue
argument_list|,
name|MetricValue
operator|.
name|INCREMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the table of buffered data which is to be sent periodically.    * If the tag values match an existing row, that row is updated;     * otherwise, a new row is added.    */
annotation|@
name|Override
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
name|context
operator|.
name|update
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes the row, if it exists, in the buffered data table having tags     * that equal the tags that have been set on this record.     */
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|context
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getTagTable ()
name|TagMap
name|getTagTable
parameter_list|()
block|{
return|return
name|tagTable
return|;
block|}
DECL|method|getMetricTable ()
name|Map
argument_list|<
name|String
argument_list|,
name|MetricValue
argument_list|>
name|getMetricTable
parameter_list|()
block|{
return|return
name|metricTable
return|;
block|}
block|}
end_class

end_unit

