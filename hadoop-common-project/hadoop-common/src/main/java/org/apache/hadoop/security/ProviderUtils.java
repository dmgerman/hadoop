begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|CredentialProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|LocalJavaKeyStoreProvider
import|;
end_import

begin_comment
comment|/**  * Utility methods for both key and credential provider APIs.  *  */
end_comment

begin_class
DECL|class|ProviderUtils
specifier|public
specifier|final
class|class
name|ProviderUtils
block|{
annotation|@
name|VisibleForTesting
DECL|field|NO_PASSWORD_WARN
specifier|public
specifier|static
specifier|final
name|String
name|NO_PASSWORD_WARN
init|=
literal|"WARNING: You have accepted the use of the default provider password\n"
operator|+
literal|"by not configuring a password in one of the two following locations:\n"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|NO_PASSWORD_ERROR
specifier|public
specifier|static
specifier|final
name|String
name|NO_PASSWORD_ERROR
init|=
literal|"ERROR: The provider cannot find a password in the expected "
operator|+
literal|"locations.\nPlease supply a password using one of the "
operator|+
literal|"following two mechanisms:\n"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|NO_PASSWORD_CONT
specifier|public
specifier|static
specifier|final
name|String
name|NO_PASSWORD_CONT
init|=
literal|"Continuing with the default provider password.\n"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|NO_PASSWORD_INSTRUCTIONS_DOC
specifier|public
specifier|static
specifier|final
name|String
name|NO_PASSWORD_INSTRUCTIONS_DOC
init|=
literal|"Please review the documentation regarding provider passwords in\n"
operator|+
literal|"the keystore passwords section of the Credential Provider API\n"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProviderUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Hidden ctor to ensure that this utility class isn't    * instantiated explicitly.    */
DECL|method|ProviderUtils ()
specifier|private
name|ProviderUtils
parameter_list|()
block|{
comment|// hide ctor for checkstyle compliance
block|}
comment|/**    * Convert a nested URI to decode the underlying path. The translation takes    * the authority and parses it into the underlying scheme and authority.    * For example, "myscheme://hdfs@nn/my/path" is converted to    * "hdfs://nn/my/path".    * @param nestedUri the URI from the nested URI    * @return the unnested path    */
DECL|method|unnestUri (URI nestedUri)
specifier|public
specifier|static
name|Path
name|unnestUri
parameter_list|(
name|URI
name|nestedUri
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|nestedUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|nestedUri
operator|.
name|getAuthority
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedUri
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedUri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Mangle given local java keystore file URI to allow use as a    * LocalJavaKeyStoreProvider.    * @param localFile absolute URI with file scheme and no authority component.    *                  i.e. return of File.toURI,    *                  e.g. file:///home/larry/creds.jceks    * @return URI of the form localjceks://file/home/larry/creds.jceks    * @throws IllegalArgumentException if localFile isn't not a file uri or if it    *                                  has an authority component.    * @throws URISyntaxException if the wrapping process violates RFC 2396    */
DECL|method|nestURIForLocalJavaKeyStoreProvider (final URI localFile)
specifier|public
specifier|static
name|URI
name|nestURIForLocalJavaKeyStoreProvider
parameter_list|(
specifier|final
name|URI
name|localFile
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
operator|!
operator|(
literal|"file"
operator|.
name|equals
argument_list|(
name|localFile
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"passed URI had a scheme other than "
operator|+
literal|"file."
argument_list|)
throw|;
block|}
if|if
condition|(
name|localFile
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"passed URI must not have an "
operator|+
literal|"authority component. For non-local keystores, please use "
operator|+
name|JavaKeyStoreProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|LocalJavaKeyStoreProvider
operator|.
name|SCHEME_NAME
argument_list|,
literal|"//file"
operator|+
name|localFile
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|,
name|localFile
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * There are certain integrations of the credential provider API in    * which a recursive dependency between the provider and the hadoop    * filesystem abstraction causes a problem. These integration points    * need to leverage this utility method to remove problematic provider    * types from the existing provider path within the configuration.    *    * @param config the existing configuration with provider path    * @param fileSystemClass the class which providers must be compatible    * @return Configuration clone with new provider path    */
DECL|method|excludeIncompatibleCredentialProviders ( Configuration config, Class<? extends FileSystem> fileSystemClass)
specifier|public
specifier|static
name|Configuration
name|excludeIncompatibleCredentialProviders
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|fileSystemClass
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|providerPath
init|=
name|config
operator|.
name|get
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerPath
operator|==
literal|null
condition|)
block|{
return|return
name|config
return|;
block|}
name|StringBuffer
name|newProviderPath
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|providers
init|=
name|providerPath
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|provider
range|:
name|providers
control|)
block|{
try|try
block|{
name|path
operator|=
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
name|provider
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|scheme
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|clazz
operator|=
name|FileSystem
operator|.
name|getFileSystemClass
argument_list|(
name|scheme
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// not all providers are filesystem based
comment|// for instance user:/// will not be able to
comment|// have a filesystem class associated with it.
if|if
condition|(
name|newProviderPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newProviderPath
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|newProviderPath
operator|.
name|append
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fileSystemClass
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filesystem based provider"
operator|+
literal|" excluded from provider path due to recursive dependency: "
operator|+
name|provider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|newProviderPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newProviderPath
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|newProviderPath
operator|.
name|append
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Credential Provider URI is invalid."
operator|+
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|effectivePath
init|=
name|newProviderPath
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|.
name|equals
argument_list|(
name|providerPath
argument_list|)
condition|)
block|{
return|return
name|config
return|;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectivePath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|conf
operator|.
name|unset
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|effectivePath
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * The password is either found in the environment or in a file. This    * routine implements the logic for locating the password in these    * locations.    *    * @param envWithPass  The name of the environment variable that might    *                     contain the password. Must not be null.    * @param fileWithPass The name of a file that could contain the password.    *                     Can be null.    * @return The password as a char []; null if not found.    * @throws IOException If fileWithPass is non-null and points to a    * nonexistent file or a file that fails to open and be read properly.    */
DECL|method|locatePassword (String envWithPass, String fileWithPass)
specifier|public
specifier|static
name|char
index|[]
name|locatePassword
parameter_list|(
name|String
name|envWithPass
parameter_list|,
name|String
name|fileWithPass
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|pass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|containsKey
argument_list|(
name|envWithPass
argument_list|)
condition|)
block|{
name|pass
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|envWithPass
argument_list|)
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pass
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fileWithPass
operator|!=
literal|null
condition|)
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|pwdFile
init|=
name|cl
operator|.
name|getResource
argument_list|(
name|fileWithPass
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwdFile
operator|==
literal|null
condition|)
block|{
comment|// Provided Password file does not exist
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Password file does not exist"
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|pwdFile
operator|.
name|openStream
argument_list|()
init|)
block|{
name|pass
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|pass
return|;
block|}
DECL|method|noPasswordInstruction (String envKey, String fileKey)
specifier|private
specifier|static
name|String
name|noPasswordInstruction
parameter_list|(
name|String
name|envKey
parameter_list|,
name|String
name|fileKey
parameter_list|)
block|{
return|return
literal|"    * In the environment variable "
operator|+
name|envKey
operator|+
literal|"\n"
operator|+
literal|"    * In a file referred to by the configuration entry\n"
operator|+
literal|"      "
operator|+
name|fileKey
operator|+
literal|".\n"
operator|+
name|NO_PASSWORD_INSTRUCTIONS_DOC
return|;
block|}
DECL|method|noPasswordWarning (String envKey, String fileKey)
specifier|public
specifier|static
name|String
name|noPasswordWarning
parameter_list|(
name|String
name|envKey
parameter_list|,
name|String
name|fileKey
parameter_list|)
block|{
return|return
name|NO_PASSWORD_WARN
operator|+
name|noPasswordInstruction
argument_list|(
name|envKey
argument_list|,
name|fileKey
argument_list|)
operator|+
name|NO_PASSWORD_CONT
return|;
block|}
DECL|method|noPasswordError (String envKey, String fileKey)
specifier|public
specifier|static
name|String
name|noPasswordError
parameter_list|(
name|String
name|envKey
parameter_list|,
name|String
name|fileKey
parameter_list|)
block|{
return|return
name|NO_PASSWORD_ERROR
operator|+
name|noPasswordInstruction
argument_list|(
name|envKey
argument_list|,
name|fileKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

