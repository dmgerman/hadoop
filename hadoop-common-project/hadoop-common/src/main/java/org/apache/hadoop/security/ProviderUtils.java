begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|JavaKeyStoreProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
operator|.
name|LocalJavaKeyStoreProvider
import|;
end_import

begin_class
DECL|class|ProviderUtils
specifier|public
class|class
name|ProviderUtils
block|{
comment|/**    * Convert a nested URI to decode the underlying path. The translation takes    * the authority and parses it into the underlying scheme and authority.    * For example, "myscheme://hdfs@nn/my/path" is converted to    * "hdfs://nn/my/path".    * @param nestedUri the URI from the nested URI    * @return the unnested path    */
DECL|method|unnestUri (URI nestedUri)
specifier|public
specifier|static
name|Path
name|unnestUri
parameter_list|(
name|URI
name|nestedUri
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|nestedUri
operator|.
name|getAuthority
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedUri
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nestedUri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|nestedUri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Mangle given local java keystore file URI to allow use as a    * LocalJavaKeyStoreProvider.    * @param localFile absolute URI with file scheme and no authority component.    *                  i.e. return of File.toURI,    *                  e.g. file:///home/larry/creds.jceks    * @return URI of the form localjceks://file/home/larry/creds.jceks    * @throws IllegalArgumentException if localFile isn't not a file uri or if it    *                                  has an authority component.    * @throws URISyntaxException if the wrapping process violates RFC 2396    */
DECL|method|nestURIForLocalJavaKeyStoreProvider (final URI localFile)
specifier|public
specifier|static
name|URI
name|nestURIForLocalJavaKeyStoreProvider
parameter_list|(
specifier|final
name|URI
name|localFile
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
operator|!
operator|(
literal|"file"
operator|.
name|equals
argument_list|(
name|localFile
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"passed URI had a scheme other than "
operator|+
literal|"file."
argument_list|)
throw|;
block|}
if|if
condition|(
name|localFile
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"passed URI must not have an "
operator|+
literal|"authority component. For non-local keystores, please use "
operator|+
name|JavaKeyStoreProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|LocalJavaKeyStoreProvider
operator|.
name|SCHEME_NAME
argument_list|,
literal|"//file"
operator|+
name|localFile
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|,
name|localFile
operator|.
name|getFragment
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

