begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A KeyProvider extension with the ability to add a renewer's Delegation   * Tokens to the provided Credentials.  */
end_comment

begin_class
DECL|class|KeyProviderDelegationTokenExtension
specifier|public
class|class
name|KeyProviderDelegationTokenExtension
extends|extends
name|KeyProviderExtension
argument_list|<
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
argument_list|>
block|{
DECL|field|DEFAULT_EXTENSION
specifier|private
specifier|static
name|DelegationTokenExtension
name|DEFAULT_EXTENSION
init|=
operator|new
name|DefaultDelegationTokenExtension
argument_list|()
decl_stmt|;
comment|/**    * DelegationTokenExtension is a type of Extension that exposes methods to     * needed to work with Delegation Tokens.    */
DECL|interface|DelegationTokenExtension
specifier|public
interface|interface
name|DelegationTokenExtension
extends|extends
name|KeyProviderExtension
operator|.
name|Extension
block|{
comment|/**      * The implementer of this class will take a renewer and add all      * delegation tokens associated with the renewer to the       *<code>Credentials</code> object if it is not already present,       * @param renewer the user allowed to renew the delegation tokens      * @param credentials cache in which to add new delegation tokens      * @return list of new delegation tokens      * @throws IOException thrown if IOException if an IO error occurs.      */
DECL|method|addDelegationTokens (final String renewer, Credentials credentials)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokens
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Default implementation of {@link DelegationTokenExtension} that    * implements the method as a no-op.    */
DECL|class|DefaultDelegationTokenExtension
specifier|private
specifier|static
class|class
name|DefaultDelegationTokenExtension
implements|implements
name|DelegationTokenExtension
block|{
annotation|@
name|Override
DECL|method|addDelegationTokens (String renewer, Credentials credentials)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokens
parameter_list|(
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|KeyProviderDelegationTokenExtension (KeyProvider keyProvider, DelegationTokenExtension extensions)
specifier|private
name|KeyProviderDelegationTokenExtension
parameter_list|(
name|KeyProvider
name|keyProvider
parameter_list|,
name|DelegationTokenExtension
name|extensions
parameter_list|)
block|{
name|super
argument_list|(
name|keyProvider
argument_list|,
name|extensions
argument_list|)
expr_stmt|;
block|}
comment|/**    * Passes the renewer and Credentials object to the underlying     * {@link DelegationTokenExtension}     * @param renewer the user allowed to renew the delegation tokens    * @param credentials cache in which to add new delegation tokens    * @return list of new delegation tokens    * @throws IOException thrown if IOException if an IO error occurs.    */
DECL|method|addDelegationTokens (final String renewer, Credentials credentials)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokens
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getExtension
argument_list|()
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
return|;
block|}
comment|/**    * Creates a<code>KeyProviderDelegationTokenExtension</code> using a given     * {@link KeyProvider}.    *<p/>    * If the given<code>KeyProvider</code> implements the     * {@link DelegationTokenExtension} interface the<code>KeyProvider</code>     * itself will provide the extension functionality, otherwise a default     * extension implementation will be used.    *     * @param keyProvider<code>KeyProvider</code> to use to create the     *<code>KeyProviderDelegationTokenExtension</code> extension.    * @return a<code>KeyProviderDelegationTokenExtension</code> instance     * using the given<code>KeyProvider</code>.    */
specifier|public
specifier|static
name|KeyProviderDelegationTokenExtension
DECL|method|createKeyProviderDelegationTokenExtension (KeyProvider keyProvider)
name|createKeyProviderDelegationTokenExtension
parameter_list|(
name|KeyProvider
name|keyProvider
parameter_list|)
block|{
name|DelegationTokenExtension
name|delTokExtension
init|=
operator|(
name|keyProvider
operator|instanceof
name|DelegationTokenExtension
operator|)
condition|?
operator|(
name|DelegationTokenExtension
operator|)
name|keyProvider
else|:
name|DEFAULT_EXTENSION
decl_stmt|;
return|return
operator|new
name|KeyProviderDelegationTokenExtension
argument_list|(
name|keyProvider
argument_list|,
name|delTokExtension
argument_list|)
return|;
block|}
block|}
end_class

end_unit

