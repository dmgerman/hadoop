begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements an intrusive doubly-linked list.  *  * An intrusive linked list is one in which the elements themselves are  * responsible for storing the pointers to previous and next elements.  * This can save a lot of memory if there are many elements in the list or  * many lists.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|IntrusiveCollection
specifier|public
class|class
name|IntrusiveCollection
parameter_list|<
name|E
extends|extends
name|IntrusiveCollection
operator|.
name|Element
parameter_list|>
implements|implements
name|Collection
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * An element contained in this list.    *    * We pass the list itself as a parameter so that elements can belong to    * multiple lists.  (The element will need to store separate prev and next    * pointers for each.)    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|interface|Element
specifier|public
interface|interface
name|Element
block|{
comment|/**      * Insert this element into the list.  This is the first thing that will      * be called on the element.      */
DECL|method|insertInternal (IntrusiveCollection<? extends Element> list, Element prev, Element next)
name|void
name|insertInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|,
name|Element
name|next
parameter_list|)
function_decl|;
comment|/**      * Set the prev pointer of an element already in the list.      */
DECL|method|setPrev (IntrusiveCollection<? extends Element> list, Element prev)
name|void
name|setPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|)
function_decl|;
comment|/**      * Set the next pointer of an element already in the list.      */
DECL|method|setNext (IntrusiveCollection<? extends Element> list, Element next)
name|void
name|setNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|next
parameter_list|)
function_decl|;
comment|/**      * Remove an element from the list.  This is the last thing that will be      * called on an element.      */
DECL|method|removeInternal (IntrusiveCollection<? extends Element> list)
name|void
name|removeInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
function_decl|;
comment|/**      * Get the prev pointer of an element.      */
DECL|method|getPrev (IntrusiveCollection<? extends Element> list)
name|Element
name|getPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
function_decl|;
comment|/**      * Get the next pointer of an element.      */
DECL|method|getNext (IntrusiveCollection<? extends Element> list)
name|Element
name|getNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
function_decl|;
comment|/**      * Returns true if this element is in the provided list.      */
DECL|method|isInList (IntrusiveCollection<? extends Element> list)
name|boolean
name|isInList
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
function_decl|;
block|}
DECL|field|root
specifier|private
name|Element
name|root
init|=
operator|new
name|Element
argument_list|()
block|{
comment|// We keep references to the first and last elements for easy access.
name|Element
name|first
init|=
name|this
decl_stmt|;
name|Element
name|last
init|=
name|this
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|insertInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't insert root element"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|list
operator|==
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
name|last
operator|=
name|prev
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|list
operator|==
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
name|first
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't remove root element"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|list
operator|==
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|list
operator|==
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInList
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|==
name|IntrusiveCollection
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"root"
return|;
comment|// + IntrusiveCollection.this + "]";
block|}
block|}
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/**    * An iterator over the intrusive collection.    *    * Currently, you can remove elements from the list using    * #{IntrusiveIterator#remove()}, but modifying the collection in other    * ways during the iteration is not supported.    */
DECL|class|IntrusiveIterator
specifier|public
class|class
name|IntrusiveIterator
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
DECL|field|cur
name|Element
name|cur
decl_stmt|;
DECL|field|next
name|Element
name|next
decl_stmt|;
DECL|method|IntrusiveIterator ()
name|IntrusiveIterator
parameter_list|()
block|{
name|this
operator|.
name|cur
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|cur
operator|.
name|getNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|next
operator|!=
name|root
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|cur
operator|.
name|getNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
name|root
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
operator|(
name|E
operator|)
name|cur
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already called remove "
operator|+
literal|"once on this element."
argument_list|)
throw|;
block|}
name|next
operator|=
name|removeElement
argument_list|(
name|cur
argument_list|)
expr_stmt|;
name|cur
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|removeElement (Element elem)
specifier|private
name|Element
name|removeElement
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|Element
name|prev
init|=
name|elem
operator|.
name|getPrev
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
decl_stmt|;
name|Element
name|next
init|=
name|elem
operator|.
name|getNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
decl_stmt|;
name|elem
operator|.
name|removeInternal
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|next
operator|.
name|setPrev
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|size
operator|--
expr_stmt|;
return|return
name|next
return|;
block|}
comment|/**    * Get an iterator over the list.  This can be used to remove elements.    * It is not safe to do concurrent modifications from other threads while    * using this iterator.    *     * @return         The iterator.    */
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|IntrusiveIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|o
decl_stmt|;
return|return
name|element
operator|.
name|isInList
argument_list|(
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toArray ()
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|Object
name|ret
index|[]
init|=
operator|new
name|Object
index|[
name|size
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|toArray (T[] array)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|size
condition|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
name|toArray
argument_list|()
return|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|array
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|T
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|array
return|;
block|}
comment|/**    * Add an element to the end of the list.    *     * @param elem     The new element to add.    */
annotation|@
name|Override
DECL|method|add (E elem)
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|elem
parameter_list|)
block|{
if|if
condition|(
name|elem
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|elem
operator|.
name|isInList
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Element
name|prev
init|=
name|root
operator|.
name|getPrev
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
decl_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|root
operator|.
name|setPrev
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|.
name|insertInternal
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|prev
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add an element to the front of the list.    *    * @param elem     The new element to add.    */
DECL|method|addFirst (Element elem)
specifier|public
name|boolean
name|addFirst
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
if|if
condition|(
name|elem
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|elem
operator|.
name|isInList
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Element
name|next
init|=
name|root
operator|.
name|getNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|)
decl_stmt|;
name|next
operator|.
name|setPrev
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|root
operator|.
name|setNext
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|.
name|insertInternal
argument_list|(
name|IntrusiveCollection
operator|.
name|this
argument_list|,
name|root
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntrusiveCollection
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|remove (Object o)
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|elem
operator|.
name|isInList
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|removeElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsAll (Collection<?> collection)
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|addAll (Collection<? extends E> collection)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|E
name|elem
range|:
name|collection
control|)
block|{
if|if
condition|(
name|add
argument_list|(
name|elem
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|removeAll (Collection<?> collection)
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|elem
range|:
name|collection
control|)
block|{
if|if
condition|(
name|remove
argument_list|(
name|elem
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
annotation|@
name|Override
DECL|method|retainAll (Collection<?> collection)
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|elem
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|collection
operator|.
name|contains
argument_list|(
name|elem
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
comment|/**    * Remove all elements.    */
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

