begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p>  * A factory for creating retry proxies.  *</p>  */
end_comment

begin_class
DECL|class|RetryProxy
specifier|public
class|class
name|RetryProxy
block|{
comment|/**    *<p>    * Create a proxy for an interface of an implementation class    * using the same retry policy for each method in the interface.     *</p>    * @param iface the interface that the retry will implement    * @param implementation the instance whose methods should be retried    * @param retryPolicy the policy for retrying method call failures    * @return the retry proxy    */
DECL|method|create (Class<T> iface, T implementation, RetryPolicy retryPolicy)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|,
name|T
name|implementation
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
return|return
name|RetryProxy
operator|.
name|create
argument_list|(
name|iface
argument_list|,
operator|new
name|DefaultFailoverProxyProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|iface
argument_list|,
name|implementation
argument_list|)
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
comment|/**    * Create a proxy for an interface of implementations of that interface using    * the given {@link FailoverProxyProvider} and the same retry policy for each    * method in the interface.    *     * @param iface the interface that the retry will implement    * @param proxyProvider provides implementation instances whose methods should be retried    * @param retryPolicy the policy for retrying or failing over method call failures    * @return the retry proxy    */
DECL|method|create (Class<T> iface, FailoverProxyProvider<T> proxyProvider, RetryPolicy retryPolicy)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|,
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|proxyProvider
operator|.
name|getInterface
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|iface
block|}
operator|,
operator|new
name|RetryInvocationHandler
argument_list|<
name|T
argument_list|>
argument_list|(
name|proxyProvider
argument_list|,
name|retryPolicy
argument_list|)
block|)
function|;
block|}
end_class

begin_comment
comment|/**    * Create a proxy for an interface of an implementation class    * using the a set of retry policies specified by method name.    * If no retry policy is defined for a method then a default of    * {@link RetryPolicies#TRY_ONCE_THEN_FAIL} is used.    *     * @param iface the interface that the retry will implement    * @param implementation the instance whose methods should be retried    * @param methodNameToPolicyMap a map of method names to retry policies    * @return the retry proxy    */
end_comment

begin_function
DECL|method|create (Class<T> iface, T implementation, Map<String,RetryPolicy> methodNameToPolicyMap)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|,
name|T
name|implementation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|iface
argument_list|,
operator|new
name|DefaultFailoverProxyProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|iface
argument_list|,
name|implementation
argument_list|)
argument_list|,
name|methodNameToPolicyMap
argument_list|,
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Create a proxy for an interface of implementations of that interface using    * the given {@link FailoverProxyProvider} and the a set of retry policies    * specified by method name. If no retry policy is defined for a method then a    * default of {@link RetryPolicies#TRY_ONCE_THEN_FAIL} is used.    *     * @param iface the interface that the retry will implement    * @param proxyProvider provides implementation instances whose methods should be retried    * @param methodNameToPolicyMapa map of method names to retry policies    * @return the retry proxy    */
end_comment

begin_function
DECL|method|create (Class<T> iface, FailoverProxyProvider<T> proxyProvider, Map<String,RetryPolicy> methodNameToPolicyMap, RetryPolicy defaultPolicy)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|create
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|,
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|proxyProvider
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
parameter_list|,
name|RetryPolicy
name|defaultPolicy
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|proxyProvider
operator|.
name|getInterface
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|iface
block|}
operator|,
operator|new
name|RetryInvocationHandler
argument_list|<
name|T
argument_list|>
argument_list|(
name|proxyProvider
argument_list|,
name|defaultPolicy
argument_list|,
name|methodNameToPolicyMap
argument_list|)
block|)
function|;
end_function

unit|} }
end_unit

