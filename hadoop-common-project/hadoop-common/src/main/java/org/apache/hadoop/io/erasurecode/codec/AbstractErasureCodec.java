begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.codec
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|grouper
operator|.
name|BlockGrouper
import|;
end_import

begin_comment
comment|/**  * Abstract Erasure Codec that implements {@link ErasureCodec}.  */
end_comment

begin_class
DECL|class|AbstractErasureCodec
specifier|public
specifier|abstract
class|class
name|AbstractErasureCodec
extends|extends
name|Configured
implements|implements
name|ErasureCodec
block|{
DECL|field|schema
specifier|private
name|ECSchema
name|schema
decl_stmt|;
annotation|@
name|Override
DECL|method|setSchema (ECSchema schema)
specifier|public
name|void
name|setSchema
parameter_list|(
name|ECSchema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|schema
operator|.
name|getCodecName
argument_list|()
return|;
block|}
DECL|method|getSchema ()
specifier|protected
name|ECSchema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
DECL|method|createBlockGrouper ()
specifier|public
name|BlockGrouper
name|createBlockGrouper
parameter_list|()
block|{
name|BlockGrouper
name|blockGrouper
init|=
operator|new
name|BlockGrouper
argument_list|()
decl_stmt|;
name|blockGrouper
operator|.
name|setSchema
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|blockGrouper
return|;
block|}
annotation|@
name|Override
DECL|method|createEncoder ()
specifier|public
name|ErasureCoder
name|createEncoder
parameter_list|()
block|{
name|ErasureCoder
name|encoder
init|=
name|doCreateEncoder
argument_list|()
decl_stmt|;
name|prepareErasureCoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
return|return
name|encoder
return|;
block|}
comment|/**    * Create a new encoder instance to be initialized afterwards.    * @return encoder    */
DECL|method|doCreateEncoder ()
specifier|protected
specifier|abstract
name|ErasureCoder
name|doCreateEncoder
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|createDecoder ()
specifier|public
name|ErasureCoder
name|createDecoder
parameter_list|()
block|{
name|ErasureCoder
name|decoder
init|=
name|doCreateDecoder
argument_list|()
decl_stmt|;
name|prepareErasureCoder
argument_list|(
name|decoder
argument_list|)
expr_stmt|;
return|return
name|decoder
return|;
block|}
comment|/**    * Create a new decoder instance to be initialized afterwards.    * @return decoder    */
DECL|method|doCreateDecoder ()
specifier|protected
specifier|abstract
name|ErasureCoder
name|doCreateDecoder
parameter_list|()
function_decl|;
DECL|method|prepareErasureCoder (ErasureCoder erasureCoder)
specifier|private
name|void
name|prepareErasureCoder
parameter_list|(
name|ErasureCoder
name|erasureCoder
parameter_list|)
block|{
if|if
condition|(
name|getSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No schema been set yet"
argument_list|)
throw|;
block|}
name|erasureCoder
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|erasureCoder
operator|.
name|initialize
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

