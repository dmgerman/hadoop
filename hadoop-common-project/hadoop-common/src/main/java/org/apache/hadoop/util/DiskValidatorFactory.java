begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * The factory class to create instance of {@link DiskValidator}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DiskValidatorFactory
specifier|public
specifier|final
class|class
name|DiskValidatorFactory
block|{
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|DiskValidator
argument_list|>
argument_list|,
name|DiskValidator
argument_list|>
DECL|field|INSTANCES
name|INSTANCES
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|DiskValidatorFactory ()
specifier|private
name|DiskValidatorFactory
parameter_list|()
block|{   }
comment|/**    * Returns a {@link DiskValidator} instance corresponding to the passed clazz.    * @param clazz a class extends {@link DiskValidator}    */
specifier|public
specifier|static
name|DiskValidator
DECL|method|getInstance (Class<? extends DiskValidator> clazz)
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|DiskValidator
argument_list|>
name|clazz
parameter_list|)
block|{
name|DiskValidator
name|diskValidator
decl_stmt|;
if|if
condition|(
name|INSTANCES
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|diskValidator
operator|=
name|INSTANCES
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diskValidator
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check the return of putIfAbsent() to see if any other thread have put
comment|// the instance with the same key into INSTANCES
name|DiskValidator
name|diskValidatorRet
init|=
name|INSTANCES
operator|.
name|putIfAbsent
argument_list|(
name|clazz
argument_list|,
name|diskValidator
argument_list|)
decl_stmt|;
if|if
condition|(
name|diskValidatorRet
operator|!=
literal|null
condition|)
block|{
name|diskValidator
operator|=
name|diskValidatorRet
expr_stmt|;
block|}
block|}
return|return
name|diskValidator
return|;
block|}
comment|/**    * Returns {@link DiskValidator} instance corresponding to its name.    * The diskValidator parameter can be "basic" for {@link BasicDiskValidator}.    * @param diskValidator canonical class name, for example, "basic"    * @throws DiskErrorException if the class cannot be located    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInstance (String diskValidator)
specifier|public
specifier|static
name|DiskValidator
name|getInstance
parameter_list|(
name|String
name|diskValidator
parameter_list|)
throws|throws
name|DiskErrorException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|clazz
decl_stmt|;
if|if
condition|(
name|diskValidator
operator|.
name|equalsIgnoreCase
argument_list|(
name|BasicDiskValidator
operator|.
name|NAME
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|BasicDiskValidator
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|diskValidator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
name|diskValidator
operator|+
literal|" DiskValidator class not found."
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
block|}
return|return
name|getInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

