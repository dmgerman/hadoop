begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|CombinedIPWhiteList
specifier|public
class|class
name|CombinedIPWhiteList
implements|implements
name|IPList
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CombinedIPWhiteList
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOCALHOST_IP
specifier|private
specifier|static
specifier|final
name|String
name|LOCALHOST_IP
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|networkLists
specifier|private
specifier|final
name|IPList
index|[]
name|networkLists
decl_stmt|;
DECL|method|CombinedIPWhiteList (String fixedWhiteListFile, String variableWhiteListFile, long cacheExpiryInSeconds)
specifier|public
name|CombinedIPWhiteList
parameter_list|(
name|String
name|fixedWhiteListFile
parameter_list|,
name|String
name|variableWhiteListFile
parameter_list|,
name|long
name|cacheExpiryInSeconds
parameter_list|)
block|{
name|IPList
name|fixedNetworkList
init|=
operator|new
name|FileBasedIPList
argument_list|(
name|fixedWhiteListFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|variableWhiteListFile
operator|!=
literal|null
condition|)
block|{
name|IPList
name|variableNetworkList
init|=
operator|new
name|CacheableIPList
argument_list|(
operator|new
name|FileBasedIPList
argument_list|(
name|variableWhiteListFile
argument_list|)
argument_list|,
name|cacheExpiryInSeconds
argument_list|)
decl_stmt|;
name|networkLists
operator|=
operator|new
name|IPList
index|[]
block|{
name|fixedNetworkList
block|,
name|variableNetworkList
block|}
expr_stmt|;
block|}
else|else
block|{
name|networkLists
operator|=
operator|new
name|IPList
index|[]
block|{
name|fixedNetworkList
block|}
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isIn (String ipAddress)
specifier|public
name|boolean
name|isIn
parameter_list|(
name|String
name|ipAddress
parameter_list|)
block|{
if|if
condition|(
name|ipAddress
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ipAddress is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOCALHOST_IP
operator|.
name|equals
argument_list|(
name|ipAddress
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|IPList
name|networkList
range|:
name|networkLists
control|)
block|{
if|if
condition|(
name|networkList
operator|.
name|isIn
argument_list|(
name|ipAddress
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

