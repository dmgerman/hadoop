begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
operator|.
name|INode
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|S3Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|S3ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|impl
operator|.
name|rest
operator|.
name|httpclient
operator|.
name|RestS3Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|model
operator|.
name|S3Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jets3t
operator|.
name|service
operator|.
name|security
operator|.
name|AWSCredentials
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Jets3tFileSystemStore
class|class
name|Jets3tFileSystemStore
implements|implements
name|FileSystemStore
block|{
DECL|field|FILE_SYSTEM_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_NAME
init|=
literal|"fs"
decl_stmt|;
DECL|field|FILE_SYSTEM_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_VALUE
init|=
literal|"Hadoop"
decl_stmt|;
DECL|field|FILE_SYSTEM_TYPE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_TYPE_NAME
init|=
literal|"fs-type"
decl_stmt|;
DECL|field|FILE_SYSTEM_TYPE_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_TYPE_VALUE
init|=
literal|"block"
decl_stmt|;
DECL|field|FILE_SYSTEM_VERSION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_VERSION_NAME
init|=
literal|"fs-version"
decl_stmt|;
DECL|field|FILE_SYSTEM_VERSION_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|FILE_SYSTEM_VERSION_VALUE
init|=
literal|"1"
decl_stmt|;
DECL|field|METADATA
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|METADATA
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|METADATA
operator|.
name|put
argument_list|(
name|FILE_SYSTEM_NAME
argument_list|,
name|FILE_SYSTEM_VALUE
argument_list|)
expr_stmt|;
name|METADATA
operator|.
name|put
argument_list|(
name|FILE_SYSTEM_TYPE_NAME
argument_list|,
name|FILE_SYSTEM_TYPE_VALUE
argument_list|)
expr_stmt|;
name|METADATA
operator|.
name|put
argument_list|(
name|FILE_SYSTEM_VERSION_NAME
argument_list|,
name|FILE_SYSTEM_VERSION_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|field|PATH_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
DECL|field|BLOCK_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BLOCK_PREFIX
init|=
literal|"block_"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|s3Service
specifier|private
name|S3Service
name|s3Service
decl_stmt|;
DECL|field|bucket
specifier|private
name|S3Bucket
name|bucket
decl_stmt|;
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Jets3tFileSystemStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|S3Credentials
name|s3Credentials
init|=
operator|new
name|S3Credentials
argument_list|()
decl_stmt|;
name|s3Credentials
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|AWSCredentials
name|awsCredentials
init|=
operator|new
name|AWSCredentials
argument_list|(
name|s3Credentials
operator|.
name|getAccessKey
argument_list|()
argument_list|,
name|s3Credentials
operator|.
name|getSecretAccessKey
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|s3Service
operator|=
operator|new
name|RestS3Service
argument_list|(
name|awsCredentials
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|bucket
operator|=
operator|new
name|S3Bucket
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|S3FileSystemConfigKeys
operator|.
name|S3_STREAM_BUFFER_SIZE_KEY
argument_list|,
name|S3FileSystemConfigKeys
operator|.
name|S3_STREAM_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FILE_SYSTEM_VERSION_VALUE
return|;
block|}
DECL|method|delete (String key)
specifier|private
name|void
name|delete
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|s3Service
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteINode (Path path)
specifier|public
name|void
name|deleteINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteBlock (Block block)
specifier|public
name|void
name|deleteBlock
parameter_list|(
name|Block
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|blockToKey
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inodeExists (Path path)
specifier|public
name|boolean
name|inodeExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|get
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isRoot
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|storeINode
argument_list|(
name|path
argument_list|,
name|INode
operator|.
name|DIRECTORY_INODE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|blockExists (long blockId)
specifier|public
name|boolean
name|blockExists
parameter_list|(
name|long
name|blockId
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|get
argument_list|(
name|blockToKey
argument_list|(
name|blockId
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|get (String key, boolean checkMetadata)
specifier|private
name|InputStream
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|checkMetadata
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|S3Object
name|object
init|=
name|s3Service
operator|.
name|getObject
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkMetadata
condition|)
block|{
name|checkMetadata
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|object
operator|.
name|getDataInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"NoSuchKey"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getS3ErrorCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|handleServiceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|get (String key, long byteRangeStart)
specifier|private
name|InputStream
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|byteRangeStart
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|S3Object
name|object
init|=
name|s3Service
operator|.
name|getObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|byteRangeStart
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|object
operator|.
name|getDataInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"NoSuchKey"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getS3ErrorCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|handleServiceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|checkMetadata (S3Object object)
specifier|private
name|void
name|checkMetadata
parameter_list|(
name|S3Object
name|object
parameter_list|)
throws|throws
name|S3FileSystemException
throws|,
name|S3ServiceException
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|object
operator|.
name|getMetadata
argument_list|(
name|FILE_SYSTEM_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FILE_SYSTEM_VALUE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|S3FileSystemException
argument_list|(
literal|"Not a Hadoop S3 file."
argument_list|)
throw|;
block|}
name|String
name|type
init|=
operator|(
name|String
operator|)
name|object
operator|.
name|getMetadata
argument_list|(
name|FILE_SYSTEM_TYPE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FILE_SYSTEM_TYPE_VALUE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|S3FileSystemException
argument_list|(
literal|"Not a block file."
argument_list|)
throw|;
block|}
name|String
name|dataVersion
init|=
operator|(
name|String
operator|)
name|object
operator|.
name|getMetadata
argument_list|(
name|FILE_SYSTEM_VERSION_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FILE_SYSTEM_VERSION_VALUE
operator|.
name|equals
argument_list|(
name|dataVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|VersionMismatchException
argument_list|(
name|FILE_SYSTEM_VERSION_VALUE
argument_list|,
name|dataVersion
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|retrieveINode (Path path)
specifier|public
name|INode
name|retrieveINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|get
argument_list|(
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
operator|&&
name|isRoot
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|storeINode
argument_list|(
name|path
argument_list|,
name|INode
operator|.
name|DIRECTORY_INODE
argument_list|)
expr_stmt|;
return|return
name|INode
operator|.
name|DIRECTORY_INODE
return|;
block|}
return|return
name|INode
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retrieveBlock (Block block, long byteRangeStart)
specifier|public
name|File
name|retrieveBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|long
name|byteRangeStart
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|fileBlock
init|=
literal|null
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileBlock
operator|=
name|newBackupFile
argument_list|()
expr_stmt|;
name|in
operator|=
name|get
argument_list|(
name|blockToKey
argument_list|(
name|block
argument_list|)
argument_list|,
name|byteRangeStart
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fileBlock
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|numRead
decl_stmt|;
while|while
condition|(
operator|(
name|numRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
return|return
name|fileBlock
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// close output stream to file then delete file
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
comment|// to prevent a second close
if|if
condition|(
name|fileBlock
operator|!=
literal|null
condition|)
block|{
name|boolean
name|b
init|=
name|fileBlock
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring failed delete"
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newBackupFile ()
specifier|private
name|File
name|newBackupFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3.buffer.dir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create S3 buffer directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"input-"
argument_list|,
literal|".tmp"
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|listSubPaths (Path path)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listSubPaths
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|prefix
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|prefix
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|S3Object
index|[]
name|objects
init|=
name|s3Service
operator|.
name|listObjects
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|prefix
argument_list|,
name|PATH_DELIMITER
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|prefixes
init|=
operator|new
name|TreeSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|keyToPath
argument_list|(
name|objects
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prefixes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|prefixes
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listDeepSubPaths (Path path)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listDeepSubPaths
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|prefix
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|)
block|{
name|prefix
operator|+=
name|PATH_DELIMITER
expr_stmt|;
block|}
name|S3Object
index|[]
name|objects
init|=
name|s3Service
operator|.
name|listObjects
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|prefix
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|prefixes
init|=
operator|new
name|TreeSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|keyToPath
argument_list|(
name|objects
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prefixes
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|prefixes
return|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|put (String key, InputStream in, long length, boolean storeMetadata)
specifier|private
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|storeMetadata
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|S3Object
name|object
init|=
operator|new
name|S3Object
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|object
operator|.
name|setDataInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|object
operator|.
name|setContentType
argument_list|(
literal|"binary/octet-stream"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setContentLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeMetadata
condition|)
block|{
name|object
operator|.
name|addAllMetadata
argument_list|(
name|METADATA
argument_list|)
expr_stmt|;
block|}
name|s3Service
operator|.
name|putObject
argument_list|(
name|bucket
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeINode (Path path, INode inode)
specifier|public
name|void
name|storeINode
parameter_list|(
name|Path
name|path
parameter_list|,
name|INode
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|,
name|inode
operator|.
name|serialize
argument_list|()
argument_list|,
name|inode
operator|.
name|getSerializedLength
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeBlock (Block block, File file)
specifier|public
name|void
name|storeBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|blockToKey
argument_list|(
name|block
argument_list|)
argument_list|,
name|in
argument_list|,
name|block
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeQuietly (Closeable closeable)
specifier|private
name|void
name|closeQuietly
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|blockToKey (long blockId)
specifier|private
name|String
name|blockToKey
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
return|return
name|BLOCK_PREFIX
operator|+
name|blockId
return|;
block|}
DECL|method|blockToKey (Block block)
specifier|private
name|String
name|blockToKey
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
return|return
name|blockToKey
argument_list|(
name|block
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isRoot (String key)
specifier|private
name|boolean
name|isRoot
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|isEmpty
argument_list|()
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|purge ()
specifier|public
name|void
name|purge
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|S3Object
index|[]
name|objects
init|=
name|s3Service
operator|.
name|listObjects
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s3Service
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|objects
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|dump ()
specifier|public
name|void
name|dump
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"S3 Filesystem, "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
name|S3Object
index|[]
name|objects
init|=
name|s3Service
operator|.
name|listObjects
argument_list|(
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|PATH_DELIMITER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
name|keyToPath
argument_list|(
name|objects
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|INode
name|m
init|=
name|retrieveINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|m
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getFileType
argument_list|()
operator|==
name|FileType
operator|.
name|DIRECTORY
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|m
operator|.
name|getBlocks
argument_list|()
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|S3ServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|S3Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
DECL|method|handleServiceException (ServiceException e)
specifier|private
name|void
name|handleServiceException
parameter_list|(
name|ServiceException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got ServiceException with Error code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
operator|+
literal|";and Error message: "
operator|+
name|e
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

