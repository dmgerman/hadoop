begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A class defining the caller context for auditing coarse granularity  * operations.  *  * This class is immutable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CallerContext
specifier|public
specifier|final
class|class
name|CallerContext
block|{
DECL|field|SIGNATURE_ENCODING
specifier|public
specifier|static
specifier|final
name|Charset
name|SIGNATURE_ENCODING
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
comment|/** The caller context.    *    * It will be truncated if it exceeds the maximum allowed length in    * server. The default length limit is    * {@link org.apache.hadoop.fs.CommonConfigurationKeysPublic#HADOOP_CALLER_CONTEXT_MAX_SIZE_DEFAULT}    */
DECL|field|context
specifier|private
specifier|final
name|String
name|context
decl_stmt|;
comment|/** The caller's signature for validation.    *    * The signature is optional. The null or empty signature will be abandoned.    * If the signature exceeds the maximum allowed length in server, the caller    * context will be abandoned. The default length limit is    * {@link org.apache.hadoop.fs.CommonConfigurationKeysPublic#HADOOP_CALLER_CONTEXT_SIGNATURE_MAX_SIZE_DEFAULT}    */
DECL|field|signature
specifier|private
specifier|final
name|byte
index|[]
name|signature
decl_stmt|;
DECL|method|CallerContext (Builder builder)
specifier|private
name|CallerContext
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|builder
operator|.
name|context
expr_stmt|;
name|this
operator|.
name|signature
operator|=
name|builder
operator|.
name|signature
expr_stmt|;
block|}
DECL|method|getContext ()
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getSignature ()
specifier|public
name|byte
index|[]
name|getSignature
parameter_list|()
block|{
return|return
name|signature
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|copyOf
argument_list|(
name|signature
argument_list|,
name|signature
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isContextValid ()
specifier|public
name|boolean
name|isContextValid
parameter_list|()
block|{
return|return
name|context
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|context
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|CallerContext
name|rhs
init|=
operator|(
name|CallerContext
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|context
argument_list|,
name|rhs
operator|.
name|context
argument_list|)
operator|.
name|append
argument_list|(
name|signature
argument_list|,
name|rhs
operator|.
name|signature
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isContextValid
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|str
init|=
name|context
decl_stmt|;
if|if
condition|(
name|signature
operator|!=
literal|null
condition|)
block|{
name|str
operator|+=
literal|":"
expr_stmt|;
name|str
operator|+=
operator|new
name|String
argument_list|(
name|signature
argument_list|,
name|SIGNATURE_ENCODING
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
comment|/** The caller context builder. */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|context
specifier|private
specifier|final
name|String
name|context
decl_stmt|;
DECL|field|signature
specifier|private
name|byte
index|[]
name|signature
decl_stmt|;
DECL|method|Builder (String context)
specifier|public
name|Builder
parameter_list|(
name|String
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|setSignature (byte[] signature)
specifier|public
name|Builder
name|setSignature
parameter_list|(
name|byte
index|[]
name|signature
parameter_list|)
block|{
if|if
condition|(
name|signature
operator|!=
literal|null
operator|&&
name|signature
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|signature
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|signature
argument_list|,
name|signature
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|CallerContext
name|build
parameter_list|()
block|{
return|return
operator|new
name|CallerContext
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * The thread local current caller context.    *<p>    * Internal class for defered singleton idiom.    * https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom    */
DECL|class|CurrentCallerContextHolder
specifier|private
specifier|static
specifier|final
class|class
name|CurrentCallerContextHolder
block|{
DECL|field|CALLER_CONTEXT
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|CallerContext
argument_list|>
name|CALLER_CONTEXT
init|=
operator|new
name|InheritableThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
block|}
DECL|method|getCurrent ()
specifier|public
specifier|static
name|CallerContext
name|getCurrent
parameter_list|()
block|{
return|return
name|CurrentCallerContextHolder
operator|.
name|CALLER_CONTEXT
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setCurrent (CallerContext callerContext)
specifier|public
specifier|static
name|void
name|setCurrent
parameter_list|(
name|CallerContext
name|callerContext
parameter_list|)
block|{
name|CurrentCallerContextHolder
operator|.
name|CALLER_CONTEXT
operator|.
name|set
argument_list|(
name|callerContext
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

