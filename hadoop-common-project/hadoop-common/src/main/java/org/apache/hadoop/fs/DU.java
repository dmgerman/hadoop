begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** Filesystem disk space usage statistics.  Uses the unix 'du' program */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DU
specifier|public
class|class
name|DU
extends|extends
name|CachingGetSpaceUsed
block|{
DECL|field|duShell
specifier|private
name|DUShell
name|duShell
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|DU (File path, long interval, long jitter, long initialUsed)
specifier|public
name|DU
parameter_list|(
name|File
name|path
parameter_list|,
name|long
name|interval
parameter_list|,
name|long
name|jitter
parameter_list|,
name|long
name|initialUsed
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|interval
argument_list|,
name|jitter
argument_list|,
name|initialUsed
argument_list|)
expr_stmt|;
block|}
DECL|method|DU (CachingGetSpaceUsed.Builder builder)
specifier|public
name|DU
parameter_list|(
name|CachingGetSpaceUsed
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|builder
operator|.
name|getPath
argument_list|()
argument_list|,
name|builder
operator|.
name|getInterval
argument_list|()
argument_list|,
name|builder
operator|.
name|getJitter
argument_list|()
argument_list|,
name|builder
operator|.
name|getInitialUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|protected
specifier|synchronized
name|void
name|refresh
parameter_list|()
block|{
if|if
condition|(
name|duShell
operator|==
literal|null
condition|)
block|{
name|duShell
operator|=
operator|new
name|DUShell
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|duShell
operator|.
name|startRefresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get disk usage information"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DUShell
specifier|private
specifier|final
class|class
name|DUShell
extends|extends
name|Shell
block|{
DECL|method|startRefresh ()
name|void
name|startRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"du -sk "
operator|+
name|getDirPath
argument_list|()
operator|+
literal|"\n"
operator|+
name|used
operator|.
name|get
argument_list|()
operator|+
literal|"\t"
operator|+
name|getDirPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"du"
block|,
literal|"-sk"
block|,
name|getDirPath
argument_list|()
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
init|=
name|lines
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expecting a line not the end of stream"
argument_list|)
throw|;
block|}
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal du output"
argument_list|)
throw|;
block|}
name|setUsed
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"."
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|path
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
name|GetSpaceUsed
name|du
init|=
operator|new
name|GetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|duResult
init|=
name|du
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|duResult
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

