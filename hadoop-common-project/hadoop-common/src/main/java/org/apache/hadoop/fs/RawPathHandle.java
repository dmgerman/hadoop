begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Generic format of FileStatus objects. When the origin is unknown, the  * attributes of the handle are undefined.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RawPathHandle
specifier|public
specifier|final
class|class
name|RawPathHandle
implements|implements
name|PathHandle
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x12ba4689510L
decl_stmt|;
DECL|field|MAX_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|MAX_SIZE
init|=
literal|1
operator|<<
literal|20
decl_stmt|;
DECL|field|fd
specifier|private
specifier|transient
name|ByteBuffer
name|fd
decl_stmt|;
comment|/**    * Store a reference to the given bytes as the serialized form.    * @param fd serialized bytes    */
DECL|method|RawPathHandle (ByteBuffer fd)
specifier|public
name|RawPathHandle
parameter_list|(
name|ByteBuffer
name|fd
parameter_list|)
block|{
name|this
operator|.
name|fd
operator|=
literal|null
operator|==
name|fd
condition|?
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
else|:
name|fd
operator|.
name|asReadOnlyBuffer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize using a copy of bytes from the serialized handle.    * @param handle PathHandle to preserve in serialized form.    */
DECL|method|RawPathHandle (PathHandle handle)
specifier|public
name|RawPathHandle
parameter_list|(
name|PathHandle
name|handle
parameter_list|)
block|{
name|ByteBuffer
name|hb
init|=
literal|null
operator|==
name|handle
condition|?
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
else|:
name|handle
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|fd
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|hb
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|fd
operator|.
name|put
argument_list|(
name|hb
argument_list|)
expr_stmt|;
name|fd
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytes ()
specifier|public
name|ByteBuffer
name|bytes
parameter_list|()
block|{
return|return
name|fd
operator|.
name|asReadOnlyBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|PathHandle
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PathHandle
name|o
init|=
operator|(
name|PathHandle
operator|)
name|other
decl_stmt|;
return|return
name|bytes
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bytes
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|bytes
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|writeObject (ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fd
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|fd
operator|.
name|array
argument_list|()
argument_list|,
name|fd
operator|.
name|position
argument_list|()
argument_list|,
name|fd
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|x
init|=
operator|new
name|byte
index|[
name|fd
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|fd
operator|.
name|slice
argument_list|()
operator|.
name|get
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readObject (ObjectInputStream in)
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|in
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|MAX_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal buffer length "
operator|+
name|len
argument_list|)
throw|;
block|}
name|byte
index|[]
name|x
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|fd
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
DECL|method|readObjectNoData ()
specifier|private
name|void
name|readObjectNoData
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Stream data required"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

