begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.ssl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|ConnectionConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|PlatformName
operator|.
name|IBM_JAVA
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Factory that creates SSLEngine and SSLSocketFactory instances using  * Hadoop configuration information.  *<p>  * This SSLFactory uses a {@link ReloadingX509TrustManager} instance,  * which reloads public keys if the truststore file changes.  *<p>  * This factory is used to configure HTTPS in Hadoop HTTP based endpoints, both  * client and server.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SSLFactory
specifier|public
class|class
name|SSLFactory
implements|implements
name|ConnectionConfigurator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SSLFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|enum|Mode
DECL|enumConstant|CLIENT
DECL|enumConstant|SERVER
specifier|public
enum|enum
name|Mode
block|{
name|CLIENT
block|,
name|SERVER
block|}
DECL|field|SSL_CLIENT_CONF_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SSL_CLIENT_CONF_KEY
init|=
literal|"hadoop.ssl.client.conf"
decl_stmt|;
DECL|field|SSL_CLIENT_CONF_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SSL_CLIENT_CONF_DEFAULT
init|=
literal|"ssl-client.xml"
decl_stmt|;
DECL|field|SSL_SERVER_CONF_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_CONF_KEY
init|=
literal|"hadoop.ssl.server.conf"
decl_stmt|;
DECL|field|SSL_SERVER_CONF_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_CONF_DEFAULT
init|=
literal|"ssl-server.xml"
decl_stmt|;
DECL|field|SSL_REQUIRE_CLIENT_CERT_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SSL_REQUIRE_CLIENT_CERT_KEY
init|=
literal|"hadoop.ssl.require.client.cert"
decl_stmt|;
DECL|field|SSL_REQUIRE_CLIENT_CERT_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|SSL_REQUIRE_CLIENT_CERT_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|SSL_HOSTNAME_VERIFIER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SSL_HOSTNAME_VERIFIER_KEY
init|=
literal|"hadoop.ssl.hostname.verifier"
decl_stmt|;
DECL|field|SSL_ENABLED_PROTOCOLS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SSL_ENABLED_PROTOCOLS_KEY
init|=
literal|"hadoop.ssl.enabled.protocols"
decl_stmt|;
DECL|field|SSL_ENABLED_PROTOCOLS_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SSL_ENABLED_PROTOCOLS_DEFAULT
init|=
literal|"TLSv1.2"
decl_stmt|;
DECL|field|SSL_SERVER_NEED_CLIENT_AUTH
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_NEED_CLIENT_AUTH
init|=
literal|"ssl.server.need.client.auth"
decl_stmt|;
DECL|field|SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|SSL_SERVER_KEYSTORE_LOCATION
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_KEYSTORE_LOCATION
init|=
literal|"ssl.server.keystore.location"
decl_stmt|;
DECL|field|SSL_SERVER_KEYSTORE_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_KEYSTORE_PASSWORD
init|=
literal|"ssl.server.keystore.password"
decl_stmt|;
DECL|field|SSL_SERVER_KEYSTORE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_KEYSTORE_TYPE
init|=
literal|"ssl.server.keystore.type"
decl_stmt|;
DECL|field|SSL_SERVER_KEYSTORE_TYPE_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_KEYSTORE_TYPE_DEFAULT
init|=
literal|"jks"
decl_stmt|;
DECL|field|SSL_SERVER_KEYSTORE_KEYPASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_KEYSTORE_KEYPASSWORD
init|=
literal|"ssl.server.keystore.keypassword"
decl_stmt|;
DECL|field|SSL_SERVER_TRUSTSTORE_LOCATION
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_TRUSTSTORE_LOCATION
init|=
literal|"ssl.server.truststore.location"
decl_stmt|;
DECL|field|SSL_SERVER_TRUSTSTORE_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_TRUSTSTORE_PASSWORD
init|=
literal|"ssl.server.truststore.password"
decl_stmt|;
DECL|field|SSL_SERVER_TRUSTSTORE_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_TRUSTSTORE_TYPE
init|=
literal|"ssl.server.truststore.type"
decl_stmt|;
DECL|field|SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT
init|=
literal|"jks"
decl_stmt|;
DECL|field|SSL_SERVER_EXCLUDE_CIPHER_LIST
specifier|public
specifier|static
specifier|final
name|String
name|SSL_SERVER_EXCLUDE_CIPHER_LIST
init|=
literal|"ssl.server.exclude.cipher.list"
decl_stmt|;
DECL|field|SSLCERTIFICATE
specifier|public
specifier|static
specifier|final
name|String
name|SSLCERTIFICATE
init|=
name|IBM_JAVA
condition|?
literal|"ibmX509"
else|:
literal|"SunX509"
decl_stmt|;
DECL|field|KEYSTORES_FACTORY_CLASS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORES_FACTORY_CLASS_KEY
init|=
literal|"hadoop.ssl.keystores.factory.class"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|mode
specifier|private
name|Mode
name|mode
decl_stmt|;
DECL|field|requireClientCert
specifier|private
name|boolean
name|requireClientCert
decl_stmt|;
DECL|field|context
specifier|private
name|SSLContext
name|context
decl_stmt|;
comment|// the java keep-alive cache relies on instance equivalence of the SSL socket
comment|// factory.  in many java versions, SSLContext#getSocketFactory always
comment|// returns a new instance which completely breaks the cache...
DECL|field|socketFactory
specifier|private
name|SSLSocketFactory
name|socketFactory
decl_stmt|;
DECL|field|hostnameVerifier
specifier|private
name|HostnameVerifier
name|hostnameVerifier
decl_stmt|;
DECL|field|keystoresFactory
specifier|private
name|KeyStoresFactory
name|keystoresFactory
decl_stmt|;
DECL|field|enabledProtocols
specifier|private
name|String
index|[]
name|enabledProtocols
init|=
literal|null
decl_stmt|;
DECL|field|excludeCiphers
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|excludeCiphers
decl_stmt|;
comment|/**    * Creates an SSLFactory.    *    * @param mode SSLFactory mode, client or server.    * @param conf Hadoop configuration from where the SSLFactory configuration    * will be read.    */
DECL|method|SSLFactory (Mode mode, Configuration conf)
specifier|public
name|SSLFactory
parameter_list|(
name|Mode
name|mode
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mode cannot be NULL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|Configuration
name|sslConf
init|=
name|readSSLConfiguration
argument_list|(
name|conf
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|requireClientCert
operator|=
name|sslConf
operator|.
name|getBoolean
argument_list|(
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|,
name|SSL_REQUIRE_CLIENT_CERT_DEFAULT
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|KeyStoresFactory
argument_list|>
name|klass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|KEYSTORES_FACTORY_CLASS_KEY
argument_list|,
name|FileBasedKeyStoresFactory
operator|.
name|class
argument_list|,
name|KeyStoresFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|keystoresFactory
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|sslConf
argument_list|)
expr_stmt|;
name|enabledProtocols
operator|=
name|conf
operator|.
name|getStrings
argument_list|(
name|SSL_ENABLED_PROTOCOLS_KEY
argument_list|,
name|SSL_ENABLED_PROTOCOLS_DEFAULT
argument_list|)
expr_stmt|;
name|excludeCiphers
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|sslConf
operator|.
name|getTrimmedStrings
argument_list|(
name|SSL_SERVER_EXCLUDE_CIPHER_LIST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"will exclude cipher suites: {}"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|excludeCiphers
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSSLConfiguration (Configuration conf, Mode mode)
specifier|public
specifier|static
name|Configuration
name|readSSLConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Mode
name|mode
parameter_list|)
block|{
name|Configuration
name|sslConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sslConf
operator|.
name|setBoolean
argument_list|(
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|SSL_REQUIRE_CLIENT_CERT_KEY
argument_list|,
name|SSL_REQUIRE_CLIENT_CERT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sslConfResource
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|CLIENT
condition|)
block|{
name|sslConfResource
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SSL_CLIENT_CONF_KEY
argument_list|,
name|SSL_CLIENT_CONF_DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslConfResource
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SSL_SERVER_CONF_KEY
argument_list|,
name|SSL_SERVER_CONF_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|sslConf
operator|.
name|addResource
argument_list|(
name|sslConfResource
argument_list|)
expr_stmt|;
return|return
name|sslConf
return|;
block|}
comment|/**    * Initializes the factory.    *    * @throws  GeneralSecurityException thrown if an SSL initialization error    * happened.    * @throws IOException thrown if an IO error happened while reading the SSL    * configuration.    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|keystoresFactory
operator|.
name|init
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|context
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
expr_stmt|;
name|context
operator|.
name|init
argument_list|(
name|keystoresFactory
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|keystoresFactory
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDefaultSSLParameters
argument_list|()
operator|.
name|setProtocols
argument_list|(
name|enabledProtocols
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|CLIENT
condition|)
block|{
name|socketFactory
operator|=
name|context
operator|.
name|getSocketFactory
argument_list|()
expr_stmt|;
block|}
name|hostnameVerifier
operator|=
name|getHostnameVerifier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getHostnameVerifier (Configuration conf)
specifier|private
name|HostnameVerifier
name|getHostnameVerifier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
return|return
name|getHostnameVerifier
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SSL_HOSTNAME_VERIFIER_KEY
argument_list|,
literal|"DEFAULT"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getHostnameVerifier (String verifier)
specifier|public
specifier|static
name|HostnameVerifier
name|getHostnameVerifier
parameter_list|(
name|String
name|verifier
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|HostnameVerifier
name|hostnameVerifier
decl_stmt|;
if|if
condition|(
name|verifier
operator|.
name|equals
argument_list|(
literal|"DEFAULT"
argument_list|)
condition|)
block|{
name|hostnameVerifier
operator|=
name|SSLHostnameVerifier
operator|.
name|DEFAULT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verifier
operator|.
name|equals
argument_list|(
literal|"DEFAULT_AND_LOCALHOST"
argument_list|)
condition|)
block|{
name|hostnameVerifier
operator|=
name|SSLHostnameVerifier
operator|.
name|DEFAULT_AND_LOCALHOST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verifier
operator|.
name|equals
argument_list|(
literal|"STRICT"
argument_list|)
condition|)
block|{
name|hostnameVerifier
operator|=
name|SSLHostnameVerifier
operator|.
name|STRICT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verifier
operator|.
name|equals
argument_list|(
literal|"STRICT_IE6"
argument_list|)
condition|)
block|{
name|hostnameVerifier
operator|=
name|SSLHostnameVerifier
operator|.
name|STRICT_IE6
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|verifier
operator|.
name|equals
argument_list|(
literal|"ALLOW_ALL"
argument_list|)
condition|)
block|{
name|hostnameVerifier
operator|=
name|SSLHostnameVerifier
operator|.
name|ALLOW_ALL
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"Invalid hostname verifier: "
operator|+
name|verifier
argument_list|)
throw|;
block|}
return|return
name|hostnameVerifier
return|;
block|}
comment|/**    * Releases any resources being used.    */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|keystoresFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the SSLFactory KeyStoresFactory instance.    *    * @return the SSLFactory KeyStoresFactory instance.    */
DECL|method|getKeystoresFactory ()
specifier|public
name|KeyStoresFactory
name|getKeystoresFactory
parameter_list|()
block|{
return|return
name|keystoresFactory
return|;
block|}
comment|/**    * Returns a configured SSLEngine.    *    * @return the configured SSLEngine.    * @throws GeneralSecurityException thrown if the SSL engine could not    * be initialized.    * @throws IOException thrown if and IO error occurred while loading    * the server keystore.    */
DECL|method|createSSLEngine ()
specifier|public
name|SSLEngine
name|createSSLEngine
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|SSLEngine
name|sslEngine
init|=
name|context
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|CLIENT
condition|)
block|{
name|sslEngine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslEngine
operator|.
name|setUseClientMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sslEngine
operator|.
name|setNeedClientAuth
argument_list|(
name|requireClientCert
argument_list|)
expr_stmt|;
name|disableExcludedCiphers
argument_list|(
name|sslEngine
argument_list|)
expr_stmt|;
block|}
name|sslEngine
operator|.
name|setEnabledProtocols
argument_list|(
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|sslEngine
return|;
block|}
DECL|method|disableExcludedCiphers (SSLEngine sslEngine)
specifier|private
name|void
name|disableExcludedCiphers
parameter_list|(
name|SSLEngine
name|sslEngine
parameter_list|)
block|{
name|String
index|[]
name|cipherSuites
init|=
name|sslEngine
operator|.
name|getEnabledCipherSuites
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|defaultEnabledCipherSuites
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cipherSuites
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
name|iterator
init|=
name|excludeCiphers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|cipherName
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultEnabledCipherSuites
operator|.
name|contains
argument_list|(
name|cipherName
argument_list|)
condition|)
block|{
name|defaultEnabledCipherSuites
operator|.
name|remove
argument_list|(
name|cipherName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disabling cipher suite {}."
argument_list|,
name|cipherName
argument_list|)
expr_stmt|;
block|}
block|}
name|cipherSuites
operator|=
name|defaultEnabledCipherSuites
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|defaultEnabledCipherSuites
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|sslEngine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|cipherSuites
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a configured SSLServerSocketFactory.    *    * @return the configured SSLSocketFactory.    * @throws GeneralSecurityException thrown if the SSLSocketFactory could not    * be initialized.    * @throws IOException thrown if and IO error occurred while loading    * the server keystore.    */
DECL|method|createSSLServerSocketFactory ()
specifier|public
name|SSLServerSocketFactory
name|createSSLServerSocketFactory
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
if|if
condition|(
name|mode
operator|!=
name|Mode
operator|.
name|SERVER
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Factory is not in SERVER mode. Actual mode is "
operator|+
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|context
operator|.
name|getServerSocketFactory
argument_list|()
return|;
block|}
comment|/**    * Returns a configured SSLSocketFactory.    *    * @return the configured SSLSocketFactory.    * @throws GeneralSecurityException thrown if the SSLSocketFactory could not    * be initialized.    * @throws IOException thrown if and IO error occurred while loading    * the server keystore.    */
DECL|method|createSSLSocketFactory ()
specifier|public
name|SSLSocketFactory
name|createSSLSocketFactory
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
if|if
condition|(
name|mode
operator|!=
name|Mode
operator|.
name|CLIENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Factory is not in CLIENT mode. Actual mode is "
operator|+
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|socketFactory
return|;
block|}
comment|/**    * Returns the hostname verifier it should be used in HttpsURLConnections.    *    * @return the hostname verifier.    */
DECL|method|getHostnameVerifier ()
specifier|public
name|HostnameVerifier
name|getHostnameVerifier
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|!=
name|Mode
operator|.
name|CLIENT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Factory is not in CLIENT mode. Actual mode is "
operator|+
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|hostnameVerifier
return|;
block|}
comment|/**    * Returns if client certificates are required or not.    *    * @return if client certificates are required or not.    */
DECL|method|isClientCertRequired ()
specifier|public
name|boolean
name|isClientCertRequired
parameter_list|()
block|{
return|return
name|requireClientCert
return|;
block|}
comment|/**    * If the given {@link HttpURLConnection} is an {@link HttpsURLConnection}    * configures the connection with the {@link SSLSocketFactory} and    * {@link HostnameVerifier} of this SSLFactory, otherwise does nothing.    *    * @param conn the {@link HttpURLConnection} instance to configure.    * @return the configured {@link HttpURLConnection} instance.    *    * @throws IOException if an IO error occurred.    */
annotation|@
name|Override
DECL|method|configure (HttpURLConnection conn)
specifier|public
name|HttpURLConnection
name|configure
parameter_list|(
name|HttpURLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conn
operator|instanceof
name|HttpsURLConnection
condition|)
block|{
name|HttpsURLConnection
name|sslConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|conn
decl_stmt|;
try|try
block|{
name|sslConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|createSSLSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|sslConn
operator|.
name|setHostnameVerifier
argument_list|(
name|getHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
name|sslConn
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
block|}
end_class

end_unit

