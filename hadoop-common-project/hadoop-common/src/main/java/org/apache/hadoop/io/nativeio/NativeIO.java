begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.nativeio
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * JNI wrappers for various native IO-related calls not available in Java.  * These functions should generally be used alongside a fallback to another  * more portable mechanism.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NativeIO
specifier|public
class|class
name|NativeIO
block|{
comment|// Flags for open() call from bits/fcntl.h
DECL|field|O_RDONLY
specifier|public
specifier|static
specifier|final
name|int
name|O_RDONLY
init|=
literal|00
decl_stmt|;
DECL|field|O_WRONLY
specifier|public
specifier|static
specifier|final
name|int
name|O_WRONLY
init|=
literal|01
decl_stmt|;
DECL|field|O_RDWR
specifier|public
specifier|static
specifier|final
name|int
name|O_RDWR
init|=
literal|02
decl_stmt|;
DECL|field|O_CREAT
specifier|public
specifier|static
specifier|final
name|int
name|O_CREAT
init|=
literal|0100
decl_stmt|;
DECL|field|O_EXCL
specifier|public
specifier|static
specifier|final
name|int
name|O_EXCL
init|=
literal|0200
decl_stmt|;
DECL|field|O_NOCTTY
specifier|public
specifier|static
specifier|final
name|int
name|O_NOCTTY
init|=
literal|0400
decl_stmt|;
DECL|field|O_TRUNC
specifier|public
specifier|static
specifier|final
name|int
name|O_TRUNC
init|=
literal|01000
decl_stmt|;
DECL|field|O_APPEND
specifier|public
specifier|static
specifier|final
name|int
name|O_APPEND
init|=
literal|02000
decl_stmt|;
DECL|field|O_NONBLOCK
specifier|public
specifier|static
specifier|final
name|int
name|O_NONBLOCK
init|=
literal|04000
decl_stmt|;
DECL|field|O_SYNC
specifier|public
specifier|static
specifier|final
name|int
name|O_SYNC
init|=
literal|010000
decl_stmt|;
DECL|field|O_ASYNC
specifier|public
specifier|static
specifier|final
name|int
name|O_ASYNC
init|=
literal|020000
decl_stmt|;
DECL|field|O_FSYNC
specifier|public
specifier|static
specifier|final
name|int
name|O_FSYNC
init|=
name|O_SYNC
decl_stmt|;
DECL|field|O_NDELAY
specifier|public
specifier|static
specifier|final
name|int
name|O_NDELAY
init|=
name|O_NONBLOCK
decl_stmt|;
comment|// Flags for posix_fadvise() from bits/fcntl.h
comment|/* No further special treatment.  */
DECL|field|POSIX_FADV_NORMAL
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_NORMAL
init|=
literal|0
decl_stmt|;
comment|/* Expect random page references.  */
DECL|field|POSIX_FADV_RANDOM
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_RANDOM
init|=
literal|1
decl_stmt|;
comment|/* Expect sequential page references.  */
DECL|field|POSIX_FADV_SEQUENTIAL
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_SEQUENTIAL
init|=
literal|2
decl_stmt|;
comment|/* Will need these pages.  */
DECL|field|POSIX_FADV_WILLNEED
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_WILLNEED
init|=
literal|3
decl_stmt|;
comment|/* Don't need these pages.  */
DECL|field|POSIX_FADV_DONTNEED
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_DONTNEED
init|=
literal|4
decl_stmt|;
comment|/* Data will be accessed once.  */
DECL|field|POSIX_FADV_NOREUSE
specifier|public
specifier|static
specifier|final
name|int
name|POSIX_FADV_NOREUSE
init|=
literal|5
decl_stmt|;
comment|/* Wait upon writeout of all pages      in the range before performing the      write.  */
DECL|field|SYNC_FILE_RANGE_WAIT_BEFORE
specifier|public
specifier|static
specifier|final
name|int
name|SYNC_FILE_RANGE_WAIT_BEFORE
init|=
literal|1
decl_stmt|;
comment|/* Initiate writeout of all those      dirty pages in the range which are      not presently under writeback.  */
DECL|field|SYNC_FILE_RANGE_WRITE
specifier|public
specifier|static
specifier|final
name|int
name|SYNC_FILE_RANGE_WRITE
init|=
literal|2
decl_stmt|;
comment|/* Wait upon writeout of all pages in      the range after performing the      write.  */
DECL|field|SYNC_FILE_RANGE_WAIT_AFTER
specifier|public
specifier|static
specifier|final
name|int
name|SYNC_FILE_RANGE_WAIT_AFTER
init|=
literal|4
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NativeIO
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nativeLoaded
specifier|private
specifier|static
name|boolean
name|nativeLoaded
init|=
literal|false
decl_stmt|;
DECL|field|workaroundNonThreadSafePasswdCalls
specifier|private
specifier|static
name|boolean
name|workaroundNonThreadSafePasswdCalls
init|=
literal|false
decl_stmt|;
DECL|field|fadvisePossible
specifier|private
specifier|static
name|boolean
name|fadvisePossible
init|=
literal|true
decl_stmt|;
DECL|field|syncFileRangePossible
specifier|private
specifier|static
name|boolean
name|syncFileRangePossible
init|=
literal|true
decl_stmt|;
DECL|field|WORKAROUND_NON_THREADSAFE_CALLS_KEY
specifier|static
specifier|final
name|String
name|WORKAROUND_NON_THREADSAFE_CALLS_KEY
init|=
literal|"hadoop.workaround.non.threadsafe.getpwuid"
decl_stmt|;
DECL|field|WORKAROUND_NON_THREADSAFE_CALLS_DEFAULT
specifier|static
specifier|final
name|boolean
name|WORKAROUND_NON_THREADSAFE_CALLS_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|cacheTimeout
specifier|private
specifier|static
name|long
name|cacheTimeout
init|=
operator|-
literal|1
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|workaroundNonThreadSafePasswdCalls
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|WORKAROUND_NON_THREADSAFE_CALLS_KEY
argument_list|,
name|WORKAROUND_NON_THREADSAFE_CALLS_DEFAULT
argument_list|)
expr_stmt|;
name|initNative
argument_list|()
expr_stmt|;
name|nativeLoaded
operator|=
literal|true
expr_stmt|;
name|cacheTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_UID_NAME_CACHE_TIMEOUT_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_UID_NAME_CACHE_TIMEOUT_DEFAULT
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initialized cache for IDs to User/Group mapping with a"
operator|+
literal|" cache timeout of "
operator|+
name|cacheTimeout
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// This can happen if the user has an older version of libhadoop.so
comment|// installed - in this case we can continue without native IO
comment|// after warning
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to initialize NativeIO libraries"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return true if the JNI-based native IO extensions are available.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
operator|&&
name|nativeLoaded
return|;
block|}
comment|/** Wrapper around open(2) */
DECL|method|open (String path, int flags, int mode)
specifier|public
specifier|static
specifier|native
name|FileDescriptor
name|open
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Wrapper around fstat(2) */
DECL|method|fstat (FileDescriptor fd)
specifier|private
specifier|static
specifier|native
name|Stat
name|fstat
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Wrapper around chmod(2) */
DECL|method|chmod (String path, int mode)
specifier|public
specifier|static
specifier|native
name|void
name|chmod
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Wrapper around posix_fadvise(2) */
DECL|method|posix_fadvise ( FileDescriptor fd, long offset, long len, int flags)
specifier|static
specifier|native
name|void
name|posix_fadvise
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
function_decl|;
comment|/** Wrapper around sync_file_range(2) */
DECL|method|sync_file_range ( FileDescriptor fd, long offset, long nbytes, int flags)
specifier|static
specifier|native
name|void
name|sync_file_range
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|nbytes
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
function_decl|;
comment|/** Initialize the JNI method ID and class ID cache */
DECL|method|initNative ()
specifier|private
specifier|static
specifier|native
name|void
name|initNative
parameter_list|()
function_decl|;
comment|/**    * Call posix_fadvise on the given file descriptor. See the manpage    * for this syscall for more information. On systems where this    * call is not available, does nothing.    *    * @throws NativeIOException if there is an error with the syscall    */
DECL|method|posixFadviseIfPossible ( FileDescriptor fd, long offset, long len, int flags)
specifier|public
specifier|static
name|void
name|posixFadviseIfPossible
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
block|{
if|if
condition|(
name|nativeLoaded
operator|&&
name|fadvisePossible
condition|)
block|{
try|try
block|{
name|posix_fadvise
argument_list|(
name|fd
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|fadvisePossible
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ule
parameter_list|)
block|{
name|fadvisePossible
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Call sync_file_range on the given file descriptor. See the manpage    * for this syscall for more information. On systems where this    * call is not available, does nothing.    *    * @throws NativeIOException if there is an error with the syscall    */
DECL|method|syncFileRangeIfPossible ( FileDescriptor fd, long offset, long nbytes, int flags)
specifier|public
specifier|static
name|void
name|syncFileRangeIfPossible
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|nbytes
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
block|{
if|if
condition|(
name|nativeLoaded
operator|&&
name|syncFileRangePossible
condition|)
block|{
try|try
block|{
name|sync_file_range
argument_list|(
name|fd
argument_list|,
name|offset
argument_list|,
name|nbytes
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|syncFileRangePossible
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ule
parameter_list|)
block|{
name|syncFileRangePossible
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Result type of the fstat call    */
DECL|class|Stat
specifier|public
specifier|static
class|class
name|Stat
block|{
DECL|field|ownerId
DECL|field|groupId
specifier|private
name|int
name|ownerId
decl_stmt|,
name|groupId
decl_stmt|;
DECL|field|owner
DECL|field|group
specifier|private
name|String
name|owner
decl_stmt|,
name|group
decl_stmt|;
DECL|field|mode
specifier|private
name|int
name|mode
decl_stmt|;
comment|// Mode constants
DECL|field|S_IFMT
specifier|public
specifier|static
specifier|final
name|int
name|S_IFMT
init|=
literal|0170000
decl_stmt|;
comment|/* type of file */
DECL|field|S_IFIFO
specifier|public
specifier|static
specifier|final
name|int
name|S_IFIFO
init|=
literal|0010000
decl_stmt|;
comment|/* named pipe (fifo) */
DECL|field|S_IFCHR
specifier|public
specifier|static
specifier|final
name|int
name|S_IFCHR
init|=
literal|0020000
decl_stmt|;
comment|/* character special */
DECL|field|S_IFDIR
specifier|public
specifier|static
specifier|final
name|int
name|S_IFDIR
init|=
literal|0040000
decl_stmt|;
comment|/* directory */
DECL|field|S_IFBLK
specifier|public
specifier|static
specifier|final
name|int
name|S_IFBLK
init|=
literal|0060000
decl_stmt|;
comment|/* block special */
DECL|field|S_IFREG
specifier|public
specifier|static
specifier|final
name|int
name|S_IFREG
init|=
literal|0100000
decl_stmt|;
comment|/* regular */
DECL|field|S_IFLNK
specifier|public
specifier|static
specifier|final
name|int
name|S_IFLNK
init|=
literal|0120000
decl_stmt|;
comment|/* symbolic link */
DECL|field|S_IFSOCK
specifier|public
specifier|static
specifier|final
name|int
name|S_IFSOCK
init|=
literal|0140000
decl_stmt|;
comment|/* socket */
DECL|field|S_IFWHT
specifier|public
specifier|static
specifier|final
name|int
name|S_IFWHT
init|=
literal|0160000
decl_stmt|;
comment|/* whiteout */
DECL|field|S_ISUID
specifier|public
specifier|static
specifier|final
name|int
name|S_ISUID
init|=
literal|0004000
decl_stmt|;
comment|/* set user id on execution */
DECL|field|S_ISGID
specifier|public
specifier|static
specifier|final
name|int
name|S_ISGID
init|=
literal|0002000
decl_stmt|;
comment|/* set group id on execution */
DECL|field|S_ISVTX
specifier|public
specifier|static
specifier|final
name|int
name|S_ISVTX
init|=
literal|0001000
decl_stmt|;
comment|/* save swapped text even after use */
DECL|field|S_IRUSR
specifier|public
specifier|static
specifier|final
name|int
name|S_IRUSR
init|=
literal|0000400
decl_stmt|;
comment|/* read permission, owner */
DECL|field|S_IWUSR
specifier|public
specifier|static
specifier|final
name|int
name|S_IWUSR
init|=
literal|0000200
decl_stmt|;
comment|/* write permission, owner */
DECL|field|S_IXUSR
specifier|public
specifier|static
specifier|final
name|int
name|S_IXUSR
init|=
literal|0000100
decl_stmt|;
comment|/* execute/search permission, owner */
DECL|method|Stat (int ownerId, int groupId, int mode)
name|Stat
parameter_list|(
name|int
name|ownerId
parameter_list|,
name|int
name|groupId
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|ownerId
operator|=
name|ownerId
expr_stmt|;
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Stat(owner='"
operator|+
name|owner
operator|+
literal|"', group='"
operator|+
name|group
operator|+
literal|"'"
operator|+
literal|", mode="
operator|+
name|mode
operator|+
literal|")"
return|;
block|}
DECL|method|getOwner ()
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
DECL|method|getMode ()
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
block|}
DECL|method|getUserName (int uid)
specifier|static
specifier|native
name|String
name|getUserName
parameter_list|(
name|int
name|uid
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getGroupName (int uid)
specifier|static
specifier|native
name|String
name|getGroupName
parameter_list|(
name|int
name|uid
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|class|CachedName
specifier|private
specifier|static
class|class
name|CachedName
block|{
DECL|field|timestamp
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|CachedName (String name, long timestamp)
specifier|public
name|CachedName
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
DECL|field|USER_ID_NAME_CACHE
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|CachedName
argument_list|>
name|USER_ID_NAME_CACHE
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|CachedName
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|GROUP_ID_NAME_CACHE
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|CachedName
argument_list|>
name|GROUP_ID_NAME_CACHE
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|CachedName
argument_list|>
argument_list|()
decl_stmt|;
DECL|enum|IdCache
DECL|enumConstant|USER
DECL|enumConstant|GROUP
specifier|private
enum|enum
name|IdCache
block|{
name|USER
block|,
name|GROUP
block|}
DECL|method|getName (IdCache domain, int id)
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|IdCache
name|domain
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|CachedName
argument_list|>
name|idNameCache
init|=
operator|(
name|domain
operator|==
name|IdCache
operator|.
name|USER
operator|)
condition|?
name|USER_ID_NAME_CACHE
else|:
name|GROUP_ID_NAME_CACHE
decl_stmt|;
name|String
name|name
decl_stmt|;
name|CachedName
name|cachedName
init|=
name|idNameCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cachedName
operator|!=
literal|null
operator|&&
operator|(
name|cachedName
operator|.
name|timestamp
operator|+
name|cacheTimeout
operator|)
operator|>
name|now
condition|)
block|{
name|name
operator|=
name|cachedName
operator|.
name|name
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
operator|(
name|domain
operator|==
name|IdCache
operator|.
name|USER
operator|)
condition|?
name|getUserName
argument_list|(
name|id
argument_list|)
else|:
name|getGroupName
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|type
init|=
operator|(
name|domain
operator|==
name|IdCache
operator|.
name|USER
operator|)
condition|?
literal|"UserName"
else|:
literal|"GroupName"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got "
operator|+
name|type
operator|+
literal|" "
operator|+
name|name
operator|+
literal|" for ID "
operator|+
name|id
operator|+
literal|" from the native implementation"
argument_list|)
expr_stmt|;
block|}
name|cachedName
operator|=
operator|new
name|CachedName
argument_list|(
name|name
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|idNameCache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|cachedName
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**    * Returns the file stat for a file descriptor.    *    * @param fd file descriptor.    * @return the file descriptor file stat.    * @throws IOException thrown if there was an IO error while obtaining the file stat.    */
DECL|method|getFstat (FileDescriptor fd)
specifier|public
specifier|static
name|Stat
name|getFstat
parameter_list|(
name|FileDescriptor
name|fd
parameter_list|)
throws|throws
name|IOException
block|{
name|Stat
name|stat
init|=
name|fstat
argument_list|(
name|fd
argument_list|)
decl_stmt|;
name|stat
operator|.
name|owner
operator|=
name|getName
argument_list|(
name|IdCache
operator|.
name|USER
argument_list|,
name|stat
operator|.
name|ownerId
argument_list|)
expr_stmt|;
name|stat
operator|.
name|group
operator|=
name|getName
argument_list|(
name|IdCache
operator|.
name|GROUP
argument_list|,
name|stat
operator|.
name|groupId
argument_list|)
expr_stmt|;
return|return
name|stat
return|;
block|}
comment|/**    * A version of renameTo that throws a descriptive exception when it fails.    *    * @param src                  The source path    * @param dst                  The destination path    *     * @throws NativeIOException   On failure.    */
DECL|method|renameTo (File src, File dst)
specifier|public
specifier|static
name|void
name|renameTo
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|nativeLoaded
condition|)
block|{
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"renameTo(src="
operator|+
name|src
operator|+
literal|", dst="
operator|+
name|dst
operator|+
literal|") failed."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|renameTo0
argument_list|(
name|src
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dst
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A version of renameTo that throws a descriptive exception when it fails.    *    * @param src                  The source path    * @param dst                  The destination path    *     * @throws NativeIOException   On failure.    */
DECL|method|renameTo0 (String src, String dst)
specifier|private
specifier|static
specifier|native
name|void
name|renameTo0
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|NativeIOException
function_decl|;
block|}
end_class

end_unit

