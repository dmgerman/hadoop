begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|BCFile
operator|.
name|BlockRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|BCFile
operator|.
name|MetaIndexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|TFileIndexEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Utils
operator|.
name|Version
import|;
end_import

begin_comment
comment|/**  * Dumping the information of a TFile.  */
end_comment

begin_class
DECL|class|TFileDumper
class|class
name|TFileDumper
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TFileDumper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TFileDumper ()
specifier|private
name|TFileDumper
parameter_list|()
block|{
comment|// namespace object not constructable.
block|}
DECL|enum|Align
specifier|private
enum|enum
name|Align
block|{
DECL|enumConstant|LEFT
DECL|enumConstant|CENTER
DECL|enumConstant|RIGHT
DECL|enumConstant|ZERO_PADDED
name|LEFT
block|,
name|CENTER
block|,
name|RIGHT
block|,
name|ZERO_PADDED
block|;
DECL|method|format (String s, int width, Align align)
specifier|static
name|String
name|format
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|width
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>=
name|width
condition|)
return|return
name|s
return|;
name|int
name|room
init|=
name|width
operator|-
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|Align
name|alignAdjusted
init|=
name|align
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|1
condition|)
block|{
name|alignAdjusted
operator|=
name|LEFT
expr_stmt|;
block|}
if|if
condition|(
name|alignAdjusted
operator|==
name|LEFT
condition|)
block|{
return|return
name|s
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
name|room
operator|+
literal|"s"
argument_list|,
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|alignAdjusted
operator|==
name|RIGHT
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
name|room
operator|+
literal|"s"
argument_list|,
literal|""
argument_list|)
operator|+
name|s
return|;
block|}
if|if
condition|(
name|alignAdjusted
operator|==
name|CENTER
condition|)
block|{
name|int
name|half
init|=
name|room
operator|/
literal|2
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
name|half
operator|+
literal|"s"
argument_list|,
literal|""
argument_list|)
operator|+
name|s
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
operator|(
name|room
operator|-
name|half
operator|)
operator|+
literal|"s"
argument_list|,
literal|""
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported alignment"
argument_list|)
throw|;
block|}
DECL|method|format (long l, int width, Align align)
specifier|static
name|String
name|format
parameter_list|(
name|long
name|l
parameter_list|,
name|int
name|width
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
if|if
condition|(
name|align
operator|==
name|ZERO_PADDED
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%0"
operator|+
name|width
operator|+
literal|"d"
argument_list|,
name|l
argument_list|)
return|;
block|}
return|return
name|format
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|l
argument_list|)
argument_list|,
name|width
argument_list|,
name|align
argument_list|)
return|;
block|}
DECL|method|calculateWidth (String caption, long max)
specifier|static
name|int
name|calculateWidth
parameter_list|(
name|String
name|caption
parameter_list|,
name|long
name|max
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|caption
operator|.
name|length
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|max
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Dump information about TFile.    *     * @param file    *          Path string of the TFile    * @param out    *          PrintStream to output the information.    * @param conf    *          The configuration object.    * @throws IOException    */
DECL|method|dumpInfo (String file, PrintStream out, Configuration conf)
specifier|static
specifier|public
name|void
name|dumpInfo
parameter_list|(
name|String
name|file
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxKeySampleLen
init|=
literal|16
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|fsdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|TFile
operator|.
name|Reader
argument_list|(
name|fsdis
argument_list|,
name|length
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|blockCnt
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|int
name|metaBlkCnt
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|metaIndex
operator|.
name|index
operator|.
name|size
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"BCFile Version"
argument_list|,
name|reader
operator|.
name|readerBCF
operator|.
name|version
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"TFile Version"
argument_list|,
name|reader
operator|.
name|tfileMeta
operator|.
name|version
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"File Length"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Data Compression"
argument_list|,
name|reader
operator|.
name|readerBCF
operator|.
name|getDefaultCompressionName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Record Count"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|reader
operator|.
name|getEntryCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Sorted"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|reader
operator|.
name|isSorted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isSorted
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"Comparator"
argument_list|,
name|reader
operator|.
name|getComparatorName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"Data Block Count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|blockCnt
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|,
name|dataSizeUncompressed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|blockCnt
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCnt
condition|;
operator|++
name|i
control|)
block|{
name|BlockRegion
name|region
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|dataIndex
operator|.
name|getBlockRegionList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|dataSize
operator|+=
name|region
operator|.
name|getCompressedSize
argument_list|()
expr_stmt|;
name|dataSizeUncompressed
operator|+=
name|region
operator|.
name|getRawSize
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"Data Block Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|dataSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|readerBCF
operator|.
name|getDefaultCompressionName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"Data Block Uncompressed Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|dataSizeUncompressed
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Data Block Compression Ratio"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"1:%.1f"
argument_list|,
operator|(
name|double
operator|)
name|dataSizeUncompressed
operator|/
name|dataSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"Meta Block Count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|metaBlkCnt
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|metaSize
init|=
literal|0
decl_stmt|,
name|metaSizeUncompressed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|metaBlkCnt
operator|>
literal|0
condition|)
block|{
name|Collection
argument_list|<
name|MetaIndexEntry
argument_list|>
name|metaBlks
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|metaIndex
operator|.
name|index
operator|.
name|values
argument_list|()
decl_stmt|;
name|boolean
name|calculateCompression
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MetaIndexEntry
argument_list|>
name|it
init|=
name|metaBlks
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MetaIndexEntry
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|metaSize
operator|+=
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getCompressedSize
argument_list|()
expr_stmt|;
name|metaSizeUncompressed
operator|+=
name|e
operator|.
name|getRegion
argument_list|()
operator|.
name|getRawSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCompressionAlgorithm
argument_list|()
operator|!=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
name|calculateCompression
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"Meta Block Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|metaSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|calculateCompression
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"Meta Block Uncompressed Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|metaSizeUncompressed
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Meta Block Compression Ratio"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"1:%.1f"
argument_list|,
operator|(
name|double
operator|)
name|metaSizeUncompressed
operator|/
name|metaSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"Meta-Data Size Ratio"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"1:%.1f"
argument_list|,
operator|(
name|double
operator|)
name|dataSize
operator|/
name|metaSize
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|leftOverBytes
init|=
name|length
operator|-
name|dataSize
operator|-
name|metaSize
decl_stmt|;
name|long
name|miscSize
init|=
name|BCFile
operator|.
name|Magic
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|+
name|Version
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|metaIndexSize
init|=
name|leftOverBytes
operator|-
name|miscSize
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Meta Block Index Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|metaIndexSize
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"Headers Etc Bytes"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|miscSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now output the properties table.
name|int
name|maxKeyLength
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
init|=
name|properties
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|entrySet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|maxKeyLength
condition|)
block|{
name|maxKeyLength
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|entrySet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s : %s%n"
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|maxKeyLength
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|reader
operator|.
name|checkTFileDataIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockCnt
operator|>
literal|0
condition|)
block|{
name|String
name|blkID
init|=
literal|"Data-Block"
decl_stmt|;
name|int
name|blkIDWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|blkID
argument_list|,
name|blockCnt
argument_list|)
decl_stmt|;
name|int
name|blkIDWidth2
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
literal|""
argument_list|,
name|blockCnt
argument_list|)
decl_stmt|;
name|String
name|offset
init|=
literal|"Offset"
decl_stmt|;
name|int
name|offsetWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|String
name|blkLen
init|=
literal|"Length"
decl_stmt|;
name|int
name|blkLenWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|blkLen
argument_list|,
name|dataSize
operator|/
name|blockCnt
operator|*
literal|10
argument_list|)
decl_stmt|;
name|String
name|rawSize
init|=
literal|"Raw-Size"
decl_stmt|;
name|int
name|rawSizeWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|rawSize
argument_list|,
name|dataSizeUncompressed
operator|/
name|blockCnt
operator|*
literal|10
argument_list|)
decl_stmt|;
name|String
name|records
init|=
literal|"Records"
decl_stmt|;
name|int
name|recordsWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|records
argument_list|,
name|reader
operator|.
name|getEntryCount
argument_list|()
operator|/
name|blockCnt
operator|*
literal|10
argument_list|)
decl_stmt|;
name|String
name|endKey
init|=
literal|"End-Key"
decl_stmt|;
name|int
name|endKeyWidth
init|=
name|Math
operator|.
name|max
argument_list|(
name|endKey
operator|.
name|length
argument_list|()
argument_list|,
name|maxKeySampleLen
operator|*
literal|2
operator|+
literal|5
argument_list|)
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s %s %s %s %s %s%n"
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|blkID
argument_list|,
name|blkIDWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|offset
argument_list|,
name|offsetWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|blkLen
argument_list|,
name|blkLenWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|rawSize
argument_list|,
name|rawSizeWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|records
argument_list|,
name|recordsWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|endKey
argument_list|,
name|endKeyWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockCnt
condition|;
operator|++
name|i
control|)
block|{
name|BlockRegion
name|region
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|dataIndex
operator|.
name|getBlockRegionList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TFileIndexEntry
name|indexEntry
init|=
name|reader
operator|.
name|tfileIndex
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s %s %s %s %s "
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|Align
operator|.
name|format
argument_list|(
name|i
argument_list|,
name|blkIDWidth2
argument_list|,
name|Align
operator|.
name|ZERO_PADDED
argument_list|)
argument_list|,
name|blkIDWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offsetWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getCompressedSize
argument_list|()
argument_list|,
name|blkLenWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getRawSize
argument_list|()
argument_list|,
name|rawSizeWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|indexEntry
operator|.
name|kvEntries
argument_list|,
name|recordsWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|key
init|=
name|indexEntry
operator|.
name|key
decl_stmt|;
name|boolean
name|asAscii
init|=
literal|true
decl_stmt|;
name|int
name|sampleLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxKeySampleLen
argument_list|,
name|key
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sampleLen
condition|;
operator|++
name|j
control|)
block|{
name|byte
name|b
init|=
name|key
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|<
literal|32
operator|&&
name|b
operator|!=
literal|9
operator|)
operator|||
operator|(
name|b
operator|==
literal|127
operator|)
condition|)
block|{
name|asAscii
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|asAscii
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"0X"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sampleLen
condition|;
operator|++
name|j
control|)
block|{
name|byte
name|b
init|=
name|key
index|[
name|i
index|]
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%X"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
operator|new
name|String
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|sampleLen
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sampleLen
operator|<
name|key
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|metaBlkCnt
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
literal|"Meta-Block"
decl_stmt|;
name|int
name|maxNameLen
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
argument_list|>
name|metaBlkEntrySet
init|=
name|reader
operator|.
name|readerBCF
operator|.
name|metaIndex
operator|.
name|index
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
argument_list|>
name|it
init|=
name|metaBlkEntrySet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|maxNameLen
condition|)
block|{
name|maxNameLen
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|nameWidth
init|=
name|Math
operator|.
name|max
argument_list|(
name|name
operator|.
name|length
argument_list|()
argument_list|,
name|maxNameLen
argument_list|)
decl_stmt|;
name|String
name|offset
init|=
literal|"Offset"
decl_stmt|;
name|int
name|offsetWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|String
name|blkLen
init|=
literal|"Length"
decl_stmt|;
name|int
name|blkLenWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|blkLen
argument_list|,
name|metaSize
operator|/
name|metaBlkCnt
operator|*
literal|10
argument_list|)
decl_stmt|;
name|String
name|rawSize
init|=
literal|"Raw-Size"
decl_stmt|;
name|int
name|rawSizeWidth
init|=
name|Align
operator|.
name|calculateWidth
argument_list|(
name|rawSize
argument_list|,
name|metaSizeUncompressed
operator|/
name|metaBlkCnt
operator|*
literal|10
argument_list|)
decl_stmt|;
name|String
name|compression
init|=
literal|"Compression"
decl_stmt|;
name|int
name|compressionWidth
init|=
name|compression
operator|.
name|length
argument_list|()
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s %s %s %s %s%n"
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|name
argument_list|,
name|nameWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|offset
argument_list|,
name|offsetWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|blkLen
argument_list|,
name|blkLenWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|rawSize
argument_list|,
name|rawSizeWidth
argument_list|,
name|Align
operator|.
name|CENTER
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|compression
argument_list|,
name|compressionWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
argument_list|>
name|it
init|=
name|metaBlkEntrySet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MetaIndexEntry
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|blkName
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getMetaName
argument_list|()
decl_stmt|;
name|BlockRegion
name|region
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|String
name|blkCompression
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getCompressionAlgorithm
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|out
operator|.
name|printf
argument_list|(
literal|"%s %s %s %s %s%n"
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|blkName
argument_list|,
name|nameWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offsetWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getCompressedSize
argument_list|()
argument_list|,
name|blkLenWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|region
operator|.
name|getRawSize
argument_list|()
argument_list|,
name|rawSizeWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|,
name|Align
operator|.
name|format
argument_list|(
name|blkCompression
argument_list|,
name|compressionWidth
argument_list|,
name|Align
operator|.
name|LEFT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|reader
argument_list|,
name|fsdis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

