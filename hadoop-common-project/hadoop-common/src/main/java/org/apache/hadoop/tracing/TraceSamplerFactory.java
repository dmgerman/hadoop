begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|impl
operator|.
name|ProbabilitySampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TraceSamplerFactory
specifier|public
class|class
name|TraceSamplerFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TraceSamplerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createSampler (Configuration conf)
specifier|public
specifier|static
name|Sampler
argument_list|<
name|?
argument_list|>
name|createSampler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|samplerStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_TRACE_SAMPLER
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HADOOP_TRACE_SAMPLER_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|samplerStr
operator|.
name|equals
argument_list|(
literal|"NeverSampler"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HTrace is OFF for all spans."
argument_list|)
expr_stmt|;
return|return
name|Sampler
operator|.
name|NEVER
return|;
block|}
elseif|else
if|if
condition|(
name|samplerStr
operator|.
name|equals
argument_list|(
literal|"AlwaysSampler"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HTrace is ON for all spans."
argument_list|)
expr_stmt|;
return|return
name|Sampler
operator|.
name|ALWAYS
return|;
block|}
elseif|else
if|if
condition|(
name|samplerStr
operator|.
name|equals
argument_list|(
literal|"ProbabilitySampler"
argument_list|)
condition|)
block|{
name|double
name|percentage
init|=
name|conf
operator|.
name|getDouble
argument_list|(
literal|"htrace.probability.sampler.percentage"
argument_list|,
literal|0.01d
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HTrace is ON for "
operator|+
name|percentage
operator|+
literal|"% of top-level spans."
argument_list|)
expr_stmt|;
return|return
operator|new
name|ProbabilitySampler
argument_list|(
name|percentage
operator|/
literal|100.0d
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't create sampler "
operator|+
name|samplerStr
operator|+
literal|".  Available samplers are NeverSampler, AlwaysSampler, "
operator|+
literal|"and ProbabilitySampler."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

