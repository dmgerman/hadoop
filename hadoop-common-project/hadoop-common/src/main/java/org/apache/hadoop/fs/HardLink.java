begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createLink
import|;
end_import

begin_comment
comment|/**  * Class for creating hardlinks.  * Supports Unix/Linux, Windows via winutils , and Mac OS X.  *   * The HardLink class was formerly a static inner class of FSUtil,  * and the methods provided were blatantly non-thread-safe.  * To enable volume-parallel Update snapshots, we now provide static   * threadsafe methods that allocate new buffer string arrays  * upon each call.  We also provide an API to hardlink all files in a  * directory with a single command, which is up to 128 times more   * efficient - and minimizes the impact of the extra buffer creations.  */
end_comment

begin_class
DECL|class|HardLink
specifier|public
class|class
name|HardLink
block|{
DECL|field|getHardLinkCommand
specifier|private
specifier|static
name|HardLinkCommandGetter
name|getHardLinkCommand
decl_stmt|;
DECL|field|linkStats
specifier|public
specifier|final
name|LinkStats
name|linkStats
decl_stmt|;
comment|//not static
comment|//initialize the command "getters" statically, so can use their
comment|//methods without instantiating the HardLink object
static|static
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// Windows
name|getHardLinkCommand
operator|=
operator|new
name|HardLinkCGWin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Unix or Linux
name|getHardLinkCommand
operator|=
operator|new
name|HardLinkCGUnix
argument_list|()
expr_stmt|;
comment|//override getLinkCountCommand for the particular Unix variant
comment|//Linux is already set as the default - {"stat","-c%h", null}
if|if
condition|(
name|Shell
operator|.
name|MAC
operator|||
name|Shell
operator|.
name|FREEBSD
condition|)
block|{
name|String
index|[]
name|linkCountCmdTemplate
init|=
block|{
literal|"/usr/bin/stat"
block|,
literal|"-f%l"
block|,
literal|null
block|}
decl_stmt|;
name|HardLinkCGUnix
operator|.
name|setLinkCountCmdTemplate
argument_list|(
name|linkCountCmdTemplate
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Shell
operator|.
name|SOLARIS
condition|)
block|{
name|String
index|[]
name|linkCountCmdTemplate
init|=
block|{
literal|"ls"
block|,
literal|"-l"
block|,
literal|null
block|}
decl_stmt|;
name|HardLinkCGUnix
operator|.
name|setLinkCountCmdTemplate
argument_list|(
name|linkCountCmdTemplate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|HardLink ()
specifier|public
name|HardLink
parameter_list|()
block|{
name|linkStats
operator|=
operator|new
name|LinkStats
argument_list|()
expr_stmt|;
block|}
comment|/**    * This abstract class bridges the OS-dependent implementations of the     * needed functionality for querying link counts.    * The particular implementation class is chosen during     * static initialization phase of the HardLink class.    * The "getter" methods construct shell command strings.    */
DECL|class|HardLinkCommandGetter
specifier|private
specifier|static
specifier|abstract
class|class
name|HardLinkCommandGetter
block|{
comment|/**      * Get the command string to query the hardlink count of a file      */
DECL|method|linkCount (File file)
specifier|abstract
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Implementation of HardLinkCommandGetter class for Unix    */
DECL|class|HardLinkCGUnix
specifier|private
specifier|static
class|class
name|HardLinkCGUnix
extends|extends
name|HardLinkCommandGetter
block|{
DECL|field|getLinkCountCommand
specifier|private
specifier|static
name|String
index|[]
name|getLinkCountCommand
init|=
block|{
literal|"stat"
block|,
literal|"-c%h"
block|,
literal|null
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
DECL|method|setLinkCountCmdTemplate (String[] template)
name|void
name|setLinkCountCmdTemplate
parameter_list|(
name|String
index|[]
name|template
parameter_list|)
block|{
comment|//May update this for specific unix variants,
comment|//after static initialization phase
name|getLinkCountCommand
operator|=
name|template
expr_stmt|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkCount(java.io.File)      */
annotation|@
name|Override
DECL|method|linkCount (File file)
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|getLinkCountCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|getLinkCountCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|getLinkCountCommand
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
index|[
name|getLinkCountCommand
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
comment|/**    * Implementation of HardLinkCommandGetter class for Windows    */
annotation|@
name|VisibleForTesting
DECL|class|HardLinkCGWin
specifier|static
class|class
name|HardLinkCGWin
extends|extends
name|HardLinkCommandGetter
block|{
comment|/**      * Build the windows link command. This must not      * use an exception-raising reference to WINUTILS, as      * some tests examine the command.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|field|getLinkCountCommand
specifier|static
name|String
index|[]
name|getLinkCountCommand
init|=
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"hardlink"
block|,
literal|"stat"
block|,
literal|null
block|}
decl_stmt|;
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkCount(java.io.File)      */
annotation|@
name|Override
DECL|method|linkCount (File file)
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
comment|// trigger the check for winutils
name|Shell
operator|.
name|getWinUtilsFile
argument_list|()
expr_stmt|;
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|getLinkCountCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|getLinkCountCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|getLinkCountCommand
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
index|[
name|getLinkCountCommand
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|file
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
comment|/*    * ****************************************************    * Complexity is above.  User-visible functionality is below    * ****************************************************    */
comment|/**    * Creates a hardlink     * @param file - existing source file    * @param linkName - desired target link file    */
DECL|method|createHardLink (File file, File linkName)
specifier|public
specifier|static
name|void
name|createHardLink
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLink: source file is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|linkName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLink: link name is null"
argument_list|)
throw|;
block|}
name|createLink
argument_list|(
name|linkName
operator|.
name|toPath
argument_list|()
argument_list|,
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates hardlinks from multiple existing files within one parent    * directory, into one target directory.    * @param parentDir - directory containing source files    * @param fileBaseNames - list of path-less file names, as returned by     *                        parentDir.list()    * @param linkDir - where the hardlinks should be put. It must already exist.    */
DECL|method|createHardLinkMult (File parentDir, String[] fileBaseNames, File linkDir)
specifier|public
specifier|static
name|void
name|createHardLinkMult
parameter_list|(
name|File
name|parentDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: parent directory is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|linkDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: link directory is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileBaseNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: "
operator|+
literal|"filename list can be empty but not null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|linkDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|linkDir
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|name
range|:
name|fileBaseNames
control|)
block|{
name|createLink
argument_list|(
name|linkDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
argument_list|,
name|parentDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retrieves the number of links to the specified file.    */
DECL|method|getLinkCount (File fileName)
specifier|public
specifier|static
name|int
name|getLinkCount
parameter_list|(
name|File
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid argument to getLinkCount: file name is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fileName
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|fileName
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
comment|// construct and execute shell command
name|String
index|[]
name|cmd
init|=
name|getHardLinkCommand
operator|.
name|linkCount
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|inpMsg
init|=
literal|null
decl_stmt|;
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
name|int
name|exitValue
init|=
operator|-
literal|1
decl_stmt|;
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inpMsg
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|exitValue
operator|=
name|shexec
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
operator|||
name|exitValue
operator|!=
literal|0
condition|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
literal|null
argument_list|)
throw|;
block|}
if|if
condition|(
name|Shell
operator|.
name|SOLARIS
condition|)
block|{
name|String
index|[]
name|result
init|=
name|inpMsg
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|result
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|inpMsg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
name|inpMsg
operator|=
name|shexec
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|errMsg
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|exitValue
operator|=
name|e
operator|.
name|getExitCode
argument_list|()
expr_stmt|;
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Create an IOException for failing to get link count. */
DECL|method|createIOException (File f, String message, String error, int exitvalue, Exception cause)
specifier|private
specifier|static
name|IOException
name|createIOException
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|error
parameter_list|,
name|int
name|exitvalue
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
literal|"Failed to get link count on file "
operator|+
name|f
operator|+
literal|": message="
operator|+
name|message
operator|+
literal|"; error="
operator|+
name|error
operator|+
literal|"; exit value="
operator|+
name|exitvalue
decl_stmt|;
return|return
operator|(
name|cause
operator|==
literal|null
operator|)
condition|?
operator|new
name|IOException
argument_list|(
name|s
argument_list|)
else|:
operator|new
name|IOException
argument_list|(
name|s
argument_list|,
name|cause
argument_list|)
return|;
block|}
comment|/**    * HardLink statistics counters and methods.    * Not multi-thread safe, obviously.    * Init is called during HardLink instantiation, above.    *     * These are intended for use by knowledgeable clients, not internally,     * because many of the internal methods are static and can't update these    * per-instance counters.    */
DECL|class|LinkStats
specifier|public
specifier|static
class|class
name|LinkStats
block|{
DECL|field|countDirs
specifier|public
name|int
name|countDirs
init|=
literal|0
decl_stmt|;
DECL|field|countSingleLinks
specifier|public
name|int
name|countSingleLinks
init|=
literal|0
decl_stmt|;
DECL|field|countMultLinks
specifier|public
name|int
name|countMultLinks
init|=
literal|0
decl_stmt|;
DECL|field|countFilesMultLinks
specifier|public
name|int
name|countFilesMultLinks
init|=
literal|0
decl_stmt|;
DECL|field|countEmptyDirs
specifier|public
name|int
name|countEmptyDirs
init|=
literal|0
decl_stmt|;
DECL|field|countPhysicalFileCopies
specifier|public
name|int
name|countPhysicalFileCopies
init|=
literal|0
decl_stmt|;
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|countDirs
operator|=
literal|0
expr_stmt|;
name|countSingleLinks
operator|=
literal|0
expr_stmt|;
name|countMultLinks
operator|=
literal|0
expr_stmt|;
name|countFilesMultLinks
operator|=
literal|0
expr_stmt|;
name|countEmptyDirs
operator|=
literal|0
expr_stmt|;
name|countPhysicalFileCopies
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|report ()
specifier|public
name|String
name|report
parameter_list|()
block|{
return|return
literal|"HardLinkStats: "
operator|+
name|countDirs
operator|+
literal|" Directories, including "
operator|+
name|countEmptyDirs
operator|+
literal|" Empty Directories, "
operator|+
name|countSingleLinks
operator|+
literal|" single Link operations, "
operator|+
name|countMultLinks
operator|+
literal|" multi-Link operations, linking "
operator|+
name|countFilesMultLinks
operator|+
literal|" files, total "
operator|+
operator|(
name|countSingleLinks
operator|+
name|countFilesMultLinks
operator|)
operator|+
literal|" linkable files.  Also physically copied "
operator|+
name|countPhysicalFileCopies
operator|+
literal|" other files."
return|;
block|}
block|}
block|}
end_class

end_unit

