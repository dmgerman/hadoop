begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.jvm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|State
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|GarbageCollectorMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Singleton class which reports Java Virtual Machine metrics to the metrics API.    * Any application can create an instance of this class in order to emit  * Java VM metrics.    *  * @deprecated Use {@link org.apache.hadoop.metrics2.source.JvmMetrics} instead.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JvmMetrics
specifier|public
class|class
name|JvmMetrics
implements|implements
name|Updater
block|{
DECL|field|M
specifier|private
specifier|static
specifier|final
name|float
name|M
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|theInstance
specifier|private
specifier|static
name|JvmMetrics
name|theInstance
init|=
literal|null
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JvmMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|metrics
specifier|private
name|MetricsRecord
name|metrics
decl_stmt|;
comment|// garbage collection counters
DECL|field|gcCount
specifier|private
name|long
name|gcCount
init|=
literal|0
decl_stmt|;
DECL|field|gcTimeMillis
specifier|private
name|long
name|gcTimeMillis
init|=
literal|0
decl_stmt|;
comment|// logging event counters
DECL|field|fatalCount
specifier|private
name|long
name|fatalCount
init|=
literal|0
decl_stmt|;
DECL|field|errorCount
specifier|private
name|long
name|errorCount
init|=
literal|0
decl_stmt|;
DECL|field|warnCount
specifier|private
name|long
name|warnCount
init|=
literal|0
decl_stmt|;
DECL|field|infoCount
specifier|private
name|long
name|infoCount
init|=
literal|0
decl_stmt|;
DECL|method|init (String processName, String sessionId)
specifier|public
specifier|synchronized
specifier|static
name|JvmMetrics
name|init
parameter_list|(
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|)
block|{
return|return
name|init
argument_list|(
name|processName
argument_list|,
name|sessionId
argument_list|,
literal|"metrics"
argument_list|)
return|;
block|}
DECL|method|init (String processName, String sessionId, String recordName)
specifier|public
specifier|synchronized
specifier|static
name|JvmMetrics
name|init
parameter_list|(
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|String
name|recordName
parameter_list|)
block|{
if|if
condition|(
name|theInstance
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Cannot initialize JVM Metrics with processName="
operator|+
name|processName
operator|+
literal|", sessionId="
operator|+
name|sessionId
operator|+
literal|" - already initialized"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing JVM Metrics with processName="
operator|+
name|processName
operator|+
literal|", sessionId="
operator|+
name|sessionId
argument_list|)
expr_stmt|;
name|theInstance
operator|=
operator|new
name|JvmMetrics
argument_list|(
name|processName
argument_list|,
name|sessionId
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
block|}
return|return
name|theInstance
return|;
block|}
comment|/** Creates a new instance of JvmMetrics */
DECL|method|JvmMetrics (String processName, String sessionId, String recordName)
specifier|private
name|JvmMetrics
parameter_list|(
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|String
name|recordName
parameter_list|)
block|{
name|MetricsContext
name|context
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"jvm"
argument_list|)
decl_stmt|;
name|metrics
operator|=
name|MetricsUtil
operator|.
name|createRecord
argument_list|(
name|context
argument_list|,
name|recordName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTag
argument_list|(
literal|"processName"
argument_list|,
name|processName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setTag
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * This will be called periodically (with the period being configuration      * dependent).      */
annotation|@
name|Override
DECL|method|doUpdates (MetricsContext context)
specifier|public
name|void
name|doUpdates
parameter_list|(
name|MetricsContext
name|context
parameter_list|)
block|{
name|doMemoryUpdates
argument_list|()
expr_stmt|;
name|doGarbageCollectionUpdates
argument_list|()
expr_stmt|;
name|doThreadUpdates
argument_list|()
expr_stmt|;
name|doEventCountUpdates
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|doMemoryUpdates ()
specifier|private
name|void
name|doMemoryUpdates
parameter_list|()
block|{
name|MemoryMXBean
name|memoryMXBean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|MemoryUsage
name|memNonHeap
init|=
name|memoryMXBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
decl_stmt|;
name|MemoryUsage
name|memHeap
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"memNonHeapUsedM"
argument_list|,
name|memNonHeap
operator|.
name|getUsed
argument_list|()
operator|/
name|M
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"memNonHeapCommittedM"
argument_list|,
name|memNonHeap
operator|.
name|getCommitted
argument_list|()
operator|/
name|M
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"memHeapUsedM"
argument_list|,
name|memHeap
operator|.
name|getUsed
argument_list|()
operator|/
name|M
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"memHeapCommittedM"
argument_list|,
name|memHeap
operator|.
name|getCommitted
argument_list|()
operator|/
name|M
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"maxMemoryM"
argument_list|,
name|runtime
operator|.
name|maxMemory
argument_list|()
operator|/
name|M
argument_list|)
expr_stmt|;
block|}
DECL|method|doGarbageCollectionUpdates ()
specifier|private
name|void
name|doGarbageCollectionUpdates
parameter_list|()
block|{
name|List
argument_list|<
name|GarbageCollectorMXBean
argument_list|>
name|gcBeans
init|=
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|timeMillis
init|=
literal|0
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|gcBean
range|:
name|gcBeans
control|)
block|{
name|count
operator|+=
name|gcBean
operator|.
name|getCollectionCount
argument_list|()
expr_stmt|;
name|timeMillis
operator|+=
name|gcBean
operator|.
name|getCollectionTime
argument_list|()
expr_stmt|;
block|}
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"gcCount"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|count
operator|-
name|gcCount
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"gcTimeMillis"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|timeMillis
operator|-
name|gcTimeMillis
argument_list|)
argument_list|)
expr_stmt|;
name|gcCount
operator|=
name|count
expr_stmt|;
name|gcTimeMillis
operator|=
name|timeMillis
expr_stmt|;
block|}
DECL|method|doThreadUpdates ()
specifier|private
name|void
name|doThreadUpdates
parameter_list|()
block|{
name|ThreadMXBean
name|threadMXBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|long
name|threadIds
index|[]
init|=
name|threadMXBean
operator|.
name|getAllThreadIds
argument_list|()
decl_stmt|;
name|ThreadInfo
index|[]
name|threadInfos
init|=
name|threadMXBean
operator|.
name|getThreadInfo
argument_list|(
name|threadIds
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|threadsNew
init|=
literal|0
decl_stmt|;
name|int
name|threadsRunnable
init|=
literal|0
decl_stmt|;
name|int
name|threadsBlocked
init|=
literal|0
decl_stmt|;
name|int
name|threadsWaiting
init|=
literal|0
decl_stmt|;
name|int
name|threadsTimedWaiting
init|=
literal|0
decl_stmt|;
name|int
name|threadsTerminated
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ThreadInfo
name|threadInfo
range|:
name|threadInfos
control|)
block|{
comment|// threadInfo is null if the thread is not alive or doesn't exist
if|if
condition|(
name|threadInfo
operator|==
literal|null
condition|)
continue|continue;
name|Thread
operator|.
name|State
name|state
init|=
name|threadInfo
operator|.
name|getThreadState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|NEW
condition|)
block|{
name|threadsNew
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|RUNNABLE
condition|)
block|{
name|threadsRunnable
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|BLOCKED
condition|)
block|{
name|threadsBlocked
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|WAITING
condition|)
block|{
name|threadsWaiting
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|TIMED_WAITING
condition|)
block|{
name|threadsTimedWaiting
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|TERMINATED
condition|)
block|{
name|threadsTerminated
operator|++
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsNew"
argument_list|,
name|threadsNew
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsRunnable"
argument_list|,
name|threadsRunnable
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsBlocked"
argument_list|,
name|threadsBlocked
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsWaiting"
argument_list|,
name|threadsWaiting
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsTimedWaiting"
argument_list|,
name|threadsTimedWaiting
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"threadsTerminated"
argument_list|,
name|threadsTerminated
argument_list|)
expr_stmt|;
block|}
DECL|method|doEventCountUpdates ()
specifier|private
name|void
name|doEventCountUpdates
parameter_list|()
block|{
name|long
name|newFatal
init|=
name|EventCounter
operator|.
name|getFatal
argument_list|()
decl_stmt|;
name|long
name|newError
init|=
name|EventCounter
operator|.
name|getError
argument_list|()
decl_stmt|;
name|long
name|newWarn
init|=
name|EventCounter
operator|.
name|getWarn
argument_list|()
decl_stmt|;
name|long
name|newInfo
init|=
name|EventCounter
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"logFatal"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|newFatal
operator|-
name|fatalCount
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"logError"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|newError
operator|-
name|errorCount
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"logWarn"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|newWarn
operator|-
name|warnCount
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrMetric
argument_list|(
literal|"logInfo"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|newInfo
operator|-
name|infoCount
argument_list|)
argument_list|)
expr_stmt|;
name|fatalCount
operator|=
name|newFatal
expr_stmt|;
name|errorCount
operator|=
name|newError
expr_stmt|;
name|warnCount
operator|=
name|newWarn
expr_stmt|;
name|infoCount
operator|=
name|newInfo
expr_stmt|;
block|}
block|}
end_class

end_unit

