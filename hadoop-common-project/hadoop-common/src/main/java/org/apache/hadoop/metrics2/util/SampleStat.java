begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Helper to compute running sample stats  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SampleStat
specifier|public
class|class
name|SampleStat
block|{
DECL|field|minmax
specifier|private
specifier|final
name|MinMax
name|minmax
init|=
operator|new
name|MinMax
argument_list|()
decl_stmt|;
DECL|field|numSamples
specifier|private
name|long
name|numSamples
init|=
literal|0
decl_stmt|;
DECL|field|a0
DECL|field|a1
DECL|field|s0
DECL|field|s1
specifier|private
name|double
name|a0
decl_stmt|,
name|a1
decl_stmt|,
name|s0
decl_stmt|,
name|s1
decl_stmt|;
comment|/**    * Construct a new running sample stat    */
DECL|method|SampleStat ()
specifier|public
name|SampleStat
parameter_list|()
block|{
name|a0
operator|=
name|s0
operator|=
literal|0.0
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|numSamples
operator|=
literal|0
expr_stmt|;
name|a0
operator|=
name|s0
operator|=
literal|0.0
expr_stmt|;
name|minmax
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// We want to reuse the object, sometimes.
DECL|method|reset (long numSamples, double a0, double a1, double s0, double s1, MinMax minmax)
name|void
name|reset
parameter_list|(
name|long
name|numSamples
parameter_list|,
name|double
name|a0
parameter_list|,
name|double
name|a1
parameter_list|,
name|double
name|s0
parameter_list|,
name|double
name|s1
parameter_list|,
name|MinMax
name|minmax
parameter_list|)
block|{
name|this
operator|.
name|numSamples
operator|=
name|numSamples
expr_stmt|;
name|this
operator|.
name|a0
operator|=
name|a0
expr_stmt|;
name|this
operator|.
name|a1
operator|=
name|a1
expr_stmt|;
name|this
operator|.
name|s0
operator|=
name|s0
expr_stmt|;
name|this
operator|.
name|s1
operator|=
name|s1
expr_stmt|;
name|this
operator|.
name|minmax
operator|.
name|reset
argument_list|(
name|minmax
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the values to other (saves object creation and gc.)    * @param other the destination to hold our values    */
DECL|method|copyTo (SampleStat other)
specifier|public
name|void
name|copyTo
parameter_list|(
name|SampleStat
name|other
parameter_list|)
block|{
name|other
operator|.
name|reset
argument_list|(
name|numSamples
argument_list|,
name|a0
argument_list|,
name|a1
argument_list|,
name|s0
argument_list|,
name|s1
argument_list|,
name|minmax
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a sample the running stat.    * @param x the sample number    * @return  self    */
DECL|method|add (double x)
specifier|public
name|SampleStat
name|add
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|minmax
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|add
argument_list|(
literal|1
argument_list|,
name|x
argument_list|)
return|;
block|}
comment|/**    * Add some sample and a partial sum to the running stat.    * Note, min/max is not evaluated using this method.    * @param nSamples  number of samples    * @param x the partial sum    * @return  self    */
DECL|method|add (long nSamples, double x)
specifier|public
name|SampleStat
name|add
parameter_list|(
name|long
name|nSamples
parameter_list|,
name|double
name|x
parameter_list|)
block|{
name|numSamples
operator|+=
name|nSamples
expr_stmt|;
if|if
condition|(
name|numSamples
operator|==
literal|1
condition|)
block|{
name|a0
operator|=
name|a1
operator|=
name|x
expr_stmt|;
name|s0
operator|=
literal|0.0
expr_stmt|;
block|}
else|else
block|{
comment|// The Welford method for numerical stability
name|a1
operator|=
name|a0
operator|+
operator|(
name|x
operator|-
name|a0
operator|)
operator|/
name|numSamples
expr_stmt|;
name|s1
operator|=
name|s0
operator|+
operator|(
name|x
operator|-
name|a0
operator|)
operator|*
operator|(
name|x
operator|-
name|a1
operator|)
expr_stmt|;
name|a0
operator|=
name|a1
expr_stmt|;
name|s0
operator|=
name|s1
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**    * @return  the total number of samples    */
DECL|method|numSamples ()
specifier|public
name|long
name|numSamples
parameter_list|()
block|{
return|return
name|numSamples
return|;
block|}
comment|/**    * @return  the arithmetic mean of the samples    */
DECL|method|mean ()
specifier|public
name|double
name|mean
parameter_list|()
block|{
return|return
name|numSamples
operator|>
literal|0
condition|?
name|a1
else|:
literal|0.0
return|;
block|}
comment|/**    * @return  the variance of the samples    */
DECL|method|variance ()
specifier|public
name|double
name|variance
parameter_list|()
block|{
return|return
name|numSamples
operator|>
literal|1
condition|?
name|s1
operator|/
operator|(
name|numSamples
operator|-
literal|1
operator|)
else|:
literal|0.0
return|;
block|}
comment|/**    * @return  the standard deviation of the samples    */
DECL|method|stddev ()
specifier|public
name|double
name|stddev
parameter_list|()
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return  the minimum value of the samples    */
DECL|method|min ()
specifier|public
name|double
name|min
parameter_list|()
block|{
return|return
name|minmax
operator|.
name|min
argument_list|()
return|;
block|}
comment|/**    * @return  the maximum value of the samples    */
DECL|method|max ()
specifier|public
name|double
name|max
parameter_list|()
block|{
return|return
name|minmax
operator|.
name|max
argument_list|()
return|;
block|}
comment|/**    * Helper to keep running min/max    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"PublicInnerClass"
argument_list|)
DECL|class|MinMax
specifier|public
specifier|static
class|class
name|MinMax
block|{
comment|// Float.MAX_VALUE is used rather than Double.MAX_VALUE, even though the
comment|// min and max variables are of type double.
comment|// Float.MAX_VALUE is big enough, and using Double.MAX_VALUE makes
comment|// Ganglia core due to buffer overflow.
comment|// The same reasoning applies to the MIN_VALUE counterparts.
DECL|field|DEFAULT_MIN_VALUE
specifier|static
specifier|final
name|double
name|DEFAULT_MIN_VALUE
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|DEFAULT_MAX_VALUE
specifier|static
specifier|final
name|double
name|DEFAULT_MAX_VALUE
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|min
specifier|private
name|double
name|min
init|=
name|DEFAULT_MIN_VALUE
decl_stmt|;
DECL|field|max
specifier|private
name|double
name|max
init|=
name|DEFAULT_MAX_VALUE
decl_stmt|;
DECL|method|add (double value)
specifier|public
name|void
name|add
parameter_list|(
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
name|max
condition|)
name|max
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|value
operator|<
name|min
condition|)
name|min
operator|=
name|value
expr_stmt|;
block|}
DECL|method|min ()
specifier|public
name|double
name|min
parameter_list|()
block|{
return|return
name|min
return|;
block|}
DECL|method|max ()
specifier|public
name|double
name|max
parameter_list|()
block|{
return|return
name|max
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|min
operator|=
name|DEFAULT_MIN_VALUE
expr_stmt|;
name|max
operator|=
name|DEFAULT_MAX_VALUE
expr_stmt|;
block|}
DECL|method|reset (MinMax other)
specifier|public
name|void
name|reset
parameter_list|(
name|MinMax
name|other
parameter_list|)
block|{
name|min
operator|=
name|other
operator|.
name|min
argument_list|()
expr_stmt|;
name|max
operator|=
name|other
operator|.
name|max
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

