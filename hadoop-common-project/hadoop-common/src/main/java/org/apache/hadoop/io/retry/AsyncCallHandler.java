begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AsyncGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/** Handle async calls. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|AsyncCallHandler
specifier|public
class|class
name|AsyncCallHandler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncCallHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AsyncGet
argument_list|<
name|?
argument_list|,
name|Exception
argument_list|>
argument_list|>
DECL|field|LOWER_LAYER_ASYNC_RETURN
name|LOWER_LAYER_ASYNC_RETURN
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AsyncGet
argument_list|<
name|Object
argument_list|,
name|Throwable
argument_list|>
argument_list|>
DECL|field|ASYNC_RETURN
name|ASYNC_RETURN
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** @return the async return value from {@link AsyncCallHandler}. */
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getAsyncReturn ()
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|AsyncGet
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
name|getAsyncReturn
parameter_list|()
block|{
specifier|final
name|AsyncGet
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
name|asyncGet
init|=
operator|(
name|AsyncGet
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
operator|)
name|ASYNC_RETURN
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|asyncGet
operator|!=
literal|null
condition|)
block|{
name|ASYNC_RETURN
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|asyncGet
return|;
block|}
else|else
block|{
return|return
operator|(
name|AsyncGet
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
operator|)
name|getLowerLayerAsyncReturn
argument_list|()
return|;
block|}
block|}
comment|/** For the lower rpc layers to set the async return value. */
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|setLowerLayerAsyncReturn ( AsyncGet<?, Exception> asyncReturn)
specifier|public
specifier|static
name|void
name|setLowerLayerAsyncReturn
parameter_list|(
name|AsyncGet
argument_list|<
name|?
argument_list|,
name|Exception
argument_list|>
name|asyncReturn
parameter_list|)
block|{
name|LOWER_LAYER_ASYNC_RETURN
operator|.
name|set
argument_list|(
name|asyncReturn
argument_list|)
expr_stmt|;
block|}
DECL|method|getLowerLayerAsyncReturn ()
specifier|private
specifier|static
name|AsyncGet
argument_list|<
name|?
argument_list|,
name|Exception
argument_list|>
name|getLowerLayerAsyncReturn
parameter_list|()
block|{
specifier|final
name|AsyncGet
argument_list|<
name|?
argument_list|,
name|Exception
argument_list|>
name|asyncGet
init|=
name|LOWER_LAYER_ASYNC_RETURN
operator|.
name|get
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|asyncGet
argument_list|)
expr_stmt|;
name|LOWER_LAYER_ASYNC_RETURN
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|asyncGet
return|;
block|}
comment|/** A simple concurrent queue which keeping track the empty start time. */
DECL|class|ConcurrentQueue
specifier|static
class|class
name|ConcurrentQueue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|queue
specifier|private
specifier|final
name|Queue
argument_list|<
name|T
argument_list|>
name|queue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|emptyStartTime
specifier|private
specifier|final
name|AtomicLong
name|emptyStartTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|iterator ()
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|queue
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** Is the queue empty for more than the given time in millisecond? */
DECL|method|isEmpty (long time)
name|boolean
name|isEmpty
parameter_list|(
name|long
name|time
parameter_list|)
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|emptyStartTime
operator|.
name|get
argument_list|()
operator|>
name|time
operator|&&
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|offer (T c)
name|void
name|offer
parameter_list|(
name|T
name|c
parameter_list|)
block|{
specifier|final
name|boolean
name|added
init|=
name|queue
operator|.
name|offer
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|added
argument_list|)
expr_stmt|;
block|}
DECL|method|checkEmpty ()
name|void
name|checkEmpty
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|emptyStartTime
operator|.
name|set
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A queue for handling async calls. */
DECL|class|AsyncCallQueue
class|class
name|AsyncCallQueue
block|{
DECL|field|queue
specifier|private
specifier|final
name|ConcurrentQueue
argument_list|<
name|AsyncCall
argument_list|>
name|queue
init|=
operator|new
name|ConcurrentQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
init|=
operator|new
name|Processor
argument_list|()
decl_stmt|;
DECL|method|addCall (AsyncCall call)
name|void
name|addCall
parameter_list|(
name|AsyncCall
name|call
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"add "
operator|+
name|call
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|offer
argument_list|(
name|call
argument_list|)
expr_stmt|;
name|processor
operator|.
name|tryStart
argument_list|()
expr_stmt|;
block|}
DECL|method|checkCalls ()
name|long
name|checkCalls
parameter_list|()
block|{
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|minWaitTime
init|=
name|Processor
operator|.
name|MAX_WAIT_PERIOD
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|AsyncCall
argument_list|>
name|i
init|=
name|queue
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|AsyncCall
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// the call is done, remove it from the queue.
name|queue
operator|.
name|checkEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Long
name|waitTime
init|=
name|c
operator|.
name|getWaitTime
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitTime
operator|!=
literal|null
operator|&&
name|waitTime
operator|>
literal|0
operator|&&
name|waitTime
operator|<
name|minWaitTime
condition|)
block|{
name|minWaitTime
operator|=
name|waitTime
expr_stmt|;
block|}
block|}
block|}
return|return
name|minWaitTime
return|;
block|}
comment|/** Process the async calls in the queue. */
DECL|class|Processor
specifier|private
class|class
name|Processor
block|{
DECL|field|GRACE_PERIOD
specifier|static
specifier|final
name|long
name|GRACE_PERIOD
init|=
literal|3
operator|*
literal|1000L
decl_stmt|;
DECL|field|MAX_WAIT_PERIOD
specifier|static
specifier|final
name|long
name|MAX_WAIT_PERIOD
init|=
literal|100L
decl_stmt|;
DECL|field|running
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
name|running
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|isRunning (Daemon d)
name|boolean
name|isRunning
parameter_list|(
name|Daemon
name|d
parameter_list|)
block|{
return|return
name|d
operator|==
name|running
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|tryStart ()
name|void
name|tryStart
parameter_list|()
block|{
specifier|final
name|Thread
name|current
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|running
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|current
argument_list|)
condition|)
block|{
specifier|final
name|Daemon
name|daemon
init|=
operator|new
name|Daemon
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
init|;
name|isRunning
argument_list|(
name|this
argument_list|)
condition|;
control|)
block|{
specifier|final
name|long
name|waitTime
init|=
name|checkCalls
argument_list|()
decl_stmt|;
name|tryStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|AsyncCallHandler
operator|.
name|this
init|)
block|{
name|AsyncCallHandler
operator|.
name|this
operator|.
name|wait
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|kill
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
specifier|final
name|boolean
name|set
init|=
name|running
operator|.
name|compareAndSet
argument_list|(
name|current
argument_list|,
name|daemon
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|set
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting AsyncCallQueue.Processor "
operator|+
name|daemon
argument_list|)
expr_stmt|;
block|}
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|tryStop (Daemon d)
name|void
name|tryStop
parameter_list|(
name|Daemon
name|d
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|(
name|GRACE_PERIOD
argument_list|)
condition|)
block|{
name|kill
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|kill (Daemon d)
name|void
name|kill
parameter_list|(
name|Daemon
name|d
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing "
operator|+
name|d
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|set
init|=
name|running
operator|.
name|compareAndSet
argument_list|(
name|d
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AsyncValue
specifier|static
class|class
name|AsyncValue
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|value
specifier|private
name|V
name|value
decl_stmt|;
DECL|method|waitAsyncValue (long timeout, TimeUnit unit)
specifier|synchronized
name|V
name|waitAsyncValue
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
name|AsyncGet
operator|.
name|Util
operator|.
name|wait
argument_list|(
name|this
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"waitCallReturn timed out "
operator|+
name|timeout
operator|+
literal|" "
operator|+
name|unit
argument_list|)
throw|;
block|}
DECL|method|set (V v)
specifier|synchronized
name|void
name|set
parameter_list|(
name|V
name|v
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
name|value
operator|=
name|v
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
DECL|method|isDone ()
specifier|synchronized
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|value
operator|!=
literal|null
return|;
block|}
block|}
DECL|class|AsyncCall
specifier|static
class|class
name|AsyncCall
extends|extends
name|RetryInvocationHandler
operator|.
name|Call
block|{
DECL|field|asyncCallHandler
specifier|private
specifier|final
name|AsyncCallHandler
name|asyncCallHandler
decl_stmt|;
DECL|field|asyncCallReturn
specifier|private
specifier|final
name|AsyncValue
argument_list|<
name|CallReturn
argument_list|>
name|asyncCallReturn
init|=
operator|new
name|AsyncValue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lowerLayerAsyncGet
specifier|private
name|AsyncGet
argument_list|<
name|?
argument_list|,
name|Exception
argument_list|>
name|lowerLayerAsyncGet
decl_stmt|;
DECL|method|AsyncCall (Method method, Object[] args, boolean isRpc, int callId, RetryInvocationHandler<?> retryInvocationHandler, AsyncCallHandler asyncCallHandler)
name|AsyncCall
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|boolean
name|isRpc
parameter_list|,
name|int
name|callId
parameter_list|,
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
name|retryInvocationHandler
parameter_list|,
name|AsyncCallHandler
name|asyncCallHandler
parameter_list|)
block|{
name|super
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|isRpc
argument_list|,
name|callId
argument_list|,
name|retryInvocationHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncCallHandler
operator|=
name|asyncCallHandler
expr_stmt|;
block|}
comment|/** @return true if the call is done; otherwise, return false. */
DECL|method|isDone ()
name|boolean
name|isDone
parameter_list|()
block|{
specifier|final
name|CallReturn
name|r
init|=
name|invokeOnce
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"#{}: {}"
argument_list|,
name|getCallId
argument_list|()
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|r
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|RETURNED
case|:
case|case
name|EXCEPTION
case|:
name|asyncCallReturn
operator|.
name|set
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// the async call is done
return|return
literal|true
return|;
case|case
name|RETRY
case|:
name|invokeOnce
argument_list|()
expr_stmt|;
break|break;
case|case
name|WAIT_RETRY
case|:
case|case
name|ASYNC_CALL_IN_PROGRESS
case|:
case|case
name|ASYNC_INVOKED
case|:
comment|// nothing to do
break|break;
default|default:
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|processWaitTimeAndRetryInfo ()
name|CallReturn
name|processWaitTimeAndRetryInfo
parameter_list|()
block|{
specifier|final
name|Long
name|waitTime
init|=
name|getWaitTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"#{} processRetryInfo: waitTime={}"
argument_list|,
name|getCallId
argument_list|()
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitTime
operator|!=
literal|null
operator|&&
name|waitTime
operator|>
literal|0
condition|)
block|{
return|return
name|CallReturn
operator|.
name|WAIT_RETRY
return|;
block|}
name|processRetryInfo
argument_list|()
expr_stmt|;
return|return
name|CallReturn
operator|.
name|RETRY
return|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
name|CallReturn
name|invoke
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}.invoke {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowerLayerAsyncGet
operator|!=
literal|null
condition|)
block|{
comment|// async call was submitted early, check the lower level async call
specifier|final
name|boolean
name|isDone
init|=
name|lowerLayerAsyncGet
operator|.
name|isDone
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"#{} invoke: lowerLayerAsyncGet.isDone()? {}"
argument_list|,
name|getCallId
argument_list|()
argument_list|,
name|isDone
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDone
condition|)
block|{
return|return
name|CallReturn
operator|.
name|ASYNC_CALL_IN_PROGRESS
return|;
block|}
try|try
block|{
return|return
operator|new
name|CallReturn
argument_list|(
name|lowerLayerAsyncGet
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|lowerLayerAsyncGet
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// submit a new async call
name|LOG
operator|.
name|trace
argument_list|(
literal|"#{} invoke: ASYNC_INVOKED"
argument_list|,
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|mode
init|=
name|Client
operator|.
name|isAsynchronousMode
argument_list|()
decl_stmt|;
try|try
block|{
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|r
init|=
name|invokeMethod
argument_list|()
decl_stmt|;
comment|// invokeMethod should set LOWER_LAYER_ASYNC_RETURN and return null.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|r
operator|==
literal|null
argument_list|)
expr_stmt|;
name|lowerLayerAsyncGet
operator|=
name|getLowerLayerAsyncReturn
argument_list|()
expr_stmt|;
if|if
condition|(
name|getCounters
argument_list|()
operator|.
name|isZeros
argument_list|()
condition|)
block|{
comment|// first async attempt, initialize
name|LOG
operator|.
name|trace
argument_list|(
literal|"#{} invoke: initAsyncCall"
argument_list|,
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
name|asyncCallHandler
operator|.
name|initAsyncCall
argument_list|(
name|this
argument_list|,
name|asyncCallReturn
argument_list|)
expr_stmt|;
block|}
return|return
name|CallReturn
operator|.
name|ASYNC_INVOKED
return|;
block|}
finally|finally
block|{
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|asyncCalls
specifier|private
specifier|final
name|AsyncCallQueue
name|asyncCalls
init|=
operator|new
name|AsyncCallQueue
argument_list|()
decl_stmt|;
DECL|field|hasSuccessfulCall
specifier|private
specifier|volatile
name|boolean
name|hasSuccessfulCall
init|=
literal|false
decl_stmt|;
DECL|method|newAsyncCall (Method method, Object[] args, boolean isRpc, int callId, RetryInvocationHandler<?> retryInvocationHandler)
name|AsyncCall
name|newAsyncCall
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|boolean
name|isRpc
parameter_list|,
name|int
name|callId
parameter_list|,
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
name|retryInvocationHandler
parameter_list|)
block|{
return|return
operator|new
name|AsyncCall
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|isRpc
argument_list|,
name|callId
argument_list|,
name|retryInvocationHandler
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|hasSuccessfulCall ()
name|boolean
name|hasSuccessfulCall
parameter_list|()
block|{
return|return
name|hasSuccessfulCall
return|;
block|}
DECL|method|initAsyncCall (final AsyncCall asyncCall, final AsyncValue<CallReturn> asyncCallReturn)
specifier|private
name|void
name|initAsyncCall
parameter_list|(
specifier|final
name|AsyncCall
name|asyncCall
parameter_list|,
specifier|final
name|AsyncValue
argument_list|<
name|CallReturn
argument_list|>
name|asyncCallReturn
parameter_list|)
block|{
name|asyncCalls
operator|.
name|addCall
argument_list|(
name|asyncCall
argument_list|)
expr_stmt|;
specifier|final
name|AsyncGet
argument_list|<
name|Object
argument_list|,
name|Throwable
argument_list|>
name|asyncGet
init|=
operator|new
name|AsyncGet
argument_list|<
name|Object
argument_list|,
name|Throwable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|CallReturn
name|c
init|=
name|asyncCallReturn
operator|.
name|waitAsyncValue
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|r
init|=
name|c
operator|.
name|getReturnValue
argument_list|()
decl_stmt|;
name|hasSuccessfulCall
operator|=
literal|true
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|asyncCallReturn
operator|.
name|isDone
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|ASYNC_RETURN
operator|.
name|set
argument_list|(
name|asyncGet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getGracePeriod ()
specifier|public
specifier|static
name|long
name|getGracePeriod
parameter_list|()
block|{
return|return
name|AsyncCallQueue
operator|.
name|Processor
operator|.
name|GRACE_PERIOD
return|;
block|}
block|}
end_class

end_unit

