begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationUtil
operator|.
name|PropertyChange
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"Management Tools"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ReconfigurationTaskStatus
specifier|public
class|class
name|ReconfigurationTaskStatus
block|{
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
name|long
name|endTime
decl_stmt|;
DECL|field|status
specifier|final
name|Map
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|status
decl_stmt|;
DECL|method|ReconfigurationTaskStatus (long startTime, long endTime, Map<ReconfigurationUtil.PropertyChange, Optional<String>> status)
specifier|public
name|ReconfigurationTaskStatus
parameter_list|(
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|Map
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|status
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
comment|/**    * Return true if    *   - A reconfiguration task has finished or    *   - an active reconfiguration task is running    */
DECL|method|hasTask ()
specifier|public
name|boolean
name|hasTask
parameter_list|()
block|{
return|return
name|startTime
operator|>
literal|0
return|;
block|}
comment|/**    * Return true if the latest reconfiguration task has finished and there is    * no another active task running.    */
DECL|method|stopped ()
specifier|public
name|boolean
name|stopped
parameter_list|()
block|{
return|return
name|endTime
operator|>
literal|0
return|;
block|}
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getEndTime ()
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
DECL|method|getStatus ()
specifier|public
specifier|final
name|Map
argument_list|<
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

