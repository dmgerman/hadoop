begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class uses {@link LdapGroupsMapping} for group lookup and applies the  * rule configured on the group names.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RuleBasedLdapGroupsMapping
specifier|public
class|class
name|RuleBasedLdapGroupsMapping
extends|extends
name|LdapGroupsMapping
block|{
DECL|field|CONVERSION_RULE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CONVERSION_RULE_KEY
init|=
name|LDAP_CONFIG_PREFIX
operator|+
literal|".conversion.rule"
decl_stmt|;
DECL|field|CONVERSION_RULE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|CONVERSION_RULE_DEFAULT
init|=
literal|"none"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RuleBasedLdapGroupsMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rule
specifier|private
name|Rule
name|rule
decl_stmt|;
comment|/**    * Supported rules applicable for group name modification.    */
DECL|enum|Rule
specifier|private
enum|enum
name|Rule
block|{
DECL|enumConstant|TO_UPPER
DECL|enumConstant|TO_LOWER
DECL|enumConstant|NONE
name|TO_UPPER
block|,
name|TO_LOWER
block|,
name|NONE
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|CONVERSION_RULE_KEY
argument_list|,
name|CONVERSION_RULE_DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|rule
operator|=
name|Rule
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid {} configured: '{}'. Using default value: '{}'"
argument_list|,
name|CONVERSION_RULE_KEY
argument_list|,
name|value
argument_list|,
name|CONVERSION_RULE_DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns list of groups for a user.      * This calls {@link LdapGroupsMapping}'s getGroups and applies the      * configured rules on group names before returning.      *      * @param user get groups for this user      * @return list of groups for a given user      */
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|super
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rule
condition|)
block|{
case|case
name|TO_UPPER
case|:
return|return
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StringUtils
operator|::
name|toUpperCase
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
case|case
name|TO_LOWER
case|:
return|return
name|groups
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StringUtils
operator|::
name|toLowerCase
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
case|case
name|NONE
case|:
default|default:
return|return
name|groups
return|;
block|}
block|}
block|}
end_class

end_unit

