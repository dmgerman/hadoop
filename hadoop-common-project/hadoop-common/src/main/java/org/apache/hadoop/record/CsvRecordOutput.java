begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CsvRecordOutput
specifier|public
class|class
name|CsvRecordOutput
implements|implements
name|RecordOutput
block|{
DECL|field|stream
specifier|private
name|PrintStream
name|stream
decl_stmt|;
DECL|field|isFirst
specifier|private
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
DECL|method|throwExceptionOnError (String tag)
specifier|private
name|void
name|throwExceptionOnError
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|.
name|checkError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error serializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
DECL|method|printCommaUnlessFirst ()
specifier|private
name|void
name|printCommaUnlessFirst
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|stream
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
comment|/** Creates a new instance of CsvRecordOutput */
DECL|method|CsvRecordOutput (OutputStream out)
specifier|public
name|CsvRecordOutput
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
try|try
block|{
name|stream
operator|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeByte (byte b, String tag)
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLong
argument_list|(
operator|(
name|long
operator|)
name|b
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool (boolean b, String tag)
specifier|public
name|void
name|writeBool
parameter_list|(
name|boolean
name|b
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|String
name|val
init|=
name|b
condition|?
literal|"T"
else|:
literal|"F"
decl_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|throwExceptionOnError
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeInt (int i, String tag)
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLong
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLong (long l, String tag)
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|l
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|throwExceptionOnError
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat (float f, String tag)
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|f
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|writeDouble
argument_list|(
operator|(
name|double
operator|)
name|f
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble (double d, String tag)
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|d
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|throwExceptionOnError
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeString (String s, String tag)
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|Utils
operator|.
name|toCSVString
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|throwExceptionOnError
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBuffer (Buffer buf, String tag)
specifier|public
name|void
name|writeBuffer
parameter_list|(
name|Buffer
name|buf
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|Utils
operator|.
name|toCSVBuffer
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|throwExceptionOnError
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startRecord (Record r, String tag)
specifier|public
name|void
name|startRecord
parameter_list|(
name|Record
name|r
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tag
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
literal|"s{"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|endRecord (Record r, String tag)
specifier|public
name|void
name|endRecord
parameter_list|(
name|Record
name|r
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|stream
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|.
name|print
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|startVector (ArrayList v, String tag)
specifier|public
name|void
name|startVector
parameter_list|(
name|ArrayList
name|v
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
literal|"v{"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|endVector (ArrayList v, String tag)
specifier|public
name|void
name|endVector
parameter_list|(
name|ArrayList
name|v
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|print
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startMap (TreeMap v, String tag)
specifier|public
name|void
name|startMap
parameter_list|(
name|TreeMap
name|v
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|printCommaUnlessFirst
argument_list|()
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
literal|"m{"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|endMap (TreeMap v, String tag)
specifier|public
name|void
name|endMap
parameter_list|(
name|TreeMap
name|v
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|print
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

