begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A Utility class that maintains a Queue of entries for a given key. It tries  * to ensure that there is are always at-least<code>numValues</code> entries  * available for the client to consume for a particular key.  * It also uses an underlying Cache to evict queues for keys that have not been  * accessed for a configurable period of time.  * Implementing classes are required to implement the  *<code>QueueRefiller</code> interface that exposes a method to refill the  * queue, when empty  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ValueQueue
specifier|public
class|class
name|ValueQueue
parameter_list|<
name|E
parameter_list|>
block|{
comment|/**    * QueueRefiller interface a client must implement to use this class    */
DECL|interface|QueueRefiller
specifier|public
interface|interface
name|QueueRefiller
parameter_list|<
name|E
parameter_list|>
block|{
comment|/**      * Method that has to be implemented by implementing classes to fill the      * Queue.      * @param keyName Key name      * @param keyQueue Queue that needs to be filled      * @param numValues number of Values to be added to the queue.      * @throws IOException      */
DECL|method|fillQueueForKey (String keyName, Queue<E> keyQueue, int numValues)
specifier|public
name|void
name|fillQueueForKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Queue
argument_list|<
name|E
argument_list|>
name|keyQueue
parameter_list|,
name|int
name|numValues
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|REFILL_THREAD
specifier|private
specifier|static
specifier|final
name|String
name|REFILL_THREAD
init|=
name|ValueQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"_thread"
decl_stmt|;
DECL|field|keyQueues
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|String
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|keyQueues
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ThreadPoolExecutor
name|executor
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|UniqueKeyBlockingQueue
name|queue
init|=
operator|new
name|UniqueKeyBlockingQueue
argument_list|()
decl_stmt|;
DECL|field|refiller
specifier|private
specifier|final
name|QueueRefiller
argument_list|<
name|E
argument_list|>
name|refiller
decl_stmt|;
DECL|field|policy
specifier|private
specifier|final
name|SyncGenerationPolicy
name|policy
decl_stmt|;
DECL|field|numValues
specifier|private
specifier|final
name|int
name|numValues
decl_stmt|;
DECL|field|lowWatermark
specifier|private
specifier|final
name|float
name|lowWatermark
decl_stmt|;
DECL|field|executorThreadsStarted
specifier|private
specifier|volatile
name|boolean
name|executorThreadsStarted
init|=
literal|false
decl_stmt|;
comment|/**    * A<code>Runnable</code> which takes a string name.    */
DECL|class|NamedRunnable
specifier|private
specifier|abstract
specifier|static
class|class
name|NamedRunnable
implements|implements
name|Runnable
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NamedRunnable (String keyName)
specifier|private
name|NamedRunnable
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|keyName
expr_stmt|;
block|}
block|}
comment|/**    * This backing blocking queue used in conjunction with the    *<code>ThreadPoolExecutor</code> used by the<code>ValueQueue</code>. This    * Queue accepts a task only if the task is not currently in the process    * of being run by a thread which is implied by the presence of the key    * in the<code>keysInProgress</code> set.    *    * NOTE: Only methods that ware explicitly called by the    *<code>ThreadPoolExecutor</code> need to be over-ridden.    */
DECL|class|UniqueKeyBlockingQueue
specifier|private
specifier|static
class|class
name|UniqueKeyBlockingQueue
extends|extends
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2152747693695890371L
decl_stmt|;
DECL|field|keysInProgress
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|keysInProgress
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|put (Runnable e)
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|Runnable
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|keysInProgress
operator|.
name|add
argument_list|(
operator|(
operator|(
name|NamedRunnable
operator|)
name|e
operator|)
operator|.
name|name
argument_list|)
condition|)
block|{
name|super
operator|.
name|put
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|take ()
specifier|public
name|Runnable
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Runnable
name|k
init|=
name|super
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
condition|)
block|{
name|keysInProgress
operator|.
name|remove
argument_list|(
operator|(
operator|(
name|NamedRunnable
operator|)
name|k
operator|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|k
return|;
block|}
annotation|@
name|Override
DECL|method|poll (long timeout, TimeUnit unit)
specifier|public
name|Runnable
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Runnable
name|k
init|=
name|super
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
condition|)
block|{
name|keysInProgress
operator|.
name|remove
argument_list|(
operator|(
operator|(
name|NamedRunnable
operator|)
name|k
operator|)
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|k
return|;
block|}
block|}
comment|/**    * Policy to decide how many values to return to client when client asks for    * "n" values and Queue is empty.    * This decides how many values to return when client calls "getAtMost"    */
DECL|enum|SyncGenerationPolicy
specifier|public
specifier|static
enum|enum
name|SyncGenerationPolicy
block|{
DECL|enumConstant|ATLEAST_ONE
name|ATLEAST_ONE
block|,
comment|// Return atleast 1 value
DECL|enumConstant|LOW_WATERMARK
name|LOW_WATERMARK
block|,
comment|// Return min(n, lowWatermark * numValues) values
DECL|enumConstant|ALL
name|ALL
comment|// Return n values
block|}
comment|/**    * Constructor takes the following tunable configuration parameters    * @param numValues The number of values cached in the Queue for a    *    particular key.    * @param lowWatermark The ratio of (number of current entries/numValues)    *    below which the<code>fillQueueForKey()</code> funciton will be    *    invoked to fill the Queue.    * @param expiry Expiry time after which the Key and associated Queue are    *    evicted from the cache.    * @param numFillerThreads Number of threads to use for the filler thread    * @param policy The SyncGenerationPolicy to use when client    *    calls "getAtMost"    * @param refiller implementation of the QueueRefiller    */
DECL|method|ValueQueue (final int numValues, final float lowWatermark, long expiry, int numFillerThreads, SyncGenerationPolicy policy, final QueueRefiller<E> refiller)
specifier|public
name|ValueQueue
parameter_list|(
specifier|final
name|int
name|numValues
parameter_list|,
specifier|final
name|float
name|lowWatermark
parameter_list|,
name|long
name|expiry
parameter_list|,
name|int
name|numFillerThreads
parameter_list|,
name|SyncGenerationPolicy
name|policy
parameter_list|,
specifier|final
name|QueueRefiller
argument_list|<
name|E
argument_list|>
name|refiller
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numValues
operator|>
literal|0
argument_list|,
literal|"\"numValues\" must be> 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
operator|(
name|lowWatermark
operator|>
literal|0
operator|)
operator|&&
operator|(
name|lowWatermark
operator|<=
literal|1
operator|)
operator|)
argument_list|,
literal|"\"lowWatermark\" must be> 0 and<= 1"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|expiry
operator|>
literal|0
argument_list|,
literal|"\"expiry\" must be> 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numFillerThreads
operator|>
literal|0
argument_list|,
literal|"\"numFillerThreads\" must be> 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|policy
argument_list|,
literal|"\"policy\" must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|refiller
operator|=
name|refiller
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|numValues
operator|=
name|numValues
expr_stmt|;
name|this
operator|.
name|lowWatermark
operator|=
name|lowWatermark
expr_stmt|;
name|keyQueues
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|expiry
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|String
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
name|load
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|Exception
block|{
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
name|keyQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
name|refiller
operator|.
name|fillQueueForKey
argument_list|(
name|keyName
argument_list|,
name|keyQueue
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lowWatermark
operator|*
name|numValues
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keyQueue
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|numFillerThreads
argument_list|,
name|numFillerThreads
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|queue
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
name|REFILL_THREAD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ValueQueue (final int numValues, final float lowWaterMark, long expiry, int numFillerThreads, QueueRefiller<E> fetcher)
specifier|public
name|ValueQueue
parameter_list|(
specifier|final
name|int
name|numValues
parameter_list|,
specifier|final
name|float
name|lowWaterMark
parameter_list|,
name|long
name|expiry
parameter_list|,
name|int
name|numFillerThreads
parameter_list|,
name|QueueRefiller
argument_list|<
name|E
argument_list|>
name|fetcher
parameter_list|)
block|{
name|this
argument_list|(
name|numValues
argument_list|,
name|lowWaterMark
argument_list|,
name|expiry
argument_list|,
name|numFillerThreads
argument_list|,
name|SyncGenerationPolicy
operator|.
name|ALL
argument_list|,
name|fetcher
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the Value Queues for the provided keys by calling the    * fill Method with "numInitValues" values    * @param keyNames Array of key Names    * @throws ExecutionException    */
DECL|method|initializeQueuesForKeys (String... keyNames)
specifier|public
name|void
name|initializeQueuesForKeys
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|ExecutionException
block|{
for|for
control|(
name|String
name|keyName
range|:
name|keyNames
control|)
block|{
name|keyQueues
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This removes the value currently at the head of the Queue for the    * provided key. Will immediately fire the Queue filler function if key    * does not exist.    * If Queue exists but all values are drained, It will ask the generator    * function to add 1 value to Queue and then drain it.    * @param keyName String key name    * @return E the next value in the Queue    * @throws IOException    * @throws ExecutionException    */
DECL|method|getNext (String keyName)
specifier|public
name|E
name|getNext
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
block|{
return|return
name|getAtMost
argument_list|(
name|keyName
argument_list|,
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Drains the Queue for the provided key.    *    * @param keyName the key to drain the Queue for    */
DECL|method|drain (String keyName )
specifier|public
name|void
name|drain
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
try|try
block|{
name|keyQueues
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ex
parameter_list|)
block|{
comment|//NOP
block|}
block|}
comment|/**    * Get size of the Queue for keyName. This is only used in unit tests.    * @param keyName the key name    * @return int queue size    */
DECL|method|getSize (String keyName)
specifier|public
name|int
name|getSize
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
comment|// We can't do keyQueues.get(keyName).size() here,
comment|// since that will have the side effect of populating the cache.
name|Map
argument_list|<
name|String
argument_list|,
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|map
init|=
name|keyQueues
operator|.
name|getAllPresent
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|keyName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|map
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * This removes the "num" values currently at the head of the Queue for the    * provided key. Will immediately fire the Queue filler function if key    * does not exist    * How many values are actually returned is governed by the    *<code>SyncGenerationPolicy</code> specified by the user.    * @param keyName String key name    * @param num Minimum number of values to return.    * @return List<E> values returned    * @throws IOException    * @throws ExecutionException    */
DECL|method|getAtMost (String keyName, int num)
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|getAtMost
parameter_list|(
name|String
name|keyName
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
block|{
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
name|keyQueue
init|=
name|keyQueues
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
comment|// Using poll to avoid race condition..
name|LinkedList
argument_list|<
name|E
argument_list|>
name|ekvs
init|=
operator|new
name|LinkedList
argument_list|<
name|E
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|E
name|val
init|=
name|keyQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
comment|// If queue is empty now, Based on the provided SyncGenerationPolicy,
comment|// figure out how many new values need to be generated synchronously
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
comment|// Synchronous call to get remaining values
name|int
name|numToFill
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|policy
condition|)
block|{
case|case
name|ATLEAST_ONE
case|:
name|numToFill
operator|=
operator|(
name|ekvs
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
break|break;
case|case
name|LOW_WATERMARK
case|:
name|numToFill
operator|=
name|Math
operator|.
name|min
argument_list|(
name|num
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lowWatermark
operator|*
name|numValues
argument_list|)
argument_list|)
operator|-
name|ekvs
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|ALL
case|:
name|numToFill
operator|=
name|num
operator|-
name|ekvs
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// Synchronous fill if not enough values found
if|if
condition|(
name|numToFill
operator|>
literal|0
condition|)
block|{
name|refiller
operator|.
name|fillQueueForKey
argument_list|(
name|keyName
argument_list|,
name|ekvs
argument_list|,
name|numToFill
argument_list|)
expr_stmt|;
block|}
comment|// Asynch task to fill> lowWatermark
if|if
condition|(
name|i
operator|<=
call|(
name|int
call|)
argument_list|(
name|lowWatermark
operator|*
name|numValues
argument_list|)
condition|)
block|{
name|submitRefillTask
argument_list|(
name|keyName
argument_list|,
name|keyQueue
argument_list|)
expr_stmt|;
block|}
return|return
name|ekvs
return|;
block|}
name|ekvs
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exeption while contacting value generator "
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ekvs
return|;
block|}
DECL|method|submitRefillTask (final String keyName, final Queue<E> keyQueue)
specifier|private
name|void
name|submitRefillTask
parameter_list|(
specifier|final
name|String
name|keyName
parameter_list|,
specifier|final
name|Queue
argument_list|<
name|E
argument_list|>
name|keyQueue
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|executorThreadsStarted
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|executorThreadsStarted
condition|)
block|{
comment|// To ensure all requests are first queued, make coreThreads =
comment|// maxThreads
comment|// and pre-start all the Core Threads.
name|executor
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
name|executorThreadsStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// The submit/execute method of the ThreadPoolExecutor is bypassed and
comment|// the Runnable is directly put in the backing BlockingQueue so that we
comment|// can control exactly how the runnable is inserted into the queue.
name|queue
operator|.
name|put
argument_list|(
operator|new
name|NamedRunnable
argument_list|(
name|keyName
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|cacheSize
init|=
name|numValues
decl_stmt|;
name|int
name|threshold
init|=
call|(
name|int
call|)
argument_list|(
name|lowWatermark
operator|*
operator|(
name|float
operator|)
name|cacheSize
argument_list|)
decl_stmt|;
comment|// Need to ensure that only one refill task per key is executed
try|try
block|{
if|if
condition|(
name|keyQueue
operator|.
name|size
argument_list|()
operator|<
name|threshold
condition|)
block|{
name|refiller
operator|.
name|fillQueueForKey
argument_list|(
name|name
argument_list|,
name|keyQueue
argument_list|,
name|cacheSize
operator|-
name|keyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleanly shutdown    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

