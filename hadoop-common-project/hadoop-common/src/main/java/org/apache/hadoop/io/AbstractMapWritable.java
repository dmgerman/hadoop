begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Abstract base class for MapWritable and SortedMapWritable  *   * Unlike org.apache.nutch.crawl.MapWritable, this class allows creation of  * MapWritable&lt;Writable, MapWritable&gt; so the CLASS_TO_ID and ID_TO_CLASS  * maps travel with the class instead of being static.  *   * Class ids range from 1 to 127 so there can be at most 127 distinct classes  * in any specific map instance.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|AbstractMapWritable
specifier|public
specifier|abstract
class|class
name|AbstractMapWritable
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|AtomicReference
argument_list|<
name|Configuration
argument_list|>
name|conf
decl_stmt|;
comment|/* Class to id mappings */
DECL|field|classToIdMap
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Byte
argument_list|>
name|classToIdMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
comment|/* Id to Class mappings */
DECL|field|idToClassMap
specifier|private
name|Map
argument_list|<
name|Byte
argument_list|,
name|Class
argument_list|>
name|idToClassMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Byte
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
comment|/* The number of new classes (those not established by the constructor) */
DECL|field|newClasses
specifier|private
specifier|volatile
name|byte
name|newClasses
init|=
literal|0
decl_stmt|;
comment|/** @return the number of known classes */
DECL|method|getNewClasses ()
name|byte
name|getNewClasses
parameter_list|()
block|{
return|return
name|newClasses
return|;
block|}
comment|/**    * Used to add "predefined" classes and by Writable to copy "new" classes.    */
DECL|method|addToMap (Class clazz, byte id)
specifier|private
specifier|synchronized
name|void
name|addToMap
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|classToIdMap
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|byte
name|b
init|=
name|classToIdMap
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|id
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" already registered but maps to "
operator|+
name|b
operator|+
literal|" and not "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|idToClassMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|Class
name|c
init|=
name|idToClassMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Id "
operator|+
name|id
operator|+
literal|" exists but maps to "
operator|+
name|c
operator|.
name|getName
argument_list|()
operator|+
literal|" and not "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|classToIdMap
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|idToClassMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
comment|/** Add a Class to the maps if it is not already present. */
DECL|method|addToMap (Class clazz)
specifier|protected
specifier|synchronized
name|void
name|addToMap
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|classToIdMap
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newClasses
operator|+
literal|1
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"adding an additional class would"
operator|+
literal|" exceed the maximum number allowed"
argument_list|)
throw|;
block|}
name|byte
name|id
init|=
operator|++
name|newClasses
decl_stmt|;
name|addToMap
argument_list|(
name|clazz
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/** @return the Class class for the specified id */
DECL|method|getClass (byte id)
specifier|protected
name|Class
name|getClass
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
return|return
name|idToClassMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/** @return the id for the specified Class */
DECL|method|getId (Class clazz)
specifier|protected
name|byte
name|getId
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
return|return
name|classToIdMap
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
condition|?
name|classToIdMap
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
comment|/** Used by child copy constructors. */
DECL|method|copy (Writable other)
specifier|protected
specifier|synchronized
name|void
name|copy
parameter_list|(
name|Writable
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|other
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"map cannot be copied: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"source map cannot be null"
argument_list|)
throw|;
block|}
block|}
comment|/** constructor. */
DECL|method|AbstractMapWritable ()
specifier|protected
name|AbstractMapWritable
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|AtomicReference
argument_list|<
name|Configuration
argument_list|>
argument_list|()
expr_stmt|;
name|addToMap
argument_list|(
name|ArrayWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|127
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|126
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|125
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|FloatWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|124
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|123
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|122
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|MapWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|121
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|MD5Hash
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|120
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|119
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|ObjectWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|118
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|SortedMapWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|117
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|Text
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|116
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|TwoDArrayWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|115
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// UTF8 is deprecated so we don't support it
name|addToMap
argument_list|(
name|VIntWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|114
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|VLongWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|113
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** @return the conf */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** @param conf the conf to set */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First write out the size of the class table and any classes that are
comment|// "unknown" classes
name|out
operator|.
name|writeByte
argument_list|(
name|newClasses
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|newClasses
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|getClass
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the number of "unknown" classes
name|newClasses
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// Then read in the class names and add them to our tables
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newClasses
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|id
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
try|try
block|{
name|addToMap
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't find class: "
operator|+
name|className
operator|+
literal|" because "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

