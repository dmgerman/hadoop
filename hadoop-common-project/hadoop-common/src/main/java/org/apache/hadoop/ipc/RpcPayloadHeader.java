begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * This is the rpc payload header. It is sent with every rpc call  *<pre>  * The format of RPC call is as follows:  * +---------------------------------------------------+  * |  Rpc length in bytes (header + payload length)    |  * +---------------------------------------------------+  * |      Rpc Header       |       Rpc Payload         |  * +---------------------------------------------------+  *   * The format of Rpc Header is:  * +----------------------------------+  * |  RpcKind (1 bytes)               |        * +----------------------------------+  * |  RpcPayloadOperation (1 bytes)   |        * +----------------------------------+  * |  Call ID (4 bytes)               |        * +----------------------------------+  *   * {@link RpcKind} determines the type of serialization used for Rpc Payload.  *</pre>  *<p>  *<b>Note this header does NOT have its own version number,   * it used the version number from the connection header.</b>  */
end_comment

begin_class
DECL|class|RpcPayloadHeader
specifier|public
class|class
name|RpcPayloadHeader
implements|implements
name|Writable
block|{
DECL|enum|RpcPayloadOperation
specifier|public
enum|enum
name|RpcPayloadOperation
block|{
DECL|enumConstant|RPC_FINAL_PAYLOAD
name|RPC_FINAL_PAYLOAD
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
DECL|enumConstant|RPC_CONTINUATION_PAYLOAD
name|RPC_CONTINUATION_PAYLOAD
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
block|,
comment|// not implemented yet
DECL|enumConstant|RPC_CLOSE_CONNECTION
name|RPC_CLOSE_CONNECTION
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
block|;
comment|// close the rpc connection
DECL|field|code
specifier|private
specifier|final
name|short
name|code
decl_stmt|;
DECL|field|FIRST_INDEX
specifier|private
specifier|static
specifier|final
name|short
name|FIRST_INDEX
init|=
name|RPC_FINAL_PAYLOAD
operator|.
name|code
decl_stmt|;
DECL|method|RpcPayloadOperation (short val)
name|RpcPayloadOperation
parameter_list|(
name|short
name|val
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|val
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|static
name|RpcPayloadOperation
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|inValue
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
return|return
name|RpcPayloadOperation
operator|.
name|values
argument_list|()
index|[
name|inValue
operator|-
name|FIRST_INDEX
index|]
return|;
block|}
block|}
DECL|enum|RpcKind
specifier|public
enum|enum
name|RpcKind
block|{
DECL|enumConstant|RPC_BUILTIN
name|RPC_BUILTIN
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
comment|// Used for built in calls by tests
DECL|enumConstant|RPC_WRITABLE
name|RPC_WRITABLE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
block|,
comment|// Use WritableRpcEngine
DECL|enumConstant|RPC_PROTOCOL_BUFFER
name|RPC_PROTOCOL_BUFFER
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
block|,
comment|// Use ProtobufRpcEngine
DECL|enumConstant|RPC_AVRO
name|RPC_AVRO
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
block|;
comment|// Use AvroRpcEngine
DECL|field|MAX_INDEX
specifier|static
specifier|final
name|short
name|MAX_INDEX
init|=
name|RPC_AVRO
operator|.
name|value
decl_stmt|;
comment|// used for array size
DECL|field|FIRST_INDEX
specifier|private
specifier|static
specifier|final
name|short
name|FIRST_INDEX
init|=
name|RPC_BUILTIN
operator|.
name|value
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|short
name|value
decl_stmt|;
DECL|method|RpcKind (short val)
name|RpcKind
parameter_list|(
name|short
name|val
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|static
name|RpcKind
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|short
name|inValue
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
return|return
name|RpcKind
operator|.
name|values
argument_list|()
index|[
name|inValue
operator|-
name|FIRST_INDEX
index|]
return|;
block|}
block|}
DECL|field|kind
specifier|private
name|RpcKind
name|kind
decl_stmt|;
DECL|field|operation
specifier|private
name|RpcPayloadOperation
name|operation
decl_stmt|;
DECL|field|callId
specifier|private
name|int
name|callId
decl_stmt|;
DECL|method|RpcPayloadHeader ()
specifier|public
name|RpcPayloadHeader
parameter_list|()
block|{
name|kind
operator|=
name|RpcKind
operator|.
name|RPC_WRITABLE
expr_stmt|;
name|operation
operator|=
name|RpcPayloadOperation
operator|.
name|RPC_CLOSE_CONNECTION
expr_stmt|;
block|}
DECL|method|RpcPayloadHeader (RpcKind kind, RpcPayloadOperation op, int callId)
specifier|public
name|RpcPayloadHeader
parameter_list|(
name|RpcKind
name|kind
parameter_list|,
name|RpcPayloadOperation
name|op
parameter_list|,
name|int
name|callId
parameter_list|)
block|{
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|callId
operator|=
name|callId
expr_stmt|;
block|}
DECL|method|getCallId ()
name|int
name|getCallId
parameter_list|()
block|{
return|return
name|callId
return|;
block|}
DECL|method|getkind ()
name|RpcKind
name|getkind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
DECL|method|getOperation ()
name|RpcPayloadOperation
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|kind
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|operation
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|callId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|kind
operator|=
name|RpcKind
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|operation
operator|=
name|RpcPayloadOperation
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|callId
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

