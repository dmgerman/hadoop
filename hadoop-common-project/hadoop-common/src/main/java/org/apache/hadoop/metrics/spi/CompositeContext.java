begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.spi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CompositeContext
specifier|public
class|class
name|CompositeContext
extends|extends
name|AbstractMetricsContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompositeContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ARITY_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|ARITY_LABEL
init|=
literal|"arity"
decl_stmt|;
DECL|field|SUB_FMT
specifier|private
specifier|static
specifier|final
name|String
name|SUB_FMT
init|=
literal|"%s.sub%d"
decl_stmt|;
DECL|field|subctxt
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|MetricsContext
argument_list|>
name|subctxt
init|=
operator|new
name|ArrayList
argument_list|<
name|MetricsContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|CompositeContext ()
specifier|public
name|CompositeContext
parameter_list|()
block|{   }
annotation|@
name|Override
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|init (String contextName, ContextFactory factory)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|contextName
parameter_list|,
name|ContextFactory
name|factory
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|contextName
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|int
name|nKids
decl_stmt|;
try|try
block|{
name|String
name|sKids
init|=
name|getAttribute
argument_list|(
name|ARITY_LABEL
argument_list|)
decl_stmt|;
name|nKids
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sKids
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to initialize composite metric "
operator|+
name|contextName
operator|+
literal|": could not init arity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nKids
condition|;
operator|++
name|i
control|)
block|{
name|MetricsContext
name|ctxt
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|SUB_FMT
argument_list|,
name|contextName
argument_list|,
name|i
argument_list|)
argument_list|,
name|contextName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ctxt
condition|)
block|{
name|subctxt
operator|.
name|add
argument_list|(
name|ctxt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|newRecord (String recordName)
specifier|public
name|MetricsRecord
name|newRecord
parameter_list|(
name|String
name|recordName
parameter_list|)
block|{
return|return
operator|(
name|MetricsRecord
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|MetricsRecord
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|MetricsRecord
operator|.
name|class
block|}
argument_list|,
operator|new
name|MetricsRecordDelegator
argument_list|(
name|recordName
argument_list|,
name|subctxt
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|emitRecord (String contextName, String recordName, OutputRecord outRec)
specifier|protected
name|void
name|emitRecord
parameter_list|(
name|String
name|contextName
parameter_list|,
name|String
name|recordName
parameter_list|,
name|OutputRecord
name|outRec
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
try|try
block|{
operator|(
operator|(
name|AbstractMetricsContext
operator|)
name|ctxt
operator|)
operator|.
name|emitRecord
argument_list|(
name|contextName
argument_list|,
name|recordName
argument_list|,
name|outRec
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextName
operator|==
literal|null
operator|||
name|recordName
operator|==
literal|null
operator|||
name|outRec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|contextName
operator|+
literal|":"
operator|+
name|recordName
operator|+
literal|":"
operator|+
name|outRec
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"emitRecord failed: "
operator|+
name|ctxt
operator|.
name|getContextName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|flush ()
specifier|protected
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
try|try
block|{
operator|(
operator|(
name|AbstractMetricsContext
operator|)
name|ctxt
operator|)
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"flush failed: "
operator|+
name|ctxt
operator|.
name|getContextName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|startMonitoring ()
specifier|public
name|void
name|startMonitoring
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
try|try
block|{
name|ctxt
operator|.
name|startMonitoring
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"startMonitoring failed: "
operator|+
name|ctxt
operator|.
name|getContextName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|stopMonitoring ()
specifier|public
name|void
name|stopMonitoring
parameter_list|()
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
name|ctxt
operator|.
name|stopMonitoring
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return true if all subcontexts are monitoring.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|isMonitoring ()
specifier|public
name|boolean
name|isMonitoring
parameter_list|()
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
name|ret
operator|&=
name|ctxt
operator|.
name|isMonitoring
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
name|ctxt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|registerUpdater (Updater updater)
specifier|public
name|void
name|registerUpdater
parameter_list|(
name|Updater
name|updater
parameter_list|)
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
name|ctxt
operator|.
name|registerUpdater
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Override
DECL|method|unregisterUpdater (Updater updater)
specifier|public
name|void
name|unregisterUpdater
parameter_list|(
name|Updater
name|updater
parameter_list|)
block|{
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|subctxt
control|)
block|{
name|ctxt
operator|.
name|unregisterUpdater
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MetricsRecordDelegator
specifier|private
specifier|static
class|class
name|MetricsRecordDelegator
implements|implements
name|InvocationHandler
block|{
DECL|field|m_getRecordName
specifier|private
specifier|static
specifier|final
name|Method
name|m_getRecordName
init|=
name|initMethod
argument_list|()
decl_stmt|;
DECL|method|initMethod ()
specifier|private
specifier|static
name|Method
name|initMethod
parameter_list|()
block|{
try|try
block|{
return|return
name|MetricsRecord
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getRecordName"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|recordName
specifier|private
specifier|final
name|String
name|recordName
decl_stmt|;
DECL|field|subrecs
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|MetricsRecord
argument_list|>
name|subrecs
decl_stmt|;
DECL|method|MetricsRecordDelegator (String recordName, ArrayList<MetricsContext> ctxts)
name|MetricsRecordDelegator
parameter_list|(
name|String
name|recordName
parameter_list|,
name|ArrayList
argument_list|<
name|MetricsContext
argument_list|>
name|ctxts
parameter_list|)
block|{
name|this
operator|.
name|recordName
operator|=
name|recordName
expr_stmt|;
name|this
operator|.
name|subrecs
operator|=
operator|new
name|ArrayList
argument_list|<
name|MetricsRecord
argument_list|>
argument_list|(
name|ctxts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MetricsContext
name|ctxt
range|:
name|ctxts
control|)
block|{
name|subrecs
operator|.
name|add
argument_list|(
name|ctxt
operator|.
name|createRecord
argument_list|(
name|recordName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke (Object p, Method m, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|p
parameter_list|,
name|Method
name|m
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|m_getRecordName
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
return|return
name|recordName
return|;
block|}
assert|assert
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
assert|;
for|for
control|(
name|MetricsRecord
name|rec
range|:
name|subrecs
control|)
block|{
name|m
operator|.
name|invoke
argument_list|(
name|rec
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

