begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandlerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|CompositeAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|HttpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|MultiSchemeAuthenticationHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_comment
comment|/**  * A {@link CompositeAuthenticationHandler} that supports multiple HTTP  * authentication schemes along with Delegation Token functionality. e.g.  * server can support multiple authentication mechanisms such as Kerberos  * (SPENGO) and LDAP. During the authentication phase, server will specify  * all possible authentication schemes and let client choose the appropriate  * scheme. Please refer to RFC-2616 and HADOOP-12082 for more details.  *  * Internally it uses {@link MultiSchemeAuthenticationHandler} implementation.  * This handler also provides an option to enable delegation token management  * functionality for only a specified subset of authentication schemes. This is  * required to ensure that only schemes with strongest level of security should  * be used for delegation token management.  *  *<p>  * In addition to the wrapped {@link AuthenticationHandler} configuration  * properties, this handler supports the following properties prefixed with the  * type of the wrapped<code>AuthenticationHandler</code>:  *<ul>  *<li>delegation-token.token-kind: the token kind for generated tokens (no  * default, required property).</li>  *<li>delegation-token.update-interval.sec: secret manager master key update  * interval in seconds (default 1 day).</li>  *<li>delegation-token.max-lifetime.sec: maximum life of a delegation token in  * seconds (default 7 days).</li>  *<li>delegation-token.renewal-interval.sec: renewal interval for delegation  * tokens in seconds (default 1 day).</li>  *<li>delegation-token.removal-scan-interval.sec: delegation tokens removal  * scan interval in seconds (default 1 hour).</li>  *<li>delegation.http.schemes: A comma separated list of HTTP authentication  * mechanisms (e.g. Negotiate, Basic) etc. to be allowed for delegation token  * management operations.</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MultiSchemeDelegationTokenAuthenticationHandler
specifier|public
class|class
name|MultiSchemeDelegationTokenAuthenticationHandler
extends|extends
name|DelegationTokenAuthenticationHandler
implements|implements
name|CompositeAuthenticationHandler
block|{
DECL|field|DELEGATION_TOKEN_SCHEMES_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SCHEMES_PROPERTY
init|=
literal|"multi-scheme-auth-handler.delegation.schemes"
decl_stmt|;
DECL|field|STR_SPLITTER
specifier|private
specifier|static
specifier|final
name|Splitter
name|STR_SPLITTER
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
DECL|field|delegationAuthSchemes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|delegationAuthSchemes
init|=
literal|null
decl_stmt|;
DECL|method|MultiSchemeDelegationTokenAuthenticationHandler ()
specifier|public
name|MultiSchemeDelegationTokenAuthenticationHandler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|MultiSchemeAuthenticationHandler
argument_list|(
name|MultiSchemeAuthenticationHandler
operator|.
name|TYPE
operator|+
name|TYPE_POSTFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTokenTypes ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getTokenTypes
parameter_list|()
block|{
return|return
operator|(
operator|(
name|CompositeAuthenticationHandler
operator|)
name|getAuthHandler
argument_list|()
operator|)
operator|.
name|getTokenTypes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Figure out the HTTP authentication schemes configured.
name|String
name|schemesProperty
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|MultiSchemeAuthenticationHandler
operator|.
name|SCHEMES_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
comment|// Figure out the HTTP authentication schemes configured for delegation
comment|// tokens.
name|String
name|delegationAuthSchemesProp
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|DELEGATION_TOKEN_SCHEMES_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|authSchemes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|STR_SPLITTER
operator|.
name|split
argument_list|(
name|schemesProperty
argument_list|)
control|)
block|{
name|authSchemes
operator|.
name|add
argument_list|(
name|AuthenticationHandlerUtil
operator|.
name|checkAuthScheme
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|delegationAuthSchemes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|STR_SPLITTER
operator|.
name|split
argument_list|(
name|delegationAuthSchemesProp
argument_list|)
control|)
block|{
name|delegationAuthSchemes
operator|.
name|add
argument_list|(
name|AuthenticationHandlerUtil
operator|.
name|checkAuthScheme
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|authSchemes
operator|.
name|containsAll
argument_list|(
name|delegationAuthSchemes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is overridden to restrict HTTP authentication schemes    * available for delegation token management functionality. The    * authentication schemes to be used for delegation token management are    * configured using {@link DELEGATION_TOKEN_SCHEMES_PROPERTY}    *    * The basic logic here is to check if the current request is for delegation    * token management. If yes then check if the request contains an    * "Authorization" header. If it is missing, then return the HTTP 401    * response with WWW-Authenticate header for each scheme configured for    * delegation token management.    *    * It is also possible for a client to preemptively send Authorization header    * for a scheme not configured for delegation token management. We detect    * this case and return the HTTP 401 response with WWW-Authenticate header    * for each scheme configured for delegation token management.    *    * If a client has sent a request with "Authorization" header for a scheme    * configured for delegation token management, then it is forwarded to    * underlying {@link MultiSchemeAuthenticationHandler} for actual    * authentication.    *    * Finally all other requests (excluding delegation token management) are    * forwarded to underlying {@link MultiSchemeAuthenticationHandler} for    * actual authentication.    */
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpConstants
operator|.
name|AUTHORIZATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|isManagementOperation
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|boolean
name|schemeConfigured
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|authorization
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|scheme
range|:
name|delegationAuthSchemes
control|)
block|{
if|if
condition|(
name|AuthenticationHandlerUtil
operator|.
name|matchAuthScheme
argument_list|(
name|scheme
argument_list|,
name|authorization
argument_list|)
condition|)
block|{
name|schemeConfigured
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|schemeConfigured
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|delegationAuthSchemes
control|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|WWW_AUTHENTICATE
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|return
name|super
operator|.
name|authenticate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
return|;
block|}
block|}
end_class

end_unit

