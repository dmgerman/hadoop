begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Determines which queue to start reading from, occasionally drawing from  * low-priority queues in order to prevent starvation. Given the pull pattern  * [9, 4, 1] for 3 queues:  *  * The cycle is (a minimum of) 9+4+1=14 reads.  * Queue 0 is read (at least) 9 times  * Queue 1 is read (at least) 4 times  * Queue 2 is read (at least) 1 time  * Repeat  *  * There may be more reads than the minimum due to race conditions. This is  * allowed by design for performance reasons.  */
end_comment

begin_class
DECL|class|WeightedRoundRobinMultiplexer
specifier|public
class|class
name|WeightedRoundRobinMultiplexer
block|{
comment|// Config keys
DECL|field|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
init|=
literal|"faircallqueue.multiplexer.weights"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WeightedRoundRobinMultiplexer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numQueues
specifier|private
specifier|final
name|int
name|numQueues
decl_stmt|;
comment|// The number of queues under our provisioning
DECL|field|currentQueueIndex
specifier|private
specifier|final
name|AtomicInteger
name|currentQueueIndex
decl_stmt|;
comment|// Current queue we're serving
DECL|field|requestsLeft
specifier|private
specifier|final
name|AtomicInteger
name|requestsLeft
decl_stmt|;
comment|// Number of requests left for this queue
DECL|field|queueWeights
specifier|private
name|int
index|[]
name|queueWeights
decl_stmt|;
comment|// The weights for each queue
DECL|method|WeightedRoundRobinMultiplexer (int aNumQueues, String ns, Configuration conf)
specifier|public
name|WeightedRoundRobinMultiplexer
parameter_list|(
name|int
name|aNumQueues
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|aNumQueues
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Requested queues ("
operator|+
name|aNumQueues
operator|+
literal|") must be greater than zero."
argument_list|)
throw|;
block|}
name|this
operator|.
name|numQueues
operator|=
name|aNumQueues
expr_stmt|;
name|this
operator|.
name|queueWeights
operator|=
name|conf
operator|.
name|getInts
argument_list|(
name|ns
operator|+
literal|"."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|queueWeights
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|queueWeights
operator|=
name|getDefaultQueueWeights
argument_list|(
name|this
operator|.
name|numQueues
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|queueWeights
operator|.
name|length
operator|!=
name|this
operator|.
name|numQueues
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ns
operator|+
literal|"."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
operator|+
literal|" must specify exactly "
operator|+
name|this
operator|.
name|numQueues
operator|+
literal|" weights: one for each priority level."
argument_list|)
throw|;
block|}
name|this
operator|.
name|currentQueueIndex
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestsLeft
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|this
operator|.
name|queueWeights
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WeightedRoundRobinMultiplexer is being used."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates default weights for each queue. The weights are 2^N.    */
DECL|method|getDefaultQueueWeights (int aNumQueues)
specifier|private
name|int
index|[]
name|getDefaultQueueWeights
parameter_list|(
name|int
name|aNumQueues
parameter_list|)
block|{
name|int
index|[]
name|weights
init|=
operator|new
name|int
index|[
name|aNumQueues
index|]
decl_stmt|;
name|int
name|weight
init|=
literal|1
decl_stmt|;
comment|// Start low
for|for
control|(
name|int
name|i
init|=
name|aNumQueues
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// Start at lowest queue
name|weights
index|[
name|i
index|]
operator|=
name|weight
expr_stmt|;
name|weight
operator|*=
literal|2
expr_stmt|;
comment|// Double every iteration
block|}
return|return
name|weights
return|;
block|}
comment|/**    * Move to the next queue.    */
DECL|method|moveToNextQueue ()
specifier|private
name|void
name|moveToNextQueue
parameter_list|()
block|{
name|int
name|thisIdx
init|=
name|this
operator|.
name|currentQueueIndex
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Wrap to fit in our bounds
name|int
name|nextIdx
init|=
operator|(
name|thisIdx
operator|+
literal|1
operator|)
operator|%
name|this
operator|.
name|numQueues
decl_stmt|;
comment|// Set to next index: once this is called, requests will start being
comment|// drawn from nextIdx, but requestsLeft will continue to decrement into
comment|// the negatives
name|this
operator|.
name|currentQueueIndex
operator|.
name|set
argument_list|(
name|nextIdx
argument_list|)
expr_stmt|;
comment|// Finally, reset requestsLeft. This will enable moveToNextQueue to be
comment|// called again, for the new currentQueueIndex
name|this
operator|.
name|requestsLeft
operator|.
name|set
argument_list|(
name|this
operator|.
name|queueWeights
index|[
name|nextIdx
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Advances the index, which will change the current index    * if called enough times.    */
DECL|method|advanceIndex ()
specifier|private
name|void
name|advanceIndex
parameter_list|()
block|{
comment|// Since we did read, we should decrement
name|int
name|requestsLeftVal
init|=
name|this
operator|.
name|requestsLeft
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
comment|// Strict compare with zero (instead of inequality) so that if another
comment|// thread decrements requestsLeft, only one thread will be responsible
comment|// for advancing currentQueueIndex
if|if
condition|(
name|requestsLeftVal
operator|==
literal|0
condition|)
block|{
comment|// This is guaranteed to be called exactly once per currentQueueIndex
name|this
operator|.
name|moveToNextQueue
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the current index. Should be accompanied by a call to    * advanceIndex at some point.    */
DECL|method|getCurrentIndex ()
specifier|private
name|int
name|getCurrentIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentQueueIndex
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Use the mux by getting and advancing index.    */
DECL|method|getAndAdvanceCurrentIndex ()
specifier|public
name|int
name|getAndAdvanceCurrentIndex
parameter_list|()
block|{
name|int
name|idx
init|=
name|this
operator|.
name|getCurrentIndex
argument_list|()
decl_stmt|;
name|this
operator|.
name|advanceIndex
argument_list|()
expr_stmt|;
return|return
name|idx
return|;
block|}
block|}
end_class

end_unit

