begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ObjectWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/* Cache a client using its socket factory as the hash key */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ClientCache
specifier|public
class|class
name|ClientCache
block|{
DECL|field|clients
specifier|private
name|Map
argument_list|<
name|SocketFactory
argument_list|,
name|Client
argument_list|>
name|clients
init|=
operator|new
name|HashMap
argument_list|<
name|SocketFactory
argument_list|,
name|Client
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Construct&amp; cache an IPC client with the user-provided SocketFactory    * if no cached client exists.    *     * @param conf Configuration    * @param factory SocketFactory for client socket    * @param valueClass Class of the expected response    * @return an IPC client    */
DECL|method|getClient (Configuration conf, SocketFactory factory, Class<? extends Writable> valueClass)
specifier|public
specifier|synchronized
name|Client
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|)
block|{
comment|// Construct& cache client.  The configuration is only used for timeout,
comment|// and Clients have connection pools.  So we can either (a) lose some
comment|// connection pooling and leak sockets, or (b) use the same timeout for all
comment|// configurations.  Since the IPC is usually intended globally, not
comment|// per-job, we choose (a).
name|Client
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|factory
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
operator|new
name|Client
argument_list|(
name|valueClass
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|clients
operator|.
name|put
argument_list|(
name|factory
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|incCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Client
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Client
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"getting client out of cache: "
operator|+
name|client
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
comment|/**    * Construct&amp; cache an IPC client with the default SocketFactory    * and default valueClass if no cached client exists.     *     * @param conf Configuration    * @return an IPC client    */
DECL|method|getClient (Configuration conf)
specifier|public
specifier|synchronized
name|Client
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getClient
argument_list|(
name|conf
argument_list|,
name|SocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|,
name|ObjectWritable
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Construct&amp; cache an IPC client with the user-provided SocketFactory    * if no cached client exists. Default response type is ObjectWritable.    *     * @param conf Configuration    * @param factory SocketFactory for client socket    * @return an IPC client    */
DECL|method|getClient (Configuration conf, SocketFactory factory)
specifier|public
specifier|synchronized
name|Client
name|getClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
block|{
return|return
name|this
operator|.
name|getClient
argument_list|(
name|conf
argument_list|,
name|factory
argument_list|,
name|ObjectWritable
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Stop a RPC client connection     * A RPC client is closed only when its reference count becomes zero.    */
DECL|method|stopClient (Client client)
specifier|public
name|void
name|stopClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
if|if
condition|(
name|Client
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Client
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"stopping client from cache: "
operator|+
name|client
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|count
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|count
operator|=
name|client
operator|.
name|decAndGetCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Client
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Client
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing client from cache: "
operator|+
name|client
argument_list|)
expr_stmt|;
block|}
name|clients
operator|.
name|remove
argument_list|(
name|client
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|Client
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Client
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"stopping actual client because no more references remain: "
operator|+
name|client
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

