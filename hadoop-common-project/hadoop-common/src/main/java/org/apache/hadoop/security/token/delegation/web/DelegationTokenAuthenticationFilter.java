begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  *  The<code>DelegationTokenAuthenticationFilter</code> filter is a  *  {@link AuthenticationFilter} with Hadoop Delegation Token support.  *<p/>  *  By default it uses it own instance of the {@link  *  AbstractDelegationTokenSecretManager}. For situations where an external  *<code>AbstractDelegationTokenSecretManager</code> is required (i.e. one that  *  shares the secret with<code>AbstractDelegationTokenSecretManager</code>  *  instance running in other services), the external  *<code>AbstractDelegationTokenSecretManager</code> must be set as an  *  attribute in the {@link ServletContext} of the web application using the  *  {@link #DELEGATION_TOKEN_SECRET_MANAGER_ATTR} attribute name (  *  'hadoop.http.delegation-token-secret-manager').  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DelegationTokenAuthenticationFilter
specifier|public
class|class
name|DelegationTokenAuthenticationFilter
extends|extends
name|AuthenticationFilter
block|{
comment|/**    * Sets an external<code>DelegationTokenSecretManager</code> instance to    * manage creation and verification of Delegation Tokens.    *<p/>    * This is useful for use cases where secrets must be shared across multiple    * services.    */
DECL|field|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
init|=
literal|"hadoop.http.delegation-token-secret-manager"
decl_stmt|;
comment|/**    * It delegates to    * {@link AuthenticationFilter#getConfiguration(String, FilterConfig)} and    * then overrides the {@link AuthenticationHandler} to use if authentication    * type is set to<code>simple</code> or<code>kerberos</code> in order to use    * the corresponding implementation with delegation token support.    *    * @param configPrefix parameter not used.    * @param filterConfig parameter not used.    * @return hadoop-auth de-prefixed configuration for the filter and handler.    */
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|props
init|=
name|super
operator|.
name|getConfiguration
argument_list|(
name|configPrefix
argument_list|,
name|filterConfig
argument_list|)
decl_stmt|;
name|String
name|authType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AUTH_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|authType
operator|.
name|equals
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|PseudoDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authType
operator|.
name|equals
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|KerberosDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
name|AbstractDelegationTokenSecretManager
name|dtSecretManager
init|=
operator|(
name|AbstractDelegationTokenSecretManager
operator|)
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtSecretManager
operator|!=
literal|null
operator|&&
name|getAuthenticationHandler
argument_list|()
operator|instanceof
name|DelegationTokenAuthenticationHandler
condition|)
block|{
name|DelegationTokenAuthenticationHandler
name|handler
init|=
operator|(
name|DelegationTokenAuthenticationHandler
operator|)
name|getAuthenticationHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setExternalDelegationTokenSecretManager
argument_list|(
name|dtSecretManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

