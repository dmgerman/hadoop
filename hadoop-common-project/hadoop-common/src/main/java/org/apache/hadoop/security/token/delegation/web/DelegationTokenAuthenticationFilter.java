begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|ZKSignerSecretProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|ZKDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HttpExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  *  The<code>DelegationTokenAuthenticationFilter</code> filter is a  *  {@link AuthenticationFilter} with Hadoop Delegation Token support.  *<p/>  *  By default it uses it own instance of the {@link  *  AbstractDelegationTokenSecretManager}. For situations where an external  *<code>AbstractDelegationTokenSecretManager</code> is required (i.e. one that  *  shares the secret with<code>AbstractDelegationTokenSecretManager</code>  *  instance running in other services), the external  *<code>AbstractDelegationTokenSecretManager</code> must be set as an  *  attribute in the {@link ServletContext} of the web application using the  *  {@link #DELEGATION_TOKEN_SECRET_MANAGER_ATTR} attribute name (  *  'hadoop.http.delegation-token-secret-manager').  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DelegationTokenAuthenticationFilter
specifier|public
class|class
name|DelegationTokenAuthenticationFilter
extends|extends
name|AuthenticationFilter
block|{
DECL|field|APPLICATION_JSON_MIME
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_JSON_MIME
init|=
literal|"application/json"
decl_stmt|;
DECL|field|ERROR_EXCEPTION_JSON
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_EXCEPTION_JSON
init|=
literal|"exception"
decl_stmt|;
DECL|field|ERROR_MESSAGE_JSON
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE_JSON
init|=
literal|"message"
decl_stmt|;
comment|/**    * Sets an external<code>DelegationTokenSecretManager</code> instance to    * manage creation and verification of Delegation Tokens.    *<p/>    * This is useful for use cases where secrets must be shared across multiple    * services.    */
DECL|field|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
init|=
literal|"hadoop.http.delegation-token-secret-manager"
decl_stmt|;
DECL|field|UTF8_CHARSET
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|UGI_TL
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|UserGroupInformation
argument_list|>
name|UGI_TL
init|=
operator|new
name|ThreadLocal
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|PROXYUSER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PROXYUSER_PREFIX
init|=
literal|"proxyuser"
decl_stmt|;
DECL|field|handlerAuthMethod
specifier|private
name|SaslRpcServer
operator|.
name|AuthMethod
name|handlerAuthMethod
decl_stmt|;
comment|/**    * It delegates to    * {@link AuthenticationFilter#getConfiguration(String, FilterConfig)} and    * then overrides the {@link AuthenticationHandler} to use if authentication    * type is set to<code>simple</code> or<code>kerberos</code> in order to use    * the corresponding implementation with delegation token support.    *    * @param configPrefix parameter not used.    * @param filterConfig parameter not used.    * @return hadoop-auth de-prefixed configuration for the filter and handler.    */
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|props
init|=
name|super
operator|.
name|getConfiguration
argument_list|(
name|configPrefix
argument_list|,
name|filterConfig
argument_list|)
decl_stmt|;
name|String
name|authType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AUTH_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|authType
operator|.
name|equals
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|PseudoDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authType
operator|.
name|equals
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|TYPE
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|KerberosDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
comment|/**    * Returns the proxyuser configuration. All returned properties must start    * with<code>proxyuser.</code>'    *<p/>    * Subclasses may override this method if the proxyuser configuration is     * read from other place than the filter init parameters.    *    * @param filterConfig filter configuration object    * @return the proxyuser configuration properties.    * @throws ServletException thrown if the configuration could not be created.    */
DECL|method|getProxyuserConfiguration (FilterConfig filterConfig)
specifier|protected
name|Configuration
name|getProxyuserConfiguration
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// this filter class gets the configuration from the filter configs, we are
comment|// creating an empty configuration and injecting the proxyuser settings in
comment|// it. In the initialization of the filter, the returned configuration is
comment|// passed to the ProxyUsers which only looks for 'proxyusers.' properties.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|filterConfig
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|PROXYUSER_PREFIX
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
name|AuthenticationHandler
name|handler
init|=
name|getAuthenticationHandler
argument_list|()
decl_stmt|;
name|AbstractDelegationTokenSecretManager
name|dtSecretManager
init|=
operator|(
name|AbstractDelegationTokenSecretManager
operator|)
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtSecretManager
operator|!=
literal|null
operator|&&
name|handler
operator|instanceof
name|DelegationTokenAuthenticationHandler
condition|)
block|{
name|DelegationTokenAuthenticationHandler
name|dtHandler
init|=
operator|(
name|DelegationTokenAuthenticationHandler
operator|)
name|getAuthenticationHandler
argument_list|()
decl_stmt|;
name|dtHandler
operator|.
name|setExternalDelegationTokenSecretManager
argument_list|(
name|dtSecretManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|PseudoAuthenticationHandler
operator|||
name|handler
operator|instanceof
name|PseudoDelegationTokenAuthenticationHandler
condition|)
block|{
name|setHandlerAuthMethod
argument_list|(
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|KerberosAuthenticationHandler
operator|||
name|handler
operator|instanceof
name|KerberosDelegationTokenAuthenticationHandler
condition|)
block|{
name|setHandlerAuthMethod
argument_list|(
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
block|}
comment|// proxyuser configuration
name|Configuration
name|conf
init|=
name|getProxyuserConfiguration
argument_list|(
name|filterConfig
argument_list|)
decl_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|,
name|PROXYUSER_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeAuthHandler (String authHandlerClassName, FilterConfig filterConfig)
specifier|protected
name|void
name|initializeAuthHandler
parameter_list|(
name|String
name|authHandlerClassName
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// A single CuratorFramework should be used for a ZK cluster.
comment|// If the ZKSignerSecretProvider has already created it, it has to
comment|// be set here... to be used by the ZKDelegationTokenSecretManager
name|ZKDelegationTokenSecretManager
operator|.
name|setCurator
argument_list|(
operator|(
name|CuratorFramework
operator|)
name|filterConfig
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|ZKSignerSecretProvider
operator|.
name|ZOOKEEPER_SIGNER_SECRET_PROVIDER_CURATOR_CLIENT_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|initializeAuthHandler
argument_list|(
name|authHandlerClassName
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
name|ZKDelegationTokenSecretManager
operator|.
name|setCurator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setHandlerAuthMethod (SaslRpcServer.AuthMethod authMethod)
specifier|protected
name|void
name|setHandlerAuthMethod
parameter_list|(
name|SaslRpcServer
operator|.
name|AuthMethod
name|authMethod
parameter_list|)
block|{
name|this
operator|.
name|handlerAuthMethod
operator|=
name|authMethod
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDoAs (HttpServletRequest request)
specifier|static
name|String
name|getDoAs
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|list
init|=
name|URLEncodedUtils
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|UTF8_CHARSET
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NameValuePair
name|nv
range|:
name|list
control|)
block|{
if|if
condition|(
name|DelegationTokenAuthenticatedURL
operator|.
name|DO_AS
operator|.
name|equalsIgnoreCase
argument_list|(
name|nv
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|nv
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getHttpUserGroupInformationInContext ()
specifier|static
name|UserGroupInformation
name|getHttpUserGroupInformationInContext
parameter_list|()
block|{
return|return
name|UGI_TL
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doFilter (FilterChain filterChain, HttpServletRequest request, HttpServletResponse response)
specifier|protected
name|void
name|doFilter
parameter_list|(
name|FilterChain
name|filterChain
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|boolean
name|requestCompleted
init|=
literal|false
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
name|AuthenticationToken
name|authToken
init|=
operator|(
name|AuthenticationToken
operator|)
name|request
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|authToken
operator|!=
literal|null
operator|&&
name|authToken
operator|!=
name|AuthenticationToken
operator|.
name|ANONYMOUS
condition|)
block|{
comment|// if the request was authenticated because of a delegation token,
comment|// then we ignore proxyuser (this is the same as the RPC behavior).
name|ugi
operator|=
operator|(
name|UserGroupInformation
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|DelegationTokenAuthenticationHandler
operator|.
name|DELEGATION_TOKEN_UGI_ATTRIBUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|String
name|realUser
init|=
name|request
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|realUser
argument_list|,
name|handlerAuthMethod
argument_list|)
expr_stmt|;
name|String
name|doAsUser
init|=
name|getDoAs
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAsUser
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|doAsUser
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|request
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ex
parameter_list|)
block|{
name|HttpExceptionUtils
operator|.
name|createServletExceptionResponse
argument_list|(
name|response
argument_list|,
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|requestCompleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|UGI_TL
operator|.
name|set
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|requestCompleted
condition|)
block|{
specifier|final
name|UserGroupInformation
name|ugiF
init|=
name|ugi
decl_stmt|;
try|try
block|{
name|request
operator|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|request
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getAuthType
parameter_list|()
block|{
return|return
operator|(
name|ugiF
operator|!=
literal|null
operator|)
condition|?
name|handlerAuthMethod
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
operator|(
name|ugiF
operator|!=
literal|null
operator|)
condition|?
name|ugiF
operator|.
name|getShortUserName
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
operator|(
name|ugiF
operator|!=
literal|null
operator|)
condition|?
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|ugiF
operator|.
name|getUserName
argument_list|()
return|;
block|}
block|}
else|:
literal|null
return|;
block|}
block|}
expr_stmt|;
name|super
operator|.
name|doFilter
argument_list|(
name|filterChain
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|UGI_TL
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

