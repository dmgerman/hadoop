begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCoderOptions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A raw encoder in XOR code scheme in pure Java, adapted from HDFS-RAID.  *  * XOR code is an important primitive code scheme in erasure coding and often  * used in advanced codes, like HitchHiker and LRC, though itself is rarely  * deployed independently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XORRawEncoder
specifier|public
class|class
name|XORRawEncoder
extends|extends
name|RawErasureEncoder
block|{
DECL|method|XORRawEncoder (ErasureCoderOptions coderOptions)
specifier|public
name|XORRawEncoder
parameter_list|(
name|ErasureCoderOptions
name|coderOptions
parameter_list|)
block|{
name|super
argument_list|(
name|coderOptions
argument_list|)
expr_stmt|;
block|}
DECL|method|doEncode (ByteBufferEncodingState encodingState)
specifier|protected
name|void
name|doEncode
parameter_list|(
name|ByteBufferEncodingState
name|encodingState
parameter_list|)
block|{
name|CoderUtil
operator|.
name|resetOutputBuffers
argument_list|(
name|encodingState
operator|.
name|outputs
argument_list|,
name|encodingState
operator|.
name|encodeLength
argument_list|)
expr_stmt|;
name|ByteBuffer
name|output
init|=
name|encodingState
operator|.
name|outputs
index|[
literal|0
index|]
decl_stmt|;
comment|// Get the first buffer's data.
name|int
name|iIdx
decl_stmt|,
name|oIdx
decl_stmt|;
for|for
control|(
name|iIdx
operator|=
name|encodingState
operator|.
name|inputs
index|[
literal|0
index|]
operator|.
name|position
argument_list|()
operator|,
name|oIdx
operator|=
name|output
operator|.
name|position
argument_list|()
init|;
name|iIdx
operator|<
name|encodingState
operator|.
name|inputs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
condition|;
name|iIdx
operator|++
operator|,
name|oIdx
operator|++
control|)
block|{
name|output
operator|.
name|put
argument_list|(
name|oIdx
argument_list|,
name|encodingState
operator|.
name|inputs
index|[
literal|0
index|]
operator|.
name|get
argument_list|(
name|iIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// XOR with everything else.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encodingState
operator|.
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|iIdx
operator|=
name|encodingState
operator|.
name|inputs
index|[
name|i
index|]
operator|.
name|position
argument_list|()
operator|,
name|oIdx
operator|=
name|output
operator|.
name|position
argument_list|()
init|;
name|iIdx
operator|<
name|encodingState
operator|.
name|inputs
index|[
name|i
index|]
operator|.
name|limit
argument_list|()
condition|;
name|iIdx
operator|++
operator|,
name|oIdx
operator|++
control|)
block|{
name|output
operator|.
name|put
argument_list|(
name|oIdx
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oIdx
argument_list|)
operator|^
name|encodingState
operator|.
name|inputs
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|iIdx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doEncode (ByteArrayEncodingState encodingState)
specifier|protected
name|void
name|doEncode
parameter_list|(
name|ByteArrayEncodingState
name|encodingState
parameter_list|)
block|{
name|int
name|dataLen
init|=
name|encodingState
operator|.
name|encodeLength
decl_stmt|;
name|CoderUtil
operator|.
name|resetOutputBuffers
argument_list|(
name|encodingState
operator|.
name|outputs
argument_list|,
name|encodingState
operator|.
name|outputOffsets
argument_list|,
name|dataLen
argument_list|)
expr_stmt|;
name|byte
index|[]
name|output
init|=
name|encodingState
operator|.
name|outputs
index|[
literal|0
index|]
decl_stmt|;
comment|// Get the first buffer's data.
name|int
name|iIdx
decl_stmt|,
name|oIdx
decl_stmt|;
for|for
control|(
name|iIdx
operator|=
name|encodingState
operator|.
name|inputOffsets
index|[
literal|0
index|]
operator|,
name|oIdx
operator|=
name|encodingState
operator|.
name|outputOffsets
index|[
literal|0
index|]
init|;
name|iIdx
operator|<
name|encodingState
operator|.
name|inputOffsets
index|[
literal|0
index|]
operator|+
name|dataLen
condition|;
name|iIdx
operator|++
operator|,
name|oIdx
operator|++
control|)
block|{
name|output
index|[
name|oIdx
index|]
operator|=
name|encodingState
operator|.
name|inputs
index|[
literal|0
index|]
index|[
name|iIdx
index|]
expr_stmt|;
block|}
comment|// XOR with everything else.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|encodingState
operator|.
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|iIdx
operator|=
name|encodingState
operator|.
name|inputOffsets
index|[
name|i
index|]
operator|,
name|oIdx
operator|=
name|encodingState
operator|.
name|outputOffsets
index|[
literal|0
index|]
init|;
name|iIdx
operator|<
name|encodingState
operator|.
name|inputOffsets
index|[
name|i
index|]
operator|+
name|dataLen
condition|;
name|iIdx
operator|++
operator|,
name|oIdx
operator|++
control|)
block|{
name|output
index|[
name|oIdx
index|]
operator|^=
name|encodingState
operator|.
name|inputs
index|[
name|i
index|]
index|[
name|iIdx
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

