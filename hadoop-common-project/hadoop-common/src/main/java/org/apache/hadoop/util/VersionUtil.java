begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|VersionUtil
specifier|public
specifier|abstract
class|class
name|VersionUtil
block|{
DECL|field|COMPONENT_GROUPS
specifier|private
specifier|static
specifier|final
name|Pattern
name|COMPONENT_GROUPS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)|(\\D+)"
argument_list|)
decl_stmt|;
comment|/**    * This function splits the two versions on&quot;.&quot; and performs a    * naturally-ordered comparison of the resulting components. For example, the    * version string "0.3" is considered to precede "0.20", despite the fact that    * lexical comparison would consider "0.20" to precede "0.3". This method of    * comparison is similar to the method used by package versioning systems like    * deb and RPM.    *     * Version components are compared numerically whenever possible, however a    * version component can contain non-numeric characters. When a non-numeric    * group of characters is found in a version component, this group is compared    * with the similarly-indexed group in the other version component. If the    * other group is numeric, then the numeric group is considered to precede the    * non-numeric group. If both groups are non-numeric, then a lexical    * comparison is performed.    *     * If two versions have a different number of components, then only the lower    * number of components are compared. If those components are identical    * between the two versions, then the version with fewer components is    * considered to precede the version with more components.    *     * This function returns a negative integer if version1 precedes version2, a    * positive integer if version2 precedes version1, and 0 if and only if the    * two versions' components are identical in value and cardinality.    *     * @param version1    *          the first version to compare    * @param version2    *          the second version to compare    * @return a negative integer if version1 precedes version2, a positive    *         integer if version2 precedes version1, and 0 if and only if the two    *         versions are equal.    */
DECL|method|compareVersions (String version1, String version2)
specifier|public
specifier|static
name|int
name|compareVersions
parameter_list|(
name|String
name|version1
parameter_list|,
name|String
name|version2
parameter_list|)
block|{
name|String
index|[]
name|version1Parts
init|=
name|version1
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
index|[]
name|version2Parts
init|=
name|version2
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|version1Parts
operator|.
name|length
operator|&&
name|i
operator|<
name|version2Parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|component1
init|=
name|version1Parts
index|[
name|i
index|]
decl_stmt|;
name|String
name|component2
init|=
name|version2Parts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|component1
operator|.
name|equals
argument_list|(
name|component2
argument_list|)
condition|)
block|{
name|Matcher
name|matcher1
init|=
name|COMPONENT_GROUPS
operator|.
name|matcher
argument_list|(
name|component1
argument_list|)
decl_stmt|;
name|Matcher
name|matcher2
init|=
name|COMPONENT_GROUPS
operator|.
name|matcher
argument_list|(
name|component2
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher1
operator|.
name|find
argument_list|()
operator|&&
name|matcher2
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|group1
init|=
name|matcher1
operator|.
name|group
argument_list|()
decl_stmt|;
name|String
name|group2
init|=
name|matcher2
operator|.
name|group
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|group1
operator|.
name|equals
argument_list|(
name|group2
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNumeric
argument_list|(
name|group1
argument_list|)
operator|&&
name|isNumeric
argument_list|(
name|group2
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|group1
argument_list|)
operator|-
name|Integer
operator|.
name|parseInt
argument_list|(
name|group2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isNumeric
argument_list|(
name|group1
argument_list|)
operator|&&
operator|!
name|isNumeric
argument_list|(
name|group2
argument_list|)
condition|)
block|{
return|return
name|group1
operator|.
name|compareTo
argument_list|(
name|group2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|isNumeric
argument_list|(
name|group1
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
block|}
return|return
name|component1
operator|.
name|length
argument_list|()
operator|-
name|component2
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|return
name|version1Parts
operator|.
name|length
operator|-
name|version2Parts
operator|.
name|length
return|;
block|}
DECL|method|isNumeric (String s)
specifier|private
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

