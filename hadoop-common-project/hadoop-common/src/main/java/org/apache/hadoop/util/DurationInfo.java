begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A duration with logging of final state at info or debug  * in the {@code close()} call.  * This allows it to be used in a try-with-resources clause, and have the  * duration automatically logged.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|DurationInfo
specifier|public
class|class
name|DurationInfo
extends|extends
name|OperationDuration
implements|implements
name|AutoCloseable
block|{
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
comment|/**    * Should the log be at INFO rather than DEBUG.    */
DECL|field|logAtInfo
specifier|private
specifier|final
name|boolean
name|logAtInfo
decl_stmt|;
comment|/**    * Create the duration text from a {@code String.format()} code call;    * log output at info level.    * @param log log to write to    * @param format format string    * @param args list of arguments    */
DECL|method|DurationInfo (Logger log, String format, Object... args)
specifier|public
name|DurationInfo
parameter_list|(
name|Logger
name|log
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
argument_list|(
name|log
argument_list|,
literal|true
argument_list|,
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the duration text from a {@code String.format()} code call    * and log either at info or debug.    * @param log log to write to    * @param logAtInfo should the log be at info, rather than debug    * @param format format string    * @param args list of arguments    */
DECL|method|DurationInfo (Logger log, boolean logAtInfo, String format, Object... args)
specifier|public
name|DurationInfo
parameter_list|(
name|Logger
name|log
parameter_list|,
name|boolean
name|logAtInfo
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|logAtInfo
operator|=
name|logAtInfo
expr_stmt|;
if|if
condition|(
name|logAtInfo
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting: {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting: {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|text
operator|+
literal|": duration "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|logAtInfo
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

