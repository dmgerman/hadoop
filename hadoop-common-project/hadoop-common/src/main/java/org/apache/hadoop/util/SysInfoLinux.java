begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Plugin to calculate resource information on Linux systems.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SysInfoLinux
specifier|public
class|class
name|SysInfoLinux
extends|extends
name|SysInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SysInfoLinux
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * proc's meminfo virtual file has keys-values in the format    * "key:[ \t]*value[ \t]kB".    */
DECL|field|PROCFS_MEMFILE
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_MEMFILE
init|=
literal|"/proc/meminfo"
decl_stmt|;
DECL|field|PROCFS_MEMFILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_MEMFILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([a-zA-Z_()]*):[ \t]*([0-9]*)[ \t]*(kB)?"
argument_list|)
decl_stmt|;
comment|// We need the values for the following keys in meminfo
DECL|field|MEMTOTAL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|MEMTOTAL_STRING
init|=
literal|"MemTotal"
decl_stmt|;
DECL|field|SWAPTOTAL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|SWAPTOTAL_STRING
init|=
literal|"SwapTotal"
decl_stmt|;
DECL|field|MEMFREE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|MEMFREE_STRING
init|=
literal|"MemFree"
decl_stmt|;
DECL|field|SWAPFREE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|SWAPFREE_STRING
init|=
literal|"SwapFree"
decl_stmt|;
DECL|field|INACTIVE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|INACTIVE_STRING
init|=
literal|"Inactive"
decl_stmt|;
DECL|field|INACTIVEFILE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|INACTIVEFILE_STRING
init|=
literal|"Inactive(file)"
decl_stmt|;
DECL|field|HARDWARECORRUPTED_STRING
specifier|private
specifier|static
specifier|final
name|String
name|HARDWARECORRUPTED_STRING
init|=
literal|"HardwareCorrupted"
decl_stmt|;
DECL|field|HUGEPAGESTOTAL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|HUGEPAGESTOTAL_STRING
init|=
literal|"HugePages_Total"
decl_stmt|;
DECL|field|HUGEPAGESIZE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|HUGEPAGESIZE_STRING
init|=
literal|"Hugepagesize"
decl_stmt|;
comment|/**    * Patterns for parsing /proc/cpuinfo.    */
DECL|field|PROCFS_CPUINFO
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_CPUINFO
init|=
literal|"/proc/cpuinfo"
decl_stmt|;
DECL|field|PROCESSOR_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCESSOR_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^processor[ \t]:[ \t]*([0-9]*)"
argument_list|)
decl_stmt|;
DECL|field|FREQUENCY_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|FREQUENCY_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^cpu MHz[ \t]*:[ \t]*([0-9.]*)"
argument_list|)
decl_stmt|;
DECL|field|PHYSICAL_ID_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PHYSICAL_ID_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^physical id[ \t]*:[ \t]*([0-9]*)"
argument_list|)
decl_stmt|;
DECL|field|CORE_ID_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|CORE_ID_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^core id[ \t]*:[ \t]*([0-9]*)"
argument_list|)
decl_stmt|;
comment|/**    * Pattern for parsing /proc/stat.    */
DECL|field|PROCFS_STAT
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_STAT
init|=
literal|"/proc/stat"
decl_stmt|;
DECL|field|CPU_TIME_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|CPU_TIME_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^cpu[ \t]*([0-9]*)"
operator|+
literal|"[ \t]*([0-9]*)[ \t]*([0-9]*)[ \t].*"
argument_list|)
decl_stmt|;
DECL|field|cpuTimeTracker
specifier|private
name|CpuTimeTracker
name|cpuTimeTracker
decl_stmt|;
comment|/**    * Pattern for parsing /proc/net/dev.    */
DECL|field|PROCFS_NETFILE
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_NETFILE
init|=
literal|"/proc/net/dev"
decl_stmt|;
DECL|field|PROCFS_NETFILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_NETFILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[ \t]*([a-zA-Z]+[0-9]*):"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+).*"
argument_list|)
decl_stmt|;
comment|/**    * Pattern for parsing /proc/diskstats.    */
DECL|field|PROCFS_DISKSFILE
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_DISKSFILE
init|=
literal|"/proc/diskstats"
decl_stmt|;
DECL|field|PROCFS_DISKSFILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_DISKSFILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[ \t]*([0-9]+)[ \t]*([0-9 ]+)"
operator|+
literal|"(?!([a-zA-Z]+[0-9]+))([a-zA-Z]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
operator|+
literal|"[ \t]*([0-9]+)[ \t]*([0-9]+)[ \t]*([0-9]+)"
argument_list|)
decl_stmt|;
comment|/**    * Pattern for parsing /sys/block/partition_name/queue/hw_sector_size.    */
DECL|field|PROCFS_DISKSECTORFILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_DISKSECTORFILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9]+)"
argument_list|)
decl_stmt|;
DECL|field|procfsMemFile
specifier|private
name|String
name|procfsMemFile
decl_stmt|;
DECL|field|procfsCpuFile
specifier|private
name|String
name|procfsCpuFile
decl_stmt|;
DECL|field|procfsStatFile
specifier|private
name|String
name|procfsStatFile
decl_stmt|;
DECL|field|procfsNetFile
specifier|private
name|String
name|procfsNetFile
decl_stmt|;
DECL|field|procfsDisksFile
specifier|private
name|String
name|procfsDisksFile
decl_stmt|;
DECL|field|jiffyLengthInMillis
specifier|private
name|long
name|jiffyLengthInMillis
decl_stmt|;
DECL|field|ramSize
specifier|private
name|long
name|ramSize
init|=
literal|0
decl_stmt|;
DECL|field|swapSize
specifier|private
name|long
name|swapSize
init|=
literal|0
decl_stmt|;
DECL|field|ramSizeFree
specifier|private
name|long
name|ramSizeFree
init|=
literal|0
decl_stmt|;
comment|// free ram space on the machine (kB)
DECL|field|swapSizeFree
specifier|private
name|long
name|swapSizeFree
init|=
literal|0
decl_stmt|;
comment|// free swap space on the machine (kB)
DECL|field|inactiveSize
specifier|private
name|long
name|inactiveSize
init|=
literal|0
decl_stmt|;
comment|// inactive memory (kB)
DECL|field|inactiveFileSize
specifier|private
name|long
name|inactiveFileSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// inactive cache memory, -1 if not there
DECL|field|hardwareCorruptSize
specifier|private
name|long
name|hardwareCorruptSize
init|=
literal|0
decl_stmt|;
comment|// RAM corrupt and not available
DECL|field|hugePagesTotal
specifier|private
name|long
name|hugePagesTotal
init|=
literal|0
decl_stmt|;
comment|// # of hugepages reserved
DECL|field|hugePageSize
specifier|private
name|long
name|hugePageSize
init|=
literal|0
decl_stmt|;
comment|// # size of each hugepage
comment|/* number of logical processors on the system. */
DECL|field|numProcessors
specifier|private
name|int
name|numProcessors
init|=
literal|0
decl_stmt|;
comment|/* number of physical cores on the system. */
DECL|field|numCores
specifier|private
name|int
name|numCores
init|=
literal|0
decl_stmt|;
DECL|field|cpuFrequency
specifier|private
name|long
name|cpuFrequency
init|=
literal|0L
decl_stmt|;
comment|// CPU frequency on the system (kHz)
DECL|field|numNetBytesRead
specifier|private
name|long
name|numNetBytesRead
init|=
literal|0L
decl_stmt|;
comment|// aggregated bytes read from network
DECL|field|numNetBytesWritten
specifier|private
name|long
name|numNetBytesWritten
init|=
literal|0L
decl_stmt|;
comment|// aggregated bytes written to network
DECL|field|numDisksBytesRead
specifier|private
name|long
name|numDisksBytesRead
init|=
literal|0L
decl_stmt|;
comment|// aggregated bytes read from disks
DECL|field|numDisksBytesWritten
specifier|private
name|long
name|numDisksBytesWritten
init|=
literal|0L
decl_stmt|;
comment|// aggregated bytes written to disks
DECL|field|readMemInfoFile
specifier|private
name|boolean
name|readMemInfoFile
init|=
literal|false
decl_stmt|;
DECL|field|readCpuInfoFile
specifier|private
name|boolean
name|readCpuInfoFile
init|=
literal|false
decl_stmt|;
comment|/* map for every disk its sector size */
DECL|field|perDiskSectorSize
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|perDiskSectorSize
init|=
literal|null
decl_stmt|;
DECL|field|PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|PAGE_SIZE
init|=
name|getConf
argument_list|(
literal|"PAGESIZE"
argument_list|)
decl_stmt|;
DECL|field|JIFFY_LENGTH_IN_MILLIS
specifier|public
specifier|static
specifier|final
name|long
name|JIFFY_LENGTH_IN_MILLIS
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
literal|1000D
operator|/
name|getConf
argument_list|(
literal|"CLK_TCK"
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|method|getConf (String attr)
specifier|private
specifier|static
name|long
name|getConf
parameter_list|(
name|String
name|attr
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|LINUX
condition|)
block|{
try|try
block|{
name|ShellCommandExecutor
name|shellExecutorClk
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"getconf"
block|,
name|attr
block|}
argument_list|)
decl_stmt|;
name|shellExecutorClk
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|shellExecutorClk
operator|.
name|getOutput
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Get current time.    * @return Unix time stamp in millisecond    */
DECL|method|getCurrentTime ()
name|long
name|getCurrentTime
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|method|SysInfoLinux ()
specifier|public
name|SysInfoLinux
parameter_list|()
block|{
name|this
argument_list|(
name|PROCFS_MEMFILE
argument_list|,
name|PROCFS_CPUINFO
argument_list|,
name|PROCFS_STAT
argument_list|,
name|PROCFS_NETFILE
argument_list|,
name|PROCFS_DISKSFILE
argument_list|,
name|JIFFY_LENGTH_IN_MILLIS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor which allows assigning the /proc/ directories. This will be    * used only in unit tests.    * @param procfsMemFile fake file for /proc/meminfo    * @param procfsCpuFile fake file for /proc/cpuinfo    * @param procfsStatFile fake file for /proc/stat    * @param procfsNetFile fake file for /proc/net/dev    * @param procfsDisksFile fake file for /proc/diskstats    * @param jiffyLengthInMillis fake jiffy length value    */
annotation|@
name|VisibleForTesting
DECL|method|SysInfoLinux (String procfsMemFile, String procfsCpuFile, String procfsStatFile, String procfsNetFile, String procfsDisksFile, long jiffyLengthInMillis)
specifier|public
name|SysInfoLinux
parameter_list|(
name|String
name|procfsMemFile
parameter_list|,
name|String
name|procfsCpuFile
parameter_list|,
name|String
name|procfsStatFile
parameter_list|,
name|String
name|procfsNetFile
parameter_list|,
name|String
name|procfsDisksFile
parameter_list|,
name|long
name|jiffyLengthInMillis
parameter_list|)
block|{
name|this
operator|.
name|procfsMemFile
operator|=
name|procfsMemFile
expr_stmt|;
name|this
operator|.
name|procfsCpuFile
operator|=
name|procfsCpuFile
expr_stmt|;
name|this
operator|.
name|procfsStatFile
operator|=
name|procfsStatFile
expr_stmt|;
name|this
operator|.
name|procfsNetFile
operator|=
name|procfsNetFile
expr_stmt|;
name|this
operator|.
name|procfsDisksFile
operator|=
name|procfsDisksFile
expr_stmt|;
name|this
operator|.
name|jiffyLengthInMillis
operator|=
name|jiffyLengthInMillis
expr_stmt|;
name|this
operator|.
name|cpuTimeTracker
operator|=
operator|new
name|CpuTimeTracker
argument_list|(
name|jiffyLengthInMillis
argument_list|)
expr_stmt|;
name|this
operator|.
name|perDiskSectorSize
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read /proc/meminfo, parse and compute memory information only once.    */
DECL|method|readProcMemInfoFile ()
specifier|private
name|void
name|readProcMemInfoFile
parameter_list|()
block|{
name|readProcMemInfoFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read /proc/meminfo, parse and compute memory information.    * @param readAgain if false, read only on the first time    */
DECL|method|readProcMemInfoFile (boolean readAgain)
specifier|private
name|void
name|readProcMemInfoFile
parameter_list|(
name|boolean
name|readAgain
parameter_list|)
block|{
if|if
condition|(
name|readMemInfoFile
operator|&&
operator|!
name|readAgain
condition|)
block|{
return|return;
block|}
comment|// Read "/proc/memInfo" file
name|BufferedReader
name|in
decl_stmt|;
name|InputStreamReader
name|fReader
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsMemFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// shouldn't happen....
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't read "
operator|+
name|procfsMemFile
operator|+
literal|"; can't determine memory settings"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCFS_MEMFILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|MEMTOTAL_STRING
argument_list|)
condition|)
block|{
name|ramSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|SWAPTOTAL_STRING
argument_list|)
condition|)
block|{
name|swapSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|MEMFREE_STRING
argument_list|)
condition|)
block|{
name|ramSizeFree
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|SWAPFREE_STRING
argument_list|)
condition|)
block|{
name|swapSizeFree
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|INACTIVE_STRING
argument_list|)
condition|)
block|{
name|inactiveSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|INACTIVEFILE_STRING
argument_list|)
condition|)
block|{
name|inactiveFileSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|HARDWARECORRUPTED_STRING
argument_list|)
condition|)
block|{
name|hardwareCorruptSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|HUGEPAGESTOTAL_STRING
argument_list|)
condition|)
block|{
name|hugePagesTotal
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|HUGEPAGESIZE_STRING
argument_list|)
condition|)
block|{
name|hugePageSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
name|readMemInfoFile
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Read /proc/cpuinfo, parse and calculate CPU information.    */
DECL|method|readProcCpuInfoFile ()
specifier|private
name|void
name|readProcCpuInfoFile
parameter_list|()
block|{
comment|// This directory needs to be read only once
if|if
condition|(
name|readCpuInfoFile
condition|)
block|{
return|return;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|coreIdSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Read "/proc/cpuinfo" file
name|BufferedReader
name|in
decl_stmt|;
name|InputStreamReader
name|fReader
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsCpuFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// shouldn't happen....
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't read "
operator|+
name|procfsCpuFile
operator|+
literal|"; can't determine cpu info"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|numProcessors
operator|=
literal|0
expr_stmt|;
name|numCores
operator|=
literal|1
expr_stmt|;
name|String
name|currentPhysicalId
init|=
literal|""
decl_stmt|;
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCESSOR_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|numProcessors
operator|++
expr_stmt|;
block|}
name|mat
operator|=
name|FREQUENCY_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|cpuFrequency
operator|=
call|(
name|long
call|)
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// kHz
block|}
name|mat
operator|=
name|PHYSICAL_ID_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|currentPhysicalId
operator|=
name|str
expr_stmt|;
block|}
name|mat
operator|=
name|CORE_ID_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|coreIdSet
operator|.
name|add
argument_list|(
name|currentPhysicalId
operator|+
literal|" "
operator|+
name|str
argument_list|)
expr_stmt|;
name|numCores
operator|=
name|coreIdSet
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
name|readCpuInfoFile
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Read /proc/stat file, parse and calculate cumulative CPU.    */
DECL|method|readProcStatFile ()
specifier|private
name|void
name|readProcStatFile
parameter_list|()
block|{
comment|// Read "/proc/stat" file
name|BufferedReader
name|in
decl_stmt|;
name|InputStreamReader
name|fReader
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsStatFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// shouldn't happen....
return|return;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|CPU_TIME_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|long
name|uTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|nTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|sTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|cpuTimeTracker
operator|.
name|updateElapsedJiffies
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|uTime
operator|+
name|nTime
operator|+
name|sTime
argument_list|)
argument_list|,
name|getCurrentTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read /proc/net/dev file, parse and calculate amount    * of bytes read and written through the network.    */
DECL|method|readProcNetInfoFile ()
specifier|private
name|void
name|readProcNetInfoFile
parameter_list|()
block|{
name|numNetBytesRead
operator|=
literal|0L
expr_stmt|;
name|numNetBytesWritten
operator|=
literal|0L
expr_stmt|;
comment|// Read "/proc/net/dev" file
name|BufferedReader
name|in
decl_stmt|;
name|InputStreamReader
name|fReader
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsNetFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
return|return;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCFS_NETFILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
assert|assert
name|mat
operator|.
name|groupCount
argument_list|()
operator|>=
literal|16
assert|;
comment|// ignore loopback interfaces
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"lo"
argument_list|)
condition|)
block|{
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|numNetBytesRead
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|numNetBytesWritten
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read /proc/diskstats file, parse and calculate amount    * of bytes read and written from/to disks.    */
DECL|method|readProcDisksInfoFile ()
specifier|private
name|void
name|readProcDisksInfoFile
parameter_list|()
block|{
name|numDisksBytesRead
operator|=
literal|0L
expr_stmt|;
name|numDisksBytesWritten
operator|=
literal|0L
expr_stmt|;
comment|// Read "/proc/diskstats" file
name|BufferedReader
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsDisksFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
return|return;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCFS_DISKSFILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|diskName
init|=
name|mat
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
assert|assert
name|diskName
operator|!=
literal|null
assert|;
comment|// ignore loop or ram partitions
if|if
condition|(
name|diskName
operator|.
name|contains
argument_list|(
literal|"loop"
argument_list|)
operator|||
name|diskName
operator|.
name|contains
argument_list|(
literal|"ram"
argument_list|)
condition|)
block|{
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Integer
name|sectorSize
decl_stmt|;
synchronized|synchronized
init|(
name|perDiskSectorSize
init|)
block|{
name|sectorSize
operator|=
name|perDiskSectorSize
operator|.
name|get
argument_list|(
name|diskName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|sectorSize
condition|)
block|{
comment|// retrieve sectorSize
comment|// if unavailable or error, assume 512
name|sectorSize
operator|=
name|readDiskBlockInformation
argument_list|(
name|diskName
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|perDiskSectorSize
operator|.
name|put
argument_list|(
name|diskName
argument_list|,
name|sectorSize
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|sectorsRead
init|=
name|mat
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|String
name|sectorsWritten
init|=
name|mat
operator|.
name|group
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sectorsRead
operator|||
literal|null
operator|==
name|sectorsWritten
condition|)
block|{
return|return;
block|}
name|numDisksBytesRead
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|sectorsRead
argument_list|)
operator|*
name|sectorSize
expr_stmt|;
name|numDisksBytesWritten
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|sectorsWritten
argument_list|)
operator|*
name|sectorSize
expr_stmt|;
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|procfsDisksFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|procfsDisksFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read /sys/block/diskName/queue/hw_sector_size file, parse and calculate    * sector size for a specific disk.    * @return sector size of specified disk, or defSector    */
DECL|method|readDiskBlockInformation (String diskName, int defSector)
name|int
name|readDiskBlockInformation
parameter_list|(
name|String
name|diskName
parameter_list|,
name|int
name|defSector
parameter_list|)
block|{
assert|assert
name|perDiskSectorSize
operator|!=
literal|null
operator|&&
name|diskName
operator|!=
literal|null
assert|;
name|String
name|procfsDiskSectorFile
init|=
literal|"/sys/block/"
operator|+
name|diskName
operator|+
literal|"/queue/hw_sector_size"
decl_stmt|;
name|BufferedReader
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|procfsDiskSectorFile
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
return|return
name|defSector
return|;
block|}
name|Matcher
name|mat
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCFS_DISKSECTORFILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|secSize
init|=
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|secSize
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|secSize
argument_list|)
return|;
block|}
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|defSector
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|procfsDiskSectorFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|defSector
return|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|procfsDiskSectorFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getPhysicalMemorySize ()
specifier|public
name|long
name|getPhysicalMemorySize
parameter_list|()
block|{
name|readProcMemInfoFile
argument_list|()
expr_stmt|;
return|return
operator|(
name|ramSize
operator|-
name|hardwareCorruptSize
operator|-
operator|(
name|hugePagesTotal
operator|*
name|hugePageSize
operator|)
operator|)
operator|*
literal|1024
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getVirtualMemorySize ()
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|()
block|{
return|return
name|getPhysicalMemorySize
argument_list|()
operator|+
operator|(
name|swapSize
operator|*
literal|1024
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getAvailablePhysicalMemorySize ()
specifier|public
name|long
name|getAvailablePhysicalMemorySize
parameter_list|()
block|{
name|readProcMemInfoFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|inactive
init|=
name|inactiveFileSize
operator|!=
operator|-
literal|1
condition|?
name|inactiveFileSize
else|:
name|inactiveSize
decl_stmt|;
return|return
operator|(
name|ramSizeFree
operator|+
name|inactive
operator|)
operator|*
literal|1024
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getAvailableVirtualMemorySize ()
specifier|public
name|long
name|getAvailableVirtualMemorySize
parameter_list|()
block|{
return|return
name|getAvailablePhysicalMemorySize
argument_list|()
operator|+
operator|(
name|swapSizeFree
operator|*
literal|1024
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNumProcessors ()
specifier|public
name|int
name|getNumProcessors
parameter_list|()
block|{
name|readProcCpuInfoFile
argument_list|()
expr_stmt|;
return|return
name|numProcessors
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNumCores ()
specifier|public
name|int
name|getNumCores
parameter_list|()
block|{
name|readProcCpuInfoFile
argument_list|()
expr_stmt|;
return|return
name|numCores
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCpuFrequency ()
specifier|public
name|long
name|getCpuFrequency
parameter_list|()
block|{
name|readProcCpuInfoFile
argument_list|()
expr_stmt|;
return|return
name|cpuFrequency
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
name|readProcStatFile
argument_list|()
expr_stmt|;
return|return
name|cpuTimeTracker
operator|.
name|getCumulativeCpuTime
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCpuUsagePercentage ()
specifier|public
name|float
name|getCpuUsagePercentage
parameter_list|()
block|{
name|readProcStatFile
argument_list|()
expr_stmt|;
name|float
name|overallCpuUsage
init|=
name|cpuTimeTracker
operator|.
name|getCpuTrackerUsagePercent
argument_list|()
decl_stmt|;
if|if
condition|(
name|overallCpuUsage
operator|!=
name|CpuTimeTracker
operator|.
name|UNAVAILABLE
condition|)
block|{
name|overallCpuUsage
operator|=
name|overallCpuUsage
operator|/
name|getNumProcessors
argument_list|()
expr_stmt|;
block|}
return|return
name|overallCpuUsage
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNumVCoresUsed ()
specifier|public
name|float
name|getNumVCoresUsed
parameter_list|()
block|{
name|readProcStatFile
argument_list|()
expr_stmt|;
name|float
name|overallVCoresUsage
init|=
name|cpuTimeTracker
operator|.
name|getCpuTrackerUsagePercent
argument_list|()
decl_stmt|;
if|if
condition|(
name|overallVCoresUsage
operator|!=
name|CpuTimeTracker
operator|.
name|UNAVAILABLE
condition|)
block|{
name|overallVCoresUsage
operator|=
name|overallVCoresUsage
operator|/
literal|100F
expr_stmt|;
block|}
return|return
name|overallVCoresUsage
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNetworkBytesRead ()
specifier|public
name|long
name|getNetworkBytesRead
parameter_list|()
block|{
name|readProcNetInfoFile
argument_list|()
expr_stmt|;
return|return
name|numNetBytesRead
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNetworkBytesWritten ()
specifier|public
name|long
name|getNetworkBytesWritten
parameter_list|()
block|{
name|readProcNetInfoFile
argument_list|()
expr_stmt|;
return|return
name|numNetBytesWritten
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageBytesRead ()
specifier|public
name|long
name|getStorageBytesRead
parameter_list|()
block|{
name|readProcDisksInfoFile
argument_list|()
expr_stmt|;
return|return
name|numDisksBytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageBytesWritten ()
specifier|public
name|long
name|getStorageBytesWritten
parameter_list|()
block|{
name|readProcDisksInfoFile
argument_list|()
expr_stmt|;
return|return
name|numDisksBytesWritten
return|;
block|}
comment|/**    * Test the {@link SysInfoLinux}.    *    * @param args - arguments to this calculator test    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|SysInfoLinux
name|plugin
init|=
operator|new
name|SysInfoLinux
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Physical memory Size (bytes) : "
operator|+
name|plugin
operator|.
name|getPhysicalMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total Virtual memory Size (bytes) : "
operator|+
name|plugin
operator|.
name|getVirtualMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available Physical memory Size (bytes) : "
operator|+
name|plugin
operator|.
name|getAvailablePhysicalMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total Available Virtual memory Size (bytes) : "
operator|+
name|plugin
operator|.
name|getAvailableVirtualMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of Processors : "
operator|+
name|plugin
operator|.
name|getNumProcessors
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CPU frequency (kHz) : "
operator|+
name|plugin
operator|.
name|getCpuFrequency
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cumulative CPU time (ms) : "
operator|+
name|plugin
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total network read (bytes) : "
operator|+
name|plugin
operator|.
name|getNetworkBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total network written (bytes) : "
operator|+
name|plugin
operator|.
name|getNetworkBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total storage read (bytes) : "
operator|+
name|plugin
operator|.
name|getStorageBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total storage written (bytes) : "
operator|+
name|plugin
operator|.
name|getStorageBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Sleep so we can compute the CPU usage
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CPU usage % : "
operator|+
name|plugin
operator|.
name|getCpuUsagePercentage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setReadCpuInfoFile (boolean readCpuInfoFileValue)
name|void
name|setReadCpuInfoFile
parameter_list|(
name|boolean
name|readCpuInfoFileValue
parameter_list|)
block|{
name|this
operator|.
name|readCpuInfoFile
operator|=
name|readCpuInfoFileValue
expr_stmt|;
block|}
DECL|method|getJiffyLengthInMillis ()
specifier|public
name|long
name|getJiffyLengthInMillis
parameter_list|()
block|{
return|return
name|this
operator|.
name|jiffyLengthInMillis
return|;
block|}
block|}
end_class

end_unit

