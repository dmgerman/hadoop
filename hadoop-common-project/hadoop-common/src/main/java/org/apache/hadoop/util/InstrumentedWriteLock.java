begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This is a wrap class of a<tt>WriteLock</tt>.  * It extends the class {@link InstrumentedLock}, and can be used to track  * whether a specific write lock is being held for too long and log  * warnings if so.  *  * The logged warnings are throttled so that logs are not spammed.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InstrumentedWriteLock
specifier|public
class|class
name|InstrumentedWriteLock
extends|extends
name|InstrumentedLock
block|{
DECL|method|InstrumentedWriteLock (String name, Log logger, ReentrantReadWriteLock readWriteLock, long minLoggingGapMs, long lockWarningThresholdMs)
specifier|public
name|InstrumentedWriteLock
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|logger
parameter_list|,
name|ReentrantReadWriteLock
name|readWriteLock
parameter_list|,
name|long
name|minLoggingGapMs
parameter_list|,
name|long
name|lockWarningThresholdMs
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
name|readWriteLock
argument_list|,
name|minLoggingGapMs
argument_list|,
name|lockWarningThresholdMs
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|InstrumentedWriteLock (String name, Log logger, ReentrantReadWriteLock readWriteLock, long minLoggingGapMs, long lockWarningThresholdMs, Timer clock)
name|InstrumentedWriteLock
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|logger
parameter_list|,
name|ReentrantReadWriteLock
name|readWriteLock
parameter_list|,
name|long
name|minLoggingGapMs
parameter_list|,
name|long
name|lockWarningThresholdMs
parameter_list|,
name|Timer
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|logger
argument_list|,
name|readWriteLock
operator|.
name|writeLock
argument_list|()
argument_list|,
name|minLoggingGapMs
argument_list|,
name|lockWarningThresholdMs
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

