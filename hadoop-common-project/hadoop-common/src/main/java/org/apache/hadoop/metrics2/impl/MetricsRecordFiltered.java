begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_class
DECL|class|MetricsRecordFiltered
class|class
name|MetricsRecordFiltered
extends|extends
name|AbstractMetricsRecord
block|{
DECL|field|delegate
specifier|private
specifier|final
name|MetricsRecord
name|delegate
decl_stmt|;
DECL|field|filter
specifier|private
specifier|final
name|MetricsFilter
name|filter
decl_stmt|;
DECL|method|MetricsRecordFiltered (MetricsRecord delegate, MetricsFilter filter)
name|MetricsRecordFiltered
parameter_list|(
name|MetricsRecord
name|delegate
parameter_list|,
name|MetricsFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|timestamp ()
annotation|@
name|Override
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|timestamp
argument_list|()
return|;
block|}
DECL|method|name ()
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|name
argument_list|()
return|;
block|}
DECL|method|description ()
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|description
argument_list|()
return|;
block|}
DECL|method|context ()
annotation|@
name|Override
specifier|public
name|String
name|context
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|context
argument_list|()
return|;
block|}
DECL|method|tags ()
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|tags
argument_list|()
return|;
block|}
DECL|method|metrics ()
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
parameter_list|()
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|AbstractMetric
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|AbstractMetric
argument_list|>
name|it
init|=
name|delegate
operator|.
name|metrics
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|AbstractMetric
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AbstractIterator
argument_list|<
name|AbstractMetric
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AbstractMetric
name|computeNext
parameter_list|()
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AbstractMetric
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|accepts
argument_list|(
name|next
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

