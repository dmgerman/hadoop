begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.log
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|MappingJsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ContainerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|helpers
operator|.
name|ISO8601DateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ThrowableInformation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * This offers a log layout for JSON, with some test entry points. It's purpose is  * to allow Log4J to generate events that are easy for other programs to parse, but which are somewhat  * human-readable.  *  * Some features.  *  *<ol>  *<li>Every event is a standalone JSON clause</li>  *<li>Time is published as a time_t event since 1/1/1970  *      -this is the fastest to generate.</li>  *<li>An ISO date is generated, but this is cached and will only be accurate to within a second</li>  *<li>the stack trace is included as an array</li>  *</ol>  *  * A simple log event will resemble the following  *<pre>  *     {"name":"test","time":1318429136789,"date":"2011-10-12 15:18:56,789","level":"INFO","thread":"main","message":"test message"}  *</pre>  *  * An event with an error will contain data similar to that below (which has been reformatted to be multi-line).  *  *<pre>  *     {  *     "name":"testException",  *     "time":1318429136789,  *     "date":"2011-10-12 15:18:56,789",  *     "level":"INFO",  *     "thread":"quoted\"",  *     "message":"new line\n and {}",  *     "exceptionclass":"java.net.NoRouteToHostException",  *     "stack":[  *         "java.net.NoRouteToHostException: that box caught fire 3 years ago",  *         "\tat org.apache.hadoop.log.TestLog4Json.testException(TestLog4Json.java:49)",  *         "\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",  *         "\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",  *         "\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",  *         "\tat java.lang.reflect.Method.invoke(Method.java:597)",  *         "\tat junit.framework.TestCase.runTest(TestCase.java:168)",  *         "\tat junit.framework.TestCase.runBare(TestCase.java:134)",  *         "\tat junit.framework.TestResult$1.protect(TestResult.java:110)",  *         "\tat junit.framework.TestResult.runProtected(TestResult.java:128)",  *         "\tat junit.framework.TestResult.run(TestResult.java:113)",  *         "\tat junit.framework.TestCase.run(TestCase.java:124)",  *         "\tat junit.framework.TestSuite.runTest(TestSuite.java:232)",  *         "\tat junit.framework.TestSuite.run(TestSuite.java:227)",  *         "\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)",  *         "\tat org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)",  *         "\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:120)",  *         "\tat org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:145)",  *         "\tat org.apache.maven.surefire.Surefire.run(Surefire.java:104)",  *         "\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",  *         "\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",  *         "\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",  *         "\tat java.lang.reflect.Method.invoke(Method.java:597)",  *         "\tat org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:290)",  *         "\tat org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1017)"  *         ]  *     }  *</pre>  */
end_comment

begin_class
DECL|class|Log4Json
specifier|public
class|class
name|Log4Json
extends|extends
name|Layout
block|{
comment|/**    * Jackson factories are thread safe when constructing parsers and generators.    * They are not thread safe in configure methods; if there is to be any    * configuration it must be done in a static intializer block.    */
DECL|field|factory
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|MappingJsonFactory
argument_list|()
decl_stmt|;
DECL|field|DATE
specifier|public
specifier|static
specifier|final
name|String
name|DATE
init|=
literal|"date"
decl_stmt|;
DECL|field|EXCEPTION_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|EXCEPTION_CLASS
init|=
literal|"exceptionclass"
decl_stmt|;
DECL|field|LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|LEVEL
init|=
literal|"level"
decl_stmt|;
DECL|field|MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"message"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|STACK
specifier|public
specifier|static
specifier|final
name|String
name|STACK
init|=
literal|"stack"
decl_stmt|;
DECL|field|THREAD
specifier|public
specifier|static
specifier|final
name|String
name|THREAD
init|=
literal|"thread"
decl_stmt|;
DECL|field|TIME
specifier|public
specifier|static
specifier|final
name|String
name|TIME
init|=
literal|"time"
decl_stmt|;
DECL|field|JSON_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|JSON_TYPE
init|=
literal|"application/json"
decl_stmt|;
DECL|field|dateFormat
specifier|private
specifier|final
name|DateFormat
name|dateFormat
decl_stmt|;
DECL|method|Log4Json ()
specifier|public
name|Log4Json
parameter_list|()
block|{
name|dateFormat
operator|=
operator|new
name|ISO8601DateFormat
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the mime type of JSON    */
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|JSON_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|format (LoggingEvent event)
specifier|public
name|String
name|format
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
try|try
block|{
return|return
name|toJson
argument_list|(
name|event
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//this really should not happen, and rather than throw an exception
comment|//which may hide the real problem, the log class is printed
comment|//in JSON format. The classname is used to ensure valid JSON is
comment|//returned without playing escaping games
return|return
literal|"{ \"logfailure\":\""
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
comment|/**    * Convert an event to JSON    *    * @param event the event -must not be null    * @return a string value    * @throws IOException on problems generating the JSON    */
DECL|method|toJson (LoggingEvent event)
specifier|public
name|String
name|toJson
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|writer
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert an event to JSON    *    * @param writer the destination writer    * @param event the event -must not be null    * @return the writer    * @throws IOException on problems generating the JSON    */
DECL|method|toJson (final Writer writer, final LoggingEvent event)
specifier|public
name|Writer
name|toJson
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|LoggingEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|ThrowableInformation
name|ti
init|=
name|event
operator|.
name|getThrowableInformation
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|writer
argument_list|,
name|event
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|event
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getThreadName
argument_list|()
argument_list|,
name|event
operator|.
name|getRenderedMessage
argument_list|()
argument_list|,
name|ti
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
comment|/**    * Build a JSON entry from the parameters. This is public for testing.    *    * @param writer destination    * @param loggerName logger name    * @param timeStamp time_t value    * @param level level string    * @param threadName name of the thread    * @param message rendered message    * @param ti nullable thrown information    * @return the writer    * @throws IOException on any problem    */
DECL|method|toJson (final Writer writer, final String loggerName, final long timeStamp, final String level, final String threadName, final String message, final ThrowableInformation ti)
specifier|public
name|Writer
name|toJson
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|,
specifier|final
name|String
name|loggerName
parameter_list|,
specifier|final
name|long
name|timeStamp
parameter_list|,
specifier|final
name|String
name|level
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|ThrowableInformation
name|ti
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonGenerator
name|json
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|json
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|NAME
argument_list|,
name|loggerName
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|TIME
argument_list|,
name|timeStamp
argument_list|)
expr_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|timeStamp
argument_list|)
decl_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|DATE
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|LEVEL
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|THREAD
argument_list|,
name|threadName
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|MESSAGE
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ti
operator|!=
literal|null
condition|)
block|{
comment|//there is some throwable info, but if the log event has been sent over the wire,
comment|//there may not be a throwable inside it, just a summary.
name|Throwable
name|thrown
init|=
name|ti
operator|.
name|getThrowable
argument_list|()
decl_stmt|;
name|String
name|eclass
init|=
operator|(
name|thrown
operator|!=
literal|null
operator|)
condition|?
name|thrown
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
decl_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|EXCEPTION_CLASS
argument_list|,
name|eclass
argument_list|)
expr_stmt|;
name|String
index|[]
name|stackTrace
init|=
name|ti
operator|.
name|getThrowableStrRep
argument_list|()
decl_stmt|;
name|json
operator|.
name|writeArrayFieldStart
argument_list|(
name|STACK
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|row
range|:
name|stackTrace
control|)
block|{
name|json
operator|.
name|writeString
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|flush
argument_list|()
expr_stmt|;
name|json
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|writer
return|;
block|}
comment|/**    * This appender does not ignore throwables    *    * @return false, always    */
annotation|@
name|Override
DECL|method|ignoresThrowable ()
specifier|public
name|boolean
name|ignoresThrowable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Do nothing    */
annotation|@
name|Override
DECL|method|activateOptions ()
specifier|public
name|void
name|activateOptions
parameter_list|()
block|{   }
comment|/**    * For use in tests    *    * @param json incoming JSON to parse    * @return a node tree    * @throws IOException on any parsing problems    */
DECL|method|parse (String json)
specifier|public
specifier|static
name|ContainerNode
name|parse
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|JsonNode
name|jsonNode
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|jsonNode
operator|instanceof
name|ContainerNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong JSON data: "
operator|+
name|json
argument_list|)
throw|;
block|}
return|return
operator|(
name|ContainerNode
operator|)
name|jsonNode
return|;
block|}
block|}
end_class

end_unit

