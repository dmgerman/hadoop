begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A low memory footprint {@link GSet} implementation,  * which uses an array for storing the elements  * and linked lists for collision resolution.  *  * No rehash will be performed.  * Therefore, the internal array will never be resized.  *  * This class does not support null element.  *  * This class is not thread safe.  *  * @param<K> Key type for looking up the elements  * @param<E> Element type, which must be  *       (1) a subclass of K, and  *       (2) implementing {@link LinkedElement} interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|LightWeightGSet
specifier|public
class|class
name|LightWeightGSet
parameter_list|<
name|K
parameter_list|,
name|E
extends|extends
name|K
parameter_list|>
implements|implements
name|GSet
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
block|{
comment|/**    * Elements of {@link LightWeightGSet}.    */
DECL|interface|LinkedElement
specifier|public
interface|interface
name|LinkedElement
block|{
comment|/** Set the next element. */
DECL|method|setNext (LinkedElement next)
name|void
name|setNext
parameter_list|(
name|LinkedElement
name|next
parameter_list|)
function_decl|;
comment|/** Get the next element. */
DECL|method|getNext ()
name|LinkedElement
name|getNext
parameter_list|()
function_decl|;
block|}
DECL|field|MAX_ARRAY_LENGTH
specifier|static
specifier|final
name|int
name|MAX_ARRAY_LENGTH
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
comment|//prevent int overflow problem
DECL|field|MIN_ARRAY_LENGTH
specifier|static
specifier|final
name|int
name|MIN_ARRAY_LENGTH
init|=
literal|1
decl_stmt|;
comment|/**    * An internal array of entries, which are the rows of the hash table.    * The size must be a power of two.    */
DECL|field|entries
specifier|protected
name|LinkedElement
index|[]
name|entries
decl_stmt|;
comment|/** A mask for computing the array index from the hash value of an element. */
DECL|field|hash_mask
specifier|protected
name|int
name|hash_mask
decl_stmt|;
comment|/** The size of the set (not the entry array). */
DECL|field|size
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/** Modification version for fail-fast.    * @see ConcurrentModificationException    */
DECL|field|modification
specifier|protected
name|int
name|modification
init|=
literal|0
decl_stmt|;
DECL|field|values
specifier|private
name|Collection
argument_list|<
name|E
argument_list|>
name|values
decl_stmt|;
DECL|method|LightWeightGSet ()
specifier|protected
name|LightWeightGSet
parameter_list|()
block|{   }
comment|/**    * @param recommended_length Recommended size of the internal array.    */
DECL|method|LightWeightGSet (final int recommended_length)
specifier|public
name|LightWeightGSet
parameter_list|(
specifier|final
name|int
name|recommended_length
parameter_list|)
block|{
specifier|final
name|int
name|actual
init|=
name|actualArrayLength
argument_list|(
name|recommended_length
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"recommended="
operator|+
name|recommended_length
operator|+
literal|", actual="
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|actual
index|]
expr_stmt|;
name|hash_mask
operator|=
name|entries
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
comment|//compute actual length
DECL|method|actualArrayLength (int recommended)
specifier|protected
specifier|static
name|int
name|actualArrayLength
parameter_list|(
name|int
name|recommended
parameter_list|)
block|{
if|if
condition|(
name|recommended
operator|>
name|MAX_ARRAY_LENGTH
condition|)
block|{
return|return
name|MAX_ARRAY_LENGTH
return|;
block|}
elseif|else
if|if
condition|(
name|recommended
operator|<
name|MIN_ARRAY_LENGTH
condition|)
block|{
return|return
name|MIN_ARRAY_LENGTH
return|;
block|}
else|else
block|{
specifier|final
name|int
name|a
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|recommended
argument_list|)
decl_stmt|;
return|return
name|a
operator|==
name|recommended
condition|?
name|a
else|:
name|a
operator|<<
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|getIndex (final K key)
specifier|protected
name|int
name|getIndex
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|hashCode
argument_list|()
operator|&
name|hash_mask
return|;
block|}
DECL|method|convert (final LinkedElement e)
specifier|protected
name|E
name|convert
parameter_list|(
specifier|final
name|LinkedElement
name|e
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|E
name|r
init|=
operator|(
name|E
operator|)
name|e
decl_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
DECL|method|get (final K key)
specifier|public
name|E
name|get
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
comment|//validate key
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"key == null"
argument_list|)
throw|;
block|}
comment|//find element
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|LinkedElement
name|e
init|=
name|entries
index|[
name|index
index|]
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|getNext
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|convert
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|//element not found
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|contains (final K key)
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|put (final E element)
specifier|public
name|E
name|put
parameter_list|(
specifier|final
name|E
name|element
parameter_list|)
block|{
comment|// validate element
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
name|LinkedElement
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|e
operator|=
operator|(
name|LinkedElement
operator|)
name|element
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"!(element instanceof LinkedElement), element.getClass()="
operator|+
name|element
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|// find index
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|element
argument_list|)
decl_stmt|;
comment|// remove if it already exists
specifier|final
name|E
name|existing
init|=
name|remove
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
decl_stmt|;
comment|// insert the element to the head of the linked list
name|modification
operator|++
expr_stmt|;
name|size
operator|++
expr_stmt|;
name|e
operator|.
name|setNext
argument_list|(
name|entries
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|e
expr_stmt|;
return|return
name|existing
return|;
block|}
comment|/**    * Remove the element corresponding to the key,    * given key.hashCode() == index.    *    * @return If such element exists, return it.    *         Otherwise, return null.    */
DECL|method|remove (final int index, final K key)
specifier|protected
name|E
name|remove
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|K
name|key
parameter_list|)
block|{
if|if
condition|(
name|entries
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|entries
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//remove the head of the linked list
name|modification
operator|++
expr_stmt|;
name|size
operator|--
expr_stmt|;
specifier|final
name|LinkedElement
name|e
init|=
name|entries
index|[
name|index
index|]
decl_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|e
operator|.
name|getNext
argument_list|()
expr_stmt|;
name|e
operator|.
name|setNext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|convert
argument_list|(
name|e
argument_list|)
return|;
block|}
else|else
block|{
comment|//head != null and key is not equal to head
comment|//search the element
name|LinkedElement
name|prev
init|=
name|entries
index|[
name|index
index|]
decl_stmt|;
for|for
control|(
name|LinkedElement
name|curr
init|=
name|prev
operator|.
name|getNext
argument_list|()
init|;
name|curr
operator|!=
literal|null
condition|;
control|)
block|{
if|if
condition|(
name|curr
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|//found the element, remove it
name|modification
operator|++
expr_stmt|;
name|size
operator|--
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|curr
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|curr
operator|.
name|setNext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|convert
argument_list|(
name|curr
argument_list|)
return|;
block|}
else|else
block|{
name|prev
operator|=
name|curr
expr_stmt|;
name|curr
operator|=
name|curr
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
block|}
comment|//element not found
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (final K key)
specifier|public
name|E
name|remove
parameter_list|(
specifier|final
name|K
name|key
parameter_list|)
block|{
comment|//validate key
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"key == null"
argument_list|)
throw|;
block|}
return|return
name|remove
argument_list|(
name|getIndex
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|E
argument_list|>
name|values
parameter_list|()
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|Values
argument_list|()
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
DECL|class|Values
specifier|private
specifier|final
class|class
name|Values
extends|extends
name|AbstractCollection
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|LightWeightGSet
operator|.
name|this
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|contains (Object o)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|LightWeightGSet
operator|.
name|this
operator|.
name|contains
argument_list|(
operator|(
name|K
operator|)
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|LightWeightGSet
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SetIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"(size="
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|", %08x"
argument_list|,
name|hash_mask
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", modification="
argument_list|)
operator|.
name|append
argument_list|(
name|modification
argument_list|)
operator|.
name|append
argument_list|(
literal|", entries.length="
argument_list|)
operator|.
name|append
argument_list|(
name|entries
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Print detailed information of this object. */
DECL|method|printDetails (final PrintStream out)
specifier|public
name|void
name|printDetails
parameter_list|(
specifier|final
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|this
operator|+
literal|", entries = ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|LinkedElement
name|e
init|=
name|entries
index|[
name|i
index|]
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\n  "
operator|+
name|i
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|e
operator|=
name|e
operator|.
name|getNext
argument_list|()
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|getNext
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" -> "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\n]"
argument_list|)
expr_stmt|;
block|}
DECL|class|SetIterator
specifier|public
class|class
name|SetIterator
implements|implements
name|Iterator
argument_list|<
name|E
argument_list|>
block|{
comment|/** The starting modification for fail-fast. */
DECL|field|iterModification
specifier|private
name|int
name|iterModification
init|=
name|modification
decl_stmt|;
comment|/** The current index of the entry array. */
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|cur
specifier|private
name|LinkedElement
name|cur
init|=
literal|null
decl_stmt|;
DECL|field|next
specifier|private
name|LinkedElement
name|next
init|=
name|nextNonemptyEntry
argument_list|()
decl_stmt|;
DECL|field|trackModification
specifier|private
name|boolean
name|trackModification
init|=
literal|true
decl_stmt|;
comment|/** Find the next nonempty entry starting at (index + 1). */
DECL|method|nextNonemptyEntry ()
specifier|private
name|LinkedElement
name|nextNonemptyEntry
parameter_list|()
block|{
for|for
control|(
name|index
operator|++
init|;
name|index
operator|<
name|entries
operator|.
name|length
operator|&&
name|entries
index|[
name|index
index|]
operator|==
literal|null
condition|;
name|index
operator|++
control|)
empty_stmt|;
return|return
name|index
operator|<
name|entries
operator|.
name|length
condition|?
name|entries
index|[
name|index
index|]
else|:
literal|null
return|;
block|}
DECL|method|ensureNext ()
specifier|private
name|void
name|ensureNext
parameter_list|()
block|{
if|if
condition|(
name|trackModification
operator|&&
name|modification
operator|!=
name|iterModification
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|(
literal|"modification="
operator|+
name|modification
operator|+
literal|" != iterModification = "
operator|+
name|iterModification
argument_list|)
throw|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|next
operator|=
name|cur
operator|.
name|getNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|nextNonemptyEntry
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|ensureNext
argument_list|()
expr_stmt|;
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|E
name|next
parameter_list|()
block|{
name|ensureNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"There are no more elements"
argument_list|)
throw|;
block|}
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|convert
argument_list|(
name|cur
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|ensureNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"There is no current element "
operator|+
literal|"to remove"
argument_list|)
throw|;
block|}
name|LightWeightGSet
operator|.
name|this
operator|.
name|remove
argument_list|(
operator|(
name|K
operator|)
name|cur
argument_list|)
expr_stmt|;
name|iterModification
operator|++
expr_stmt|;
name|cur
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|setTrackModification (boolean trackModification)
specifier|public
name|void
name|setTrackModification
parameter_list|(
name|boolean
name|trackModification
parameter_list|)
block|{
name|this
operator|.
name|trackModification
operator|=
name|trackModification
expr_stmt|;
block|}
block|}
comment|/**    * Let t = percentage of max memory.    * Let e = round(log_2 t).    * Then, we choose capacity = 2^e/(size of reference),    * unless it is outside the close interval [1, 2^30].    */
DECL|method|computeCapacity (double percentage, String mapName)
specifier|public
specifier|static
name|int
name|computeCapacity
parameter_list|(
name|double
name|percentage
parameter_list|,
name|String
name|mapName
parameter_list|)
block|{
return|return
name|computeCapacity
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|,
name|percentage
argument_list|,
name|mapName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|computeCapacity (long maxMemory, double percentage, String mapName)
specifier|static
name|int
name|computeCapacity
parameter_list|(
name|long
name|maxMemory
parameter_list|,
name|double
name|percentage
parameter_list|,
name|String
name|mapName
parameter_list|)
block|{
if|if
condition|(
name|percentage
operator|>
literal|100.0
operator|||
name|percentage
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Percentage "
operator|+
name|percentage
operator|+
literal|" must be greater than or equal to 0 "
operator|+
literal|" and less than or equal to 100"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxMemory
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Memory "
operator|+
name|maxMemory
operator|+
literal|" must be greater than or equal to 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|percentage
operator|==
literal|0.0
operator|||
name|maxMemory
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|//VM detection
comment|//See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection
specifier|final
name|String
name|vmBit
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.arch.data.model"
argument_list|)
decl_stmt|;
comment|//Percentage of max memory
specifier|final
name|double
name|percentDivisor
init|=
literal|100.0
operator|/
name|percentage
decl_stmt|;
specifier|final
name|double
name|percentMemory
init|=
name|maxMemory
operator|/
name|percentDivisor
decl_stmt|;
comment|//compute capacity
specifier|final
name|int
name|e1
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|percentMemory
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2.0
argument_list|)
operator|+
literal|0.5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|e2
init|=
name|e1
operator|-
operator|(
literal|"32"
operator|.
name|equals
argument_list|(
name|vmBit
argument_list|)
condition|?
literal|2
else|:
literal|3
operator|)
decl_stmt|;
specifier|final
name|int
name|exponent
init|=
name|e2
operator|<
literal|0
condition|?
literal|0
else|:
name|e2
operator|>
literal|30
condition|?
literal|30
else|:
name|e2
decl_stmt|;
specifier|final
name|int
name|c
init|=
literal|1
operator|<<
name|exponent
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Computing capacity for map "
operator|+
name|mapName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"VM type       = "
operator|+
name|vmBit
operator|+
literal|"-bit"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|percentage
operator|+
literal|"% max memory "
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|maxMemory
argument_list|,
literal|"B"
argument_list|,
literal|1
argument_list|)
operator|+
literal|" = "
operator|+
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
operator|(
name|long
operator|)
name|percentMemory
argument_list|,
literal|"B"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"capacity      = 2^"
operator|+
name|exponent
operator|+
literal|" = "
operator|+
name|c
operator|+
literal|" entries"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|modification
operator|++
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|entries
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_class

end_unit

