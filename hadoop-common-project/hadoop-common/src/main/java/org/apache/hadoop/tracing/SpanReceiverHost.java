begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|SpanReceiverInfo
operator|.
name|ConfigurationPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|SpanReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_comment
comment|/**  * This class provides functions for reading the names of SpanReceivers from  * the Hadoop configuration, adding those SpanReceivers to the Tracer,  * and closing those SpanReceivers when appropriate.  * This class does nothing If no SpanReceiver is configured.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SpanReceiverHost
specifier|public
class|class
name|SpanReceiverHost
implements|implements
name|TraceAdminProtocol
block|{
DECL|field|SPAN_RECEIVERS_CONF_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SPAN_RECEIVERS_CONF_KEY
init|=
literal|"hadoop.trace.spanreceiver.classes"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SpanReceiverHost
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|receivers
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|SpanReceiver
argument_list|>
name|receivers
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|SpanReceiver
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|highestId
specifier|private
name|long
name|highestId
init|=
literal|1
decl_stmt|;
DECL|enum|SingletonHolder
specifier|private
specifier|static
enum|enum
name|SingletonHolder
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|lock
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|host
name|SpanReceiverHost
name|host
init|=
literal|null
decl_stmt|;
block|}
DECL|method|getInstance (Configuration conf)
specifier|public
specifier|static
name|SpanReceiverHost
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
operator|!=
literal|null
condition|)
block|{
return|return
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
return|;
block|}
synchronized|synchronized
init|(
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|lock
init|)
block|{
if|if
condition|(
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
operator|!=
literal|null
condition|)
block|{
return|return
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
return|;
block|}
name|SpanReceiverHost
name|host
init|=
operator|new
name|SpanReceiverHost
argument_list|()
decl_stmt|;
name|host
operator|.
name|loadSpanReceivers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
operator|.
name|closeReceivers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|SingletonHolder
operator|.
name|INSTANCE
operator|.
name|host
return|;
block|}
block|}
DECL|field|EMPTY
specifier|private
specifier|static
name|List
argument_list|<
name|ConfigurationPair
argument_list|>
name|EMPTY
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|/**    * Reads the names of classes specified in the    * "hadoop.trace.spanreceiver.classes" property and instantiates and registers    * them with the Tracer as SpanReceiver's.    *    * The nullary constructor is called during construction, but if the classes    * specified implement the Configurable interface, setConfiguration() will be    * called on them. This allows SpanReceivers to use values from the Hadoop    * configuration.    */
DECL|method|loadSpanReceivers (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|loadSpanReceivers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|config
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|receiverNames
init|=
name|config
operator|.
name|getTrimmedStrings
argument_list|(
name|SPAN_RECEIVERS_CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|receiverNames
operator|==
literal|null
operator|||
name|receiverNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|className
range|:
name|receiverNames
control|)
block|{
name|className
operator|=
name|className
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|SpanReceiver
name|rcvr
init|=
name|loadInstance
argument_list|(
name|className
argument_list|,
name|EMPTY
argument_list|)
decl_stmt|;
name|Trace
operator|.
name|addReceiver
argument_list|(
name|rcvr
argument_list|)
expr_stmt|;
name|receivers
operator|.
name|put
argument_list|(
name|highestId
operator|++
argument_list|,
name|rcvr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SpanReceiver "
operator|+
name|className
operator|+
literal|" was loaded successfully."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load SpanReceiver"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadInstance (String className, List<ConfigurationPair> extraConfig)
specifier|private
specifier|synchronized
name|SpanReceiver
name|loadInstance
parameter_list|(
name|String
name|className
parameter_list|,
name|List
argument_list|<
name|ConfigurationPair
argument_list|>
name|extraConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
init|=
literal|null
decl_stmt|;
name|SpanReceiver
name|impl
decl_stmt|;
try|try
block|{
name|implClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|implClass
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|impl
operator|=
operator|(
name|SpanReceiver
operator|)
name|o
expr_stmt|;
name|impl
operator|.
name|configure
argument_list|(
name|wrapHadoopConf
argument_list|(
name|config
argument_list|,
name|extraConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" does not implement SpanReceiver."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" cannot be found."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got SecurityException while loading "
operator|+
literal|"SpanReceiver "
operator|+
name|className
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got IllegalArgumentException while loading "
operator|+
literal|"SpanReceiver "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got RuntimeException while loading "
operator|+
literal|"SpanReceiver "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|impl
return|;
block|}
DECL|method|wrapHadoopConf (final Configuration conf, List<ConfigurationPair> extraConfig)
specifier|private
specifier|static
name|HTraceConfiguration
name|wrapHadoopConf
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ConfigurationPair
argument_list|>
name|extraConfig
parameter_list|)
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationPair
name|pair
range|:
name|extraConfig
control|)
block|{
name|extraMap
operator|.
name|put
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HTraceConfiguration
argument_list|()
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTRACE_CONF_PREFIX
init|=
literal|"hadoop."
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|extraMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|extraMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|conf
operator|.
name|get
argument_list|(
name|HTRACE_CONF_PREFIX
operator|+
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|extraMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|extraMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|conf
operator|.
name|get
argument_list|(
name|HTRACE_CONF_PREFIX
operator|+
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Calls close() on all SpanReceivers created by this SpanReceiverHost.    */
DECL|method|closeReceivers ()
specifier|public
specifier|synchronized
name|void
name|closeReceivers
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|closed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|SpanReceiver
name|rcvr
range|:
name|receivers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|rcvr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close SpanReceiver correctly: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|receivers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|listSpanReceivers ()
specifier|public
specifier|synchronized
name|SpanReceiverInfo
index|[]
name|listSpanReceivers
parameter_list|()
throws|throws
name|IOException
block|{
name|SpanReceiverInfo
name|info
index|[]
init|=
operator|new
name|SpanReceiverInfo
index|[
name|receivers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|SpanReceiver
argument_list|>
name|entry
range|:
name|receivers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|info
index|[
name|i
index|]
operator|=
operator|new
name|SpanReceiverInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|addSpanReceiver (SpanReceiverInfo info)
specifier|public
specifier|synchronized
name|long
name|addSpanReceiver
parameter_list|(
name|SpanReceiverInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|configStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ConfigurationPair
name|pair
range|:
name|info
operator|.
name|configPairs
control|)
block|{
name|configStringBuilder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
name|SpanReceiver
name|rcvr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rcvr
operator|=
name|loadInstance
argument_list|(
name|info
operator|.
name|getClassName
argument_list|()
argument_list|,
name|info
operator|.
name|configPairs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to add SpanReceiver "
operator|+
name|info
operator|.
name|getClassName
argument_list|()
operator|+
literal|" with configuration "
operator|+
name|configStringBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to add SpanReceiver "
operator|+
name|info
operator|.
name|getClassName
argument_list|()
operator|+
literal|" with configuration "
operator|+
name|configStringBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Trace
operator|.
name|addReceiver
argument_list|(
name|rcvr
argument_list|)
expr_stmt|;
name|long
name|newId
init|=
name|highestId
operator|++
decl_stmt|;
name|receivers
operator|.
name|put
argument_list|(
name|newId
argument_list|,
name|rcvr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully added SpanReceiver "
operator|+
name|info
operator|.
name|getClassName
argument_list|()
operator|+
literal|" with configuration "
operator|+
name|configStringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newId
return|;
block|}
DECL|method|removeSpanReceiver (long spanReceiverId)
specifier|public
specifier|synchronized
name|void
name|removeSpanReceiver
parameter_list|(
name|long
name|spanReceiverId
parameter_list|)
throws|throws
name|IOException
block|{
name|SpanReceiver
name|rcvr
init|=
name|receivers
operator|.
name|remove
argument_list|(
name|spanReceiverId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rcvr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no span receiver with id "
operator|+
name|spanReceiverId
argument_list|)
throw|;
block|}
name|Trace
operator|.
name|removeReceiver
argument_list|(
name|rcvr
argument_list|)
expr_stmt|;
name|rcvr
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully removed SpanReceiver "
operator|+
name|spanReceiverId
operator|+
literal|" with class "
operator|+
name|rcvr
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

