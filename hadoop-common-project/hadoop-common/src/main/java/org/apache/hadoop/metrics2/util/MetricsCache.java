begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_comment
comment|/**  * A metrics cache for sinks that don't support sparse updates.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MetricsCache
specifier|public
class|class
name|MetricsCache
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_RECS_PER_NAME_DEFAULT
specifier|static
specifier|final
name|int
name|MAX_RECS_PER_NAME_DEFAULT
init|=
literal|1000
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordCache
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|maxRecsPerName
specifier|private
specifier|final
name|int
name|maxRecsPerName
decl_stmt|;
DECL|class|RecordCache
class|class
name|RecordCache
extends|extends
name|LinkedHashMap
argument_list|<
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
argument_list|,
name|Record
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|gotOverflow
specifier|private
name|boolean
name|gotOverflow
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|removeEldestEntry (Map.Entry<Collection<MetricsTag>, Record> eldest)
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
argument_list|,
name|Record
argument_list|>
name|eldest
parameter_list|)
block|{
name|boolean
name|overflow
init|=
name|size
argument_list|()
operator|>
name|maxRecsPerName
decl_stmt|;
if|if
condition|(
name|overflow
operator|&&
operator|!
name|gotOverflow
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metrics cache overflow at "
operator|+
name|size
argument_list|()
operator|+
literal|" for "
operator|+
name|eldest
argument_list|)
expr_stmt|;
name|gotOverflow
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|overflow
return|;
block|}
block|}
comment|/**    * Cached record    */
DECL|class|Record
specifier|public
specifier|static
class|class
name|Record
block|{
DECL|field|tags
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tags
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|metrics
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractMetric
argument_list|>
name|metrics
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**      * Lookup a tag value      * @param key name of the tag      * @return the tag value      */
DECL|method|getTag (String key)
specifier|public
name|String
name|getTag
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|tags
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Lookup a metric value      * @param key name of the metric      * @return the metric value      */
DECL|method|getMetric (String key)
specifier|public
name|Number
name|getMetric
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|AbstractMetric
name|metric
init|=
name|metrics
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|metric
operator|!=
literal|null
condition|?
name|metric
operator|.
name|value
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Lookup a metric instance      * @param key name of the metric      * @return the metric instance      */
DECL|method|getMetricInstance (String key)
specifier|public
name|AbstractMetric
name|getMetricInstance
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|metrics
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * @return the entry set of the tags of the record      */
DECL|method|tags ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|tags
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**      * @deprecated use metricsEntrySet() instead      * @return entry set of metrics      */
annotation|@
name|Deprecated
DECL|method|metrics ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
argument_list|>
name|metrics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AbstractMetric
argument_list|>
name|mapEntry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|mapEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapEntry
operator|.
name|getValue
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|map
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**      * @return entry set of metrics      */
DECL|method|metricsEntrySet ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AbstractMetric
argument_list|>
argument_list|>
name|metricsEntrySet
parameter_list|()
block|{
return|return
name|metrics
operator|.
name|entrySet
argument_list|()
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringJoiner
argument_list|(
literal|", "
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{"
argument_list|,
literal|"}"
argument_list|)
operator|.
name|add
argument_list|(
literal|"tags="
operator|+
name|tags
argument_list|)
operator|.
name|add
argument_list|(
literal|"metrics="
operator|+
name|metrics
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|MetricsCache ()
specifier|public
name|MetricsCache
parameter_list|()
block|{
name|this
argument_list|(
name|MAX_RECS_PER_NAME_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a metrics cache    * @param maxRecsPerName  limit of the number records per record name    */
DECL|method|MetricsCache (int maxRecsPerName)
specifier|public
name|MetricsCache
parameter_list|(
name|int
name|maxRecsPerName
parameter_list|)
block|{
name|this
operator|.
name|maxRecsPerName
operator|=
name|maxRecsPerName
expr_stmt|;
block|}
comment|/**    * Update the cache and return the current cached record    * @param mr the update record    * @param includingTags cache tag values (for later lookup by name) if true    * @return the updated cache record    */
DECL|method|update (MetricsRecord mr, boolean includingTags)
specifier|public
name|Record
name|update
parameter_list|(
name|MetricsRecord
name|mr
parameter_list|,
name|boolean
name|includingTags
parameter_list|)
block|{
name|String
name|name
init|=
name|mr
operator|.
name|name
argument_list|()
decl_stmt|;
name|RecordCache
name|recordCache
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordCache
operator|==
literal|null
condition|)
block|{
name|recordCache
operator|=
operator|new
name|RecordCache
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|recordCache
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
name|tags
init|=
name|mr
operator|.
name|tags
argument_list|()
decl_stmt|;
name|Record
name|record
init|=
name|recordCache
operator|.
name|get
argument_list|(
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
name|record
operator|=
operator|new
name|Record
argument_list|()
expr_stmt|;
name|recordCache
operator|.
name|put
argument_list|(
name|tags
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AbstractMetric
name|m
range|:
name|mr
operator|.
name|metrics
argument_list|()
control|)
block|{
name|record
operator|.
name|metrics
operator|.
name|put
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includingTags
condition|)
block|{
comment|// mostly for some sinks that include tags as part of a dense schema
for|for
control|(
name|MetricsTag
name|t
range|:
name|mr
operator|.
name|tags
argument_list|()
control|)
block|{
name|record
operator|.
name|tags
operator|.
name|put
argument_list|(
name|t
operator|.
name|name
argument_list|()
argument_list|,
name|t
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|record
return|;
block|}
comment|/**    * Update the cache and return the current cache record    * @param mr the update record    * @return the updated cache record    */
DECL|method|update (MetricsRecord mr)
specifier|public
name|Record
name|update
parameter_list|(
name|MetricsRecord
name|mr
parameter_list|)
block|{
return|return
name|update
argument_list|(
name|mr
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the cached record    * @param name of the record    * @param tags of the record    * @return the cached record or null    */
DECL|method|get (String name, Collection<MetricsTag> tags)
specifier|public
name|Record
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|Collection
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|)
block|{
name|RecordCache
name|rc
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|rc
operator|.
name|get
argument_list|(
name|tags
argument_list|)
return|;
block|}
block|}
end_class

end_unit

