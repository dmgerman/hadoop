begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathIsDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathNotFoundException
import|;
end_import

begin_comment
comment|/**  * Encapsulates a Path (path), its FileStatus (stat), and its FileSystem (fs).  * The stat field will be null if the path does not exist.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PathData
specifier|public
class|class
name|PathData
block|{
DECL|field|uri
specifier|protected
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|fs
specifier|public
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|path
specifier|public
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|stat
specifier|public
name|FileStatus
name|stat
decl_stmt|;
DECL|field|exists
specifier|public
name|boolean
name|exists
decl_stmt|;
comment|/**    * Creates an object to wrap the given parameters as fields.  The string    * used to create the path will be recorded since the Path object does not    * return exactly the same string used to initialize it    * @param pathString a string for a path    * @param conf the configuration file    * @throws IOException if anything goes wrong...    */
DECL|method|PathData (String pathString, Configuration conf)
specifier|public
name|PathData
parameter_list|(
name|String
name|pathString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|pathString
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|,
name|pathString
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to wrap the given parameters as fields.  The string    * used to create the path will be recorded since the Path object does not    * return exactly the same string used to initialize it    * @param localPath a local File    * @param conf the configuration file    * @throws IOException if anything goes wrong...    */
DECL|method|PathData (File localPath, Configuration conf)
specifier|public
name|PathData
parameter_list|(
name|File
name|localPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|localPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Looks up the file status for a path.  If the path    * doesn't exist, then the status will be null    * @param fs the FileSystem for the path    * @param pathString a string for a path     * @throws IOException if anything goes wrong    */
DECL|method|PathData (FileSystem fs, String pathString)
specifier|private
name|PathData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|pathString
argument_list|,
name|lookupStat
argument_list|(
name|fs
argument_list|,
name|pathString
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an object to wrap the given parameters as fields.  The string    * used to create the path will be recorded since the Path object does not    * return exactly the same string used to initialize it.    * @param fs the FileSystem    * @param pathString a String of the path    * @param stat the FileStatus (may be null if the path doesn't exist)    */
DECL|method|PathData (FileSystem fs, String pathString, FileStatus stat)
specifier|private
name|PathData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|pathString
parameter_list|,
name|FileStatus
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|stringToUri
argument_list|(
name|pathString
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|setStat
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
comment|// need a static method for the ctor above
comment|/**    * Get the FileStatus info    * @param ignoreFNF if true, stat will be null if the path doesn't exist    * @return FileStatus for the given path    * @throws IOException if anything goes wrong    */
specifier|private
specifier|static
DECL|method|lookupStat (FileSystem fs, String pathString, boolean ignoreFNF)
name|FileStatus
name|lookupStat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|pathString
parameter_list|,
name|boolean
name|ignoreFNF
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreFNF
condition|)
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|pathString
argument_list|)
throw|;
block|}
comment|// TODO: should consider wrapping other exceptions into Path*Exceptions
return|return
name|status
return|;
block|}
DECL|method|setStat (FileStatus stat)
specifier|private
name|void
name|setStat
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
block|{
name|this
operator|.
name|stat
operator|=
name|stat
expr_stmt|;
name|exists
operator|=
operator|(
name|stat
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
comment|/**    * Updates the paths's file status    * @return the updated FileStatus    * @throws IOException if anything goes wrong...    */
DECL|method|refreshStatus ()
specifier|public
name|FileStatus
name|refreshStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|lookupStat
argument_list|(
name|fs
argument_list|,
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// always set the status.  the caller must get the correct result
comment|// if it catches the exception and later interrogates the status
name|setStat
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
DECL|enum|FileTypeRequirement
specifier|protected
enum|enum
name|FileTypeRequirement
block|{
DECL|enumConstant|SHOULD_NOT_BE_DIRECTORY
DECL|enumConstant|SHOULD_BE_DIRECTORY
name|SHOULD_NOT_BE_DIRECTORY
block|,
name|SHOULD_BE_DIRECTORY
block|}
empty_stmt|;
comment|/**    * Ensure that the file exists and if it is or is not a directory    * @param typeRequirement Set it to the desired requirement.    * @throws PathIOException if file doesn't exist or the type does not match    * what was specified in typeRequirement.    */
DECL|method|checkIfExists (FileTypeRequirement typeRequirement)
specifier|private
name|void
name|checkIfExists
parameter_list|(
name|FileTypeRequirement
name|typeRequirement
parameter_list|)
throws|throws
name|PathIOException
block|{
if|if
condition|(
operator|!
name|exists
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|typeRequirement
operator|==
name|FileTypeRequirement
operator|.
name|SHOULD_BE_DIRECTORY
operator|)
operator|&&
operator|!
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|toString
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|typeRequirement
operator|==
name|FileTypeRequirement
operator|.
name|SHOULD_NOT_BE_DIRECTORY
operator|)
operator|&&
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Return the corresponding crc data for a file.  Avoids exposing the fs    * contortions to the caller.      * @return PathData of the crc file    * @throws IOException is anything goes wrong    */
DECL|method|getChecksumFile ()
specifier|public
name|PathData
name|getChecksumFile
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfExists
argument_list|(
name|FileTypeRequirement
operator|.
name|SHOULD_NOT_BE_DIRECTORY
argument_list|)
expr_stmt|;
name|ChecksumFileSystem
name|srcFs
init|=
operator|(
name|ChecksumFileSystem
operator|)
name|fs
decl_stmt|;
name|Path
name|srcPath
init|=
name|srcFs
operator|.
name|getChecksumFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|PathData
argument_list|(
name|srcFs
operator|.
name|getRawFileSystem
argument_list|()
argument_list|,
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a temporary file for this PathData with the given extension.    * The file will be deleted on exit.    * @param extension for the temporary file    * @return PathData    * @throws IOException shouldn't happen    */
DECL|method|createTempFile (String extension)
specifier|public
name|PathData
name|createTempFile
parameter_list|(
name|String
name|extension
parameter_list|)
throws|throws
name|IOException
block|{
name|PathData
name|tmpFile
init|=
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|uri
operator|+
literal|"._COPYING_"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|tmpFile
operator|.
name|path
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
comment|/**    * Returns a list of PathData objects of the items contained in the given    * directory.    * @return list of PathData objects for its children    * @throws IOException if anything else goes wrong...    */
DECL|method|getDirectoryContents ()
specifier|public
name|PathData
index|[]
name|getDirectoryContents
parameter_list|()
throws|throws
name|IOException
block|{
name|checkIfExists
argument_list|(
name|FileTypeRequirement
operator|.
name|SHOULD_BE_DIRECTORY
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
operator|new
name|PathData
index|[
name|stats
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// preserve relative paths
name|String
name|child
init|=
name|getStringForChildPath
argument_list|(
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|items
index|[
name|i
index|]
operator|=
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|child
argument_list|,
name|stats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
comment|/**    * Creates a new object for a child entry in this directory    * @param child the basename will be appended to this object's path    * @return PathData for the child    * @throws IOException if this object does not exist or is not a directory    */
DECL|method|getPathDataForChild (PathData child)
specifier|public
name|PathData
name|getPathDataForChild
parameter_list|(
name|PathData
name|child
parameter_list|)
throws|throws
name|IOException
block|{
name|checkIfExists
argument_list|(
name|FileTypeRequirement
operator|.
name|SHOULD_BE_DIRECTORY
argument_list|)
expr_stmt|;
return|return
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|getStringForChildPath
argument_list|(
name|child
operator|.
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a child of this directory, use the directory's path and the child's    * basename to construct the string to the child.  This preserves relative    * paths since Path will fully qualify.    * @param child a path contained within this directory    * @return String of the path relative to this directory    */
DECL|method|getStringForChildPath (Path childPath)
specifier|private
name|String
name|getStringForChildPath
parameter_list|(
name|Path
name|childPath
parameter_list|)
block|{
name|String
name|basename
init|=
name|childPath
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|basename
return|;
block|}
comment|// check getPath() so scheme slashes aren't considered part of the path
name|String
name|separator
init|=
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|?
literal|""
else|:
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
return|return
name|uri
operator|+
name|separator
operator|+
name|basename
return|;
block|}
DECL|enum|PathType
DECL|enumConstant|HAS_SCHEME
DECL|enumConstant|SCHEMELESS_ABSOLUTE
DECL|enumConstant|RELATIVE
specifier|protected
enum|enum
name|PathType
block|{
name|HAS_SCHEME
block|,
name|SCHEMELESS_ABSOLUTE
block|,
name|RELATIVE
block|}
empty_stmt|;
comment|/**    * Expand the given path as a glob pattern.  Non-existent paths do not    * throw an exception because creation commands like touch and mkdir need    * to create them.  The "stat" field will be null if the path does not    * exist.    * @param pattern the pattern to expand as a glob    * @param conf the hadoop configuration    * @return list of {@link PathData} objects.  if the pattern is not a glob,    * and does not exist, the list will contain a single PathData with a null    * stat     * @throws IOException anything else goes wrong...    */
DECL|method|expandAsGlob (String pattern, Configuration conf)
specifier|public
specifier|static
name|PathData
index|[]
name|expandAsGlob
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|globPath
init|=
operator|new
name|Path
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|globPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|globPath
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
comment|// not a glob& file not found, so add the path with a null stat
name|items
operator|=
operator|new
name|PathData
index|[]
block|{
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|pattern
argument_list|,
literal|null
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
comment|// figure out what type of glob path was given, will convert globbed
comment|// paths to match the type to preserve relativity
name|PathType
name|globType
decl_stmt|;
name|URI
name|globUri
init|=
name|globPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|globUri
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|globType
operator|=
name|PathType
operator|.
name|HAS_SCHEME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|new
name|File
argument_list|(
name|globUri
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|globType
operator|=
name|PathType
operator|.
name|SCHEMELESS_ABSOLUTE
expr_stmt|;
block|}
else|else
block|{
name|globType
operator|=
name|PathType
operator|.
name|RELATIVE
expr_stmt|;
block|}
comment|// convert stats to PathData
name|items
operator|=
operator|new
name|PathData
index|[
name|stats
operator|.
name|length
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
name|URI
name|matchUri
init|=
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|globMatch
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|globType
condition|)
block|{
case|case
name|HAS_SCHEME
case|:
comment|// use as-is, but remove authority if necessary
if|if
condition|(
name|globUri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
name|matchUri
operator|=
name|removeAuthority
argument_list|(
name|matchUri
argument_list|)
expr_stmt|;
block|}
name|globMatch
operator|=
name|matchUri
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|SCHEMELESS_ABSOLUTE
case|:
comment|// take just the uri's path
name|globMatch
operator|=
name|matchUri
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
case|case
name|RELATIVE
case|:
comment|// make it relative to the current working dir
name|URI
name|cwdUri
init|=
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|globMatch
operator|=
name|relativize
argument_list|(
name|cwdUri
argument_list|,
name|matchUri
argument_list|,
name|stat
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|items
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|globMatch
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|items
return|;
block|}
DECL|method|removeAuthority (URI uri)
specifier|private
specifier|static
name|URI
name|removeAuthority
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|""
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|relativize (URI cwdUri, URI srcUri, boolean isDir)
specifier|private
specifier|static
name|String
name|relativize
parameter_list|(
name|URI
name|cwdUri
parameter_list|,
name|URI
name|srcUri
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
name|String
name|uriPath
init|=
name|srcUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|cwdPath
init|=
name|cwdUri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|cwdPath
operator|.
name|equals
argument_list|(
name|uriPath
argument_list|)
condition|)
block|{
return|return
name|Path
operator|.
name|CUR_DIR
return|;
block|}
comment|// find common ancestor
name|int
name|lastSep
init|=
name|findLongestDirPrefix
argument_list|(
name|cwdPath
argument_list|,
name|uriPath
argument_list|,
name|isDir
argument_list|)
decl_stmt|;
name|StringBuilder
name|relPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// take the remaining path fragment after the ancestor
if|if
condition|(
name|lastSep
operator|<
name|uriPath
operator|.
name|length
argument_list|()
condition|)
block|{
name|relPath
operator|.
name|append
argument_list|(
name|uriPath
operator|.
name|substring
argument_list|(
name|lastSep
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if cwd has a path fragment after the ancestor, convert them to ".."
if|if
condition|(
name|lastSep
operator|<
name|cwdPath
operator|.
name|length
argument_list|()
condition|)
block|{
while|while
condition|(
name|lastSep
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|relPath
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
name|relPath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|relPath
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
name|lastSep
operator|=
name|cwdPath
operator|.
name|indexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|lastSep
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|relPath
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|findLongestDirPrefix (String cwd, String path, boolean isDir)
specifier|private
specifier|static
name|int
name|findLongestDirPrefix
parameter_list|(
name|String
name|cwd
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|isDir
parameter_list|)
block|{
comment|// add the path separator to dirs to simplify finding the longest match
if|if
condition|(
operator|!
name|cwd
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|cwd
operator|+=
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
if|if
condition|(
name|isDir
operator|&&
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|path
operator|+=
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
comment|// find longest directory prefix
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|cwd
operator|.
name|length
argument_list|()
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastSep
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cwd
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
break|break;
if|if
condition|(
name|cwd
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
name|lastSep
operator|=
name|i
expr_stmt|;
block|}
return|return
name|lastSep
return|;
block|}
comment|/**    * Returns the printable version of the path that is either the path    * as given on the commandline, or the full path    * @return String of the path    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|// No interpretation of symbols. Just decode % escaped chars.
name|String
name|decodedRemainder
init|=
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
return|return
name|decodedRemainder
return|;
block|}
else|else
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|decodedRemainder
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Get the path to a local file    * @return File representing the local path    * @throws IllegalArgumentException if this.fs is not the LocalFileSystem    */
DECL|method|toFile ()
specifier|public
name|File
name|toFile
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|LocalFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a local path: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|LocalFileSystem
operator|)
name|fs
operator|)
operator|.
name|pathToFile
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/** Construct a URI from a String with unescaped special characters    *  that have non-standard sematics. e.g. /, ?, #. A custom parsing    *  is needed to prevent misbihaviors.    *  @param pathString The input path in string form    *  @return URI    */
DECL|method|stringToUri (String pathString)
specifier|private
specifier|static
name|URI
name|stringToUri
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
comment|// We can't use 'new URI(String)' directly. Since it doesn't do quoting
comment|// internally, the internal parser may fail or break the string at wrong
comment|// places. Use of multi-argument ctors will quote those chars for us,
comment|// but we need to do our own parsing and assembly.
comment|// parse uri components
name|String
name|scheme
init|=
literal|null
decl_stmt|;
name|String
name|authority
init|=
literal|null
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// parse uri scheme, if any
name|int
name|colon
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|slash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
literal|0
operator|&&
operator|(
name|slash
operator|==
name|colon
operator|+
literal|1
operator|)
condition|)
block|{
comment|// has a non zero-length scheme
name|scheme
operator|=
name|pathString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
expr_stmt|;
name|start
operator|=
name|colon
operator|+
literal|1
expr_stmt|;
block|}
comment|// parse uri authority, if any
if|if
condition|(
name|pathString
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|,
name|start
argument_list|)
operator|&&
operator|(
name|pathString
operator|.
name|length
argument_list|()
operator|-
name|start
operator|>
literal|2
operator|)
condition|)
block|{
name|start
operator|+=
literal|2
expr_stmt|;
name|int
name|nextSlash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|int
name|authEnd
init|=
name|nextSlash
operator|>
literal|0
condition|?
name|nextSlash
else|:
name|pathString
operator|.
name|length
argument_list|()
decl_stmt|;
name|authority
operator|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|authEnd
argument_list|)
expr_stmt|;
name|start
operator|=
name|authEnd
expr_stmt|;
block|}
comment|// uri path is the rest of the string. ? or # are not interpreated,
comment|// but any occurrence of them will be quoted by the URI ctor.
name|String
name|path
init|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pathString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// Construct the URI
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

