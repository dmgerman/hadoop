begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This is an implementation of the Hadoop Archive   * Filesystem. This archive Filesystem has index files  * of the form _index* and has contents of the form  * part-*. The index files store the indexes of the   * real files. The index files are of the form _masterindex  * and _index. The master index is a level of indirection   * in to the index file to make the look ups faster. the index  * file is sorted with hash code of the paths that it contains   * and the master index contains pointers to the positions in   * index for ranges of hashcodes.  */
end_comment

begin_class
DECL|class|HarFileSystem
specifier|public
class|class
name|HarFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HarFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|METADATA_CACHE_ENTRIES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|METADATA_CACHE_ENTRIES_KEY
init|=
literal|"fs.har.metadatacache.entries"
decl_stmt|;
DECL|field|METADATA_CACHE_ENTRIES_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|METADATA_CACHE_ENTRIES_DEFAULT
init|=
literal|10
decl_stmt|;
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|3
decl_stmt|;
DECL|field|harMetaCache
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|HarMetaData
argument_list|>
name|harMetaCache
decl_stmt|;
comment|// uri representation of this Har filesystem
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
comment|// the top level path of the archive
comment|// in the underlying file system
DECL|field|archivePath
specifier|private
name|Path
name|archivePath
decl_stmt|;
comment|// the har auth
DECL|field|harAuth
specifier|private
name|String
name|harAuth
decl_stmt|;
comment|// pointer into the static metadata cache
DECL|field|metadata
specifier|private
name|HarMetaData
name|metadata
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * public construction of harfilesystem    */
DECL|method|HarFileSystem ()
specifier|public
name|HarFileSystem
parameter_list|()
block|{
comment|// Must call #initialize() method to set the underlying file system
block|}
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>har</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"har"
return|;
block|}
comment|/**    * Constructor to create a HarFileSystem with an    * underlying filesystem.    * @param fs underlying file system    */
DECL|method|HarFileSystem (FileSystem fs)
specifier|public
name|HarFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|statistics
operator|=
name|fs
operator|.
name|statistics
expr_stmt|;
block|}
DECL|method|initializeMetadataCache (Configuration conf)
specifier|private
specifier|synchronized
name|void
name|initializeMetadataCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|harMetaCache
operator|==
literal|null
condition|)
block|{
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|METADATA_CACHE_ENTRIES_KEY
argument_list|,
name|METADATA_CACHE_ENTRIES_DEFAULT
argument_list|)
decl_stmt|;
name|harMetaCache
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LruCache
argument_list|<
name|URI
argument_list|,
name|HarMetaData
argument_list|>
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize a Har filesystem per har archive. The     * archive home directory is the top level directory    * in the filesystem that contains the HAR archive.    * Be careful with this method, you do not want to go     * on creating new Filesystem instances per call to     * path.getFileSystem().    * the uri of Har is     * har://underlyingfsscheme-host:port/archivepath.    * or     * har:///archivepath. This assumes the underlying filesystem    * to be used in case not specified.    */
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// initialize the metadata cache, if needed
name|initializeMetadataCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// decode the name
name|URI
name|underLyingURI
init|=
name|decodeHarURI
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// we got the right har Path- now check if this is
comment|// truly a har filesystem
name|Path
name|harPath
init|=
name|archivePath
argument_list|(
operator|new
name|Path
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|,
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|name
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid path for the Har Filesystem. "
operator|+
name|name
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|underLyingURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|uri
operator|=
name|harPath
operator|.
name|toUri
argument_list|()
expr_stmt|;
name|archivePath
operator|=
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|harAuth
operator|=
name|getHarAuth
argument_list|(
name|underLyingURI
argument_list|)
expr_stmt|;
comment|//check for the underlying fs containing
comment|// the index file
name|Path
name|masterIndexPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"_masterindex"
argument_list|)
decl_stmt|;
name|Path
name|archiveIndexPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"_index"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|masterIndexPath
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|archiveIndexPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid path for the Har Filesystem. "
operator|+
literal|"No index file in "
operator|+
name|harPath
argument_list|)
throw|;
block|}
name|metadata
operator|=
name|harMetaCache
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|mStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|masterIndexPath
argument_list|)
decl_stmt|;
name|FileStatus
name|aStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|archiveIndexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mStat
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|metadata
operator|.
name|getMasterIndexTimestamp
argument_list|()
operator|||
name|aStat
operator|.
name|getModificationTime
argument_list|()
operator|!=
name|metadata
operator|.
name|getArchiveIndexTimestamp
argument_list|()
condition|)
block|{
comment|// the archive has been overwritten since we last read it
comment|// remove the entry from the meta data cache
name|metadata
operator|=
literal|null
expr_stmt|;
name|harMetaCache
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|HarMetaData
argument_list|(
name|fs
argument_list|,
name|masterIndexPath
argument_list|,
name|archiveIndexPath
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|parseMetaData
argument_list|()
expr_stmt|;
name|harMetaCache
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getConf
argument_list|()
return|;
block|}
comment|// get the version of the filesystem from the masterindex file
comment|// the version is currently not useful since its the first version
comment|// of archives
DECL|method|getHarVersion ()
specifier|public
name|int
name|getHarVersion
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
return|return
name|metadata
operator|.
name|getVersion
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid meta data for the Har Filesystem"
argument_list|)
throw|;
block|}
block|}
comment|/*    * find the parent path that is the     * archive path in the path. The last    * path segment that ends with .har is     * the path that will be returned.    */
DECL|method|archivePath (Path p)
specifier|private
name|Path
name|archivePath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|Path
name|retPath
init|=
literal|null
decl_stmt|;
name|Path
name|tmp
init|=
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|depth
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tmp
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".har"
argument_list|)
condition|)
block|{
name|retPath
operator|=
name|tmp
expr_stmt|;
break|break;
block|}
name|tmp
operator|=
name|tmp
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|retPath
return|;
block|}
comment|/**    * decode the raw URI to get the underlying URI    * @param rawURI raw Har URI    * @return filtered URI of the underlying fileSystem    */
DECL|method|decodeHarURI (URI rawURI, Configuration conf)
specifier|private
name|URI
name|decodeHarURI
parameter_list|(
name|URI
name|rawURI
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpAuth
init|=
name|rawURI
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
comment|//we are using the default file
comment|//system in the config
comment|//so create a underlying uri and
comment|//return it
if|if
condition|(
name|tmpAuth
operator|==
literal|null
condition|)
block|{
comment|//create a path
return|return
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
return|;
block|}
name|String
name|authority
init|=
name|rawURI
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"URI: "
operator|+
name|rawURI
operator|+
literal|" is an invalid Har URI since authority==null."
operator|+
literal|"  Expecting har://<scheme>-<host>/<path>."
argument_list|)
throw|;
block|}
name|int
name|i
init|=
name|authority
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"URI: "
operator|+
name|rawURI
operator|+
literal|" is an invalid Har URI since '-' not found."
operator|+
literal|"  Expecting har://<scheme>-<host>/<path>."
argument_list|)
throw|;
block|}
if|if
condition|(
name|rawURI
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// query component not allowed
throw|throw
operator|new
name|IOException
argument_list|(
literal|"query component in Path not supported  "
operator|+
name|rawURI
argument_list|)
throw|;
block|}
name|URI
name|tmp
decl_stmt|;
try|try
block|{
comment|// convert<scheme>-<host> to<scheme>://<host>
name|URI
name|baseUri
init|=
operator|new
name|URI
argument_list|(
name|authority
operator|.
name|replaceFirst
argument_list|(
literal|"-"
argument_list|,
literal|"://"
argument_list|)
argument_list|)
decl_stmt|;
name|tmp
operator|=
operator|new
name|URI
argument_list|(
name|baseUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|baseUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|rawURI
operator|.
name|getPath
argument_list|()
argument_list|,
name|rawURI
operator|.
name|getQuery
argument_list|()
argument_list|,
name|rawURI
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"URI: "
operator|+
name|rawURI
operator|+
literal|" is an invalid Har URI. Expecting har://<scheme>-<host>/<path>."
argument_list|)
throw|;
block|}
return|return
name|tmp
return|;
block|}
DECL|method|decodeString (String str)
specifier|private
specifier|static
name|String
name|decodeString
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|str
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
DECL|method|decodeFileName (String fname)
specifier|private
name|String
name|decodeFileName
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|int
name|version
init|=
name|metadata
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|2
operator|||
name|version
operator|==
literal|3
condition|)
block|{
return|return
name|decodeString
argument_list|(
name|fname
argument_list|)
return|;
block|}
return|return
name|fname
return|;
block|}
comment|/**    * return the top level archive.    */
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInitialWorkingDirectory ()
specifier|public
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
return|return
name|getWorkingDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus (Path p)
specifier|public
name|FsStatus
name|getStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getStatus
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Create a har specific auth     * har-underlyingfs:port    * @param underLyingUri the uri of underlying    * filesystem    * @return har specific auth    */
DECL|method|getHarAuth (URI underLyingUri)
specifier|private
name|String
name|getHarAuth
parameter_list|(
name|URI
name|underLyingUri
parameter_list|)
block|{
name|String
name|auth
init|=
name|underLyingUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"-"
decl_stmt|;
if|if
condition|(
name|underLyingUri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|auth
operator|+=
name|underLyingUri
operator|.
name|getHost
argument_list|()
expr_stmt|;
if|if
condition|(
name|underLyingUri
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|auth
operator|+=
literal|":"
expr_stmt|;
name|auth
operator|+=
name|underLyingUri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|auth
operator|+=
literal|":"
expr_stmt|;
block|}
return|return
name|auth
return|;
block|}
comment|/**    * Used for delegation token related functionality. Must delegate to    * underlying file system.    */
annotation|@
name|Override
DECL|method|getCanonicalUri ()
specifier|protected
name|URI
name|getCanonicalUri
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getCanonicalUri
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|canonicalizeUri (URI uri)
specifier|protected
name|URI
name|canonicalizeUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|fs
operator|.
name|canonicalizeUri
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**    * Returns the uri of this filesystem.    * The uri is of the form     * har://underlyingfsschema-host:port/pathintheunderlyingfs    */
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|checkPath (Path path)
specifier|protected
name|void
name|checkPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|fs
operator|.
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolvePath (Path p)
specifier|public
name|Path
name|resolvePath
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|resolvePath
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * this method returns the path     * inside the har filesystem.    * this is relative path inside     * the har filesystem.    * @param path the fully qualified path in the har filesystem.    * @return relative path in the filesystem.    */
DECL|method|getPathInHar (Path path)
specifier|private
name|Path
name|getPathInHar
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|archivePath
operator|.
name|compareTo
argument_list|(
name|harPath
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|harPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|harPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|parent
operator|.
name|compareTo
argument_list|(
name|archivePath
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|tmp
operator|=
literal|null
expr_stmt|;
break|break;
block|}
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
comment|//the relative path of p. basically
comment|// getting rid of /. Parsing and doing
comment|// string manipulation is not good - so
comment|// just use the path api to do it.
DECL|method|makeRelative (String initial, Path p)
specifier|private
name|Path
name|makeRelative
parameter_list|(
name|String
name|initial
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
name|String
name|scheme
init|=
name|this
operator|.
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|this
operator|.
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|new
name|Path
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|initial
argument_list|)
return|;
name|Path
name|retPath
init|=
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|depth
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|retPath
operator|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|retPath
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|initial
argument_list|)
argument_list|,
name|retPath
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/* this makes a path qualified in the har filesystem    * (non-Javadoc)    * @see org.apache.hadoop.fs.FilterFileSystem#makeQualified(    * org.apache.hadoop.fs.Path)    */
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// make sure that we just get the
comment|// path component
name|Path
name|fsPath
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|fsPath
operator|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|URI
name|tmpURI
init|=
name|fsPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
comment|//change this to Har uri
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|harAuth
argument_list|,
name|tmpURI
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Fix offset and length of block locations.    * Note that this method modifies the original array.    * @param locations block locations of har part file    * @param start the start of the desired range in the contained file    * @param len the length of the desired range    * @param fileOffsetInHar the offset of the desired file in the har part file    * @return block locations with fixed offset and length    */
DECL|method|fixBlockLocations (BlockLocation[] locations, long start, long len, long fileOffsetInHar)
specifier|static
name|BlockLocation
index|[]
name|fixBlockLocations
parameter_list|(
name|BlockLocation
index|[]
name|locations
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|,
name|long
name|fileOffsetInHar
parameter_list|)
block|{
comment|// offset 1 past last byte of desired range
name|long
name|end
init|=
name|start
operator|+
name|len
decl_stmt|;
for|for
control|(
name|BlockLocation
name|location
range|:
name|locations
control|)
block|{
comment|// offset of part block relative to beginning of desired file
comment|// (may be negative if file starts in this part block)
name|long
name|harBlockStart
init|=
name|location
operator|.
name|getOffset
argument_list|()
operator|-
name|fileOffsetInHar
decl_stmt|;
comment|// offset 1 past last byte of har block relative to beginning of
comment|// desired file
name|long
name|harBlockEnd
init|=
name|harBlockStart
operator|+
name|location
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|>
name|harBlockStart
condition|)
block|{
comment|// desired range starts after beginning of this har block
comment|// fix offset to beginning of relevant range (relative to desired file)
name|location
operator|.
name|setOffset
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// fix length to relevant portion of har block
name|location
operator|.
name|setLength
argument_list|(
name|location
operator|.
name|getLength
argument_list|()
operator|-
operator|(
name|start
operator|-
name|harBlockStart
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// desired range includes beginning of this har block
name|location
operator|.
name|setOffset
argument_list|(
name|harBlockStart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|harBlockEnd
operator|>
name|end
condition|)
block|{
comment|// range ends before end of this har block
comment|// fix length to remove irrelevant portion at the end
name|location
operator|.
name|setLength
argument_list|(
name|location
operator|.
name|getLength
argument_list|()
operator|-
operator|(
name|harBlockEnd
operator|-
name|end
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|locations
return|;
block|}
comment|/**    * Get block locations from the underlying fs and fix their    * offsets and lengths.    * @param file the input file status to get block locations    * @param start the start of the desired range in the contained file    * @param len the length of the desired range    * @return block locations for this segment of file    * @throws IOException    */
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|HarStatus
name|hstatus
init|=
name|getFileHarStatus
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|hstatus
operator|.
name|getPartName
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|partStatus
init|=
name|metadata
operator|.
name|getPartFileStatus
argument_list|(
name|partPath
argument_list|)
decl_stmt|;
comment|// get all part blocks that overlap with the desired file blocks
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|partStatus
argument_list|,
name|hstatus
operator|.
name|getStartIndex
argument_list|()
operator|+
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|fixBlockLocations
argument_list|(
name|locations
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|hstatus
operator|.
name|getStartIndex
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * the hash of the path p inside  the filesystem    * @param p the path in the harfilesystem    * @return the hash code of the path.    */
DECL|method|getHarHash (Path p)
specifier|public
specifier|static
name|int
name|getHarHash
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
return|;
block|}
DECL|class|Store
specifier|static
class|class
name|Store
block|{
DECL|method|Store ()
specifier|public
name|Store
parameter_list|()
block|{
name|begin
operator|=
name|end
operator|=
name|startHash
operator|=
name|endHash
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Store (long begin, long end, int startHash, int endHash)
specifier|public
name|Store
parameter_list|(
name|long
name|begin
parameter_list|,
name|long
name|end
parameter_list|,
name|int
name|startHash
parameter_list|,
name|int
name|endHash
parameter_list|)
block|{
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|startHash
operator|=
name|startHash
expr_stmt|;
name|this
operator|.
name|endHash
operator|=
name|endHash
expr_stmt|;
block|}
DECL|field|begin
specifier|public
name|long
name|begin
decl_stmt|;
DECL|field|end
specifier|public
name|long
name|end
decl_stmt|;
DECL|field|startHash
specifier|public
name|int
name|startHash
decl_stmt|;
DECL|field|endHash
specifier|public
name|int
name|endHash
decl_stmt|;
block|}
comment|/**    * Get filestatuses of all the children of a given directory. This just reads    * through index file and reads line by line to get all statuses for children    * of a directory. Its a brute force way of getting all such filestatuses    *     * @param parent    *          the parent path directory    * @param statuses    *          the list to add the children filestatuses to    */
DECL|method|fileStatusesInIndex (HarStatus parent, List<FileStatus> statuses)
specifier|private
name|void
name|fileStatusesInIndex
parameter_list|(
name|HarStatus
name|parent
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentString
init|=
name|parent
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentString
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|parentString
operator|+=
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|parentString
argument_list|)
decl_stmt|;
name|int
name|harlen
init|=
name|harPath
operator|.
name|depth
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|cache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HarStatus
name|hstatus
range|:
name|metadata
operator|.
name|archive
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|child
init|=
name|hstatus
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|.
name|startsWith
argument_list|(
name|parentString
argument_list|)
operator|)
condition|)
block|{
name|Path
name|thisPath
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisPath
operator|.
name|depth
argument_list|()
operator|==
name|harlen
operator|+
literal|1
condition|)
block|{
name|statuses
operator|.
name|add
argument_list|(
name|toFileStatus
argument_list|(
name|hstatus
argument_list|,
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Combine the status stored in the index and the underlying status.     * @param h status stored in the index    * @param cache caching the underlying file statuses    * @return the combined file status    * @throws IOException    */
DECL|method|toFileStatus (HarStatus h, Map<String, FileStatus> cache)
specifier|private
name|FileStatus
name|toFileStatus
parameter_list|(
name|HarStatus
name|h
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|underlying
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|underlying
operator|=
name|cache
operator|.
name|get
argument_list|(
name|h
operator|.
name|partName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|underlying
operator|==
literal|null
condition|)
block|{
specifier|final
name|Path
name|p
init|=
name|h
operator|.
name|isDir
condition|?
name|archivePath
else|:
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|h
operator|.
name|partName
argument_list|)
decl_stmt|;
name|underlying
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|h
operator|.
name|partName
argument_list|,
name|underlying
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|modTime
init|=
literal|0
decl_stmt|;
name|int
name|version
init|=
name|metadata
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
literal|3
condition|)
block|{
name|modTime
operator|=
name|underlying
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|==
literal|3
condition|)
block|{
name|modTime
operator|=
name|h
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
name|h
operator|.
name|isDir
argument_list|()
condition|?
literal|0L
else|:
name|h
operator|.
name|getLength
argument_list|()
argument_list|,
name|h
operator|.
name|isDir
argument_list|()
argument_list|,
name|underlying
operator|.
name|getReplication
argument_list|()
argument_list|,
name|underlying
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|modTime
argument_list|,
name|underlying
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|underlying
operator|.
name|getPermission
argument_list|()
argument_list|,
name|underlying
operator|.
name|getOwner
argument_list|()
argument_list|,
name|underlying
operator|.
name|getGroup
argument_list|()
argument_list|,
name|makeRelative
argument_list|(
name|this
operator|.
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|h
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// a single line parser for hadoop archives status
comment|// stored in a single line in the index files
comment|// the format is of the form
comment|// filename "dir"/"file" partFileName startIndex length
comment|//<space separated children>
DECL|class|HarStatus
specifier|private
class|class
name|HarStatus
block|{
DECL|field|isDir
name|boolean
name|isDir
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|children
name|List
argument_list|<
name|String
argument_list|>
name|children
decl_stmt|;
DECL|field|partName
name|String
name|partName
decl_stmt|;
DECL|field|startIndex
name|long
name|startIndex
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|field|modificationTime
name|long
name|modificationTime
init|=
literal|0
decl_stmt|;
DECL|method|HarStatus (String harString)
specifier|public
name|HarStatus
parameter_list|(
name|String
name|harString
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
index|[]
name|splits
init|=
name|harString
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|decodeFileName
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDir
operator|=
literal|"dir"
operator|.
name|equals
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
condition|?
literal|true
else|:
literal|false
expr_stmt|;
comment|// this is equal to "none" if its a directory
name|this
operator|.
name|partName
operator|=
name|splits
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|metadata
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|String
index|[]
name|propSplits
init|=
literal|null
decl_stmt|;
comment|// propSplits is used to retrieve the metainformation that Har versions
comment|// 1& 2 missed (modification time, permission, owner group).
comment|// These fields are stored in an encoded string placed in different
comment|// locations depending on whether it's a file or directory entry.
comment|// If it's a directory, the string will be placed at the partName
comment|// location (directories have no partName because they don't have data
comment|// to be stored). This is done because the number of fields in a
comment|// directory entry is unbounded (all children are listed at the end)
comment|// If it's a file, the string will be the last field.
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
name|version
operator|==
literal|3
condition|)
block|{
name|propSplits
operator|=
name|decodeString
argument_list|(
name|this
operator|.
name|partName
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|decodeFileName
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|version
operator|==
literal|3
condition|)
block|{
name|propSplits
operator|=
name|decodeString
argument_list|(
name|splits
index|[
literal|5
index|]
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propSplits
operator|!=
literal|null
operator|&&
name|propSplits
operator|.
name|length
operator|>=
literal|4
condition|)
block|{
name|modificationTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|propSplits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// the fields below are stored in the file but are currently not used
comment|// by HarFileSystem
comment|// permission = new FsPermission(Short.parseShort(propSplits[1]));
comment|// owner = decodeString(propSplits[2]);
comment|// group = decodeString(propSplits[3]);
block|}
block|}
DECL|method|isDir ()
specifier|public
name|boolean
name|isDir
parameter_list|()
block|{
return|return
name|isDir
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getPartName ()
specifier|public
name|String
name|getPartName
parameter_list|()
block|{
return|return
name|partName
return|;
block|}
DECL|method|getStartIndex ()
specifier|public
name|long
name|getStartIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|modificationTime
return|;
block|}
block|}
comment|/**    * return the filestatus of files in har archive.    * The permission returned are that of the archive    * index files. The permissions are not persisted     * while creating a hadoop archive.    * @param f the path in har filesystem    * @return filestatus.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|HarStatus
name|hstatus
init|=
name|getFileHarStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
name|toFileStatus
argument_list|(
name|hstatus
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getFileHarStatus (Path f)
specifier|private
name|HarStatus
name|getFileHarStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the fs DataInputStream for the underlying file
comment|// look up the index.
name|Path
name|p
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid file name: "
operator|+
name|f
operator|+
literal|" in "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|HarStatus
name|hstatus
init|=
name|metadata
operator|.
name|archive
operator|.
name|get
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|hstatus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File: "
operator|+
name|f
operator|+
literal|" does not exist in "
operator|+
name|uri
argument_list|)
throw|;
block|}
return|return
name|hstatus
return|;
block|}
comment|/**    * @return null since no checksum algorithm is implemented.    */
annotation|@
name|Override
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Returns a har input stream which fakes end of     * file. It reads the index files to get the part     * file name and the size and start of the file.    */
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the fs DataInputStream for the underlying file
name|HarStatus
name|hstatus
init|=
name|getFileHarStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|hstatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|+
literal|" : not a file in "
operator|+
name|archivePath
argument_list|)
throw|;
block|}
return|return
operator|new
name|HarFSDataInputStream
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|hstatus
operator|.
name|getPartName
argument_list|()
argument_list|)
argument_list|,
name|hstatus
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|hstatus
operator|.
name|getLength
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
comment|/**    * Used for delegation token related functionality. Must delegate to    * underlying file system.    */
annotation|@
name|Override
DECL|method|getChildFileSystems ()
specifier|public
name|FileSystem
index|[]
name|getChildFileSystems
parameter_list|()
block|{
return|return
operator|new
name|FileSystem
index|[]
block|{
name|fs
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: create not allowed."
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: create not allowed."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: append not allowed."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|//this might already be closed
comment|// ignore
block|}
block|}
block|}
comment|/**    * Not implemented.    */
annotation|@
name|Override
DECL|method|setReplication (Path src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setReplication not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: rename not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|append (Path f)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: append not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Not implemented.    */
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: delete not allowed"
argument_list|)
throw|;
block|}
comment|/**    * liststatus returns the children of a directory     * after looking up the index files.    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|//need to see if the file is an index in file
comment|//get the filestatus of the archive directory
comment|// we will create fake filestatuses to return
comment|// to the client
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|tmpPath
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|HarStatus
name|hstatus
init|=
name|metadata
operator|.
name|archive
operator|.
name|get
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|hstatus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" not found in "
operator|+
name|archivePath
argument_list|)
throw|;
block|}
if|if
condition|(
name|hstatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|fileStatusesInIndex
argument_list|(
name|hstatus
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statuses
operator|.
name|add
argument_list|(
name|toFileStatus
argument_list|(
name|hstatus
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|statuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * return the top level archive path.    */
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
comment|//does nothing.
block|}
comment|/**    * not implemented.    */
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: mkdirs not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
annotation|@
name|Override
DECL|method|copyFromLocalFile (boolean delSrc, boolean overwrite, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: copyfromlocalfile not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|copyFromLocalFile (boolean delSrc, boolean overwrite, Path[] srcs, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Path
index|[]
name|srcs
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: copyfromlocalfile not allowed"
argument_list|)
throw|;
block|}
comment|/**    * copies the file in the har filesystem to a local file.    */
annotation|@
name|Override
DECL|method|copyToLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyToLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * not implemented.    */
annotation|@
name|Override
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: startLocalOutput not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
annotation|@
name|Override
DECL|method|completeLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: completeLocalOutput not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setowner not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setTimes (Path p, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setTimes not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Not implemented.    */
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setPermission not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Hadoop archives input stream. This input stream fakes EOF     * since archive files are part of bigger part files.    */
DECL|class|HarFSDataInputStream
specifier|private
specifier|static
class|class
name|HarFSDataInputStream
extends|extends
name|FSDataInputStream
block|{
comment|/**      * Create an input stream that fakes all the reads/positions/seeking.      */
DECL|class|HarFsInputStream
specifier|private
specifier|static
class|class
name|HarFsInputStream
extends|extends
name|FSInputStream
implements|implements
name|CanSetDropBehind
implements|,
name|CanSetReadahead
block|{
DECL|field|position
DECL|field|start
DECL|field|end
specifier|private
name|long
name|position
decl_stmt|,
name|start
decl_stmt|,
name|end
decl_stmt|;
comment|//The underlying data input stream that the
comment|// underlying filesystem will return.
DECL|field|underLyingStream
specifier|private
specifier|final
name|FSDataInputStream
name|underLyingStream
decl_stmt|;
comment|//one byte buffer
DECL|field|oneBytebuff
specifier|private
specifier|final
name|byte
index|[]
name|oneBytebuff
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|method|HarFsInputStream (FileSystem fs, Path path, long start, long length, int bufferSize)
name|HarFsInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negative length ["
operator|+
name|length
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|underLyingStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|underLyingStream
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// the start of this file in the part file
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
comment|// the position pointer in the part file
name|this
operator|.
name|position
operator|=
name|start
expr_stmt|;
comment|// the end pointer in the part file
name|this
operator|.
name|end
operator|=
name|start
operator|+
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|end
operator|-
name|underLyingStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
operator|(
name|int
operator|)
name|remaining
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|underLyingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//not implemented
annotation|@
name|Override
DECL|method|mark (int readLimit)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
comment|// do nothing
block|}
comment|/**        * reset is not implemented        */
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"reset not implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|read
argument_list|(
name|oneBytebuff
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|<=
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|oneBytebuff
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
comment|// NB: currently this method actually never executed becusae
comment|// java.io.DataInputStream.read(byte[]) directly delegates to
comment|// method java.io.InputStream.read(byte[], int, int).
comment|// However, potentially it can be invoked, so leave it intact for now.
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ret
init|=
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
block|{
name|position
operator|+=
name|ret
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**        *         */
annotation|@
name|Override
DECL|method|read (byte[] b, int offset, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|newlen
init|=
name|len
decl_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|position
operator|+
name|len
operator|>
name|end
condition|)
block|{
name|newlen
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|position
argument_list|)
expr_stmt|;
block|}
comment|// end case
if|if
condition|(
name|newlen
operator|==
literal|0
condition|)
return|return
name|ret
return|;
name|ret
operator|=
name|underLyingStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|newlen
argument_list|)
expr_stmt|;
name|position
operator|+=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmpN
init|=
name|n
decl_stmt|;
if|if
condition|(
name|tmpN
operator|>
literal|0
condition|)
block|{
specifier|final
name|long
name|actualRemaining
init|=
name|end
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|tmpN
operator|>
name|actualRemaining
condition|)
block|{
name|tmpN
operator|=
name|actualRemaining
expr_stmt|;
block|}
name|underLyingStream
operator|.
name|seek
argument_list|(
name|tmpN
operator|+
name|position
argument_list|)
expr_stmt|;
name|position
operator|+=
name|tmpN
expr_stmt|;
return|return
name|tmpN
return|;
block|}
comment|// NB: the contract is described in java.io.InputStream.skip(long):
comment|// this method returns the number of bytes actually skipped, so,
comment|// the return value should never be negative.
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|position
operator|-
name|start
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|seek (final long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
specifier|final
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|validatePosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|position
operator|=
name|start
operator|+
name|pos
expr_stmt|;
name|underLyingStream
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
DECL|method|validatePosition (final long pos)
specifier|private
name|void
name|validatePosition
parameter_list|(
specifier|final
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Negative position: "
operator|+
name|pos
argument_list|)
throw|;
block|}
specifier|final
name|long
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|pos
operator|>
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Position behind the end "
operator|+
literal|"of the stream (length = "
operator|+
name|length
operator|+
literal|"): "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// do not need to implement this
comment|// hdfs in itself does seektonewsource
comment|// while reading.
return|return
literal|false
return|;
block|}
comment|/**        * implementing position readable.         */
annotation|@
name|Override
DECL|method|read (long pos, byte[] b, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nlength
init|=
name|length
decl_stmt|;
if|if
condition|(
name|start
operator|+
name|nlength
operator|+
name|pos
operator|>
name|end
condition|)
block|{
comment|// length corrected to the real remaining length:
name|nlength
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nlength
operator|<=
literal|0
condition|)
block|{
comment|// EOS:
return|return
operator|-
literal|1
return|;
block|}
return|return
name|underLyingStream
operator|.
name|read
argument_list|(
name|pos
operator|+
name|start
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|nlength
argument_list|)
return|;
block|}
comment|/**        * position readable again.        */
annotation|@
name|Override
DECL|method|readFully (long pos, byte[] b, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|+
name|length
operator|+
name|pos
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough bytes to read."
argument_list|)
throw|;
block|}
name|underLyingStream
operator|.
name|readFully
argument_list|(
name|pos
operator|+
name|start
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (long pos, byte[] b)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|pos
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReadahead (Long readahead)
specifier|public
name|void
name|setReadahead
parameter_list|(
name|Long
name|readahead
parameter_list|)
throws|throws
name|IOException
block|{
name|underLyingStream
operator|.
name|setReadahead
argument_list|(
name|readahead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDropBehind (Boolean dropBehind)
specifier|public
name|void
name|setDropBehind
parameter_list|(
name|Boolean
name|dropBehind
parameter_list|)
throws|throws
name|IOException
block|{
name|underLyingStream
operator|.
name|setDropBehind
argument_list|(
name|dropBehind
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * constructors for har input stream.      * @param fs the underlying filesystem      * @param p The path in the underlying filesystem      * @param start the start position in the part file      * @param length the length of valid data in the part file      * @param bufsize the buffer size      * @throws IOException      */
DECL|method|HarFSDataInputStream (FileSystem fs, Path p, long start, long length, int bufsize)
specifier|public
name|HarFSDataInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|bufsize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|HarFsInputStream
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|bufsize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|HarMetaData
specifier|private
class|class
name|HarMetaData
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
comment|// the masterIndex of the archive
DECL|field|masterIndexPath
specifier|private
name|Path
name|masterIndexPath
decl_stmt|;
comment|// the index file
DECL|field|archiveIndexPath
specifier|private
name|Path
name|archiveIndexPath
decl_stmt|;
DECL|field|masterIndexTimestamp
specifier|private
name|long
name|masterIndexTimestamp
decl_stmt|;
DECL|field|archiveIndexTimestamp
specifier|private
name|long
name|archiveIndexTimestamp
decl_stmt|;
DECL|field|stores
name|List
argument_list|<
name|Store
argument_list|>
name|stores
init|=
operator|new
name|ArrayList
argument_list|<
name|Store
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|archive
name|Map
argument_list|<
name|Path
argument_list|,
name|HarStatus
argument_list|>
name|archive
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|HarStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|partFileStatuses
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|partFileStatuses
init|=
operator|new
name|HashMap
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|HarMetaData (FileSystem fs, Path masterIndexPath, Path archiveIndexPath)
specifier|public
name|HarMetaData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|masterIndexPath
parameter_list|,
name|Path
name|archiveIndexPath
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|masterIndexPath
operator|=
name|masterIndexPath
expr_stmt|;
name|this
operator|.
name|archiveIndexPath
operator|=
name|archiveIndexPath
expr_stmt|;
block|}
DECL|method|getPartFileStatus (Path partPath)
specifier|public
name|FileStatus
name|getPartFileStatus
parameter_list|(
name|Path
name|partPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
decl_stmt|;
name|status
operator|=
name|partFileStatuses
operator|.
name|get
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
name|partFileStatuses
operator|.
name|put
argument_list|(
name|partPath
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
DECL|method|getMasterIndexTimestamp ()
specifier|public
name|long
name|getMasterIndexTimestamp
parameter_list|()
block|{
return|return
name|masterIndexTimestamp
return|;
block|}
DECL|method|getArchiveIndexTimestamp ()
specifier|public
name|long
name|getArchiveIndexTimestamp
parameter_list|()
block|{
return|return
name|archiveIndexTimestamp
return|;
block|}
DECL|method|getVersion ()
specifier|private
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|parseMetaData ()
specifier|private
name|void
name|parseMetaData
parameter_list|()
throws|throws
name|IOException
block|{
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|long
name|read
decl_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|LineReader
name|lin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|masterIndexPath
argument_list|)
expr_stmt|;
name|FileStatus
name|masterStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|masterIndexPath
argument_list|)
decl_stmt|;
name|masterIndexTimestamp
operator|=
name|masterStat
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|lin
operator|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|read
operator|=
name|lin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// the first line contains the version of the index file
name|String
name|versionLine
init|=
name|line
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|arr
init|=
name|versionLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// make it always backwards-compatible
if|if
condition|(
name|this
operator|.
name|version
operator|>
name|HarFileSystem
operator|.
name|VERSION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid version "
operator|+
name|this
operator|.
name|version
operator|+
literal|" expected "
operator|+
name|HarFileSystem
operator|.
name|VERSION
argument_list|)
throw|;
block|}
comment|// each line contains a hashcode range and the index file name
name|String
index|[]
name|readStr
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|masterStat
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|int
name|b
init|=
name|lin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|read
operator|+=
name|b
expr_stmt|;
name|readStr
operator|=
name|line
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|int
name|startHash
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|readStr
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|endHash
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|readStr
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|stores
operator|.
name|add
argument_list|(
operator|new
name|Store
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|readStr
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|readStr
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|startHash
argument_list|,
name|endHash
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|lin
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|FSDataInputStream
name|aIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|archiveIndexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
name|archiveStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|archiveIndexPath
argument_list|)
decl_stmt|;
name|archiveIndexTimestamp
operator|=
name|archiveStat
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|LineReader
name|aLin
decl_stmt|;
comment|// now start reading the real index file
for|for
control|(
name|Store
name|s
range|:
name|stores
control|)
block|{
name|read
operator|=
literal|0
expr_stmt|;
name|aIn
operator|.
name|seek
argument_list|(
name|s
operator|.
name|begin
argument_list|)
expr_stmt|;
name|aLin
operator|=
operator|new
name|LineReader
argument_list|(
name|aIn
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|read
operator|+
name|s
operator|.
name|begin
operator|<
name|s
operator|.
name|end
condition|)
block|{
name|int
name|tmp
init|=
name|aLin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|read
operator|+=
name|tmp
expr_stmt|;
name|String
name|lineFeed
init|=
name|line
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|parsed
init|=
name|lineFeed
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|parsed
index|[
literal|0
index|]
operator|=
name|decodeFileName
argument_list|(
name|parsed
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|archive
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
name|parsed
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|HarStatus
argument_list|(
name|lineFeed
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|aIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * testing purposes only:    */
DECL|method|getMetadata ()
name|HarMetaData
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
DECL|class|LruCache
specifier|private
specifier|static
class|class
name|LruCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|MAX_ENTRIES
specifier|private
specifier|final
name|int
name|MAX_ENTRIES
decl_stmt|;
DECL|method|LruCache (int maxEntries)
specifier|public
name|LruCache
parameter_list|(
name|int
name|maxEntries
parameter_list|)
block|{
name|super
argument_list|(
name|maxEntries
operator|+
literal|1
argument_list|,
literal|1.0f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MAX_ENTRIES
operator|=
name|maxEntries
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeEldestEntry (Map.Entry<K, V> eldest)
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|MAX_ENTRIES
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getServerDefaults (Path f)
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getServerDefaults
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUsed ()
specifier|public
name|long
name|getUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getUsed
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getDefaultBlockSize
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|getDefaultBlockSize (Path f)
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getDefaultReplication
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultReplication (Path f)
specifier|public
name|short
name|getDefaultReplication
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
end_class

end_unit

