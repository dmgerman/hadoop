begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_comment
comment|/**  * A queue with multiple levels for each priority.  */
end_comment

begin_class
DECL|class|FairCallQueue
specifier|public
class|class
name|FairCallQueue
parameter_list|<
name|E
extends|extends
name|Schedulable
parameter_list|>
extends|extends
name|AbstractQueue
argument_list|<
name|E
argument_list|>
implements|implements
name|BlockingQueue
argument_list|<
name|E
argument_list|>
block|{
annotation|@
name|Deprecated
DECL|field|IPC_CALLQUEUE_PRIORITY_LEVELS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|IPC_CALLQUEUE_PRIORITY_LEVELS_DEFAULT
init|=
literal|4
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|IPC_CALLQUEUE_PRIORITY_LEVELS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|IPC_CALLQUEUE_PRIORITY_LEVELS_KEY
init|=
literal|"faircallqueue.priority-levels"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FairCallQueue
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* The queues */
DECL|field|queues
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
name|queues
decl_stmt|;
comment|/* Read locks */
DECL|field|takeLock
specifier|private
specifier|final
name|ReentrantLock
name|takeLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|notEmpty
specifier|private
specifier|final
name|Condition
name|notEmpty
init|=
name|takeLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|method|signalNotEmpty ()
specifier|private
name|void
name|signalNotEmpty
parameter_list|()
block|{
name|takeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|notEmpty
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|takeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Multiplexer picks which queue to draw from */
DECL|field|multiplexer
specifier|private
name|RpcMultiplexer
name|multiplexer
decl_stmt|;
comment|/* Statistic tracking */
DECL|field|overflowedCalls
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|AtomicLong
argument_list|>
name|overflowedCalls
decl_stmt|;
comment|/**    * Create a FairCallQueue.    * @param capacity the total size of all sub-queues    * @param ns the prefix to use for configuration    * @param conf the configuration to read from    * Notes: Each sub-queue has a capacity of `capacity / numSubqueues`.    * The first or the highest priority sub-queue has an excess capacity    * of `capacity % numSubqueues`    */
DECL|method|FairCallQueue (int priorityLevels, int capacity, String ns, Configuration conf)
specifier|public
name|FairCallQueue
parameter_list|(
name|int
name|priorityLevels
parameter_list|,
name|int
name|capacity
parameter_list|,
name|String
name|ns
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|priorityLevels
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of Priority Levels must be "
operator|+
literal|"at least 1"
argument_list|)
throw|;
block|}
name|int
name|numQueues
init|=
name|priorityLevels
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FairCallQueue is in use with "
operator|+
name|numQueues
operator|+
literal|" queues with total capacity of "
operator|+
name|capacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|queues
operator|=
operator|new
name|ArrayList
argument_list|<
name|BlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|(
name|numQueues
argument_list|)
expr_stmt|;
name|this
operator|.
name|overflowedCalls
operator|=
operator|new
name|ArrayList
argument_list|<
name|AtomicLong
argument_list|>
argument_list|(
name|numQueues
argument_list|)
expr_stmt|;
name|int
name|queueCapacity
init|=
name|capacity
operator|/
name|numQueues
decl_stmt|;
name|int
name|capacityForFirstQueue
init|=
name|queueCapacity
operator|+
operator|(
name|capacity
operator|%
name|numQueues
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|queues
operator|.
name|add
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|capacityForFirstQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|queues
operator|.
name|add
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|E
argument_list|>
argument_list|(
name|queueCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|overflowedCalls
operator|.
name|add
argument_list|(
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|multiplexer
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
name|numQueues
argument_list|,
name|ns
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Make this the active source of metrics
name|MetricsProxy
name|mp
init|=
name|MetricsProxy
operator|.
name|getInstance
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|mp
operator|.
name|setDelegate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the first non-empty queue with equal to<i>startIdx</i>, or    * or scans from highest to lowest priority queue.    *    * @param startIdx the queue number to start searching at    * @return the first non-empty queue with less priority, or null if    * everything was empty    */
DECL|method|getFirstNonEmptyQueue (int startIdx)
specifier|private
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|getFirstNonEmptyQueue
parameter_list|(
name|int
name|startIdx
parameter_list|)
block|{
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|queue
init|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|startIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|queue
return|;
block|}
specifier|final
name|int
name|numQueues
init|=
name|this
operator|.
name|queues
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
name|i
operator|++
control|)
block|{
name|queue
operator|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|queue
return|;
block|}
block|}
comment|// All queues were empty
return|return
literal|null
return|;
block|}
comment|/* AbstractQueue and BlockingQueue methods */
comment|/**    * Put and offer follow the same pattern:    * 1. Get the assigned priorityLevel from the call by scheduler    * 2. Get the nth sub-queue matching this priorityLevel    * 3. delegate the call to this sub-queue.    *    * But differ in how they handle overflow:    * - Put will move on to the next queue until it lands on the last queue    * - Offer does not attempt other queues on overflow    */
annotation|@
name|Override
DECL|method|put (E e)
specifier|public
name|void
name|put
parameter_list|(
name|E
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|priorityLevel
init|=
name|e
operator|.
name|getPriorityLevel
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numLevels
init|=
name|this
operator|.
name|queues
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|priorityLevel
argument_list|)
decl_stmt|;
name|boolean
name|res
init|=
name|q
operator|.
name|offer
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
comment|// Update stats
name|this
operator|.
name|overflowedCalls
operator|.
name|get
argument_list|(
name|priorityLevel
argument_list|)
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
comment|// If we failed to insert, try again on the next level
name|priorityLevel
operator|++
expr_stmt|;
if|if
condition|(
name|priorityLevel
operator|==
name|numLevels
condition|)
block|{
comment|// That was the last one, we will block on put in the last queue
comment|// Delete this line to drop the call
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|priorityLevel
operator|-
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
name|signalNotEmpty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|offer (E e, long timeout, TimeUnit unit)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|,
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|priorityLevel
init|=
name|e
operator|.
name|getPriorityLevel
argument_list|()
decl_stmt|;
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|priorityLevel
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
name|q
operator|.
name|offer
argument_list|(
name|e
argument_list|,
name|timeout
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|signalNotEmpty
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|offer (E e)
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|int
name|priorityLevel
init|=
name|e
operator|.
name|getPriorityLevel
argument_list|()
decl_stmt|;
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|queues
operator|.
name|get
argument_list|(
name|priorityLevel
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
name|q
operator|.
name|offer
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|signalNotEmpty
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|take ()
specifier|public
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|startIdx
init|=
name|this
operator|.
name|multiplexer
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
decl_stmt|;
name|takeLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait while queue is empty
for|for
control|(
init|;
condition|;
control|)
block|{
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|getFirstNonEmptyQueue
argument_list|(
name|startIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
comment|// Got queue, so return if we can poll out an object
name|E
name|e
init|=
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
name|notEmpty
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|takeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|poll (long timeout, TimeUnit unit)
specifier|public
name|E
name|poll
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|startIdx
init|=
name|this
operator|.
name|multiplexer
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
decl_stmt|;
name|long
name|nanos
init|=
name|unit
operator|.
name|toNanos
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|takeLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|getFirstNonEmptyQueue
argument_list|(
name|startIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|E
name|e
init|=
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
comment|// Escape condition: there might be something available
return|return
name|e
return|;
block|}
block|}
if|if
condition|(
name|nanos
operator|<=
literal|0
condition|)
block|{
comment|// Wait has elapsed
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// Now wait on the condition for a bit. If we get
comment|// spuriously awoken we'll re-loop
name|nanos
operator|=
name|notEmpty
operator|.
name|awaitNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|notEmpty
operator|.
name|signal
argument_list|()
expr_stmt|;
comment|// propagate to a non-interrupted thread
throw|throw
name|ie
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|takeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * poll() provides no strict consistency: it is possible for poll to return    * null even though an element is in the queue.    */
annotation|@
name|Override
DECL|method|poll ()
specifier|public
name|E
name|poll
parameter_list|()
block|{
name|int
name|startIdx
init|=
name|this
operator|.
name|multiplexer
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
decl_stmt|;
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|getFirstNonEmptyQueue
argument_list|(
name|startIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// everything is empty
block|}
comment|// Delegate to the sub-queue's poll, which could still return null
return|return
name|q
operator|.
name|poll
argument_list|()
return|;
block|}
comment|/**    * Peek, like poll, provides no strict consistency.    */
annotation|@
name|Override
DECL|method|peek ()
specifier|public
name|E
name|peek
parameter_list|()
block|{
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
init|=
name|this
operator|.
name|getFirstNonEmptyQueue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|q
operator|.
name|peek
argument_list|()
return|;
block|}
block|}
comment|/**    * Size returns the sum of all sub-queue sizes, so it may be greater than    * capacity.    * Note: size provides no strict consistency, and should not be used to    * control queue IO.    */
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
range|:
name|this
operator|.
name|queues
control|)
block|{
name|size
operator|+=
name|q
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**    * Iterator is not implemented, as it is not needed.    */
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
comment|/**    * drainTo defers to each sub-queue. Note that draining from a FairCallQueue    * to another FairCallQueue will likely fail, since the incoming calls    * may be scheduled differently in the new FairCallQueue. Nonetheless this    * method is provided for completeness.    */
annotation|@
name|Override
DECL|method|drainTo (Collection<? super E> c, int maxElements)
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|,
name|int
name|maxElements
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
range|:
name|this
operator|.
name|queues
control|)
block|{
name|sum
operator|+=
name|q
operator|.
name|drainTo
argument_list|(
name|c
argument_list|,
name|maxElements
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|drainTo (Collection<? super E> c)
specifier|public
name|int
name|drainTo
parameter_list|(
name|Collection
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
range|:
name|this
operator|.
name|queues
control|)
block|{
name|sum
operator|+=
name|q
operator|.
name|drainTo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
comment|/**    * Returns maximum remaining capacity. This does not reflect how much you can    * ideally fit in this FairCallQueue, as that would depend on the scheduler's    * decisions.    */
annotation|@
name|Override
DECL|method|remainingCapacity ()
specifier|public
name|int
name|remainingCapacity
parameter_list|()
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockingQueue
argument_list|<
name|E
argument_list|>
name|q
range|:
name|this
operator|.
name|queues
control|)
block|{
name|sum
operator|+=
name|q
operator|.
name|remainingCapacity
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
comment|/**    * MetricsProxy is a singleton because we may init multiple    * FairCallQueues, but the metrics system cannot unregister beans cleanly.    */
DECL|class|MetricsProxy
specifier|private
specifier|static
specifier|final
class|class
name|MetricsProxy
implements|implements
name|FairCallQueueMXBean
block|{
comment|// One singleton per namespace
DECL|field|INSTANCES
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|MetricsProxy
argument_list|>
name|INSTANCES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MetricsProxy
argument_list|>
argument_list|()
decl_stmt|;
comment|// Weakref for delegate, so we don't retain it forever if it can be GC'd
DECL|field|delegate
specifier|private
name|WeakReference
argument_list|<
name|FairCallQueue
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
argument_list|>
name|delegate
decl_stmt|;
comment|// Keep track of how many objects we registered
DECL|field|revisionNumber
specifier|private
name|int
name|revisionNumber
init|=
literal|0
decl_stmt|;
DECL|method|MetricsProxy (String namespace)
specifier|private
name|MetricsProxy
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|MBeans
operator|.
name|register
argument_list|(
name|namespace
argument_list|,
literal|"FairCallQueue"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getInstance (String namespace)
specifier|public
specifier|static
specifier|synchronized
name|MetricsProxy
name|getInstance
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|MetricsProxy
name|mp
init|=
name|INSTANCES
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|mp
operator|==
literal|null
condition|)
block|{
comment|// We must create one
name|mp
operator|=
operator|new
name|MetricsProxy
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|INSTANCES
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|mp
argument_list|)
expr_stmt|;
block|}
return|return
name|mp
return|;
block|}
DECL|method|setDelegate (FairCallQueue<? extends Schedulable> obj)
specifier|public
name|void
name|setDelegate
parameter_list|(
name|FairCallQueue
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
name|obj
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
operator|new
name|WeakReference
argument_list|<
name|FairCallQueue
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
argument_list|>
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|this
operator|.
name|revisionNumber
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueueSizes ()
specifier|public
name|int
index|[]
name|getQueueSizes
parameter_list|()
block|{
name|FairCallQueue
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
name|obj
init|=
name|this
operator|.
name|delegate
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|int
index|[]
block|{}
return|;
block|}
return|return
name|obj
operator|.
name|getQueueSizes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOverflowedCalls ()
specifier|public
name|long
index|[]
name|getOverflowedCalls
parameter_list|()
block|{
name|FairCallQueue
argument_list|<
name|?
extends|extends
name|Schedulable
argument_list|>
name|obj
init|=
name|this
operator|.
name|delegate
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|long
index|[]
block|{}
return|;
block|}
return|return
name|obj
operator|.
name|getOverflowedCalls
argument_list|()
return|;
block|}
DECL|method|getRevision ()
annotation|@
name|Override
specifier|public
name|int
name|getRevision
parameter_list|()
block|{
return|return
name|revisionNumber
return|;
block|}
block|}
comment|// FairCallQueueMXBean
DECL|method|getQueueSizes ()
specifier|public
name|int
index|[]
name|getQueueSizes
parameter_list|()
block|{
name|int
name|numQueues
init|=
name|queues
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|sizes
init|=
operator|new
name|int
index|[
name|numQueues
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
name|i
operator|++
control|)
block|{
name|sizes
index|[
name|i
index|]
operator|=
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|sizes
return|;
block|}
DECL|method|getOverflowedCalls ()
specifier|public
name|long
index|[]
name|getOverflowedCalls
parameter_list|()
block|{
name|int
name|numQueues
init|=
name|queues
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
index|[]
name|calls
init|=
operator|new
name|long
index|[
name|numQueues
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
name|i
operator|++
control|)
block|{
name|calls
index|[
name|i
index|]
operator|=
name|overflowedCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|calls
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setMultiplexer (RpcMultiplexer newMux)
specifier|public
name|void
name|setMultiplexer
parameter_list|(
name|RpcMultiplexer
name|newMux
parameter_list|)
block|{
name|this
operator|.
name|multiplexer
operator|=
name|newMux
expr_stmt|;
block|}
block|}
end_class

end_unit

