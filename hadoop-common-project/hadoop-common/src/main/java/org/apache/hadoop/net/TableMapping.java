begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_comment
comment|/**  *<p>  * Simple {@link DNSToSwitchMapping} implementation that reads a 2 column text  * file. The columns are separated by whitespace. The first column is a DNS or  * IP address and the second column specifies the rack where the address maps.  *</p>  *<p>  * This class uses the configuration parameter {@code  * net.topology.table.file.name} to locate the mapping file.  *</p>  *<p>  * Calls to {@link #resolve(List)} will look up the address as defined in the  * mapping file. If no entry corresponding to the address is found, the value  * {@code /default-rack} is returned.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|TableMapping
specifier|public
class|class
name|TableMapping
extends|extends
name|CachedDNSToSwitchMapping
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TableMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TableMapping ()
specifier|public
name|TableMapping
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RawTableMapping
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getRawMapping ()
specifier|private
name|RawTableMapping
name|getRawMapping
parameter_list|()
block|{
return|return
operator|(
name|RawTableMapping
operator|)
name|rawMapping
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|getRawMapping
argument_list|()
operator|.
name|getConf
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getRawMapping
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|RawTableMapping
specifier|private
specifier|static
specifier|final
class|class
name|RawTableMapping
extends|extends
name|Configured
implements|implements
name|DNSToSwitchMapping
block|{
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
DECL|method|load ()
specifier|private
specifier|synchronized
name|void
name|load
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|filename
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
operator|+
literal|" not configured. "
operator|+
name|NetworkTopology
operator|.
name|DEFAULT_RACK
operator|+
literal|" will be returned."
argument_list|)
expr_stmt|;
return|return;
block|}
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
condition|)
block|{
name|String
index|[]
name|columns
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|columns
index|[
literal|0
index|]
argument_list|,
name|columns
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Line does not have two columns. Ignoring. "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|filename
operator|+
literal|" cannot be read. "
operator|+
name|NetworkTopology
operator|.
name|DEFAULT_RACK
operator|+
literal|" will be returned."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|filename
operator|+
literal|" cannot be read. "
operator|+
name|NetworkTopology
operator|.
name|DEFAULT_RACK
operator|+
literal|" will be returned."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|resolve (List<String> names)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|String
name|result
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
block|}
block|}
end_class

end_unit

