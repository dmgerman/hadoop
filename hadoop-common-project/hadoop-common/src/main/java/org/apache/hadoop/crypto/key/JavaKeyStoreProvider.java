begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * KeyProvider based on Java's KeyStore file format. The file may be stored in  * any Hadoop FileSystem using the following name mangling:  *  jks://hdfs@nn1.example.com/my/keys.jks -> hdfs://nn1.example.com/my/keys.jks  *  jks://file/home/owen/keys.jks -> file:///home/owen/keys.jks  *  * The password for the keystore is taken from the HADOOP_KEYSTORE_PASSWORD  * environment variable with a default of 'none'.  *  * It is expected for encrypted InputFormats and OutputFormats to copy the keys  * from the original provider into the job's Credentials object, which is  * accessed via the UserProvider. Therefore, this provider won't be used by  * MapReduce tasks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JavaKeyStoreProvider
specifier|public
class|class
name|JavaKeyStoreProvider
extends|extends
name|KeyProvider
block|{
DECL|field|KEY_METADATA
specifier|private
specifier|static
specifier|final
name|String
name|KEY_METADATA
init|=
literal|"KeyMetadata"
decl_stmt|;
DECL|field|SCHEME_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME_NAME
init|=
literal|"jceks"
decl_stmt|;
DECL|field|KEYSTORE_PASSWORD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_PASSWORD_NAME
init|=
literal|"HADOOP_KEYSTORE_PASSWORD"
decl_stmt|;
DECL|field|KEYSTORE_PASSWORD_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_PASSWORD_DEFAULT
init|=
literal|"none"
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|keyStore
specifier|private
specifier|final
name|KeyStore
name|keyStore
decl_stmt|;
DECL|field|password
specifier|private
specifier|final
name|char
index|[]
name|password
decl_stmt|;
DECL|field|changed
specifier|private
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|JavaKeyStoreProvider (URI uri, Configuration conf)
specifier|private
name|JavaKeyStoreProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|path
operator|=
name|unnestUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Get the password from the user's environment
name|String
name|pw
init|=
name|System
operator|.
name|getenv
argument_list|(
name|KEYSTORE_PASSWORD_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pw
operator|==
literal|null
condition|)
block|{
name|pw
operator|=
name|KEYSTORE_PASSWORD_DEFAULT
expr_stmt|;
block|}
name|password
operator|=
name|pw
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
try|try
block|{
name|keyStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|SCHEME_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|keyStore
operator|.
name|load
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// required to create an empty keystore. *sigh*
name|keyStore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't create keystore"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't load keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't load keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getKeyVersion (String versionName)
specifier|public
name|KeyVersion
name|getKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|)
throws|throws
name|IOException
block|{
name|SecretKeySpec
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|versionName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|key
operator|=
operator|(
name|SecretKeySpec
operator|)
name|keyStore
operator|.
name|getKey
argument_list|(
name|versionName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get key "
operator|+
name|versionName
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get algorithm for key "
operator|+
name|key
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnrecoverableKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't recover key "
operator|+
name|key
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|KeyVersion
argument_list|(
name|versionName
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|keyStore
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|alias
operator|=
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|// only include the metadata key names in the list of names
if|if
condition|(
operator|!
name|alias
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get key "
operator|+
name|alias
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyVersions (String name)
specifier|public
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|getKeyVersions
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
name|Metadata
name|km
init|=
name|getMetadata
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|km
operator|!=
literal|null
condition|)
block|{
name|int
name|latestVersion
init|=
name|km
operator|.
name|getVersions
argument_list|()
decl_stmt|;
name|KeyVersion
name|v
init|=
literal|null
decl_stmt|;
name|String
name|versionName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|latestVersion
condition|;
name|i
operator|++
control|)
block|{
name|versionName
operator|=
name|buildVersionName
argument_list|(
name|name
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|v
operator|=
name|getKeyVersion
argument_list|(
name|versionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata (String name)
specifier|public
name|Metadata
name|getMetadata
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Metadata
name|meta
init|=
operator|(
operator|(
name|KeyMetadata
operator|)
name|keyStore
operator|.
name|getKey
argument_list|(
name|name
argument_list|,
name|password
argument_list|)
operator|)
operator|.
name|metadata
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|meta
argument_list|)
expr_stmt|;
return|return
name|meta
return|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get metadata for "
operator|+
name|name
operator|+
literal|" from keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get algorithm for "
operator|+
name|name
operator|+
literal|" from keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnrecoverableKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't recover key for "
operator|+
name|name
operator|+
literal|" from keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createKey (String name, byte[] material, Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|name
argument_list|)
operator|||
name|cache
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key "
operator|+
name|name
operator|+
literal|" already exists in "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem looking up key "
operator|+
name|name
operator|+
literal|" in "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|(
name|options
operator|.
name|getCipher
argument_list|()
argument_list|,
name|options
operator|.
name|getBitLength
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getBitLength
argument_list|()
operator|!=
literal|8
operator|*
name|material
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong key length. Required "
operator|+
name|options
operator|.
name|getBitLength
argument_list|()
operator|+
literal|", but got "
operator|+
operator|(
literal|8
operator|*
name|material
operator|.
name|length
operator|)
argument_list|)
throw|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|String
name|versionName
init|=
name|buildVersionName
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|innerSetKeyVersion
argument_list|(
name|versionName
argument_list|,
name|material
argument_list|,
name|meta
operator|.
name|getCipher
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String name)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|meta
init|=
name|getMetadata
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key "
operator|+
name|name
operator|+
literal|" does not exist in "
operator|+
name|this
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|meta
operator|.
name|getVersions
argument_list|()
condition|;
operator|++
name|v
control|)
block|{
name|String
name|versionName
init|=
name|buildVersionName
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|versionName
argument_list|)
condition|)
block|{
name|keyStore
operator|.
name|deleteEntry
argument_list|(
name|versionName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem removing "
operator|+
name|versionName
operator|+
literal|" from "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|keyStore
operator|.
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem removing "
operator|+
name|name
operator|+
literal|" from "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cache
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|innerSetKeyVersion (String versionName, byte[] material, String cipher)
name|KeyVersion
name|innerSetKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|String
name|cipher
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|keyStore
operator|.
name|setKeyEntry
argument_list|(
name|versionName
argument_list|,
operator|new
name|SecretKeySpec
argument_list|(
name|material
argument_list|,
name|cipher
argument_list|)
argument_list|,
name|password
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't store key "
operator|+
name|versionName
operator|+
literal|" in "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|KeyVersion
argument_list|(
name|versionName
argument_list|,
name|material
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name, byte[] material)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|meta
init|=
name|getMetadata
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|meta
operator|.
name|getBitLength
argument_list|()
operator|!=
literal|8
operator|*
name|material
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wrong key length. Required "
operator|+
name|meta
operator|.
name|getBitLength
argument_list|()
operator|+
literal|", but got "
operator|+
operator|(
literal|8
operator|*
name|material
operator|.
name|length
operator|)
argument_list|)
throw|;
block|}
name|int
name|nextVersion
init|=
name|meta
operator|.
name|addVersion
argument_list|()
decl_stmt|;
name|String
name|versionName
init|=
name|buildVersionName
argument_list|(
name|name
argument_list|,
name|nextVersion
argument_list|)
decl_stmt|;
return|return
name|innerSetKeyVersion
argument_list|(
name|versionName
argument_list|,
name|material
argument_list|,
name|meta
operator|.
name|getCipher
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return;
block|}
comment|// put all of the updates into the keystore
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
name|entry
range|:
name|cache
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|keyStore
operator|.
name|setKeyEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|KeyMetadata
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|password
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't set metadata key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// write out the keystore
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|keyStore
operator|.
name|store
argument_list|(
name|out
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't store keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such algorithm storing keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Certificate exception storing keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The factory to create JksProviders, which is used by the ServiceLoader.    */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|KeyProviderFactory
block|{
annotation|@
name|Override
DECL|method|createProvider (URI providerName, Configuration conf)
specifier|public
name|KeyProvider
name|createProvider
parameter_list|(
name|URI
name|providerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SCHEME_NAME
operator|.
name|equals
argument_list|(
name|providerName
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|JavaKeyStoreProvider
argument_list|(
name|providerName
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * An adapter between a KeyStore Key and our Metadata. This is used to store    * the metadata in a KeyStore even though isn't really a key.    */
DECL|class|KeyMetadata
specifier|public
specifier|static
class|class
name|KeyMetadata
implements|implements
name|Key
implements|,
name|Serializable
block|{
DECL|field|metadata
specifier|private
name|Metadata
name|metadata
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|final
specifier|static
name|long
name|serialVersionUID
init|=
literal|8405872419967874451L
decl_stmt|;
DECL|method|KeyMetadata (Metadata meta)
specifier|private
name|KeyMetadata
parameter_list|(
name|Metadata
name|meta
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|meta
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAlgorithm ()
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|getCipher
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|KEY_METADATA
return|;
block|}
annotation|@
name|Override
DECL|method|getEncoded ()
specifier|public
name|byte
index|[]
name|getEncoded
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
DECL|method|writeObject (ObjectOutputStream out)
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|serialized
init|=
name|metadata
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|serialized
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
block|}
DECL|method|readObject (ObjectInputStream in )
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

