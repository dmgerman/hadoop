begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * StorageStatistics contains statistics data for a FileSystem or FileContext  * instance.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
DECL|class|StorageStatistics
specifier|public
specifier|abstract
class|class
name|StorageStatistics
block|{
comment|/**    * These are common statistic names.    *    * The following names are considered general and preserved across different    * StorageStatistics classes. When implementing a new StorageStatistics, it is    * highly recommended to use the common statistic names.    *    * When adding new common statistic name constants, please make them unique.    * By convention, they are implicitly unique:    *  - the name of the constants are uppercase, words separated by underscores.    *  - the value of the constants are lowercase of the constant names.    */
DECL|interface|CommonStatisticNames
specifier|public
interface|interface
name|CommonStatisticNames
block|{
comment|// The following names are for file system operation invocations
DECL|field|OP_APPEND
name|String
name|OP_APPEND
init|=
literal|"op_append"
decl_stmt|;
DECL|field|OP_COPY_FROM_LOCAL_FILE
name|String
name|OP_COPY_FROM_LOCAL_FILE
init|=
literal|"op_copy_from_local_file"
decl_stmt|;
DECL|field|OP_CREATE
name|String
name|OP_CREATE
init|=
literal|"op_create"
decl_stmt|;
DECL|field|OP_CREATE_NON_RECURSIVE
name|String
name|OP_CREATE_NON_RECURSIVE
init|=
literal|"op_create_non_recursive"
decl_stmt|;
DECL|field|OP_DELETE
name|String
name|OP_DELETE
init|=
literal|"op_delete"
decl_stmt|;
DECL|field|OP_EXISTS
name|String
name|OP_EXISTS
init|=
literal|"op_exists"
decl_stmt|;
DECL|field|OP_GET_CONTENT_SUMMARY
name|String
name|OP_GET_CONTENT_SUMMARY
init|=
literal|"op_get_content_summary"
decl_stmt|;
DECL|field|OP_GET_FILE_CHECKSUM
name|String
name|OP_GET_FILE_CHECKSUM
init|=
literal|"op_get_file_checksum"
decl_stmt|;
DECL|field|OP_GET_FILE_STATUS
name|String
name|OP_GET_FILE_STATUS
init|=
literal|"op_get_file_status"
decl_stmt|;
DECL|field|OP_GET_STATUS
name|String
name|OP_GET_STATUS
init|=
literal|"op_get_status"
decl_stmt|;
DECL|field|OP_GLOB_STATUS
name|String
name|OP_GLOB_STATUS
init|=
literal|"op_glob_status"
decl_stmt|;
DECL|field|OP_IS_FILE
name|String
name|OP_IS_FILE
init|=
literal|"op_is_file"
decl_stmt|;
DECL|field|OP_IS_DIRECTORY
name|String
name|OP_IS_DIRECTORY
init|=
literal|"op_is_directory"
decl_stmt|;
DECL|field|OP_LIST_FILES
name|String
name|OP_LIST_FILES
init|=
literal|"op_list_files"
decl_stmt|;
DECL|field|OP_LIST_LOCATED_STATUS
name|String
name|OP_LIST_LOCATED_STATUS
init|=
literal|"op_list_located_status"
decl_stmt|;
DECL|field|OP_LIST_STATUS
name|String
name|OP_LIST_STATUS
init|=
literal|"op_list_status"
decl_stmt|;
DECL|field|OP_MKDIRS
name|String
name|OP_MKDIRS
init|=
literal|"op_mkdirs"
decl_stmt|;
DECL|field|OP_MODIFY_ACL_ENTRIES
name|String
name|OP_MODIFY_ACL_ENTRIES
init|=
literal|"op_modify_acl_entries"
decl_stmt|;
DECL|field|OP_OPEN
name|String
name|OP_OPEN
init|=
literal|"op_open"
decl_stmt|;
DECL|field|OP_REMOVE_ACL
name|String
name|OP_REMOVE_ACL
init|=
literal|"op_remove_acl"
decl_stmt|;
DECL|field|OP_REMOVE_ACL_ENTRIES
name|String
name|OP_REMOVE_ACL_ENTRIES
init|=
literal|"op_remove_acl_entries"
decl_stmt|;
DECL|field|OP_REMOVE_DEFAULT_ACL
name|String
name|OP_REMOVE_DEFAULT_ACL
init|=
literal|"op_remove_default_acl"
decl_stmt|;
DECL|field|OP_RENAME
name|String
name|OP_RENAME
init|=
literal|"op_rename"
decl_stmt|;
DECL|field|OP_SET_ACL
name|String
name|OP_SET_ACL
init|=
literal|"op_set_acl"
decl_stmt|;
DECL|field|OP_SET_OWNER
name|String
name|OP_SET_OWNER
init|=
literal|"op_set_owner"
decl_stmt|;
DECL|field|OP_SET_PERMISSION
name|String
name|OP_SET_PERMISSION
init|=
literal|"op_set_permission"
decl_stmt|;
DECL|field|OP_SET_TIMES
name|String
name|OP_SET_TIMES
init|=
literal|"op_set_times"
decl_stmt|;
DECL|field|OP_TRUNCATE
name|String
name|OP_TRUNCATE
init|=
literal|"op_truncate"
decl_stmt|;
block|}
comment|/**    * A 64-bit storage statistic.    */
DECL|class|LongStatistic
specifier|public
specifier|static
class|class
name|LongStatistic
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|long
name|value
decl_stmt|;
DECL|method|LongStatistic (String name, long value)
specifier|public
name|LongStatistic
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @return    The name of this statistic.      */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return    The value of this statistic.      */
DECL|method|getValue ()
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|StorageStatistics (String name)
specifier|public
name|StorageStatistics
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * Get the name of this StorageStatistics object.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * @return the associated file system scheme if this is scheme specific,    * else return null.    */
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Get an iterator over all the currently tracked long statistics.    *    * The values returned will depend on the type of FileSystem or FileContext    * object.  The values do not necessarily reflect a snapshot in time.    */
DECL|method|getLongStatistics ()
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|getLongStatistics
parameter_list|()
function_decl|;
comment|/**    * Get the value of a statistic.    *    * @return         null if the statistic is not being tracked or is not a    *                     long statistic.    *                 The value of the statistic, otherwise.    */
DECL|method|getLong (String key)
specifier|public
specifier|abstract
name|Long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
comment|/**    * Return true if a statistic is being tracked.    *    * @return         True only if the statistic is being tracked.    */
DECL|method|isTracked (String key)
specifier|public
specifier|abstract
name|boolean
name|isTracked
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
block|}
end_class

end_unit

