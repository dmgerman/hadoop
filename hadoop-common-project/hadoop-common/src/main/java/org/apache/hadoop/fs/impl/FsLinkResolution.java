begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSLinkResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_comment
comment|/**  * Class to allow Lambda expressions to be used in {@link FileContext}  * link resolution.  * @param<T> type of the returned value.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FsLinkResolution
specifier|public
class|class
name|FsLinkResolution
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FSLinkResolver
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * The function to invoke in the {@link #next(AbstractFileSystem, Path)} call.    */
DECL|field|fn
specifier|private
specifier|final
name|FsLinkResolutionFunction
argument_list|<
name|T
argument_list|>
name|fn
decl_stmt|;
comment|/**    * Construct an instance with the given function.    * @param fn function to invoke.    */
DECL|method|FsLinkResolution (final FsLinkResolutionFunction<T> fn)
specifier|public
name|FsLinkResolution
parameter_list|(
specifier|final
name|FsLinkResolutionFunction
argument_list|<
name|T
argument_list|>
name|fn
parameter_list|)
block|{
name|this
operator|.
name|fn
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next (final AbstractFileSystem fs, final Path p)
specifier|public
name|T
name|next
parameter_list|(
specifier|final
name|AbstractFileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|IOException
block|{
return|return
name|fn
operator|.
name|apply
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|/**    * The signature of the function to invoke.    * @param<T> type resolved to    */
annotation|@
name|FunctionalInterface
DECL|interface|FsLinkResolutionFunction
specifier|public
interface|interface
name|FsLinkResolutionFunction
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      *      * @param fs filesystem to resolve against.      * @param path path to resolve      * @return a result of type T      * @throws UnresolvedLinkException link resolution failure      * @throws IOException other IO failure.      */
DECL|method|apply (final AbstractFileSystem fs, final Path path)
name|T
name|apply
parameter_list|(
specifier|final
name|AbstractFileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
function_decl|;
block|}
comment|/**    * Apply the given function to the resolved path under the the supplied    * FileContext.    * @param fileContext file context to resolve under    * @param path path to resolve    * @param fn function to invoke    * @param<T> return type.    * @return the return value of the function as revoked against the resolved    * path.    * @throws UnresolvedLinkException link resolution failure    * @throws IOException other IO failure.    */
DECL|method|resolve ( final FileContext fileContext, final Path path, final FsLinkResolutionFunction<T> fn)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|resolve
parameter_list|(
specifier|final
name|FileContext
name|fileContext
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|FsLinkResolutionFunction
argument_list|<
name|T
argument_list|>
name|fn
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|IOException
block|{
return|return
operator|new
name|FsLinkResolution
argument_list|<>
argument_list|(
name|fn
argument_list|)
operator|.
name|resolve
argument_list|(
name|fileContext
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

