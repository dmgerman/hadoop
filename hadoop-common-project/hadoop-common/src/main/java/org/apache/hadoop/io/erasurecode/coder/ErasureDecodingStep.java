begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_comment
comment|/**  * Erasure decoding step, a wrapper of all the necessary information to perform  * a decoding step involved in the whole process of decoding a block group.  */
end_comment

begin_class
DECL|class|ErasureDecodingStep
specifier|public
class|class
name|ErasureDecodingStep
extends|extends
name|AbstractErasureCodingStep
block|{
DECL|field|erasedIndexes
specifier|private
name|int
index|[]
name|erasedIndexes
decl_stmt|;
DECL|field|rawDecoder
specifier|private
name|RawErasureDecoder
name|rawDecoder
decl_stmt|;
comment|/**    * The constructor with all the necessary info.    * @param inputBlocks    * @param erasedIndexes the indexes of erased blocks in inputBlocks array    * @param outputBlocks    * @param rawDecoder    */
DECL|method|ErasureDecodingStep (ECBlock[] inputBlocks, int[] erasedIndexes, ECBlock[] outputBlocks, RawErasureDecoder rawDecoder)
specifier|public
name|ErasureDecodingStep
parameter_list|(
name|ECBlock
index|[]
name|inputBlocks
parameter_list|,
name|int
index|[]
name|erasedIndexes
parameter_list|,
name|ECBlock
index|[]
name|outputBlocks
parameter_list|,
name|RawErasureDecoder
name|rawDecoder
parameter_list|)
block|{
name|super
argument_list|(
name|inputBlocks
argument_list|,
name|outputBlocks
argument_list|)
expr_stmt|;
name|this
operator|.
name|erasedIndexes
operator|=
name|erasedIndexes
expr_stmt|;
name|this
operator|.
name|rawDecoder
operator|=
name|rawDecoder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performCoding (ECChunk[] inputChunks, ECChunk[] outputChunks)
specifier|public
name|void
name|performCoding
parameter_list|(
name|ECChunk
index|[]
name|inputChunks
parameter_list|,
name|ECChunk
index|[]
name|outputChunks
parameter_list|)
block|{
name|rawDecoder
operator|.
name|decode
argument_list|(
name|inputChunks
argument_list|,
name|erasedIndexes
argument_list|,
name|outputChunks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

