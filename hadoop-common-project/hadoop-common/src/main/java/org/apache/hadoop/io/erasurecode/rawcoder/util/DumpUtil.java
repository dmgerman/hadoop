begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_comment
comment|/**  * A dump utility class for debugging data erasure coding/decoding issues. Don't  * suggest they are used in runtime production codes.  */
end_comment

begin_class
DECL|class|DumpUtil
specifier|public
specifier|final
class|class
name|DumpUtil
block|{
DECL|field|HEX_CHARS_STR
specifier|private
specifier|static
specifier|final
name|String
name|HEX_CHARS_STR
init|=
literal|"0123456789ABCDEF"
decl_stmt|;
DECL|field|HEX_CHARS
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_CHARS
init|=
name|HEX_CHARS_STR
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|method|DumpUtil ()
specifier|private
name|DumpUtil
parameter_list|()
block|{
comment|// No called
block|}
comment|/**    * Convert bytes into format like 0x02 02 00 80.    */
DECL|method|bytesToHex (byte[] bytes, int limit)
specifier|public
specifier|static
name|String
name|bytesToHex
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
if|if
condition|(
name|limit
operator|>
name|bytes
operator|.
name|length
condition|)
block|{
name|limit
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
name|int
name|len
init|=
name|limit
operator|*
literal|2
decl_stmt|;
name|len
operator|+=
name|limit
expr_stmt|;
comment|// for ' ' appended for each char
name|len
operator|+=
literal|2
expr_stmt|;
comment|// for '0x' prefix
name|char
index|[]
name|hexChars
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|hexChars
index|[
literal|0
index|]
operator|=
literal|'0'
expr_stmt|;
name|hexChars
index|[
literal|1
index|]
operator|=
literal|'x'
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|limit
condition|;
name|j
operator|++
control|)
block|{
name|int
name|v
init|=
name|bytes
index|[
name|j
index|]
operator|&
literal|0xFF
decl_stmt|;
name|hexChars
index|[
name|j
operator|*
literal|3
operator|+
literal|2
index|]
operator|=
name|HEX_CHARS
index|[
name|v
operator|>>>
literal|4
index|]
expr_stmt|;
name|hexChars
index|[
name|j
operator|*
literal|3
operator|+
literal|3
index|]
operator|=
name|HEX_CHARS
index|[
name|v
operator|&
literal|0x0F
index|]
expr_stmt|;
name|hexChars
index|[
name|j
operator|*
literal|3
operator|+
literal|4
index|]
operator|=
literal|' '
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|hexChars
argument_list|)
return|;
block|}
comment|/**    * Print data in hex format in an array of chunks.    * @param header    * @param chunks    */
DECL|method|dumpChunks (String header, ECChunk[] chunks)
specifier|public
specifier|static
name|void
name|dumpChunks
parameter_list|(
name|String
name|header
parameter_list|,
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dumpChunk
argument_list|(
name|chunks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**    * Print data in hex format in a chunk.    * @param chunk    */
DECL|method|dumpChunk (ECChunk chunk)
specifier|public
specifier|static
name|void
name|dumpChunk
parameter_list|(
name|ECChunk
name|chunk
parameter_list|)
block|{
name|String
name|str
decl_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|str
operator|=
literal|"<EMPTY>"
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|bytes
init|=
name|chunk
operator|.
name|toBytesArray
argument_list|()
decl_stmt|;
name|str
operator|=
name|DumpUtil
operator|.
name|bytesToHex
argument_list|(
name|bytes
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

