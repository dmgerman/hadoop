begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_DEFAULT
import|;
end_import

begin_comment
comment|/**  * Crypto codec class, encapsulates encryptor/decryptor pair.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CryptoCodec
specifier|public
specifier|abstract
class|class
name|CryptoCodec
implements|implements
name|Configurable
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CryptoCodec
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get crypto codec for specified algorithm/mode/padding.    *     * @param conf    *          the configuration    * @param CipherSuite    *          algorithm/mode/padding    * @return CryptoCodec the codec object. Null value will be returned if no    *         crypto codec classes with cipher suite configured.    */
DECL|method|getInstance (Configuration conf, CipherSuite cipherSuite)
specifier|public
specifier|static
name|CryptoCodec
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CipherSuite
name|cipherSuite
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CryptoCodec
argument_list|>
argument_list|>
name|klasses
init|=
name|getCodecClasses
argument_list|(
name|conf
argument_list|,
name|cipherSuite
argument_list|)
decl_stmt|;
if|if
condition|(
name|klasses
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CryptoCodec
name|codec
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|CryptoCodec
argument_list|>
name|klass
range|:
name|klasses
control|)
block|{
try|try
block|{
name|CryptoCodec
name|c
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getCipherSuite
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cipherSuite
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using crypto codec {}."
argument_list|,
name|klass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|=
name|c
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Crypto codec {} doesn't meet the cipher suite {}."
argument_list|,
name|klass
operator|.
name|getName
argument_list|()
argument_list|,
name|cipherSuite
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Crypto codec {} is not available."
argument_list|,
name|klass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
return|return
name|codec
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No available crypto codec which meets "
operator|+
literal|"the cipher suite "
operator|+
name|cipherSuite
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
comment|/**    * Get crypto codec for algorithm/mode/padding in config value    * hadoop.security.crypto.cipher.suite    *     * @param conf    *          the configuration    * @return CryptoCodec the codec object Null value will be returned if no    *         crypto codec classes with cipher suite configured.    */
DECL|method|getInstance (Configuration conf)
specifier|public
specifier|static
name|CryptoCodec
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|name
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY
argument_list|,
name|HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|getInstance
argument_list|(
name|conf
argument_list|,
name|CipherSuite
operator|.
name|convert
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCodecClasses ( Configuration conf, CipherSuite cipherSuite)
specifier|private
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CryptoCodec
argument_list|>
argument_list|>
name|getCodecClasses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CipherSuite
name|cipherSuite
parameter_list|)
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|CryptoCodec
argument_list|>
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
name|configName
init|=
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX
operator|+
name|cipherSuite
operator|.
name|getConfigSuffix
argument_list|()
decl_stmt|;
name|String
name|codecString
init|=
name|conf
operator|.
name|get
argument_list|(
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|codecString
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No crypto codec classes with cipher suite configured."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|c
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|codecString
argument_list|)
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|cls
operator|.
name|asSubclass
argument_list|(
name|CryptoCodec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class "
operator|+
name|c
operator|+
literal|" is not a CryptoCodec."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Crypto codec "
operator|+
name|c
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * @return the CipherSuite for this codec.    */
DECL|method|getCipherSuite ()
specifier|public
specifier|abstract
name|CipherSuite
name|getCipherSuite
parameter_list|()
function_decl|;
comment|/**    * Create a {@link org.apache.hadoop.crypto.Encryptor}.     * @return Encryptor the encryptor    */
DECL|method|createEncryptor ()
specifier|public
specifier|abstract
name|Encryptor
name|createEncryptor
parameter_list|()
throws|throws
name|GeneralSecurityException
function_decl|;
comment|/**    * Create a {@link org.apache.hadoop.crypto.Decryptor}.    * @return Decryptor the decryptor    */
DECL|method|createDecryptor ()
specifier|public
specifier|abstract
name|Decryptor
name|createDecryptor
parameter_list|()
throws|throws
name|GeneralSecurityException
function_decl|;
comment|/**    * This interface is only for Counter (CTR) mode. Generally the Encryptor    * or Decryptor calculates the IV and maintain encryption context internally.     * For example a {@link javax.crypto.Cipher} will maintain its encryption     * context internally when we do encryption/decryption using the     * Cipher#update interface.     *<p/>    * Encryption/Decryption is not always on the entire file. For example,    * in Hadoop, a node may only decrypt a portion of a file (i.e. a split).    * In these situations, the counter is derived from the file position.    *<p/>    * The IV can be calculated by combining the initial IV and the counter with     * a lossless operation (concatenation, addition, or XOR).    * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29    *     * @param initIV initial IV    * @param counter counter for input stream position     * @param IV the IV for input stream position    */
DECL|method|calculateIV (byte[] initIV, long counter, byte[] IV)
specifier|public
specifier|abstract
name|void
name|calculateIV
parameter_list|(
name|byte
index|[]
name|initIV
parameter_list|,
name|long
name|counter
parameter_list|,
name|byte
index|[]
name|IV
parameter_list|)
function_decl|;
comment|/**    * Generate a number of secure, random bytes suitable for cryptographic use.    * This method needs to be thread-safe.    *    * @param bytes byte array to populate with random data    */
DECL|method|generateSecureRandom (byte[] bytes)
specifier|public
specifier|abstract
name|void
name|generateSecureRandom
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
function_decl|;
block|}
end_class

end_unit

