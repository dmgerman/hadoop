begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|AtMostOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|AddSpanReceiverRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|AddSpanReceiverResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|ListSpanReceiversRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|ListSpanReceiversResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|ConfigPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|RemoveSpanReceiverRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|RemoveSpanReceiverResponseProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TraceAdminProtocolServerSideTranslatorPB
specifier|public
class|class
name|TraceAdminProtocolServerSideTranslatorPB
implements|implements
name|TraceAdminProtocolPB
implements|,
name|Closeable
block|{
DECL|field|server
specifier|private
specifier|final
name|TraceAdminProtocol
name|server
decl_stmt|;
DECL|method|TraceAdminProtocolServerSideTranslatorPB (TraceAdminProtocol server)
specifier|public
name|TraceAdminProtocolServerSideTranslatorPB
parameter_list|(
name|TraceAdminProtocol
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listSpanReceivers ( RpcController controller, ListSpanReceiversRequestProto req)
specifier|public
name|ListSpanReceiversResponseProto
name|listSpanReceivers
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListSpanReceiversRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|SpanReceiverInfo
index|[]
name|descs
init|=
name|server
operator|.
name|listSpanReceivers
argument_list|()
decl_stmt|;
name|ListSpanReceiversResponseProto
operator|.
name|Builder
name|bld
init|=
name|ListSpanReceiversResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|descs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bld
operator|.
name|addDescriptions
argument_list|(
name|TraceAdminPB
operator|.
name|SpanReceiverListInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|descs
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setClassName
argument_list|(
name|descs
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bld
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|addSpanReceiver ( RpcController controller, AddSpanReceiverRequestProto req)
specifier|public
name|AddSpanReceiverResponseProto
name|addSpanReceiver
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AddSpanReceiverRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|SpanReceiverInfoBuilder
name|factory
init|=
operator|new
name|SpanReceiverInfoBuilder
argument_list|(
name|req
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigPair
name|config
range|:
name|req
operator|.
name|getConfigList
argument_list|()
control|)
block|{
name|factory
operator|.
name|addConfigurationPair
argument_list|(
name|config
operator|.
name|getKey
argument_list|()
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|id
init|=
name|server
operator|.
name|addSpanReceiver
argument_list|(
name|factory
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|AddSpanReceiverResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeSpanReceiver ( RpcController controller, RemoveSpanReceiverRequestProto req)
specifier|public
name|RemoveSpanReceiverResponseProto
name|removeSpanReceiver
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|RemoveSpanReceiverRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|server
operator|.
name|removeSpanReceiver
argument_list|(
name|req
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RemoveSpanReceiverResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|TraceAdminProtocol
operator|.
name|versionID
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

