begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_comment
comment|/** A dense file-based mapping from integers to values. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ArrayFile
specifier|public
class|class
name|ArrayFile
extends|extends
name|MapFile
block|{
DECL|method|ArrayFile ()
specifier|protected
name|ArrayFile
parameter_list|()
block|{}
comment|// no public ctor
comment|/** Write a new array file. */
DECL|class|Writer
specifier|public
specifier|static
class|class
name|Writer
extends|extends
name|MapFile
operator|.
name|Writer
block|{
DECL|field|count
specifier|private
name|LongWritable
name|count
init|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/** Create the named file for values of the named class. */
DECL|method|Writer (Configuration conf, FileSystem fs, String file, Class<? extends Writable> valClass)
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|file
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valClass
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
name|keyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
argument_list|,
name|valueClass
argument_list|(
name|valClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Create the named file for values of the named class. */
DECL|method|Writer (Configuration conf, FileSystem fs, String file, Class<? extends Writable> valClass, CompressionType compress, Progressable progress)
specifier|public
name|Writer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|file
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valClass
parameter_list|,
name|CompressionType
name|compress
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
name|keyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
argument_list|,
name|valueClass
argument_list|(
name|valClass
argument_list|)
argument_list|,
name|compression
argument_list|(
name|compress
argument_list|)
argument_list|,
name|progressable
argument_list|(
name|progress
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Append a value to the file. */
DECL|method|append (Writable value)
specifier|public
specifier|synchronized
name|void
name|append
parameter_list|(
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|append
argument_list|(
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// add to map
name|count
operator|.
name|set
argument_list|(
name|count
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// increment count
block|}
block|}
comment|/** Provide access to an existing array file. */
DECL|class|Reader
specifier|public
specifier|static
class|class
name|Reader
extends|extends
name|MapFile
operator|.
name|Reader
block|{
DECL|field|key
specifier|private
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
comment|/** Construct an array reader for the named file.*/
DECL|method|Reader (FileSystem fs, String file, Configuration conf)
specifier|public
name|Reader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|file
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|Path
argument_list|(
name|file
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Positions the reader before its<code>n</code>th value. */
DECL|method|seek (long n)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|.
name|set
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|seek
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/** Read and return the next value in the file. */
DECL|method|next (Writable value)
specifier|public
specifier|synchronized
name|Writable
name|next
parameter_list|(
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|?
name|value
else|:
literal|null
return|;
block|}
comment|/** Returns the key associated with the most recent call to {@link      * #seek(long)}, {@link #next(Writable)}, or {@link      * #get(long,Writable)}. */
DECL|method|key ()
specifier|public
specifier|synchronized
name|long
name|key
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|key
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Return the<code>n</code>th value in the file. */
DECL|method|get (long n, Writable value)
specifier|public
specifier|synchronized
name|Writable
name|get
parameter_list|(
name|long
name|n
parameter_list|,
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|.
name|set
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

