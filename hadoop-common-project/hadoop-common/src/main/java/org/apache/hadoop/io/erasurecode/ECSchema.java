begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Erasure coding schema to housekeeper relevant information.  */
end_comment

begin_class
DECL|class|ECSchema
specifier|public
class|class
name|ECSchema
block|{
DECL|field|NUM_DATA_UNITS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NUM_DATA_UNITS_KEY
init|=
literal|"k"
decl_stmt|;
DECL|field|NUM_PARITY_UNITS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NUM_PARITY_UNITS_KEY
init|=
literal|"m"
decl_stmt|;
DECL|field|CODEC_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CODEC_NAME_KEY
init|=
literal|"codec"
decl_stmt|;
DECL|field|CHUNK_SIZE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CHUNK_SIZE_KEY
init|=
literal|"chunkSize"
decl_stmt|;
DECL|field|DEFAULT_CHUNK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CHUNK_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|// 64K
DECL|field|schemaName
specifier|private
name|String
name|schemaName
decl_stmt|;
DECL|field|codecName
specifier|private
name|String
name|codecName
decl_stmt|;
DECL|field|options
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|field|numDataUnits
specifier|private
name|int
name|numDataUnits
decl_stmt|;
DECL|field|numParityUnits
specifier|private
name|int
name|numParityUnits
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
comment|/**    * Constructor with schema name and provided options. Note the options may    * contain additional information for the erasure codec to interpret further.    * @param schemaName schema name    * @param options schema options    */
DECL|method|ECSchema (String schemaName, Map<String, String> options)
specifier|public
name|ECSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
assert|assert
operator|(
name|schemaName
operator|!=
literal|null
operator|&&
operator|!
name|schemaName
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
name|this
operator|.
name|schemaName
operator|=
name|schemaName
expr_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
operator|||
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No schema options are provided"
argument_list|)
throw|;
block|}
name|String
name|codecName
init|=
name|options
operator|.
name|get
argument_list|(
name|CODEC_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|codecName
operator|==
literal|null
operator|||
name|codecName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No codec option is provided"
argument_list|)
throw|;
block|}
name|int
name|dataUnits
init|=
literal|0
decl_stmt|,
name|parityUnits
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|NUM_DATA_UNITS_KEY
argument_list|)
condition|)
block|{
name|dataUnits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|NUM_DATA_UNITS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option value "
operator|+
name|options
operator|.
name|get
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
operator|+
literal|" for "
operator|+
name|CHUNK_SIZE_KEY
operator|+
literal|" is found. It should be an integer"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|NUM_PARITY_UNITS_KEY
argument_list|)
condition|)
block|{
name|parityUnits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|NUM_PARITY_UNITS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option value "
operator|+
name|options
operator|.
name|get
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
operator|+
literal|" for "
operator|+
name|CHUNK_SIZE_KEY
operator|+
literal|" is found. It should be an integer"
argument_list|)
throw|;
block|}
name|initWith
argument_list|(
name|codecName
argument_list|,
name|dataUnits
argument_list|,
name|parityUnits
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor with key parameters provided. Note the options may contain    * additional information for the erasure codec to interpret further.    * @param schemaName    * @param codecName    * @param numDataUnits    * @param numParityUnits    * @param options    */
DECL|method|ECSchema (String schemaName, String codecName, int numDataUnits, int numParityUnits, Map<String, String> options)
specifier|public
name|ECSchema
parameter_list|(
name|String
name|schemaName
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
assert|assert
operator|(
name|schemaName
operator|!=
literal|null
operator|&&
operator|!
name|schemaName
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
assert|assert
operator|(
name|codecName
operator|!=
literal|null
operator|&&
operator|!
name|codecName
operator|.
name|isEmpty
argument_list|()
operator|)
assert|;
name|this
operator|.
name|schemaName
operator|=
name|schemaName
expr_stmt|;
name|initWith
argument_list|(
name|codecName
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|initWith (String codecName, int numDataUnits, int numParityUnits, Map<String, String> options)
specifier|private
name|void
name|initWith
parameter_list|(
name|String
name|codecName
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|codecName
operator|=
name|codecName
expr_stmt|;
name|this
operator|.
name|numDataUnits
operator|=
name|numDataUnits
expr_stmt|;
name|this
operator|.
name|numParityUnits
operator|=
name|numParityUnits
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|options
argument_list|)
else|:
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|DEFAULT_CHUNK_SIZE
expr_stmt|;
try|try
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
condition|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option value "
operator|+
name|options
operator|.
name|get
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
operator|+
literal|" for "
operator|+
name|CHUNK_SIZE_KEY
operator|+
literal|" is found. It should be an integer"
argument_list|)
throw|;
block|}
name|boolean
name|isFine
init|=
name|numDataUnits
operator|>
literal|0
operator|&&
name|numParityUnits
operator|>
literal|0
operator|&&
name|chunkSize
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|isFine
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad codec options are found"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the schema name    * @return schema name    */
DECL|method|getSchemaName ()
specifier|public
name|String
name|getSchemaName
parameter_list|()
block|{
return|return
name|schemaName
return|;
block|}
comment|/**    * Get the codec name    * @return codec name    */
DECL|method|getCodecName ()
specifier|public
name|String
name|getCodecName
parameter_list|()
block|{
return|return
name|codecName
return|;
block|}
comment|/**    * Get erasure coding options    * @return encoding options    */
DECL|method|getOptions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
comment|/**    * Get required data units count in a coding group    * @return count of data units    */
DECL|method|getNumDataUnits ()
specifier|public
name|int
name|getNumDataUnits
parameter_list|()
block|{
return|return
name|numDataUnits
return|;
block|}
comment|/**    * Get required parity units count in a coding group    * @return count of parity units    */
DECL|method|getNumParityUnits ()
specifier|public
name|int
name|getNumParityUnits
parameter_list|()
block|{
return|return
name|numParityUnits
return|;
block|}
comment|/**    * Get chunk buffer size for the erasure encoding/decoding.    * @return chunk buffer size    */
DECL|method|getChunkSize ()
specifier|public
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
comment|/**    * Make a meaningful string representation for log output.    * @return string representation    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ECSchema=["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Name="
operator|+
name|schemaName
operator|+
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NUM_DATA_UNITS_KEY
operator|+
literal|"="
operator|+
name|numDataUnits
operator|+
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|NUM_PARITY_UNITS_KEY
operator|+
literal|"="
operator|+
name|numParityUnits
operator|+
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|CHUNK_SIZE_KEY
operator|+
literal|"="
operator|+
name|chunkSize
operator|+
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|skip
init|=
operator|(
name|opt
operator|.
name|equals
argument_list|(
name|NUM_DATA_UNITS_KEY
argument_list|)
operator|||
name|opt
operator|.
name|equals
argument_list|(
name|NUM_PARITY_UNITS_KEY
argument_list|)
operator|||
name|opt
operator|.
name|equals
argument_list|(
name|CHUNK_SIZE_KEY
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|opt
operator|+
literal|"="
operator|+
name|options
operator|.
name|get
argument_list|(
name|opt
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

