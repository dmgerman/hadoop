begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A low memory footprint Cache which extends {@link LightWeightGSet}.  * An entry in the cache is expired if  * (1) it is added to the cache longer than the creation-expiration period, and  * (2) it is not accessed for the access-expiration period.  * When an entry is expired, it may be evicted from the cache.  * When the size limit of the cache is set, the cache will evict the entries  * with earliest expiration time, even if they are not expired.  *   * It is guaranteed that number of entries in the cache is less than or equal  * to the size limit.  However, It is not guaranteed that expired entries are  * evicted from the cache. An expired entry may possibly be accessed after its  * expiration time. In such case, the expiration time may be updated.  *  * This class does not support null entry.  *  * This class is not thread safe.  *  * @param<K> Key type for looking up the entries  * @param<E> Entry type, which must be  *       (1) a subclass of K, and  *       (2) implementing {@link Entry} interface, and  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|LightWeightCache
specifier|public
class|class
name|LightWeightCache
parameter_list|<
name|K
parameter_list|,
name|E
extends|extends
name|K
parameter_list|>
extends|extends
name|LightWeightGSet
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
block|{
comment|/** Limit the number of entries in each eviction. */
DECL|field|EVICTION_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|EVICTION_LIMIT
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
comment|/**    * Entries of {@link LightWeightCache}.    */
DECL|interface|Entry
specifier|public
specifier|static
interface|interface
name|Entry
extends|extends
name|LinkedElement
block|{
comment|/** Set the expiration time. */
DECL|method|setExpirationTime (long timeNano)
specifier|public
name|void
name|setExpirationTime
parameter_list|(
name|long
name|timeNano
parameter_list|)
function_decl|;
comment|/** Get the expiration time. */
DECL|method|getExpirationTime ()
specifier|public
name|long
name|getExpirationTime
parameter_list|()
function_decl|;
block|}
comment|/** Comparator for sorting entries by expiration time in ascending order. */
DECL|field|expirationTimeComparator
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Entry
argument_list|>
name|expirationTimeComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
name|left
parameter_list|,
name|Entry
name|right
parameter_list|)
block|{
specifier|final
name|long
name|l
init|=
name|left
operator|.
name|getExpirationTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|r
init|=
name|right
operator|.
name|getExpirationTime
argument_list|()
decl_stmt|;
return|return
name|l
operator|>
name|r
condition|?
literal|1
else|:
name|l
operator|<
name|r
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
block|}
decl_stmt|;
DECL|method|updateRecommendedLength (int recommendedLength, int sizeLimit)
specifier|private
specifier|static
name|int
name|updateRecommendedLength
parameter_list|(
name|int
name|recommendedLength
parameter_list|,
name|int
name|sizeLimit
parameter_list|)
block|{
return|return
name|sizeLimit
operator|>
literal|0
operator|&&
name|sizeLimit
operator|<
name|recommendedLength
condition|?
operator|(
name|sizeLimit
operator|/
literal|4
operator|*
literal|3
operator|)
comment|// 0.75 load factor
else|:
name|recommendedLength
return|;
block|}
comment|/*    * The memory footprint for java.util.PriorityQueue is low but the    * remove(Object) method runs in linear time. We may improve it by using a    * balanced tree. However, we do not yet have a low memory footprint balanced    * tree implementation.    */
DECL|field|queue
specifier|private
specifier|final
name|PriorityQueue
argument_list|<
name|Entry
argument_list|>
name|queue
decl_stmt|;
DECL|field|creationExpirationPeriod
specifier|private
specifier|final
name|long
name|creationExpirationPeriod
decl_stmt|;
DECL|field|accessExpirationPeriod
specifier|private
specifier|final
name|long
name|accessExpirationPeriod
decl_stmt|;
DECL|field|sizeLimit
specifier|private
specifier|final
name|int
name|sizeLimit
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
comment|/**    * @param recommendedLength Recommended size of the internal array.    * @param sizeLimit the limit of the size of the cache.    *            The limit is disabled if it is&lt;= 0.    * @param creationExpirationPeriod the time period C&gt; 0 in nanoseconds    *            that the creation of an entry is expired if it is added to the    *            cache longer than C.    * @param accessExpirationPeriod the time period A&gt;= 0 in nanoseconds that    *            the access of an entry is expired if it is not accessed    *            longer than A.     */
DECL|method|LightWeightCache (final int recommendedLength, final int sizeLimit, final long creationExpirationPeriod, final long accessExpirationPeriod)
specifier|public
name|LightWeightCache
parameter_list|(
specifier|final
name|int
name|recommendedLength
parameter_list|,
specifier|final
name|int
name|sizeLimit
parameter_list|,
specifier|final
name|long
name|creationExpirationPeriod
parameter_list|,
specifier|final
name|long
name|accessExpirationPeriod
parameter_list|)
block|{
name|this
argument_list|(
name|recommendedLength
argument_list|,
name|sizeLimit
argument_list|,
name|creationExpirationPeriod
argument_list|,
name|accessExpirationPeriod
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|LightWeightCache (final int recommendedLength, final int sizeLimit, final long creationExpirationPeriod, final long accessExpirationPeriod, final Timer timer)
name|LightWeightCache
parameter_list|(
specifier|final
name|int
name|recommendedLength
parameter_list|,
specifier|final
name|int
name|sizeLimit
parameter_list|,
specifier|final
name|long
name|creationExpirationPeriod
parameter_list|,
specifier|final
name|long
name|accessExpirationPeriod
parameter_list|,
specifier|final
name|Timer
name|timer
parameter_list|)
block|{
name|super
argument_list|(
name|updateRecommendedLength
argument_list|(
name|recommendedLength
argument_list|,
name|sizeLimit
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|sizeLimit
operator|=
name|sizeLimit
expr_stmt|;
if|if
condition|(
name|creationExpirationPeriod
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"creationExpirationPeriod = "
operator|+
name|creationExpirationPeriod
operator|+
literal|"<= 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|creationExpirationPeriod
operator|=
name|creationExpirationPeriod
expr_stmt|;
if|if
condition|(
name|accessExpirationPeriod
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"accessExpirationPeriod = "
operator|+
name|accessExpirationPeriod
operator|+
literal|"< 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|accessExpirationPeriod
operator|=
name|accessExpirationPeriod
expr_stmt|;
name|this
operator|.
name|queue
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|Entry
argument_list|>
argument_list|(
name|sizeLimit
operator|>
literal|0
condition|?
name|sizeLimit
operator|+
literal|1
else|:
literal|1
operator|<<
literal|10
argument_list|,
name|expirationTimeComparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
DECL|method|setExpirationTime (final Entry e, final long expirationPeriod)
name|void
name|setExpirationTime
parameter_list|(
specifier|final
name|Entry
name|e
parameter_list|,
specifier|final
name|long
name|expirationPeriod
parameter_list|)
block|{
name|e
operator|.
name|setExpirationTime
argument_list|(
name|timer
operator|.
name|monotonicNowNanos
argument_list|()
operator|+
name|expirationPeriod
argument_list|)
expr_stmt|;
block|}
DECL|method|isExpired (final Entry e, final long now)
name|boolean
name|isExpired
parameter_list|(
specifier|final
name|Entry
name|e
parameter_list|,
specifier|final
name|long
name|now
parameter_list|)
block|{
return|return
name|now
operator|>
name|e
operator|.
name|getExpirationTime
argument_list|()
return|;
block|}
DECL|method|evict ()
specifier|private
name|E
name|evict
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|E
name|polled
init|=
operator|(
name|E
operator|)
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
specifier|final
name|E
name|removed
init|=
name|super
operator|.
name|remove
argument_list|(
name|polled
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|polled
argument_list|)
expr_stmt|;
return|return
name|polled
return|;
block|}
comment|/** Evict expired entries. */
DECL|method|evictExpiredEntries ()
specifier|private
name|void
name|evictExpiredEntries
parameter_list|()
block|{
specifier|final
name|long
name|now
init|=
name|timer
operator|.
name|monotonicNowNanos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|EVICTION_LIMIT
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Entry
name|peeked
init|=
name|queue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|peeked
operator|==
literal|null
operator|||
operator|!
name|isExpired
argument_list|(
name|peeked
argument_list|,
name|now
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|E
name|evicted
init|=
name|evict
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|evicted
operator|==
name|peeked
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Evict entries in order to enforce the size limit of the cache. */
DECL|method|evictEntries ()
specifier|private
name|void
name|evictEntries
parameter_list|()
block|{
if|if
condition|(
name|sizeLimit
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
argument_list|()
init|;
name|i
operator|>
name|sizeLimit
condition|;
name|i
operator|--
control|)
block|{
name|evict
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|get (K key)
specifier|public
name|E
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
specifier|final
name|E
name|entry
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|accessExpirationPeriod
operator|>
literal|0
condition|)
block|{
comment|// update expiration time
specifier|final
name|Entry
name|existing
init|=
operator|(
name|Entry
operator|)
name|entry
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|queue
operator|.
name|remove
argument_list|(
name|existing
argument_list|)
argument_list|)
expr_stmt|;
name|setExpirationTime
argument_list|(
name|existing
argument_list|,
name|accessExpirationPeriod
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|put (final E entry)
specifier|public
name|E
name|put
parameter_list|(
specifier|final
name|E
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|instanceof
name|Entry
operator|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"!(entry instanceof Entry), entry.getClass()="
operator|+
name|entry
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|evictExpiredEntries
argument_list|()
expr_stmt|;
specifier|final
name|E
name|existing
init|=
name|super
operator|.
name|put
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|remove
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Entry
name|e
init|=
operator|(
name|Entry
operator|)
name|entry
decl_stmt|;
name|setExpirationTime
argument_list|(
name|e
argument_list|,
name|creationExpirationPeriod
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|evictEntries
argument_list|()
expr_stmt|;
return|return
name|existing
return|;
block|}
annotation|@
name|Override
DECL|method|remove (K key)
specifier|public
name|E
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|evictExpiredEntries
argument_list|()
expr_stmt|;
specifier|final
name|E
name|removed
init|=
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|queue
operator|.
name|remove
argument_list|(
name|removed
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|iter
init|=
name|super
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|next
parameter_list|()
block|{
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// It would be tricky to support this because LightWeightCache#remove
comment|// may evict multiple elements via evictExpiredEntries.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove via iterator is "
operator|+
literal|"not supported for LightWeightCache"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

