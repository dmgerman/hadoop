begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSClientProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSRESTConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utils for KMS.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMSUtil
specifier|public
specifier|final
class|class
name|KMSUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KMSUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|KMSUtil ()
specifier|private
name|KMSUtil
parameter_list|()
block|{
comment|/* Hidden constructor */
block|}
comment|/**    * Creates a new KeyProvider from the given Configuration    * and configuration key name.    *    * @param conf Configuration    * @param configKeyName The configuration key name    * @return new KeyProvider, or null if no provider was found.    * @throws IOException if the KeyProvider is improperly specified in    *                             the Configuration    */
DECL|method|createKeyProvider (final Configuration conf, final String configKeyName)
specifier|public
specifier|static
name|KeyProvider
name|createKeyProvider
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|configKeyName
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating key provider with config key {}"
argument_list|,
name|configKeyName
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|getKeyProviderUri
argument_list|(
name|conf
argument_list|,
name|configKeyName
argument_list|)
decl_stmt|;
return|return
operator|(
name|uri
operator|!=
literal|null
operator|)
condition|?
name|createKeyProviderFromUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getKeyProviderUri (final Configuration conf)
specifier|public
specifier|static
name|URI
name|getKeyProviderUri
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|KMSUtil
operator|.
name|getKeyProviderUri
argument_list|(
name|conf
argument_list|,
name|KeyProviderFactory
operator|.
name|KEY_PROVIDER_PATH
argument_list|)
return|;
block|}
DECL|method|getKeyProviderUri (final Configuration conf, final String configKeyName)
specifier|public
specifier|static
name|URI
name|getKeyProviderUri
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|configKeyName
parameter_list|)
block|{
specifier|final
name|String
name|providerUriStr
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|configKeyName
argument_list|)
decl_stmt|;
comment|// No provider set in conf
if|if
condition|(
name|providerUriStr
operator|==
literal|null
operator|||
name|providerUriStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|providerUriStr
argument_list|)
return|;
block|}
DECL|method|createKeyProviderFromUri (final Configuration conf, final URI providerUri)
specifier|public
specifier|static
name|KeyProvider
name|createKeyProviderFromUri
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|URI
name|providerUri
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|KeyProviderFactory
operator|.
name|get
argument_list|(
name|providerUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not instantiate KeyProvider for uri: "
operator|+
name|providerUri
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyProvider
operator|.
name|isTransient
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"KeyProvider "
operator|+
name|keyProvider
operator|.
name|toString
argument_list|()
operator|+
literal|" was found but it is a transient provider."
argument_list|)
throw|;
block|}
return|return
name|keyProvider
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toJSON (KeyProvider.KeyVersion keyVersion)
specifier|public
specifier|static
name|Map
name|toJSON
parameter_list|(
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyVersion
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|,
name|keyVersion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|,
name|keyVersion
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64URLSafeString
argument_list|(
name|keyVersion
operator|.
name|getMaterial
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toJSON (EncryptedKeyVersion encryptedKeyVersion)
specifier|public
specifier|static
name|Map
name|toJSON
parameter_list|(
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
block|{
name|Map
name|json
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|encryptedKeyVersion
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|,
name|encryptedKeyVersion
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|,
name|Base64
operator|.
name|encodeBase64URLSafeString
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
name|KMSRESTConstants
operator|.
name|ENCRYPTED_KEY_VERSION_FIELD
argument_list|,
name|toJSON
argument_list|(
name|encryptedKeyVersion
operator|.
name|getEncryptedKeyVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
DECL|method|checkNotNull (T o, String name)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkNotNull
parameter_list|(
name|T
name|o
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' cannot be null"
argument_list|)
throw|;
block|}
return|return
name|o
return|;
block|}
DECL|method|checkNotEmpty (String s, String name)
specifier|public
specifier|static
name|String
name|checkNotEmpty
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|checkNotNull
argument_list|(
name|s
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter '"
operator|+
name|name
operator|+
literal|"' cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
DECL|method|parseJSONEncKeyVersions (String keyName, List valueList)
name|parseJSONEncKeyVersions
parameter_list|(
name|String
name|keyName
parameter_list|,
name|List
name|valueList
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|valueList
argument_list|,
literal|"valueList"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|ekvs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|valueList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valueList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|values
range|:
name|valueList
control|)
block|{
name|Map
name|valueMap
init|=
operator|(
name|Map
operator|)
name|values
decl_stmt|;
name|ekvs
operator|.
name|add
argument_list|(
name|parseJSONEncKeyVersion
argument_list|(
name|keyName
argument_list|,
name|valueMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ekvs
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseJSONEncKeyVersion (String keyName, Map valueMap)
specifier|public
specifier|static
name|EncryptedKeyVersion
name|parseJSONEncKeyVersion
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Map
name|valueMap
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|valueMap
argument_list|,
literal|"valueMap"
argument_list|)
expr_stmt|;
name|String
name|versionName
init|=
name|checkNotNull
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
argument_list|,
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
decl_stmt|;
name|byte
index|[]
name|iv
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|checkNotNull
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|)
argument_list|,
name|KMSRESTConstants
operator|.
name|IV_FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|encValueMap
init|=
name|checkNotNull
argument_list|(
operator|(
name|Map
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|ENCRYPTED_KEY_VERSION_FIELD
argument_list|)
argument_list|,
name|KMSRESTConstants
operator|.
name|ENCRYPTED_KEY_VERSION_FIELD
argument_list|)
decl_stmt|;
name|String
name|encVersionName
init|=
name|checkNotNull
argument_list|(
operator|(
name|String
operator|)
name|encValueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
argument_list|,
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encKeyMaterial
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|checkNotNull
argument_list|(
operator|(
name|String
operator|)
name|encValueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
argument_list|,
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|KMSClientProvider
operator|.
name|KMSEncryptedKeyVersion
argument_list|(
name|keyName
argument_list|,
name|versionName
argument_list|,
name|iv
argument_list|,
name|encVersionName
argument_list|,
name|encKeyMaterial
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseJSONKeyVersion (Map valueMap)
specifier|public
specifier|static
name|KeyProvider
operator|.
name|KeyVersion
name|parseJSONKeyVersion
parameter_list|(
name|Map
name|valueMap
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|valueMap
argument_list|,
literal|"valueMap"
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|keyVersion
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|valueMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|byte
index|[]
name|material
init|=
operator|(
name|valueMap
operator|.
name|containsKey
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
operator|)
condition|?
name|Base64
operator|.
name|decodeBase64
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|MATERIAL_FIELD
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|versionName
init|=
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSION_NAME_FIELD
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|NAME_FIELD
argument_list|)
decl_stmt|;
name|keyVersion
operator|=
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
name|keyName
argument_list|,
name|versionName
argument_list|,
name|material
argument_list|)
expr_stmt|;
block|}
return|return
name|keyVersion
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseJSONMetadata (Map valueMap)
specifier|public
specifier|static
name|KeyProvider
operator|.
name|Metadata
name|parseJSONMetadata
parameter_list|(
name|Map
name|valueMap
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|valueMap
argument_list|,
literal|"valueMap"
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|Metadata
name|metadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|valueMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|metadata
operator|=
operator|new
name|KMSClientProvider
operator|.
name|KMSMetadata
argument_list|(
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|CIPHER_FIELD
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|LENGTH_FIELD
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|DESCRIPTION_FIELD
argument_list|)
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|ATTRIBUTES_FIELD
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|(
operator|(
name|Long
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|CREATED_FIELD
argument_list|)
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|KMSRESTConstants
operator|.
name|VERSIONS_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
block|}
end_class

end_unit

