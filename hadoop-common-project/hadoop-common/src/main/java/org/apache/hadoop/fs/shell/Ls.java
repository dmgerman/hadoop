begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_comment
comment|/**  * Get a listing of all files in that match the file patterns.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Ls
class|class
name|Ls
extends|extends
name|FsCommand
block|{
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Ls
operator|.
name|class
argument_list|,
literal|"-ls"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|Lsr
operator|.
name|class
argument_list|,
literal|"-lsr"
argument_list|)
expr_stmt|;
block|}
DECL|field|OPTION_PATHONLY
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_PATHONLY
init|=
literal|"C"
decl_stmt|;
DECL|field|OPTION_DIRECTORY
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_DIRECTORY
init|=
literal|"d"
decl_stmt|;
DECL|field|OPTION_HUMAN
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_HUMAN
init|=
literal|"h"
decl_stmt|;
DECL|field|OPTION_HIDENONPRINTABLE
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_HIDENONPRINTABLE
init|=
literal|"q"
decl_stmt|;
DECL|field|OPTION_RECURSIVE
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_RECURSIVE
init|=
literal|"R"
decl_stmt|;
DECL|field|OPTION_REVERSE
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_REVERSE
init|=
literal|"r"
decl_stmt|;
DECL|field|OPTION_MTIME
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_MTIME
init|=
literal|"t"
decl_stmt|;
DECL|field|OPTION_ATIME
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_ATIME
init|=
literal|"u"
decl_stmt|;
DECL|field|OPTION_SIZE
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SIZE
init|=
literal|"S"
decl_stmt|;
DECL|field|OPTION_ECPOLICY
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_ECPOLICY
init|=
literal|"e"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"ls"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"[-"
operator|+
name|OPTION_PATHONLY
operator|+
literal|"] [-"
operator|+
name|OPTION_DIRECTORY
operator|+
literal|"] [-"
operator|+
name|OPTION_HUMAN
operator|+
literal|"] [-"
operator|+
name|OPTION_HIDENONPRINTABLE
operator|+
literal|"] [-"
operator|+
name|OPTION_RECURSIVE
operator|+
literal|"] [-"
operator|+
name|OPTION_MTIME
operator|+
literal|"] [-"
operator|+
name|OPTION_SIZE
operator|+
literal|"] [-"
operator|+
name|OPTION_REVERSE
operator|+
literal|"] [-"
operator|+
name|OPTION_ATIME
operator|+
literal|"] [-"
operator|+
name|OPTION_ECPOLICY
operator|+
literal|"] [<path> ...]"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"List the contents that match the specified file pattern. If "
operator|+
literal|"path is not specified, the contents of /user/<currentUser> "
operator|+
literal|"will be listed. For a directory a list of its direct children "
operator|+
literal|"is returned (unless -"
operator|+
name|OPTION_DIRECTORY
operator|+
literal|" option is specified).\n\n"
operator|+
literal|"Directory entries are of the form:\n"
operator|+
literal|"\tpermissions - userId groupId sizeOfDirectory(in bytes) modificationDate(yyyy-MM-dd HH:mm) directoryName\n\n"
operator|+
literal|"and file entries are of the form:\n"
operator|+
literal|"\tpermissions numberOfReplicas userId groupId sizeOfFile(in bytes) modificationDate(yyyy-MM-dd HH:mm) fileName\n\n"
operator|+
literal|"  -"
operator|+
name|OPTION_PATHONLY
operator|+
literal|"  Display the paths of files and directories only.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_DIRECTORY
operator|+
literal|"  Directories are listed as plain files.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_HUMAN
operator|+
literal|"  Formats the sizes of files in a human-readable fashion\n"
operator|+
literal|"      rather than a number of bytes.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_HIDENONPRINTABLE
operator|+
literal|"  Print ? instead of non-printable characters.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_RECURSIVE
operator|+
literal|"  Recursively list the contents of directories.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_MTIME
operator|+
literal|"  Sort files by modification time (most recent first).\n"
operator|+
literal|"  -"
operator|+
name|OPTION_SIZE
operator|+
literal|"  Sort files by size.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_REVERSE
operator|+
literal|"  Reverse the order of the sort.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_ATIME
operator|+
literal|"  Use time of last access instead of modification for\n"
operator|+
literal|"      display and sorting.\n"
operator|+
literal|"  -"
operator|+
name|OPTION_ECPOLICY
operator|+
literal|"  Display the erasure coding policy of files and directories.\n"
decl_stmt|;
DECL|field|dateFormat
specifier|protected
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|maxRepl
DECL|field|maxLen
DECL|field|maxOwner
DECL|field|maxGroup
specifier|protected
name|int
name|maxRepl
init|=
literal|3
decl_stmt|,
name|maxLen
init|=
literal|10
decl_stmt|,
name|maxOwner
init|=
literal|0
decl_stmt|,
name|maxGroup
init|=
literal|0
decl_stmt|;
DECL|field|lineFormat
specifier|protected
name|String
name|lineFormat
decl_stmt|;
DECL|field|pathOnly
specifier|private
name|boolean
name|pathOnly
decl_stmt|;
DECL|field|dirRecurse
specifier|protected
name|boolean
name|dirRecurse
decl_stmt|;
DECL|field|orderReverse
specifier|private
name|boolean
name|orderReverse
decl_stmt|;
DECL|field|orderTime
specifier|private
name|boolean
name|orderTime
decl_stmt|;
DECL|field|orderSize
specifier|private
name|boolean
name|orderSize
decl_stmt|;
DECL|field|useAtime
specifier|private
name|boolean
name|useAtime
decl_stmt|;
DECL|field|displayECPolicy
specifier|private
name|boolean
name|displayECPolicy
decl_stmt|;
DECL|field|orderComparator
specifier|private
name|Comparator
argument_list|<
name|PathData
argument_list|>
name|orderComparator
decl_stmt|;
DECL|field|humanReadable
specifier|protected
name|boolean
name|humanReadable
init|=
literal|false
decl_stmt|;
comment|/** Whether to print ? instead of non-printable characters. */
DECL|field|hideNonPrintable
specifier|private
name|boolean
name|hideNonPrintable
init|=
literal|false
decl_stmt|;
DECL|method|Ls ()
specifier|protected
name|Ls
parameter_list|()
block|{}
DECL|method|Ls (Configuration conf)
specifier|protected
name|Ls
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|formatSize (long size)
specifier|protected
name|String
name|formatSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
return|return
name|humanReadable
condition|?
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|long2String
argument_list|(
name|size
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|OPTION_PATHONLY
argument_list|,
name|OPTION_DIRECTORY
argument_list|,
name|OPTION_HUMAN
argument_list|,
name|OPTION_HIDENONPRINTABLE
argument_list|,
name|OPTION_RECURSIVE
argument_list|,
name|OPTION_REVERSE
argument_list|,
name|OPTION_MTIME
argument_list|,
name|OPTION_SIZE
argument_list|,
name|OPTION_ATIME
argument_list|,
name|OPTION_ECPOLICY
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|pathOnly
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_PATHONLY
argument_list|)
expr_stmt|;
name|dirRecurse
operator|=
operator|!
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_DIRECTORY
argument_list|)
expr_stmt|;
name|setRecursive
argument_list|(
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_RECURSIVE
argument_list|)
operator|&&
name|dirRecurse
argument_list|)
expr_stmt|;
name|humanReadable
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_HUMAN
argument_list|)
expr_stmt|;
name|hideNonPrintable
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_HIDENONPRINTABLE
argument_list|)
expr_stmt|;
name|orderReverse
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_REVERSE
argument_list|)
expr_stmt|;
name|orderTime
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_MTIME
argument_list|)
expr_stmt|;
name|orderSize
operator|=
operator|!
name|orderTime
operator|&&
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_SIZE
argument_list|)
expr_stmt|;
name|useAtime
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_ATIME
argument_list|)
expr_stmt|;
name|displayECPolicy
operator|=
name|cf
operator|.
name|getOpt
argument_list|(
name|OPTION_ECPOLICY
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|.
name|add
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
expr_stmt|;
name|initialiseOrderComparator
argument_list|()
expr_stmt|;
block|}
comment|/**    * Should display only paths of files and directories.    * @return true display paths only, false display all fields    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isPathOnly ()
name|boolean
name|isPathOnly
parameter_list|()
block|{
return|return
name|this
operator|.
name|pathOnly
return|;
block|}
comment|/**    * Should the contents of the directory be shown or just the directory?    * @return true if directory contents, false if just directory    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isDirRecurse ()
name|boolean
name|isDirRecurse
parameter_list|()
block|{
return|return
name|this
operator|.
name|dirRecurse
return|;
block|}
comment|/**    * Should file sizes be returned in human readable format rather than bytes?    * @return true is human readable, false if bytes    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isHumanReadable ()
name|boolean
name|isHumanReadable
parameter_list|()
block|{
return|return
name|this
operator|.
name|humanReadable
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isHideNonPrintable ()
specifier|private
name|boolean
name|isHideNonPrintable
parameter_list|()
block|{
return|return
name|hideNonPrintable
return|;
block|}
comment|/**    * Should directory contents be displayed in reverse order    * @return true reverse order, false default order    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isOrderReverse ()
name|boolean
name|isOrderReverse
parameter_list|()
block|{
return|return
name|this
operator|.
name|orderReverse
return|;
block|}
comment|/**    * Should directory contents be displayed in mtime order.    * @return true mtime order, false default order    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isOrderTime ()
name|boolean
name|isOrderTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|orderTime
return|;
block|}
comment|/**    * Should directory contents be displayed in size order.    * @return true size order, false default order    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isOrderSize ()
name|boolean
name|isOrderSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|orderSize
return|;
block|}
comment|/**    * Should access time be used rather than modification time.    * @return true use access time, false use modification time    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|isUseAtime ()
name|boolean
name|isUseAtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|useAtime
return|;
block|}
annotation|@
name|Override
DECL|method|processPathArgument (PathData item)
specifier|protected
name|void
name|processPathArgument
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
comment|// implicitly recurse once for cmdline directories
if|if
condition|(
name|dirRecurse
operator|&&
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|recursePath
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|processPathArgument
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isSorted ()
specifier|protected
name|boolean
name|isSorted
parameter_list|()
block|{
comment|// use the non-iterative method for listing because explicit sorting is
comment|// required based on time/size/reverse or Total number of entries
comment|// required to print summary first when non-recursive.
return|return
operator|!
name|isRecursive
argument_list|()
operator|||
name|isOrderTime
argument_list|()
operator|||
name|isOrderSize
argument_list|()
operator|||
name|isOrderReverse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getListingGroupSize ()
specifier|protected
name|int
name|getListingGroupSize
parameter_list|()
block|{
if|if
condition|(
name|pathOnly
condition|)
block|{
comment|// If there is a need of printing only paths, then no grouping required
return|return
literal|0
return|;
block|}
comment|/*      * LS output should be formatted properly. Grouping 100 items and formatting      * the output to reduce the creation of huge sized arrays. This method will      * be called only when recursive is set.      */
return|return
literal|100
return|;
block|}
annotation|@
name|Override
DECL|method|processPaths (PathData parent, PathData... items)
specifier|protected
name|void
name|processPaths
parameter_list|(
name|PathData
name|parent
parameter_list|,
name|PathData
modifier|...
name|items
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|isRecursive
argument_list|()
operator|&&
name|items
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|pathOnly
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|items
operator|.
name|length
operator|+
literal|" items"
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|items
argument_list|,
name|getOrderComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pathOnly
condition|)
block|{
name|adjustColumnWidths
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|processPaths
argument_list|(
name|parent
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pathOnly
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileStatus
name|stat
init|=
name|item
operator|.
name|stat
decl_stmt|;
if|if
condition|(
name|displayECPolicy
condition|)
block|{
name|ContentSummary
name|contentSummary
init|=
name|item
operator|.
name|fs
operator|.
name|getContentSummary
argument_list|(
name|item
operator|.
name|path
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|String
operator|.
name|format
argument_list|(
name|lineFormat
argument_list|,
operator|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
operator|)
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
operator|+
operator|(
name|stat
operator|.
name|hasAcl
argument_list|()
condition|?
literal|"+"
else|:
literal|" "
operator|)
argument_list|,
operator|(
name|stat
operator|.
name|isFile
argument_list|()
condition|?
name|stat
operator|.
name|getReplication
argument_list|()
else|:
literal|"-"
operator|)
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|,
name|contentSummary
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|,
name|formatSize
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|isUseAtime
argument_list|()
condition|?
name|stat
operator|.
name|getAccessTime
argument_list|()
else|:
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|isHideNonPrintable
argument_list|()
condition|?
operator|new
name|PrintableString
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|item
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|line
init|=
name|String
operator|.
name|format
argument_list|(
name|lineFormat
argument_list|,
operator|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
operator|)
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
operator|+
operator|(
name|stat
operator|.
name|hasAcl
argument_list|()
condition|?
literal|"+"
else|:
literal|" "
operator|)
argument_list|,
operator|(
name|stat
operator|.
name|isFile
argument_list|()
condition|?
name|stat
operator|.
name|getReplication
argument_list|()
else|:
literal|"-"
operator|)
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|,
name|formatSize
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|isUseAtime
argument_list|()
condition|?
name|stat
operator|.
name|getAccessTime
argument_list|()
else|:
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|isHideNonPrintable
argument_list|()
condition|?
operator|new
name|PrintableString
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|item
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute column widths and rebuild the format string    * @param items to find the max field width for each column    */
DECL|method|adjustColumnWidths (PathData items[])
specifier|private
name|void
name|adjustColumnWidths
parameter_list|(
name|PathData
name|items
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|PathData
name|item
range|:
name|items
control|)
block|{
name|FileStatus
name|stat
init|=
name|item
operator|.
name|stat
decl_stmt|;
name|maxRepl
operator|=
name|maxLength
argument_list|(
name|maxRepl
argument_list|,
name|stat
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|maxLen
operator|=
name|maxLength
argument_list|(
name|maxLen
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|maxOwner
operator|=
name|maxLength
argument_list|(
name|maxOwner
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|maxGroup
operator|=
name|maxLength
argument_list|(
name|maxGroup
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|fmt
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%s%s"
argument_list|)
expr_stmt|;
comment|// permission string
name|fmt
operator|.
name|append
argument_list|(
literal|"%"
operator|+
name|maxRepl
operator|+
literal|"s "
argument_list|)
expr_stmt|;
comment|// Do not use '%-0s' as a formatting conversion, since it will throw a
comment|// a MissingFormatWidthException if it is used in String.format().
comment|// http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#intFlags
if|if
condition|(
name|displayECPolicy
condition|)
block|{
name|int
name|maxEC
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PathData
name|item
range|:
name|items
control|)
block|{
name|ContentSummary
name|contentSummary
init|=
name|item
operator|.
name|fs
operator|.
name|getContentSummary
argument_list|(
name|item
operator|.
name|path
argument_list|)
decl_stmt|;
name|maxEC
operator|=
name|maxLength
argument_list|(
name|maxEC
argument_list|,
name|contentSummary
operator|.
name|getErasureCodingPolicy
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fmt
operator|.
name|append
argument_list|(
literal|" %"
operator|+
name|maxEC
operator|+
literal|"s "
argument_list|)
expr_stmt|;
block|}
name|fmt
operator|.
name|append
argument_list|(
operator|(
name|maxOwner
operator|>
literal|0
operator|)
condition|?
literal|"%-"
operator|+
name|maxOwner
operator|+
literal|"s "
else|:
literal|"%s"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
operator|(
name|maxGroup
operator|>
literal|0
operator|)
condition|?
literal|"%-"
operator|+
name|maxGroup
operator|+
literal|"s "
else|:
literal|"%s"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%"
operator|+
name|maxLen
operator|+
literal|"s "
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%s %s"
argument_list|)
expr_stmt|;
comment|// mod time& path
name|lineFormat
operator|=
name|fmt
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|maxLength (int n, Object value)
specifier|private
name|int
name|maxLength
parameter_list|(
name|int
name|n
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|n
argument_list|,
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|length
argument_list|()
else|:
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get the comparator to be used for sorting files.    * @return comparator    */
DECL|method|getOrderComparator ()
specifier|private
name|Comparator
argument_list|<
name|PathData
argument_list|>
name|getOrderComparator
parameter_list|()
block|{
return|return
name|this
operator|.
name|orderComparator
return|;
block|}
comment|/**    * Initialise the comparator to be used for sorting files. If multiple options    * are selected then the order is chosen in the following precedence: -    * Modification time (or access time if requested) - File size - File name    */
DECL|method|initialiseOrderComparator ()
specifier|private
name|void
name|initialiseOrderComparator
parameter_list|()
block|{
if|if
condition|(
name|isOrderTime
argument_list|()
condition|)
block|{
comment|// mtime is ordered latest date first in line with the unix ls -t command
name|this
operator|.
name|orderComparator
operator|=
operator|new
name|Comparator
argument_list|<
name|PathData
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PathData
name|o1
parameter_list|,
name|PathData
name|o2
parameter_list|)
block|{
name|Long
name|o1Time
init|=
operator|(
name|isUseAtime
argument_list|()
condition|?
name|o1
operator|.
name|stat
operator|.
name|getAccessTime
argument_list|()
else|:
name|o1
operator|.
name|stat
operator|.
name|getModificationTime
argument_list|()
operator|)
decl_stmt|;
name|Long
name|o2Time
init|=
operator|(
name|isUseAtime
argument_list|()
condition|?
name|o2
operator|.
name|stat
operator|.
name|getAccessTime
argument_list|()
else|:
name|o2
operator|.
name|stat
operator|.
name|getModificationTime
argument_list|()
operator|)
decl_stmt|;
return|return
name|o2Time
operator|.
name|compareTo
argument_list|(
name|o1Time
argument_list|)
operator|*
operator|(
name|isOrderReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isOrderSize
argument_list|()
condition|)
block|{
comment|// size is ordered largest first in line with the unix ls -S command
name|this
operator|.
name|orderComparator
operator|=
operator|new
name|Comparator
argument_list|<
name|PathData
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PathData
name|o1
parameter_list|,
name|PathData
name|o2
parameter_list|)
block|{
name|Long
name|o1Length
init|=
name|o1
operator|.
name|stat
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Long
name|o2Length
init|=
name|o2
operator|.
name|stat
operator|.
name|getLen
argument_list|()
decl_stmt|;
return|return
name|o2Length
operator|.
name|compareTo
argument_list|(
name|o1Length
argument_list|)
operator|*
operator|(
name|isOrderReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|orderComparator
operator|=
operator|new
name|Comparator
argument_list|<
name|PathData
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PathData
name|o1
parameter_list|,
name|PathData
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
operator|*
operator|(
name|isOrderReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
comment|/**    * Get a recursive listing of all files in that match the file patterns.    * Same as "-ls -R"    */
DECL|class|Lsr
specifier|public
specifier|static
class|class
name|Lsr
extends|extends
name|Ls
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"lsr"
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|args
operator|.
name|addFirst
argument_list|(
literal|"-R"
argument_list|)
expr_stmt|;
name|super
operator|.
name|processOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReplacementCommand ()
specifier|public
name|String
name|getReplacementCommand
parameter_list|()
block|{
return|return
literal|"ls -R"
return|;
block|}
block|}
block|}
end_class

end_unit

