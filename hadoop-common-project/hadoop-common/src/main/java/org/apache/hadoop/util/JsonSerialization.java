begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Support for marshalling objects to and from JSON.  *  * It constructs an object mapper as an instance field.  * and synchronizes access to those methods  * which use the mapper.  *  * This class was extracted from  * {@code org.apache.hadoop.registry.client.binding.JsonSerDeser},  * which is now a subclass of this class.  * @param<T> Type to marshal.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JsonSerialization
specifier|public
class|class
name|JsonSerialization
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonSerialization
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|classType
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|classType
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
DECL|field|MAP_READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|MAP_READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * @return an ObjectWriter which pretty-prints its output    */
DECL|method|writer ()
specifier|public
specifier|static
name|ObjectWriter
name|writer
parameter_list|()
block|{
return|return
name|WRITER
return|;
block|}
comment|/**    * @return an ObjectReader which returns simple Maps.    */
DECL|method|mapReader ()
specifier|public
specifier|static
name|ObjectReader
name|mapReader
parameter_list|()
block|{
return|return
name|MAP_READER
return|;
block|}
comment|/**    * Create an instance bound to a specific type.    * @param classType class to marshall    * @param failOnUnknownProperties fail if an unknown property is encountered.    * @param pretty generate pretty (indented) output?    */
DECL|method|JsonSerialization (Class<T> classType, boolean failOnUnknownProperties, boolean pretty)
specifier|public
name|JsonSerialization
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|classType
parameter_list|,
name|boolean
name|failOnUnknownProperties
parameter_list|,
name|boolean
name|pretty
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|classType
operator|!=
literal|null
argument_list|,
literal|"null classType"
argument_list|)
expr_stmt|;
name|this
operator|.
name|classType
operator|=
name|classType
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|,
name|failOnUnknownProperties
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|,
name|pretty
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the simple name of the class type to be marshalled.    * @return the name of the class being marshalled    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|classType
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
comment|/**    * Get the mapper of this class.    * @return the mapper    */
DECL|method|getMapper ()
specifier|public
name|ObjectMapper
name|getMapper
parameter_list|()
block|{
return|return
name|mapper
return|;
block|}
comment|/**    * Convert from JSON.    *    * @param json input    * @return the parsed JSON    * @throws IOException IO problems    * @throws JsonParseException If the input is not well-formatted    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromJson (String json)
specifier|public
specifier|synchronized
name|T
name|fromJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
if|if
condition|(
name|json
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"No data"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json : {}\n{}"
argument_list|,
name|e
argument_list|,
name|json
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Read from an input stream.    * @param stream stream to read from    * @return the parsed entity    * @throws IOException IO problems    * @throws JsonParseException If the input is not well-formatted    * @throws JsonMappingException failure to map from the JSON to this class    */
DECL|method|fromJsonStream (InputStream stream)
specifier|public
specifier|synchronized
name|T
name|fromJsonStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|stream
argument_list|,
name|classType
argument_list|)
return|;
block|}
comment|/**    * Load from a JSON text file.    * @param jsonFile input file    * @return the parsed JSON    * @throws IOException IO problems    * @throws JsonParseException If the input is not well-formatted    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|load (File jsonFile)
specifier|public
specifier|synchronized
name|T
name|load
parameter_list|(
name|File
name|jsonFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
if|if
condition|(
operator|!
name|jsonFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not a file: "
operator|+
name|jsonFile
argument_list|)
throw|;
block|}
if|if
condition|(
name|jsonFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"File is empty: "
operator|+
name|jsonFile
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonFile
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json file {}"
argument_list|,
name|jsonFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Save to a local file. Any existing file is overwritten unless    * the OS blocks that.    * @param file file    * @param instance instance    * @throws IOException IO exception    */
DECL|method|save (File file, T instance)
specifier|public
name|void
name|save
parameter_list|(
name|File
name|file
parameter_list|,
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|writeJsonAsBytes
argument_list|(
name|instance
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert from a JSON file.    * @param resource input file    * @return the parsed JSON    * @throws IOException IO problems    * @throws JsonParseException If the input is not well-formatted    * @throws JsonMappingException failure to map from the JSON to this class    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"IOResourceOpenedButNotSafelyClosed"
block|}
argument_list|)
DECL|method|fromResource (String resource)
specifier|public
specifier|synchronized
name|T
name|fromResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
block|{
try|try
init|(
name|InputStream
name|resStream
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
init|)
block|{
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|resource
argument_list|)
throw|;
block|}
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|resStream
argument_list|,
name|classType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while parsing json resource {}"
argument_list|,
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * clone by converting to JSON and back again.    * This is much less efficient than any Java clone process.    * @param instance instance to duplicate    * @return a new instance    * @throws IOException IO problems.    */
DECL|method|fromInstance (T instance)
specifier|public
name|T
name|fromInstance
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromJson
argument_list|(
name|toJson
argument_list|(
name|instance
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Load from a Hadoop filesystem.    * There's a check for data availability after the file is open, by    * raising an EOFException if stream.available == 0.    * This allows for a meaningful exception without the round trip overhead    * of a getFileStatus call before opening the file. It may be brittle    * against an FS stream which doesn't return a value here, but the    * standard filesystems all do.    * JSON parsing and mapping problems    * are converted to IOEs.    * @param fs filesystem    * @param path path    * @return a loaded object    * @throws IOException IO or JSON parse problems    */
DECL|method|load (FileSystem fs, Path path)
specifier|public
name|T
name|load
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataInputStream
name|dataInputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
comment|// throw an EOF exception if there is no data available.
if|if
condition|(
name|dataInputStream
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"No data in "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|fromJsonStream
argument_list|(
name|dataInputStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to read JSON file \"%s\": %s"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Save to a Hadoop filesystem.    * @param fs filesystem    * @param path path    * @param overwrite should any existing file be overwritten    * @throws IOException IO exception    */
DECL|method|save (FileSystem fs, Path path, T instance, boolean overwrite)
specifier|public
name|void
name|save
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|T
name|instance
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|writeJsonAsBytes
argument_list|(
name|instance
argument_list|,
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|overwrite
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the JSON as bytes, then close the file.    * @param dataOutputStream an output stream that will always be closed    * @throws IOException on any failure    */
DECL|method|writeJsonAsBytes (T instance, OutputStream dataOutputStream)
specifier|private
name|void
name|writeJsonAsBytes
parameter_list|(
name|T
name|instance
parameter_list|,
name|OutputStream
name|dataOutputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dataOutputStream
operator|.
name|write
argument_list|(
name|toBytes
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dataOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Convert JSON to bytes.    * @param instance instance to convert    * @return a byte array    * @throws IOException IO problems    */
DECL|method|toBytes (T instance)
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mapper
operator|.
name|writeValueAsBytes
argument_list|(
name|instance
argument_list|)
return|;
block|}
comment|/**    * Deserialize from a byte array.    * @param bytes byte array    * @throws IOException IO problems    * @throws EOFException not enough data    */
DECL|method|fromBytes (byte[] bytes)
specifier|public
name|T
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fromJson
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert an instance to a JSON string.    * @param instance instance to convert    * @return a JSON string description    * @throws JsonProcessingException Json generation problems    */
DECL|method|toJson (T instance)
specifier|public
specifier|synchronized
name|String
name|toJson
parameter_list|(
name|T
name|instance
parameter_list|)
throws|throws
name|JsonProcessingException
block|{
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|instance
argument_list|)
return|;
block|}
comment|/**    * Convert an instance to a string form for output. This is a robust    * operation which will convert any JSON-generating exceptions into    * error text.    * @param instance non-null instance    * @return a JSON string    */
DECL|method|toString (T instance)
specifier|public
name|String
name|toString
parameter_list|(
name|T
name|instance
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|instance
operator|!=
literal|null
argument_list|,
literal|"Null instance argument"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|toJson
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
return|return
literal|"Failed to convert to a string: "
operator|+
name|e
return|;
block|}
block|}
block|}
end_class

end_unit

