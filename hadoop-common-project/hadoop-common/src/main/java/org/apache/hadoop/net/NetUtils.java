begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NetUtils
specifier|public
class|class
name|NetUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NetUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hostToResolved
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostToResolved
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** text to point users elsewhere: {@value} */
DECL|field|FOR_MORE_DETAILS_SEE
specifier|private
specifier|static
specifier|final
name|String
name|FOR_MORE_DETAILS_SEE
init|=
literal|" For more details see:  "
decl_stmt|;
comment|/** text included in wrapped exceptions if the host is null: {@value} */
DECL|field|UNKNOWN_HOST
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN_HOST
init|=
literal|"(unknown)"
decl_stmt|;
comment|/** Base URL of the Hadoop Wiki: {@value} */
DECL|field|HADOOP_WIKI
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_WIKI
init|=
literal|"http://wiki.apache.org/hadoop/"
decl_stmt|;
comment|/**    * Get the socket factory for the given class according to its    * configuration parameter    *<tt>hadoop.rpc.socket.factory.class.&lt;ClassName&gt;</tt>. When no    * such parameter exists then fall back on the default socket factory as    * configured by<tt>hadoop.rpc.socket.factory.class.default</tt>. If    * this default socket factory is not configured, then fall back on the JVM    * default socket factory.    *     * @param conf the configuration    * @param clazz the class (usually a {@link VersionedProtocol})    * @return a socket factory    */
DECL|method|getSocketFactory (Configuration conf, Class<?> clazz)
specifier|public
specifier|static
name|SocketFactory
name|getSocketFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|SocketFactory
name|factory
init|=
literal|null
decl_stmt|;
name|String
name|propValue
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.rpc.socket.factory.class."
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|propValue
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|propValue
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
name|factory
operator|=
name|getSocketFactoryFromProperty
argument_list|(
name|conf
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
name|factory
operator|=
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
comment|/**    * Get the default socket factory as specified by the configuration    * parameter<tt>hadoop.rpc.socket.factory.default</tt>    *     * @param conf the configuration    * @return the default socket factory as specified in the configuration or    *         the JVM default socket factory if the configuration does not    *         contain a default socket factory property.    */
DECL|method|getDefaultSocketFactory (Configuration conf)
specifier|public
specifier|static
name|SocketFactory
name|getDefaultSocketFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|propValue
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.rpc.socket.factory.class.default"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|propValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|propValue
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
return|return
name|SocketFactory
operator|.
name|getDefault
argument_list|()
return|;
return|return
name|getSocketFactoryFromProperty
argument_list|(
name|conf
argument_list|,
name|propValue
argument_list|)
return|;
block|}
comment|/**    * Get the socket factory corresponding to the given proxy URI. If the    * given proxy URI corresponds to an absence of configuration parameter,    * returns null. If the URI is malformed raises an exception.    *     * @param propValue the property which is the class name of the    *        SocketFactory to instantiate; assumed non null and non empty.    * @return a socket factory as defined in the property value.    */
DECL|method|getSocketFactoryFromProperty ( Configuration conf, String propValue)
specifier|public
specifier|static
name|SocketFactory
name|getSocketFactoryFromProperty
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|propValue
argument_list|)
decl_stmt|;
return|return
operator|(
name|SocketFactory
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|theClass
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Socket Factory class not found: "
operator|+
name|cnfe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Util method to build socket addr from either:    *<host>:<post>    *<fs>://<host>:<port>/<path>    */
DECL|method|createSocketAddr (String target)
specifier|public
specifier|static
name|InetSocketAddress
name|createSocketAddr
parameter_list|(
name|String
name|target
parameter_list|)
block|{
return|return
name|createSocketAddr
argument_list|(
name|target
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Util method to build socket addr from either:    *<host>    *<host>:<post>    *<fs>://<host>:<port>/<path>    */
DECL|method|createSocketAddr (String target, int defaultPort)
specifier|public
specifier|static
name|InetSocketAddress
name|createSocketAddr
parameter_list|(
name|String
name|target
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
return|return
name|createSocketAddr
argument_list|(
name|target
argument_list|,
name|defaultPort
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create an InetSocketAddress from the given target string and    * default port. If the string cannot be parsed correctly, the    *<code>configName</code> parameter is used as part of the    * exception message, allowing the user to better diagnose    * the misconfiguration.    *    * @param target a string of either "host" or "host:port"    * @param defaultPort the default port if<code>target</code> does not    *                    include a port number    * @param configName the name of the configuration from which    *<code>target</code> was loaded. This is used in the    *                   exception message in the case that parsing fails.     */
DECL|method|createSocketAddr (String target, int defaultPort, String configName)
specifier|public
specifier|static
name|InetSocketAddress
name|createSocketAddr
parameter_list|(
name|String
name|target
parameter_list|,
name|int
name|defaultPort
parameter_list|,
name|String
name|configName
parameter_list|)
block|{
name|String
name|helpText
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|configName
operator|!=
literal|null
condition|)
block|{
name|helpText
operator|=
literal|" (configuration property '"
operator|+
name|configName
operator|+
literal|"')"
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Target address cannot be null."
operator|+
name|helpText
argument_list|)
throw|;
block|}
name|boolean
name|hasScheme
init|=
name|target
operator|.
name|contains
argument_list|(
literal|"://"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
name|hasScheme
condition|?
name|URI
operator|.
name|create
argument_list|(
name|target
argument_list|)
else|:
name|URI
operator|.
name|create
argument_list|(
literal|"dummyscheme://"
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Does not contain a valid host:port authority: "
operator|+
name|target
operator|+
name|helpText
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
name|port
operator|=
name|defaultPort
expr_stmt|;
block|}
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|host
operator|==
literal|null
operator|)
operator|||
operator|(
name|port
operator|<
literal|0
operator|)
operator|||
operator|(
operator|!
name|hasScheme
operator|&&
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Does not contain a valid host:port authority: "
operator|+
name|target
operator|+
name|helpText
argument_list|)
throw|;
block|}
return|return
name|createSocketAddrForHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
comment|/**    * Create a socket address with the given host and port.  The hostname    * might be replaced with another host that was set via    * {@link #addStaticResolution(String, String)}.  The value of    * hadoop.security.token.service.use_ip will determine whether the    * standard java host resolver is used, or if the fully qualified resolver    * is used.    * @param host the hostname or IP use to instantiate the object    * @param port the port number    * @return InetSocketAddress    */
DECL|method|createSocketAddrForHost (String host, int port)
specifier|public
specifier|static
name|InetSocketAddress
name|createSocketAddrForHost
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|staticHost
init|=
name|getStaticResolution
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|String
name|resolveHost
init|=
operator|(
name|staticHost
operator|!=
literal|null
operator|)
condition|?
name|staticHost
else|:
name|host
decl_stmt|;
name|InetSocketAddress
name|addr
decl_stmt|;
try|try
block|{
name|InetAddress
name|iaddr
init|=
name|SecurityUtil
operator|.
name|getByName
argument_list|(
name|resolveHost
argument_list|)
decl_stmt|;
comment|// if there is a static entry for the host, make the returned
comment|// address look like the original given host
if|if
condition|(
name|staticHost
operator|!=
literal|null
condition|)
block|{
name|iaddr
operator|=
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|host
argument_list|,
name|iaddr
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|iaddr
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|addr
operator|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|addr
return|;
block|}
comment|/**    * Resolve the uri's hostname and add the default port if not in the uri    * @param uri to resolve    * @param defaultPort if none is given    * @return URI    */
DECL|method|getCanonicalUri (URI uri, int defaultPort)
specifier|public
specifier|static
name|URI
name|getCanonicalUri
parameter_list|(
name|URI
name|uri
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
comment|// skip if there is no authority, ie. "file" scheme or relative uri
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
name|String
name|fqHost
init|=
name|canonicalizeHost
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// short out if already canonical with a port
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|fqHost
argument_list|)
operator|&&
name|port
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|uri
return|;
block|}
comment|// reconstruct the uri with the canonical host and port
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|fqHost
argument_list|,
operator|(
name|port
operator|==
operator|-
literal|1
operator|)
condition|?
name|defaultPort
else|:
name|port
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|uri
operator|.
name|getQuery
argument_list|()
argument_list|,
name|uri
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|uri
return|;
block|}
comment|// cache the canonicalized hostnames;  the cache currently isn't expired,
comment|// but the canonicals will only change if the host's resolver configuration
comment|// changes
DECL|field|canonicalizedHostCache
specifier|private
specifier|static
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|canonicalizedHostCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|canonicalizeHost (String host)
specifier|private
specifier|static
name|String
name|canonicalizeHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
comment|// check if the host has already been canonicalized
name|String
name|fqHost
init|=
name|canonicalizedHostCache
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqHost
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|fqHost
operator|=
name|SecurityUtil
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
operator|.
name|getHostName
argument_list|()
expr_stmt|;
comment|// slight race condition, but won't hurt
name|canonicalizedHostCache
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|fqHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|fqHost
operator|=
name|host
expr_stmt|;
block|}
block|}
return|return
name|fqHost
return|;
block|}
comment|/**    * Adds a static resolution for host. This can be used for setting up    * hostnames with names that are fake to point to a well known host. For e.g.    * in some testcases we require to have daemons with different hostnames    * running on the same machine. In order to create connections to these    * daemons, one can set up mappings from those hostnames to "localhost".    * {@link NetUtils#getStaticResolution(String)} can be used to query for    * the actual hostname.     * @param host    * @param resolvedName    */
DECL|method|addStaticResolution (String host, String resolvedName)
specifier|public
specifier|static
name|void
name|addStaticResolution
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|resolvedName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|hostToResolved
init|)
block|{
name|hostToResolved
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|resolvedName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retrieves the resolved name for the passed host. The resolved name must    * have been set earlier using     * {@link NetUtils#addStaticResolution(String, String)}    * @param host    * @return the resolution    */
DECL|method|getStaticResolution (String host)
specifier|public
specifier|static
name|String
name|getStaticResolution
parameter_list|(
name|String
name|host
parameter_list|)
block|{
synchronized|synchronized
init|(
name|hostToResolved
init|)
block|{
return|return
name|hostToResolved
operator|.
name|get
argument_list|(
name|host
argument_list|)
return|;
block|}
block|}
comment|/**    * This is used to get all the resolutions that were added using    * {@link NetUtils#addStaticResolution(String, String)}. The return    * value is a List each element of which contains an array of String     * of the form String[0]=hostname, String[1]=resolved-hostname    * @return the list of resolutions    */
DECL|method|getAllStaticResolutions ()
specifier|public
specifier|static
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|getAllStaticResolutions
parameter_list|()
block|{
synchronized|synchronized
init|(
name|hostToResolved
init|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|hostToResolved
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|entries
control|)
block|{
name|l
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|e
operator|.
name|getKey
argument_list|()
block|,
name|e
operator|.
name|getValue
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
block|}
comment|/**    * Returns InetSocketAddress that a client can use to     * connect to the server. Server.getListenerAddress() is not correct when    * the server binds to "0.0.0.0". This returns "127.0.0.1:port" when    * the getListenerAddress() returns "0.0.0.0:port".    *     * @param server    * @return socket address that a client can use to connect to the server.    */
DECL|method|getConnectAddress (Server server)
specifier|public
specifier|static
name|InetSocketAddress
name|getConnectAddress
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|InetSocketAddress
name|addr
init|=
name|server
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|isAnyLocalAddress
argument_list|()
condition|)
block|{
name|addr
operator|=
name|createSocketAddrForHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|addr
return|;
block|}
comment|/**    * Same as getInputStream(socket, socket.getSoTimeout()).<br><br>    *     * From documentation for {@link #getInputStream(Socket, long)}:<br>    * Returns InputStream for the socket. If the socket has an associated    * SocketChannel then it returns a     * {@link SocketInputStream} with the given timeout. If the socket does not    * have a channel, {@link Socket#getInputStream()} is returned. In the later    * case, the timeout argument is ignored and the timeout set with     * {@link Socket#setSoTimeout(int)} applies for reads.<br><br>    *    * Any socket created using socket factories returned by {@link NetUtils},    * must use this interface instead of {@link Socket#getInputStream()}.    *         * @see #getInputStream(Socket, long)    *     * @param socket    * @return InputStream for reading from the socket.    * @throws IOException    */
DECL|method|getInputStream (Socket socket)
specifier|public
specifier|static
name|InputStream
name|getInputStream
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|(
name|socket
argument_list|,
name|socket
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns InputStream for the socket. If the socket has an associated    * SocketChannel then it returns a     * {@link SocketInputStream} with the given timeout. If the socket does not    * have a channel, {@link Socket#getInputStream()} is returned. In the later    * case, the timeout argument is ignored and the timeout set with     * {@link Socket#setSoTimeout(int)} applies for reads.<br><br>    *     * Any socket created using socket factories returned by {@link NetUtils},    * must use this interface instead of {@link Socket#getInputStream()}.    *         * @see Socket#getChannel()    *     * @param socket    * @param timeout timeout in milliseconds. This may not always apply. zero    *        for waiting as long as necessary.    * @return InputStream for reading from the socket.    * @throws IOException    */
DECL|method|getInputStream (Socket socket, long timeout)
specifier|public
specifier|static
name|InputStream
name|getInputStream
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|socket
operator|.
name|getChannel
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|socket
operator|.
name|getInputStream
argument_list|()
else|:
operator|new
name|SocketInputStream
argument_list|(
name|socket
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/**    * Same as getOutputStream(socket, 0). Timeout of zero implies write will    * wait until data is available.<br><br>    *     * From documentation for {@link #getOutputStream(Socket, long)} :<br>    * Returns OutputStream for the socket. If the socket has an associated    * SocketChannel then it returns a     * {@link SocketOutputStream} with the given timeout. If the socket does not    * have a channel, {@link Socket#getOutputStream()} is returned. In the later    * case, the timeout argument is ignored and the write will wait until     * data is available.<br><br>    *     * Any socket created using socket factories returned by {@link NetUtils},    * must use this interface instead of {@link Socket#getOutputStream()}.    *     * @see #getOutputStream(Socket, long)    *     * @param socket    * @return OutputStream for writing to the socket.    * @throws IOException    */
DECL|method|getOutputStream (Socket socket)
specifier|public
specifier|static
name|OutputStream
name|getOutputStream
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOutputStream
argument_list|(
name|socket
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Returns OutputStream for the socket. If the socket has an associated    * SocketChannel then it returns a     * {@link SocketOutputStream} with the given timeout. If the socket does not    * have a channel, {@link Socket#getOutputStream()} is returned. In the later    * case, the timeout argument is ignored and the write will wait until     * data is available.<br><br>    *     * Any socket created using socket factories returned by {@link NetUtils},    * must use this interface instead of {@link Socket#getOutputStream()}.    *     * @see Socket#getChannel()    *     * @param socket    * @param timeout timeout in milliseconds. This may not always apply. zero    *        for waiting as long as necessary.    * @return OutputStream for writing to the socket.    * @throws IOException       */
DECL|method|getOutputStream (Socket socket, long timeout)
specifier|public
specifier|static
name|OutputStream
name|getOutputStream
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|socket
operator|.
name|getChannel
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|socket
operator|.
name|getOutputStream
argument_list|()
else|:
operator|new
name|SocketOutputStream
argument_list|(
name|socket
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/**    * This is a drop-in replacement for     * {@link Socket#connect(SocketAddress, int)}.    * In the case of normal sockets that don't have associated channels, this     * just invokes<code>socket.connect(endpoint, timeout)</code>. If     *<code>socket.getChannel()</code> returns a non-null channel,    * connect is implemented using Hadoop's selectors. This is done mainly    * to avoid Sun's connect implementation from creating thread-local     * selectors, since Hadoop does not have control on when these are closed    * and could end up taking all the available file descriptors.    *     * @see java.net.Socket#connect(java.net.SocketAddress, int)    *     * @param socket    * @param endpoint     * @param timeout - timeout in milliseconds    */
DECL|method|connect (Socket socket, SocketAddress endpoint, int timeout)
specifier|public
specifier|static
name|void
name|connect
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|SocketAddress
name|endpoint
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|socket
operator|==
literal|null
operator|||
name|endpoint
operator|==
literal|null
operator|||
name|timeout
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal argument for connect()"
argument_list|)
throw|;
block|}
name|SocketChannel
name|ch
init|=
name|socket
operator|.
name|getChannel
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|null
condition|)
block|{
comment|// let the default implementation handle it.
name|socket
operator|.
name|connect
argument_list|(
name|endpoint
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SocketIOWithTimeout
operator|.
name|connect
argument_list|(
name|ch
argument_list|,
name|endpoint
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// There is a very rare case allowed by the TCP specification, such that
comment|// if we are trying to connect to an endpoint on the local machine,
comment|// and we end up choosing an ephemeral port equal to the destination port,
comment|// we will actually end up getting connected to ourself (ie any data we
comment|// send just comes right back). This is only possible if the target
comment|// daemon is down, so we'll treat it like connection refused.
if|if
condition|(
name|socket
operator|.
name|getLocalPort
argument_list|()
operator|==
name|socket
operator|.
name|getPort
argument_list|()
operator|&&
name|socket
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected a loopback TCP socket, disconnecting it"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Localhost targeted connection resulted in a loopback. "
operator|+
literal|"No daemon is listening on the target port."
argument_list|)
throw|;
block|}
block|}
comment|/**     * Given a string representation of a host, return its ip address    * in textual presentation.    *     * @param name a string representation of a host:    *             either a textual representation its IP address or its host name    * @return its IP address in the string format    */
DECL|method|normalizeHostName (String name)
specifier|public
specifier|static
name|String
name|normalizeHostName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|Character
operator|.
name|digit
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// it is an IP
return|return
name|name
return|;
block|}
else|else
block|{
try|try
block|{
name|InetAddress
name|ipAddress
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|ipAddress
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
name|name
return|;
block|}
block|}
block|}
comment|/**     * Given a collection of string representation of hosts, return a list of    * corresponding IP addresses in the textual representation.    *     * @param names a collection of string representations of hosts    * @return a list of corresponding IP addresses in the string format    * @see #normalizeHostName(String)    */
DECL|method|normalizeHostNames (Collection<String> names)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|normalizeHostNames
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hostNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|hostNames
operator|.
name|add
argument_list|(
name|normalizeHostName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hostNames
return|;
block|}
comment|/**    * Performs a sanity check on the list of hostnames/IPs to verify they at least    * appear to be valid.    * @param names - List of hostnames/IPs    * @throws UnknownHostException    */
DECL|method|verifyHostnames (String[] names)
specifier|public
specifier|static
name|void
name|verifyHostnames
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|UnknownHostException
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
literal|"null hostname found"
argument_list|)
throw|;
block|}
comment|// The first check supports URL formats (e.g. hdfs://, etc.).
comment|// java.net.URI requires a schema, so we add a dummy one if it doesn't
comment|// have one already.
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"http://"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|uri
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
name|name
operator|+
literal|" is not a valid Inet address"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|ipPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|ipPattern
init|=
comment|// Pattern for matching hostname to ip:port
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:?\\d*"
argument_list|)
decl_stmt|;
comment|/**    * Attempt to obtain the host name of a name specified by ip address.      * Check that the node name is an ip addr and if so, attempt to determine    * its host name.  If the name is not an IP addr, or the actual name cannot    * be determined, return null.    *     * @return Host name or null    */
DECL|method|getHostNameOfIP (String ip)
specifier|public
specifier|static
name|String
name|getHostNameOfIP
parameter_list|(
name|String
name|ip
parameter_list|)
block|{
comment|// If name is not an ip addr, don't bother looking it up
if|if
condition|(
operator|!
name|ipPattern
operator|.
name|matcher
argument_list|(
name|ip
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|hostname
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|n
init|=
name|ip
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ip
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|hostname
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|n
argument_list|)
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|hostname
return|;
block|}
comment|/**    * Return hostname without throwing exception.    * @return hostname    */
DECL|method|getHostname ()
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
try|try
block|{
return|return
literal|""
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
return|return
literal|""
operator|+
name|uhe
return|;
block|}
block|}
comment|/**    * Compose a "host:port" string from the address.    */
DECL|method|getHostPortString (InetSocketAddress addr)
specifier|public
specifier|static
name|String
name|getHostPortString
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**    * Checks if {@code host} is a local host name and return {@link InetAddress}    * corresponding to that address.    *     * @param host the specified host    * @return a valid local {@link InetAddress} or null    * @throws SocketException if an I/O error occurs    */
DECL|method|getLocalInetAddress (String host)
specifier|public
specifier|static
name|InetAddress
name|getLocalInetAddress
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|SocketException
block|{
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InetAddress
name|addr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
name|NetworkInterface
operator|.
name|getByInetAddress
argument_list|(
name|addr
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addr
operator|=
literal|null
expr_stmt|;
comment|// Not a local address
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ignore
parameter_list|)
block|{ }
return|return
name|addr
return|;
block|}
comment|/**    * Given an InetAddress, checks to see if the address is a local address, by    * comparing the address with all the interfaces on the node.    * @param addr address to check if it is local node's address    * @return true if the address corresponds to the local node    */
DECL|method|isLocalAddress (InetAddress addr)
specifier|public
specifier|static
name|boolean
name|isLocalAddress
parameter_list|(
name|InetAddress
name|addr
parameter_list|)
block|{
comment|// Check if the address is any local or loop back
name|boolean
name|local
init|=
name|addr
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
decl_stmt|;
comment|// Check if the address is defined on any interface
if|if
condition|(
operator|!
name|local
condition|)
block|{
try|try
block|{
name|local
operator|=
name|NetworkInterface
operator|.
name|getByInetAddress
argument_list|(
name|addr
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
name|local
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|local
return|;
block|}
comment|/**    * Take an IOException , the local host port and remote host port details and    * return an IOException with the input exception as the cause and also    * include the host details. The new exception provides the stack trace of the    * place where the exception is thrown and some extra diagnostics information.    * If the exception is BindException or ConnectException or    * UnknownHostException or SocketTimeoutException, return a new one of the    * same type; Otherwise return an IOException.    *    * @param destHost target host (nullable)    * @param destPort target port    * @param localHost local host (nullable)    * @param localPort local port    * @param exception the caught exception.    * @return an exception to throw    */
DECL|method|wrapException (final String destHost, final int destPort, final String localHost, final int localPort, final IOException exception)
specifier|public
specifier|static
name|IOException
name|wrapException
parameter_list|(
specifier|final
name|String
name|destHost
parameter_list|,
specifier|final
name|int
name|destPort
parameter_list|,
specifier|final
name|String
name|localHost
parameter_list|,
specifier|final
name|int
name|localPort
parameter_list|,
specifier|final
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|BindException
condition|)
block|{
return|return
operator|new
name|BindException
argument_list|(
literal|"Problem binding to ["
operator|+
name|localHost
operator|+
literal|":"
operator|+
name|localPort
operator|+
literal|"] "
operator|+
name|exception
operator|+
literal|";"
operator|+
name|see
argument_list|(
literal|"BindException"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|ConnectException
condition|)
block|{
comment|// connection refused; include the host:port in the error
return|return
operator|(
name|ConnectException
operator|)
operator|new
name|ConnectException
argument_list|(
literal|"Call From "
operator|+
name|localHost
operator|+
literal|" to "
operator|+
name|destHost
operator|+
literal|":"
operator|+
name|destPort
operator|+
literal|" failed on connection exception: "
operator|+
name|exception
operator|+
literal|";"
operator|+
name|see
argument_list|(
literal|"ConnectionRefused"
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|UnknownHostException
condition|)
block|{
return|return
operator|(
name|UnknownHostException
operator|)
operator|new
name|UnknownHostException
argument_list|(
literal|"Invalid host name: "
operator|+
name|getHostDetailsAsString
argument_list|(
name|destHost
argument_list|,
name|destPort
argument_list|,
name|localHost
argument_list|)
operator|+
name|exception
operator|+
literal|";"
operator|+
name|see
argument_list|(
literal|"UnknownHost"
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
return|return
operator|(
name|SocketTimeoutException
operator|)
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Call From "
operator|+
name|localHost
operator|+
literal|" to "
operator|+
name|destHost
operator|+
literal|":"
operator|+
name|destPort
operator|+
literal|" failed on socket timeout exception: "
operator|+
name|exception
operator|+
literal|";"
operator|+
name|see
argument_list|(
literal|"SocketTimeout"
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|NoRouteToHostException
condition|)
block|{
return|return
operator|(
name|NoRouteToHostException
operator|)
operator|new
name|NoRouteToHostException
argument_list|(
literal|"No Route to Host from  "
operator|+
name|localHost
operator|+
literal|" to "
operator|+
name|destHost
operator|+
literal|":"
operator|+
name|destPort
operator|+
literal|" failed on socket timeout exception: "
operator|+
name|exception
operator|+
literal|";"
operator|+
name|see
argument_list|(
literal|"NoRouteToHost"
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Failed on local exception: "
operator|+
name|exception
operator|+
literal|"; Host Details : "
operator|+
name|getHostDetailsAsString
argument_list|(
name|destHost
argument_list|,
name|destPort
argument_list|,
name|localHost
argument_list|)
argument_list|)
operator|.
name|initCause
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
DECL|method|see (final String entry)
specifier|private
specifier|static
name|String
name|see
parameter_list|(
specifier|final
name|String
name|entry
parameter_list|)
block|{
return|return
name|FOR_MORE_DETAILS_SEE
operator|+
name|HADOOP_WIKI
operator|+
name|entry
return|;
block|}
comment|/**    * Get the host details as a string    * @param destHost destinatioon host (nullable)    * @param destPort destination port    * @param localHost local host (nullable)    * @return a string describing the destination host:port and the local host    */
DECL|method|getHostDetailsAsString (final String destHost, final int destPort, final String localHost)
specifier|private
specifier|static
name|String
name|getHostDetailsAsString
parameter_list|(
specifier|final
name|String
name|destHost
parameter_list|,
specifier|final
name|int
name|destPort
parameter_list|,
specifier|final
name|String
name|localHost
parameter_list|)
block|{
name|StringBuilder
name|hostDetails
init|=
operator|new
name|StringBuilder
argument_list|(
literal|27
argument_list|)
decl_stmt|;
name|hostDetails
operator|.
name|append
argument_list|(
literal|"local host is: "
argument_list|)
operator|.
name|append
argument_list|(
name|quoteHost
argument_list|(
name|localHost
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|hostDetails
operator|.
name|append
argument_list|(
literal|"destination host is: \""
argument_list|)
operator|.
name|append
argument_list|(
name|quoteHost
argument_list|(
name|destHost
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|destPort
argument_list|)
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
return|return
name|hostDetails
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Quote a hostname if it is not null    * @param hostname the hostname; nullable    * @return a quoted hostname or {@link #UNKNOWN_HOST} if the hostname is null    */
DECL|method|quoteHost (final String hostname)
specifier|private
specifier|static
name|String
name|quoteHost
parameter_list|(
specifier|final
name|String
name|hostname
parameter_list|)
block|{
return|return
operator|(
name|hostname
operator|!=
literal|null
operator|)
condition|?
operator|(
literal|"\""
operator|+
name|hostname
operator|+
literal|"\""
operator|)
else|:
name|UNKNOWN_HOST
return|;
block|}
block|}
end_class

end_unit

