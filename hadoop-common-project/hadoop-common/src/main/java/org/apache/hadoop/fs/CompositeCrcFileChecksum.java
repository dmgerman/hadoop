begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CrcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_comment
comment|/** Composite CRC. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CompositeCrcFileChecksum
specifier|public
class|class
name|CompositeCrcFileChecksum
extends|extends
name|FileChecksum
block|{
DECL|field|LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH
init|=
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
DECL|field|crc
specifier|private
name|int
name|crc
decl_stmt|;
DECL|field|crcType
specifier|private
name|DataChecksum
operator|.
name|Type
name|crcType
decl_stmt|;
DECL|field|bytesPerCrc
specifier|private
name|int
name|bytesPerCrc
decl_stmt|;
comment|/** Create a CompositeCrcFileChecksum. */
DECL|method|CompositeCrcFileChecksum ( int crc, DataChecksum.Type crcType, int bytesPerCrc)
specifier|public
name|CompositeCrcFileChecksum
parameter_list|(
name|int
name|crc
parameter_list|,
name|DataChecksum
operator|.
name|Type
name|crcType
parameter_list|,
name|int
name|bytesPerCrc
parameter_list|)
block|{
name|this
operator|.
name|crc
operator|=
name|crc
expr_stmt|;
name|this
operator|.
name|crcType
operator|=
name|crcType
expr_stmt|;
name|this
operator|.
name|bytesPerCrc
operator|=
name|bytesPerCrc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAlgorithmName ()
specifier|public
name|String
name|getAlgorithmName
parameter_list|()
block|{
return|return
literal|"COMPOSITE-"
operator|+
name|crcType
operator|.
name|name
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|LENGTH
return|;
block|}
annotation|@
name|Override
DECL|method|getBytes ()
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|CrcUtil
operator|.
name|intToBytes
argument_list|(
name|crc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChecksumOpt ()
specifier|public
name|ChecksumOpt
name|getChecksumOpt
parameter_list|()
block|{
return|return
operator|new
name|ChecksumOpt
argument_list|(
name|crcType
argument_list|,
name|bytesPerCrc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|crc
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|crc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getAlgorithmName
argument_list|()
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|crc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

