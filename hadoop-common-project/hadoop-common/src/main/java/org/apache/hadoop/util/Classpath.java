begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
operator|.
name|UnknownOptionException
import|;
end_import

begin_comment
comment|/**  * Command-line utility for getting the full classpath needed to launch a Hadoop  * client application.  If the hadoop script is called with "classpath" as the  * command, then it simply prints the classpath and exits immediately without  * launching a JVM.  The output likely will include wildcards in the classpath.  * If there are arguments passed to the classpath command, then this class gets  * called.  With the --glob argument, it prints the full classpath with wildcards  * expanded.  This is useful in situations where wildcard syntax isn't usable.  * With the --jar argument, it writes the classpath as a manifest in a jar file.  * This is useful in environments with short limitations on the maximum command  * line length, where it may not be possible to specify the full classpath in a  * command.  For example, the maximum command line length on Windows is 8191  * characters.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Classpath
specifier|public
specifier|final
class|class
name|Classpath
block|{
DECL|field|usage
specifier|private
specifier|static
specifier|final
name|String
name|usage
init|=
literal|"classpath [--glob|--jar<path>|-h|--help] :\n"
operator|+
literal|"  Prints the classpath needed to get the Hadoop jar and the required\n"
operator|+
literal|"  libraries.\n"
operator|+
literal|"  Options:\n"
operator|+
literal|"\n"
operator|+
literal|"  --glob       expand wildcards\n"
operator|+
literal|"  --jar<path> write classpath as manifest in jar named<path>\n"
operator|+
literal|"  -h, --help   print help\n"
decl_stmt|;
comment|/**    * Main entry point.    *    * @param args command-line arguments    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Copy args, because CommandFormat mutates the list.
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"-glob"
argument_list|,
literal|"-jar"
argument_list|)
decl_stmt|;
try|try
block|{
name|cf
operator|.
name|parse
argument_list|(
name|argsList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownOptionException
name|e
parameter_list|)
block|{
name|terminate
argument_list|(
literal|1
argument_list|,
literal|"unrecognized option"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|classPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cf
operator|.
name|getOpt
argument_list|(
literal|"-glob"
argument_list|)
condition|)
block|{
comment|// The classpath returned from the property has been globbed already.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cf
operator|.
name|getOpt
argument_list|(
literal|"-jar"
argument_list|)
condition|)
block|{
if|if
condition|(
name|argsList
operator|.
name|isEmpty
argument_list|()
operator|||
name|argsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
operator|||
name|argsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|terminate
argument_list|(
literal|1
argument_list|,
literal|"-jar option requires path of jar file to write"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Write the classpath into the manifest of a temporary jar file.
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|tmpJarPath
decl_stmt|;
try|try
block|{
name|tmpJarPath
operator|=
name|FileUtil
operator|.
name|createJarWithClassPath
argument_list|(
name|classPath
argument_list|,
name|workingDir
argument_list|,
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|terminate
argument_list|(
literal|1
argument_list|,
literal|"I/O error creating jar: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Rename the temporary file to its final location.
name|String
name|jarPath
init|=
name|argsList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|replaceFile
argument_list|(
operator|new
name|File
argument_list|(
name|tmpJarPath
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|jarPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|terminate
argument_list|(
literal|1
argument_list|,
literal|"I/O error renaming jar temporary file to path: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**    * Prints a message to stderr and exits with a status code.    *    * @param status exit code    * @param msg message    */
DECL|method|terminate (int status, String msg)
specifier|private
specifier|static
name|void
name|terminate
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|status
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

