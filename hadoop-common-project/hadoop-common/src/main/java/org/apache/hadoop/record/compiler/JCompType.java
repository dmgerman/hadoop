begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_comment
comment|/**  * Abstract base class for all the "compound" types such as ustring,  * buffer, vector, map, and record.  *   * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|JCompType
specifier|abstract
class|class
name|JCompType
extends|extends
name|JType
block|{
DECL|class|JavaCompType
specifier|abstract
class|class
name|JavaCompType
extends|extends
name|JavaType
block|{
DECL|method|JavaCompType (String type, String suffix, String wrapper, String typeIDByteString)
name|JavaCompType
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|wrapper
parameter_list|,
name|String
name|typeIDByteString
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|suffix
argument_list|,
name|wrapper
argument_list|,
name|typeIDByteString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genCompareTo (CodeBuffer cb, String fname, String other)
name|void
name|genCompareTo
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|other
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = "
operator|+
name|fname
operator|+
literal|".compareTo("
operator|+
name|other
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genEquals (CodeBuffer cb, String fname, String peer)
name|void
name|genEquals
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|peer
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = "
operator|+
name|fname
operator|+
literal|".equals("
operator|+
name|peer
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genHashCode (CodeBuffer cb, String fname)
name|void
name|genHashCode
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = "
operator|+
name|fname
operator|+
literal|".hashCode();\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genClone (CodeBuffer cb, String fname)
name|void
name|genClone
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"other."
operator|+
name|fname
operator|+
literal|" = ("
operator|+
name|getType
argument_list|()
operator|+
literal|") this."
operator|+
name|fname
operator|+
literal|".clone();\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CppCompType
specifier|abstract
class|class
name|CppCompType
extends|extends
name|CppType
block|{
DECL|method|CppCompType (String type)
name|CppCompType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genGetSet (CodeBuffer cb, String fname)
name|void
name|genGetSet
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"virtual const "
operator|+
name|getType
argument_list|()
operator|+
literal|"& get"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"() const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"virtual "
operator|+
name|getType
argument_list|()
operator|+
literal|"& get"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CCompType
class|class
name|CCompType
extends|extends
name|CType
block|{        }
block|}
end_class

end_unit

