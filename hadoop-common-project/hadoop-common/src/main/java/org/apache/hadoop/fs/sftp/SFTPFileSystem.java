begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.sftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|sftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
operator|.
name|LsEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SftpATTRS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|SftpException
import|;
end_import

begin_comment
comment|/** SFTP FileSystem. */
end_comment

begin_class
DECL|class|SFTPFileSystem
specifier|public
class|class
name|SFTPFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SFTPFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectionPool
specifier|private
name|SFTPConnectionPool
name|connectionPool
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|DEFAULT_SFTP_PORT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SFTP_PORT
init|=
literal|22
decl_stmt|;
DECL|field|DEFAULT_MAX_CONNECTION
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CONNECTION
init|=
literal|5
decl_stmt|;
DECL|field|DEFAULT_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
DECL|field|FS_SFTP_USER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_USER_PREFIX
init|=
literal|"fs.sftp.user."
decl_stmt|;
DECL|field|FS_SFTP_PASSWORD_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_PASSWORD_PREFIX
init|=
literal|"fs.sftp.password."
decl_stmt|;
DECL|field|FS_SFTP_HOST
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_HOST
init|=
literal|"fs.sftp.host"
decl_stmt|;
DECL|field|FS_SFTP_HOST_PORT
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_HOST_PORT
init|=
literal|"fs.sftp.host.port"
decl_stmt|;
DECL|field|FS_SFTP_KEYFILE
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_KEYFILE
init|=
literal|"fs.sftp.keyfile"
decl_stmt|;
DECL|field|FS_SFTP_CONNECTION_MAX
specifier|public
specifier|static
specifier|final
name|String
name|FS_SFTP_CONNECTION_MAX
init|=
literal|"fs.sftp.connection.max"
decl_stmt|;
DECL|field|E_SAME_DIRECTORY_ONLY
specifier|public
specifier|static
specifier|final
name|String
name|E_SAME_DIRECTORY_ONLY
init|=
literal|"only same directory renames are supported"
decl_stmt|;
DECL|field|E_HOST_NULL
specifier|public
specifier|static
specifier|final
name|String
name|E_HOST_NULL
init|=
literal|"Invalid host specified"
decl_stmt|;
DECL|field|E_USER_NULL
specifier|public
specifier|static
specifier|final
name|String
name|E_USER_NULL
init|=
literal|"No user specified for sftp connection. Expand URI or credential file."
decl_stmt|;
DECL|field|E_PATH_DIR
specifier|public
specifier|static
specifier|final
name|String
name|E_PATH_DIR
init|=
literal|"Path %s is a directory."
decl_stmt|;
DECL|field|E_FILE_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|E_FILE_STATUS
init|=
literal|"Failed to get file status"
decl_stmt|;
DECL|field|E_FILE_NOTFOUND
specifier|public
specifier|static
specifier|final
name|String
name|E_FILE_NOTFOUND
init|=
literal|"File %s does not exist."
decl_stmt|;
DECL|field|E_FILE_EXIST
specifier|public
specifier|static
specifier|final
name|String
name|E_FILE_EXIST
init|=
literal|"File already exists: %s"
decl_stmt|;
DECL|field|E_CREATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|E_CREATE_DIR
init|=
literal|"create(): Mkdirs failed to create: %s"
decl_stmt|;
DECL|field|E_DIR_CREATE_FROMFILE
specifier|public
specifier|static
specifier|final
name|String
name|E_DIR_CREATE_FROMFILE
init|=
literal|"Can't make directory for path %s since it is a file."
decl_stmt|;
DECL|field|E_MAKE_DIR_FORPATH
specifier|public
specifier|static
specifier|final
name|String
name|E_MAKE_DIR_FORPATH
init|=
literal|"Can't make directory for path \"%s\" under \"%s\"."
decl_stmt|;
DECL|field|E_DIR_NOTEMPTY
specifier|public
specifier|static
specifier|final
name|String
name|E_DIR_NOTEMPTY
init|=
literal|"Directory: %s is not empty."
decl_stmt|;
DECL|field|E_FILE_CHECK_FAILED
specifier|public
specifier|static
specifier|final
name|String
name|E_FILE_CHECK_FAILED
init|=
literal|"File check failed"
decl_stmt|;
DECL|field|E_SPATH_NOTEXIST
specifier|public
specifier|static
specifier|final
name|String
name|E_SPATH_NOTEXIST
init|=
literal|"Source path %s does not exist"
decl_stmt|;
DECL|field|E_DPATH_EXIST
specifier|public
specifier|static
specifier|final
name|String
name|E_DPATH_EXIST
init|=
literal|"Destination path %s already exist, cannot rename!"
decl_stmt|;
DECL|field|E_FAILED_GETHOME
specifier|public
specifier|static
specifier|final
name|String
name|E_FAILED_GETHOME
init|=
literal|"Failed to get home directory"
decl_stmt|;
DECL|field|E_FAILED_DISCONNECT
specifier|public
specifier|static
specifier|final
name|String
name|E_FAILED_DISCONNECT
init|=
literal|"Failed to disconnect"
decl_stmt|;
comment|/**    * Set configuration from UI.    *    * @param uri    * @param conf    * @throws IOException    */
DECL|method|setConfigurationFromURI (URI uriInfo, Configuration conf)
specifier|private
name|void
name|setConfigurationFromURI
parameter_list|(
name|URI
name|uriInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get host information from URI
name|String
name|host
init|=
name|uriInfo
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|host
operator|=
operator|(
name|host
operator|==
literal|null
operator|)
condition|?
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_HOST
argument_list|,
literal|null
argument_list|)
else|:
name|host
expr_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_HOST_NULL
argument_list|)
throw|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|FS_SFTP_HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|uriInfo
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|port
operator|=
operator|(
name|port
operator|==
operator|-
literal|1
operator|)
condition|?
name|conf
operator|.
name|getInt
argument_list|(
name|FS_SFTP_HOST_PORT
argument_list|,
name|DEFAULT_SFTP_PORT
argument_list|)
else|:
name|port
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FS_SFTP_HOST_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// get user/password information from URI
name|String
name|userAndPwdFromUri
init|=
name|uriInfo
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|userAndPwdFromUri
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|userPasswdInfo
init|=
name|userAndPwdFromUri
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|userPasswdInfo
index|[
literal|0
index|]
decl_stmt|;
name|user
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|user
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_SFTP_USER_PREFIX
operator|+
name|host
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|userPasswdInfo
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_SFTP_PASSWORD_PREFIX
operator|+
name|host
operator|+
literal|"."
operator|+
name|user
argument_list|,
name|userPasswdInfo
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_USER_PREFIX
operator|+
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|E_USER_NULL
argument_list|)
throw|;
block|}
name|int
name|connectionMax
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|FS_SFTP_CONNECTION_MAX
argument_list|,
name|DEFAULT_MAX_CONNECTION
argument_list|)
decl_stmt|;
name|connectionPool
operator|=
operator|new
name|SFTPConnectionPool
argument_list|(
name|connectionMax
argument_list|)
expr_stmt|;
block|}
comment|/**    * Connecting by using configuration parameters.    *    * @return An FTPClient instance    * @throws IOException    */
DECL|method|connect ()
specifier|private
name|ChannelSftp
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_HOST
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|FS_SFTP_HOST_PORT
argument_list|,
name|DEFAULT_SFTP_PORT
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_USER_PREFIX
operator|+
name|host
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|pwd
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_PASSWORD_PREFIX
operator|+
name|host
operator|+
literal|"."
operator|+
name|user
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|keyFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_SFTP_KEYFILE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ChannelSftp
name|channel
init|=
name|connectionPool
operator|.
name|connect
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|,
name|keyFile
argument_list|)
decl_stmt|;
return|return
name|channel
return|;
block|}
comment|/**    * Logout and disconnect the given channel.    *    * @param client    * @throws IOException    */
DECL|method|disconnect (ChannelSftp channel)
specifier|private
name|void
name|disconnect
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|connectionPool
operator|.
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|/**    * Resolve against given working directory.    *    * @param workDir    * @param path    * @return absolute path    */
DECL|method|makeAbsolute (Path workDir, Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|workDir
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    * @throws IOException    */
DECL|method|exists (ChannelSftp channel, Path file)
specifier|private
name|boolean
name|exists
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_FILE_STATUS
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFileStatus (ChannelSftp client, Path file)
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|ChannelSftp
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStat
init|=
literal|null
decl_stmt|;
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|Path
name|parentPath
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|==
literal|null
condition|)
block|{
comment|// root directory
name|long
name|length
init|=
operator|-
literal|1
decl_stmt|;
comment|// Length of root directory on server not known
name|boolean
name|isDir
init|=
literal|true
decl_stmt|;
name|int
name|blockReplication
init|=
literal|1
decl_stmt|;
name|long
name|blockSize
init|=
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
comment|// Block Size not known.
name|long
name|modTime
init|=
operator|-
literal|1
decl_stmt|;
comment|// Modification time of root directory not known.
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|root
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|String
name|pathName
init|=
name|parentPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|LsEntry
argument_list|>
name|sftpFiles
decl_stmt|;
try|try
block|{
name|sftpFiles
operator|=
operator|(
name|Vector
argument_list|<
name|LsEntry
argument_list|>
operator|)
name|client
operator|.
name|ls
argument_list|(
name|pathName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_FILE_NOTFOUND
argument_list|,
name|file
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|sftpFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LsEntry
name|sftpFile
range|:
name|sftpFiles
control|)
block|{
if|if
condition|(
name|sftpFile
operator|.
name|getFilename
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// file found in directory
name|fileStat
operator|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|sftpFile
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fileStat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_FILE_NOTFOUND
argument_list|,
name|file
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_FILE_NOTFOUND
argument_list|,
name|file
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|fileStat
return|;
block|}
comment|/**    * Convert the file information in LsEntry to a {@link FileStatus} object. *    *    * @param sftpFile    * @param parentPath    * @return file status    * @throws IOException    */
DECL|method|getFileStatus (ChannelSftp channel, LsEntry sftpFile, Path parentPath)
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|,
name|LsEntry
name|sftpFile
parameter_list|,
name|Path
name|parentPath
parameter_list|)
throws|throws
name|IOException
block|{
name|SftpATTRS
name|attr
init|=
name|sftpFile
operator|.
name|getAttrs
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|attr
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|boolean
name|isDir
init|=
name|attr
operator|.
name|isDir
argument_list|()
decl_stmt|;
name|boolean
name|isLink
init|=
name|attr
operator|.
name|isLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLink
condition|)
block|{
name|String
name|link
init|=
name|parentPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|sftpFile
operator|.
name|getFilename
argument_list|()
decl_stmt|;
try|try
block|{
name|link
operator|=
name|channel
operator|.
name|realpath
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|Path
name|linkParent
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|link
argument_list|)
decl_stmt|;
name|FileStatus
name|fstat
init|=
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|linkParent
argument_list|)
decl_stmt|;
name|isDir
operator|=
name|fstat
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
name|length
operator|=
name|fstat
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|int
name|blockReplication
init|=
literal|1
decl_stmt|;
comment|// Using default block size since there is no way in SFTP channel to know of
comment|// block sizes on server. The assumption could be less than ideal.
name|long
name|blockSize
init|=
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
name|long
name|modTime
init|=
name|attr
operator|.
name|getMTime
argument_list|()
operator|*
literal|1000L
decl_stmt|;
comment|// convert to milliseconds
name|long
name|accessTime
init|=
name|attr
operator|.
name|getATime
argument_list|()
operator|*
literal|1000L
decl_stmt|;
name|FsPermission
name|permission
init|=
name|getPermissions
argument_list|(
name|sftpFile
argument_list|)
decl_stmt|;
comment|// not be able to get the real user group name, just use the user and group
comment|// id
name|String
name|user
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|attr
operator|.
name|getUId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|attr
operator|.
name|getGId
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|,
name|sftpFile
operator|.
name|getFilename
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|accessTime
argument_list|,
name|permission
argument_list|,
name|user
argument_list|,
name|group
argument_list|,
name|filePath
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return file permission.    *    * @param sftpFile    * @return file permission    */
DECL|method|getPermissions (LsEntry sftpFile)
specifier|private
name|FsPermission
name|getPermissions
parameter_list|(
name|LsEntry
name|sftpFile
parameter_list|)
block|{
return|return
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|sftpFile
operator|.
name|getAttrs
argument_list|()
operator|.
name|getPermissions
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|mkdirs (ChannelSftp client, Path file, FsPermission permission)
specifier|private
name|boolean
name|mkdirs
parameter_list|(
name|ChannelSftp
name|client
parameter_list|,
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|created
init|=
literal|true
decl_stmt|;
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|pathName
init|=
name|absolute
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
condition|)
block|{
name|Path
name|parent
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|created
operator|=
operator|(
name|parent
operator|==
literal|null
operator|||
name|mkdirs
argument_list|(
name|client
argument_list|,
name|parent
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|created
condition|)
block|{
name|String
name|parentDir
init|=
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
literal|true
decl_stmt|;
try|try
block|{
name|client
operator|.
name|cd
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|client
operator|.
name|mkdir
argument_list|(
name|pathName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_MAKE_DIR_FORPATH
argument_list|,
name|pathName
argument_list|,
name|parentDir
argument_list|)
argument_list|)
throw|;
block|}
name|created
operator|=
name|created
operator|&
name|succeeded
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isFile
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_DIR_CREATE_FROMFILE
argument_list|,
name|absolute
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|created
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    * @throws IOException    */
DECL|method|isFile (ChannelSftp channel, Path file)
specifier|private
name|boolean
name|isFile
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|!
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|file
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// file does not exist
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_FILE_CHECK_FAILED
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|delete (ChannelSftp channel, Path file, boolean recursive)
specifier|private
name|boolean
name|delete
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|,
name|Path
name|file
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|channel
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|pathName
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
name|fileStat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileStat
operator|=
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|absolute
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// file not found, no need to delete, return true
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|fileStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|status
init|=
literal|true
decl_stmt|;
try|try
block|{
name|channel
operator|.
name|rm
argument_list|(
name|pathName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
else|else
block|{
name|boolean
name|status
init|=
literal|true
decl_stmt|;
name|FileStatus
index|[]
name|dirEntries
init|=
name|listStatus
argument_list|(
name|channel
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirEntries
operator|!=
literal|null
operator|&&
name|dirEntries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_DIR_NOTEMPTY
argument_list|,
name|file
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirEntries
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|delete
argument_list|(
name|channel
argument_list|,
operator|new
name|Path
argument_list|(
name|absolute
argument_list|,
name|dirEntries
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|channel
operator|.
name|rmdir
argument_list|(
name|pathName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|status
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|listStatus (ChannelSftp client, Path file)
specifier|private
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|ChannelSftp
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStat
init|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|fileStat
block|}
return|;
block|}
name|Vector
argument_list|<
name|LsEntry
argument_list|>
name|sftpFiles
decl_stmt|;
try|try
block|{
name|sftpFiles
operator|=
operator|(
name|Vector
argument_list|<
name|LsEntry
argument_list|>
operator|)
name|client
operator|.
name|ls
argument_list|(
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|fileStats
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sftpFiles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LsEntry
name|entry
init|=
name|sftpFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fname
init|=
name|entry
operator|.
name|getFilename
argument_list|()
decl_stmt|;
comment|// skip current and parent directory, ie. "." and ".."
if|if
condition|(
operator|!
literal|"."
operator|.
name|equalsIgnoreCase
argument_list|(
name|fname
argument_list|)
operator|&&
operator|!
literal|".."
operator|.
name|equalsIgnoreCase
argument_list|(
name|fname
argument_list|)
condition|)
block|{
name|fileStats
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|entry
argument_list|,
name|absolute
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileStats
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|fileStats
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    *    * @param channel    * @param src    * @param dst    * @return rename successful?    * @throws IOException    */
DECL|method|rename (ChannelSftp channel, Path src, Path dst)
specifier|private
name|boolean
name|rename
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|channel
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absoluteSrc
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|Path
name|absoluteDst
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|channel
argument_list|,
name|absoluteSrc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_SPATH_NOTEXIST
argument_list|,
name|src
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|exists
argument_list|(
name|channel
argument_list|,
name|absoluteDst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_DPATH_EXIST
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
name|boolean
name|renamed
init|=
literal|true
decl_stmt|;
try|try
block|{
name|channel
operator|.
name|cd
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|rename
argument_list|(
name|src
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|dst
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
name|renamed
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|renamed
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uriInfo, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uriInfo
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uriInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConfigurationFromURI
argument_list|(
name|uriInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uriInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|channel
init|=
name|connect
argument_list|()
decl_stmt|;
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|channel
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStat
init|=
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_PATH_DIR
argument_list|,
name|f
argument_list|)
argument_list|)
throw|;
block|}
name|InputStream
name|is
decl_stmt|;
try|try
block|{
comment|// the path could be a symbolic link, so get the real path
name|absolute
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|channel
operator|.
name|realpath
argument_list|(
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|=
name|channel
operator|.
name|get
argument_list|(
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|FSDataInputStream
name|fis
init|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|SFTPInputStream
argument_list|(
name|is
argument_list|,
name|channel
argument_list|,
name|statistics
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fis
return|;
block|}
comment|/**    * A stream obtained via this call must be closed before using other APIs of    * this class or else the invocation will block.    */
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ChannelSftp
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
name|Path
name|workDir
decl_stmt|;
try|try
block|{
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|pwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|client
argument_list|,
name|f
argument_list|)
condition|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
name|delete
argument_list|(
name|client
argument_list|,
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_FILE_EXIST
argument_list|,
name|f
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|Path
name|parent
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
operator|!
name|mkdirs
argument_list|(
name|client
argument_list|,
name|parent
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
condition|)
block|{
name|parent
operator|=
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
else|:
name|parent
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|E_CREATE_DIR
argument_list|,
name|parent
argument_list|)
argument_list|)
throw|;
block|}
name|OutputStream
name|os
decl_stmt|;
try|try
block|{
name|client
operator|.
name|cd
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|=
name|client
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SftpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|fos
init|=
operator|new
name|FSDataOutputStream
argument_list|(
name|os
argument_list|,
name|statistics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|fos
return|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Append is not supported "
operator|+
literal|"by SFTPFileSystem"
argument_list|)
throw|;
block|}
comment|/*    * The parent of source and destination can be different. It is suppose to    * work like 'move'    */
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|channel
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|rename
argument_list|(
name|channel
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|channel
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|delete
argument_list|(
name|channel
argument_list|,
name|f
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|stats
init|=
name|listStatus
argument_list|(
name|client
argument_list|,
name|f
argument_list|)
decl_stmt|;
return|return
name|stats
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
comment|// we do not maintain the working directory state
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
comment|// Return home directory always since we do not maintain state.
return|return
name|getHomeDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
name|ChannelSftp
name|channel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|channel
operator|=
name|connect
argument_list|()
expr_stmt|;
name|Path
name|homeDir
init|=
operator|new
name|Path
argument_list|(
name|channel
operator|.
name|pwd
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|homeDir
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
try|try
block|{
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|mkdirs
argument_list|(
name|client
argument_list|,
name|f
argument_list|,
name|permission
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|ChannelSftp
name|channel
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|channel
argument_list|,
name|f
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

