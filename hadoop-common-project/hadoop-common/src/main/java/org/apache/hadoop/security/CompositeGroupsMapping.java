begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link GroupMappingServiceProvider} which  * composites other group mapping providers for determining group membership.  * This allows to combine existing provider implementations and composite   * a virtually new provider without customized development to deal with complex situation.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CompositeGroupsMapping
specifier|public
class|class
name|CompositeGroupsMapping
implements|implements
name|GroupMappingServiceProvider
implements|,
name|Configurable
block|{
DECL|field|MAPPING_PROVIDERS_CONFIG_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MAPPING_PROVIDERS_CONFIG_KEY
init|=
name|GROUP_MAPPING_CONFIG_PREFIX
operator|+
literal|".providers"
decl_stmt|;
DECL|field|MAPPING_PROVIDERS_COMBINED_CONFIG_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MAPPING_PROVIDERS_COMBINED_CONFIG_KEY
init|=
name|MAPPING_PROVIDERS_CONFIG_KEY
operator|+
literal|".combined"
decl_stmt|;
DECL|field|MAPPING_PROVIDER_CONFIG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|MAPPING_PROVIDER_CONFIG_PREFIX
init|=
name|GROUP_MAPPING_CONFIG_PREFIX
operator|+
literal|".provider"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompositeGroupsMapping
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|providersList
specifier|private
name|List
argument_list|<
name|GroupMappingServiceProvider
argument_list|>
name|providersList
init|=
operator|new
name|ArrayList
argument_list|<
name|GroupMappingServiceProvider
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|combined
specifier|private
name|boolean
name|combined
decl_stmt|;
comment|/**    * Returns list of groups for a user.    *     * @param user get groups for this user    * @return list of groups for a given user    */
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
for|for
control|(
name|GroupMappingServiceProvider
name|provider
range|:
name|providersList
control|)
block|{
try|try
block|{
name|groups
operator|=
name|provider
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//LOG.warn("Exception trying to get groups for user " + user, e);
block|}
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
operator|!
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|groupSet
operator|.
name|addAll
argument_list|(
name|groups
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|combined
condition|)
break|break;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|groupSet
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|groupSet
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/**    * Caches groups, no need to do that for this provider    */
annotation|@
name|Override
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
comment|// does nothing in this provider of user to groups mapping
block|}
comment|/**     * Adds groups to cache, no need to do that for this provider    *    * @param groups unused    */
annotation|@
name|Override
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{
comment|// does nothing in this provider of user to groups mapping
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
specifier|synchronized
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|combined
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MAPPING_PROVIDERS_COMBINED_CONFIG_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadMappingProviders
argument_list|()
expr_stmt|;
block|}
DECL|method|loadMappingProviders ()
specifier|private
name|void
name|loadMappingProviders
parameter_list|()
block|{
name|String
index|[]
name|providerNames
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|MAPPING_PROVIDERS_CONFIG_KEY
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|String
name|providerKey
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|providerNames
control|)
block|{
name|providerKey
operator|=
name|MAPPING_PROVIDER_CONFIG_PREFIX
operator|+
literal|"."
operator|+
name|name
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|providerClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|providerKey
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerClass
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The mapping provider, "
operator|+
name|name
operator|+
literal|" does not have a valid class"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMappingProvider
argument_list|(
name|name
argument_list|,
name|providerClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addMappingProvider (String providerName, Class<?> providerClass)
specifier|private
name|void
name|addMappingProvider
parameter_list|(
name|String
name|providerName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|providerClass
parameter_list|)
block|{
name|Configuration
name|newConf
init|=
name|prepareConf
argument_list|(
name|providerName
argument_list|)
decl_stmt|;
name|GroupMappingServiceProvider
name|provider
init|=
operator|(
name|GroupMappingServiceProvider
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|providerClass
argument_list|,
name|newConf
argument_list|)
decl_stmt|;
name|providersList
operator|.
name|add
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/*    * For any provider specific configuration properties, such as "hadoop.security.group.mapping.ldap.url"     * and the like, allow them to be configured as "hadoop.security.group.mapping.provider.PROVIDER-X.ldap.url",    * so that a provider such as LdapGroupsMapping can be used to composite a complex one with other providers.    */
DECL|method|prepareConf (String providerName)
specifier|private
name|Configuration
name|prepareConf
parameter_list|(
name|String
name|providerName
parameter_list|)
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|conf
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|providerKey
init|=
name|MAPPING_PROVIDER_CONFIG_PREFIX
operator|+
literal|"."
operator|+
name|providerName
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// get a property like "hadoop.security.group.mapping.provider.PROVIDER-X.ldap.url"
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|providerKey
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
name|providerKey
argument_list|)
condition|)
block|{
comment|// restore to be the one like "hadoop.security.group.mapping.ldap.url"
comment|// so that can be used by original provider.
name|key
operator|=
name|key
operator|.
name|replace
argument_list|(
literal|".provider."
operator|+
name|providerName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newConf
return|;
block|}
block|}
end_class

end_unit

