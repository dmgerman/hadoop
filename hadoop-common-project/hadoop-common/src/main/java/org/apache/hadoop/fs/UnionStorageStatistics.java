begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A StorageStatistics instance which combines the outputs of several other  * StorageStatistics instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|UnionStorageStatistics
specifier|public
class|class
name|UnionStorageStatistics
extends|extends
name|StorageStatistics
block|{
comment|/**    * The underlying StorageStatistics.    */
DECL|field|stats
specifier|private
specifier|final
name|StorageStatistics
index|[]
name|stats
decl_stmt|;
DECL|class|LongStatisticIterator
specifier|private
class|class
name|LongStatisticIterator
implements|implements
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
block|{
DECL|field|statIdx
specifier|private
name|int
name|statIdx
decl_stmt|;
DECL|field|cur
specifier|private
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|cur
decl_stmt|;
DECL|method|LongStatisticIterator ()
name|LongStatisticIterator
parameter_list|()
block|{
name|this
operator|.
name|statIdx
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|cur
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|getIter
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|getIter ()
specifier|private
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|getIter
parameter_list|()
block|{
while|while
condition|(
operator|(
name|cur
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|cur
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|length
operator|>=
name|statIdx
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cur
operator|=
name|stats
index|[
name|statIdx
operator|++
index|]
operator|.
name|getLongStatistics
argument_list|()
expr_stmt|;
block|}
return|return
name|cur
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|LongStatistic
name|next
parameter_list|()
block|{
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|iter
init|=
name|getIter
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|UnionStorageStatistics (String name, StorageStatistics[] stats)
specifier|public
name|UnionStorageStatistics
parameter_list|(
name|String
name|name
parameter_list|,
name|StorageStatistics
index|[]
name|stats
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLongStatistics ()
specifier|public
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|getLongStatistics
parameter_list|()
block|{
return|return
operator|new
name|LongStatisticIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLong (String key)
specifier|public
name|Long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|val
init|=
name|stats
index|[
name|i
index|]
operator|.
name|getLong
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Return true if a statistic is being tracked.    *    * @return         True only if the statistic is being tracked.    */
annotation|@
name|Override
DECL|method|isTracked (String key)
specifier|public
name|boolean
name|isTracked
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stats
index|[
name|i
index|]
operator|.
name|isTracked
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

