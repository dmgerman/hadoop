begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  *<p>  * Specifies a policy for retrying method failures.  * Implementations of this interface should be immutable.  *</p>  */
end_comment

begin_interface
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|interface|RetryPolicy
specifier|public
interface|interface
name|RetryPolicy
block|{
comment|/**    * Returned by {@link RetryPolicy#shouldRetry(Exception, int, int, boolean)}.    */
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RetryAction
specifier|public
specifier|static
class|class
name|RetryAction
block|{
comment|// A few common retry policies, with no delays.
DECL|field|FAIL
specifier|public
specifier|static
specifier|final
name|RetryAction
name|FAIL
init|=
operator|new
name|RetryAction
argument_list|(
name|RetryDecision
operator|.
name|FAIL
argument_list|)
decl_stmt|;
DECL|field|RETRY
specifier|public
specifier|static
specifier|final
name|RetryAction
name|RETRY
init|=
operator|new
name|RetryAction
argument_list|(
name|RetryDecision
operator|.
name|RETRY
argument_list|)
decl_stmt|;
DECL|field|FAILOVER_AND_RETRY
specifier|public
specifier|static
specifier|final
name|RetryAction
name|FAILOVER_AND_RETRY
init|=
operator|new
name|RetryAction
argument_list|(
name|RetryDecision
operator|.
name|FAILOVER_AND_RETRY
argument_list|)
decl_stmt|;
DECL|field|action
specifier|public
specifier|final
name|RetryDecision
name|action
decl_stmt|;
DECL|field|delayMillis
specifier|public
specifier|final
name|long
name|delayMillis
decl_stmt|;
DECL|field|reason
specifier|public
specifier|final
name|String
name|reason
decl_stmt|;
DECL|method|RetryAction (RetryDecision action)
specifier|public
name|RetryAction
parameter_list|(
name|RetryDecision
name|action
parameter_list|)
block|{
name|this
argument_list|(
name|action
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryAction (RetryDecision action, long delayTime)
specifier|public
name|RetryAction
parameter_list|(
name|RetryDecision
name|action
parameter_list|,
name|long
name|delayTime
parameter_list|)
block|{
name|this
argument_list|(
name|action
argument_list|,
name|delayTime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryAction (RetryDecision action, long delayTime, String reason)
specifier|public
name|RetryAction
parameter_list|(
name|RetryDecision
name|action
parameter_list|,
name|long
name|delayTime
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|delayMillis
operator|=
name|delayTime
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(action="
operator|+
name|action
operator|+
literal|", delayMillis="
operator|+
name|delayMillis
operator|+
literal|", reason="
operator|+
name|reason
operator|+
literal|")"
return|;
block|}
DECL|enum|RetryDecision
specifier|public
enum|enum
name|RetryDecision
block|{
comment|// Ordering: FAIL< RETRY< FAILOVER_AND_RETRY.
DECL|enumConstant|FAIL
name|FAIL
block|,
DECL|enumConstant|RETRY
name|RETRY
block|,
DECL|enumConstant|FAILOVER_AND_RETRY
name|FAILOVER_AND_RETRY
block|}
block|}
comment|/**    *<p>    * Determines whether the framework should retry a method for the given    * exception, and the number of retries that have been made for that operation    * so far.    *</p>    *     * @param e The exception that caused the method to fail    * @param retries The number of times the method has been retried    * @param failovers The number of times the method has failed over to a    *          different backend implementation    * @param isIdempotentOrAtMostOnce<code>true</code> if the method is    *          {@link Idempotent} or {@link AtMostOnce} and so can reasonably be    *          retried on failover when we don't know if the previous attempt    *          reached the server or not    * @return {@link RetryAction} with {@code RetryDecision.FAIL} if the method    *          should not be retried, {@code RetryDecision.RETRY} if the method    *          should be retried or {@code RetryDecision.FAILOVER_AND_RETRY}    *          if failover has to be performed before retry.    * @throws Exception The re-thrown exception<code>e</code> indicating that    *           the method failed and should not be retried further    */
DECL|method|shouldRetry (Exception e, int retries, int failovers, boolean isIdempotentOrAtMostOnce)
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|isIdempotentOrAtMostOnce
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_interface

end_unit

