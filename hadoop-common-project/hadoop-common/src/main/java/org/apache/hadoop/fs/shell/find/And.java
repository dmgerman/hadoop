begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell.find
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|find
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathData
import|;
end_import

begin_comment
comment|/**  * Implements the -a (and) operator for the  * {@link org.apache.hadoop.fs.shell.find.Find} command.  */
end_comment

begin_class
DECL|class|And
specifier|final
class|class
name|And
extends|extends
name|BaseExpression
block|{
comment|/** Registers this expression with the specified factory. */
DECL|method|registerExpression (ExpressionFactory factory)
specifier|public
specifier|static
name|void
name|registerExpression
parameter_list|(
name|ExpressionFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|And
operator|.
name|class
argument_list|,
literal|"-a"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|And
operator|.
name|class
argument_list|,
literal|"-and"
argument_list|)
expr_stmt|;
block|}
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|USAGE
init|=
block|{
literal|"expression -a expression"
block|,
literal|"expression -and expression"
block|,
literal|"expression expression"
block|}
decl_stmt|;
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|HELP
init|=
block|{
literal|"Logical AND operator for joining two expressions. Returns"
block|,
literal|"true if both child expressions return true. Implied by the"
block|,
literal|"juxtaposition of two expressions and so does not need to be"
block|,
literal|"explicitly specified. The second expression will not be"
block|,
literal|"applied if the first fails."
block|}
decl_stmt|;
DECL|method|And ()
specifier|public
name|And
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setUsage
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|setHelp
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Applies child expressions to the {@link PathData} item. If all pass then    * returns {@link Result#PASS} else returns the result of the first    * non-passing expression.    */
annotation|@
name|Override
DECL|method|apply (PathData item, int depth)
specifier|public
name|Result
name|apply
parameter_list|(
name|PathData
name|item
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|Result
name|result
init|=
name|Result
operator|.
name|PASS
decl_stmt|;
for|for
control|(
name|Expression
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
name|Result
name|childResult
init|=
name|child
operator|.
name|apply
argument_list|(
name|item
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|combine
argument_list|(
name|childResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isPass
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|isOperator ()
specifier|public
name|boolean
name|isOperator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getPrecedence ()
specifier|public
name|int
name|getPrecedence
parameter_list|()
block|{
return|return
literal|200
return|;
block|}
annotation|@
name|Override
DECL|method|addChildren (Deque<Expression> expressions)
specifier|public
name|void
name|addChildren
parameter_list|(
name|Deque
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
name|addChildren
argument_list|(
name|expressions
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

