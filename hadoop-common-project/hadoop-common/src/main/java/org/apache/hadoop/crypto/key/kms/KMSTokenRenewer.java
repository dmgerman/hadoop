begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderDelegationTokenExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
import|;
end_import

begin_comment
comment|/**  * The KMS implementation of {@link TokenRenewer}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KMSTokenRenewer
specifier|public
class|class
name|KMSTokenRenewer
extends|extends
name|TokenRenewer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|kind
operator|.
name|equals
argument_list|(
name|TOKEN_KIND
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renewing delegation token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
specifier|final
name|KeyProvider
name|keyProvider
init|=
name|createKeyProvider
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|keyProvider
operator|instanceof
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"keyProvider %s cannot renew token [%s]"
argument_list|,
name|keyProvider
operator|==
literal|null
condition|?
literal|"null"
else|:
name|keyProvider
operator|.
name|getClass
argument_list|()
argument_list|,
name|token
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|keyProvider
operator|)
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|keyProvider
operator|!=
literal|null
condition|)
block|{
name|keyProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Canceling delegation token {}"
argument_list|,
name|token
argument_list|)
expr_stmt|;
specifier|final
name|KeyProvider
name|keyProvider
init|=
name|createKeyProvider
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|keyProvider
operator|instanceof
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"keyProvider %s cannot cancel token [%s]"
argument_list|,
name|keyProvider
operator|==
literal|null
condition|?
literal|"null"
else|:
name|keyProvider
operator|.
name|getClass
argument_list|()
argument_list|,
name|token
argument_list|)
argument_list|)
throw|;
block|}
operator|(
operator|(
name|KeyProviderDelegationTokenExtension
operator|.
name|DelegationTokenExtension
operator|)
name|keyProvider
operator|)
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|keyProvider
operator|!=
literal|null
condition|)
block|{
name|keyProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a key provider for token renewal / cancellation.    * Caller is responsible for closing the key provider.    */
DECL|method|createKeyProvider (Token<?> token, Configuration conf)
specifier|protected
name|KeyProvider
name|createKeyProvider
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|KMSUtil
operator|.
name|createKeyProviderFromTokenService
argument_list|(
name|conf
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

