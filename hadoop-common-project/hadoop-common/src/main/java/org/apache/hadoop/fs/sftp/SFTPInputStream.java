begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.sftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|sftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Session
import|;
end_import

begin_comment
comment|/** SFTP FileSystem input stream. */
end_comment

begin_class
DECL|class|SFTPInputStream
class|class
name|SFTPInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|E_SEEK_NOTSUPPORTED
specifier|public
specifier|static
specifier|final
name|String
name|E_SEEK_NOTSUPPORTED
init|=
literal|"Seek not supported"
decl_stmt|;
DECL|field|E_CLIENT_NULL
specifier|public
specifier|static
specifier|final
name|String
name|E_CLIENT_NULL
init|=
literal|"SFTP client null or not connected"
decl_stmt|;
DECL|field|E_NULL_INPUTSTREAM
specifier|public
specifier|static
specifier|final
name|String
name|E_NULL_INPUTSTREAM
init|=
literal|"Null InputStream"
decl_stmt|;
DECL|field|E_STREAM_CLOSED
specifier|public
specifier|static
specifier|final
name|String
name|E_STREAM_CLOSED
init|=
literal|"Stream closed"
decl_stmt|;
DECL|field|E_CLIENT_NOTCONNECTED
specifier|public
specifier|static
specifier|final
name|String
name|E_CLIENT_NOTCONNECTED
init|=
literal|"Client not connected"
decl_stmt|;
DECL|field|wrappedStream
specifier|private
name|InputStream
name|wrappedStream
decl_stmt|;
DECL|field|channel
specifier|private
name|ChannelSftp
name|channel
decl_stmt|;
DECL|field|stats
specifier|private
name|FileSystem
operator|.
name|Statistics
name|stats
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
decl_stmt|;
DECL|method|SFTPInputStream (InputStream stream, ChannelSftp channel, FileSystem.Statistics stats)
name|SFTPInputStream
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ChannelSftp
name|channel
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|E_NULL_INPUTSTREAM
argument_list|)
throw|;
block|}
if|if
condition|(
name|channel
operator|==
literal|null
operator|||
operator|!
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|E_CLIENT_NULL
argument_list|)
throw|;
block|}
name|this
operator|.
name|wrappedStream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek (long position)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_SEEK_NOTSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_SEEK_NOTSUPPORTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_STREAM_CLOSED
argument_list|)
throw|;
block|}
name|int
name|byteRead
init|=
name|wrappedStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteRead
operator|>=
literal|0
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&
name|byteRead
operator|>=
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|byteRead
return|;
block|}
DECL|method|read (byte[] buf, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_STREAM_CLOSED
argument_list|)
throw|;
block|}
name|int
name|result
init|=
name|wrappedStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&
name|result
operator|>
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|E_CLIENT_NOTCONNECTED
argument_list|)
throw|;
block|}
try|try
block|{
name|Session
name|session
init|=
name|channel
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

