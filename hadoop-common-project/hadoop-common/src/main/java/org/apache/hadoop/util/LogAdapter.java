begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
DECL|class|LogAdapter
class|class
name|LogAdapter
block|{
DECL|field|LOG
specifier|private
name|Log
name|LOG
decl_stmt|;
DECL|field|LOGGER
specifier|private
name|Logger
name|LOGGER
decl_stmt|;
DECL|method|LogAdapter (Log LOG)
specifier|private
name|LogAdapter
parameter_list|(
name|Log
name|LOG
parameter_list|)
block|{
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
block|}
DECL|method|LogAdapter (Logger LOGGER)
specifier|private
name|LogAdapter
parameter_list|(
name|Logger
name|LOGGER
parameter_list|)
block|{
name|this
operator|.
name|LOGGER
operator|=
name|LOGGER
expr_stmt|;
block|}
DECL|method|create (Log LOG)
specifier|public
specifier|static
name|LogAdapter
name|create
parameter_list|(
name|Log
name|LOG
parameter_list|)
block|{
return|return
operator|new
name|LogAdapter
argument_list|(
name|LOG
argument_list|)
return|;
block|}
DECL|method|create (Logger LOGGER)
specifier|public
specifier|static
name|LogAdapter
name|create
parameter_list|(
name|Logger
name|LOGGER
parameter_list|)
block|{
return|return
operator|new
name|LogAdapter
argument_list|(
name|LOGGER
argument_list|)
return|;
block|}
DECL|method|info (String msg)
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOGGER
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|warn (String msg, Throwable t)
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOGGER
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|debug (Throwable t)
specifier|public
name|void
name|debug
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOGGER
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|""
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|error (String msg)
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOGGER
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

