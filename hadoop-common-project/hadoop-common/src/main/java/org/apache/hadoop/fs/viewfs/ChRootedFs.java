begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStoragePolicySpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  *<code>ChrootedFs</code> is a file system with its root some path  * below the root of its base file system.  * Example: For a base file system hdfs://nn1/ with chRoot at /usr/foo, the  * members will be setup as shown below.  *<ul>  *<li>myFs is the base file system and points to hdfs at nn1</li>  *<li>myURI is hdfs://nn1/user/foo</li>  *<li>chRootPathPart is /user/foo</li>  *<li>workingDir is a directory related to chRoot</li>  *</ul>  *   * The paths are resolved as follows by ChRootedFileSystem:  *<ul>  *<li> Absolute path /a/b/c is resolved to /user/foo/a/b/c at myFs</li>  *<li> Relative path x/y is resolved to /user/foo/<workingDir>/x/y</li>  *</ul>   *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
comment|/*Evolving for a release,to be changed to Stable */
DECL|class|ChRootedFs
class|class
name|ChRootedFs
extends|extends
name|AbstractFileSystem
block|{
DECL|field|myFs
specifier|private
specifier|final
name|AbstractFileSystem
name|myFs
decl_stmt|;
comment|// the base file system whose root is changed
DECL|field|myUri
specifier|private
specifier|final
name|URI
name|myUri
decl_stmt|;
comment|// the base URI + the chroot
DECL|field|chRootPathPart
specifier|private
specifier|final
name|Path
name|chRootPathPart
decl_stmt|;
comment|// the root below the root of the base
DECL|field|chRootPathPartString
specifier|private
specifier|final
name|String
name|chRootPathPartString
decl_stmt|;
DECL|method|getMyFs ()
specifier|protected
name|AbstractFileSystem
name|getMyFs
parameter_list|()
block|{
return|return
name|myFs
return|;
block|}
comment|/**    *     * @param path    * @return return full path including the chroot    */
DECL|method|fullPath (final Path path)
specifier|protected
name|Path
name|fullPath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
name|super
operator|.
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|(
name|chRootPathPart
operator|.
name|isRoot
argument_list|()
condition|?
literal|""
else|:
name|chRootPathPartString
operator|)
operator|+
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isValidName (String src)
specifier|public
name|boolean
name|isValidName
parameter_list|(
name|String
name|src
parameter_list|)
block|{
return|return
name|myFs
operator|.
name|isValidName
argument_list|(
name|fullPath
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ChRootedFs (final AbstractFileSystem fs, final Path theRoot)
specifier|public
name|ChRootedFs
parameter_list|(
specifier|final
name|AbstractFileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|theRoot
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
argument_list|,
name|fs
operator|.
name|getUriDefaultPort
argument_list|()
argument_list|)
expr_stmt|;
name|myFs
operator|=
name|fs
expr_stmt|;
name|myFs
operator|.
name|checkPath
argument_list|(
name|theRoot
argument_list|)
expr_stmt|;
name|chRootPathPart
operator|=
operator|new
name|Path
argument_list|(
name|myFs
operator|.
name|getUriPath
argument_list|(
name|theRoot
argument_list|)
argument_list|)
expr_stmt|;
name|chRootPathPartString
operator|=
name|chRootPathPart
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|/*      * We are making URI include the chrootedPath: e.g. file:///chrootedPath.      * This is questionable since Path#makeQualified(uri, path) ignores      * the pathPart of a uri. Since this class is internal we can ignore      * this issue but if we were to make it external then this needs      * to be resolved.      */
comment|// Handle the two cases:
comment|//              scheme:/// and scheme://authority/
name|myUri
operator|=
operator|new
name|URI
argument_list|(
name|myFs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
operator|(
name|myFs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|Path
operator|.
name|SEPARATOR
operator|)
operator|+
name|chRootPathPart
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|checkPath
argument_list|(
name|theRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|myUri
return|;
block|}
comment|/**    *      * Strip out the root from the path.    *     * @param p - fully qualified path p    * @return -  the remaining path  without the begining /    */
DECL|method|stripOutRoot (final Path p)
specifier|public
name|String
name|stripOutRoot
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
block|{
try|try
block|{
name|checkPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal Error - path "
operator|+
name|p
operator|+
literal|" should have been with URI"
operator|+
name|myUri
argument_list|)
throw|;
block|}
name|String
name|pathPart
init|=
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
operator|(
name|pathPart
operator|.
name|length
argument_list|()
operator|==
name|chRootPathPartString
operator|.
name|length
argument_list|()
operator|)
condition|?
literal|""
else|:
name|pathPart
operator|.
name|substring
argument_list|(
name|chRootPathPartString
operator|.
name|length
argument_list|()
operator|+
operator|(
name|chRootPathPart
operator|.
name|isRoot
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|myFs
operator|.
name|getHomeDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInitialWorkingDirectory ()
specifier|public
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
comment|/*      * 3 choices here: return null or / or strip out the root out of myFs's      *  inital wd.       * Only reasonable choice for initialWd for chrooted fds is null       */
return|return
literal|null
return|;
block|}
DECL|method|getResolvedQualifiedPath (final Path f)
specifier|public
name|Path
name|getResolvedQualifiedPath
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
name|myFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|chRootPathPartString
operator|+
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createInternal (final Path f, final EnumSet<CreateFlag> flag, final FsPermission absolutePermission, final int bufferSize, final short replication, final long blockSize, final Progressable progress, final ChecksumOpt checksumOpt, final boolean createParent)
specifier|public
name|FSDataOutputStream
name|createInternal
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
specifier|final
name|FsPermission
name|absolutePermission
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|,
specifier|final
name|ChecksumOpt
name|checksumOpt
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|createInternal
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|flag
argument_list|,
name|absolutePermission
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|checksumOpt
argument_list|,
name|createParent
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|delete
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path f, final long start, final long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|getFileBlockLocations
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|getFileChecksum
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|getFileStatus
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
DECL|method|access (Path path, FsAction mode)
specifier|public
name|void
name|access
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
name|myFs
operator|.
name|access
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileLinkStatus (final Path f)
specifier|public
name|FileStatus
name|getFileLinkStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|getFileLinkStatus
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFsStatus ()
specifier|public
name|FsStatus
name|getFsStatus
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getFsStatus
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getServerDefaults (final Path f)
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getServerDefaults
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUriDefaultPort ()
specifier|public
name|int
name|getUriDefaultPort
parameter_list|()
block|{
return|return
name|myFs
operator|.
name|getUriDefaultPort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|listStatus
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatusIterator (final Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|listStatusIterator
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|listStatusIterator
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (final Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|listLocatedStatus
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdir (final Path dir, final FsPermission permission, final boolean createParent)
specifier|public
name|void
name|mkdir
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|myFs
operator|.
name|mkdir
argument_list|(
name|fullPath
argument_list|(
name|dir
argument_list|)
argument_list|,
name|permission
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|open
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|truncate (final Path f, final long newLength)
specifier|public
name|boolean
name|truncate
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|truncate
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|newLength
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (final Path src, final Path dst)
specifier|public
name|void
name|renameInternal
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
comment|// note fullPath will check that paths are relative to this FileSystem.
comment|// Hence both are in same file system and a rename is valid
name|myFs
operator|.
name|renameInternal
argument_list|(
name|fullPath
argument_list|(
name|src
argument_list|)
argument_list|,
name|fullPath
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (final Path src, final Path dst, final boolean overwrite)
specifier|public
name|void
name|renameInternal
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
comment|// note fullPath will check that paths are relative to this FileSystem.
comment|// Hence both are in same file system and a rename is valid
name|myFs
operator|.
name|renameInternal
argument_list|(
name|fullPath
argument_list|(
name|src
argument_list|)
argument_list|,
name|fullPath
argument_list|(
name|dst
argument_list|)
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path f, final String username, final String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|myFs
operator|.
name|setOwner
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path f, final FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|myFs
operator|.
name|setPermission
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path f, final short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|myFs
operator|.
name|setReplication
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|replication
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path f, final long mtime, final long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|myFs
operator|.
name|setTimes
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modifyAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|modifyAclEntries
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAclEntries (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|removeAclEntries
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeDefaultAcl (Path path)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|removeDefaultAcl
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAcl (Path path)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|removeAcl
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAcl (Path path, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|setAcl
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAclStatus (Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getAclStatus
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setXAttr (Path path, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|setXAttr
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getXAttr (Path path, String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getXAttr
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getXAttrs
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getXAttrs (Path path, List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getXAttrs
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|names
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listXAttrs (Path path)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|listXAttrs
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeXAttr (Path path, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|removeXAttr
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSnapshot (Path path, String name)
specifier|public
name|Path
name|createSnapshot
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|createSnapshot
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameSnapshot (Path path, String snapshotOldName, String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|renameSnapshot
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteSnapshot (Path snapshotDir, String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|Path
name|snapshotDir
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|deleteSnapshot
argument_list|(
name|fullPath
argument_list|(
name|snapshotDir
argument_list|)
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStoragePolicy (Path path, String policyName)
specifier|public
name|void
name|setStoragePolicy
parameter_list|(
name|Path
name|path
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|setStoragePolicy
argument_list|(
name|fullPath
argument_list|(
name|path
argument_list|)
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unsetStoragePolicy (final Path src)
specifier|public
name|void
name|unsetStoragePolicy
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|myFs
operator|.
name|unsetStoragePolicy
argument_list|(
name|fullPath
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicy (final Path src)
specifier|public
name|BlockStoragePolicySpi
name|getStoragePolicy
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getStoragePolicy
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllStoragePolicies ()
specifier|public
name|Collection
argument_list|<
name|?
extends|extends
name|BlockStoragePolicySpi
argument_list|>
name|getAllStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getAllStoragePolicies
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (final boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
specifier|final
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|myFs
operator|.
name|setVerifyChecksum
argument_list|(
name|verifyChecksum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|supportsSymlinks ()
specifier|public
name|boolean
name|supportsSymlinks
parameter_list|()
block|{
return|return
name|myFs
operator|.
name|supportsSymlinks
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSymlink (final Path target, final Path link, final boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
specifier|final
name|Path
name|target
parameter_list|,
specifier|final
name|Path
name|link
parameter_list|,
specifier|final
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
comment|/*      * We leave the link alone:      * If qualified or link relative then of course it is okay.      * If absolute (ie / relative) then the link has to be resolved      * relative to the changed root.      */
name|myFs
operator|.
name|createSymlink
argument_list|(
name|fullPath
argument_list|(
name|target
argument_list|)
argument_list|,
name|link
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLinkTarget (final Path f)
specifier|public
name|Path
name|getLinkTarget
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getLinkTarget
argument_list|(
name|fullPath
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationTokens (String renewer)
specifier|public
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|getDelegationTokens
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|myFs
operator|.
name|getDelegationTokens
argument_list|(
name|renewer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

