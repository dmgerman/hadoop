begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|SignalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class logs a message whenever we're about to exit on a UNIX signal.  * This is helpful for determining the root cause of a process' exit.  * For example, if the process exited because the system administrator   * ran a standard "kill," you would see 'EXITING ON SIGNAL SIGTERM' in the log.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|enum|SignalLogger
specifier|public
enum|enum
name|SignalLogger
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|registered
specifier|private
name|boolean
name|registered
init|=
literal|false
decl_stmt|;
comment|/**    * Our signal handler.    */
DECL|class|Handler
specifier|private
specifier|static
class|class
name|Handler
implements|implements
name|SignalHandler
block|{
DECL|field|LOG
specifier|final
specifier|private
name|LogAdapter
name|LOG
decl_stmt|;
DECL|field|prevHandler
specifier|final
specifier|private
name|SignalHandler
name|prevHandler
decl_stmt|;
DECL|method|Handler (String name, LogAdapter LOG)
name|Handler
parameter_list|(
name|String
name|name
parameter_list|,
name|LogAdapter
name|LOG
parameter_list|)
block|{
name|this
operator|.
name|LOG
operator|=
name|LOG
expr_stmt|;
name|prevHandler
operator|=
name|Signal
operator|.
name|handle
argument_list|(
operator|new
name|Signal
argument_list|(
name|name
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handle an incoming signal.      *      * @param signal    The incoming signal      */
annotation|@
name|Override
DECL|method|handle (Signal signal)
specifier|public
name|void
name|handle
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"RECEIVED SIGNAL "
operator|+
name|signal
operator|.
name|getNumber
argument_list|()
operator|+
literal|": SIG"
operator|+
name|signal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|prevHandler
operator|.
name|handle
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register some signal handlers.    *    * @param LOG        The log4j logfile to use in the signal handlers.    */
DECL|method|register (final Log LOG)
specifier|public
name|void
name|register
parameter_list|(
specifier|final
name|Log
name|LOG
parameter_list|)
block|{
name|register
argument_list|(
name|LogAdapter
operator|.
name|create
argument_list|(
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|register (final LogAdapter LOG)
name|void
name|register
parameter_list|(
specifier|final
name|LogAdapter
name|LOG
parameter_list|)
block|{
if|if
condition|(
name|registered
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't re-install the signal handlers."
argument_list|)
throw|;
block|}
name|registered
operator|=
literal|true
expr_stmt|;
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"registered UNIX signal handlers for ["
argument_list|)
expr_stmt|;
specifier|final
name|String
name|SIGNALS
index|[]
init|=
block|{
literal|"TERM"
block|,
literal|"HUP"
block|,
literal|"INT"
block|}
decl_stmt|;
name|String
name|separator
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|signalName
range|:
name|SIGNALS
control|)
block|{
try|try
block|{
operator|new
name|Handler
argument_list|(
name|signalName
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|signalName
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|bld
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|bld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_enum

end_unit

