begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|// Keeps track of which datanodes/nodemanagers are allowed to connect to the
end_comment

begin_comment
comment|// namenode/resourcemanager.
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HostsFileReader
specifier|public
class|class
name|HostsFileReader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HostsFileReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|current
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|HostDetails
argument_list|>
name|current
decl_stmt|;
DECL|method|HostsFileReader (String inFile, String exFile)
specifier|public
name|HostsFileReader
parameter_list|(
name|String
name|inFile
parameter_list|,
name|String
name|exFile
parameter_list|)
throws|throws
name|IOException
block|{
name|HostDetails
name|hostDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|inFile
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|exFile
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|current
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|hostDetails
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|inFile
argument_list|,
name|exFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|HostsFileReader (String includesFile, InputStream inFileInputStream, String excludesFile, InputStream exFileInputStream)
specifier|public
name|HostsFileReader
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|InputStream
name|inFileInputStream
parameter_list|,
name|String
name|excludesFile
parameter_list|,
name|InputStream
name|exFileInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|HostDetails
name|hostDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|includesFile
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|excludesFile
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|current
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|hostDetails
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|inFileInputStream
argument_list|,
name|exFileInputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|readFileToSet (String type, String filename, Set<String> set)
specifier|public
specifier|static
name|void
name|readFileToSet
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|readFileToSetWithFileInputStream
argument_list|(
name|type
argument_list|,
name|filename
argument_list|,
name|fis
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|readFileToSetWithFileInputStream (String type, String filename, InputStream fileInputStream, Set<String> set)
specifier|public
specifier|static
name|void
name|readFileToSetWithFileInputStream
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|,
name|InputStream
name|fileInputStream
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fileInputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nodes
init|=
name|line
operator|.
name|split
argument_list|(
literal|"[ \t\n\f\r]+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
name|nodes
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|// Everything from now on is a comment
break|break;
block|}
if|if
condition|(
operator|!
name|nodes
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding a node \""
operator|+
name|nodes
index|[
name|i
index|]
operator|+
literal|"\" to the list of "
operator|+
name|type
operator|+
literal|" hosts from "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|nodes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
name|HostDetails
name|hostDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|refresh
argument_list|(
name|hostDetails
operator|.
name|includesFile
argument_list|,
name|hostDetails
operator|.
name|excludesFile
argument_list|)
expr_stmt|;
block|}
DECL|method|readFileToMap (String type, String filename, Map<String, Integer> map)
specifier|public
specifier|static
name|void
name|readFileToMap
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|readFileToMapWithFileInputStream
argument_list|(
name|type
argument_list|,
name|filename
argument_list|,
name|fis
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|readFileToMapWithFileInputStream (String type, String filename, InputStream inputStream, Map<String, Integer> map)
specifier|public
specifier|static
name|void
name|readFileToMapWithFileInputStream
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The input file could be either simple text or XML.
name|boolean
name|xmlInput
init|=
name|filename
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlInput
condition|)
block|{
name|readXmlFileToMapWithFileInputStream
argument_list|(
name|type
argument_list|,
name|filename
argument_list|,
name|inputStream
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|readFileToSetWithFileInputStream
argument_list|(
name|type
argument_list|,
name|filename
argument_list|,
name|inputStream
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readXmlFileToMapWithFileInputStream (String type, String filename, InputStream fileInputStream, Map<String, Integer> map)
specifier|public
specifier|static
name|void
name|readXmlFileToMapWithFileInputStream
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|,
name|InputStream
name|fileInputStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|dom
decl_stmt|;
name|DocumentBuilderFactory
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|db
init|=
name|builder
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|dom
operator|=
name|db
operator|.
name|parse
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
comment|// Examples:
comment|//<host><name>host1</name></host>
comment|//<host><name>host2</name><timeout>123</timeout></host>
comment|//<host><name>host3</name><timeout>-1</timeout></host>
comment|//<host><name>host4, host5,host6</name><timeout>1800</timeout></host>
name|Element
name|doc
init|=
name|dom
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
comment|// Support both single host and comma-separated list of hosts.
name|String
name|v
init|=
name|readFirstTagValue
argument_list|(
name|e
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|readFirstTagValue
argument_list|(
name|e
argument_list|,
literal|"timeout"
argument_list|)
decl_stmt|;
name|Integer
name|timeout
init|=
operator|(
name|str
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding a node \""
operator|+
name|host
operator|+
literal|"\" to the list of "
operator|+
name|type
operator|+
literal|" hosts from "
operator|+
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error parsing "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readFirstTagValue (Element e, String tag)
specifier|static
name|String
name|readFirstTagValue
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|e
operator|.
name|getElementsByTagName
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
return|;
block|}
DECL|method|refresh (String includesFile, String excludesFile)
specifier|public
name|void
name|refresh
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|String
name|excludesFile
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing hosts (include/exclude) list"
argument_list|)
expr_stmt|;
name|HostDetails
name|oldDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newIncludes
init|=
name|oldDetails
operator|.
name|includes
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|newExcludes
init|=
name|oldDetails
operator|.
name|excludes
decl_stmt|;
if|if
condition|(
name|includesFile
operator|!=
literal|null
operator|&&
operator|!
name|includesFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newIncludes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|readFileToSet
argument_list|(
literal|"included"
argument_list|,
name|includesFile
argument_list|,
name|newIncludes
argument_list|)
expr_stmt|;
name|newIncludes
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|newIncludes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludesFile
operator|!=
literal|null
operator|&&
operator|!
name|excludesFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newExcludes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|readFileToMap
argument_list|(
literal|"excluded"
argument_list|,
name|excludesFile
argument_list|,
name|newExcludes
argument_list|)
expr_stmt|;
name|newExcludes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newExcludes
argument_list|)
expr_stmt|;
block|}
name|HostDetails
name|newDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|includesFile
argument_list|,
name|newIncludes
argument_list|,
name|excludesFile
argument_list|,
name|newExcludes
argument_list|)
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
name|newDetails
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|refresh (InputStream inFileInputStream, InputStream exFileInputStream)
specifier|public
name|void
name|refresh
parameter_list|(
name|InputStream
name|inFileInputStream
parameter_list|,
name|InputStream
name|exFileInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing hosts (include/exclude) list"
argument_list|)
expr_stmt|;
name|HostDetails
name|oldDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newIncludes
init|=
name|oldDetails
operator|.
name|includes
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|newExcludes
init|=
name|oldDetails
operator|.
name|excludes
decl_stmt|;
if|if
condition|(
name|inFileInputStream
operator|!=
literal|null
condition|)
block|{
name|newIncludes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|readFileToSetWithFileInputStream
argument_list|(
literal|"included"
argument_list|,
name|oldDetails
operator|.
name|includesFile
argument_list|,
name|inFileInputStream
argument_list|,
name|newIncludes
argument_list|)
expr_stmt|;
name|newIncludes
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|newIncludes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exFileInputStream
operator|!=
literal|null
condition|)
block|{
name|newExcludes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|readFileToMapWithFileInputStream
argument_list|(
literal|"excluded"
argument_list|,
name|oldDetails
operator|.
name|excludesFile
argument_list|,
name|exFileInputStream
argument_list|,
name|newExcludes
argument_list|)
expr_stmt|;
name|newExcludes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|newExcludes
argument_list|)
expr_stmt|;
block|}
name|HostDetails
name|newDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|oldDetails
operator|.
name|includesFile
argument_list|,
name|newIncludes
argument_list|,
name|oldDetails
operator|.
name|excludesFile
argument_list|,
name|newExcludes
argument_list|)
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
name|newDetails
argument_list|)
expr_stmt|;
block|}
DECL|method|getHosts ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHosts
parameter_list|()
block|{
name|HostDetails
name|hostDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
return|;
block|}
DECL|method|getExcludedHosts ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludedHosts
parameter_list|()
block|{
name|HostDetails
name|hostDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|hostDetails
operator|.
name|getExcludedHosts
argument_list|()
return|;
block|}
comment|/**    * Retrieve an atomic view of the included and excluded hosts.    *    * @param includes set to populate with included hosts    * @param excludes set to populate with excluded hosts    * @deprecated use {@link #getHostDetails() instead}    */
annotation|@
name|Deprecated
DECL|method|getHostDetails (Set<String> includes, Set<String> excludes)
specifier|public
name|void
name|getHostDetails
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
parameter_list|)
block|{
name|HostDetails
name|hostDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|includes
operator|.
name|addAll
argument_list|(
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|excludes
operator|.
name|addAll
argument_list|(
name|hostDetails
operator|.
name|getExcludedHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve an atomic view of the included and excluded hosts.    *    * @param includeHosts set to populate with included hosts    * @param excludeHosts map to populate with excluded hosts    * @deprecated use {@link #getHostDetails() instead}    */
annotation|@
name|Deprecated
DECL|method|getHostDetails (Set<String> includeHosts, Map<String, Integer> excludeHosts)
specifier|public
name|void
name|getHostDetails
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includeHosts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|excludeHosts
parameter_list|)
block|{
name|HostDetails
name|hostDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|includeHosts
operator|.
name|addAll
argument_list|(
name|hostDetails
operator|.
name|getIncludedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|excludeHosts
operator|.
name|putAll
argument_list|(
name|hostDetails
operator|.
name|getExcludedMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve an atomic view of the included and excluded hosts.    *    * @return the included and excluded hosts    */
DECL|method|getHostDetails ()
specifier|public
name|HostDetails
name|getHostDetails
parameter_list|()
block|{
return|return
name|current
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setIncludesFile (String includesFile)
specifier|public
name|void
name|setIncludesFile
parameter_list|(
name|String
name|includesFile
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting the includes file to "
operator|+
name|includesFile
argument_list|)
expr_stmt|;
name|HostDetails
name|oldDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|HostDetails
name|newDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|includesFile
argument_list|,
name|oldDetails
operator|.
name|includes
argument_list|,
name|oldDetails
operator|.
name|excludesFile
argument_list|,
name|oldDetails
operator|.
name|excludes
argument_list|)
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
name|newDetails
argument_list|)
expr_stmt|;
block|}
DECL|method|setExcludesFile (String excludesFile)
specifier|public
name|void
name|setExcludesFile
parameter_list|(
name|String
name|excludesFile
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting the excludes file to "
operator|+
name|excludesFile
argument_list|)
expr_stmt|;
name|HostDetails
name|oldDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|HostDetails
name|newDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|oldDetails
operator|.
name|includesFile
argument_list|,
name|oldDetails
operator|.
name|includes
argument_list|,
name|excludesFile
argument_list|,
name|oldDetails
operator|.
name|excludes
argument_list|)
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
name|newDetails
argument_list|)
expr_stmt|;
block|}
DECL|method|updateFileNames (String includesFile, String excludesFile)
specifier|public
name|void
name|updateFileNames
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|String
name|excludesFile
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting the includes file to "
operator|+
name|includesFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting the excludes file to "
operator|+
name|excludesFile
argument_list|)
expr_stmt|;
name|HostDetails
name|oldDetails
init|=
name|current
operator|.
name|get
argument_list|()
decl_stmt|;
name|HostDetails
name|newDetails
init|=
operator|new
name|HostDetails
argument_list|(
name|includesFile
argument_list|,
name|oldDetails
operator|.
name|includes
argument_list|,
name|excludesFile
argument_list|,
name|oldDetails
operator|.
name|excludes
argument_list|)
decl_stmt|;
name|current
operator|.
name|set
argument_list|(
name|newDetails
argument_list|)
expr_stmt|;
block|}
comment|/**    * An atomic view of the included and excluded hosts    */
DECL|class|HostDetails
specifier|public
specifier|static
class|class
name|HostDetails
block|{
DECL|field|includesFile
specifier|private
specifier|final
name|String
name|includesFile
decl_stmt|;
DECL|field|includes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includes
decl_stmt|;
DECL|field|excludesFile
specifier|private
specifier|final
name|String
name|excludesFile
decl_stmt|;
comment|// exclude host list with optional timeout.
comment|// If the value is null, it indicates default timeout.
DECL|field|excludes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|excludes
decl_stmt|;
DECL|method|HostDetails (String includesFile, Set<String> includes, String excludesFile, Map<String, Integer> excludes)
name|HostDetails
parameter_list|(
name|String
name|includesFile
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includes
parameter_list|,
name|String
name|excludesFile
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|excludes
parameter_list|)
block|{
name|this
operator|.
name|includesFile
operator|=
name|includesFile
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|includes
expr_stmt|;
name|this
operator|.
name|excludesFile
operator|=
name|excludesFile
expr_stmt|;
name|this
operator|.
name|excludes
operator|=
name|excludes
expr_stmt|;
block|}
DECL|method|getIncludesFile ()
specifier|public
name|String
name|getIncludesFile
parameter_list|()
block|{
return|return
name|includesFile
return|;
block|}
DECL|method|getIncludedHosts ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIncludedHosts
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
DECL|method|getExcludesFile ()
specifier|public
name|String
name|getExcludesFile
parameter_list|()
block|{
return|return
name|excludesFile
return|;
block|}
DECL|method|getExcludedHosts ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludedHosts
parameter_list|()
block|{
return|return
name|excludes
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getExcludedMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getExcludedMap
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
block|}
block|}
end_class

end_unit

