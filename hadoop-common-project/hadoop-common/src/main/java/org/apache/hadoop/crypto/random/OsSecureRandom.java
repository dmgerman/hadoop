begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.random
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|random
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_SECURE_RANDOM_DEVICE_FILE_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_SECURE_RANDOM_DEVICE_FILE_PATH_DEFAULT
import|;
end_import

begin_comment
comment|/**  * A Random implementation that uses random bytes sourced from the  * operating system.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OsSecureRandom
specifier|public
class|class
name|OsSecureRandom
extends|extends
name|Random
implements|implements
name|Closeable
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OsSecureRandom
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6391500337172057900L
decl_stmt|;
DECL|field|conf
specifier|private
specifier|transient
name|Configuration
name|conf
decl_stmt|;
DECL|field|RESERVOIR_LENGTH
specifier|private
specifier|final
name|int
name|RESERVOIR_LENGTH
init|=
literal|8192
decl_stmt|;
DECL|field|randomDevPath
specifier|private
name|String
name|randomDevPath
decl_stmt|;
DECL|field|stream
specifier|private
specifier|transient
name|FileInputStream
name|stream
decl_stmt|;
DECL|field|reservoir
specifier|private
specifier|final
name|byte
index|[]
name|reservoir
init|=
operator|new
name|byte
index|[
name|RESERVOIR_LENGTH
index|]
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
init|=
name|reservoir
operator|.
name|length
decl_stmt|;
DECL|method|fillReservoir (int min)
specifier|private
name|void
name|fillReservoir
parameter_list|(
name|int
name|min
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|reservoir
operator|.
name|length
operator|-
name|min
condition|)
block|{
try|try
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|randomDevPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|reservoir
argument_list|,
literal|0
argument_list|,
name|reservoir
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to fill reservoir"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|OsSecureRandom ()
specifier|public
name|OsSecureRandom
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|synchronized
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|randomDevPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_SECURE_RANDOM_DEVICE_FILE_PATH_KEY
argument_list|,
name|HADOOP_SECURITY_SECURE_RANDOM_DEVICE_FILE_PATH_DEFAULT
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|synchronized
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|nextBytes (byte[] bytes)
specifier|synchronized
specifier|public
name|void
name|nextBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|int
name|off
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|off
operator|<
name|bytes
operator|.
name|length
condition|)
block|{
name|fillReservoir
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bytes
operator|.
name|length
operator|-
name|off
argument_list|,
name|reservoir
operator|.
name|length
operator|-
name|pos
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|reservoir
argument_list|,
name|pos
argument_list|,
name|bytes
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|off
operator|+=
name|n
expr_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|next (int nbits)
specifier|synchronized
specifier|protected
name|int
name|next
parameter_list|(
name|int
name|nbits
parameter_list|)
block|{
name|fillReservoir
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
operator|(
operator|(
name|n
operator|<<
literal|8
operator|)
operator||
operator|(
name|reservoir
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|)
expr_stmt|;
block|}
return|return
name|n
operator|&
operator|(
literal|0xffffffff
operator|>>
operator|(
literal|32
operator|-
name|nbits
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|synchronized
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

