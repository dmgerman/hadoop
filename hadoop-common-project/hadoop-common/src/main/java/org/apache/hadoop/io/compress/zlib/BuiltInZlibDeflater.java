begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zlib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A wrapper around java.util.zip.Deflater to make it conform   * to org.apache.hadoop.io.compress.Compressor interface.  *   */
end_comment

begin_class
DECL|class|BuiltInZlibDeflater
specifier|public
class|class
name|BuiltInZlibDeflater
extends|extends
name|Deflater
implements|implements
name|Compressor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BuiltInZlibDeflater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BuiltInZlibDeflater (int level, boolean nowrap)
specifier|public
name|BuiltInZlibDeflater
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
name|super
argument_list|(
name|level
argument_list|,
name|nowrap
argument_list|)
expr_stmt|;
block|}
DECL|method|BuiltInZlibDeflater (int level)
specifier|public
name|BuiltInZlibDeflater
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|BuiltInZlibDeflater ()
specifier|public
name|BuiltInZlibDeflater
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compress (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|compress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|deflate
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * reinit the compressor with the given configuration. It will reset the    * compressor's compression level and compression strategy. Different from    *<tt>ZlibCompressor</tt>,<tt>BuiltInZlibDeflater</tt> only support three    * kind of compression strategy: FILTERED, HUFFMAN_ONLY and DEFAULT_STRATEGY.    * It will use DEFAULT_STRATEGY as default if the configured compression    * strategy is not supported.    */
annotation|@
name|Override
DECL|method|reinit (Configuration conf)
specifier|public
name|void
name|reinit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setLevel
argument_list|(
name|ZlibFactory
operator|.
name|getCompressionLevel
argument_list|(
name|conf
argument_list|)
operator|.
name|compressionLevel
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ZlibCompressor
operator|.
name|CompressionStrategy
name|strategy
init|=
name|ZlibFactory
operator|.
name|getCompressionStrategy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|setStrategy
argument_list|(
name|strategy
operator|.
name|compressionStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ill
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|strategy
operator|+
literal|" not supported by BuiltInZlibDeflater."
argument_list|)
expr_stmt|;
name|setStrategy
argument_list|(
name|DEFAULT_STRATEGY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reinit compressor with new compression configuration"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

