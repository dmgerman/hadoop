begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CancelledKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ServerSocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
operator|.
name|IntegerRanges
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|VersionMismatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|metrics
operator|.
name|RpcDetailedMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|metrics
operator|.
name|RpcMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|IpcConnectionContextProtos
operator|.
name|IpcConnectionContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
operator|.
name|RpcStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|SaslDigestCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|SaslGssCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|SaslStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ServiceAuthorizationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_comment
comment|/** An abstract IPC service.  IPC calls take a single {@link Writable} as a  * parameter, and return a {@link Writable} as their value.  A service runs on  * a port and is defined by a parameter class and a value class.  *   * @see Client  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|value
operator|=
block|{
literal|"Common"
block|,
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"Yarn"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Server
specifier|public
specifier|abstract
class|class
name|Server
block|{
DECL|field|authorize
specifier|private
specifier|final
name|boolean
name|authorize
decl_stmt|;
DECL|field|enabledAuthMethods
specifier|private
name|EnumSet
argument_list|<
name|AuthMethod
argument_list|>
name|enabledAuthMethods
decl_stmt|;
DECL|field|exceptionsHandler
specifier|private
name|ExceptionsHandler
name|exceptionsHandler
init|=
operator|new
name|ExceptionsHandler
argument_list|()
decl_stmt|;
DECL|method|addTerseExceptions (Class<?>.... exceptionClass)
specifier|public
name|void
name|addTerseExceptions
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|exceptionClass
parameter_list|)
block|{
name|exceptionsHandler
operator|.
name|addTerseExceptions
argument_list|(
name|exceptionClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * ExceptionsHandler manages Exception groups for special handling    * e.g., terse exception group for concise logging messages    */
DECL|class|ExceptionsHandler
specifier|static
class|class
name|ExceptionsHandler
block|{
DECL|field|terseExceptions
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|terseExceptions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Add exception class so server won't log its stack trace.      * Modifying the terseException through this method is thread safe.      *      * @param exceptionClass exception classes       */
DECL|method|addTerseExceptions (Class<?>.... exceptionClass)
name|void
name|addTerseExceptions
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|exceptionClass
parameter_list|)
block|{
comment|// Make a copy of terseException for performing modification
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|newSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|terseExceptions
argument_list|)
decl_stmt|;
comment|// Add all class names into the HashSet
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|name
range|:
name|exceptionClass
control|)
block|{
name|newSet
operator|.
name|add
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Replace terseException set
name|terseExceptions
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|newSet
argument_list|)
expr_stmt|;
block|}
DECL|method|isTerse (Class<?> t)
name|boolean
name|isTerse
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|t
parameter_list|)
block|{
return|return
name|terseExceptions
operator|.
name|contains
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * The first four bytes of Hadoop RPC connections    */
DECL|field|HEADER
specifier|public
specifier|static
specifier|final
name|ByteBuffer
name|HEADER
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"hrpc"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Serialization type for ConnectionContext and RpcRequestHeader    */
DECL|enum|IpcSerializationType
specifier|public
enum|enum
name|IpcSerializationType
block|{
comment|// Add new serialization type to the end without affecting the enum order
DECL|enumConstant|PROTOBUF
name|PROTOBUF
block|;
DECL|method|write (DataOutput out)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|this
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fromByte (byte b)
specifier|static
name|IpcSerializationType
name|fromByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|IpcSerializationType
operator|.
name|values
argument_list|()
index|[
name|b
index|]
return|;
block|}
block|}
comment|/**    * If the user accidentally sends an HTTP GET to an IPC port, we detect this    * and send back a nicer response.    */
DECL|field|HTTP_GET_BYTES
specifier|private
specifier|static
specifier|final
name|ByteBuffer
name|HTTP_GET_BYTES
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"GET "
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * An HTTP response to send back if we detect an HTTP request to our IPC    * port.    */
DECL|field|RECEIVED_HTTP_REQ_RESPONSE
specifier|static
specifier|final
name|String
name|RECEIVED_HTTP_REQ_RESPONSE
init|=
literal|"HTTP/1.1 404 Not Found\r\n"
operator|+
literal|"Content-type: text/plain\r\n\r\n"
operator|+
literal|"It looks like you are making an HTTP request to a Hadoop IPC port. "
operator|+
literal|"This is not the correct port for the web interface on this daemon.\r\n"
decl_stmt|;
comment|// 1 : Introduce ping and server does not throw away RPCs
comment|// 3 : Introduce the protocol into the RPC connection header
comment|// 4 : Introduced SASL security layer
comment|// 5 : Introduced use of {@link ArrayPrimitiveWritable$Internal}
comment|//     in ObjectWritable to efficiently transmit arrays of primitives
comment|// 6 : Made RPC Request header explicit
comment|// 7 : Changed Ipc Connection Header to use Protocol buffers
comment|// 8 : SASL server always sends a final response
comment|// 9 : Changes to protocol for HADOOP-8990
DECL|field|CURRENT_VERSION
specifier|public
specifier|static
specifier|final
name|byte
name|CURRENT_VERSION
init|=
literal|9
decl_stmt|;
comment|/**    * Initial and max size of response buffer    */
DECL|field|INITIAL_RESP_BUF_SIZE
specifier|static
name|int
name|INITIAL_RESP_BUF_SIZE
init|=
literal|10240
decl_stmt|;
DECL|class|RpcKindMapValue
specifier|static
class|class
name|RpcKindMapValue
block|{
DECL|field|rpcRequestWrapperClass
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestWrapperClass
decl_stmt|;
DECL|field|rpcInvoker
specifier|final
name|RpcInvoker
name|rpcInvoker
decl_stmt|;
DECL|method|RpcKindMapValue (Class<? extends Writable> rpcRequestWrapperClass, RpcInvoker rpcInvoker)
name|RpcKindMapValue
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestWrapperClass
parameter_list|,
name|RpcInvoker
name|rpcInvoker
parameter_list|)
block|{
name|this
operator|.
name|rpcInvoker
operator|=
name|rpcInvoker
expr_stmt|;
name|this
operator|.
name|rpcRequestWrapperClass
operator|=
name|rpcRequestWrapperClass
expr_stmt|;
block|}
block|}
DECL|field|rpcKindMap
specifier|static
name|Map
argument_list|<
name|RPC
operator|.
name|RpcKind
argument_list|,
name|RpcKindMapValue
argument_list|>
name|rpcKindMap
init|=
operator|new
name|HashMap
argument_list|<
name|RPC
operator|.
name|RpcKind
argument_list|,
name|RpcKindMapValue
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|/**    * Register a RPC kind and the class to deserialize the rpc request.    *     * Called by static initializers of rpcKind Engines    * @param rpcKind    * @param rpcRequestWrapperClass - this class is used to deserialze the    *  the rpc request.    *  @param rpcInvoker - use to process the calls on SS.    */
DECL|method|registerProtocolEngine (RPC.RpcKind rpcKind, Class<? extends Writable> rpcRequestWrapperClass, RpcInvoker rpcInvoker)
specifier|public
specifier|static
name|void
name|registerProtocolEngine
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestWrapperClass
parameter_list|,
name|RpcInvoker
name|rpcInvoker
parameter_list|)
block|{
name|RpcKindMapValue
name|old
init|=
name|rpcKindMap
operator|.
name|put
argument_list|(
name|rpcKind
argument_list|,
operator|new
name|RpcKindMapValue
argument_list|(
name|rpcRequestWrapperClass
argument_list|,
name|rpcInvoker
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|rpcKindMap
operator|.
name|put
argument_list|(
name|rpcKind
argument_list|,
name|old
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ReRegistration of rpcKind: "
operator|+
name|rpcKind
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"rpcKind="
operator|+
name|rpcKind
operator|+
literal|", rpcRequestWrapperClass="
operator|+
name|rpcRequestWrapperClass
operator|+
literal|", rpcInvoker="
operator|+
name|rpcInvoker
argument_list|)
expr_stmt|;
block|}
DECL|method|getRpcRequestWrapper ( RpcKindProto rpcKind)
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getRpcRequestWrapper
parameter_list|(
name|RpcKindProto
name|rpcKind
parameter_list|)
block|{
if|if
condition|(
name|rpcRequestClass
operator|!=
literal|null
condition|)
return|return
name|rpcRequestClass
return|;
name|RpcKindMapValue
name|val
init|=
name|rpcKindMap
operator|.
name|get
argument_list|(
name|ProtoUtil
operator|.
name|convert
argument_list|(
name|rpcKind
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|val
operator|.
name|rpcRequestWrapperClass
return|;
block|}
DECL|method|getRpcInvoker (RPC.RpcKind rpcKind)
specifier|public
specifier|static
name|RpcInvoker
name|getRpcInvoker
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|)
block|{
name|RpcKindMapValue
name|val
init|=
name|rpcKindMap
operator|.
name|get
argument_list|(
name|rpcKind
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|val
operator|.
name|rpcInvoker
return|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUDITLOG
specifier|public
specifier|static
specifier|final
name|Log
name|AUDITLOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"SecurityLogger."
operator|+
name|Server
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|AUTH_FAILED_FOR
specifier|private
specifier|static
specifier|final
name|String
name|AUTH_FAILED_FOR
init|=
literal|"Auth failed for "
decl_stmt|;
DECL|field|AUTH_SUCCESSFUL_FOR
specifier|private
specifier|static
specifier|final
name|String
name|AUTH_SUCCESSFUL_FOR
init|=
literal|"Auth successful for "
decl_stmt|;
DECL|field|SERVER
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Server
argument_list|>
name|SERVER
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Server
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|PROTOCOL_CACHE
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PROTOCOL_CACHE
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getProtocolClass (String protocolName, Configuration conf)
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getProtocolClass
parameter_list|(
name|String
name|protocolName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
init|=
name|PROTOCOL_CACHE
operator|.
name|get
argument_list|(
name|protocolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
name|protocol
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|protocolName
argument_list|)
expr_stmt|;
name|PROTOCOL_CACHE
operator|.
name|put
argument_list|(
name|protocolName
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
return|return
name|protocol
return|;
block|}
comment|/** Returns the server instance called under or null.  May be called under    * {@link #call(Writable, long)} implementations, and under {@link Writable}    * methods of paramters and return values.  Permits applications to access    * the server context.*/
DECL|method|get ()
specifier|public
specifier|static
name|Server
name|get
parameter_list|()
block|{
return|return
name|SERVER
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** This is set to Call object before Handler invokes an RPC and reset    * after the call returns.    */
DECL|field|CurCall
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Call
argument_list|>
name|CurCall
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Call
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Returns the remote side ip address when invoked inside an RPC     *  Returns null incase of an error.    */
DECL|method|getRemoteIp ()
specifier|public
specifier|static
name|InetAddress
name|getRemoteIp
parameter_list|()
block|{
name|Call
name|call
init|=
name|CurCall
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
return|return
name|call
operator|.
name|connection
operator|.
name|getHostInetAddress
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Returns remote address as a string when invoked inside an RPC.    *  Returns null in case of an error.    */
DECL|method|getRemoteAddress ()
specifier|public
specifier|static
name|String
name|getRemoteAddress
parameter_list|()
block|{
name|InetAddress
name|addr
init|=
name|getRemoteIp
argument_list|()
decl_stmt|;
return|return
operator|(
name|addr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|addr
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
comment|/** Returns the RPC remote user when invoked inside an RPC.  Note this    *  may be different than the current user if called within another doAs    *  @return connection's UGI or null if not an RPC    */
DECL|method|getRemoteUser ()
specifier|public
specifier|static
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
block|{
name|Call
name|call
init|=
name|CurCall
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
name|call
operator|!=
literal|null
operator|)
condition|?
name|call
operator|.
name|connection
operator|.
name|user
else|:
literal|null
return|;
block|}
comment|/** Return true if the invocation was through an RPC.    */
DECL|method|isRpcInvocation ()
specifier|public
specifier|static
name|boolean
name|isRpcInvocation
parameter_list|()
block|{
return|return
name|CurCall
operator|.
name|get
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|field|bindAddress
specifier|private
name|String
name|bindAddress
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
comment|// port we listen on
DECL|field|handlerCount
specifier|private
name|int
name|handlerCount
decl_stmt|;
comment|// number of handler threads
DECL|field|readThreads
specifier|private
name|int
name|readThreads
decl_stmt|;
comment|// number of read threads
DECL|field|rpcRequestClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestClass
decl_stmt|;
comment|// class used for deserializing the rpc request
DECL|field|maxIdleTime
specifier|private
name|int
name|maxIdleTime
decl_stmt|;
comment|// the maximum idle time after
comment|// which a client may be disconnected
DECL|field|thresholdIdleConnections
specifier|private
name|int
name|thresholdIdleConnections
decl_stmt|;
comment|// the number of idle connections
comment|// after which we will start
comment|// cleaning up idle
comment|// connections
DECL|field|maxConnectionsToNuke
name|int
name|maxConnectionsToNuke
decl_stmt|;
comment|// the max number of
comment|// connections to nuke
comment|//during a cleanup
DECL|field|rpcMetrics
specifier|protected
name|RpcMetrics
name|rpcMetrics
decl_stmt|;
DECL|field|rpcDetailedMetrics
specifier|protected
name|RpcDetailedMetrics
name|rpcDetailedMetrics
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|portRangeConfig
specifier|private
name|String
name|portRangeConfig
init|=
literal|null
decl_stmt|;
DECL|field|secretManager
specifier|private
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
decl_stmt|;
DECL|field|serviceAuthorizationManager
specifier|private
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
DECL|field|maxQueueSize
specifier|private
name|int
name|maxQueueSize
decl_stmt|;
DECL|field|maxRespSize
specifier|private
specifier|final
name|int
name|maxRespSize
decl_stmt|;
DECL|field|socketSendBufferSize
specifier|private
name|int
name|socketSendBufferSize
decl_stmt|;
DECL|field|tcpNoDelay
specifier|private
specifier|final
name|boolean
name|tcpNoDelay
decl_stmt|;
comment|// if T then disable Nagle's Algorithm
DECL|field|running
specifier|volatile
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
comment|// true while server runs
DECL|field|callQueue
specifier|private
name|BlockingQueue
argument_list|<
name|Call
argument_list|>
name|callQueue
decl_stmt|;
comment|// queued calls
DECL|field|connectionList
specifier|private
name|List
argument_list|<
name|Connection
argument_list|>
name|connectionList
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|Connection
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|//maintain a list
comment|//of client connections
DECL|field|listener
specifier|private
name|Listener
name|listener
init|=
literal|null
decl_stmt|;
DECL|field|responder
specifier|private
name|Responder
name|responder
init|=
literal|null
decl_stmt|;
DECL|field|numConnections
specifier|private
name|int
name|numConnections
init|=
literal|0
decl_stmt|;
DECL|field|handlers
specifier|private
name|Handler
index|[]
name|handlers
init|=
literal|null
decl_stmt|;
comment|/**    * A convenience method to bind to a given address and report     * better exceptions if the address is not a valid host.    * @param socket the socket to bind    * @param address the address to bind to    * @param backlog the number of connections allowed in the queue    * @throws BindException if the address can't be bound    * @throws UnknownHostException if the address isn't a valid host name    * @throws IOException other random errors from bind    */
DECL|method|bind (ServerSocket socket, InetSocketAddress address, int backlog)
specifier|public
specifier|static
name|void
name|bind
parameter_list|(
name|ServerSocket
name|socket
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|int
name|backlog
parameter_list|)
throws|throws
name|IOException
block|{
name|bind
argument_list|(
name|socket
argument_list|,
name|address
argument_list|,
name|backlog
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|bind (ServerSocket socket, InetSocketAddress address, int backlog, Configuration conf, String rangeConf)
specifier|public
specifier|static
name|void
name|bind
parameter_list|(
name|ServerSocket
name|socket
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|int
name|backlog
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|rangeConf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|IntegerRanges
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rangeConf
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
name|conf
operator|.
name|getRange
argument_list|(
name|rangeConf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|address
operator|.
name|getPort
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|socket
operator|.
name|bind
argument_list|(
name|address
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Integer
name|port
range|:
name|range
control|)
block|{
if|if
condition|(
name|socket
operator|.
name|isBound
argument_list|()
condition|)
break|break;
try|try
block|{
name|InetSocketAddress
name|temp
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
name|temp
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
comment|//Ignored
block|}
block|}
if|if
condition|(
operator|!
name|socket
operator|.
name|isBound
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BindException
argument_list|(
literal|"Could not find a free port in "
operator|+
name|range
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
throw|throw
name|NetUtils
operator|.
name|wrapException
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a handle to the rpcMetrics (required in tests)    * @return rpc metrics    */
annotation|@
name|VisibleForTesting
DECL|method|getRpcMetrics ()
specifier|public
name|RpcMetrics
name|getRpcMetrics
parameter_list|()
block|{
return|return
name|rpcMetrics
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRpcDetailedMetrics ()
specifier|public
name|RpcDetailedMetrics
name|getRpcDetailedMetrics
parameter_list|()
block|{
return|return
name|rpcDetailedMetrics
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHandlers ()
name|Iterable
argument_list|<
name|?
extends|extends
name|Thread
argument_list|>
name|getHandlers
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|handlers
argument_list|)
return|;
block|}
comment|/**    * Refresh the service authorization ACL for the service handled by this server.    */
DECL|method|refreshServiceAcl (Configuration conf, PolicyProvider provider)
specifier|public
name|void
name|refreshServiceAcl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PolicyProvider
name|provider
parameter_list|)
block|{
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a handle to the serviceAuthorizationManager (required in tests)    * @return instance of ServiceAuthorizationManager for this server    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|method|getServiceAuthorizationManager ()
specifier|public
name|ServiceAuthorizationManager
name|getServiceAuthorizationManager
parameter_list|()
block|{
return|return
name|serviceAuthorizationManager
return|;
block|}
comment|/** A call queued for handling. */
DECL|class|Call
specifier|private
specifier|static
class|class
name|Call
block|{
DECL|field|callId
specifier|private
specifier|final
name|int
name|callId
decl_stmt|;
comment|// the client's call id
DECL|field|rpcRequest
specifier|private
specifier|final
name|Writable
name|rpcRequest
decl_stmt|;
comment|// Serialized Rpc request from client
DECL|field|connection
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
comment|// connection to client
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
comment|// time received when response is null
comment|// time served when response is not null
DECL|field|rpcResponse
specifier|private
name|ByteBuffer
name|rpcResponse
decl_stmt|;
comment|// the response for this call
DECL|field|rpcKind
specifier|private
specifier|final
name|RPC
operator|.
name|RpcKind
name|rpcKind
decl_stmt|;
DECL|method|Call (int id, Writable param, Connection connection)
specifier|public
name|Call
parameter_list|(
name|int
name|id
parameter_list|,
name|Writable
name|param
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|param
argument_list|,
name|connection
argument_list|,
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_BUILTIN
argument_list|)
expr_stmt|;
block|}
DECL|method|Call (int id, Writable param, Connection connection, RPC.RpcKind kind)
specifier|public
name|Call
parameter_list|(
name|int
name|id
parameter_list|,
name|Writable
name|param
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|RPC
operator|.
name|RpcKind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|callId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|rpcRequest
operator|=
name|param
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcResponse
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rpcKind
operator|=
name|kind
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|rpcRequest
operator|.
name|toString
argument_list|()
operator|+
literal|" from "
operator|+
name|connection
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setResponse (ByteBuffer response)
specifier|public
name|void
name|setResponse
parameter_list|(
name|ByteBuffer
name|response
parameter_list|)
block|{
name|this
operator|.
name|rpcResponse
operator|=
name|response
expr_stmt|;
block|}
block|}
comment|/** Listens on the socket. Creates jobs for the handler threads*/
DECL|class|Listener
specifier|private
class|class
name|Listener
extends|extends
name|Thread
block|{
DECL|field|acceptChannel
specifier|private
name|ServerSocketChannel
name|acceptChannel
init|=
literal|null
decl_stmt|;
comment|//the accept channel
DECL|field|selector
specifier|private
name|Selector
name|selector
init|=
literal|null
decl_stmt|;
comment|//the selector that we use for the server
DECL|field|readers
specifier|private
name|Reader
index|[]
name|readers
init|=
literal|null
decl_stmt|;
DECL|field|currentReader
specifier|private
name|int
name|currentReader
init|=
literal|0
decl_stmt|;
DECL|field|address
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
comment|//the address we bind at
DECL|field|rand
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|lastCleanupRunTime
specifier|private
name|long
name|lastCleanupRunTime
init|=
literal|0
decl_stmt|;
comment|//the last time when a cleanup connec-
comment|//-tion (for idle connections) ran
DECL|field|cleanupInterval
specifier|private
name|long
name|cleanupInterval
init|=
literal|10000
decl_stmt|;
comment|//the minimum interval between
comment|//two cleanup runs
DECL|field|backlogLength
specifier|private
name|int
name|backlogLength
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_SERVER_LISTEN_QUEUE_SIZE_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
DECL|method|Listener ()
specifier|public
name|Listener
parameter_list|()
throws|throws
name|IOException
block|{
name|address
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// Create a new server socket and set to non blocking mode
name|acceptChannel
operator|=
name|ServerSocketChannel
operator|.
name|open
argument_list|()
expr_stmt|;
name|acceptChannel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Bind the server socket to the local host and port
name|bind
argument_list|(
name|acceptChannel
operator|.
name|socket
argument_list|()
argument_list|,
name|address
argument_list|,
name|backlogLength
argument_list|,
name|conf
argument_list|,
name|portRangeConfig
argument_list|)
expr_stmt|;
name|port
operator|=
name|acceptChannel
operator|.
name|socket
argument_list|()
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
comment|//Could be an ephemeral port
comment|// create a selector;
name|selector
operator|=
name|Selector
operator|.
name|open
argument_list|()
expr_stmt|;
name|readers
operator|=
operator|new
name|Reader
index|[
name|readThreads
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readThreads
condition|;
name|i
operator|++
control|)
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
literal|"Socket Reader #"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" for port "
operator|+
name|port
argument_list|)
decl_stmt|;
name|readers
index|[
name|i
index|]
operator|=
name|reader
expr_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Register accepts on the server socket with the selector.
name|acceptChannel
operator|.
name|register
argument_list|(
name|selector
argument_list|,
name|SelectionKey
operator|.
name|OP_ACCEPT
argument_list|)
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
literal|"IPC Server listener on "
operator|+
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|Reader
specifier|private
class|class
name|Reader
extends|extends
name|Thread
block|{
DECL|field|adding
specifier|private
specifier|volatile
name|boolean
name|adding
init|=
literal|false
decl_stmt|;
DECL|field|readSelector
specifier|private
specifier|final
name|Selector
name|readSelector
decl_stmt|;
DECL|method|Reader (String name)
name|Reader
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|readSelector
operator|=
name|Selector
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|doRunLoop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|readSelector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing read selector in "
operator|+
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doRunLoop ()
specifier|private
specifier|synchronized
name|void
name|doRunLoop
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|SelectionKey
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|readSelector
operator|.
name|select
argument_list|()
expr_stmt|;
while|while
condition|(
name|adding
condition|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|SelectionKey
argument_list|>
name|iter
init|=
name|readSelector
operator|.
name|selectedKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|key
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|doRead
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|key
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|running
condition|)
block|{
comment|// unexpected -- log it
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" unexpectedly interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in Reader"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**        * This gets reader into the state that waits for the new channel        * to be registered with readSelector. If it was waiting in select()        * the thread will be woken up, otherwise whenever select() is called        * it will return even if there is nothing to read and wait        * in while(adding) for finishAdd call        */
DECL|method|startAdd ()
specifier|public
name|void
name|startAdd
parameter_list|()
block|{
name|adding
operator|=
literal|true
expr_stmt|;
name|readSelector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
DECL|method|registerChannel (SocketChannel channel)
specifier|public
specifier|synchronized
name|SelectionKey
name|registerChannel
parameter_list|(
name|SocketChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|register
argument_list|(
name|readSelector
argument_list|,
name|SelectionKey
operator|.
name|OP_READ
argument_list|)
return|;
block|}
DECL|method|finishAdd ()
specifier|public
specifier|synchronized
name|void
name|finishAdd
parameter_list|()
block|{
name|adding
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
assert|assert
operator|!
name|running
assert|;
name|readSelector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
try|try
block|{
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** cleanup connections from connectionList. Choose a random range      * to scan and also have a limit on the number of the connections      * that will be cleanedup per run. The criteria for cleanup is the time      * for which the connection was idle. If 'force' is true then all       * connections will be looked at for the cleanup.      */
DECL|method|cleanupConnections (boolean force)
specifier|private
name|void
name|cleanupConnections
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
if|if
condition|(
name|force
operator|||
name|numConnections
operator|>
name|thresholdIdleConnections
condition|)
block|{
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
operator|(
name|currentTime
operator|-
name|lastCleanupRunTime
operator|)
operator|<
name|cleanupInterval
condition|)
block|{
return|return;
block|}
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|numConnections
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|force
condition|)
block|{
name|start
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
name|numConnections
expr_stmt|;
name|end
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
name|numConnections
expr_stmt|;
name|int
name|temp
decl_stmt|;
if|if
condition|(
name|end
operator|<
name|start
condition|)
block|{
name|temp
operator|=
name|start
expr_stmt|;
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|temp
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
name|start
decl_stmt|;
name|int
name|numNuked
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<=
name|end
condition|)
block|{
name|Connection
name|c
decl_stmt|;
synchronized|synchronized
init|(
name|connectionList
init|)
block|{
try|try
block|{
name|c
operator|=
name|connectionList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|c
operator|.
name|timedOut
argument_list|(
name|currentTime
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": disconnecting client "
operator|+
name|c
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|closeConnection
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|numNuked
operator|++
expr_stmt|;
name|end
operator|--
expr_stmt|;
name|c
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|numNuked
operator|==
name|maxConnectionsToNuke
condition|)
break|break;
block|}
else|else
name|i
operator|++
expr_stmt|;
block|}
name|lastCleanupRunTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
name|SERVER
operator|.
name|set
argument_list|(
name|Server
operator|.
name|this
argument_list|)
expr_stmt|;
while|while
condition|(
name|running
condition|)
block|{
name|SelectionKey
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getSelector
argument_list|()
operator|.
name|select
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|SelectionKey
argument_list|>
name|iter
init|=
name|getSelector
argument_list|()
operator|.
name|selectedKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|key
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|isAcceptable
argument_list|()
condition|)
name|doAccept
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
name|key
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
comment|// we can run out of memory if we have too many threads
comment|// log the event and sleep for a minute and give
comment|// some thread(s) a chance to finish
name|LOG
operator|.
name|warn
argument_list|(
literal|"Out of Memory in server select"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|closeCurrentConnection
argument_list|(
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cleanupConnections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|closeCurrentConnection
argument_list|(
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|cleanupConnections
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|acceptChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|selector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ }
name|selector
operator|=
literal|null
expr_stmt|;
name|acceptChannel
operator|=
literal|null
expr_stmt|;
comment|// clean up all connections
while|while
condition|(
operator|!
name|connectionList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|closeConnection
argument_list|(
name|connectionList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|closeCurrentConnection (SelectionKey key, Throwable e)
specifier|private
name|void
name|closeCurrentConnection
parameter_list|(
name|SelectionKey
name|key
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|Connection
name|c
init|=
operator|(
name|Connection
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": disconnecting client "
operator|+
name|c
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|closeConnection
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAddress ()
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
operator|(
name|InetSocketAddress
operator|)
name|acceptChannel
operator|.
name|socket
argument_list|()
operator|.
name|getLocalSocketAddress
argument_list|()
return|;
block|}
DECL|method|doAccept (SelectionKey key)
name|void
name|doAccept
parameter_list|(
name|SelectionKey
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|OutOfMemoryError
block|{
name|Connection
name|c
init|=
literal|null
decl_stmt|;
name|ServerSocketChannel
name|server
init|=
operator|(
name|ServerSocketChannel
operator|)
name|key
operator|.
name|channel
argument_list|()
decl_stmt|;
name|SocketChannel
name|channel
decl_stmt|;
while|while
condition|(
operator|(
name|channel
operator|=
name|server
operator|.
name|accept
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|configureBlocking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|channel
operator|.
name|socket
argument_list|()
operator|.
name|setTcpNoDelay
argument_list|(
name|tcpNoDelay
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
name|getReader
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|startAdd
argument_list|()
expr_stmt|;
name|SelectionKey
name|readKey
init|=
name|reader
operator|.
name|registerChannel
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|c
operator|=
operator|new
name|Connection
argument_list|(
name|readKey
argument_list|,
name|channel
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|readKey
operator|.
name|attach
argument_list|(
name|c
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|connectionList
init|)
block|{
name|connectionList
operator|.
name|add
argument_list|(
name|numConnections
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|numConnections
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server connection from "
operator|+
name|c
operator|.
name|toString
argument_list|()
operator|+
literal|"; # active connections: "
operator|+
name|numConnections
operator|+
literal|"; # queued calls: "
operator|+
name|callQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|finishAdd
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doRead (SelectionKey key)
name|void
name|doRead
parameter_list|(
name|SelectionKey
name|key
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Connection
name|c
init|=
operator|(
name|Connection
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|c
operator|.
name|setLastContact
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|count
operator|=
name|c
operator|.
name|readAndProcess
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ieo
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": readAndProcess caught InterruptedException"
argument_list|,
name|ieo
argument_list|)
expr_stmt|;
throw|throw
name|ieo
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": readAndProcess threw exception "
operator|+
name|e
operator|+
literal|" from client "
operator|+
name|c
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|". Count of bytes read: "
operator|+
name|count
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|count
operator|=
operator|-
literal|1
expr_stmt|;
comment|//so that the (count< 0) block is executed
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": disconnecting client "
operator|+
name|c
operator|+
literal|". Number of active connections: "
operator|+
name|numConnections
argument_list|)
expr_stmt|;
name|closeConnection
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|setLastContact
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
if|if
condition|(
name|selector
operator|!=
literal|null
condition|)
block|{
name|selector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|acceptChannel
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|acceptChannel
operator|.
name|socket
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|":Exception in closing listener socket. "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Reader
name|r
range|:
name|readers
control|)
block|{
name|r
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSelector ()
specifier|synchronized
name|Selector
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
comment|// The method that will return the next reader to work with
comment|// Simplistic implementation of round robin for now
DECL|method|getReader ()
name|Reader
name|getReader
parameter_list|()
block|{
name|currentReader
operator|=
operator|(
name|currentReader
operator|+
literal|1
operator|)
operator|%
name|readers
operator|.
name|length
expr_stmt|;
return|return
name|readers
index|[
name|currentReader
index|]
return|;
block|}
block|}
comment|// Sends responses of RPC back to clients.
DECL|class|Responder
specifier|private
class|class
name|Responder
extends|extends
name|Thread
block|{
DECL|field|writeSelector
specifier|private
specifier|final
name|Selector
name|writeSelector
decl_stmt|;
DECL|field|pending
specifier|private
name|int
name|pending
decl_stmt|;
comment|// connections waiting to register
DECL|field|PURGE_INTERVAL
specifier|final
specifier|static
name|int
name|PURGE_INTERVAL
init|=
literal|900000
decl_stmt|;
comment|// 15mins
DECL|method|Responder ()
name|Responder
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|setName
argument_list|(
literal|"IPC Server Responder"
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeSelector
operator|=
name|Selector
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// create a selector
name|pending
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
name|SERVER
operator|.
name|set
argument_list|(
name|Server
operator|.
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doRunLoop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writeSelector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't close write selector in "
operator|+
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doRunLoop ()
specifier|private
name|void
name|doRunLoop
parameter_list|()
block|{
name|long
name|lastPurgeTime
init|=
literal|0
decl_stmt|;
comment|// last check for old calls.
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|waitPending
argument_list|()
expr_stmt|;
comment|// If a channel is being registered, wait.
name|writeSelector
operator|.
name|select
argument_list|(
name|PURGE_INTERVAL
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SelectionKey
argument_list|>
name|iter
init|=
name|writeSelector
operator|.
name|selectedKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SelectionKey
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|.
name|isValid
argument_list|()
operator|&&
name|key
operator|.
name|isWritable
argument_list|()
condition|)
block|{
name|doAsyncWrite
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|": doAsyncWrite threw exception "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|<
name|lastPurgeTime
operator|+
name|PURGE_INTERVAL
condition|)
block|{
continue|continue;
block|}
name|lastPurgeTime
operator|=
name|now
expr_stmt|;
comment|//
comment|// If there were some calls that have not been sent out for a
comment|// long time, discard them.
comment|//
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking for old call responses."
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Call
argument_list|>
name|calls
decl_stmt|;
comment|// get the list of channels from list of keys.
synchronized|synchronized
init|(
name|writeSelector
operator|.
name|keys
argument_list|()
init|)
block|{
name|calls
operator|=
operator|new
name|ArrayList
argument_list|<
name|Call
argument_list|>
argument_list|(
name|writeSelector
operator|.
name|keys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|=
name|writeSelector
operator|.
name|keys
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SelectionKey
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Call
name|call
init|=
operator|(
name|Call
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
operator|&&
name|key
operator|.
name|channel
argument_list|()
operator|==
name|call
operator|.
name|connection
operator|.
name|channel
condition|)
block|{
name|calls
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Call
name|call
range|:
name|calls
control|)
block|{
try|try
block|{
name|doPurge
argument_list|(
name|call
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in purging old calls "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
comment|//
comment|// we can run out of memory if we have too many threads
comment|// log the event and sleep for a minute and give
comment|// some thread(s) a chance to finish
comment|//
name|LOG
operator|.
name|warn
argument_list|(
literal|"Out of Memory in server select"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in Responder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doAsyncWrite (SelectionKey key)
specifier|private
name|void
name|doAsyncWrite
parameter_list|(
name|SelectionKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|Call
name|call
init|=
operator|(
name|Call
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|call
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|key
operator|.
name|channel
argument_list|()
operator|!=
name|call
operator|.
name|connection
operator|.
name|channel
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"doAsyncWrite: bad channel"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
init|)
block|{
if|if
condition|(
name|processResponse
argument_list|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
argument_list|,
literal|false
argument_list|)
condition|)
block|{
try|try
block|{
name|key
operator|.
name|interestOps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancelledKeyException
name|e
parameter_list|)
block|{
comment|/* The Listener/reader might have closed the socket.              * We don't explicitly cancel the key, so not sure if this will              * ever fire.              * This warning could be removed.              */
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while changing ops : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
comment|// Remove calls that have been pending in the responseQueue
comment|// for a long time.
comment|//
DECL|method|doPurge (Call call, long now)
specifier|private
name|void
name|doPurge
parameter_list|(
name|Call
name|call
parameter_list|,
name|long
name|now
parameter_list|)
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|Call
argument_list|>
name|responseQueue
init|=
name|call
operator|.
name|connection
operator|.
name|responseQueue
decl_stmt|;
synchronized|synchronized
init|(
name|responseQueue
init|)
block|{
name|Iterator
argument_list|<
name|Call
argument_list|>
name|iter
init|=
name|responseQueue
operator|.
name|listIterator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|call
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|now
operator|>
name|call
operator|.
name|timestamp
operator|+
name|PURGE_INTERVAL
condition|)
block|{
name|closeConnection
argument_list|(
name|call
operator|.
name|connection
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|// Processes one response. Returns true if there are no more pending
comment|// data for this channel.
comment|//
DECL|method|processResponse (LinkedList<Call> responseQueue, boolean inHandler)
specifier|private
name|boolean
name|processResponse
parameter_list|(
name|LinkedList
argument_list|<
name|Call
argument_list|>
name|responseQueue
parameter_list|,
name|boolean
name|inHandler
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|error
init|=
literal|true
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// there is more data for this channel.
name|int
name|numElements
init|=
literal|0
decl_stmt|;
name|Call
name|call
init|=
literal|null
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|responseQueue
init|)
block|{
comment|//
comment|// If there are no items for this channel, then we are done
comment|//
name|numElements
operator|=
name|responseQueue
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|numElements
operator|==
literal|0
condition|)
block|{
name|error
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
comment|// no more data for this channel.
block|}
comment|//
comment|// Extract the first call
comment|//
name|call
operator|=
name|responseQueue
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|SocketChannel
name|channel
init|=
name|call
operator|.
name|connection
operator|.
name|channel
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": responding to #"
operator|+
name|call
operator|.
name|callId
operator|+
literal|" from "
operator|+
name|call
operator|.
name|connection
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Send as much data as we can in the non-blocking fashion
comment|//
name|int
name|numBytes
init|=
name|channelWrite
argument_list|(
name|channel
argument_list|,
name|call
operator|.
name|rpcResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytes
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|call
operator|.
name|rpcResponse
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
comment|//Clear out the response buffer so it can be collected
name|call
operator|.
name|rpcResponse
operator|=
literal|null
expr_stmt|;
name|call
operator|.
name|connection
operator|.
name|decRpcCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|numElements
operator|==
literal|1
condition|)
block|{
comment|// last call fully processes.
name|done
operator|=
literal|true
expr_stmt|;
comment|// no more data for this channel.
block|}
else|else
block|{
name|done
operator|=
literal|false
expr_stmt|;
comment|// more calls pending to be sent.
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": responding to #"
operator|+
name|call
operator|.
name|callId
operator|+
literal|" from "
operator|+
name|call
operator|.
name|connection
operator|+
literal|" Wrote "
operator|+
name|numBytes
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//
comment|// If we were unable to write the entire response out, then
comment|// insert in Selector queue.
comment|//
name|call
operator|.
name|connection
operator|.
name|responseQueue
operator|.
name|addFirst
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|inHandler
condition|)
block|{
comment|// set the serve time when the response has to be sent later
name|call
operator|.
name|timestamp
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|incPending
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wakeup the thread blocked on select, only then can the call
comment|// to channel.register() complete.
name|writeSelector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|channel
operator|.
name|register
argument_list|(
name|writeSelector
argument_list|,
name|SelectionKey
operator|.
name|OP_WRITE
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|e
parameter_list|)
block|{
comment|//Its ok. channel might be closed else where.
name|done
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|decPending
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": responding to #"
operator|+
name|call
operator|.
name|callId
operator|+
literal|" from "
operator|+
name|call
operator|.
name|connection
operator|+
literal|" Wrote partial "
operator|+
name|numBytes
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
block|}
name|error
operator|=
literal|false
expr_stmt|;
comment|// everything went off well
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|error
operator|&&
name|call
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|", call "
operator|+
name|call
operator|+
literal|": output error"
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
comment|// error. no more data for this channel.
name|closeConnection
argument_list|(
name|call
operator|.
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|done
return|;
block|}
comment|//
comment|// Enqueue a response from the application.
comment|//
DECL|method|doRespond (Call call)
name|void
name|doRespond
parameter_list|(
name|Call
name|call
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
init|)
block|{
name|call
operator|.
name|connection
operator|.
name|responseQueue
operator|.
name|addLast
argument_list|(
name|call
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processResponse
argument_list|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|incPending ()
specifier|private
specifier|synchronized
name|void
name|incPending
parameter_list|()
block|{
comment|// call waiting to be enqueued.
name|pending
operator|++
expr_stmt|;
block|}
DECL|method|decPending ()
specifier|private
specifier|synchronized
name|void
name|decPending
parameter_list|()
block|{
comment|// call done enqueueing.
name|pending
operator|--
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
DECL|method|waitPending ()
specifier|private
specifier|synchronized
name|void
name|waitPending
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|pending
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Reads calls from a connection and queues them for handling. */
DECL|class|Connection
specifier|public
class|class
name|Connection
block|{
DECL|field|connectionHeaderRead
specifier|private
name|boolean
name|connectionHeaderRead
init|=
literal|false
decl_stmt|;
comment|// connection  header is read?
DECL|field|connectionContextRead
specifier|private
name|boolean
name|connectionContextRead
init|=
literal|false
decl_stmt|;
comment|//if connection context that
comment|//follows connection header is read
DECL|field|channel
specifier|private
name|SocketChannel
name|channel
decl_stmt|;
DECL|field|data
specifier|private
name|ByteBuffer
name|data
decl_stmt|;
DECL|field|dataLengthBuffer
specifier|private
name|ByteBuffer
name|dataLengthBuffer
decl_stmt|;
DECL|field|responseQueue
specifier|private
name|LinkedList
argument_list|<
name|Call
argument_list|>
name|responseQueue
decl_stmt|;
DECL|field|rpcCount
specifier|private
specifier|volatile
name|int
name|rpcCount
init|=
literal|0
decl_stmt|;
comment|// number of outstanding rpcs
DECL|field|lastContact
specifier|private
name|long
name|lastContact
decl_stmt|;
DECL|field|dataLength
specifier|private
name|int
name|dataLength
decl_stmt|;
DECL|field|socket
specifier|private
name|Socket
name|socket
decl_stmt|;
comment|// Cache the remote host& port info so that even if the socket is
comment|// disconnected, we can say where it used to connect to.
DECL|field|hostAddress
specifier|private
name|String
name|hostAddress
decl_stmt|;
DECL|field|remotePort
specifier|private
name|int
name|remotePort
decl_stmt|;
DECL|field|addr
specifier|private
name|InetAddress
name|addr
decl_stmt|;
DECL|field|connectionContext
name|IpcConnectionContextProto
name|connectionContext
decl_stmt|;
DECL|field|protocolName
name|String
name|protocolName
decl_stmt|;
DECL|field|saslServer
name|SaslServer
name|saslServer
decl_stmt|;
DECL|field|authMethod
specifier|private
name|AuthMethod
name|authMethod
decl_stmt|;
DECL|field|saslContextEstablished
specifier|private
name|boolean
name|saslContextEstablished
decl_stmt|;
DECL|field|skipInitialSaslHandshake
specifier|private
name|boolean
name|skipInitialSaslHandshake
decl_stmt|;
DECL|field|connectionHeaderBuf
specifier|private
name|ByteBuffer
name|connectionHeaderBuf
init|=
literal|null
decl_stmt|;
DECL|field|unwrappedData
specifier|private
name|ByteBuffer
name|unwrappedData
decl_stmt|;
DECL|field|unwrappedDataLengthBuffer
specifier|private
name|ByteBuffer
name|unwrappedDataLengthBuffer
decl_stmt|;
DECL|field|user
name|UserGroupInformation
name|user
init|=
literal|null
decl_stmt|;
DECL|field|attemptingUser
specifier|public
name|UserGroupInformation
name|attemptingUser
init|=
literal|null
decl_stmt|;
comment|// user name before auth
comment|// Fake 'call' for failed authorization response
DECL|field|AUTHORIZATION_FAILED_CALLID
specifier|private
specifier|static
specifier|final
name|int
name|AUTHORIZATION_FAILED_CALLID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|authFailedCall
specifier|private
specifier|final
name|Call
name|authFailedCall
init|=
operator|new
name|Call
argument_list|(
name|AUTHORIZATION_FAILED_CALLID
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
DECL|field|authFailedResponse
specifier|private
name|ByteArrayOutputStream
name|authFailedResponse
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// Fake 'call' for SASL context setup
DECL|field|SASL_CALLID
specifier|private
specifier|static
specifier|final
name|int
name|SASL_CALLID
init|=
operator|-
literal|33
decl_stmt|;
DECL|field|saslCall
specifier|private
specifier|final
name|Call
name|saslCall
init|=
operator|new
name|Call
argument_list|(
name|SASL_CALLID
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
DECL|field|saslResponse
specifier|private
specifier|final
name|ByteArrayOutputStream
name|saslResponse
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|useWrap
specifier|private
name|boolean
name|useWrap
init|=
literal|false
decl_stmt|;
DECL|method|Connection (SelectionKey key, SocketChannel channel, long lastContact)
specifier|public
name|Connection
parameter_list|(
name|SelectionKey
name|key
parameter_list|,
name|SocketChannel
name|channel
parameter_list|,
name|long
name|lastContact
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|lastContact
operator|=
name|lastContact
expr_stmt|;
name|this
operator|.
name|data
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataLengthBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|unwrappedData
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|unwrappedDataLengthBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|channel
operator|.
name|socket
argument_list|()
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|socket
operator|.
name|getInetAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|hostAddress
operator|=
literal|"*Unknown*"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|hostAddress
operator|=
name|addr
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|remotePort
operator|=
name|socket
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|responseQueue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Call
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketSendBufferSize
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|setSendBufferSize
argument_list|(
name|socketSendBufferSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Connection: unable to set socket send buffer size to "
operator|+
name|socketSendBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|remotePort
return|;
block|}
DECL|method|getHostAddress ()
specifier|public
name|String
name|getHostAddress
parameter_list|()
block|{
return|return
name|hostAddress
return|;
block|}
DECL|method|getHostInetAddress ()
specifier|public
name|InetAddress
name|getHostInetAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
DECL|method|setLastContact (long lastContact)
specifier|public
name|void
name|setLastContact
parameter_list|(
name|long
name|lastContact
parameter_list|)
block|{
name|this
operator|.
name|lastContact
operator|=
name|lastContact
expr_stmt|;
block|}
DECL|method|getLastContact ()
specifier|public
name|long
name|getLastContact
parameter_list|()
block|{
return|return
name|lastContact
return|;
block|}
comment|/* Return true if the connection has no outstanding rpc */
DECL|method|isIdle ()
specifier|private
name|boolean
name|isIdle
parameter_list|()
block|{
return|return
name|rpcCount
operator|==
literal|0
return|;
block|}
comment|/* Decrement the outstanding RPC count */
DECL|method|decRpcCount ()
specifier|private
name|void
name|decRpcCount
parameter_list|()
block|{
name|rpcCount
operator|--
expr_stmt|;
block|}
comment|/* Increment the outstanding RPC count */
DECL|method|incRpcCount ()
specifier|private
name|void
name|incRpcCount
parameter_list|()
block|{
name|rpcCount
operator|++
expr_stmt|;
block|}
DECL|method|timedOut (long currentTime)
specifier|private
name|boolean
name|timedOut
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
if|if
condition|(
name|isIdle
argument_list|()
operator|&&
name|currentTime
operator|-
name|lastContact
operator|>
name|maxIdleTime
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|getAuthorizedUgi (String authorizedId)
specifier|private
name|UserGroupInformation
name|getAuthorizedUgi
parameter_list|(
name|String
name|authorizedId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|authMethod
operator|==
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
name|TokenIdentifier
name|tokenId
init|=
name|SaslRpcServer
operator|.
name|getIdentifier
argument_list|(
name|authorizedId
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|tokenId
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Can't retrieve username from tokenIdentifier."
argument_list|)
throw|;
block|}
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
else|else
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|authorizedId
argument_list|)
return|;
block|}
block|}
DECL|method|saslReadAndProcess (byte[] saslToken)
specifier|private
name|void
name|saslReadAndProcess
parameter_list|(
name|byte
index|[]
name|saslToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|saslContextEstablished
condition|)
block|{
name|byte
index|[]
name|replyToken
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have read input token of size "
operator|+
name|saslToken
operator|.
name|length
operator|+
literal|" for processing by saslServer.evaluateResponse()"
argument_list|)
expr_stmt|;
name|replyToken
operator|=
name|saslServer
operator|.
name|evaluateResponse
argument_list|(
name|saslToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOException
name|sendToClient
init|=
name|e
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|InvalidToken
condition|)
block|{
name|sendToClient
operator|=
operator|(
name|InvalidToken
operator|)
name|cause
expr_stmt|;
break|break;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|doSaslReply
argument_list|(
name|SaslStatus
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|sendToClient
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sendToClient
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rpcMetrics
operator|.
name|incrAuthenticationFailures
argument_list|()
expr_stmt|;
name|String
name|clientIP
init|=
name|this
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// attempting user could be null
name|AUDITLOG
operator|.
name|warn
argument_list|(
name|AUTH_FAILED_FOR
operator|+
name|clientIP
operator|+
literal|":"
operator|+
name|attemptingUser
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|saslServer
operator|.
name|isComplete
argument_list|()
operator|&&
name|replyToken
operator|==
literal|null
condition|)
block|{
comment|// send final response for success
name|replyToken
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|replyToken
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Will send token of size "
operator|+
name|replyToken
operator|.
name|length
operator|+
literal|" from saslServer."
argument_list|)
expr_stmt|;
name|doSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|BytesWritable
argument_list|(
name|replyToken
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|saslServer
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL server context established. Negotiated QoP is "
operator|+
name|saslServer
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslServer
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
name|user
operator|=
name|getAuthorizedUgi
argument_list|(
name|saslServer
operator|.
name|getAuthorizationID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL server successfully authenticated client: "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
name|rpcMetrics
operator|.
name|incrAuthenticationSuccesses
argument_list|()
expr_stmt|;
name|AUDITLOG
operator|.
name|info
argument_list|(
name|AUTH_SUCCESSFUL_FOR
operator|+
name|user
argument_list|)
expr_stmt|;
name|saslContextEstablished
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have read input token of size "
operator|+
name|saslToken
operator|.
name|length
operator|+
literal|" for processing by saslServer.unwrap()"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
name|processOneRpc
argument_list|(
name|saslToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|plaintextData
init|=
name|saslServer
operator|.
name|unwrap
argument_list|(
name|saslToken
argument_list|,
literal|0
argument_list|,
name|saslToken
operator|.
name|length
argument_list|)
decl_stmt|;
name|processUnwrappedData
argument_list|(
name|plaintextData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doSaslReply (SaslStatus status, Writable rv, String errorClass, String error)
specifier|private
name|void
name|doSaslReply
parameter_list|(
name|SaslStatus
name|status
parameter_list|,
name|Writable
name|rv
parameter_list|,
name|String
name|errorClass
parameter_list|,
name|String
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|saslResponse
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|saslResponse
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|status
operator|.
name|state
argument_list|)
expr_stmt|;
comment|// write status
if|if
condition|(
name|status
operator|==
name|SaslStatus
operator|.
name|SUCCESS
condition|)
block|{
name|rv
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|errorClass
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|saslCall
operator|.
name|setResponse
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|saslResponse
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|saslCall
argument_list|)
expr_stmt|;
block|}
DECL|method|disposeSasl ()
specifier|private
name|void
name|disposeSasl
parameter_list|()
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|saslServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|ignored
parameter_list|)
block|{         }
block|}
block|}
DECL|method|readAndProcess ()
specifier|public
name|int
name|readAndProcess
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|/* Read at most one RPC. If the header is not read completely yet          * then iterate until we read first RPC or until there is no data left.          */
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|channelRead
argument_list|(
name|channel
argument_list|,
name|dataLengthBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|0
operator|||
name|dataLengthBuffer
operator|.
name|remaining
operator|(
operator|)
argument_list|>
literal|0
condition|)
return|return
name|count
return|;
block|}
if|if
condition|(
operator|!
name|connectionHeaderRead
condition|)
block|{
comment|//Every connection is expected to send the header.
if|if
condition|(
name|connectionHeaderBuf
operator|==
literal|null
condition|)
block|{
name|connectionHeaderBuf
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|channelRead
argument_list|(
name|channel
argument_list|,
name|connectionHeaderBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
argument_list|<
literal|0
operator|||
name|connectionHeaderBuf
operator|.
name|remaining
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
return|return
name|count
return|;
block|}
name|int
name|version
init|=
name|connectionHeaderBuf
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|method
init|=
operator|new
name|byte
index|[]
block|{
name|connectionHeaderBuf
operator|.
name|get
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
name|authMethod
operator|=
name|AuthMethod
operator|.
name|read
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|method
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Check if it looks like the user is hitting an IPC port
comment|// with an HTTP GET - this is a common error, so we can
comment|// send back a simple string indicating as much.
if|if
condition|(
name|HTTP_GET_BYTES
operator|.
name|equals
argument_list|(
name|dataLengthBuffer
argument_list|)
condition|)
block|{
name|setupHttpRequestOnIpcPortResponse
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|HEADER
operator|.
name|equals
argument_list|(
name|dataLengthBuffer
argument_list|)
operator|||
name|version
operator|!=
name|CURRENT_VERSION
condition|)
block|{
comment|//Warning is ok since this is not supposed to happen.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Incorrect header or version mismatch from "
operator|+
name|hostAddress
operator|+
literal|":"
operator|+
name|remotePort
operator|+
literal|" got version "
operator|+
name|version
operator|+
literal|" expected version "
operator|+
name|CURRENT_VERSION
argument_list|)
expr_stmt|;
name|setupBadVersionResponse
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|IpcSerializationType
name|serializationType
init|=
name|IpcSerializationType
operator|.
name|fromByte
argument_list|(
name|connectionHeaderBuf
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializationType
operator|!=
name|IpcSerializationType
operator|.
name|PROTOBUF
condition|)
block|{
name|respondUnsupportedSerialization
argument_list|(
name|serializationType
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|authMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to read authentication method"
argument_list|)
throw|;
block|}
comment|// this may create a SASL server, or switch us into SIMPLE
name|authMethod
operator|=
name|initializeAuthContext
argument_list|(
name|authMethod
argument_list|)
expr_stmt|;
name|connectionHeaderBuf
operator|=
literal|null
expr_stmt|;
name|connectionHeaderRead
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|dataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|dataLength
operator|=
name|dataLengthBuffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|dataLength
operator|==
name|Client
operator|.
name|PING_CALL_ID
operator|)
operator|&&
operator|(
operator|!
name|useWrap
operator|)
condition|)
block|{
comment|// covers the !useSasl too
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
comment|// ping message
block|}
if|if
condition|(
name|dataLength
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected data length "
operator|+
name|dataLength
operator|+
literal|"!! from "
operator|+
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|dataLength
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|channelRead
argument_list|(
name|channel
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
name|skipInitialSaslHandshake
condition|)
block|{
name|data
operator|=
literal|null
expr_stmt|;
name|skipInitialSaslHandshake
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|boolean
name|isHeaderRead
init|=
name|connectionContextRead
decl_stmt|;
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
name|saslReadAndProcess
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOneRpc
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|isHeaderRead
condition|)
block|{
continue|continue;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
DECL|method|initializeAuthContext (AuthMethod authMethod)
specifier|private
name|AuthMethod
name|initializeAuthContext
parameter_list|(
name|AuthMethod
name|authMethod
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
if|if
condition|(
name|enabledAuthMethods
operator|.
name|contains
argument_list|(
name|authMethod
argument_list|)
condition|)
block|{
name|saslServer
operator|=
name|createSaslServer
argument_list|(
name|authMethod
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|enabledAuthMethods
operator|.
name|contains
argument_list|(
name|AuthMethod
operator|.
name|SIMPLE
argument_list|)
condition|)
block|{
name|doSaslReply
argument_list|(
name|SaslStatus
operator|.
name|SUCCESS
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|SaslRpcServer
operator|.
name|SWITCH_TO_SIMPLE_AUTH
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
comment|// client has already sent the initial Sasl message and we
comment|// should ignore it. Both client and server should fall back
comment|// to simple auth from now on.
name|skipInitialSaslHandshake
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|authMethod
operator|+
literal|" authentication is not enabled."
operator|+
literal|"  Available:"
operator|+
name|enabledAuthMethods
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
specifier|final
name|String
name|ioeClass
init|=
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ioeMessage
init|=
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|setupResponse
argument_list|(
name|authFailedResponse
argument_list|,
name|authFailedCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|ioeClass
argument_list|,
name|ioeMessage
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|authFailedCall
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSaslReply
argument_list|(
name|SaslStatus
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|ioeClass
argument_list|,
name|ioeMessage
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ioe
throw|;
block|}
return|return
name|authMethod
return|;
block|}
DECL|method|createSaslServer (AuthMethod authMethod)
specifier|private
name|SaslServer
name|createSaslServer
parameter_list|(
name|AuthMethod
name|authMethod
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|hostname
init|=
literal|null
decl_stmt|;
name|String
name|saslProtocol
init|=
literal|null
decl_stmt|;
name|CallbackHandler
name|saslCallback
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|authMethod
condition|)
block|{
case|case
name|SIMPLE
case|:
block|{
return|return
literal|null
return|;
comment|// no sasl for simple
block|}
case|case
name|DIGEST
case|:
block|{
name|secretManager
operator|.
name|checkAvailableForRead
argument_list|()
expr_stmt|;
name|hostname
operator|=
name|SaslRpcServer
operator|.
name|SASL_DEFAULT_REALM
expr_stmt|;
name|saslCallback
operator|=
operator|new
name|SaslDigestCallbackHandler
argument_list|(
name|secretManager
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|KERBEROS
case|:
block|{
name|String
name|fullName
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Kerberos principal name is "
operator|+
name|fullName
argument_list|)
expr_stmt|;
name|KerberosName
name|krbName
init|=
operator|new
name|KerberosName
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
name|hostname
operator|=
name|krbName
operator|.
name|getHostName
argument_list|()
expr_stmt|;
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Kerberos principal name does NOT have the expected "
operator|+
literal|"hostname part: "
operator|+
name|fullName
argument_list|)
throw|;
block|}
name|saslProtocol
operator|=
name|krbName
operator|.
name|getServiceName
argument_list|()
expr_stmt|;
name|saslCallback
operator|=
operator|new
name|SaslGssCallbackHandler
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
comment|// we should never be able to get here
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Server does not support SASL "
operator|+
name|authMethod
argument_list|)
throw|;
block|}
return|return
name|createSaslServer
argument_list|(
name|authMethod
operator|.
name|getMechanismName
argument_list|()
argument_list|,
name|saslProtocol
argument_list|,
name|hostname
argument_list|,
name|saslCallback
argument_list|)
return|;
block|}
DECL|method|createSaslServer (final String mechanism, final String protocol, final String hostname, final CallbackHandler callback )
specifier|private
name|SaslServer
name|createSaslServer
parameter_list|(
specifier|final
name|String
name|mechanism
parameter_list|,
specifier|final
name|String
name|protocol
parameter_list|,
specifier|final
name|String
name|hostname
parameter_list|,
specifier|final
name|CallbackHandler
name|callback
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SaslServer
name|saslServer
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|SaslServer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SaslServer
name|run
parameter_list|()
throws|throws
name|SaslException
block|{
return|return
name|Sasl
operator|.
name|createSaslServer
argument_list|(
name|mechanism
argument_list|,
name|protocol
argument_list|,
name|hostname
argument_list|,
name|SaslRpcServer
operator|.
name|SASL_PROPS
argument_list|,
name|callback
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|saslServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unable to find SASL server implementation for "
operator|+
name|mechanism
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created SASL server with mechanism = "
operator|+
name|mechanism
argument_list|)
expr_stmt|;
block|}
return|return
name|saslServer
return|;
block|}
comment|/**      * Try to set up the response to indicate that the client version      * is incompatible with the server. This can contain special-case      * code to speak enough of past IPC protocols to pass back      * an exception to the caller.      * @param clientVersion the version the caller is using       * @throws IOException      */
DECL|method|setupBadVersionResponse (int clientVersion)
specifier|private
name|void
name|setupBadVersionResponse
parameter_list|(
name|int
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|errMsg
init|=
literal|"Server IPC version "
operator|+
name|CURRENT_VERSION
operator|+
literal|" cannot communicate with client version "
operator|+
name|clientVersion
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientVersion
operator|>=
literal|9
condition|)
block|{
comment|// Versions>>9  understand the normal response
name|Call
name|fakeCall
init|=
operator|new
name|Call
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|setupResponse
argument_list|(
name|buffer
argument_list|,
name|fakeCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|VersionMismatch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clientVersion
operator|>=
literal|3
condition|)
block|{
name|Call
name|fakeCall
init|=
operator|new
name|Call
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// Versions 3 to 8 use older response
name|setupResponseOldVersionFatal
argument_list|(
name|buffer
argument_list|,
name|fakeCall
argument_list|,
literal|null
argument_list|,
name|VersionMismatch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clientVersion
operator|==
literal|2
condition|)
block|{
comment|// Hadoop 0.18.3
name|Call
name|fakeCall
init|=
operator|new
name|Call
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// call ID
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// error
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|VersionMismatch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|fakeCall
operator|.
name|setResponse
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|respondUnsupportedSerialization (IpcSerializationType st)
specifier|private
name|void
name|respondUnsupportedSerialization
parameter_list|(
name|IpcSerializationType
name|st
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|errMsg
init|=
literal|"Server IPC version "
operator|+
name|CURRENT_VERSION
operator|+
literal|" do not support serilization "
operator|+
name|st
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Call
name|fakeCall
init|=
operator|new
name|Call
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|setupResponse
argument_list|(
name|buffer
argument_list|,
name|fakeCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|IpcException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
block|}
DECL|method|setupHttpRequestOnIpcPortResponse ()
specifier|private
name|void
name|setupHttpRequestOnIpcPortResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|Call
name|fakeCall
init|=
operator|new
name|Call
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|fakeCall
operator|.
name|setResponse
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|RECEIVED_HTTP_REQ_RESPONSE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|fakeCall
argument_list|)
expr_stmt|;
block|}
comment|/** Reads the connection context following the connection header */
DECL|method|processConnectionContext (byte[] buf)
specifier|private
name|void
name|processConnectionContext
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|connectionContext
operator|=
name|IpcConnectionContextProto
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|protocolName
operator|=
name|connectionContext
operator|.
name|hasProtocol
argument_list|()
condition|?
name|connectionContext
operator|.
name|getProtocol
argument_list|()
else|:
literal|null
expr_stmt|;
name|UserGroupInformation
name|protocolUser
init|=
name|ProtoUtil
operator|.
name|getUgi
argument_list|(
name|connectionContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|saslServer
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|protocolUser
expr_stmt|;
block|}
else|else
block|{
comment|// user is authenticated
name|user
operator|.
name|setAuthenticationMethod
argument_list|(
name|authMethod
argument_list|)
expr_stmt|;
comment|//Now we check if this is a proxy user case. If the protocol user is
comment|//different from the 'user', it is a proxy user scenario. However,
comment|//this is not allowed if user authenticated with DIGEST.
if|if
condition|(
operator|(
name|protocolUser
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|protocolUser
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|DIGEST
condition|)
block|{
comment|// Not allowed to doAs if token authentication is used
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Authenticated user ("
operator|+
name|user
operator|+
literal|") doesn't match what the client claims to be ("
operator|+
name|protocolUser
operator|+
literal|")"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Effective user can be different from authenticated user
comment|// for simple auth or kerberos auth
comment|// The user is the real user. Now we create a proxy user
name|UserGroupInformation
name|realUser
init|=
name|user
decl_stmt|;
name|user
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|protocolUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|realUser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|processUnwrappedData (byte[] inBuf)
specifier|private
name|void
name|processUnwrappedData
parameter_list|(
name|byte
index|[]
name|inBuf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ReadableByteChannel
name|ch
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|inBuf
argument_list|)
argument_list|)
decl_stmt|;
comment|// Read all RPCs contained in the inBuf, even partial ones
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|unwrappedDataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|channelRead
argument_list|(
name|ch
argument_list|,
name|unwrappedDataLengthBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
operator|||
name|unwrappedDataLengthBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
return|return;
block|}
if|if
condition|(
name|unwrappedData
operator|==
literal|null
condition|)
block|{
name|unwrappedDataLengthBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|unwrappedDataLength
init|=
name|unwrappedDataLengthBuffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrappedDataLength
operator|==
name|Client
operator|.
name|PING_CALL_ID
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received ping message"
argument_list|)
expr_stmt|;
name|unwrappedDataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
comment|// ping message
block|}
name|unwrappedData
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|unwrappedDataLength
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|channelRead
argument_list|(
name|ch
argument_list|,
name|unwrappedData
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
operator|||
name|unwrappedData
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|unwrappedData
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|unwrappedDataLengthBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|unwrappedData
operator|.
name|flip
argument_list|()
expr_stmt|;
name|processOneRpc
argument_list|(
name|unwrappedData
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|unwrappedData
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|processOneRpc (byte[] buf)
specifier|private
name|void
name|processOneRpc
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|connectionContextRead
condition|)
block|{
name|processData
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processConnectionContext
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|connectionContextRead
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|authorizeConnection
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Connection from "
operator|+
name|this
operator|+
literal|" for protocol "
operator|+
name|connectionContext
operator|.
name|getProtocol
argument_list|()
operator|+
literal|" is unauthorized for user "
operator|+
name|user
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|processData (byte[] buf)
specifier|private
name|void
name|processData
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|RpcRequestHeaderProto
name|header
init|=
name|RpcRequestHeaderProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|dis
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|" got #"
operator|+
name|header
operator|.
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|hasRpcOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|" IPC Server: No rpc op in rpcRequestHeader"
argument_list|)
throw|;
block|}
if|if
condition|(
name|header
operator|.
name|getRpcOp
argument_list|()
operator|!=
name|RpcRequestHeaderProto
operator|.
name|OperationProto
operator|.
name|RPC_FINAL_PACKET
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IPC Server does not implement operation"
operator|+
name|header
operator|.
name|getRpcOp
argument_list|()
argument_list|)
throw|;
block|}
comment|// If we know the rpc kind, get its class so that we can deserialize
comment|// (Note it would make more sense to have the handler deserialize but
comment|// we continue with this original design.
if|if
condition|(
operator|!
name|header
operator|.
name|hasRpcKind
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|" IPC Server: No rpc kind in rpcRequestHeader"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestClass
init|=
name|getRpcRequestWrapper
argument_list|(
name|header
operator|.
name|getRpcKind
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcRequestClass
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown rpc kind "
operator|+
name|header
operator|.
name|getRpcKind
argument_list|()
operator|+
literal|" from client "
operator|+
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Call
name|readParamsFailedCall
init|=
operator|new
name|Call
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|responseBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|setupResponse
argument_list|(
name|responseBuffer
argument_list|,
name|readParamsFailedCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|IOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Unknown rpc kind "
operator|+
name|header
operator|.
name|getRpcKind
argument_list|()
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|readParamsFailedCall
argument_list|)
expr_stmt|;
return|return;
block|}
name|Writable
name|rpcRequest
decl_stmt|;
try|try
block|{
comment|//Read the rpc request
name|rpcRequest
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|rpcRequestClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rpcRequest
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read call parameters for client "
operator|+
name|getHostAddress
argument_list|()
operator|+
literal|"on connection protocol "
operator|+
name|this
operator|.
name|protocolName
operator|+
literal|" for rpcKind "
operator|+
name|header
operator|.
name|getRpcKind
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
specifier|final
name|Call
name|readParamsFailedCall
init|=
operator|new
name|Call
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|responseBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|setupResponse
argument_list|(
name|responseBuffer
argument_list|,
name|readParamsFailedCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"IPC server unable to read call parameters: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|readParamsFailedCall
argument_list|)
expr_stmt|;
return|return;
block|}
name|Call
name|call
init|=
operator|new
name|Call
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|,
name|rpcRequest
argument_list|,
name|this
argument_list|,
name|ProtoUtil
operator|.
name|convert
argument_list|(
name|header
operator|.
name|getRpcKind
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|callQueue
operator|.
name|put
argument_list|(
name|call
argument_list|)
expr_stmt|;
comment|// queue the call; maybe blocked here
name|incRpcCount
argument_list|()
expr_stmt|;
comment|// Increment the rpc count
block|}
DECL|method|authorizeConnection ()
specifier|private
name|boolean
name|authorizeConnection
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|// If auth method is DIGEST, the token was obtained by the
comment|// real user for the effective user, therefore not required to
comment|// authorize real user. doAs is allowed only for simple or kerberos
comment|// authentication
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthMethod
operator|.
name|DIGEST
operator|)
condition|)
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|this
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|authorize
argument_list|(
name|user
argument_list|,
name|protocolName
argument_list|,
name|getHostInetAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully authorized "
operator|+
name|connectionContext
argument_list|)
expr_stmt|;
block|}
name|rpcMetrics
operator|.
name|incrAuthorizationSuccesses
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|ae
parameter_list|)
block|{
name|rpcMetrics
operator|.
name|incrAuthorizationFailures
argument_list|()
expr_stmt|;
name|setupResponse
argument_list|(
name|authFailedResponse
argument_list|,
name|authFailedCall
argument_list|,
name|RpcStatusProto
operator|.
name|FATAL
argument_list|,
literal|null
argument_list|,
name|ae
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|ae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|responder
operator|.
name|doRespond
argument_list|(
name|authFailedCall
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|close ()
specifier|private
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|data
operator|=
literal|null
expr_stmt|;
name|dataLengthBuffer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
return|return;
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring socket shutdown exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
try|try
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
comment|/** Handles queued calls . */
DECL|class|Handler
specifier|private
class|class
name|Handler
extends|extends
name|Thread
block|{
DECL|method|Handler (int instanceNumber)
specifier|public
name|Handler
parameter_list|(
name|int
name|instanceNumber
parameter_list|)
block|{
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
literal|"IPC Server handler "
operator|+
name|instanceNumber
operator|+
literal|" on "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": starting"
argument_list|)
expr_stmt|;
name|SERVER
operator|.
name|set
argument_list|(
name|Server
operator|.
name|this
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|INITIAL_RESP_BUF_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
specifier|final
name|Call
name|call
init|=
name|callQueue
operator|.
name|take
argument_list|()
decl_stmt|;
comment|// pop the queue; maybe blocked here
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": has Call#"
operator|+
name|call
operator|.
name|callId
operator|+
literal|"for RpcKind "
operator|+
name|call
operator|.
name|rpcKind
operator|+
literal|" from "
operator|+
name|call
operator|.
name|connection
argument_list|)
expr_stmt|;
block|}
name|String
name|errorClass
init|=
literal|null
decl_stmt|;
name|String
name|error
init|=
literal|null
decl_stmt|;
name|Writable
name|value
init|=
literal|null
decl_stmt|;
name|CurCall
operator|.
name|set
argument_list|(
name|call
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Make the call as the user via Subject.doAs, thus associating
comment|// the call with the Subject
if|if
condition|(
name|call
operator|.
name|connection
operator|.
name|user
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|call
argument_list|(
name|call
operator|.
name|rpcKind
argument_list|,
name|call
operator|.
name|connection
operator|.
name|protocolName
argument_list|,
name|call
operator|.
name|rpcRequest
argument_list|,
name|call
operator|.
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|call
operator|.
name|connection
operator|.
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Writable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Writable
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make the call
return|return
name|call
argument_list|(
name|call
operator|.
name|rpcKind
argument_list|,
name|call
operator|.
name|connection
operator|.
name|protocolName
argument_list|,
name|call
operator|.
name|rpcRequest
argument_list|,
name|call
operator|.
name|timestamp
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|String
name|logMsg
init|=
name|getName
argument_list|()
operator|+
literal|", call "
operator|+
name|call
operator|+
literal|": error: "
operator|+
name|e
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
operator|||
name|e
operator|instanceof
name|Error
condition|)
block|{
comment|// These exception types indicate something is probably wrong
comment|// on the server side, as opposed to just a normal exceptional
comment|// result.
name|LOG
operator|.
name|warn
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exceptionsHandler
operator|.
name|isTerse
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// Don't log the whole stack trace of these exceptions.
comment|// Way too noisy!
name|LOG
operator|.
name|info
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|logMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|errorClass
operator|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|error
operator|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Remove redundant error class name from the beginning of the stack trace
name|String
name|exceptionHdr
init|=
name|errorClass
operator|+
literal|": "
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|startsWith
argument_list|(
name|exceptionHdr
argument_list|)
condition|)
block|{
name|error
operator|=
name|error
operator|.
name|substring
argument_list|(
name|exceptionHdr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|CurCall
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|call
operator|.
name|connection
operator|.
name|responseQueue
init|)
block|{
comment|// setupResponse() needs to be sync'ed together with
comment|// responder.doResponse() since setupResponse may use
comment|// SASL to encrypt response data and SASL enforces
comment|// its own message ordering.
name|setupResponse
argument_list|(
name|buf
argument_list|,
name|call
argument_list|,
operator|(
name|error
operator|==
literal|null
operator|)
condition|?
name|RpcStatusProto
operator|.
name|SUCCESS
else|:
name|RpcStatusProto
operator|.
name|ERROR
argument_list|,
name|value
argument_list|,
name|errorClass
argument_list|,
name|error
argument_list|)
expr_stmt|;
comment|// Discard the large buf and reset it back to smaller size
comment|// to free up heap
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|>
name|maxRespSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Large response size "
operator|+
name|buf
operator|.
name|size
argument_list|()
operator|+
literal|" for call "
operator|+
name|call
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|INITIAL_RESP_BUF_SIZE
argument_list|)
expr_stmt|;
block|}
name|responder
operator|.
name|doRespond
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|running
condition|)
block|{
comment|// unexpected -- log it
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" unexpectedly interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" caught an exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": exiting"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|Server (String bindAddress, int port, Class<? extends Writable> paramClass, int handlerCount, Configuration conf)
specifier|protected
name|Server
parameter_list|(
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|paramClass
parameter_list|,
name|int
name|handlerCount
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|,
name|paramClass
argument_list|,
name|handlerCount
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|conf
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Server (String bindAddress, int port, Class<? extends Writable> rpcRequestClass, int handlerCount, int numReaders, int queueSizePerHandler, Configuration conf, String serverName, SecretManager<? extends TokenIdentifier> secretManager)
specifier|protected
name|Server
parameter_list|(
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestClass
parameter_list|,
name|int
name|handlerCount
parameter_list|,
name|int
name|numReaders
parameter_list|,
name|int
name|queueSizePerHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|serverName
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|bindAddress
argument_list|,
name|port
argument_list|,
name|rpcRequestClass
argument_list|,
name|handlerCount
argument_list|,
name|numReaders
argument_list|,
name|queueSizePerHandler
argument_list|,
name|conf
argument_list|,
name|serverName
argument_list|,
name|secretManager
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Constructs a server listening on the named port and address.  Parameters passed must    * be of the named class.  The<code>handlerCount</handlerCount> determines    * the number of handler threads that will be used to process calls.    * If queueSizePerHandler or numReaders are not -1 they will be used instead of parameters    * from configuration. Otherwise the configuration will be picked up.    *     * If rpcRequestClass is null then the rpcRequestClass must have been     * registered via {@link #registerProtocolEngine(RPC.RpcKind,    *  Class, RPC.RpcInvoker)}    * This parameter has been retained for compatibility with existing tests    * and usage.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|Server (String bindAddress, int port, Class<? extends Writable> rpcRequestClass, int handlerCount, int numReaders, int queueSizePerHandler, Configuration conf, String serverName, SecretManager<? extends TokenIdentifier> secretManager, String portRangeConfig)
specifier|protected
name|Server
parameter_list|(
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|rpcRequestClass
parameter_list|,
name|int
name|handlerCount
parameter_list|,
name|int
name|numReaders
parameter_list|,
name|int
name|queueSizePerHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|serverName
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|String
name|portRangeConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bindAddress
operator|=
name|bindAddress
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|portRangeConfig
operator|=
name|portRangeConfig
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|rpcRequestClass
operator|=
name|rpcRequestClass
expr_stmt|;
name|this
operator|.
name|handlerCount
operator|=
name|handlerCount
expr_stmt|;
name|this
operator|.
name|socketSendBufferSize
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|queueSizePerHandler
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|queueSizePerHandler
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|handlerCount
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_HANDLER_QUEUE_SIZE_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_HANDLER_QUEUE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxRespSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_MAX_RESPONSE_SIZE_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_MAX_RESPONSE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|numReaders
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|readThreads
operator|=
name|numReaders
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|readThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_READ_THREADS_DEFAULT
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|callQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Call
argument_list|>
argument_list|(
name|maxQueueSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxIdleTime
operator|=
literal|2
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConnectionsToNuke
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_KILL_MAX_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_KILL_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|thresholdIdleConnections
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_IDLETHRESHOLD_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_IDLETHRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|secretManager
operator|=
operator|(
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
operator|)
name|secretManager
expr_stmt|;
name|this
operator|.
name|authorize
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// configure supported authentications
name|this
operator|.
name|enabledAuthMethods
operator|=
name|getAuthMethods
argument_list|(
name|secretManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Start the listener here and let it bind to the port
name|listener
operator|=
operator|new
name|Listener
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|listener
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcMetrics
operator|=
name|RpcMetrics
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcDetailedMetrics
operator|=
name|RpcDetailedMetrics
operator|.
name|create
argument_list|(
name|this
operator|.
name|port
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelay
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_SERVER_TCPNODELAY_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IPC_SERVER_TCPNODELAY_DEFAULT
argument_list|)
expr_stmt|;
comment|// Create the responder here
name|responder
operator|=
operator|new
name|Responder
argument_list|()
expr_stmt|;
if|if
condition|(
name|secretManager
operator|!=
literal|null
condition|)
block|{
name|SaslRpcServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|exceptionsHandler
operator|.
name|addTerseExceptions
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// get the security type from the conf. implicitly include token support
comment|// if a secret manager is provided, or fail if token is the conf value but
comment|// there is no secret manager
DECL|method|getAuthMethods (SecretManager<?> secretManager, Configuration conf)
specifier|private
name|EnumSet
argument_list|<
name|AuthMethod
argument_list|>
name|getAuthMethods
parameter_list|(
name|SecretManager
argument_list|<
name|?
argument_list|>
name|secretManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|AuthenticationMethod
name|confAuthenticationMethod
init|=
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|AuthMethod
argument_list|>
name|authMethods
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|confAuthenticationMethod
operator|.
name|getAuthMethod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|confAuthenticationMethod
operator|==
name|AuthenticationMethod
operator|.
name|TOKEN
condition|)
block|{
if|if
condition|(
name|secretManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
operator|+
literal|" authentication requires a secret manager"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|secretManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
operator|+
literal|" authentication enabled for secret manager"
argument_list|)
expr_stmt|;
name|authMethods
operator|.
name|add
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
operator|.
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server accepts auth methods:"
operator|+
name|authMethods
argument_list|)
expr_stmt|;
return|return
name|authMethods
return|;
block|}
DECL|method|closeConnection (Connection connection)
specifier|private
name|void
name|closeConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
synchronized|synchronized
init|(
name|connectionList
init|)
block|{
if|if
condition|(
name|connectionList
operator|.
name|remove
argument_list|(
name|connection
argument_list|)
condition|)
name|numConnections
operator|--
expr_stmt|;
block|}
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Setup response for the IPC Call.    *     * @param responseBuf buffer to serialize the response into    * @param call {@link Call} to which we are setting up the response    * @param status of the IPC call    * @param rv return value for the IPC Call, if the call was successful    * @param errorClass error class, if the the call failed    * @param error error message, if the call failed    * @throws IOException    */
DECL|method|setupResponse (ByteArrayOutputStream responseBuf, Call call, RpcStatusProto status, Writable rv, String errorClass, String error)
specifier|private
name|void
name|setupResponse
parameter_list|(
name|ByteArrayOutputStream
name|responseBuf
parameter_list|,
name|Call
name|call
parameter_list|,
name|RpcStatusProto
name|status
parameter_list|,
name|Writable
name|rv
parameter_list|,
name|String
name|errorClass
parameter_list|,
name|String
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|responseBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|responseBuf
argument_list|)
decl_stmt|;
name|RpcResponseHeaderProto
operator|.
name|Builder
name|headerBuilder
init|=
name|RpcResponseHeaderProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|headerBuilder
operator|.
name|setCallId
argument_list|(
name|call
operator|.
name|callId
argument_list|)
expr_stmt|;
name|headerBuilder
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|headerBuilder
operator|.
name|setServerIpcVersionNum
argument_list|(
name|Server
operator|.
name|CURRENT_VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|RpcStatusProto
operator|.
name|SUCCESS
condition|)
block|{
name|RpcResponseHeaderProto
name|header
init|=
name|headerBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|int
name|headerLen
init|=
name|header
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
name|int
name|fullLength
init|=
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|headerLen
argument_list|)
operator|+
name|headerLen
decl_stmt|;
try|try
block|{
if|if
condition|(
name|rv
operator|instanceof
name|ProtobufRpcEngine
operator|.
name|RpcWrapper
condition|)
block|{
name|ProtobufRpcEngine
operator|.
name|RpcWrapper
name|resWrapper
init|=
operator|(
name|ProtobufRpcEngine
operator|.
name|RpcWrapper
operator|)
name|rv
decl_stmt|;
name|fullLength
operator|+=
name|resWrapper
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fullLength
argument_list|)
expr_stmt|;
name|header
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|rv
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Have to serialize to buffer to get len
specifier|final
name|DataOutputBuffer
name|buf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|rv
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|buf
operator|.
name|getData
argument_list|()
decl_stmt|;
name|fullLength
operator|+=
name|buf
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fullLength
argument_list|)
expr_stmt|;
name|header
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error serializing call response for call "
operator|+
name|call
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Call back to same function - this is OK since the
comment|// buffer is reset at the top, and since status is changed
comment|// to ERROR it won't infinite loop.
name|setupResponse
argument_list|(
name|responseBuf
argument_list|,
name|call
argument_list|,
name|RpcStatusProto
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Rpc Failure
name|headerBuilder
operator|.
name|setExceptionClassName
argument_list|(
name|errorClass
argument_list|)
expr_stmt|;
name|headerBuilder
operator|.
name|setErrorMsg
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|RpcResponseHeaderProto
name|header
init|=
name|headerBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|headerLen
init|=
name|header
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
specifier|final
name|int
name|fullLength
init|=
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|headerLen
argument_list|)
operator|+
name|headerLen
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fullLength
argument_list|)
expr_stmt|;
name|header
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|call
operator|.
name|connection
operator|.
name|useWrap
condition|)
block|{
name|wrapWithSasl
argument_list|(
name|responseBuf
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|setResponse
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|responseBuf
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup response for the IPC Call on Fatal Error from a     * client that is using old version of Hadoop.    * The response is serialized using the previous protocol's response    * layout.    *     * @param response buffer to serialize the response into    * @param call {@link Call} to which we are setting up the response    * @param rv return value for the IPC Call, if the call was successful    * @param errorClass error class, if the the call failed    * @param error error message, if the call failed    * @throws IOException    */
DECL|method|setupResponseOldVersionFatal (ByteArrayOutputStream response, Call call, Writable rv, String errorClass, String error)
specifier|private
name|void
name|setupResponseOldVersionFatal
parameter_list|(
name|ByteArrayOutputStream
name|response
parameter_list|,
name|Call
name|call
parameter_list|,
name|Writable
name|rv
parameter_list|,
name|String
name|errorClass
parameter_list|,
name|String
name|error
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|OLD_VERSION_FATAL_STATUS
init|=
operator|-
literal|1
decl_stmt|;
name|response
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|call
operator|.
name|callId
argument_list|)
expr_stmt|;
comment|// write call id
name|out
operator|.
name|writeInt
argument_list|(
name|OLD_VERSION_FATAL_STATUS
argument_list|)
expr_stmt|;
comment|// write FATAL_STATUS
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|errorClass
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|call
operator|.
name|connection
operator|.
name|useWrap
condition|)
block|{
name|wrapWithSasl
argument_list|(
name|response
argument_list|,
name|call
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|setResponse
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|response
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|wrapWithSasl (ByteArrayOutputStream response, Call call)
specifier|private
name|void
name|wrapWithSasl
parameter_list|(
name|ByteArrayOutputStream
name|response
parameter_list|,
name|Call
name|call
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|call
operator|.
name|connection
operator|.
name|saslServer
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|token
init|=
name|response
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// synchronization may be needed since there can be multiple Handler
comment|// threads using saslServer to wrap responses.
synchronized|synchronized
init|(
name|call
operator|.
name|connection
operator|.
name|saslServer
init|)
block|{
name|token
operator|=
name|call
operator|.
name|connection
operator|.
name|saslServer
operator|.
name|wrap
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding saslServer wrapped token of size "
operator|+
name|token
operator|.
name|length
operator|+
literal|" as call response."
argument_list|)
expr_stmt|;
name|response
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataOutputStream
name|saslOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|saslOut
operator|.
name|writeInt
argument_list|(
name|token
operator|.
name|length
argument_list|)
expr_stmt|;
name|saslOut
operator|.
name|write
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConf ()
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/** Sets the socket buffer size used for responding to RPCs */
DECL|method|setSocketSendBufSize (int size)
specifier|public
name|void
name|setSocketSendBufSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|socketSendBufferSize
operator|=
name|size
expr_stmt|;
block|}
comment|/** Starts the service.  Must be called before any calls will be handled. */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|responder
operator|.
name|start
argument_list|()
expr_stmt|;
name|listener
operator|.
name|start
argument_list|()
expr_stmt|;
name|handlers
operator|=
operator|new
name|Handler
index|[
name|handlerCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handlerCount
condition|;
name|i
operator|++
control|)
block|{
name|handlers
index|[
name|i
index|]
operator|=
operator|new
name|Handler
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|handlers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Stops the service.  No new calls will be handled after this is called. */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping server on "
operator|+
name|port
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|handlers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handlerCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|handlers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|handlers
index|[
name|i
index|]
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|listener
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|listener
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|responder
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rpcMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcMetrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rpcDetailedMetrics
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcDetailedMetrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Wait for the server to be stopped.    * Does not wait for all subthreads to finish.    *  See {@link #stop()}.    */
DECL|method|join ()
specifier|public
specifier|synchronized
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|running
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the socket (ip+port) on which the RPC server is listening to.    * @return the socket (ip+port) on which the RPC server is listening to.    */
DECL|method|getListenerAddress ()
specifier|public
specifier|synchronized
name|InetSocketAddress
name|getListenerAddress
parameter_list|()
block|{
return|return
name|listener
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|/**     * Called for each call.     * @deprecated Use  {@link #call(RPC.RpcKind, String,    *  Writable, long)} instead    */
annotation|@
name|Deprecated
DECL|method|call (Writable param, long receiveTime)
specifier|public
name|Writable
name|call
parameter_list|(
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|call
argument_list|(
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_BUILTIN
argument_list|,
literal|null
argument_list|,
name|param
argument_list|,
name|receiveTime
argument_list|)
return|;
block|}
comment|/** Called for each call. */
DECL|method|call (RPC.RpcKind rpcKind, String protocol, Writable param, long receiveTime)
specifier|public
specifier|abstract
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Authorize the incoming client connection.    *     * @param user client user    * @param protocolName - the protocol    * @param addr InetAddress of incoming connection    * @throws AuthorizationException when the client isn't authorized to talk the protocol    */
DECL|method|authorize (UserGroupInformation user, String protocolName, InetAddress addr)
specifier|private
name|void
name|authorize
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|String
name|protocolName
parameter_list|,
name|InetAddress
name|addr
parameter_list|)
throws|throws
name|AuthorizationException
block|{
if|if
condition|(
name|authorize
condition|)
block|{
if|if
condition|(
name|protocolName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Null protocol not authorized"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
init|=
literal|null
decl_stmt|;
try|try
block|{
name|protocol
operator|=
name|getProtocolClass
argument_list|(
name|protocolName
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cfne
parameter_list|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Unknown protocol: "
operator|+
name|protocolName
argument_list|)
throw|;
block|}
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|user
argument_list|,
name|protocol
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the port on which the IPC Server is listening for incoming connections.    * This could be an ephemeral port too, in which case we return the real    * port on which the Server has bound.    * @return port on which IPC Server is listening    */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**    * The number of open RPC conections    * @return the number of open rpc connections    */
DECL|method|getNumOpenConnections ()
specifier|public
name|int
name|getNumOpenConnections
parameter_list|()
block|{
return|return
name|numConnections
return|;
block|}
comment|/**    * The number of rpc calls in the queue.    * @return The number of rpc calls in the queue.    */
DECL|method|getCallQueueLen ()
specifier|public
name|int
name|getCallQueueLen
parameter_list|()
block|{
return|return
name|callQueue
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * The maximum size of the rpc call queue of this server.    * @return The maximum size of the rpc call queue.    */
DECL|method|getMaxQueueSize ()
specifier|public
name|int
name|getMaxQueueSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
comment|/**    * The number of reader threads for this server.    * @return The number of reader threads.    */
DECL|method|getNumReaders ()
specifier|public
name|int
name|getNumReaders
parameter_list|()
block|{
return|return
name|readThreads
return|;
block|}
comment|/**    * When the read or write buffer size is larger than this limit, i/o will be     * done in chunks of this size. Most RPC requests and responses would be    * be smaller.    */
DECL|field|NIO_BUFFER_LIMIT
specifier|private
specifier|static
name|int
name|NIO_BUFFER_LIMIT
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|//should not be more than 64KB.
comment|/**    * This is a wrapper around {@link WritableByteChannel#write(ByteBuffer)}.    * If the amount of data is large, it writes to channel in smaller chunks.     * This is to avoid jdk from creating many direct buffers as the size of     * buffer increases. This also minimizes extra copies in NIO layer    * as a result of multiple write operations required to write a large     * buffer.      *    * @see WritableByteChannel#write(ByteBuffer)    */
DECL|method|channelWrite (WritableByteChannel channel, ByteBuffer buffer)
specifier|private
name|int
name|channelWrite
parameter_list|(
name|WritableByteChannel
name|channel
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
operator|(
name|buffer
operator|.
name|remaining
argument_list|()
operator|<=
name|NIO_BUFFER_LIMIT
operator|)
condition|?
name|channel
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
else|:
name|channelIO
argument_list|(
literal|null
argument_list|,
name|channel
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|rpcMetrics
operator|.
name|incrSentBytes
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * This is a wrapper around {@link ReadableByteChannel#read(ByteBuffer)}.    * If the amount of data is large, it writes to channel in smaller chunks.     * This is to avoid jdk from creating many direct buffers as the size of     * ByteBuffer increases. There should not be any performance degredation.    *     * @see ReadableByteChannel#read(ByteBuffer)    */
DECL|method|channelRead (ReadableByteChannel channel, ByteBuffer buffer)
specifier|private
name|int
name|channelRead
parameter_list|(
name|ReadableByteChannel
name|channel
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
operator|(
name|buffer
operator|.
name|remaining
argument_list|()
operator|<=
name|NIO_BUFFER_LIMIT
operator|)
condition|?
name|channel
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
else|:
name|channelIO
argument_list|(
name|channel
argument_list|,
literal|null
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|rpcMetrics
operator|.
name|incrReceivedBytes
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * Helper for {@link #channelRead(ReadableByteChannel, ByteBuffer)}    * and {@link #channelWrite(WritableByteChannel, ByteBuffer)}. Only    * one of readCh or writeCh should be non-null.    *     * @see #channelRead(ReadableByteChannel, ByteBuffer)    * @see #channelWrite(WritableByteChannel, ByteBuffer)    */
DECL|method|channelIO (ReadableByteChannel readCh, WritableByteChannel writeCh, ByteBuffer buf)
specifier|private
specifier|static
name|int
name|channelIO
parameter_list|(
name|ReadableByteChannel
name|readCh
parameter_list|,
name|WritableByteChannel
name|writeCh
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|originalLimit
init|=
name|buf
operator|.
name|limit
argument_list|()
decl_stmt|;
name|int
name|initialRemaining
init|=
name|buf
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|buf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|int
name|ioSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|remaining
argument_list|()
argument_list|,
name|NIO_BUFFER_LIMIT
argument_list|)
decl_stmt|;
name|buf
operator|.
name|limit
argument_list|(
name|buf
operator|.
name|position
argument_list|()
operator|+
name|ioSize
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|readCh
operator|==
literal|null
operator|)
condition|?
name|writeCh
operator|.
name|write
argument_list|(
name|buf
argument_list|)
else|:
name|readCh
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|<
name|ioSize
condition|)
block|{
break|break;
block|}
block|}
finally|finally
block|{
name|buf
operator|.
name|limit
argument_list|(
name|originalLimit
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nBytes
init|=
name|initialRemaining
operator|-
name|buf
operator|.
name|remaining
argument_list|()
decl_stmt|;
return|return
operator|(
name|nBytes
operator|>
literal|0
operator|)
condition|?
name|nBytes
else|:
name|ret
return|;
block|}
block|}
end_class

end_unit

