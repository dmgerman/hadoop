begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.meta
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecordOutput
import|;
end_import

begin_comment
comment|/**   * Represents typeID for basic types.  *    * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TypeID
specifier|public
class|class
name|TypeID
block|{
comment|/**    * constants representing the IDL types we support    */
DECL|class|RIOType
specifier|public
specifier|static
specifier|final
class|class
name|RIOType
block|{
DECL|field|BOOL
specifier|public
specifier|static
specifier|final
name|byte
name|BOOL
init|=
literal|1
decl_stmt|;
DECL|field|BUFFER
specifier|public
specifier|static
specifier|final
name|byte
name|BUFFER
init|=
literal|2
decl_stmt|;
DECL|field|BYTE
specifier|public
specifier|static
specifier|final
name|byte
name|BYTE
init|=
literal|3
decl_stmt|;
DECL|field|DOUBLE
specifier|public
specifier|static
specifier|final
name|byte
name|DOUBLE
init|=
literal|4
decl_stmt|;
DECL|field|FLOAT
specifier|public
specifier|static
specifier|final
name|byte
name|FLOAT
init|=
literal|5
decl_stmt|;
DECL|field|INT
specifier|public
specifier|static
specifier|final
name|byte
name|INT
init|=
literal|6
decl_stmt|;
DECL|field|LONG
specifier|public
specifier|static
specifier|final
name|byte
name|LONG
init|=
literal|7
decl_stmt|;
DECL|field|MAP
specifier|public
specifier|static
specifier|final
name|byte
name|MAP
init|=
literal|8
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|byte
name|STRING
init|=
literal|9
decl_stmt|;
DECL|field|STRUCT
specifier|public
specifier|static
specifier|final
name|byte
name|STRUCT
init|=
literal|10
decl_stmt|;
DECL|field|VECTOR
specifier|public
specifier|static
specifier|final
name|byte
name|VECTOR
init|=
literal|11
decl_stmt|;
block|}
comment|/**    * Constant classes for the basic types, so we can share them.    */
DECL|field|BoolTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|BoolTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|BOOL
argument_list|)
decl_stmt|;
DECL|field|BufferTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|BufferTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|BUFFER
argument_list|)
decl_stmt|;
DECL|field|ByteTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|ByteTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|BYTE
argument_list|)
decl_stmt|;
DECL|field|DoubleTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|DoubleTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
DECL|field|FloatTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|FloatTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
DECL|field|IntTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|IntTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|INT
argument_list|)
decl_stmt|;
DECL|field|LongTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|LongTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|LONG
argument_list|)
decl_stmt|;
DECL|field|StringTypeID
specifier|public
specifier|static
specifier|final
name|TypeID
name|StringTypeID
init|=
operator|new
name|TypeID
argument_list|(
name|RIOType
operator|.
name|STRING
argument_list|)
decl_stmt|;
DECL|field|typeVal
specifier|protected
name|byte
name|typeVal
decl_stmt|;
comment|/**    * Create a TypeID object     */
DECL|method|TypeID (byte typeVal)
name|TypeID
parameter_list|(
name|byte
name|typeVal
parameter_list|)
block|{
name|this
operator|.
name|typeVal
operator|=
name|typeVal
expr_stmt|;
block|}
comment|/**    * Get the type value. One of the constants in RIOType.    */
DECL|method|getTypeVal ()
specifier|public
name|byte
name|getTypeVal
parameter_list|()
block|{
return|return
name|typeVal
return|;
block|}
comment|/**    * Serialize the TypeID object    */
DECL|method|write (RecordOutput rout, String tag)
name|void
name|write
parameter_list|(
name|RecordOutput
name|rout
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|rout
operator|.
name|writeByte
argument_list|(
name|typeVal
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two base typeIDs are equal if they refer to the same type    */
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TypeID
name|oTypeID
init|=
operator|(
name|TypeID
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|typeVal
operator|==
name|oTypeID
operator|.
name|typeVal
operator|)
return|;
block|}
comment|/**    * We use a basic hashcode implementation, since this class will likely not    * be used as a hashmap key     */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// See 'Effectve Java' by Joshua Bloch
return|return
literal|37
operator|*
literal|17
operator|+
operator|(
name|int
operator|)
name|typeVal
return|;
block|}
block|}
end_class

end_unit

