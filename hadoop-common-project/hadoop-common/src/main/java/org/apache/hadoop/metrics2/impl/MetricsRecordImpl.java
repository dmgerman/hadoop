begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|Contracts
operator|.
name|*
import|;
end_import

begin_class
DECL|class|MetricsRecordImpl
class|class
name|MetricsRecordImpl
extends|extends
name|AbstractMetricsRecord
block|{
DECL|field|DEFAULT_CONTEXT
specifier|protected
specifier|static
specifier|final
name|String
name|DEFAULT_CONTEXT
init|=
literal|"default"
decl_stmt|;
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|MetricsInfo
name|info
decl_stmt|;
DECL|field|tags
specifier|private
specifier|final
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|Iterable
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
decl_stmt|;
comment|/**    * Construct a metrics record    * @param info  {@link MetricsInfo} of the record    * @param timestamp of the record    * @param tags  of the record    * @param metrics of the record    */
DECL|method|MetricsRecordImpl (MetricsInfo info, long timestamp, List<MetricsTag> tags, Iterable<AbstractMetric> metrics)
specifier|public
name|MetricsRecordImpl
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|,
name|Iterable
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|checkArg
argument_list|(
name|timestamp
argument_list|,
name|timestamp
operator|>
literal|0
argument_list|,
literal|"timestamp"
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|checkNotNull
argument_list|(
name|info
argument_list|,
literal|"info"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|checkNotNull
argument_list|(
name|tags
argument_list|,
literal|"tags"
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|checkNotNull
argument_list|(
name|metrics
argument_list|,
literal|"metrics"
argument_list|)
expr_stmt|;
block|}
DECL|method|timestamp ()
annotation|@
name|Override
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|name ()
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|info
operator|.
name|name
argument_list|()
return|;
block|}
DECL|method|info ()
name|MetricsInfo
name|info
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|description ()
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|info
operator|.
name|description
argument_list|()
return|;
block|}
DECL|method|context ()
annotation|@
name|Override
specifier|public
name|String
name|context
parameter_list|()
block|{
comment|// usually the first tag
for|for
control|(
name|MetricsTag
name|t
range|:
name|tags
control|)
block|{
if|if
condition|(
name|t
operator|.
name|info
argument_list|()
operator|==
name|MsInfo
operator|.
name|Context
condition|)
block|{
return|return
name|t
operator|.
name|value
argument_list|()
return|;
block|}
block|}
return|return
name|DEFAULT_CONTEXT
return|;
block|}
annotation|@
name|Override
DECL|method|tags ()
specifier|public
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|()
block|{
return|return
name|tags
return|;
comment|// already unmodifiable from MetricsRecordBuilderImpl#tags
block|}
DECL|method|metrics ()
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|AbstractMetric
argument_list|>
name|metrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
block|}
end_class

end_unit

