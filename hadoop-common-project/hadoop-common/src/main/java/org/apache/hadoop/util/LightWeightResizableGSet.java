begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A low memory footprint {@link GSet} implementation,  * which uses an array for storing the elements  * and linked lists for collision resolution.  *  * If the size of elements exceeds the threshold,  * the internal array will be resized to double length.  *  * This class does not support null element.  *  * This class is not thread safe.  *  * @param<K> Key type for looking up the elements  * @param<E> Element type, which must be  *       (1) a subclass of K, and  *       (2) implementing {@link LinkedElement} interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|LightWeightResizableGSet
specifier|public
class|class
name|LightWeightResizableGSet
parameter_list|<
name|K
parameter_list|,
name|E
extends|extends
name|K
parameter_list|>
extends|extends
name|LightWeightGSet
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
block|{
comment|/**    * The default initial capacity - MUST be a power of two.    */
DECL|field|DEFAULT_INITIAL_CAPACITY
specifier|static
specifier|final
name|int
name|DEFAULT_INITIAL_CAPACITY
init|=
literal|1
operator|<<
literal|4
decl_stmt|;
comment|/**    * The load factor used when none specified in constructor.    */
DECL|field|DEFAULT_LOAD_FACTOR
specifier|static
specifier|final
name|float
name|DEFAULT_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
comment|/** Size of the entry table. */
DECL|field|capacity
specifier|private
name|int
name|capacity
decl_stmt|;
comment|/**    * The load factor for the hash set.    */
DECL|field|loadFactor
specifier|private
specifier|final
name|float
name|loadFactor
decl_stmt|;
DECL|field|threshold
specifier|private
name|int
name|threshold
decl_stmt|;
DECL|method|LightWeightResizableGSet (int initCapacity, float loadFactor)
specifier|public
name|LightWeightResizableGSet
parameter_list|(
name|int
name|initCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
if|if
condition|(
name|initCapacity
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Illegal initial capacity: "
operator|+
name|initCapacity
argument_list|)
throw|;
block|}
if|if
condition|(
name|loadFactor
operator|<=
literal|0
operator|||
name|loadFactor
operator|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Illegal load factor: "
operator|+
name|loadFactor
argument_list|)
throw|;
block|}
name|this
operator|.
name|capacity
operator|=
name|actualArrayLength
argument_list|(
name|initCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|hash_mask
operator|=
name|capacity
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|loadFactor
operator|=
name|loadFactor
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|loadFactor
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|capacity
index|]
expr_stmt|;
block|}
DECL|method|LightWeightResizableGSet ()
specifier|public
name|LightWeightResizableGSet
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_INITIAL_CAPACITY
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
DECL|method|LightWeightResizableGSet (int initCapacity)
specifier|public
name|LightWeightResizableGSet
parameter_list|(
name|int
name|initCapacity
parameter_list|)
block|{
name|this
argument_list|(
name|initCapacity
argument_list|,
name|DEFAULT_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (final E element)
specifier|public
name|E
name|put
parameter_list|(
specifier|final
name|E
name|element
parameter_list|)
block|{
name|E
name|existing
init|=
name|super
operator|.
name|put
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|expandIfNecessary
argument_list|()
expr_stmt|;
return|return
name|existing
return|;
block|}
comment|/**    * Resize the internal table to given capacity.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resize (int cap)
specifier|protected
name|void
name|resize
parameter_list|(
name|int
name|cap
parameter_list|)
block|{
name|int
name|newCapacity
init|=
name|actualArrayLength
argument_list|(
name|cap
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|==
name|this
operator|.
name|capacity
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|capacity
operator|=
name|newCapacity
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
call|(
name|int
call|)
argument_list|(
name|capacity
operator|*
name|loadFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|hash_mask
operator|=
name|capacity
operator|-
literal|1
expr_stmt|;
name|LinkedElement
index|[]
name|oldEntries
init|=
name|entries
decl_stmt|;
name|entries
operator|=
operator|new
name|LinkedElement
index|[
name|capacity
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LinkedElement
name|e
init|=
name|oldEntries
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|LinkedElement
name|next
init|=
name|e
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getIndex
argument_list|(
operator|(
name|E
operator|)
name|e
argument_list|)
decl_stmt|;
name|e
operator|.
name|setNext
argument_list|(
name|entries
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|e
expr_stmt|;
name|e
operator|=
name|next
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks if we need to expand, and expands if necessary.    */
DECL|method|expandIfNecessary ()
specifier|protected
name|void
name|expandIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|size
operator|>
name|this
operator|.
name|threshold
operator|&&
name|capacity
operator|<
name|MAX_ARRAY_LENGTH
condition|)
block|{
name|resize
argument_list|(
name|capacity
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

