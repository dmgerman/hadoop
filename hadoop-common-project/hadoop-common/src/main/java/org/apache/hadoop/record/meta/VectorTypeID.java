begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.meta
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecordOutput
import|;
end_import

begin_comment
comment|/**   * Represents typeID for vector.   * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|VectorTypeID
specifier|public
class|class
name|VectorTypeID
extends|extends
name|TypeID
block|{
DECL|field|typeIDElement
specifier|private
name|TypeID
name|typeIDElement
decl_stmt|;
DECL|method|VectorTypeID (TypeID typeIDElement)
specifier|public
name|VectorTypeID
parameter_list|(
name|TypeID
name|typeIDElement
parameter_list|)
block|{
name|super
argument_list|(
name|RIOType
operator|.
name|VECTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeIDElement
operator|=
name|typeIDElement
expr_stmt|;
block|}
DECL|method|getElementTypeID ()
specifier|public
name|TypeID
name|getElementTypeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|typeIDElement
return|;
block|}
annotation|@
name|Override
DECL|method|write (RecordOutput rout, String tag)
name|void
name|write
parameter_list|(
name|RecordOutput
name|rout
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|rout
operator|.
name|writeByte
argument_list|(
name|typeVal
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|typeIDElement
operator|.
name|write
argument_list|(
name|rout
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two vector typeIDs are equal if their constituent elements have the     * same type    */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
name|VectorTypeID
name|vti
init|=
operator|(
name|VectorTypeID
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|typeIDElement
operator|.
name|equals
argument_list|(
name|vti
operator|.
name|typeIDElement
argument_list|)
return|;
block|}
comment|/**    * We use a basic hashcode implementation, since this class will likely not    * be used as a hashmap key     */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|37
operator|*
literal|17
operator|+
name|typeIDElement
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

