begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Helpers to create interned metrics info  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Interns
specifier|public
class|class
name|Interns
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Interns
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A simple intern cache with two keys
comment|// (to avoid creating new (combined) key objects for lookup)
DECL|class|CacheWith2Keys
specifier|private
specifier|static
specifier|abstract
class|class
name|CacheWith2Keys
parameter_list|<
name|K1
parameter_list|,
name|K2
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|k1Map
specifier|private
specifier|final
name|Map
argument_list|<
name|K1
argument_list|,
name|Map
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
argument_list|>
name|k1Map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|K1
argument_list|,
name|Map
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|gotOverflow
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K1
argument_list|,
name|Map
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
argument_list|>
name|e
parameter_list|)
block|{
name|boolean
name|overflow
init|=
name|expireKey1At
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overflow
operator|&&
operator|!
name|gotOverflow
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Metrics intern cache overflow at {} for {}"
argument_list|,
name|size
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|gotOverflow
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|overflow
return|;
block|}
block|}
decl_stmt|;
DECL|method|expireKey1At (int size)
specifier|abstract
specifier|protected
name|boolean
name|expireKey1At
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
DECL|method|expireKey2At (int size)
specifier|abstract
specifier|protected
name|boolean
name|expireKey2At
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
DECL|method|newValue (K1 k1, K2 k2)
specifier|abstract
specifier|protected
name|V
name|newValue
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|)
function_decl|;
DECL|method|add (K1 k1, K2 k2)
specifier|synchronized
name|V
name|add
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|)
block|{
name|Map
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
name|k2Map
init|=
name|k1Map
operator|.
name|get
argument_list|(
name|k1
argument_list|)
decl_stmt|;
if|if
condition|(
name|k2Map
operator|==
literal|null
condition|)
block|{
name|k2Map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|gotOverflow
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|K2
argument_list|,
name|V
argument_list|>
name|e
parameter_list|)
block|{
name|boolean
name|overflow
init|=
name|expireKey2At
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overflow
operator|&&
operator|!
name|gotOverflow
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Metrics intern cache overflow at {} for {}"
argument_list|,
name|size
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|gotOverflow
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|overflow
return|;
block|}
block|}
expr_stmt|;
name|k1Map
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|k2Map
argument_list|)
expr_stmt|;
block|}
name|V
name|v
init|=
name|k2Map
operator|.
name|get
argument_list|(
name|k2
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|newValue
argument_list|(
name|k1
argument_list|,
name|k2
argument_list|)
expr_stmt|;
name|k2Map
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
block|}
comment|// Sanity limits in case of misuse/abuse.
DECL|field|MAX_INFO_NAMES
specifier|static
specifier|final
name|int
name|MAX_INFO_NAMES
init|=
literal|2010
decl_stmt|;
DECL|field|MAX_INFO_DESCS
specifier|static
specifier|final
name|int
name|MAX_INFO_DESCS
init|=
literal|100
decl_stmt|;
comment|// distinct per name
DECL|enum|Info
enum|enum
name|Info
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|cache
specifier|final
name|CacheWith2Keys
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetricsInfo
argument_list|>
name|cache
init|=
operator|new
name|CacheWith2Keys
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|MetricsInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|expireKey1At
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|size
operator|>
name|MAX_INFO_NAMES
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|expireKey2At
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|size
operator|>
name|MAX_INFO_DESCS
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MetricsInfo
name|newValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
return|return
operator|new
name|MetricsInfoImpl
argument_list|(
name|name
argument_list|,
name|desc
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
comment|/**    * Get a metric info object    * @param name    * @param description    * @return an interned metric info object    */
DECL|method|info (String name, String description)
specifier|public
specifier|static
name|MetricsInfo
name|info
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
name|Info
operator|.
name|INSTANCE
operator|.
name|cache
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|// Sanity limits
DECL|field|MAX_TAG_NAMES
specifier|static
specifier|final
name|int
name|MAX_TAG_NAMES
init|=
literal|100
decl_stmt|;
DECL|field|MAX_TAG_VALUES
specifier|static
specifier|final
name|int
name|MAX_TAG_VALUES
init|=
literal|1000
decl_stmt|;
comment|// distinct per name
DECL|enum|Tags
enum|enum
name|Tags
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|cache
specifier|final
name|CacheWith2Keys
argument_list|<
name|MetricsInfo
argument_list|,
name|String
argument_list|,
name|MetricsTag
argument_list|>
name|cache
init|=
operator|new
name|CacheWith2Keys
argument_list|<
name|MetricsInfo
argument_list|,
name|String
argument_list|,
name|MetricsTag
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|expireKey1At
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|size
operator|>
name|MAX_TAG_NAMES
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|expireKey2At
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|size
operator|>
name|MAX_TAG_VALUES
return|;
block|}
annotation|@
name|Override
specifier|protected
name|MetricsTag
name|newValue
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|MetricsTag
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
comment|/**    * Get a metrics tag    * @param info  of the tag    * @param value of the tag    * @return an interned metrics tag    */
DECL|method|tag (MetricsInfo info, String value)
specifier|public
specifier|static
name|MetricsTag
name|tag
parameter_list|(
name|MetricsInfo
name|info
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|Tags
operator|.
name|INSTANCE
operator|.
name|cache
operator|.
name|add
argument_list|(
name|info
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Get a metrics tag    * @param name  of the tag    * @param description of the tag    * @param value of the tag    * @return an interned metrics tag    */
DECL|method|tag (String name, String description, String value)
specifier|public
specifier|static
name|MetricsTag
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|Tags
operator|.
name|INSTANCE
operator|.
name|cache
operator|.
name|add
argument_list|(
name|info
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

