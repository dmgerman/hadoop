begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|FailoverProxyProvider
operator|.
name|ProxyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
operator|.
name|RetryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@link RpcInvocationHandler} which supports client side retry .  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RetryInvocationHandler
specifier|public
class|class
name|RetryInvocationHandler
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RpcInvocationHandler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryInvocationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Call
specifier|static
class|class
name|Call
block|{
DECL|field|method
specifier|private
specifier|final
name|Method
name|method
decl_stmt|;
DECL|field|args
specifier|private
specifier|final
name|Object
index|[]
name|args
decl_stmt|;
DECL|field|isRpc
specifier|private
specifier|final
name|boolean
name|isRpc
decl_stmt|;
DECL|field|callId
specifier|private
specifier|final
name|int
name|callId
decl_stmt|;
DECL|field|counters
specifier|private
specifier|final
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|field|retryPolicy
specifier|private
specifier|final
name|RetryPolicy
name|retryPolicy
decl_stmt|;
DECL|field|retryInvocationHandler
specifier|private
specifier|final
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
name|retryInvocationHandler
decl_stmt|;
DECL|field|retryInfo
specifier|private
name|RetryInfo
name|retryInfo
decl_stmt|;
DECL|method|Call (Method method, Object[] args, boolean isRpc, int callId, RetryInvocationHandler<?> retryInvocationHandler)
name|Call
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|boolean
name|isRpc
parameter_list|,
name|int
name|callId
parameter_list|,
name|RetryInvocationHandler
argument_list|<
name|?
argument_list|>
name|retryInvocationHandler
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|isRpc
operator|=
name|isRpc
expr_stmt|;
name|this
operator|.
name|callId
operator|=
name|callId
expr_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|retryInvocationHandler
operator|.
name|getRetryPolicy
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryInvocationHandler
operator|=
name|retryInvocationHandler
expr_stmt|;
block|}
DECL|method|getCallId ()
name|int
name|getCallId
parameter_list|()
block|{
return|return
name|callId
return|;
block|}
DECL|method|getCounters ()
name|Counters
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
DECL|method|getWaitTime (final long now)
specifier|synchronized
name|Long
name|getWaitTime
parameter_list|(
specifier|final
name|long
name|now
parameter_list|)
block|{
return|return
name|retryInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|retryInfo
operator|.
name|retryTime
operator|-
name|now
return|;
block|}
comment|/** Invoke the call once without retrying. */
DECL|method|invokeOnce ()
specifier|synchronized
name|CallReturn
name|invokeOnce
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|retryInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|processWaitTimeAndRetryInfo
argument_list|()
return|;
block|}
comment|// The number of times this invocation handler has ever been failed over
comment|// before this method invocation attempt. Used to prevent concurrent
comment|// failed method invocations from triggering multiple failover attempts.
specifier|final
name|long
name|failoverCount
init|=
name|retryInvocationHandler
operator|.
name|getFailoverCount
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|invoke
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
comment|// If interrupted, do not retry.
throw|throw
name|e
throw|;
block|}
name|retryInfo
operator|=
name|retryInvocationHandler
operator|.
name|handleException
argument_list|(
name|method
argument_list|,
name|callId
argument_list|,
name|retryPolicy
argument_list|,
name|counters
argument_list|,
name|failoverCount
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|processWaitTimeAndRetryInfo
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|CallReturn
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
comment|/**      * It first processes the wait time, if there is any,      * and then invokes {@link #processRetryInfo()}.      *      * If the wait time is positive, it either sleeps for synchronous calls      * or immediately returns for asynchronous calls.      *      * @return {@link CallReturn#RETRY} if the retryInfo is processed;      *         otherwise, return {@link CallReturn#WAIT_RETRY}.      */
DECL|method|processWaitTimeAndRetryInfo ()
name|CallReturn
name|processWaitTimeAndRetryInfo
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
specifier|final
name|Long
name|waitTime
init|=
name|getWaitTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"#{} processRetryInfo: retryInfo={}, waitTime={}"
argument_list|,
name|callId
argument_list|,
name|retryInfo
argument_list|,
name|waitTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitTime
operator|!=
literal|null
operator|&&
name|waitTime
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInfo
operator|.
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting to retry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|InterruptedIOException
name|intIOE
init|=
operator|new
name|InterruptedIOException
argument_list|(
literal|"Retry interrupted"
argument_list|)
decl_stmt|;
name|intIOE
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|intIOE
throw|;
block|}
block|}
name|processRetryInfo
argument_list|()
expr_stmt|;
return|return
name|CallReturn
operator|.
name|RETRY
return|;
block|}
DECL|method|processRetryInfo ()
specifier|synchronized
name|void
name|processRetryInfo
parameter_list|()
block|{
name|counters
operator|.
name|retries
operator|++
expr_stmt|;
if|if
condition|(
name|retryInfo
operator|.
name|isFailover
argument_list|()
condition|)
block|{
name|retryInvocationHandler
operator|.
name|proxyDescriptor
operator|.
name|failover
argument_list|(
name|retryInfo
operator|.
name|expectedFailoverCount
argument_list|,
name|method
argument_list|,
name|callId
argument_list|)
expr_stmt|;
name|counters
operator|.
name|failovers
operator|++
expr_stmt|;
block|}
name|retryInfo
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|invoke ()
name|CallReturn
name|invoke
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
operator|new
name|CallReturn
argument_list|(
name|invokeMethod
argument_list|()
argument_list|)
return|;
block|}
DECL|method|invokeMethod ()
name|Object
name|invokeMethod
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|isRpc
condition|)
block|{
name|Client
operator|.
name|setCallIdAndRetryCount
argument_list|(
name|callId
argument_list|,
name|counters
operator|.
name|retries
argument_list|,
name|retryInvocationHandler
operator|.
name|asyncCallHandler
argument_list|)
expr_stmt|;
block|}
return|return
name|retryInvocationHandler
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"#"
operator|+
name|callId
operator|+
literal|": "
operator|+
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
operator|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
operator|)
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|Counters
specifier|static
class|class
name|Counters
block|{
comment|/** Counter for retries. */
DECL|field|retries
specifier|private
name|int
name|retries
decl_stmt|;
comment|/** Counter for method invocation has been failed over. */
DECL|field|failovers
specifier|private
name|int
name|failovers
decl_stmt|;
DECL|method|isZeros ()
name|boolean
name|isZeros
parameter_list|()
block|{
return|return
name|retries
operator|==
literal|0
operator|&&
name|failovers
operator|==
literal|0
return|;
block|}
block|}
DECL|class|ProxyDescriptor
specifier|private
specifier|static
class|class
name|ProxyDescriptor
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|fpp
specifier|private
specifier|final
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|fpp
decl_stmt|;
comment|/** Count the associated proxy provider has ever been failed over. */
DECL|field|failoverCount
specifier|private
name|long
name|failoverCount
init|=
literal|0
decl_stmt|;
DECL|field|proxyInfo
specifier|private
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|proxyInfo
decl_stmt|;
DECL|method|ProxyDescriptor (FailoverProxyProvider<T> fpp)
name|ProxyDescriptor
parameter_list|(
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|fpp
parameter_list|)
block|{
name|this
operator|.
name|fpp
operator|=
name|fpp
expr_stmt|;
name|this
operator|.
name|proxyInfo
operator|=
name|fpp
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
DECL|method|getProxyInfo ()
specifier|synchronized
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxyInfo
parameter_list|()
block|{
return|return
name|proxyInfo
return|;
block|}
DECL|method|getProxy ()
specifier|synchronized
name|T
name|getProxy
parameter_list|()
block|{
return|return
name|proxyInfo
operator|.
name|proxy
return|;
block|}
DECL|method|getFailoverCount ()
specifier|synchronized
name|long
name|getFailoverCount
parameter_list|()
block|{
return|return
name|failoverCount
return|;
block|}
DECL|method|failover (long expectedFailoverCount, Method method, int callId)
specifier|synchronized
name|void
name|failover
parameter_list|(
name|long
name|expectedFailoverCount
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|callId
parameter_list|)
block|{
comment|// Make sure that concurrent failed invocations only cause a single
comment|// actual failover.
if|if
condition|(
name|failoverCount
operator|==
name|expectedFailoverCount
condition|)
block|{
name|fpp
operator|.
name|performFailover
argument_list|(
name|proxyInfo
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|failoverCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"A failover has occurred since the start of call #"
operator|+
name|callId
operator|+
literal|" "
operator|+
name|proxyInfo
operator|.
name|getString
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxyInfo
operator|=
name|fpp
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
DECL|method|idempotentOrAtMostOnce (Method method)
name|boolean
name|idempotentOrAtMostOnce
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
specifier|final
name|Method
name|m
init|=
name|fpp
operator|.
name|getInterface
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|isAnnotationPresent
argument_list|(
name|Idempotent
operator|.
name|class
argument_list|)
operator|||
name|m
operator|.
name|isAnnotationPresent
argument_list|(
name|AtMostOnce
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fpp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RetryInfo
specifier|private
specifier|static
class|class
name|RetryInfo
block|{
DECL|field|retryTime
specifier|private
specifier|final
name|long
name|retryTime
decl_stmt|;
DECL|field|delay
specifier|private
specifier|final
name|long
name|delay
decl_stmt|;
DECL|field|action
specifier|private
specifier|final
name|RetryAction
name|action
decl_stmt|;
DECL|field|expectedFailoverCount
specifier|private
specifier|final
name|long
name|expectedFailoverCount
decl_stmt|;
DECL|field|failException
specifier|private
specifier|final
name|Exception
name|failException
decl_stmt|;
DECL|method|RetryInfo (long delay, RetryAction action, long expectedFailoverCount, Exception failException)
name|RetryInfo
parameter_list|(
name|long
name|delay
parameter_list|,
name|RetryAction
name|action
parameter_list|,
name|long
name|expectedFailoverCount
parameter_list|,
name|Exception
name|failException
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|retryTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
name|delay
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|expectedFailoverCount
operator|=
name|expectedFailoverCount
expr_stmt|;
name|this
operator|.
name|failException
operator|=
name|failException
expr_stmt|;
block|}
DECL|method|isFailover ()
name|boolean
name|isFailover
parameter_list|()
block|{
return|return
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|action
operator|==
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAILOVER_AND_RETRY
return|;
block|}
DECL|method|isFail ()
name|boolean
name|isFail
parameter_list|()
block|{
return|return
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|action
operator|==
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAIL
return|;
block|}
DECL|method|getFailException ()
name|Exception
name|getFailException
parameter_list|()
block|{
return|return
name|failException
return|;
block|}
DECL|method|newRetryInfo (RetryPolicy policy, Exception e, Counters counters, boolean idempotentOrAtMostOnce, long expectedFailoverCount)
specifier|static
name|RetryInfo
name|newRetryInfo
parameter_list|(
name|RetryPolicy
name|policy
parameter_list|,
name|Exception
name|e
parameter_list|,
name|Counters
name|counters
parameter_list|,
name|boolean
name|idempotentOrAtMostOnce
parameter_list|,
name|long
name|expectedFailoverCount
parameter_list|)
throws|throws
name|Exception
block|{
name|RetryAction
name|max
init|=
literal|null
decl_stmt|;
name|long
name|maxRetryDelay
init|=
literal|0
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
specifier|final
name|Iterable
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
name|e
operator|instanceof
name|MultiException
condition|?
operator|(
operator|(
name|MultiException
operator|)
name|e
operator|)
operator|.
name|getExceptions
argument_list|()
operator|.
name|values
argument_list|()
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|e
argument_list|)
decl_stmt|;
for|for
control|(
name|Exception
name|exception
range|:
name|exceptions
control|)
block|{
specifier|final
name|RetryAction
name|a
init|=
name|policy
operator|.
name|shouldRetry
argument_list|(
name|exception
argument_list|,
name|counters
operator|.
name|retries
argument_list|,
name|counters
operator|.
name|failovers
argument_list|,
name|idempotentOrAtMostOnce
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|action
operator|!=
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAIL
condition|)
block|{
comment|// must be a retry or failover
if|if
condition|(
name|a
operator|.
name|delayMillis
operator|>
name|maxRetryDelay
condition|)
block|{
name|maxRetryDelay
operator|=
name|a
operator|.
name|delayMillis
expr_stmt|;
block|}
block|}
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|.
name|action
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|action
argument_list|)
operator|<
literal|0
condition|)
block|{
name|max
operator|=
name|a
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|action
operator|==
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAIL
condition|)
block|{
name|ex
operator|=
name|exception
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|RetryInfo
argument_list|(
name|maxRetryDelay
argument_list|,
name|max
argument_list|,
name|expectedFailoverCount
argument_list|,
name|ex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RetryInfo{"
operator|+
literal|"retryTime="
operator|+
name|retryTime
operator|+
literal|", delay="
operator|+
name|delay
operator|+
literal|", action="
operator|+
name|action
operator|+
literal|", expectedFailoverCount="
operator|+
name|expectedFailoverCount
operator|+
literal|", failException="
operator|+
name|failException
operator|+
literal|'}'
return|;
block|}
block|}
DECL|field|proxyDescriptor
specifier|private
specifier|final
name|ProxyDescriptor
argument_list|<
name|T
argument_list|>
name|proxyDescriptor
decl_stmt|;
DECL|field|hasSuccessfulCall
specifier|private
specifier|volatile
name|boolean
name|hasSuccessfulCall
init|=
literal|false
decl_stmt|;
DECL|field|defaultPolicy
specifier|private
specifier|final
name|RetryPolicy
name|defaultPolicy
decl_stmt|;
DECL|field|methodNameToPolicyMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
decl_stmt|;
DECL|field|asyncCallHandler
specifier|private
specifier|final
name|AsyncCallHandler
name|asyncCallHandler
init|=
operator|new
name|AsyncCallHandler
argument_list|()
decl_stmt|;
DECL|method|RetryInvocationHandler (FailoverProxyProvider<T> proxyProvider, RetryPolicy retryPolicy)
specifier|protected
name|RetryInvocationHandler
parameter_list|(
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|this
argument_list|(
name|proxyProvider
argument_list|,
name|retryPolicy
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|RetryPolicy
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RetryInvocationHandler (FailoverProxyProvider<T> proxyProvider, RetryPolicy defaultPolicy, Map<String, RetryPolicy> methodNameToPolicyMap)
specifier|protected
name|RetryInvocationHandler
parameter_list|(
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|proxyProvider
parameter_list|,
name|RetryPolicy
name|defaultPolicy
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
parameter_list|)
block|{
name|this
operator|.
name|proxyDescriptor
operator|=
operator|new
name|ProxyDescriptor
argument_list|<>
argument_list|(
name|proxyProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultPolicy
operator|=
name|defaultPolicy
expr_stmt|;
name|this
operator|.
name|methodNameToPolicyMap
operator|=
name|methodNameToPolicyMap
expr_stmt|;
block|}
DECL|method|getRetryPolicy (Method method)
specifier|private
name|RetryPolicy
name|getRetryPolicy
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|RetryPolicy
name|policy
init|=
name|methodNameToPolicyMap
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|policy
operator|!=
literal|null
condition|?
name|policy
else|:
name|defaultPolicy
return|;
block|}
DECL|method|getFailoverCount ()
specifier|private
name|long
name|getFailoverCount
parameter_list|()
block|{
return|return
name|proxyDescriptor
operator|.
name|getFailoverCount
argument_list|()
return|;
block|}
DECL|method|newCall (Method method, Object[] args, boolean isRpc, int callId)
specifier|private
name|Call
name|newCall
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|,
name|boolean
name|isRpc
parameter_list|,
name|int
name|callId
parameter_list|)
block|{
if|if
condition|(
name|Client
operator|.
name|isAsynchronousMode
argument_list|()
condition|)
block|{
return|return
name|asyncCallHandler
operator|.
name|newAsyncCall
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|isRpc
argument_list|,
name|callId
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Call
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|isRpc
argument_list|,
name|callId
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|boolean
name|isRpc
init|=
name|isRpcInvocation
argument_list|(
name|proxyDescriptor
operator|.
name|getProxy
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|callId
init|=
name|isRpc
condition|?
name|Client
operator|.
name|nextCallId
argument_list|()
else|:
name|RpcConstants
operator|.
name|INVALID_CALL_ID
decl_stmt|;
specifier|final
name|Call
name|call
init|=
name|newCall
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|isRpc
argument_list|,
name|callId
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|CallReturn
name|c
init|=
name|call
operator|.
name|invokeOnce
argument_list|()
decl_stmt|;
specifier|final
name|CallReturn
operator|.
name|State
name|state
init|=
name|c
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|CallReturn
operator|.
name|State
operator|.
name|ASYNC_INVOKED
condition|)
block|{
return|return
literal|null
return|;
comment|// return null for async calls
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getState
argument_list|()
operator|!=
name|CallReturn
operator|.
name|State
operator|.
name|RETRY
condition|)
block|{
return|return
name|c
operator|.
name|getReturnValue
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|handleException (final Method method, final int callId, final RetryPolicy policy, final Counters counters, final long expectFailoverCount, final Exception e)
specifier|private
name|RetryInfo
name|handleException
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|callId
parameter_list|,
specifier|final
name|RetryPolicy
name|policy
parameter_list|,
specifier|final
name|Counters
name|counters
parameter_list|,
specifier|final
name|long
name|expectFailoverCount
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RetryInfo
name|retryInfo
init|=
name|RetryInfo
operator|.
name|newRetryInfo
argument_list|(
name|policy
argument_list|,
name|e
argument_list|,
name|counters
argument_list|,
name|proxyDescriptor
operator|.
name|idempotentOrAtMostOnce
argument_list|(
name|method
argument_list|)
argument_list|,
name|expectFailoverCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|retryInfo
operator|.
name|isFail
argument_list|()
condition|)
block|{
comment|// fail.
if|if
condition|(
name|retryInfo
operator|.
name|action
operator|.
name|reason
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception while invoking call #"
operator|+
name|callId
operator|+
literal|" "
operator|+
name|proxyDescriptor
operator|.
name|getProxyInfo
argument_list|()
operator|.
name|getString
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|". Not retrying because "
operator|+
name|retryInfo
operator|.
name|action
operator|.
name|reason
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|retryInfo
operator|.
name|getFailException
argument_list|()
throw|;
block|}
name|log
argument_list|(
name|method
argument_list|,
name|retryInfo
operator|.
name|isFailover
argument_list|()
argument_list|,
name|counters
operator|.
name|failovers
argument_list|,
name|retryInfo
operator|.
name|delay
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|retryInfo
return|;
block|}
DECL|method|log (final Method method, final boolean isFailover, final int failovers, final long delay, final Exception ex)
specifier|private
name|void
name|log
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|boolean
name|isFailover
parameter_list|,
specifier|final
name|int
name|failovers
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
comment|// log info if this has made some successful calls or
comment|// this is not the first failover
specifier|final
name|boolean
name|info
init|=
name|hasSuccessfulCall
operator|||
name|failovers
operator|!=
literal|0
operator|||
name|asyncCallHandler
operator|.
name|hasSuccessfulCall
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|&&
operator|!
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|ex
operator|+
literal|", while invoking "
argument_list|)
operator|.
name|append
argument_list|(
name|proxyDescriptor
operator|.
name|getProxyInfo
argument_list|()
operator|.
name|getString
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|failovers
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" after "
argument_list|)
operator|.
name|append
argument_list|(
name|failovers
argument_list|)
operator|.
name|append
argument_list|(
literal|" failover attempts"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|isFailover
condition|?
literal|". Trying to failover "
else|:
literal|". Retrying "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|delay
operator|>
literal|0
condition|?
literal|"after sleeping for "
operator|+
name|delay
operator|+
literal|"ms."
else|:
literal|"immediately."
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invokeMethod (Method method, Object[] args)
specifier|protected
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|isAccessible
argument_list|()
condition|)
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|r
init|=
name|method
operator|.
name|invoke
argument_list|(
name|proxyDescriptor
operator|.
name|getProxy
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|hasSuccessfulCall
operator|=
literal|true
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|isRpcInvocation (Object proxy)
specifier|static
name|boolean
name|isRpcInvocation
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|instanceof
name|ProtocolTranslator
condition|)
block|{
name|proxy
operator|=
operator|(
operator|(
name|ProtocolTranslator
operator|)
name|proxy
operator|)
operator|.
name|getUnderlyingProxyObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|proxy
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|InvocationHandler
name|ih
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
return|return
name|ih
operator|instanceof
name|RpcInvocationHandler
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|proxyDescriptor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|//RpcInvocationHandler
DECL|method|getConnectionId ()
specifier|public
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxyDescriptor
operator|.
name|getProxy
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getProxyProvider ()
specifier|public
name|FailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|getProxyProvider
parameter_list|()
block|{
return|return
name|proxyDescriptor
operator|.
name|fpp
return|;
block|}
block|}
end_class

end_unit

