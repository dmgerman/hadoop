begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FTPInputStream
specifier|public
class|class
name|FTPInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|wrappedStream
name|InputStream
name|wrappedStream
decl_stmt|;
DECL|field|client
name|FTPClient
name|client
decl_stmt|;
DECL|field|stats
name|FileSystem
operator|.
name|Statistics
name|stats
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
DECL|field|pos
name|long
name|pos
decl_stmt|;
DECL|method|FTPInputStream (InputStream stream, FTPClient client, FileSystem.Statistics stats)
specifier|public
name|FTPInputStream
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|FTPClient
name|client
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null InputStream"
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|==
literal|null
operator|||
operator|!
name|client
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FTP client null or not connected"
argument_list|)
throw|;
block|}
name|this
operator|.
name|wrappedStream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|closed
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
comment|// We don't support seek.
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Seek not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Seek not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|int
name|byteRead
init|=
name|wrappedStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|byteRead
operator|>=
literal|0
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|byteRead
operator|>=
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|byteRead
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte buf[], int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|int
name|result
init|=
name|wrappedStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|result
operator|>
literal|0
condition|)
block|{
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Client not connected"
argument_list|)
throw|;
block|}
name|boolean
name|cmdCompleted
init|=
name|client
operator|.
name|completePendingCommand
argument_list|()
decl_stmt|;
name|client
operator|.
name|logout
argument_list|()
expr_stmt|;
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cmdCompleted
condition|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Could not complete transfer, Reply Code - "
operator|+
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Not supported.
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|mark (int readLimit)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mark not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

