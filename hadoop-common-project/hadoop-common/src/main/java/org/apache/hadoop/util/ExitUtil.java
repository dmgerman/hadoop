begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Facilitates hooking process termination for tests, debugging  * and embedding.  *   * Hadoop code that attempts to call {@link System#exit(int)}   * or {@link Runtime#halt(int)} MUST invoke it via these methods.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"YARN"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ExitUtil
specifier|public
specifier|final
class|class
name|ExitUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
DECL|field|LOG
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExitUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|systemExitDisabled
specifier|private
specifier|static
specifier|volatile
name|boolean
name|systemExitDisabled
init|=
literal|false
decl_stmt|;
DECL|field|systemHaltDisabled
specifier|private
specifier|static
specifier|volatile
name|boolean
name|systemHaltDisabled
init|=
literal|false
decl_stmt|;
DECL|field|firstExitException
specifier|private
specifier|static
specifier|volatile
name|ExitException
name|firstExitException
decl_stmt|;
DECL|field|firstHaltException
specifier|private
specifier|static
specifier|volatile
name|HaltException
name|firstHaltException
decl_stmt|;
DECL|method|ExitUtil ()
specifier|private
name|ExitUtil
parameter_list|()
block|{   }
comment|/**    * An exception raised when a call to {@link #terminate(int)} was    * called and system exits were blocked.    */
DECL|class|ExitException
specifier|public
specifier|static
class|class
name|ExitException
extends|extends
name|RuntimeException
implements|implements
name|ExitCodeProvider
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * The status code.      */
DECL|field|status
specifier|public
specifier|final
name|int
name|status
decl_stmt|;
DECL|method|ExitException (int status, String msg)
specifier|public
name|ExitException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|ExitException (int status, String message, Throwable cause)
specifier|public
name|ExitException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|ExitException (int status, Throwable cause)
specifier|public
name|ExitException
parameter_list|(
name|int
name|status
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**      * String value does not include exception type, just exit code and message.      * @return the exit code and any message      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|message
init|=
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
name|super
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|status
argument_list|)
operator|+
literal|": "
operator|+
name|message
return|;
block|}
block|}
comment|/**    * An exception raised when a call to {@link #terminate(int)} was    * called and system halts were blocked.    */
DECL|class|HaltException
specifier|public
specifier|static
class|class
name|HaltException
extends|extends
name|RuntimeException
implements|implements
name|ExitCodeProvider
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|status
specifier|public
specifier|final
name|int
name|status
decl_stmt|;
DECL|method|HaltException (int status, Throwable cause)
specifier|public
name|HaltException
parameter_list|(
name|int
name|status
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|HaltException (int status, String msg)
specifier|public
name|HaltException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|HaltException (int status, String message, Throwable cause)
specifier|public
name|HaltException
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**      * String value does not include exception type, just exit code and message.      * @return the exit code and any message      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|message
init|=
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
name|super
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|status
argument_list|)
operator|+
literal|": "
operator|+
name|message
return|;
block|}
block|}
comment|/**    * Disable the use of System.exit for testing.    */
DECL|method|disableSystemExit ()
specifier|public
specifier|static
name|void
name|disableSystemExit
parameter_list|()
block|{
name|systemExitDisabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Disable the use of {@code Runtime.getRuntime().halt() } for testing.    */
DECL|method|disableSystemHalt ()
specifier|public
specifier|static
name|void
name|disableSystemHalt
parameter_list|()
block|{
name|systemHaltDisabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * @return true if terminate has been called.    */
DECL|method|terminateCalled ()
specifier|public
specifier|static
name|boolean
name|terminateCalled
parameter_list|()
block|{
comment|// Either we set this member or we actually called System#exit
return|return
name|firstExitException
operator|!=
literal|null
return|;
block|}
comment|/**    * @return true if halt has been called.    */
DECL|method|haltCalled ()
specifier|public
specifier|static
name|boolean
name|haltCalled
parameter_list|()
block|{
return|return
name|firstHaltException
operator|!=
literal|null
return|;
block|}
comment|/**    * @return the first ExitException thrown, null if none thrown yet.    */
DECL|method|getFirstExitException ()
specifier|public
specifier|static
name|ExitException
name|getFirstExitException
parameter_list|()
block|{
return|return
name|firstExitException
return|;
block|}
comment|/**    * @return the first {@code HaltException} thrown, null if none thrown yet.    */
DECL|method|getFirstHaltException ()
specifier|public
specifier|static
name|HaltException
name|getFirstHaltException
parameter_list|()
block|{
return|return
name|firstHaltException
return|;
block|}
comment|/**    * Reset the tracking of process termination. This is for use in unit tests    * where one test in the suite expects an exit but others do not.    */
DECL|method|resetFirstExitException ()
specifier|public
specifier|static
name|void
name|resetFirstExitException
parameter_list|()
block|{
name|firstExitException
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|resetFirstHaltException ()
specifier|public
specifier|static
name|void
name|resetFirstHaltException
parameter_list|()
block|{
name|firstHaltException
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Inner termination: either exit with the exception's exit code,    * or, if system exits are disabled, rethrow the exception.    * @param ee exit exception    */
DECL|method|terminate (ExitException ee)
specifier|public
specifier|static
specifier|synchronized
name|void
name|terminate
parameter_list|(
name|ExitException
name|ee
parameter_list|)
throws|throws
name|ExitException
block|{
name|int
name|status
init|=
name|ee
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
name|ee
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
comment|//exit indicates a problem, log it
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting with status {}: {}"
argument_list|,
name|status
argument_list|,
name|msg
argument_list|,
name|ee
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting with status {}: {}"
argument_list|,
name|status
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemExitDisabled
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Terminate called"
argument_list|,
name|ee
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|terminateCalled
argument_list|()
condition|)
block|{
name|firstExitException
operator|=
name|ee
expr_stmt|;
block|}
throw|throw
name|ee
throw|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|/**    * Forcibly terminates the currently running Java virtual machine.    * The exception argument is rethrown if JVM halting is disabled.    * @param ee the exception containing the status code, message and any stack    * trace.    * @throws HaltException if {@link Runtime#halt(int)} is disabled.    */
DECL|method|halt (HaltException ee)
specifier|public
specifier|static
specifier|synchronized
name|void
name|halt
parameter_list|(
name|HaltException
name|ee
parameter_list|)
throws|throws
name|HaltException
block|{
name|int
name|status
init|=
name|ee
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
name|ee
operator|.
name|getMessage
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
comment|//exit indicates a problem, log it
name|LOG
operator|.
name|debug
argument_list|(
literal|"Halt with status {}: {}"
argument_list|,
name|status
argument_list|,
name|msg
argument_list|,
name|ee
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Halt with status {}: {}"
argument_list|,
name|status
argument_list|,
name|msg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ignore exceptions here, as it may be due to an out of memory situation
block|}
if|if
condition|(
name|systemHaltDisabled
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Halt called"
argument_list|,
name|ee
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|haltCalled
argument_list|()
condition|)
block|{
name|firstHaltException
operator|=
name|ee
expr_stmt|;
block|}
throw|throw
name|ee
throw|;
block|}
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|/**    * Like {@link #terminate(int, String)} but uses the given throwable to    * build the message to display or throw as an    * {@link ExitException}.    *<p>    * @param status exit code to use if the exception is not an ExitException.    * @param t throwable which triggered the termination. If this exception    * is an {@link ExitException} its status overrides that passed in.    * @throws ExitException if {@link System#exit(int)}  is disabled.    */
DECL|method|terminate (int status, Throwable t)
specifier|public
specifier|static
name|void
name|terminate
parameter_list|(
name|int
name|status
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|ExitException
block|{
if|if
condition|(
name|t
operator|instanceof
name|ExitException
condition|)
block|{
name|terminate
argument_list|(
operator|(
name|ExitException
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|terminate
argument_list|(
operator|new
name|ExitException
argument_list|(
name|status
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Forcibly terminates the currently running Java virtual machine.    *    * @param status exit code to use if the exception is not a HaltException.    * @param t throwable which triggered the termination. If this exception    * is a {@link HaltException} its status overrides that passed in.    * @throws HaltException if {@link System#exit(int)}  is disabled.    */
DECL|method|halt (int status, Throwable t)
specifier|public
specifier|static
name|void
name|halt
parameter_list|(
name|int
name|status
parameter_list|,
name|Throwable
name|t
parameter_list|)
throws|throws
name|HaltException
block|{
if|if
condition|(
name|t
operator|instanceof
name|HaltException
condition|)
block|{
name|halt
argument_list|(
operator|(
name|HaltException
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|halt
argument_list|(
operator|new
name|HaltException
argument_list|(
name|status
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Like {@link #terminate(int, Throwable)} without a message.    *    * @param status exit code    * @throws ExitException if {@link System#exit(int)} is disabled.    */
DECL|method|terminate (int status)
specifier|public
specifier|static
name|void
name|terminate
parameter_list|(
name|int
name|status
parameter_list|)
throws|throws
name|ExitException
block|{
name|terminate
argument_list|(
name|status
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Terminate the current process. Note that terminate is the *only* method    * that should be used to terminate the daemon processes.    *    * @param status exit code    * @param msg message used to create the {@code ExitException}    * @throws ExitException if {@link System#exit(int)} is disabled.    */
DECL|method|terminate (int status, String msg)
specifier|public
specifier|static
name|void
name|terminate
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|ExitException
block|{
name|terminate
argument_list|(
operator|new
name|ExitException
argument_list|(
name|status
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Forcibly terminates the currently running Java virtual machine.    * @param status status code    * @throws HaltException if {@link Runtime#halt(int)} is disabled.    */
DECL|method|halt (int status)
specifier|public
specifier|static
name|void
name|halt
parameter_list|(
name|int
name|status
parameter_list|)
throws|throws
name|HaltException
block|{
name|halt
argument_list|(
name|status
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Forcibly terminates the currently running Java virtual machine.    * @param status status code    * @param message message    * @throws HaltException if {@link Runtime#halt(int)} is disabled.    */
DECL|method|halt (int status, String message)
specifier|public
specifier|static
name|void
name|halt
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|HaltException
block|{
name|halt
argument_list|(
operator|new
name|HaltException
argument_list|(
name|status
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Handler for out of memory events -no attempt is made here    * to cleanly shutdown or support halt blocking; a robust    * printing of the event to stderr is all that can be done.    * @param oome out of memory event    */
DECL|method|haltOnOutOfMemory (OutOfMemoryError oome)
specifier|public
specifier|static
name|void
name|haltOnOutOfMemory
parameter_list|(
name|OutOfMemoryError
name|oome
parameter_list|)
block|{
comment|//After catching an OOM java says it is undefined behavior, so don't
comment|//even try to clean up or we can get stuck on shutdown.
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Halting due to Out Of Memory Error..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
comment|//Again we done want to exit because of logging issues.
block|}
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|halt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

