begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_comment
comment|/**  * Helpers to handle server addresses  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Servers
specifier|public
class|class
name|Servers
block|{
comment|/**    * This class is not intended to be instantiated    */
DECL|method|Servers ()
specifier|private
name|Servers
parameter_list|()
block|{}
comment|/**    * Parses a space and/or comma separated sequence of server specifications    * of the form<i>hostname</i> or<i>hostname:port</i>.  If    * the specs string is null, defaults to localhost:defaultPort.    *    * @param specs   server specs (see description)    * @param defaultPort the default port if not specified    * @return a list of InetSocketAddress objects.    */
DECL|method|parse (String specs, int defaultPort)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|parse
parameter_list|(
name|String
name|specs
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|specs
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|defaultPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|specStrings
init|=
name|specs
operator|.
name|split
argument_list|(
literal|"[ ,]+"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|specString
range|:
name|specStrings
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|specString
argument_list|,
name|defaultPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

