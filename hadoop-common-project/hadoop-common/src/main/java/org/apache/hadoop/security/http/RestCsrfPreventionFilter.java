begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * This filter provides protection against cross site request forgery (CSRF)  * attacks for REST APIs. Enabling this filter on an endpoint results in the  * requirement of all client to send a particular (configurable) HTTP header  * with every request. In the absense of this header the filter will reject the  * attempt as a bad request.  */
end_comment

begin_class
DECL|class|RestCsrfPreventionFilter
specifier|public
class|class
name|RestCsrfPreventionFilter
implements|implements
name|Filter
block|{
DECL|field|CUSTOM_HEADER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_HEADER_PARAM
init|=
literal|"custom-header"
decl_stmt|;
DECL|field|CUSTOM_METHODS_TO_IGNORE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_METHODS_TO_IGNORE_PARAM
init|=
literal|"methods-to-ignore"
decl_stmt|;
DECL|field|HEADER_DEFAULT
specifier|static
specifier|final
name|String
name|HEADER_DEFAULT
init|=
literal|"X-XSRF-HEADER"
decl_stmt|;
DECL|field|METHODS_TO_IGNORE_DEFAULT
specifier|static
specifier|final
name|String
name|METHODS_TO_IGNORE_DEFAULT
init|=
literal|"GET,OPTIONS,HEAD,TRACE"
decl_stmt|;
DECL|field|headerName
specifier|private
name|String
name|headerName
init|=
name|HEADER_DEFAULT
decl_stmt|;
DECL|field|methodsToIgnore
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|methodsToIgnore
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|customHeader
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|CUSTOM_HEADER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|customHeader
operator|!=
literal|null
condition|)
block|{
name|headerName
operator|=
name|customHeader
expr_stmt|;
block|}
name|String
name|customMethodsToIgnore
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|CUSTOM_METHODS_TO_IGNORE_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|customMethodsToIgnore
operator|!=
literal|null
condition|)
block|{
name|parseMethodsToIgnore
argument_list|(
name|customMethodsToIgnore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseMethodsToIgnore
argument_list|(
name|METHODS_TO_IGNORE_DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseMethodsToIgnore (String mti)
name|void
name|parseMethodsToIgnore
parameter_list|(
name|String
name|mti
parameter_list|)
block|{
name|String
index|[]
name|methods
init|=
name|mti
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|methodsToIgnore
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|methodsToIgnore
operator|.
name|add
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|methodsToIgnore
operator|.
name|contains
argument_list|(
name|httpRequest
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
name|httpRequest
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|HttpServletResponse
operator|)
name|response
operator|)
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Missing Required Header for Vulnerability Protection"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
block|}
end_class

end_unit

