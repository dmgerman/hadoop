begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A codec& coder utility to help create raw coders conveniently.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CodecUtil
specifier|public
specifier|final
class|class
name|CodecUtil
block|{
DECL|method|CodecUtil ()
specifier|private
name|CodecUtil
parameter_list|()
block|{ }
comment|/**    * Create RS raw encoder according to configuration.    * @param conf configuration possibly with some items to configure the coder    * @param numDataUnits number of data units in a coding group    * @param numParityUnits number of parity units in a coding group    * @return raw encoder    */
DECL|method|createRSRawEncoder ( Configuration conf, int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|RawErasureEncoder
name|createRSRawEncoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|RawErasureCoder
name|rawCoder
init|=
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_RS_RAWCODER_KEY
argument_list|,
literal|true
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawCoder
operator|==
literal|null
condition|)
block|{
name|rawCoder
operator|=
operator|new
name|RSRawEncoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RawErasureEncoder
operator|)
name|rawCoder
return|;
block|}
comment|/**    * Create RS raw decoder according to configuration.    * @param conf configuration possibly with some items to configure the coder    * @param numDataUnits number of data units in a coding group    * @param numParityUnits number of parity units in a coding group    * @return raw decoder    */
DECL|method|createRSRawDecoder ( Configuration conf, int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|RawErasureDecoder
name|createRSRawDecoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|RawErasureCoder
name|rawCoder
init|=
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_RS_RAWCODER_KEY
argument_list|,
literal|false
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawCoder
operator|==
literal|null
condition|)
block|{
name|rawCoder
operator|=
operator|new
name|RSRawDecoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RawErasureDecoder
operator|)
name|rawCoder
return|;
block|}
comment|/**    * Create XOR raw encoder according to configuration.    * @param conf configuration possibly with some items to configure the coder    * @param numDataUnits number of data units in a coding group    * @param numParityUnits number of parity units in a coding group    * @return raw encoder    */
DECL|method|createXORRawEncoder ( Configuration conf, int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|RawErasureEncoder
name|createXORRawEncoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|RawErasureCoder
name|rawCoder
init|=
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_XOR_RAWCODER_KEY
argument_list|,
literal|true
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawCoder
operator|==
literal|null
condition|)
block|{
name|rawCoder
operator|=
operator|new
name|XORRawEncoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RawErasureEncoder
operator|)
name|rawCoder
return|;
block|}
comment|/**    * Create XOR raw decoder according to configuration.    * @param conf configuration possibly with some items to configure the coder    * @param numDataUnits number of data units in a coding group    * @param numParityUnits number of parity units in a coding group    * @return raw decoder    */
DECL|method|createXORRawDecoder ( Configuration conf, int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|RawErasureDecoder
name|createXORRawDecoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|RawErasureCoder
name|rawCoder
init|=
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_XOR_RAWCODER_KEY
argument_list|,
literal|false
argument_list|,
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
decl_stmt|;
if|if
condition|(
name|rawCoder
operator|==
literal|null
condition|)
block|{
name|rawCoder
operator|=
operator|new
name|XORRawDecoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RawErasureDecoder
operator|)
name|rawCoder
return|;
block|}
comment|/**    * Create raw coder using specified conf and raw coder factory key.    * @param conf configuration possibly with some items to configure the coder    * @param rawCoderFactoryKey configuration key to find the raw coder factory    * @param isEncoder is encoder or not we're going to create    * @param numDataUnits number of data units in a coding group    * @param numParityUnits number of parity units in a coding group    * @return raw coder    */
DECL|method|createRawCoder (Configuration conf, String rawCoderFactoryKey, boolean isEncoder, int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|RawErasureCoder
name|createRawCoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|rawCoderFactoryKey
parameter_list|,
name|boolean
name|isEncoder
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|RawErasureCoderFactory
argument_list|>
name|factClass
init|=
literal|null
decl_stmt|;
name|factClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|rawCoderFactoryKey
argument_list|,
name|factClass
argument_list|,
name|RawErasureCoderFactory
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|factClass
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RawErasureCoderFactory
name|fact
decl_stmt|;
try|try
block|{
name|fact
operator|=
name|factClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create raw coder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create raw coder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|isEncoder
condition|?
name|fact
operator|.
name|createEncoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
else|:
name|fact
operator|.
name|createDecoder
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
return|;
block|}
block|}
end_class

end_unit

