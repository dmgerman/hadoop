begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A class optimizes reading from FSInputStream by bufferring  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|BufferedFSInputStream
specifier|public
class|class
name|BufferedFSInputStream
extends|extends
name|BufferedInputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
implements|,
name|HasFileDescriptor
block|{
comment|/**    * Creates a<code>BufferedFSInputStream</code>    * with the specified buffer size,    * and saves its  argument, the input stream    *<code>in</code>, for later use.  An internal    * buffer array of length<code>size</code>    * is created and stored in<code>buf</code>.    *    * @param   in     the underlying input stream.    * @param   size   the buffer size.    * @exception IllegalArgumentException if size<= 0.    */
DECL|method|BufferedFSInputStream (FSInputStream in, int size)
specifier|public
name|BufferedFSInputStream
parameter_list|(
name|FSInputStream
name|in
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
operator|-
operator|(
name|count
operator|-
name|pos
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|seek
argument_list|(
name|getPos
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|pos
operator|!=
name|this
operator|.
name|count
condition|)
block|{
comment|// optimize: check if the pos is in the buffer
comment|// This optimization only works if pos != count -- if they are
comment|// equal, it's possible that the previous reads were just
comment|// longer than the total buffer size, and hence skipped the buffer.
name|long
name|end
init|=
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|end
operator|-
name|count
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
name|start
operator|&&
name|pos
operator|<
name|end
condition|)
block|{
name|this
operator|.
name|pos
operator|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|-
name|start
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// invalidate buffer
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
return|return
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|seekToNewSource
argument_list|(
name|targetPos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|FSInputStream
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileDescriptor ()
specifier|public
name|FileDescriptor
name|getFileDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|instanceof
name|HasFileDescriptor
condition|)
block|{
return|return
operator|(
operator|(
name|HasFileDescriptor
operator|)
name|in
operator|)
operator|.
name|getFileDescriptor
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

