begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProcessingDetails
operator|.
name|Timing
import|;
end_import

begin_comment
comment|/**  * A {@link CostProvider} that calculates the cost for an operation  * as a weighted sum of its processing time values (see  * {@link ProcessingDetails}). This can be used by specifying the  * {@link org.apache.hadoop.fs.CommonConfigurationKeys#IPC_COST_PROVIDER_KEY}  * configuration key.  *  *<p/>This allows for configuration of how heavily each of the operations  * within {@link ProcessingDetails} is weighted. By default,  * {@link ProcessingDetails.Timing#LOCKFREE},  * {@link ProcessingDetails.Timing#RESPONSE}, and  * {@link ProcessingDetails.Timing#HANDLER} times have a weight of  * {@value #DEFAULT_LOCKFREE_WEIGHT},  * {@link ProcessingDetails.Timing#LOCKSHARED} has a weight of  * {@value #DEFAULT_LOCKSHARED_WEIGHT},  * {@link ProcessingDetails.Timing#LOCKEXCLUSIVE} has a weight of  * {@value #DEFAULT_LOCKEXCLUSIVE_WEIGHT}, and others are ignored.  * These values can all be configured using the {@link #WEIGHT_CONFIG_PREFIX}  * key, prefixed with the IPC namespace, and suffixed with the name of the  * timing measurement from {@link ProcessingDetails} (all lowercase).  * For example, to set the lock exclusive weight to be 1000, set:  *<pre>  *   ipc.8020.cost-provider.impl=org.apache.hadoop.ipc.WeightedTimeCostProvider  *   ipc.8020.weighted-cost.lockexclusive=1000  *</pre>  */
end_comment

begin_class
DECL|class|WeightedTimeCostProvider
specifier|public
class|class
name|WeightedTimeCostProvider
implements|implements
name|CostProvider
block|{
comment|/**    * The prefix used in configuration values specifying the weight to use when    * determining the cost of an operation. See the class Javadoc for more info.    */
DECL|field|WEIGHT_CONFIG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|WEIGHT_CONFIG_PREFIX
init|=
literal|".weighted-cost."
decl_stmt|;
DECL|field|DEFAULT_LOCKFREE_WEIGHT
specifier|static
specifier|final
name|int
name|DEFAULT_LOCKFREE_WEIGHT
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_LOCKSHARED_WEIGHT
specifier|static
specifier|final
name|int
name|DEFAULT_LOCKSHARED_WEIGHT
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_LOCKEXCLUSIVE_WEIGHT
specifier|static
specifier|final
name|int
name|DEFAULT_LOCKEXCLUSIVE_WEIGHT
init|=
literal|100
decl_stmt|;
DECL|field|weights
specifier|private
name|long
index|[]
name|weights
decl_stmt|;
annotation|@
name|Override
DECL|method|init (String namespace, Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|namespace
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|weights
operator|=
operator|new
name|long
index|[
name|Timing
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|Timing
name|timing
range|:
name|ProcessingDetails
operator|.
name|Timing
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|int
name|defaultValue
decl_stmt|;
switch|switch
condition|(
name|timing
condition|)
block|{
case|case
name|LOCKFREE
case|:
case|case
name|RESPONSE
case|:
case|case
name|HANDLER
case|:
name|defaultValue
operator|=
name|DEFAULT_LOCKFREE_WEIGHT
expr_stmt|;
break|break;
case|case
name|LOCKSHARED
case|:
name|defaultValue
operator|=
name|DEFAULT_LOCKSHARED_WEIGHT
expr_stmt|;
break|break;
case|case
name|LOCKEXCLUSIVE
case|:
name|defaultValue
operator|=
name|DEFAULT_LOCKEXCLUSIVE_WEIGHT
expr_stmt|;
break|break;
default|default:
comment|// by default don't bill for queueing or lock wait time
name|defaultValue
operator|=
literal|0
expr_stmt|;
block|}
name|String
name|key
init|=
name|namespace
operator|+
name|WEIGHT_CONFIG_PREFIX
operator|+
name|timing
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|weights
index|[
name|timing
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calculates a weighted sum of the times stored on the provided processing    * details to be used as the cost in {@link DecayRpcScheduler}.    *    * @param details Processing details    * @return The weighted sum of the times. The returned unit is the same    *         as the default unit used by the provided processing details.    */
annotation|@
name|Override
DECL|method|getCost (ProcessingDetails details)
specifier|public
name|long
name|getCost
parameter_list|(
name|ProcessingDetails
name|details
parameter_list|)
block|{
assert|assert
name|weights
operator|!=
literal|null
operator|:
literal|"Cost provider must be initialized before use"
assert|;
name|long
name|cost
init|=
literal|0
decl_stmt|;
comment|// weights was initialized to the same length as Timing.values()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Timing
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cost
operator|+=
name|details
operator|.
name|get
argument_list|(
name|Timing
operator|.
name|values
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|*
name|weights
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
block|}
end_class

end_unit

