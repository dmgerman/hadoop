begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A filter for POSIX glob pattern with brace expansions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|GlobFilter
specifier|public
class|class
name|GlobFilter
implements|implements
name|PathFilter
block|{
DECL|field|DEFAULT_FILTER
specifier|private
specifier|final
specifier|static
name|PathFilter
name|DEFAULT_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
DECL|field|userFilter
specifier|private
name|PathFilter
name|userFilter
init|=
name|DEFAULT_FILTER
decl_stmt|;
DECL|field|pattern
specifier|private
name|GlobPattern
name|pattern
decl_stmt|;
comment|/**    * Creates a glob filter with the specified file pattern.    *    * @param filePattern the file pattern.    * @throws IOException thrown if the file pattern is incorrect.    */
DECL|method|GlobFilter (String filePattern)
specifier|public
name|GlobFilter
parameter_list|(
name|String
name|filePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|filePattern
argument_list|,
name|DEFAULT_FILTER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a glob filter with the specified file pattern and an user filter.    *    * @param filePattern the file pattern.    * @param filter user filter in addition to the glob pattern.    * @throws IOException thrown if the file pattern is incorrect.    */
DECL|method|GlobFilter (String filePattern, PathFilter filter)
specifier|public
name|GlobFilter
parameter_list|(
name|String
name|filePattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|filePattern
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|init (String filePattern, PathFilter filter)
name|void
name|init
parameter_list|(
name|String
name|filePattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|userFilter
operator|=
name|filter
expr_stmt|;
name|pattern
operator|=
operator|new
name|GlobPattern
argument_list|(
name|filePattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
comment|// Existing code expects IOException startWith("Illegal file pattern")
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal file pattern: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|hasPattern ()
name|boolean
name|hasPattern
parameter_list|()
block|{
return|return
name|pattern
operator|.
name|hasWildcard
argument_list|()
return|;
block|}
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matches
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|userFilter
operator|.
name|accept
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

