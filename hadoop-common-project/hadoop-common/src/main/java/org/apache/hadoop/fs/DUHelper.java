begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_class
DECL|class|DUHelper
specifier|public
class|class
name|DUHelper
block|{
DECL|field|folderCount
specifier|private
name|int
name|folderCount
init|=
literal|0
decl_stmt|;
DECL|field|fileCount
specifier|private
name|int
name|fileCount
init|=
literal|0
decl_stmt|;
DECL|field|usage
specifier|private
name|double
name|usage
init|=
literal|0
decl_stmt|;
DECL|field|folderSize
specifier|private
name|long
name|folderSize
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DUHelper ()
specifier|private
name|DUHelper
parameter_list|()
block|{    }
DECL|method|getFolderUsage (String folder)
specifier|public
specifier|static
name|long
name|getFolderUsage
parameter_list|(
name|String
name|folder
parameter_list|)
block|{
return|return
operator|new
name|DUHelper
argument_list|()
operator|.
name|calculateFolderSize
argument_list|(
name|folder
argument_list|)
return|;
block|}
DECL|method|calculateFolderSize (String folder)
specifier|private
name|long
name|calculateFolderSize
parameter_list|(
name|String
name|folder
parameter_list|)
block|{
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"folder"
argument_list|)
throw|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
return|return
name|folderSize
operator|=
name|getFileSize
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|check (String folder)
specifier|public
name|String
name|check
parameter_list|(
name|String
name|folder
parameter_list|)
block|{
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"folder"
argument_list|)
throw|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|folderSize
operator|=
name|getFileSize
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|usage
operator|=
literal|1.0
operator|*
operator|(
name|f
operator|.
name|getTotalSpace
argument_list|()
operator|-
name|f
operator|.
name|getFreeSpace
argument_list|()
operator|)
operator|/
name|f
operator|.
name|getTotalSpace
argument_list|()
expr_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"used %d files %d disk in use %f"
argument_list|,
name|folderSize
argument_list|,
name|fileCount
argument_list|,
name|usage
argument_list|)
return|;
block|}
DECL|method|getFileCount ()
specifier|public
name|long
name|getFileCount
parameter_list|()
block|{
return|return
name|fileCount
return|;
block|}
DECL|method|getUsage ()
specifier|public
name|double
name|getUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
DECL|method|getFileSize (File folder)
specifier|private
name|long
name|getFileSize
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
name|folderCount
operator|++
expr_stmt|;
comment|//Counting the total folders
name|long
name|foldersize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|folder
operator|.
name|isFile
argument_list|()
condition|)
return|return
name|folder
operator|.
name|length
argument_list|()
return|;
name|File
index|[]
name|filelist
init|=
name|folder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|filelist
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filelist
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filelist
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|foldersize
operator|+=
name|getFileSize
argument_list|(
name|filelist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileCount
operator|++
expr_stmt|;
comment|//Counting the total files
name|foldersize
operator|+=
name|filelist
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|foldersize
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Windows: "
operator|+
name|DUHelper
operator|.
name|getFolderUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Other: "
operator|+
name|DUHelper
operator|.
name|getFolderUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

