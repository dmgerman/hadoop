begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A factory to create a list of KeyProvider based on the path given in a  * Configuration. It uses a service loader interface to find the available  * KeyProviders and create them based on the list of URIs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|KeyProviderFactory
specifier|public
specifier|abstract
class|class
name|KeyProviderFactory
block|{
DECL|field|KEY_PROVIDER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|KEY_PROVIDER_PATH
init|=
literal|"hadoop.security.key.provider.path"
decl_stmt|;
DECL|method|createProvider (URI providerName, Configuration conf )
specifier|public
specifier|abstract
name|KeyProvider
name|createProvider
parameter_list|(
name|URI
name|providerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|field|serviceLoader
specifier|private
specifier|static
specifier|final
name|ServiceLoader
argument_list|<
name|KeyProviderFactory
argument_list|>
name|serviceLoader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|KeyProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Iterate through the serviceLoader to avoid lazy loading.
comment|// Lazy loading would require synchronization in concurrent use cases.
static|static
block|{
name|Iterator
argument_list|<
name|KeyProviderFactory
argument_list|>
name|iterServices
init|=
name|serviceLoader
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterServices
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterServices
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getProviders (Configuration conf )
specifier|public
specifier|static
name|List
argument_list|<
name|KeyProvider
argument_list|>
name|getProviders
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyProvider
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|conf
operator|.
name|getStringCollection
argument_list|(
name|KEY_PROVIDER_PATH
argument_list|)
control|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|KeyProvider
name|kp
init|=
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|kp
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|kp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No KeyProviderFactory for "
operator|+
name|uri
operator|+
literal|" in "
operator|+
name|KEY_PROVIDER_PATH
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|error
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad configuration of "
operator|+
name|KEY_PROVIDER_PATH
operator|+
literal|" at "
operator|+
name|path
argument_list|,
name|error
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Create a KeyProvider based on a provided URI.    *    * @param uri key provider URI    * @param conf configuration to initialize the key provider    * @return the key provider for the specified URI, or<code>NULL</code> if    *         a provider for the specified URI scheme could not be found.    * @throws IOException thrown if the provider failed to initialize.    */
DECL|method|get (URI uri, Configuration conf)
specifier|public
specifier|static
name|KeyProvider
name|get
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|kp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KeyProviderFactory
name|factory
range|:
name|serviceLoader
control|)
block|{
name|kp
operator|=
name|factory
operator|.
name|createProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|kp
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|kp
return|;
block|}
block|}
end_class

end_unit

