begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * Helper for making {@link HAServiceProtocol} RPC calls. This helper  * unwraps the {@link RemoteException} to specific exceptions.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|HAServiceProtocolHelper
specifier|public
class|class
name|HAServiceProtocolHelper
block|{
DECL|method|monitorHealth (HAServiceProtocol svc)
specifier|public
specifier|static
name|void
name|monitorHealth
parameter_list|(
name|HAServiceProtocol
name|svc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|svc
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|unwrapRemoteException
argument_list|(
name|HealthCheckFailedException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|transitionToActive (HAServiceProtocol svc)
specifier|public
specifier|static
name|void
name|transitionToActive
parameter_list|(
name|HAServiceProtocol
name|svc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|svc
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|unwrapRemoteException
argument_list|(
name|ServiceFailedException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|transitionToStandby (HAServiceProtocol svc)
specifier|public
specifier|static
name|void
name|transitionToStandby
parameter_list|(
name|HAServiceProtocol
name|svc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|svc
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|unwrapRemoteException
argument_list|(
name|ServiceFailedException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

