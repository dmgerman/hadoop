begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Defines an Access Control List, which is a set of rules for enforcement of  * permissions on a file or directory.  An Acl contains a set of multiple  * {@link AclEntry} instances.  The ACL entries define the permissions enforced  * for different classes of users: owner, named user, owning group, named group  * and others.  The Acl also contains additional flags associated with the file,  * such as the sticky bit.  Acl instances are immutable.  Use a {@link Builder}  * to create a new instance.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Acl
specifier|public
class|class
name|Acl
block|{
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|stickyBit
specifier|private
specifier|final
name|boolean
name|stickyBit
decl_stmt|;
comment|/**    * Returns the sticky bit.    *    * @return boolean sticky bit    */
DECL|method|getStickyBit ()
specifier|public
name|boolean
name|getStickyBit
parameter_list|()
block|{
return|return
name|stickyBit
return|;
block|}
comment|/**    * Returns the list of all ACL entries, ordered by their natural ordering.    * The list is unmodifiable.    *    * @return List<AclEntry> unmodifiable ordered list of all ACL entries    */
DECL|method|getEntries ()
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Acl
name|other
init|=
operator|(
name|Acl
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|entries
argument_list|,
name|other
operator|.
name|entries
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|stickyBit
argument_list|,
name|other
operator|.
name|stickyBit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|entries
argument_list|,
name|stickyBit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"entries: "
argument_list|)
operator|.
name|append
argument_list|(
name|entries
argument_list|)
operator|.
name|append
argument_list|(
literal|", stickyBit: "
argument_list|)
operator|.
name|append
argument_list|(
name|stickyBit
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Builder for creating new Acl instances.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|entries
specifier|private
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|stickyBit
specifier|private
name|boolean
name|stickyBit
init|=
literal|false
decl_stmt|;
comment|/**      * Adds an ACL entry.      *      * @param entry AclEntry entry to add      * @return Builder this builder, for call chaining      */
DECL|method|addEntry (AclEntry entry)
specifier|public
name|Builder
name|addEntry
parameter_list|(
name|AclEntry
name|entry
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets sticky bit.  If this method is not called, then the builder assumes      * false.      *      * @param stickyBit boolean sticky bit      * @return Builder this builder, for call chaining      */
DECL|method|setStickyBit (boolean stickyBit)
specifier|public
name|Builder
name|setStickyBit
parameter_list|(
name|boolean
name|stickyBit
parameter_list|)
block|{
name|this
operator|.
name|stickyBit
operator|=
name|stickyBit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds a new Acl populated with the set properties.      *      * @return Acl new Acl      */
DECL|method|build ()
specifier|public
name|Acl
name|build
parameter_list|()
block|{
return|return
operator|new
name|Acl
argument_list|(
name|entries
argument_list|,
name|stickyBit
argument_list|)
return|;
block|}
block|}
comment|/**    * Private constructor.    *    * @param entries List<AclEntry> list of all ACL entries    * @param boolean sticky bit    */
DECL|method|Acl (List<AclEntry> entries, boolean stickyBit)
specifier|private
name|Acl
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entries
parameter_list|,
name|boolean
name|stickyBit
parameter_list|)
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|entriesCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entriesCopy
argument_list|)
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|entriesCopy
argument_list|)
expr_stmt|;
name|this
operator|.
name|stickyBit
operator|=
name|stickyBit
expr_stmt|;
block|}
block|}
end_class

end_unit

