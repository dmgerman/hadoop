begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A byte array backed output stream with a limit. The limit should be smaller  * than the buffer capacity. The object can be reused through<code>reset</code>  * API and choose different limits in each round.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|BoundedByteArrayOutputStream
specifier|public
class|class
name|BoundedByteArrayOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
decl_stmt|;
DECL|field|limit
specifier|private
name|int
name|limit
decl_stmt|;
DECL|field|currentPointer
specifier|private
name|int
name|currentPointer
decl_stmt|;
comment|/**    * Create a BoundedByteArrayOutputStream with the specified    * capacity    * @param capacity The capacity of the underlying byte array    */
DECL|method|BoundedByteArrayOutputStream (int capacity)
specifier|public
name|BoundedByteArrayOutputStream
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
name|capacity
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a BoundedByteArrayOutputStream with the specified    * capacity and limit.    * @param capacity The capacity of the underlying byte array    * @param limit The maximum limit upto which data can be written    */
DECL|method|BoundedByteArrayOutputStream (int capacity, int limit)
specifier|public
name|BoundedByteArrayOutputStream
parameter_list|(
name|int
name|capacity
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|byte
index|[
name|capacity
index|]
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
DECL|method|BoundedByteArrayOutputStream (byte[] buf, int offset, int limit)
specifier|protected
name|BoundedByteArrayOutputStream
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|resetBuffer
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
DECL|method|resetBuffer (byte[] buf, int offset, int limit)
specifier|protected
name|void
name|resetBuffer
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|int
name|capacity
init|=
name|buf
operator|.
name|length
operator|-
name|offset
decl_stmt|;
if|if
condition|(
operator|(
name|capacity
operator|<
name|limit
operator|)
operator|||
operator|(
name|capacity
operator||
name|limit
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid capacity/limit"
argument_list|)
throw|;
block|}
name|this
operator|.
name|buffer
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|currentPointer
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|offset
operator|+
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPointer
operator|>=
name|limit
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Reaching the limit of the buffer."
argument_list|)
throw|;
block|}
name|buffer
index|[
name|currentPointer
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|currentPointer
operator|+
name|len
operator|>
name|limit
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Reach the limit of the buffer"
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|currentPointer
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|currentPointer
operator|+=
name|len
expr_stmt|;
block|}
comment|/**    * Reset the limit     * @param newlim New Limit    */
DECL|method|reset (int newlim)
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|newlim
parameter_list|)
block|{
if|if
condition|(
name|newlim
operator|>
operator|(
name|buffer
operator|.
name|length
operator|-
name|startOffset
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Limit exceeds buffer size"
argument_list|)
throw|;
block|}
name|this
operator|.
name|limit
operator|=
name|newlim
expr_stmt|;
name|this
operator|.
name|currentPointer
operator|=
name|startOffset
expr_stmt|;
block|}
comment|/** Reset the buffer */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|limit
operator|=
name|buffer
operator|.
name|length
operator|-
name|startOffset
expr_stmt|;
name|this
operator|.
name|currentPointer
operator|=
name|startOffset
expr_stmt|;
block|}
comment|/** Return the current limit */
DECL|method|getLimit ()
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
comment|/** Returns the underlying buffer.    *  Data is only valid to {@link #size()}.    */
DECL|method|getBuffer ()
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
comment|/** Returns the length of the valid data     * currently in the buffer.    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|currentPointer
operator|-
name|startOffset
return|;
block|}
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|limit
operator|-
name|currentPointer
return|;
block|}
block|}
end_class

end_unit

