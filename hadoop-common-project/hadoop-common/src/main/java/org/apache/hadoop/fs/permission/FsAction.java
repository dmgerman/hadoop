begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * File system actions, e.g. read, write, etc.  */
end_comment

begin_enum
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|enum|FsAction
specifier|public
enum|enum
name|FsAction
block|{
comment|// POSIX style
DECL|enumConstant|NONE
name|NONE
argument_list|(
literal|"---"
argument_list|)
block|,
DECL|enumConstant|EXECUTE
name|EXECUTE
argument_list|(
literal|"--x"
argument_list|)
block|,
DECL|enumConstant|WRITE
name|WRITE
argument_list|(
literal|"-w-"
argument_list|)
block|,
DECL|enumConstant|WRITE_EXECUTE
name|WRITE_EXECUTE
argument_list|(
literal|"-wx"
argument_list|)
block|,
DECL|enumConstant|READ
name|READ
argument_list|(
literal|"r--"
argument_list|)
block|,
DECL|enumConstant|READ_EXECUTE
name|READ_EXECUTE
argument_list|(
literal|"r-x"
argument_list|)
block|,
DECL|enumConstant|READ_WRITE
name|READ_WRITE
argument_list|(
literal|"rw-"
argument_list|)
block|,
DECL|enumConstant|ALL
name|ALL
argument_list|(
literal|"rwx"
argument_list|)
block|;
comment|/** Retain reference to value array. */
DECL|field|vals
specifier|private
specifier|final
specifier|static
name|FsAction
index|[]
name|vals
init|=
name|values
argument_list|()
decl_stmt|;
comment|/** Symbolic representation */
DECL|field|SYMBOL
specifier|public
specifier|final
name|String
name|SYMBOL
decl_stmt|;
DECL|method|FsAction (String s)
specifier|private
name|FsAction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|SYMBOL
operator|=
name|s
expr_stmt|;
block|}
comment|/**    * Return true if this action implies that action.    * @param that    */
DECL|method|implies (FsAction that)
specifier|public
name|boolean
name|implies
parameter_list|(
name|FsAction
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|ordinal
argument_list|()
operator|&
name|that
operator|.
name|ordinal
argument_list|()
operator|)
operator|==
name|that
operator|.
name|ordinal
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** AND operation. */
DECL|method|and (FsAction that)
specifier|public
name|FsAction
name|and
parameter_list|(
name|FsAction
name|that
parameter_list|)
block|{
return|return
name|vals
index|[
name|ordinal
argument_list|()
operator|&
name|that
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
comment|/** OR operation. */
DECL|method|or (FsAction that)
specifier|public
name|FsAction
name|or
parameter_list|(
name|FsAction
name|that
parameter_list|)
block|{
return|return
name|vals
index|[
name|ordinal
argument_list|()
operator||
name|that
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
comment|/** NOT operation. */
DECL|method|not ()
specifier|public
name|FsAction
name|not
parameter_list|()
block|{
return|return
name|vals
index|[
literal|7
operator|-
name|ordinal
argument_list|()
index|]
return|;
block|}
comment|/**    * Get the FsAction enum for String representation of permissions    *     * @param permission    *          3-character string representation of permission. ex: rwx    * @return Returns FsAction enum if the corresponding FsAction exists for permission.    *         Otherwise returns null    */
DECL|method|getFsAction (String permission)
specifier|public
specifier|static
name|FsAction
name|getFsAction
parameter_list|(
name|String
name|permission
parameter_list|)
block|{
for|for
control|(
name|FsAction
name|fsAction
range|:
name|vals
control|)
block|{
if|if
condition|(
name|fsAction
operator|.
name|SYMBOL
operator|.
name|equals
argument_list|(
name|permission
argument_list|)
condition|)
block|{
return|return
name|fsAction
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_enum

end_unit

