begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.bzip2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A {@link Compressor} based on the popular   * bzip2 compression algorithm.  * http://www.bzip2.org/  *   */
end_comment

begin_class
DECL|class|Bzip2Compressor
specifier|public
class|class
name|Bzip2Compressor
implements|implements
name|Compressor
block|{
DECL|field|DEFAULT_DIRECT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_DIRECT_BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|// The default values for the block size and work factor are the same
comment|// those in Julian Seward's original bzip2 implementation.
DECL|field|DEFAULT_BLOCK_SIZE
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|9
decl_stmt|;
DECL|field|DEFAULT_WORK_FACTOR
specifier|static
specifier|final
name|int
name|DEFAULT_WORK_FACTOR
init|=
literal|30
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Bzip2Compressor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// HACK - Use this as a global lock in the JNI layer.
DECL|field|clazz
specifier|private
specifier|static
name|Class
argument_list|<
name|Bzip2Compressor
argument_list|>
name|clazz
init|=
name|Bzip2Compressor
operator|.
name|class
decl_stmt|;
DECL|field|stream
specifier|private
name|long
name|stream
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|workFactor
specifier|private
name|int
name|workFactor
decl_stmt|;
DECL|field|directBufferSize
specifier|private
name|int
name|directBufferSize
decl_stmt|;
DECL|field|userBuf
specifier|private
name|byte
index|[]
name|userBuf
init|=
literal|null
decl_stmt|;
DECL|field|userBufOff
DECL|field|userBufLen
specifier|private
name|int
name|userBufOff
init|=
literal|0
decl_stmt|,
name|userBufLen
init|=
literal|0
decl_stmt|;
DECL|field|uncompressedDirectBuf
specifier|private
name|Buffer
name|uncompressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|uncompressedDirectBufOff
DECL|field|uncompressedDirectBufLen
specifier|private
name|int
name|uncompressedDirectBufOff
init|=
literal|0
decl_stmt|,
name|uncompressedDirectBufLen
init|=
literal|0
decl_stmt|;
DECL|field|keepUncompressedBuf
specifier|private
name|boolean
name|keepUncompressedBuf
init|=
literal|false
decl_stmt|;
DECL|field|compressedDirectBuf
specifier|private
name|Buffer
name|compressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|finish
DECL|field|finished
specifier|private
name|boolean
name|finish
decl_stmt|,
name|finished
decl_stmt|;
comment|/**    * Creates a new compressor with a default values for the    * compression block size and work factor.  Compressed data will be    * generated in bzip2 format.    */
DECL|method|Bzip2Compressor ()
specifier|public
name|Bzip2Compressor
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_BLOCK_SIZE
argument_list|,
name|DEFAULT_WORK_FACTOR
argument_list|,
name|DEFAULT_DIRECT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new compressor, taking settings from the configuration.    */
DECL|method|Bzip2Compressor (Configuration conf)
specifier|public
name|Bzip2Compressor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|Bzip2Factory
operator|.
name|getBlockSize
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Bzip2Factory
operator|.
name|getWorkFactor
argument_list|(
name|conf
argument_list|)
argument_list|,
name|DEFAULT_DIRECT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new compressor using the specified block size.    * Compressed data will be generated in bzip2 format.    *     * @param blockSize The block size to be used for compression.  This is    *        an integer from 1 through 9, which is multiplied by 100,000 to     *        obtain the actual block size in bytes.    * @param workFactor This parameter is a threshold that determines when a     *        fallback algorithm is used for pathological data.  It ranges from    *        0 to 250.    * @param directBufferSize Size of the direct buffer to be used.    */
DECL|method|Bzip2Compressor (int blockSize, int workFactor, int directBufferSize)
specifier|public
name|Bzip2Compressor
parameter_list|(
name|int
name|blockSize
parameter_list|,
name|int
name|workFactor
parameter_list|,
name|int
name|directBufferSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|workFactor
operator|=
name|workFactor
expr_stmt|;
name|this
operator|.
name|directBufferSize
operator|=
name|directBufferSize
expr_stmt|;
name|stream
operator|=
name|init
argument_list|(
name|blockSize
argument_list|,
name|workFactor
argument_list|)
expr_stmt|;
name|uncompressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepare the compressor to be used in a new stream with settings defined in    * the given Configuration. It will reset the compressor's block size and    * and work factor.    *     * @param conf Configuration storing new settings    */
annotation|@
name|Override
DECL|method|reinit (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|reinit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|end
argument_list|(
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|init
argument_list|(
name|blockSize
argument_list|,
name|workFactor
argument_list|)
expr_stmt|;
return|return;
block|}
name|blockSize
operator|=
name|Bzip2Factory
operator|.
name|getBlockSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|workFactor
operator|=
name|Bzip2Factory
operator|.
name|getWorkFactor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stream
operator|=
name|init
argument_list|(
name|blockSize
argument_list|,
name|workFactor
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reinit compressor with new compression configuration"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setInput (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|setInput
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|this
operator|.
name|userBuf
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|userBufOff
operator|=
name|off
expr_stmt|;
name|this
operator|.
name|userBufLen
operator|=
name|len
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|setInputFromSavedData
argument_list|()
expr_stmt|;
comment|// Reinitialize bzip2's output direct buffer.
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
comment|// Copy enough data from userBuf to uncompressedDirectBuf.
DECL|method|setInputFromSavedData ()
specifier|synchronized
name|void
name|setInputFromSavedData
parameter_list|()
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|userBufLen
argument_list|,
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|uncompressedDirectBuf
operator|)
operator|.
name|put
argument_list|(
name|userBuf
argument_list|,
name|userBufOff
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|userBufLen
operator|-=
name|len
expr_stmt|;
name|userBufOff
operator|+=
name|len
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
name|uncompressedDirectBuf
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDictionary (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|setDictionary
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|needsInput ()
specifier|public
specifier|synchronized
name|boolean
name|needsInput
parameter_list|()
block|{
comment|// Compressed data still available?
if|if
condition|(
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Uncompressed data available in either the direct buffer or user buffer?
if|if
condition|(
name|keepUncompressedBuf
operator|&&
name|uncompressedDirectBufLen
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Check if we have consumed all data in the user buffer.
if|if
condition|(
name|userBufLen
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Copy enough data from userBuf to uncompressedDirectBuf.
name|setInputFromSavedData
argument_list|()
expr_stmt|;
return|return
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|finish ()
specifier|public
specifier|synchronized
name|void
name|finish
parameter_list|()
block|{
name|finish
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finished ()
specifier|public
specifier|synchronized
name|boolean
name|finished
parameter_list|()
block|{
comment|// Check if bzip2 says it has finished and
comment|// all compressed data has been consumed.
return|return
operator|(
name|finished
operator|&&
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compress (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|compress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
comment|// Check if there is compressed data.
name|int
name|n
init|=
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|compressedDirectBuf
operator|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|// Re-initialize bzip2's output direct buffer.
name|compressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
comment|// Compress the data.
name|n
operator|=
name|deflateBytesDirect
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// Check if bzip2 has consumed the entire input buffer.
comment|// Set keepUncompressedBuf properly.
if|if
condition|(
name|uncompressedDirectBufLen
operator|<=
literal|0
condition|)
block|{
comment|// bzip2 consumed all input
name|keepUncompressedBuf
operator|=
literal|false
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|keepUncompressedBuf
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get at most 'len' bytes.
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|compressedDirectBuf
operator|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns the total number of compressed bytes output so far.    *    * @return the total (non-negative) number of compressed bytes output so far    */
annotation|@
name|Override
DECL|method|getBytesWritten ()
specifier|public
specifier|synchronized
name|long
name|getBytesWritten
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|getBytesWritten
argument_list|(
name|stream
argument_list|)
return|;
block|}
comment|/**    * Returns the total number of uncompressed bytes input so far.</p>    *    * @return the total (non-negative) number of uncompressed bytes input so far    */
annotation|@
name|Override
DECL|method|getBytesRead ()
specifier|public
specifier|synchronized
name|long
name|getBytesRead
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|getBytesRead
argument_list|(
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|end
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
name|init
argument_list|(
name|blockSize
argument_list|,
name|workFactor
argument_list|)
expr_stmt|;
name|finish
operator|=
literal|false
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
name|uncompressedDirectBufLen
operator|=
literal|0
expr_stmt|;
name|keepUncompressedBuf
operator|=
literal|false
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|userBufOff
operator|=
name|userBufLen
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end ()
specifier|public
specifier|synchronized
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|0
condition|)
block|{
name|end
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|initSymbols (String libname)
specifier|static
name|void
name|initSymbols
parameter_list|(
name|String
name|libname
parameter_list|)
block|{
name|initIDs
argument_list|(
name|libname
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStream ()
specifier|private
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|0
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
DECL|method|initIDs (String libname)
specifier|private
specifier|native
specifier|static
name|void
name|initIDs
parameter_list|(
name|String
name|libname
parameter_list|)
function_decl|;
DECL|method|init (int blockSize, int workFactor)
specifier|private
specifier|native
specifier|static
name|long
name|init
parameter_list|(
name|int
name|blockSize
parameter_list|,
name|int
name|workFactor
parameter_list|)
function_decl|;
DECL|method|deflateBytesDirect ()
specifier|private
specifier|native
name|int
name|deflateBytesDirect
parameter_list|()
function_decl|;
DECL|method|getBytesRead (long strm)
specifier|private
specifier|native
specifier|static
name|long
name|getBytesRead
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|getBytesWritten (long strm)
specifier|private
specifier|native
specifier|static
name|long
name|getBytesWritten
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|end (long strm)
specifier|private
specifier|native
specifier|static
name|void
name|end
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|getLibraryName ()
specifier|public
specifier|native
specifier|static
name|String
name|getLibraryName
parameter_list|()
function_decl|;
block|}
end_class

end_unit

