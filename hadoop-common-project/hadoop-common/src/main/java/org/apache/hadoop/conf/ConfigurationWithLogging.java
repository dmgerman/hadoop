begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Logs access to {@link Configuration}.  * Sensitive data will be redacted.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ConfigurationWithLogging
specifier|public
class|class
name|ConfigurationWithLogging
extends|extends
name|Configuration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigurationWithLogging
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
decl_stmt|;
DECL|field|redactor
specifier|private
specifier|final
name|ConfigRedactor
name|redactor
decl_stmt|;
DECL|method|ConfigurationWithLogging (Configuration conf)
specifier|public
name|ConfigurationWithLogging
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|log
operator|=
name|LOG
expr_stmt|;
name|redactor
operator|=
operator|new
name|ConfigRedactor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see Configuration#get(String).    */
annotation|@
name|Override
DECL|method|get (String name)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|super
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}'"
argument_list|,
name|name
argument_list|,
name|redactor
operator|.
name|redact
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#get(String, String).    */
annotation|@
name|Override
DECL|method|get (String name, String defaultValue)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|super
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}' (default '{}')"
argument_list|,
name|name
argument_list|,
name|redactor
operator|.
name|redact
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|,
name|redactor
operator|.
name|redact
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#getBoolean(String, boolean).    */
annotation|@
name|Override
DECL|method|getBoolean (String name, boolean defaultValue)
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|boolean
name|value
init|=
name|super
operator|.
name|getBoolean
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}' (default '{}')"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#getFloat(String, float).    */
annotation|@
name|Override
DECL|method|getFloat (String name, float defaultValue)
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
name|float
name|value
init|=
name|super
operator|.
name|getFloat
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}' (default '{}')"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#getInt(String, int).    */
annotation|@
name|Override
DECL|method|getInt (String name, int defaultValue)
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|value
init|=
name|super
operator|.
name|getInt
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}' (default '{}')"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#getLong(String, long).    */
annotation|@
name|Override
DECL|method|getLong (String name, long defaultValue)
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|long
name|value
init|=
name|super
operator|.
name|getLong
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Got {} = '{}' (default '{}')"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * @see Configuration#set(String, String, String).    */
annotation|@
name|Override
DECL|method|set (String name, String value, String source)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Set {} to '{}'{}"
argument_list|,
name|name
argument_list|,
name|redactor
operator|.
name|redact
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|,
name|source
operator|==
literal|null
condition|?
literal|""
else|:
literal|" from "
operator|+
name|source
argument_list|)
expr_stmt|;
name|super
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

