begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|IpcStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ResponseBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|AuthProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
operator|.
name|OperationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcSaslProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcSaslProto
operator|.
name|SaslAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcSaslProto
operator|.
name|SaslState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ProtoUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|re2j
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A utility class that encapsulates SASL logic for RPC client  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SaslRpcClient
specifier|public
class|class
name|SaslRpcClient
block|{
comment|// This log is public as it is referenced in tests
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SaslRpcClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|protocol
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
decl_stmt|;
DECL|field|serverAddr
specifier|private
specifier|final
name|InetSocketAddress
name|serverAddr
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|saslClient
specifier|private
name|SaslClient
name|saslClient
decl_stmt|;
DECL|field|saslPropsResolver
specifier|private
name|SaslPropertiesResolver
name|saslPropsResolver
decl_stmt|;
DECL|field|authMethod
specifier|private
name|AuthMethod
name|authMethod
decl_stmt|;
DECL|field|saslHeader
specifier|private
specifier|static
specifier|final
name|RpcRequestHeaderProto
name|saslHeader
init|=
name|ProtoUtil
operator|.
name|makeRpcRequestHeader
argument_list|(
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|OperationProto
operator|.
name|RPC_FINAL_PACKET
argument_list|,
name|AuthProtocol
operator|.
name|SASL
operator|.
name|callId
argument_list|,
name|RpcConstants
operator|.
name|INVALID_RETRY_COUNT
argument_list|,
name|RpcConstants
operator|.
name|DUMMY_CLIENT_ID
argument_list|)
decl_stmt|;
DECL|field|negotiateRequest
specifier|private
specifier|static
specifier|final
name|RpcSaslProto
name|negotiateRequest
init|=
name|RpcSaslProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|SaslState
operator|.
name|NEGOTIATE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/**    * Create a SaslRpcClient that can be used by a RPC client to negotiate    * SASL authentication with a RPC server    * @param ugi - connecting user    * @param protocol - RPC protocol    * @param serverAddr - InetSocketAddress of remote server    * @param conf - Configuration    */
DECL|method|SaslRpcClient (UserGroupInformation ugi, Class<?> protocol, InetSocketAddress serverAddr, Configuration conf)
specifier|public
name|SaslRpcClient
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|serverAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|ugi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
name|this
operator|.
name|serverAddr
operator|=
name|serverAddr
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|saslPropsResolver
operator|=
name|SaslPropertiesResolver
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getNegotiatedProperty (String key)
specifier|public
name|Object
name|getNegotiatedProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|saslClient
operator|!=
literal|null
operator|)
condition|?
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
comment|// the RPC Client has an inelegant way of handling expiration of TGTs
comment|// acquired via a keytab.  any connection failure causes a relogin, so
comment|// the Client needs to know what authMethod was being attempted if an
comment|// exception occurs.  the SASL prep for a kerberos connection should
comment|// ideally relogin if necessary instead of exposing this detail to the
comment|// Client
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getAuthMethod ()
specifier|public
name|AuthMethod
name|getAuthMethod
parameter_list|()
block|{
return|return
name|authMethod
return|;
block|}
comment|/**    * Instantiate a sasl client for the first supported auth type in the    * given list.  The auth type must be defined, enabled, and the user    * must possess the required credentials, else the next auth is tried.    *     * @param authTypes to attempt in the given order    * @return SaslAuth of instantiated client    * @throws AccessControlException - client doesn't support any of the auths    * @throws IOException - misc errors    */
DECL|method|selectSaslClient (List<SaslAuth> authTypes)
specifier|private
name|SaslAuth
name|selectSaslClient
parameter_list|(
name|List
argument_list|<
name|SaslAuth
argument_list|>
name|authTypes
parameter_list|)
throws|throws
name|SaslException
throws|,
name|AccessControlException
throws|,
name|IOException
block|{
name|SaslAuth
name|selectedAuthType
init|=
literal|null
decl_stmt|;
name|boolean
name|switchToSimple
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SaslAuth
name|authType
range|:
name|authTypes
control|)
block|{
if|if
condition|(
operator|!
name|isValidAuthType
argument_list|(
name|authType
argument_list|)
condition|)
block|{
continue|continue;
comment|// don't know what it is, try next
block|}
name|AuthMethod
name|authMethod
init|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authType
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
name|switchToSimple
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|saslClient
operator|=
name|createSaslClient
argument_list|(
name|authType
argument_list|)
expr_stmt|;
if|if
condition|(
name|saslClient
operator|==
literal|null
condition|)
block|{
comment|// client lacks credentials, try next
continue|continue;
block|}
block|}
name|selectedAuthType
operator|=
name|authType
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|saslClient
operator|==
literal|null
operator|&&
operator|!
name|switchToSimple
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|serverAuthMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SaslAuth
name|authType
range|:
name|authTypes
control|)
block|{
name|serverAuthMethods
operator|.
name|add
argument_list|(
name|authType
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Client cannot authenticate via:"
operator|+
name|serverAuthMethods
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|selectedAuthType
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Use "
operator|+
name|selectedAuthType
operator|.
name|getMethod
argument_list|()
operator|+
literal|" authentication for protocol "
operator|+
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedAuthType
return|;
block|}
DECL|method|isValidAuthType (SaslAuth authType)
specifier|private
name|boolean
name|isValidAuthType
parameter_list|(
name|SaslAuth
name|authType
parameter_list|)
block|{
name|AuthMethod
name|authMethod
decl_stmt|;
try|try
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authType
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// unknown auth
name|authMethod
operator|=
literal|null
expr_stmt|;
block|}
comment|// do we know what it is?  is it using our mechanism?
return|return
name|authMethod
operator|!=
literal|null
operator|&&
name|authMethod
operator|.
name|getMechanismName
argument_list|()
operator|.
name|equals
argument_list|(
name|authType
operator|.
name|getMechanism
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Try to create a SaslClient for an authentication type.  May return    * null if the type isn't supported or the client lacks the required    * credentials.    *     * @param authType - the requested authentication method    * @return SaslClient for the authType or null    * @throws SaslException - error instantiating client    * @throws IOException - misc errors    */
DECL|method|createSaslClient (SaslAuth authType)
specifier|private
name|SaslClient
name|createSaslClient
parameter_list|(
name|SaslAuth
name|authType
parameter_list|)
throws|throws
name|SaslException
throws|,
name|IOException
block|{
name|String
name|saslUser
init|=
literal|null
decl_stmt|;
comment|// SASL requires the client and server to use the same proto and serverId
comment|// if necessary, auth types below will verify they are valid
specifier|final
name|String
name|saslProtocol
init|=
name|authType
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
specifier|final
name|String
name|saslServerName
init|=
name|authType
operator|.
name|getServerId
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProperties
init|=
name|saslPropsResolver
operator|.
name|getClientProperties
argument_list|(
name|serverAddr
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
name|CallbackHandler
name|saslCallback
init|=
literal|null
decl_stmt|;
specifier|final
name|AuthMethod
name|method
init|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|authType
operator|.
name|getMethod
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|TOKEN
case|:
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|getServerToken
argument_list|(
name|authType
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tokens aren't supported for this protocol"
operator|+
literal|" or user doesn't have one"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|saslCallback
operator|=
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|KERBEROS
case|:
block|{
if|if
condition|(
name|ugi
operator|.
name|getRealAuthenticationMethod
argument_list|()
operator|.
name|getAuthMethod
argument_list|()
operator|!=
name|AuthMethod
operator|.
name|KERBEROS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"client isn't using kerberos"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|serverPrincipal
init|=
name|getServerPrincipal
argument_list|(
name|authType
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverPrincipal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"protocol doesn't use kerberos"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RPC Server's Kerberos principal name for protocol="
operator|+
name|protocol
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" is "
operator|+
name|serverPrincipal
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown authentication method "
operator|+
name|method
argument_list|)
throw|;
block|}
name|String
name|mechanism
init|=
name|method
operator|.
name|getMechanismName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating SASL "
operator|+
name|mechanism
operator|+
literal|"("
operator|+
name|method
operator|+
literal|") "
operator|+
literal|" client to authenticate to service at "
operator|+
name|saslServerName
argument_list|)
expr_stmt|;
block|}
return|return
name|Sasl
operator|.
name|createSaslClient
argument_list|(
operator|new
name|String
index|[]
block|{
name|mechanism
block|}
argument_list|,
name|saslUser
argument_list|,
name|saslProtocol
argument_list|,
name|saslServerName
argument_list|,
name|saslProperties
argument_list|,
name|saslCallback
argument_list|)
return|;
block|}
comment|/**    * Try to locate the required token for the server.    *     * @param authType of the SASL client    * @return Token for server, or null if no token available    * @throws IOException - token selector cannot be instantiated    */
DECL|method|getServerToken (SaslAuth authType)
specifier|private
name|Token
argument_list|<
name|?
argument_list|>
name|getServerToken
parameter_list|(
name|SaslAuth
name|authType
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenInfo
name|tokenInfo
init|=
name|SecurityUtil
operator|.
name|getTokenInfo
argument_list|(
name|protocol
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get token info proto:"
operator|+
name|protocol
operator|+
literal|" info:"
operator|+
name|tokenInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
comment|// protocol has no support for tokens
return|return
literal|null
return|;
block|}
name|TokenSelector
argument_list|<
name|?
argument_list|>
name|tokenSelector
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokenSelector
operator|=
name|tokenInfo
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|tokenSelector
operator|.
name|selectToken
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|serverAddr
argument_list|)
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the remote server's principal.  The value will be obtained from    * the config and cross-checked against the server's advertised principal.    *     * @param authType of the SASL client    * @return String of the server's principal    * @throws IOException - error determining configured principal    */
annotation|@
name|VisibleForTesting
DECL|method|getServerPrincipal (SaslAuth authType)
name|String
name|getServerPrincipal
parameter_list|(
name|SaslAuth
name|authType
parameter_list|)
throws|throws
name|IOException
block|{
name|KerberosInfo
name|krbInfo
init|=
name|SecurityUtil
operator|.
name|getKerberosInfo
argument_list|(
name|protocol
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get kerberos info proto:"
operator|+
name|protocol
operator|+
literal|" info:"
operator|+
name|krbInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|krbInfo
operator|==
literal|null
condition|)
block|{
comment|// protocol has no support for kerberos
return|return
literal|null
return|;
block|}
name|String
name|serverKey
init|=
name|krbInfo
operator|.
name|serverPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't obtain server Kerberos config key from protocol="
operator|+
name|protocol
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
comment|// construct server advertised principal for comparision
name|String
name|serverPrincipal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
name|authType
operator|.
name|getProtocol
argument_list|()
operator|+
literal|"/"
operator|+
name|authType
operator|.
name|getServerId
argument_list|()
argument_list|,
name|KerberosPrincipal
operator|.
name|KRB_NT_SRV_HST
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// use the pattern if defined
name|String
name|serverKeyPattern
init|=
name|conf
operator|.
name|get
argument_list|(
name|serverKey
operator|+
literal|".pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverKeyPattern
operator|!=
literal|null
operator|&&
operator|!
name|serverKeyPattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pattern
name|pattern
init|=
name|GlobPattern
operator|.
name|compile
argument_list|(
name|serverKeyPattern
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|serverPrincipal
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Server has invalid Kerberos principal: %s,"
operator|+
literal|" doesn't match the pattern: %s"
argument_list|,
name|serverPrincipal
argument_list|,
name|serverKeyPattern
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// check that the server advertised principal matches our conf
name|String
name|confPrincipal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
argument_list|,
name|serverAddr
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getting serverKey: "
operator|+
name|serverKey
operator|+
literal|" conf value: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|serverKey
argument_list|)
operator|+
literal|" principal: "
operator|+
name|confPrincipal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confPrincipal
operator|==
literal|null
operator|||
name|confPrincipal
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to specify server's Kerberos principal name"
argument_list|)
throw|;
block|}
name|KerberosName
name|name
init|=
operator|new
name|KerberosName
argument_list|(
name|confPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|getHostName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Kerberos principal name does NOT have the expected hostname part: "
operator|+
name|confPrincipal
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serverPrincipal
operator|.
name|equals
argument_list|(
name|confPrincipal
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Server has invalid Kerberos principal: %s, expecting: %s"
argument_list|,
name|serverPrincipal
argument_list|,
name|confPrincipal
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|serverPrincipal
return|;
block|}
comment|/**    * Do client side SASL authentication with server via the given InputStream    * and OutputStream    *     * @param inS    *          InputStream to use    * @param outS    *          OutputStream to use    * @return AuthMethod used to negotiate the connection    * @throws IOException    */
DECL|method|saslConnect (IpcStreams ipcStreams)
specifier|public
name|AuthMethod
name|saslConnect
parameter_list|(
name|IpcStreams
name|ipcStreams
parameter_list|)
throws|throws
name|IOException
block|{
comment|// redefined if/when a SASL negotiation starts, can be queried if the
comment|// negotiation fails
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
name|sendSaslMessage
argument_list|(
name|ipcStreams
operator|.
name|out
argument_list|,
name|negotiateRequest
argument_list|)
expr_stmt|;
comment|// loop until sasl is complete or a rpc error occurs
name|boolean
name|done
init|=
literal|false
decl_stmt|;
do|do
block|{
name|ByteBuffer
name|bb
init|=
name|ipcStreams
operator|.
name|readResponse
argument_list|()
decl_stmt|;
name|RpcWritable
operator|.
name|Buffer
name|saslPacket
init|=
name|RpcWritable
operator|.
name|Buffer
operator|.
name|wrap
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|RpcResponseHeaderProto
name|header
init|=
name|saslPacket
operator|.
name|getValue
argument_list|(
name|RpcResponseHeaderProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|header
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ERROR
case|:
comment|// might get a RPC error during
case|case
name|FATAL
case|:
throw|throw
operator|new
name|RemoteException
argument_list|(
name|header
operator|.
name|getExceptionClassName
argument_list|()
argument_list|,
name|header
operator|.
name|getErrorMsg
argument_list|()
argument_list|)
throw|;
default|default:
break|break;
block|}
if|if
condition|(
name|header
operator|.
name|getCallId
argument_list|()
operator|!=
name|AuthProtocol
operator|.
name|SASL
operator|.
name|callId
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Non-SASL response during negotiation"
argument_list|)
throw|;
block|}
name|RpcSaslProto
name|saslMessage
init|=
name|saslPacket
operator|.
name|getValue
argument_list|(
name|RpcSaslProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|saslPacket
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Received malformed response length"
argument_list|)
throw|;
block|}
comment|// handle sasl negotiation process
name|RpcSaslProto
operator|.
name|Builder
name|response
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|saslMessage
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|NEGOTIATE
case|:
block|{
comment|// create a compatible SASL client, throws if no supported auths
name|SaslAuth
name|saslAuthType
init|=
name|selectSaslClient
argument_list|(
name|saslMessage
operator|.
name|getAuthsList
argument_list|()
argument_list|)
decl_stmt|;
comment|// define auth being attempted, caller can query if connect fails
name|authMethod
operator|=
name|AuthMethod
operator|.
name|valueOf
argument_list|(
name|saslAuthType
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|responseToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthMethod
operator|.
name|SIMPLE
condition|)
block|{
comment|// switching to SIMPLE
name|done
operator|=
literal|true
expr_stmt|;
comment|// not going to wait for success ack
block|}
else|else
block|{
name|byte
index|[]
name|challengeToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|saslAuthType
operator|.
name|hasChallenge
argument_list|()
condition|)
block|{
comment|// server provided the first challenge
name|challengeToken
operator|=
name|saslAuthType
operator|.
name|getChallenge
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|saslAuthType
operator|=
name|SaslAuth
operator|.
name|newBuilder
argument_list|(
name|saslAuthType
argument_list|)
operator|.
name|clearChallenge
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|saslClient
operator|.
name|hasInitialResponse
argument_list|()
condition|)
block|{
name|challengeToken
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|responseToken
operator|=
operator|(
name|challengeToken
operator|!=
literal|null
operator|)
condition|?
name|saslClient
operator|.
name|evaluateChallenge
argument_list|(
name|challengeToken
argument_list|)
else|:
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|response
operator|=
name|createSaslReply
argument_list|(
name|SaslState
operator|.
name|INITIATE
argument_list|,
name|responseToken
argument_list|)
expr_stmt|;
name|response
operator|.
name|addAuths
argument_list|(
name|saslAuthType
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CHALLENGE
case|:
block|{
if|if
condition|(
name|saslClient
operator|==
literal|null
condition|)
block|{
comment|// should probably instantiate a client to allow a server to
comment|// demand a specific negotiation
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Server sent unsolicited challenge"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|responseToken
init|=
name|saslEvaluateToken
argument_list|(
name|saslMessage
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|response
operator|=
name|createSaslReply
argument_list|(
name|SaslState
operator|.
name|RESPONSE
argument_list|,
name|responseToken
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SUCCESS
case|:
block|{
comment|// simple server sends immediate success to a SASL client for
comment|// switch to simple
if|if
condition|(
name|saslClient
operator|==
literal|null
condition|)
block|{
name|authMethod
operator|=
name|AuthMethod
operator|.
name|SIMPLE
expr_stmt|;
block|}
else|else
block|{
name|saslEvaluateToken
argument_list|(
name|saslMessage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"RPC client doesn't support SASL "
operator|+
name|saslMessage
operator|.
name|getState
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|sendSaslMessage
argument_list|(
name|ipcStreams
operator|.
name|out
argument_list|,
name|response
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|done
condition|)
do|;
return|return
name|authMethod
return|;
block|}
DECL|method|sendSaslMessage (OutputStream out, RpcSaslProto message)
specifier|private
name|void
name|sendSaslMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|RpcSaslProto
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending sasl message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|ResponseBuffer
name|buf
init|=
operator|new
name|ResponseBuffer
argument_list|()
decl_stmt|;
name|saslHeader
operator|.
name|writeDelimitedTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeDelimitedTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|out
init|)
block|{
name|buf
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Evaluate the server provided challenge.  The server must send a token    * if it's not done.  If the server is done, the challenge token is    * optional because not all mechanisms send a final token for the client to    * update its internal state.  The client must also be done after    * evaluating the optional token to ensure a malicious server doesn't    * prematurely end the negotiation with a phony success.    *      * @param saslResponse - client response to challenge    * @param serverIsDone - server negotiation state    * @throws SaslException - any problems with negotiation    */
DECL|method|saslEvaluateToken (RpcSaslProto saslResponse, boolean serverIsDone)
specifier|private
name|byte
index|[]
name|saslEvaluateToken
parameter_list|(
name|RpcSaslProto
name|saslResponse
parameter_list|,
name|boolean
name|serverIsDone
parameter_list|)
throws|throws
name|SaslException
block|{
name|byte
index|[]
name|saslToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|saslResponse
operator|.
name|hasToken
argument_list|()
condition|)
block|{
name|saslToken
operator|=
name|saslResponse
operator|.
name|getToken
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|saslToken
operator|=
name|saslClient
operator|.
name|evaluateChallenge
argument_list|(
name|saslToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|serverIsDone
condition|)
block|{
comment|// the server may only omit a token when it's done
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Server challenge contains no token"
argument_list|)
throw|;
block|}
if|if
condition|(
name|serverIsDone
condition|)
block|{
comment|// server tried to report success before our client completed
if|if
condition|(
operator|!
name|saslClient
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Client is out of sync with server"
argument_list|)
throw|;
block|}
comment|// a client cannot generate a response to a success message
if|if
condition|(
name|saslToken
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Client generated spurious response"
argument_list|)
throw|;
block|}
block|}
return|return
name|saslToken
return|;
block|}
DECL|method|createSaslReply (SaslState state, byte[] responseToken)
specifier|private
name|RpcSaslProto
operator|.
name|Builder
name|createSaslReply
parameter_list|(
name|SaslState
name|state
parameter_list|,
name|byte
index|[]
name|responseToken
parameter_list|)
block|{
name|RpcSaslProto
operator|.
name|Builder
name|response
init|=
name|RpcSaslProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|responseToken
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setToken
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|responseToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|useWrap ()
specifier|private
name|boolean
name|useWrap
parameter_list|()
block|{
comment|// getNegotiatedProperty throws if client isn't complete
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
comment|// SASL wrapping is only used if the connection has a QOP, and
comment|// the value is not auth.  ex. auth-int& auth-priv
return|return
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|equals
argument_list|(
name|qop
argument_list|)
return|;
block|}
comment|/**    * Get SASL wrapped InputStream if SASL QoP requires unwrapping,    * otherwise return original stream.  Can be called only after    * saslConnect() has been called.    *     * @param in - InputStream used to make the connection    * @return InputStream that may be using SASL unwrap    * @throws IOException    */
DECL|method|getInputStream (InputStream in)
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useWrap
argument_list|()
condition|)
block|{
name|in
operator|=
operator|new
name|WrappedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
comment|/**    * Get SASL wrapped OutputStream if SASL QoP requires wrapping,    * otherwise return original stream.  Can be called only after    * saslConnect() has been called.    *     * @param out - OutputStream used to make the connection    * @return OutputStream that may be using wrapping    * @throws IOException    */
DECL|method|getOutputStream (OutputStream out)
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useWrap
argument_list|()
condition|)
block|{
comment|// the client and server negotiate a maximum buffer size that can be
comment|// wrapped
name|String
name|maxBuf
init|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|RAW_SEND_SIZE
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|WrappedOutputStream
argument_list|(
name|out
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxBuf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
comment|// ideally this should be folded into the RPC decoding loop but it's
comment|// currently split across Client and SaslRpcClient...
DECL|class|WrappedInputStream
class|class
name|WrappedInputStream
extends|extends
name|FilterInputStream
block|{
DECL|field|unwrappedRpcBuffer
specifier|private
name|ByteBuffer
name|unwrappedRpcBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|WrappedInputStream (InputStream in)
specifier|public
name|WrappedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|n
init|=
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|n
operator|!=
operator|-
literal|1
operator|)
condition|?
name|b
index|[
literal|0
index|]
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[])
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buf, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// fill the buffer with the next RPC message
if|if
condition|(
name|unwrappedRpcBuffer
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|readNextRpcPacket
argument_list|()
expr_stmt|;
block|}
comment|// satisfy as much of the request as possible
name|int
name|readLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|unwrappedRpcBuffer
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|unwrappedRpcBuffer
operator|.
name|get
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
return|return
name|readLen
return|;
block|}
comment|// all messages must be RPC SASL wrapped, else an exception is thrown
DECL|method|readNextRpcPacket ()
specifier|private
name|void
name|readNextRpcPacket
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reading next wrapped RPC packet"
argument_list|)
expr_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|rpcLen
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rpcBuf
init|=
operator|new
name|byte
index|[
name|rpcLen
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|rpcBuf
argument_list|)
expr_stmt|;
comment|// decode the RPC header
name|ByteArrayInputStream
name|bis
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|rpcBuf
argument_list|)
decl_stmt|;
name|RpcResponseHeaderProto
operator|.
name|Builder
name|headerBuilder
init|=
name|RpcResponseHeaderProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|headerBuilder
operator|.
name|mergeDelimitedFrom
argument_list|(
name|bis
argument_list|)
expr_stmt|;
name|boolean
name|isWrapped
init|=
literal|false
decl_stmt|;
comment|// Must be SASL wrapped, verify and decode.
if|if
condition|(
name|headerBuilder
operator|.
name|getCallId
argument_list|()
operator|==
name|AuthProtocol
operator|.
name|SASL
operator|.
name|callId
condition|)
block|{
name|RpcSaslProto
operator|.
name|Builder
name|saslMessage
init|=
name|RpcSaslProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|saslMessage
operator|.
name|mergeDelimitedFrom
argument_list|(
name|bis
argument_list|)
expr_stmt|;
if|if
condition|(
name|saslMessage
operator|.
name|getState
argument_list|()
operator|==
name|SaslState
operator|.
name|WRAP
condition|)
block|{
name|isWrapped
operator|=
literal|true
expr_stmt|;
name|byte
index|[]
name|token
init|=
name|saslMessage
operator|.
name|getToken
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unwrapping token of length:"
operator|+
name|token
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|saslClient
operator|.
name|unwrap
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|)
expr_stmt|;
name|unwrappedRpcBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isWrapped
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Server sent non-wrapped response"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|WrappedOutputStream
class|class
name|WrappedOutputStream
extends|extends
name|FilterOutputStream
block|{
DECL|method|WrappedOutputStream (OutputStream out)
specifier|public
name|WrappedOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] buf, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"wrapping token of length:"
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
name|buf
operator|=
name|saslClient
operator|.
name|wrap
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|RpcSaslProto
name|saslMessage
init|=
name|RpcSaslProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|SaslState
operator|.
name|WRAP
argument_list|)
operator|.
name|setToken
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|saslMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Release resources used by wrapped saslClient */
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|SaslException
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
name|saslClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|saslClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|SaslClientCallbackHandler
specifier|private
specifier|static
class|class
name|SaslClientCallbackHandler
implements|implements
name|CallbackHandler
block|{
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|userPassword
specifier|private
specifier|final
name|char
index|[]
name|userPassword
decl_stmt|;
DECL|method|SaslClientCallbackHandler (Token<? extends TokenIdentifier> token)
specifier|public
name|SaslClientCallbackHandler
parameter_list|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|SaslRpcServer
operator|.
name|encodeIdentifier
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|userPassword
operator|=
name|SaslRpcServer
operator|.
name|encodePassword
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|RealmCallback
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RealmChoiceCallback
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
name|rc
operator|=
operator|(
name|RealmCallback
operator|)
name|callback
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL client callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting username: "
operator|+
name|userName
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting userPassword"
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setPassword
argument_list|(
name|userPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL client callback: setting realm: "
operator|+
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setText
argument_list|(
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

