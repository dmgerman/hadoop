begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The IdentityHashStore stores (key, value) mappings in an array.  * It is similar to java.util.HashTable, but much more lightweight.  * Neither inserting nor removing an element ever leads to any garbage  * getting created (assuming the array doesn't need to be enlarged).  *  * Unlike HashTable, it compares keys using  * {@link System#identityHashCode(Object)} and the identity operator.  * This is useful for types like ByteBuffer which have expensive hashCode  * and equals operators.  *  * We use linear probing to resolve collisions.  This avoids the need for  * the overhead of linked list data structures.  It also means that it is  * expensive to attempt to remove an element that isn't there, since we  * have to look at the entire array to be sure that it doesn't exist.  *  * @param<K>    The key type to use.  * @param<V>    THe value type to use.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|IdentityHashStore
specifier|public
specifier|final
class|class
name|IdentityHashStore
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
comment|/**    * Even elements are keys; odd elements are values.    * The array has size 1 + Math.pow(2, capacity).    */
DECL|field|buffer
specifier|private
name|Object
name|buffer
index|[]
decl_stmt|;
DECL|field|numInserted
specifier|private
name|int
name|numInserted
init|=
literal|0
decl_stmt|;
DECL|field|capacity
specifier|private
name|int
name|capacity
decl_stmt|;
comment|/**    * The default maxCapacity value to use.    */
DECL|field|DEFAULT_MAX_CAPACITY
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CAPACITY
init|=
literal|2
decl_stmt|;
DECL|method|IdentityHashStore (int capacity)
specifier|public
name|IdentityHashStore
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|capacity
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|capacity
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|capacity
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// Round the capacity we need up to a power of 2.
name|realloc
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|capacity
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|realloc (int newCapacity)
specifier|private
name|void
name|realloc
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|newCapacity
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Object
name|prevBuffer
index|[]
init|=
name|buffer
decl_stmt|;
name|this
operator|.
name|capacity
operator|=
name|newCapacity
expr_stmt|;
comment|// Each element takes two array slots -- one for the key,
comment|// and another for the value.  We also want a load factor
comment|// of 0.50.  Combine those together and you get 4 * newCapacity.
name|this
operator|.
name|buffer
operator|=
operator|new
name|Object
index|[
literal|4
operator|*
name|newCapacity
index|]
expr_stmt|;
name|this
operator|.
name|numInserted
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|prevBuffer
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prevBuffer
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|prevBuffer
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|putInternal
argument_list|(
name|prevBuffer
index|[
name|i
index|]
argument_list|,
name|prevBuffer
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|putInternal (Object k, Object v)
specifier|private
name|void
name|putInternal
parameter_list|(
name|Object
name|k
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
name|int
name|hash
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|k
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numEntries
init|=
name|buffer
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|%
name|numEntries
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|buffer
index|[
literal|2
operator|*
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|buffer
index|[
literal|2
operator|*
name|index
index|]
operator|=
name|k
expr_stmt|;
name|buffer
index|[
literal|1
operator|+
operator|(
literal|2
operator|*
name|index
operator|)
index|]
operator|=
name|v
expr_stmt|;
name|numInserted
operator|++
expr_stmt|;
return|return;
block|}
name|index
operator|=
operator|(
name|index
operator|+
literal|1
operator|)
operator|%
name|numEntries
expr_stmt|;
block|}
block|}
comment|/**    * Add a new (key, value) mapping.    *    * Inserting a new (key, value) never overwrites a previous one.    * In other words, you can insert the same key multiple times and it will    * lead to multiple entries.    */
DECL|method|put (K k, V v)
specifier|public
name|void
name|put
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|realloc
argument_list|(
name|DEFAULT_MAX_CAPACITY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numInserted
operator|+
literal|1
operator|>
name|capacity
condition|)
block|{
name|realloc
argument_list|(
name|capacity
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|putInternal
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|getElementIndex (K k)
specifier|private
name|int
name|getElementIndex
parameter_list|(
name|K
name|k
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|numEntries
init|=
name|buffer
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|int
name|hash
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|%
name|numEntries
decl_stmt|;
name|int
name|firstIndex
init|=
name|index
decl_stmt|;
do|do
block|{
if|if
condition|(
name|buffer
index|[
literal|2
operator|*
name|index
index|]
operator|==
name|k
condition|)
block|{
return|return
name|index
return|;
block|}
name|index
operator|=
operator|(
name|index
operator|+
literal|1
operator|)
operator|%
name|numEntries
expr_stmt|;
block|}
do|while
condition|(
name|index
operator|!=
name|firstIndex
condition|)
do|;
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Retrieve a value associated with a given key.    */
DECL|method|get (K k)
specifier|public
name|V
name|get
parameter_list|(
name|K
name|k
parameter_list|)
block|{
name|int
name|index
init|=
name|getElementIndex
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|V
operator|)
name|buffer
index|[
literal|1
operator|+
operator|(
literal|2
operator|*
name|index
operator|)
index|]
return|;
block|}
comment|/**    * Retrieve a value associated with a given key, and delete the    * relevant entry.    */
DECL|method|remove (K k)
specifier|public
name|V
name|remove
parameter_list|(
name|K
name|k
parameter_list|)
block|{
name|int
name|index
init|=
name|getElementIndex
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|V
name|val
init|=
operator|(
name|V
operator|)
name|buffer
index|[
literal|1
operator|+
operator|(
literal|2
operator|*
name|index
operator|)
index|]
decl_stmt|;
name|buffer
index|[
literal|2
operator|*
name|index
index|]
operator|=
literal|null
expr_stmt|;
name|buffer
index|[
literal|1
operator|+
operator|(
literal|2
operator|*
name|index
operator|)
index|]
operator|=
literal|null
expr_stmt|;
name|numInserted
operator|--
expr_stmt|;
return|return
name|val
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|numInserted
operator|==
literal|0
return|;
block|}
DECL|method|numElements ()
specifier|public
name|int
name|numElements
parameter_list|()
block|{
return|return
name|numInserted
return|;
block|}
DECL|method|capacity ()
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|interface|Visitor
specifier|public
interface|interface
name|Visitor
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|method|accept (K k, V v)
name|void
name|accept
parameter_list|(
name|K
name|k
parameter_list|,
name|V
name|v
parameter_list|)
function_decl|;
block|}
comment|/**    * Visit all key, value pairs in the IdentityHashStore.    */
DECL|method|visitAll (Visitor<K, V> visitor)
specifier|public
name|void
name|visitAll
parameter_list|(
name|Visitor
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|visitor
parameter_list|)
block|{
name|int
name|length
init|=
name|buffer
operator|==
literal|null
condition|?
literal|0
else|:
name|buffer
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|visitor
operator|.
name|accept
argument_list|(
operator|(
name|K
operator|)
name|buffer
index|[
name|i
index|]
argument_list|,
operator|(
name|V
operator|)
name|buffer
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

