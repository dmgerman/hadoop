begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**   * A Writable for arrays containing instances of a class. The elements of this  * writable must all be instances of the same class. If this writable will be  * the input for a Reducer, you will need to create a subclass that sets the  * value to be of the proper type.  *  * For example:  *<code>  * public class IntArrayWritable extends ArrayWritable {  *   public IntArrayWritable() {   *     super(IntWritable.class);   *   }	  * }  *</code>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ArrayWritable
specifier|public
class|class
name|ArrayWritable
implements|implements
name|Writable
block|{
DECL|field|valueClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
decl_stmt|;
DECL|field|values
specifier|private
name|Writable
index|[]
name|values
decl_stmt|;
DECL|method|ArrayWritable (Class<? extends Writable> valueClass)
specifier|public
name|ArrayWritable
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|)
block|{
if|if
condition|(
name|valueClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null valueClass"
argument_list|)
throw|;
block|}
name|this
operator|.
name|valueClass
operator|=
name|valueClass
expr_stmt|;
block|}
DECL|method|ArrayWritable (Class<? extends Writable> valueClass, Writable[] values)
specifier|public
name|ArrayWritable
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|Writable
index|[]
name|values
parameter_list|)
block|{
name|this
argument_list|(
name|valueClass
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|ArrayWritable (String[] strings)
specifier|public
name|ArrayWritable
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
block|{
name|this
argument_list|(
name|UTF8
operator|.
name|class
argument_list|,
operator|new
name|Writable
index|[
name|strings
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
operator|new
name|UTF8
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getValueClass ()
specifier|public
name|Class
name|getValueClass
parameter_list|()
block|{
return|return
name|valueClass
return|;
block|}
DECL|method|toStrings ()
specifier|public
name|String
index|[]
name|toStrings
parameter_list|()
block|{
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strings
index|[
name|i
index|]
operator|=
name|values
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
DECL|method|toArray ()
specifier|public
name|Object
name|toArray
parameter_list|()
block|{
name|Object
name|result
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|valueClass
argument_list|,
name|values
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|result
argument_list|,
name|i
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|set (Writable[] values)
specifier|public
name|void
name|set
parameter_list|(
name|Writable
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|Writable
index|[]
name|get
parameter_list|()
block|{
return|return
name|values
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|values
operator|=
operator|new
name|Writable
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
comment|// construct values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Writable
name|value
init|=
name|WritableFactories
operator|.
name|newInstance
argument_list|(
name|valueClass
argument_list|)
decl_stmt|;
name|value
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// read a value
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
comment|// store it in values
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// write values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

