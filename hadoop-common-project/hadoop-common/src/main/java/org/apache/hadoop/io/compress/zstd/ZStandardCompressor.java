begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zstd
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zstd
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|ZStandardCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A {@link Compressor} based on the zStandard compression algorithm.  * https://github.com/facebook/zstd  */
end_comment

begin_class
DECL|class|ZStandardCompressor
specifier|public
class|class
name|ZStandardCompressor
implements|implements
name|Compressor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZStandardCompressor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stream
specifier|private
name|long
name|stream
decl_stmt|;
DECL|field|level
specifier|private
name|int
name|level
decl_stmt|;
DECL|field|directBufferSize
specifier|private
name|int
name|directBufferSize
decl_stmt|;
DECL|field|userBuf
specifier|private
name|byte
index|[]
name|userBuf
init|=
literal|null
decl_stmt|;
DECL|field|userBufOff
DECL|field|userBufLen
specifier|private
name|int
name|userBufOff
init|=
literal|0
decl_stmt|,
name|userBufLen
init|=
literal|0
decl_stmt|;
DECL|field|uncompressedDirectBuf
specifier|private
name|ByteBuffer
name|uncompressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|uncompressedDirectBufOff
DECL|field|uncompressedDirectBufLen
specifier|private
name|int
name|uncompressedDirectBufOff
init|=
literal|0
decl_stmt|,
name|uncompressedDirectBufLen
init|=
literal|0
decl_stmt|;
DECL|field|keepUncompressedBuf
specifier|private
name|boolean
name|keepUncompressedBuf
init|=
literal|false
decl_stmt|;
DECL|field|compressedDirectBuf
specifier|private
name|ByteBuffer
name|compressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|finish
DECL|field|finished
specifier|private
name|boolean
name|finish
decl_stmt|,
name|finished
decl_stmt|;
DECL|field|bytesRead
specifier|private
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
DECL|field|bytesWritten
specifier|private
name|long
name|bytesWritten
init|=
literal|0
decl_stmt|;
DECL|field|nativeZStandardLoaded
specifier|private
specifier|static
name|boolean
name|nativeZStandardLoaded
init|=
literal|false
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Initialize the native library
name|initIDs
argument_list|()
expr_stmt|;
name|nativeZStandardLoaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error loading zstandard native libraries: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isNativeCodeLoaded ()
specifier|public
specifier|static
name|boolean
name|isNativeCodeLoaded
parameter_list|()
block|{
return|return
name|nativeZStandardLoaded
return|;
block|}
DECL|method|getRecommendedBufferSize ()
specifier|public
specifier|static
name|int
name|getRecommendedBufferSize
parameter_list|()
block|{
return|return
name|getStreamSize
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ZStandardCompressor ()
name|ZStandardCompressor
parameter_list|()
block|{
name|this
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_COMPRESSION_CODEC_ZSTD_LEVEL_DEFAULT
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new compressor with the default compression level.    * Compressed data will be generated in ZStandard format.    */
DECL|method|ZStandardCompressor (int level, int bufferSize)
specifier|public
name|ZStandardCompressor
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
argument_list|(
name|level
argument_list|,
name|bufferSize
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ZStandardCompressor (int level, int inputBufferSize, int outputBufferSize)
name|ZStandardCompressor
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|inputBufferSize
parameter_list|,
name|int
name|outputBufferSize
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|stream
operator|=
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|directBufferSize
operator|=
name|outputBufferSize
expr_stmt|;
name|uncompressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|inputBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|outputBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|outputBufferSize
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * Prepare the compressor to be used in a new stream with settings defined in    * the given Configuration. It will reset the compressor's compression level    * and compression strategy.    *    * @param conf Configuration storing new settings    */
annotation|@
name|Override
DECL|method|reinit (Configuration conf)
specifier|public
name|void
name|reinit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|level
operator|=
name|ZStandardCodec
operator|.
name|getCompressionLevel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reinit compressor with new compression configuration"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setInput (byte[] b, int off, int len)
specifier|public
name|void
name|setInput
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|this
operator|.
name|userBuf
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|userBufOff
operator|=
name|off
expr_stmt|;
name|this
operator|.
name|userBufLen
operator|=
name|len
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|setInputFromSavedData
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
comment|//copy enough data from userBuf to uncompressedDirectBuf
DECL|method|setInputFromSavedData ()
specifier|private
name|void
name|setInputFromSavedData
parameter_list|()
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|userBufLen
argument_list|,
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|uncompressedDirectBuf
operator|.
name|put
argument_list|(
name|userBuf
argument_list|,
name|userBufOff
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|userBufLen
operator|-=
name|len
expr_stmt|;
name|userBufOff
operator|+=
name|len
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
name|uncompressedDirectBuf
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDictionary (byte[] b, int off, int len)
specifier|public
name|void
name|setDictionary
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Dictionary support is not enabled"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|needsInput ()
specifier|public
name|boolean
name|needsInput
parameter_list|()
block|{
comment|// Consume remaining compressed data?
if|if
condition|(
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// have we consumed all input
if|if
condition|(
name|keepUncompressedBuf
operator|&&
name|uncompressedDirectBufLen
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Check if we have consumed all user-input
if|if
condition|(
name|userBufLen
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// copy enough data from userBuf to uncompressedDirectBuf
name|setInputFromSavedData
argument_list|()
expr_stmt|;
comment|// uncompressedDirectBuf is not full
return|return
name|uncompressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
block|{
name|finish
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finished ()
specifier|public
name|boolean
name|finished
parameter_list|()
block|{
comment|// Check if 'zstd' says its 'finished' and all compressed
comment|// data has been consumed
return|return
operator|(
name|finished
operator|&&
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compress (byte[] b, int off, int len)
specifier|public
name|int
name|compress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
comment|// Check if there is compressed data
name|int
name|n
init|=
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|// Re-initialize the output direct buffer
name|compressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
comment|// Compress data
name|n
operator|=
name|deflateBytesDirect
argument_list|(
name|uncompressedDirectBuf
argument_list|,
name|uncompressedDirectBufOff
argument_list|,
name|uncompressedDirectBufLen
argument_list|,
name|compressedDirectBuf
argument_list|,
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// Check if we have consumed all input buffer
if|if
condition|(
name|uncompressedDirectBufLen
operator|<=
literal|0
condition|)
block|{
comment|// consumed all input buffer
name|keepUncompressedBuf
operator|=
literal|false
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|//  did not consume all input buffer
name|keepUncompressedBuf
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get at most 'len' bytes
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns the total number of compressed bytes output so far.    *    * @return the total (non-negative) number of compressed bytes output so far    */
annotation|@
name|Override
DECL|method|getBytesWritten ()
specifier|public
name|long
name|getBytesWritten
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|bytesWritten
return|;
block|}
comment|/**    *<p>Returns the total number of uncompressed bytes input so far.</p>    *    * @return the total (non-negative) number of uncompressed bytes input so far    */
annotation|@
name|Override
DECL|method|getBytesRead ()
specifier|public
name|long
name|getBytesRead
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|bytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|level
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|finish
operator|=
literal|false
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
name|bytesRead
operator|=
literal|0
expr_stmt|;
name|bytesWritten
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
literal|0
expr_stmt|;
name|keepUncompressedBuf
operator|=
literal|false
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|userBufOff
operator|=
literal|0
expr_stmt|;
name|userBufLen
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end ()
specifier|public
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|0
condition|)
block|{
name|end
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|checkStream ()
specifier|private
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
DECL|method|create ()
specifier|private
specifier|native
specifier|static
name|long
name|create
parameter_list|()
function_decl|;
DECL|method|init (int level, long stream)
specifier|private
specifier|native
specifier|static
name|void
name|init
parameter_list|(
name|int
name|level
parameter_list|,
name|long
name|stream
parameter_list|)
function_decl|;
DECL|method|deflateBytesDirect (ByteBuffer src, int srcOffset, int srcLen, ByteBuffer dst, int dstLen)
specifier|private
specifier|native
name|int
name|deflateBytesDirect
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|int
name|srcOffset
parameter_list|,
name|int
name|srcLen
parameter_list|,
name|ByteBuffer
name|dst
parameter_list|,
name|int
name|dstLen
parameter_list|)
function_decl|;
DECL|method|getStreamSize ()
specifier|private
specifier|native
specifier|static
name|int
name|getStreamSize
parameter_list|()
function_decl|;
DECL|method|end (long strm)
specifier|private
specifier|native
specifier|static
name|void
name|end
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|initIDs ()
specifier|private
specifier|native
specifier|static
name|void
name|initIDs
parameter_list|()
function_decl|;
DECL|method|getLibraryName ()
specifier|public
specifier|native
specifier|static
name|String
name|getLibraryName
parameter_list|()
function_decl|;
block|}
end_class

end_unit

