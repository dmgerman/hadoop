begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|GetServiceStatusRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|GetServiceStatusResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAStateChangeRequestInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HARequestSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|MonitorHealthRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToActiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToStandbyRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This class is the client side translator to translate the requests made on  * {@link HAServiceProtocol} interfaces to the RPC server implementing  * {@link HAServiceProtocolPB}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|HAServiceProtocolClientSideTranslatorPB
specifier|public
class|class
name|HAServiceProtocolClientSideTranslatorPB
implements|implements
name|HAServiceProtocol
implements|,
name|Closeable
implements|,
name|ProtocolTranslator
block|{
comment|/** RpcController is not used and hence is set to null */
DECL|field|NULL_CONTROLLER
specifier|private
specifier|final
specifier|static
name|RpcController
name|NULL_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|MONITOR_HEALTH_REQ
specifier|private
specifier|final
specifier|static
name|MonitorHealthRequestProto
name|MONITOR_HEALTH_REQ
init|=
name|MonitorHealthRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|GET_SERVICE_STATUS_REQ
specifier|private
specifier|final
specifier|static
name|GetServiceStatusRequestProto
name|GET_SERVICE_STATUS_REQ
init|=
name|GetServiceStatusRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|HAServiceProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|HAServiceProtocolClientSideTranslatorPB (InetSocketAddress addr, Configuration conf)
specifier|public
name|HAServiceProtocolClientSideTranslatorPB
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|rpcProxy
operator|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|HAServiceProtocolClientSideTranslatorPB ( InetSocketAddress addr, Configuration conf, SocketFactory socketFactory, int timeout)
specifier|public
name|HAServiceProtocolClientSideTranslatorPB
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|rpcProxy
operator|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|addr
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|socketFactory
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|monitorHealth ()
specifier|public
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|rpcProxy
operator|.
name|monitorHealth
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|MONITOR_HEALTH_REQ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToActive (StateChangeRequestInfo reqInfo)
specifier|public
name|void
name|transitionToActive
parameter_list|(
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|TransitionToActiveRequestProto
name|req
init|=
name|TransitionToActiveRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReqInfo
argument_list|(
name|convert
argument_list|(
name|reqInfo
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|rpcProxy
operator|.
name|transitionToActive
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToStandby (StateChangeRequestInfo reqInfo)
specifier|public
name|void
name|transitionToStandby
parameter_list|(
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|TransitionToStandbyRequestProto
name|req
init|=
name|TransitionToStandbyRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReqInfo
argument_list|(
name|convert
argument_list|(
name|reqInfo
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|rpcProxy
operator|.
name|transitionToStandby
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceStatus ()
specifier|public
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|GetServiceStatusResponseProto
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|rpcProxy
operator|.
name|getServiceStatus
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|GET_SERVICE_STATUS_REQ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|HAServiceStatus
name|ret
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|convert
argument_list|(
name|status
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getReadyToBecomeActive
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setReadyToBecomeActive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setNotReadyToBecomeActive
argument_list|(
name|status
operator|.
name|getNotReadyReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert (HAServiceStateProto state)
specifier|private
name|HAServiceState
name|convert
parameter_list|(
name|HAServiceStateProto
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ACTIVE
case|:
return|return
name|HAServiceState
operator|.
name|ACTIVE
return|;
case|case
name|STANDBY
case|:
return|return
name|HAServiceState
operator|.
name|STANDBY
return|;
case|case
name|INITIALIZING
case|:
default|default:
return|return
name|HAServiceState
operator|.
name|INITIALIZING
return|;
block|}
block|}
DECL|method|convert (StateChangeRequestInfo reqInfo)
specifier|private
name|HAStateChangeRequestInfoProto
name|convert
parameter_list|(
name|StateChangeRequestInfo
name|reqInfo
parameter_list|)
block|{
name|HARequestSource
name|src
decl_stmt|;
switch|switch
condition|(
name|reqInfo
operator|.
name|getSource
argument_list|()
condition|)
block|{
case|case
name|REQUEST_BY_USER
case|:
name|src
operator|=
name|HARequestSource
operator|.
name|REQUEST_BY_USER
expr_stmt|;
break|break;
case|case
name|REQUEST_BY_USER_FORCED
case|:
name|src
operator|=
name|HARequestSource
operator|.
name|REQUEST_BY_USER_FORCED
expr_stmt|;
break|break;
case|case
name|REQUEST_BY_ZKFC
case|:
name|src
operator|=
name|HARequestSource
operator|.
name|REQUEST_BY_ZKFC
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad source: "
operator|+
name|reqInfo
operator|.
name|getSource
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|HAStateChangeRequestInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReqSource
argument_list|(
name|src
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
block|}
end_class

end_unit

