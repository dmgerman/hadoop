begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|GetServiceStateRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|MonitorHealthRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|ReadyToBecomeActiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToActiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToStandbyRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This class is the client side translator to translate the requests made on  * {@link HAServiceProtocol} interfaces to the RPC server implementing  * {@link HAServiceProtocolPB}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|HAServiceProtocolClientSideTranslatorPB
specifier|public
class|class
name|HAServiceProtocolClientSideTranslatorPB
implements|implements
name|HAServiceProtocol
implements|,
name|Closeable
block|{
comment|/** RpcController is not used and hence is set to null */
DECL|field|NULL_CONTROLLER
specifier|private
specifier|final
specifier|static
name|RpcController
name|NULL_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|MONITOR_HEALTH_REQ
specifier|private
specifier|final
specifier|static
name|MonitorHealthRequestProto
name|MONITOR_HEALTH_REQ
init|=
name|MonitorHealthRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|TRANSITION_TO_ACTIVE_REQ
specifier|private
specifier|final
specifier|static
name|TransitionToActiveRequestProto
name|TRANSITION_TO_ACTIVE_REQ
init|=
name|TransitionToActiveRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|TRANSITION_TO_STANDBY_REQ
specifier|private
specifier|final
specifier|static
name|TransitionToStandbyRequestProto
name|TRANSITION_TO_STANDBY_REQ
init|=
name|TransitionToStandbyRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|GET_SERVICE_STATE_REQ
specifier|private
specifier|final
specifier|static
name|GetServiceStateRequestProto
name|GET_SERVICE_STATE_REQ
init|=
name|GetServiceStateRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|ACTIVE_READY_REQ
specifier|private
specifier|final
specifier|static
name|ReadyToBecomeActiveRequestProto
name|ACTIVE_READY_REQ
init|=
name|ReadyToBecomeActiveRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|HAServiceProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|HAServiceProtocolClientSideTranslatorPB (InetSocketAddress addr, Configuration conf)
specifier|public
name|HAServiceProtocolClientSideTranslatorPB
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|rpcProxy
operator|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|monitorHealth ()
specifier|public
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|rpcProxy
operator|.
name|monitorHealth
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|MONITOR_HEALTH_REQ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToActive ()
specifier|public
name|void
name|transitionToActive
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|rpcProxy
operator|.
name|transitionToActive
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|TRANSITION_TO_ACTIVE_REQ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToStandby ()
specifier|public
name|void
name|transitionToStandby
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|rpcProxy
operator|.
name|transitionToStandby
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|TRANSITION_TO_STANDBY_REQ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceState ()
specifier|public
name|HAServiceState
name|getServiceState
parameter_list|()
throws|throws
name|IOException
block|{
name|HAServiceStateProto
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|rpcProxy
operator|.
name|getServiceState
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|GET_SERVICE_STATE_REQ
argument_list|)
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|ACTIVE
case|:
return|return
name|HAServiceState
operator|.
name|ACTIVE
return|;
case|case
name|STANDBY
case|:
return|return
name|HAServiceState
operator|.
name|STANDBY
return|;
case|case
name|INITIALIZING
case|:
default|default:
return|return
name|HAServiceState
operator|.
name|INITIALIZING
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readyToBecomeActive ()
specifier|public
name|boolean
name|readyToBecomeActive
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|rpcProxy
operator|.
name|readyToBecomeActive
argument_list|(
name|NULL_CONTROLLER
argument_list|,
name|ACTIVE_READY_REQ
argument_list|)
operator|.
name|getReadyToBecomeActive
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

