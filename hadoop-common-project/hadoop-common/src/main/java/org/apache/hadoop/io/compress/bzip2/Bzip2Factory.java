begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.bzip2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A collection of factories to create the right   * bzip2 compressor/decompressor instances.  *   */
end_comment

begin_class
DECL|class|Bzip2Factory
specifier|public
class|class
name|Bzip2Factory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Bzip2Factory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bzip2LibraryName
specifier|private
specifier|static
name|String
name|bzip2LibraryName
init|=
literal|""
decl_stmt|;
DECL|field|nativeBzip2Loaded
specifier|private
specifier|static
name|boolean
name|nativeBzip2Loaded
decl_stmt|;
comment|/**    * Check if native-bzip2 code is loaded& initialized correctly and     * can be loaded for this job.    *     * @param conf configuration    * @return<code>true</code> if native-bzip2 is loaded& initialized     *         and can be loaded for this job, else<code>false</code>    */
DECL|method|isNativeBzip2Loaded (Configuration conf)
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|isNativeBzip2Loaded
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|libname
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"io.compression.codec.bzip2.library"
argument_list|,
literal|"system-native"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bzip2LibraryName
operator|.
name|equals
argument_list|(
name|libname
argument_list|)
condition|)
block|{
name|nativeBzip2Loaded
operator|=
literal|false
expr_stmt|;
name|bzip2LibraryName
operator|=
name|libname
expr_stmt|;
if|if
condition|(
name|libname
operator|.
name|equals
argument_list|(
literal|"java-builtin"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using pure-Java version of bzip2 library"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Initialize the native library.
name|Bzip2Compressor
operator|.
name|initSymbols
argument_list|(
name|libname
argument_list|)
expr_stmt|;
name|Bzip2Decompressor
operator|.
name|initSymbols
argument_list|(
name|libname
argument_list|)
expr_stmt|;
name|nativeBzip2Loaded
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully loaded& initialized native-bzip2 library "
operator|+
name|libname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to load/initialize native-bzip2 library "
operator|+
name|libname
operator|+
literal|", will use pure-Java version"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nativeBzip2Loaded
return|;
block|}
DECL|method|getLibraryName (Configuration conf)
specifier|public
specifier|static
name|String
name|getLibraryName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
name|Bzip2Compressor
operator|.
name|getLibraryName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|bzip2LibraryName
return|;
block|}
block|}
comment|/**    * Return the appropriate type of the bzip2 compressor.     *     * @param conf configuration    * @return the appropriate type of the bzip2 compressor.    */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
DECL|method|getBzip2CompressorType (Configuration conf)
name|getBzip2CompressorType
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|?
name|Bzip2Compressor
operator|.
name|class
else|:
name|BZip2DummyCompressor
operator|.
name|class
return|;
block|}
comment|/**    * Return the appropriate implementation of the bzip2 compressor.     *     * @param conf configuration    * @return the appropriate implementation of the bzip2 compressor.    */
DECL|method|getBzip2Compressor (Configuration conf)
specifier|public
specifier|static
name|Compressor
name|getBzip2Compressor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|?
operator|new
name|Bzip2Compressor
argument_list|(
name|conf
argument_list|)
else|:
operator|new
name|BZip2DummyCompressor
argument_list|()
return|;
block|}
comment|/**    * Return the appropriate type of the bzip2 decompressor.     *     * @param conf configuration    * @return the appropriate type of the bzip2 decompressor.    */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
DECL|method|getBzip2DecompressorType (Configuration conf)
name|getBzip2DecompressorType
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|?
name|Bzip2Decompressor
operator|.
name|class
else|:
name|BZip2DummyDecompressor
operator|.
name|class
return|;
block|}
comment|/**    * Return the appropriate implementation of the bzip2 decompressor.     *     * @param conf configuration    * @return the appropriate implementation of the bzip2 decompressor.    */
DECL|method|getBzip2Decompressor (Configuration conf)
specifier|public
specifier|static
name|Decompressor
name|getBzip2Decompressor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|isNativeBzip2Loaded
argument_list|(
name|conf
argument_list|)
condition|?
operator|new
name|Bzip2Decompressor
argument_list|()
else|:
operator|new
name|BZip2DummyDecompressor
argument_list|()
return|;
block|}
DECL|method|setBlockSize (Configuration conf, int blockSize)
specifier|public
specifier|static
name|void
name|setBlockSize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"bzip2.compress.blocksize"
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockSize (Configuration conf)
specifier|public
specifier|static
name|int
name|getBlockSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
literal|"bzip2.compress.blocksize"
argument_list|,
name|Bzip2Compressor
operator|.
name|DEFAULT_BLOCK_SIZE
argument_list|)
return|;
block|}
DECL|method|setWorkFactor (Configuration conf, int workFactor)
specifier|public
specifier|static
name|void
name|setWorkFactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|workFactor
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"bzip2.compress.workfactor"
argument_list|,
name|workFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|getWorkFactor (Configuration conf)
specifier|public
specifier|static
name|int
name|getWorkFactor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
literal|"bzip2.compress.workfactor"
argument_list|,
name|Bzip2Compressor
operator|.
name|DEFAULT_WORK_FACTOR
argument_list|)
return|;
block|}
block|}
end_class

end_unit

