begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.alias
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * CredentialProvider based on Java's KeyStore file format. The file may be  * stored in any Hadoop FileSystem using the following name mangling:  * jceks://hdfs@nn1.example.com/my/creds.jceks ->  * hdfs://nn1.example.com/my/creds.jceks jceks://file/home/larry/creds.jceks ->  * file:///home/larry/creds.jceks  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JavaKeyStoreProvider
specifier|public
class|class
name|JavaKeyStoreProvider
extends|extends
name|AbstractJavaKeyStoreProvider
block|{
DECL|field|SCHEME_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME_NAME
init|=
literal|"jceks"
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|permissions
specifier|private
name|FsPermission
name|permissions
decl_stmt|;
DECL|method|JavaKeyStoreProvider (URI uri, Configuration conf)
specifier|private
name|JavaKeyStoreProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSchemeName ()
specifier|protected
name|String
name|getSchemeName
parameter_list|()
block|{
return|return
name|SCHEME_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStreamForKeystore ()
specifier|protected
name|OutputStream
name|getOutputStreamForKeystore
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|getPath
argument_list|()
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|keystoreExists ()
specifier|protected
name|boolean
name|keystoreExists
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStreamForFile ()
specifier|protected
name|InputStream
name|getInputStreamForFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|open
argument_list|(
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createPermissions (String perms)
specifier|protected
name|void
name|createPermissions
parameter_list|(
name|String
name|perms
parameter_list|)
block|{
name|permissions
operator|=
operator|new
name|FsPermission
argument_list|(
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stashOriginalFilePermissions ()
specifier|protected
name|void
name|stashOriginalFilePermissions
parameter_list|()
throws|throws
name|IOException
block|{
comment|// save off permissions in case we need to
comment|// rewrite the keystore in flush()
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|s
operator|.
name|getPermission
argument_list|()
expr_stmt|;
block|}
DECL|method|initFileSystem (URI uri)
specifier|protected
name|void
name|initFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initFileSystem
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|fs
operator|=
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The factory to create JksProviders, which is used by the ServiceLoader.    */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|CredentialProviderFactory
block|{
annotation|@
name|Override
DECL|method|createProvider (URI providerName, Configuration conf)
specifier|public
name|CredentialProvider
name|createProvider
parameter_list|(
name|URI
name|providerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SCHEME_NAME
operator|.
name|equals
argument_list|(
name|providerName
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|JavaKeyStoreProvider
argument_list|(
name|providerName
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

