begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.alias
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * CredentialProvider based on Java's KeyStore file format. The file may be   * stored in any Hadoop FileSystem using the following name mangling:  *  jceks://hdfs@nn1.example.com/my/creds.jceks -> hdfs://nn1.example.com/my/creds.jceks  *  jceks://file/home/larry/creds.jceks -> file:///home/larry/creds.jceks  *  * The password for the keystore is taken from the HADOOP_CREDSTORE_PASSWORD  * environment variable with a default of 'none'.  *  * It is expected that for access to credential protected resource to copy the   * creds from the original provider into the job's Credentials object, which is  * accessed via the UserProvider. Therefore, this provider won't be directly   * used by MapReduce tasks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JavaKeyStoreProvider
specifier|public
class|class
name|JavaKeyStoreProvider
extends|extends
name|CredentialProvider
block|{
DECL|field|SCHEME_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME_NAME
init|=
literal|"jceks"
decl_stmt|;
DECL|field|CREDENTIAL_PASSWORD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CREDENTIAL_PASSWORD_NAME
init|=
literal|"HADOOP_CREDSTORE_PASSWORD"
decl_stmt|;
DECL|field|KEYSTORE_PASSWORD_FILE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_PASSWORD_FILE_KEY
init|=
literal|"hadoop.security.credstore.java-keystore-provider.password-file"
decl_stmt|;
DECL|field|KEYSTORE_PASSWORD_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_PASSWORD_DEFAULT
init|=
literal|"none"
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|permissions
specifier|private
specifier|final
name|FsPermission
name|permissions
decl_stmt|;
DECL|field|keyStore
specifier|private
specifier|final
name|KeyStore
name|keyStore
decl_stmt|;
DECL|field|password
specifier|private
name|char
index|[]
name|password
init|=
literal|null
decl_stmt|;
DECL|field|changed
specifier|private
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
DECL|field|readLock
specifier|private
name|Lock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CredentialEntry
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CredentialEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|JavaKeyStoreProvider (URI uri, Configuration conf)
specifier|private
name|JavaKeyStoreProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|path
operator|=
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Get the password from the user's environment
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CREDENTIAL_PASSWORD_NAME
argument_list|)
condition|)
block|{
name|password
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|CREDENTIAL_PASSWORD_NAME
argument_list|)
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
comment|// if not in ENV get check for file
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|String
name|pwFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|KEYSTORE_PASSWORD_FILE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwFile
operator|!=
literal|null
condition|)
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|pwdFile
init|=
name|cl
operator|.
name|getResource
argument_list|(
name|pwFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwdFile
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|pwdFile
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|password
operator|=
name|IOUtils
operator|.
name|toCharArray
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|KEYSTORE_PASSWORD_DEFAULT
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|keyStore
operator|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|SCHEME_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// save off permissions in case we need to
comment|// rewrite the keystore in flush()
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|permissions
operator|=
name|s
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|keyStore
operator|.
name|load
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permissions
operator|=
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
expr_stmt|;
comment|// required to create an empty keystore. *sigh*
name|keyStore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't create keystore"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't load keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't load keystore "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCredentialEntry (String alias)
specifier|public
name|CredentialEntry
name|getCredentialEntry
parameter_list|(
name|String
name|alias
parameter_list|)
throws|throws
name|IOException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|SecretKeySpec
name|key
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cache
operator|.
name|containsKey
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|alias
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|key
operator|=
operator|(
name|SecretKeySpec
operator|)
name|keyStore
operator|.
name|getKey
argument_list|(
name|alias
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get credential "
operator|+
name|alias
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get algorithm for credential "
operator|+
name|alias
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnrecoverableKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't recover credential "
operator|+
name|alias
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|CredentialEntry
argument_list|(
name|alias
argument_list|,
name|bytesToChars
argument_list|(
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|bytesToChars (byte[] bytes)
specifier|public
specifier|static
name|char
index|[]
name|bytesToChars
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|String
name|pass
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|pass
operator|.
name|toCharArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAliases ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAliases
parameter_list|()
throws|throws
name|IOException
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|keyStore
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|alias
operator|=
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't get alias "
operator|+
name|alias
operator|+
literal|" from "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCredentialEntry (String alias, char[] credential)
specifier|public
name|CredentialEntry
name|createCredentialEntry
parameter_list|(
name|String
name|alias
parameter_list|,
name|char
index|[]
name|credential
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|alias
argument_list|)
operator|||
name|cache
operator|.
name|containsKey
argument_list|(
name|alias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Credential "
operator|+
name|alias
operator|+
literal|" already exists in "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem looking up credential "
operator|+
name|alias
operator|+
literal|" in "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|innerSetCredential
argument_list|(
name|alias
argument_list|,
name|credential
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteCredentialEntry (String name)
specifier|public
name|void
name|deleteCredentialEntry
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|keyStore
operator|.
name|containsAlias
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|keyStore
operator|.
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Credential "
operator|+
name|name
operator|+
literal|" does not exist in "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem removing "
operator|+
name|name
operator|+
literal|" from "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cache
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerSetCredential (String alias, char[] material)
name|CredentialEntry
name|innerSetCredential
parameter_list|(
name|String
name|alias
parameter_list|,
name|char
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|keyStore
operator|.
name|setKeyEntry
argument_list|(
name|alias
argument_list|,
operator|new
name|SecretKeySpec
argument_list|(
operator|new
name|String
argument_list|(
name|material
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
literal|"AES"
argument_list|)
argument_list|,
name|password
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't store credential "
operator|+
name|alias
operator|+
literal|" in "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|CredentialEntry
argument_list|(
name|alias
argument_list|,
name|material
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return;
block|}
comment|// write out the keystore
name|FSDataOutputStream
name|out
init|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|permissions
argument_list|)
decl_stmt|;
try|try
block|{
name|keyStore
operator|.
name|store
argument_list|(
name|out
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't store keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such algorithm storing keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Certificate exception storing keystore "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|uri
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The factory to create JksProviders, which is used by the ServiceLoader.    */
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
extends|extends
name|CredentialProviderFactory
block|{
annotation|@
name|Override
DECL|method|createProvider (URI providerName, Configuration conf)
specifier|public
name|CredentialProvider
name|createProvider
parameter_list|(
name|URI
name|providerName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|SCHEME_NAME
operator|.
name|equals
argument_list|(
name|providerName
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|JavaKeyStoreProvider
argument_list|(
name|providerName
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

