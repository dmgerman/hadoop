begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.sftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|sftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|ChannelSftp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|JSchException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Concurrent/Multiple Connections. */
end_comment

begin_class
DECL|class|SFTPConnectionPool
class|class
name|SFTPConnectionPool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SFTPFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Maximum number of allowed live connections. This doesn't mean we cannot
comment|// have more live connections. It means that when we have more
comment|// live connections than this threshold, any unused connection will be
comment|// closed.
DECL|field|maxConnection
specifier|private
name|int
name|maxConnection
decl_stmt|;
DECL|field|liveConnectionCount
specifier|private
name|int
name|liveConnectionCount
init|=
literal|0
decl_stmt|;
DECL|field|idleConnections
specifier|private
name|HashMap
argument_list|<
name|ConnectionInfo
argument_list|,
name|HashSet
argument_list|<
name|ChannelSftp
argument_list|>
argument_list|>
name|idleConnections
init|=
operator|new
name|HashMap
argument_list|<
name|ConnectionInfo
argument_list|,
name|HashSet
argument_list|<
name|ChannelSftp
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|con2infoMap
specifier|private
name|HashMap
argument_list|<
name|ChannelSftp
argument_list|,
name|ConnectionInfo
argument_list|>
name|con2infoMap
init|=
operator|new
name|HashMap
argument_list|<
name|ChannelSftp
argument_list|,
name|ConnectionInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SFTPConnectionPool (int maxConnection)
name|SFTPConnectionPool
parameter_list|(
name|int
name|maxConnection
parameter_list|)
block|{
name|this
operator|.
name|maxConnection
operator|=
name|maxConnection
expr_stmt|;
block|}
DECL|method|getFromPool (ConnectionInfo info)
specifier|synchronized
name|ChannelSftp
name|getFromPool
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|ChannelSftp
argument_list|>
name|cons
init|=
name|idleConnections
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|ChannelSftp
name|channel
decl_stmt|;
if|if
condition|(
name|cons
operator|!=
literal|null
operator|&&
name|cons
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|ChannelSftp
argument_list|>
name|it
init|=
name|cons
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|channel
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|idleConnections
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Connection pool error."
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** Add the channel into pool.    * @param channel    */
DECL|method|returnToPool (ChannelSftp channel)
specifier|synchronized
name|void
name|returnToPool
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|)
block|{
name|ConnectionInfo
name|info
init|=
name|con2infoMap
operator|.
name|get
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|ChannelSftp
argument_list|>
name|cons
init|=
name|idleConnections
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|cons
operator|==
literal|null
condition|)
block|{
name|cons
operator|=
operator|new
name|HashSet
argument_list|<
name|ChannelSftp
argument_list|>
argument_list|()
expr_stmt|;
name|idleConnections
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|cons
argument_list|)
expr_stmt|;
block|}
name|cons
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|/** Shutdown the connection pool and close all open connections. */
DECL|method|shutdown ()
specifier|synchronized
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|con2infoMap
operator|==
literal|null
condition|)
block|{
return|return;
comment|// already shutdown in case it is called
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Inside shutdown, con2infoMap size="
operator|+
name|con2infoMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConnection
operator|=
literal|0
expr_stmt|;
name|Set
argument_list|<
name|ChannelSftp
argument_list|>
name|cons
init|=
name|con2infoMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|cons
operator|!=
literal|null
operator|&&
name|cons
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// make a copy since we need to modify the underlying Map
name|Set
argument_list|<
name|ChannelSftp
argument_list|>
name|copy
init|=
operator|new
name|HashSet
argument_list|<
name|ChannelSftp
argument_list|>
argument_list|(
name|cons
argument_list|)
decl_stmt|;
comment|// Initiate disconnect from all outstanding connections
for|for
control|(
name|ChannelSftp
name|con
range|:
name|copy
control|)
block|{
try|try
block|{
name|disconnect
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ConnectionInfo
name|info
init|=
name|con2infoMap
operator|.
name|get
argument_list|(
name|con
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error encountered while closing connection to "
operator|+
name|info
operator|.
name|getHost
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// make sure no further connections can be returned.
name|this
operator|.
name|idleConnections
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|con2infoMap
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getMaxConnection ()
specifier|public
specifier|synchronized
name|int
name|getMaxConnection
parameter_list|()
block|{
return|return
name|maxConnection
return|;
block|}
DECL|method|setMaxConnection (int maxConn)
specifier|public
specifier|synchronized
name|void
name|setMaxConnection
parameter_list|(
name|int
name|maxConn
parameter_list|)
block|{
name|this
operator|.
name|maxConnection
operator|=
name|maxConn
expr_stmt|;
block|}
DECL|method|connect (String host, int port, String user, String password, String keyFile)
specifier|public
name|ChannelSftp
name|connect
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|keyFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get connection from pool
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|ChannelSftp
name|channel
init|=
name|getFromPool
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
return|return
name|channel
return|;
block|}
else|else
block|{
name|channel
operator|=
literal|null
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
operator|--
name|liveConnectionCount
expr_stmt|;
name|con2infoMap
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// create a new connection and add to pool
name|JSch
name|jsch
init|=
operator|new
name|JSch
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|user
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|keyFile
operator|!=
literal|null
operator|&&
name|keyFile
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jsch
operator|.
name|addIdentity
argument_list|(
name|keyFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|<=
literal|0
condition|)
block|{
name|session
operator|=
name|jsch
operator|.
name|getSession
argument_list|(
name|user
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|jsch
operator|.
name|getSession
argument_list|(
name|user
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Properties
name|config
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"StrictHostKeyChecking"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|session
operator|.
name|connect
argument_list|()
expr_stmt|;
name|channel
operator|=
operator|(
name|ChannelSftp
operator|)
name|session
operator|.
name|openChannel
argument_list|(
literal|"sftp"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|connect
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|con2infoMap
operator|.
name|put
argument_list|(
name|channel
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|liveConnectionCount
operator|++
expr_stmt|;
block|}
return|return
name|channel
return|;
block|}
catch|catch
parameter_list|(
name|JSchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|disconnect (ChannelSftp channel)
name|void
name|disconnect
parameter_list|(
name|ChannelSftp
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
comment|// close connection if too many active connections
name|boolean
name|closeConnection
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|liveConnectionCount
operator|>
name|maxConnection
condition|)
block|{
operator|--
name|liveConnectionCount
expr_stmt|;
name|con2infoMap
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|closeConnection
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|closeConnection
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|isConnected
argument_list|()
condition|)
block|{
try|try
block|{
name|Session
name|session
init|=
name|channel
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSchException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|returnToPool
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getIdleCount ()
specifier|public
name|int
name|getIdleCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|idleConnections
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getLiveConnCount ()
specifier|public
name|int
name|getLiveConnCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|liveConnectionCount
return|;
block|}
DECL|method|getConnPoolSize ()
specifier|public
name|int
name|getConnPoolSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|con2infoMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Class to capture the minimal set of information that distinguish    * between different connections.    */
DECL|class|ConnectionInfo
specifier|static
class|class
name|ConnectionInfo
block|{
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|""
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
init|=
literal|""
decl_stmt|;
DECL|method|ConnectionInfo (String hst, int prt, String usr)
name|ConnectionInfo
parameter_list|(
name|String
name|hst
parameter_list|,
name|int
name|prt
parameter_list|,
name|String
name|usr
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|hst
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|prt
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|usr
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String hst)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|hst
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|hst
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int prt)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|prt
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|prt
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setUser (String usr)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|usr
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|usr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ConnectionInfo
condition|)
block|{
name|ConnectionInfo
name|con
init|=
operator|(
name|ConnectionInfo
operator|)
name|obj
decl_stmt|;
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|host
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|host
operator|.
name|equalsIgnoreCase
argument_list|(
name|con
operator|.
name|host
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|port
operator|>=
literal|0
operator|&&
name|this
operator|.
name|port
operator|!=
name|con
operator|.
name|port
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|user
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|user
operator|.
name|equalsIgnoreCase
argument_list|(
name|con
operator|.
name|user
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|hashCode
operator|+=
name|host
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|hashCode
operator|+=
name|port
expr_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|hashCode
operator|+=
name|user
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
block|}
block|}
end_class

end_unit

