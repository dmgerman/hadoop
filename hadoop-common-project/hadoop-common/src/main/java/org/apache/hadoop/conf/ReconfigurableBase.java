begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationUtil
operator|.
name|PropertyChange
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility base class for implementing the Reconfigurable interface.  *  * Subclasses should override reconfigurePropertyImpl to change individual  * properties and getReconfigurableProperties to get all properties that  * can be changed at run time.  */
end_comment

begin_class
DECL|class|ReconfigurableBase
specifier|public
specifier|abstract
class|class
name|ReconfigurableBase
extends|extends
name|Configured
implements|implements
name|Reconfigurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReconfigurableBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Use for testing purpose.
DECL|field|reconfigurationUtil
specifier|private
name|ReconfigurationUtil
name|reconfigurationUtil
init|=
operator|new
name|ReconfigurationUtil
argument_list|()
decl_stmt|;
comment|/** Background thread to reload configuration. */
DECL|field|reconfigThread
specifier|private
name|Thread
name|reconfigThread
init|=
literal|null
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|field|reconfigLock
specifier|private
name|Object
name|reconfigLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * The timestamp when the<code>reconfigThread</code> starts.    */
DECL|field|startTime
specifier|private
name|long
name|startTime
init|=
literal|0
decl_stmt|;
comment|/**    * The timestamp when the<code>reconfigThread</code> finishes.    */
DECL|field|endTime
specifier|private
name|long
name|endTime
init|=
literal|0
decl_stmt|;
comment|/**    * A map of<changed property, error message>. If error message is present,    * it contains the messages about the error occurred when applies the particular    * change. Otherwise, it indicates that the change has been successfully applied.    */
DECL|field|status
specifier|private
name|Map
argument_list|<
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|status
init|=
literal|null
decl_stmt|;
comment|/**    * Construct a ReconfigurableBase.    */
DECL|method|ReconfigurableBase ()
specifier|public
name|ReconfigurableBase
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a ReconfigurableBase with the {@link Configuration}    * conf.    */
DECL|method|ReconfigurableBase (Configuration conf)
specifier|public
name|ReconfigurableBase
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|conf
operator|==
literal|null
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setReconfigurationUtil (ReconfigurationUtil ru)
specifier|public
name|void
name|setReconfigurationUtil
parameter_list|(
name|ReconfigurationUtil
name|ru
parameter_list|)
block|{
name|reconfigurationUtil
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ru
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getChangedProperties ( Configuration newConf, Configuration oldConf)
specifier|public
name|Collection
argument_list|<
name|PropertyChange
argument_list|>
name|getChangedProperties
parameter_list|(
name|Configuration
name|newConf
parameter_list|,
name|Configuration
name|oldConf
parameter_list|)
block|{
return|return
name|reconfigurationUtil
operator|.
name|parseChangedProperties
argument_list|(
name|newConf
argument_list|,
name|oldConf
argument_list|)
return|;
block|}
comment|/**    * A background thread to apply configuration changes.    */
DECL|class|ReconfigurationThread
specifier|private
specifier|static
class|class
name|ReconfigurationThread
extends|extends
name|Thread
block|{
DECL|field|parent
specifier|private
name|ReconfigurableBase
name|parent
decl_stmt|;
DECL|method|ReconfigurationThread (ReconfigurableBase base)
name|ReconfigurationThread
parameter_list|(
name|ReconfigurableBase
name|base
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|base
expr_stmt|;
block|}
comment|// See {@link ReconfigurationServlet#applyChanges}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting reconfiguration task."
argument_list|)
expr_stmt|;
name|Configuration
name|oldConf
init|=
name|this
operator|.
name|parent
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|PropertyChange
argument_list|>
name|changes
init|=
name|this
operator|.
name|parent
operator|.
name|getChangedProperties
argument_list|(
name|newConf
argument_list|,
name|oldConf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyChange
name|change
range|:
name|changes
control|)
block|{
name|String
name|errorMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|parent
operator|.
name|isPropertyReconfigurable
argument_list|(
name|change
operator|.
name|prop
argument_list|)
condition|)
block|{
name|errorMessage
operator|=
literal|"Property "
operator|+
name|change
operator|.
name|prop
operator|+
literal|" is not reconfigurable"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|change
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Change property: "
operator|+
name|change
operator|.
name|prop
operator|+
literal|" from \""
operator|+
operator|(
operator|(
name|change
operator|.
name|oldVal
operator|==
literal|null
operator|)
condition|?
literal|"<default>"
else|:
name|change
operator|.
name|oldVal
operator|)
operator|+
literal|"\" to \""
operator|+
operator|(
operator|(
name|change
operator|.
name|newVal
operator|==
literal|null
operator|)
condition|?
literal|"<default>"
else|:
name|change
operator|.
name|newVal
operator|)
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|parent
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|change
operator|.
name|prop
argument_list|,
name|change
operator|.
name|newVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|put
argument_list|(
name|change
argument_list|,
name|Optional
operator|.
name|fromNullable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|parent
operator|.
name|reconfigLock
init|)
block|{
name|this
operator|.
name|parent
operator|.
name|endTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|status
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|.
name|reconfigThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Start a reconfiguration task to reload configuration in background.    */
DECL|method|startReconfigurationTask ()
specifier|public
name|void
name|startReconfigurationTask
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|reconfigLock
init|)
block|{
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"The server is stopped."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
if|if
condition|(
name|reconfigThread
operator|!=
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"Another reconfiguration task is running."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
name|reconfigThread
operator|=
operator|new
name|ReconfigurationThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|reconfigThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reconfigThread
operator|.
name|setName
argument_list|(
literal|"Reconfiguration Task"
argument_list|)
expr_stmt|;
name|reconfigThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getReconfigurationTaskStatus ()
specifier|public
name|ReconfigurationTaskStatus
name|getReconfigurationTaskStatus
parameter_list|()
block|{
synchronized|synchronized
init|(
name|reconfigLock
init|)
block|{
if|if
condition|(
name|reconfigThread
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ReconfigurationTaskStatus
argument_list|(
name|startTime
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
operator|new
name|ReconfigurationTaskStatus
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|status
argument_list|)
return|;
block|}
block|}
DECL|method|shutdownReconfigurationTask ()
specifier|public
name|void
name|shutdownReconfigurationTask
parameter_list|()
block|{
name|Thread
name|tempThread
decl_stmt|;
synchronized|synchronized
init|(
name|reconfigLock
init|)
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|reconfigThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|tempThread
operator|=
name|reconfigThread
expr_stmt|;
name|reconfigThread
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|tempThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * {@inheritDoc}    *    * This method makes the change to this objects {@link Configuration}    * and calls reconfigurePropertyImpl to update internal data structures.    * This method cannot be overridden, subclasses should instead override    * reconfigureProperty.    */
annotation|@
name|Override
DECL|method|reconfigureProperty (String property, String newVal)
specifier|public
specifier|final
name|String
name|reconfigureProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
block|{
if|if
condition|(
name|isPropertyReconfigurable
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"changing property "
operator|+
name|property
operator|+
literal|" to "
operator|+
name|newVal
argument_list|)
expr_stmt|;
name|String
name|oldVal
decl_stmt|;
synchronized|synchronized
init|(
name|getConf
argument_list|()
init|)
block|{
name|oldVal
operator|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|reconfigurePropertyImpl
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConf
argument_list|()
operator|.
name|unset
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ReconfigurationException
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    *    * Subclasses must override this.    */
annotation|@
name|Override
DECL|method|getReconfigurableProperties ()
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|String
argument_list|>
name|getReconfigurableProperties
parameter_list|()
function_decl|;
comment|/**    * {@inheritDoc}    *    * Subclasses may wish to override this with a more efficient implementation.    */
annotation|@
name|Override
DECL|method|isPropertyReconfigurable (String property)
specifier|public
name|boolean
name|isPropertyReconfigurable
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|getReconfigurableProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**    * Change a configuration property.    *    * Subclasses must override this. This method applies the change to    * all internal data structures derived from the configuration property    * that is being changed. If this object owns other Reconfigurable objects    * reconfigureProperty should be called recursively to make sure that    * to make sure that the configuration of these objects is updated.    */
DECL|method|reconfigurePropertyImpl (String property, String newVal)
specifier|protected
specifier|abstract
name|void
name|reconfigurePropertyImpl
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
function_decl|;
block|}
end_class

end_unit

