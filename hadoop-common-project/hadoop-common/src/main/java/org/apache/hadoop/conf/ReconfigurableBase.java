begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Utility base class for implementing the Reconfigurable interface.  *  * Subclasses should override reconfigurePropertyImpl to change individual  * properties and getReconfigurableProperties to get all properties that  * can be changed at run time.  */
end_comment

begin_class
DECL|class|ReconfigurableBase
specifier|public
specifier|abstract
class|class
name|ReconfigurableBase
extends|extends
name|Configured
implements|implements
name|Reconfigurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReconfigurableBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Construct a ReconfigurableBase.    */
DECL|method|ReconfigurableBase ()
specifier|public
name|ReconfigurableBase
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a ReconfigurableBase with the {@link Configuration}    * conf.    */
DECL|method|ReconfigurableBase (Configuration conf)
specifier|public
name|ReconfigurableBase
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|conf
operator|==
literal|null
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    *    * This method makes the change to this objects {@link Configuration}    * and calls reconfigurePropertyImpl to update internal data structures.    * This method cannot be overridden, subclasses should instead override    * reconfigureProperty.    */
annotation|@
name|Override
DECL|method|reconfigureProperty (String property, String newVal)
specifier|public
specifier|final
name|String
name|reconfigureProperty
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
block|{
if|if
condition|(
name|isPropertyReconfigurable
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"changing property "
operator|+
name|property
operator|+
literal|" to "
operator|+
name|newVal
argument_list|)
expr_stmt|;
name|String
name|oldVal
decl_stmt|;
synchronized|synchronized
init|(
name|getConf
argument_list|()
init|)
block|{
name|oldVal
operator|=
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|reconfigurePropertyImpl
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConf
argument_list|()
operator|.
name|unset
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldVal
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ReconfigurationException
argument_list|(
name|property
argument_list|,
name|newVal
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    *    * Subclasses must override this.    */
annotation|@
name|Override
DECL|method|getReconfigurableProperties ()
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|String
argument_list|>
name|getReconfigurableProperties
parameter_list|()
function_decl|;
comment|/**    * {@inheritDoc}    *    * Subclasses may wish to override this with a more efficient implementation.    */
annotation|@
name|Override
DECL|method|isPropertyReconfigurable (String property)
specifier|public
name|boolean
name|isPropertyReconfigurable
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|getReconfigurableProperties
argument_list|()
operator|.
name|contains
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**    * Change a configuration property.    *    * Subclasses must override this. This method applies the change to    * all internal data structures derived from the configuration property    * that is being changed. If this object owns other Reconfigurable objects    * reconfigureProperty should be called recursively to make sure that    * to make sure that the configuration of these objects is updated.    */
DECL|method|reconfigurePropertyImpl (String property, String newVal)
specifier|protected
specifier|abstract
name|void
name|reconfigurePropertyImpl
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
function_decl|;
block|}
end_class

end_unit

