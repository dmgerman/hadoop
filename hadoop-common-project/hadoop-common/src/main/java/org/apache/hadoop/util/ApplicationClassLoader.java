begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  * A {@link URLClassLoader} for application isolation. Classes from the  * application JARs are loaded in preference to the parent loader.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ApplicationClassLoader
specifier|public
class|class
name|ApplicationClassLoader
extends|extends
name|URLClassLoader
block|{
comment|/**    * Default value of the system classes if the user did not override them.    * JDK classes, hadoop classes and resources, and some select third-party    * classes are considered system classes, and are not loaded by the    * application classloader.    */
DECL|field|SYSTEM_CLASSES_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_CLASSES_DEFAULT
decl_stmt|;
DECL|field|PROPERTIES_FILE
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES_FILE
init|=
literal|"org.apache.hadoop.application-classloader.properties"
decl_stmt|;
DECL|field|SYSTEM_CLASSES_DEFAULT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_CLASSES_DEFAULT_KEY
init|=
literal|"system.classes.default"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ApplicationClassLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|JAR_FILENAME_FILTER
specifier|private
specifier|static
specifier|final
name|FilenameFilter
name|JAR_FILENAME_FILTER
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".JAR"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
static|static
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|ApplicationClassLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|PROPERTIES_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"properties file "
operator|+
name|PROPERTIES_FILE
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
comment|// get the system classes default
name|String
name|systemClassesDefault
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|SYSTEM_CLASSES_DEFAULT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemClassesDefault
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
literal|"property "
operator|+
name|SYSTEM_CLASSES_DEFAULT_KEY
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
name|SYSTEM_CLASSES_DEFAULT
operator|=
name|systemClassesDefault
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|parent
specifier|private
specifier|final
name|ClassLoader
name|parent
decl_stmt|;
DECL|field|systemClasses
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|systemClasses
decl_stmt|;
DECL|method|ApplicationClassLoader (URL[] urls, ClassLoader parent, List<String> systemClasses)
specifier|public
name|ApplicationClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parent
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|systemClasses
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"urls: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|urls
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"system classes: "
operator|+
name|systemClasses
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No parent classloader!"
argument_list|)
throw|;
block|}
comment|// if the caller-specified system classes are null or empty, use the default
name|this
operator|.
name|systemClasses
operator|=
operator|(
name|systemClasses
operator|==
literal|null
operator|||
name|systemClasses
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|SYSTEM_CLASSES_DEFAULT
argument_list|)
argument_list|)
else|:
name|systemClasses
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"system classes: "
operator|+
name|this
operator|.
name|systemClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationClassLoader (String classpath, ClassLoader parent, List<String> systemClasses)
specifier|public
name|ApplicationClassLoader
parameter_list|(
name|String
name|classpath
parameter_list|,
name|ClassLoader
name|parent
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|systemClasses
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
name|constructUrlsFromClasspath
argument_list|(
name|classpath
argument_list|)
argument_list|,
name|parent
argument_list|,
name|systemClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|constructUrlsFromClasspath (String classpath)
specifier|static
name|URL
index|[]
name|constructUrlsFromClasspath
parameter_list|(
name|String
name|classpath
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|classpath
operator|.
name|split
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
control|)
block|{
if|if
condition|(
name|element
operator|.
name|endsWith
argument_list|(
literal|"/*"
argument_list|)
condition|)
block|{
name|String
name|dir
init|=
name|element
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|element
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|listFiles
argument_list|(
name|JAR_FILENAME_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|element
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResource (String name)
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isSystemClass
argument_list|(
name|name
argument_list|,
name|systemClasses
argument_list|)
condition|)
block|{
name|url
operator|=
name|findResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove leading / off "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|findResource
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|parent
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getResource("
operator|+
name|name
operator|+
literal|")="
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|url
return|;
block|}
annotation|@
name|Override
DECL|method|loadClass (String name)
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|this
operator|.
name|loadClass
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadClass (String name, boolean resolve)
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading class: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ClassNotFoundException
name|ex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
operator|&&
operator|!
name|isSystemClass
argument_list|(
name|name
argument_list|,
name|systemClasses
argument_list|)
condition|)
block|{
comment|// Try to load class from this classloader's URLs. Note that this is like
comment|// the servlet spec, not the usual Java 2 behaviour where we ask the
comment|// parent to attempt to load first.
try|try
block|{
name|c
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|c
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded class: "
operator|+
name|name
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
comment|// try parent
name|c
operator|=
name|parent
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|c
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded class from parent: "
operator|+
name|name
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
name|ex
operator|!=
literal|null
condition|?
name|ex
else|:
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|resolve
condition|)
block|{
name|resolveClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
DECL|method|isSystemClass (String name, List<String> systemClasses)
specifier|public
specifier|static
name|boolean
name|isSystemClass
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|systemClasses
parameter_list|)
block|{
if|if
condition|(
name|systemClasses
operator|!=
literal|null
condition|)
block|{
name|String
name|canonicalName
init|=
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
while|while
condition|(
name|canonicalName
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|canonicalName
operator|=
name|canonicalName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|c
range|:
name|systemClasses
control|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
operator|&&
name|canonicalName
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
elseif|else
if|if
condition|(
name|canonicalName
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

