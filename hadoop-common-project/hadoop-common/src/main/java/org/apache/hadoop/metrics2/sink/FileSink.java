begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.sink
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|sink
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_comment
comment|/**  * A metrics sink that writes to a file  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FileSink
specifier|public
class|class
name|FileSink
implements|implements
name|MetricsSink
implements|,
name|Closeable
block|{
DECL|field|FILENAME_KEY
specifier|private
specifier|static
specifier|final
name|String
name|FILENAME_KEY
init|=
literal|"filename"
decl_stmt|;
DECL|field|writer
specifier|private
name|PrintStream
name|writer
decl_stmt|;
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|String
name|filename
init|=
name|conf
operator|.
name|getString
argument_list|(
name|FILENAME_KEY
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|filename
operator|==
literal|null
condition|?
name|System
operator|.
name|out
else|:
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Error creating "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|record
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|record
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|": "
decl_stmt|;
for|for
control|(
name|MetricsTag
name|tag
range|:
name|record
operator|.
name|tags
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|tag
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|tag
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AbstractMetric
name|metric
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
name|writer
operator|.
name|print
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|metric
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|metric
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

