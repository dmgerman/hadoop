begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitCodeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_comment
comment|/**  * A service launch exception that includes an exit code.  *<p>  * When caught by the ServiceLauncher, it will convert that  * into a process exit code.  *   * The {@link #ServiceLaunchException(int, String, Object...)} constructor  * generates formatted exceptions.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ServiceLaunchException
specifier|public
class|class
name|ServiceLaunchException
extends|extends
name|ExitUtil
operator|.
name|ExitException
implements|implements
name|ExitCodeProvider
implements|,
name|LauncherExitCodes
block|{
comment|/**    * Create an exception with the specific exit code.    * @param exitCode exit code    * @param cause cause of the exception    */
DECL|method|ServiceLaunchException (int exitCode, Throwable cause)
specifier|public
name|ServiceLaunchException
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|exitCode
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an exception with the specific exit code and text.    * @param exitCode exit code    * @param message message to use in exception    */
DECL|method|ServiceLaunchException (int exitCode, String message)
specifier|public
name|ServiceLaunchException
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|exitCode
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a formatted exception.    *<p>    * This uses {@link String#format(String, Object...)}    * to build the formatted exception in the ENGLISH locale.    *<p>    * If the last argument is a throwable, it becomes the cause of the exception.    * It will also be used as a parameter for the format.    * @param exitCode exit code    * @param format format for message to use in exception    * @param args list of arguments    */
DECL|method|ServiceLaunchException (int exitCode, String format, Object... args)
specifier|public
name|ServiceLaunchException
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|exitCode
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
operator|&&
operator|(
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Throwable
operator|)
condition|)
block|{
name|initCause
argument_list|(
operator|(
name|Throwable
operator|)
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a formatted exception.    *<p>    * This uses {@link String#format(String, Object...)}    * to build the formatted exception in the ENGLISH locale.    * @param exitCode exit code    * @param cause inner cause    * @param format format for message to use in exception    * @param args list of arguments    */
DECL|method|ServiceLaunchException (int exitCode, Throwable cause, String format, Object... args)
specifier|public
name|ServiceLaunchException
parameter_list|(
name|int
name|exitCode
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|exitCode
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
name|format
argument_list|,
name|args
argument_list|)
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

