begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSProtos
operator|.
name|LocalFileSystemPathHandleProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * Opaque handle to an entity in a FileSystem.  */
end_comment

begin_class
DECL|class|LocalFileSystemPathHandle
specifier|public
class|class
name|LocalFileSystemPathHandle
implements|implements
name|PathHandle
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|mtime
specifier|private
specifier|final
name|Long
name|mtime
decl_stmt|;
DECL|method|LocalFileSystemPathHandle (String path, Optional<Long> mtime)
specifier|public
name|LocalFileSystemPathHandle
parameter_list|(
name|String
name|path
parameter_list|,
name|Optional
argument_list|<
name|Long
argument_list|>
name|mtime
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|mtime
operator|=
name|mtime
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalFileSystemPathHandle (ByteBuffer bytes)
specifier|public
name|LocalFileSystemPathHandle
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|bytes
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing PathHandle"
argument_list|)
throw|;
block|}
name|LocalFileSystemPathHandleProto
name|p
init|=
name|LocalFileSystemPathHandleProto
operator|.
name|parseFrom
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|p
operator|.
name|hasPath
argument_list|()
condition|?
name|p
operator|.
name|getPath
argument_list|()
else|:
literal|null
expr_stmt|;
name|mtime
operator|=
name|p
operator|.
name|hasMtime
argument_list|()
condition|?
name|p
operator|.
name|getMtime
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|verify (FileStatus stat)
specifier|public
name|void
name|verify
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
throws|throws
name|InvalidPathHandleException
block|{
if|if
condition|(
literal|null
operator|==
name|stat
condition|)
block|{
throw|throw
operator|new
name|InvalidPathHandleException
argument_list|(
literal|"Could not resolve handle"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mtime
operator|!=
literal|null
operator|&&
name|mtime
operator|!=
name|stat
operator|.
name|getModificationTime
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPathHandleException
argument_list|(
literal|"Content changed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|bytes ()
specifier|public
name|ByteBuffer
name|bytes
parameter_list|()
block|{
name|LocalFileSystemPathHandleProto
operator|.
name|Builder
name|b
init|=
name|LocalFileSystemPathHandleProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtime
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setMtime
argument_list|(
name|mtime
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
operator|.
name|toByteString
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LocalFileSystemPathHandle
name|that
init|=
operator|(
name|LocalFileSystemPathHandle
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|path
argument_list|,
name|that
operator|.
name|path
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|mtime
argument_list|,
name|that
operator|.
name|mtime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|path
argument_list|,
name|mtime
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LocalFileSystemPathHandle{"
operator|+
literal|"path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|", mtime="
operator|+
name|mtime
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

