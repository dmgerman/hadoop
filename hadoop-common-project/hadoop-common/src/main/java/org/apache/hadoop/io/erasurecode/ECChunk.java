begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A wrapper for ByteBuffer or bytes array for an erasure code chunk.  */
end_comment

begin_class
DECL|class|ECChunk
specifier|public
class|class
name|ECChunk
block|{
DECL|field|chunkBuffer
specifier|private
name|ByteBuffer
name|chunkBuffer
decl_stmt|;
comment|/**    * Wrapping a ByteBuffer    * @param buffer    */
DECL|method|ECChunk (ByteBuffer buffer)
specifier|public
name|ECChunk
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|chunkBuffer
operator|=
name|buffer
expr_stmt|;
block|}
comment|/**    * Wrapping a bytes array    * @param buffer    */
DECL|method|ECChunk (byte[] buffer)
specifier|public
name|ECChunk
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|chunkBuffer
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert to ByteBuffer    * @return ByteBuffer    */
DECL|method|getBuffer ()
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|chunkBuffer
return|;
block|}
comment|/**    * Convert an array of this chunks to an array of ByteBuffers    * @param chunks    * @return an array of ByteBuffers    */
DECL|method|toBuffers (ECChunk[] chunks)
specifier|public
specifier|static
name|ByteBuffer
index|[]
name|toBuffers
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
name|chunks
operator|.
name|length
index|]
decl_stmt|;
name|ECChunk
name|chunk
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunk
operator|=
name|chunks
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|chunk
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|buffers
return|;
block|}
comment|/**    * Convert to a bytes array, just for test usage.    * @return bytes array    */
DECL|method|toBytesArray ()
specifier|public
name|byte
index|[]
name|toBytesArray
parameter_list|()
block|{
name|byte
index|[]
name|bytesArr
init|=
operator|new
name|byte
index|[
name|chunkBuffer
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
comment|// Avoid affecting the original one
name|chunkBuffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|chunkBuffer
operator|.
name|get
argument_list|(
name|bytesArr
argument_list|)
expr_stmt|;
name|chunkBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|bytesArr
return|;
block|}
block|}
end_class

end_unit

