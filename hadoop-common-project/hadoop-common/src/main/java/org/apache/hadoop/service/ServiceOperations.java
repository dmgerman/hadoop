begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class contains a set of methods to work with services, especially  * to walk them through their lifecycle.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|ServiceOperations
specifier|public
specifier|final
class|class
name|ServiceOperations
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ServiceOperations ()
specifier|private
name|ServiceOperations
parameter_list|()
block|{   }
comment|/**    * Stop a service.    *<p/>Do nothing if the service is null or not    * in a state in which it can be/needs to be stopped.    *<p/>    * The service state is checked<i>before</i> the operation begins.    * This process is<i>not</i> thread safe.    * @param service a service or null    */
DECL|method|stop (Service service)
specifier|public
specifier|static
name|void
name|stop
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stop a service; if it is null do nothing. Exceptions are caught and    * logged at warn level. (but not Throwables). This operation is intended to    * be used in cleanup operations    *    * @param service a service; may be null    * @return any exception that was caught; null if none was.    */
DECL|method|stopQuietly (Service service)
specifier|public
specifier|static
name|Exception
name|stopQuietly
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
return|return
name|stopQuietly
argument_list|(
name|LOG
argument_list|,
name|service
argument_list|)
return|;
block|}
comment|/**    * Stop a service; if it is null do nothing. Exceptions are caught and    * logged at warn level. (but not Throwables). This operation is intended to    * be used in cleanup operations    *    * @param log the log to warn at    * @param service a service; may be null    * @return any exception that was caught; null if none was.    * @see ServiceOperations#stopQuietly(Service)    */
DECL|method|stopQuietly (Log log, Service service)
specifier|public
specifier|static
name|Exception
name|stopQuietly
parameter_list|(
name|Log
name|log
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
try|try
block|{
name|stop
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"When stopping the service "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Stop a service; if it is null do nothing. Exceptions are caught and    * logged at warn level. (but not Throwables). This operation is intended to    * be used in cleanup operations    *    * @param log the log to warn at    * @param service a service; may be null    * @return any exception that was caught; null if none was.    * @see ServiceOperations#stopQuietly(Service)    */
DECL|method|stopQuietly (Logger log, Service service)
specifier|public
specifier|static
name|Exception
name|stopQuietly
parameter_list|(
name|Logger
name|log
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
try|try
block|{
name|stop
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"When stopping the service {}"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Class to manage a list of {@link ServiceStateChangeListener} instances,    * including a notification loop that is robust against changes to the list    * during the notification process.    */
DECL|class|ServiceListeners
specifier|public
specifier|static
class|class
name|ServiceListeners
block|{
comment|/**      * List of state change listeners; it is final to guarantee      * that it will never be null.      */
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|ServiceStateChangeListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceStateChangeListener
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Thread-safe addition of a new listener to the end of a list.      * Attempts to re-register a listener that is already registered      * will be ignored.      * @param l listener      */
DECL|method|add (ServiceStateChangeListener l)
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|ServiceStateChangeListener
name|l
parameter_list|)
block|{
if|if
condition|(
operator|!
name|listeners
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove any registration of a listener from the listener list.      * @param l listener      * @return true if the listener was found (and then removed)      */
DECL|method|remove (ServiceStateChangeListener l)
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|ServiceStateChangeListener
name|l
parameter_list|)
block|{
return|return
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
return|;
block|}
comment|/**      * Reset the listener list      */
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Change to a new state and notify all listeners.      * This method will block until all notifications have been issued.      * It caches the list of listeners before the notification begins,      * so additions or removal of listeners will not be visible.      * @param service the service that has changed state      */
DECL|method|notifyListeners (Service service)
specifier|public
name|void
name|notifyListeners
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
comment|//take a very fast snapshot of the callback list
comment|//very much like CopyOnWriteArrayList, only more minimal
name|ServiceStateChangeListener
index|[]
name|callbacks
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|callbacks
operator|=
name|listeners
operator|.
name|toArray
argument_list|(
operator|new
name|ServiceStateChangeListener
index|[
name|listeners
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|//iterate through the listeners outside the synchronized method,
comment|//ensuring that listener registration/unregistration doesn't break anything
for|for
control|(
name|ServiceStateChangeListener
name|l
range|:
name|callbacks
control|)
block|{
name|l
operator|.
name|stateChanged
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

