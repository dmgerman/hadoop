begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|SignalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Handler of interrupts that relays them to a registered  * implementation of {@link IrqHandler.Interrupted}.  *  * This class bundles up all the compiler warnings about abuse of sun.misc  * interrupt handling code into one place.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UseOfSunClasses"
argument_list|)
DECL|class|IrqHandler
specifier|public
specifier|final
class|class
name|IrqHandler
implements|implements
name|SignalHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IrqHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Definition of the Control-C handler name: {@value}.    */
DECL|field|CONTROL_C
specifier|public
specifier|static
specifier|final
name|String
name|CONTROL_C
init|=
literal|"INT"
decl_stmt|;
comment|/**    * Definition of default<code>kill</code> signal: {@value}.    */
DECL|field|SIGTERM
specifier|public
specifier|static
specifier|final
name|String
name|SIGTERM
init|=
literal|"TERM"
decl_stmt|;
comment|/**    * Signal name.    */
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * Handler to relay to.    */
DECL|field|handler
specifier|private
specifier|final
name|Interrupted
name|handler
decl_stmt|;
comment|/** Count of how many times a signal has been raised. */
DECL|field|signalCount
specifier|private
specifier|final
name|AtomicInteger
name|signalCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Stored signal.    */
DECL|field|signal
specifier|private
name|Signal
name|signal
decl_stmt|;
comment|/**    * Create an IRQ handler bound to the specific interrupt.    * @param name signal name    * @param handler handler    */
DECL|method|IrqHandler (String name, Interrupted handler)
specifier|public
name|IrqHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|Interrupted
name|handler
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|name
operator|!=
literal|null
argument_list|,
literal|"Null \"name\""
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|handler
operator|!=
literal|null
argument_list|,
literal|"Null \"handler\""
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * Bind to the interrupt handler.    * @throws IllegalArgumentException if the exception could not be set    */
DECL|method|bind ()
name|void
name|bind
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|signal
operator|==
literal|null
argument_list|,
literal|"Handler already bound"
argument_list|)
expr_stmt|;
try|try
block|{
name|signal
operator|=
operator|new
name|Signal
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Signal
operator|.
name|handle
argument_list|(
name|signal
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not set handler for signal \""
operator|+
name|name
operator|+
literal|"\"."
operator|+
literal|"This can happen if the JVM has the -Xrs set."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the signal name.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Raise the signal.    */
DECL|method|raise ()
specifier|public
name|void
name|raise
parameter_list|()
block|{
name|Signal
operator|.
name|raise
argument_list|(
name|signal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IrqHandler for signal "
operator|+
name|name
return|;
block|}
comment|/**    * Handler for the JVM API for signal handling.    * @param s signal raised    */
annotation|@
name|Override
DECL|method|handle (Signal s)
specifier|public
name|void
name|handle
parameter_list|(
name|Signal
name|s
parameter_list|)
block|{
name|signalCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|InterruptData
name|data
init|=
operator|new
name|InterruptData
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getNumber
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted: {}"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|handler
operator|.
name|interrupted
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the count of how many times a signal has been raised.    * @return the count of signals    */
DECL|method|getSignalCount ()
specifier|public
name|int
name|getSignalCount
parameter_list|()
block|{
return|return
name|signalCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Callback issues on an interrupt.    */
DECL|interface|Interrupted
specifier|public
interface|interface
name|Interrupted
block|{
comment|/**      * Handle an interrupt.      * @param interruptData data      */
DECL|method|interrupted (InterruptData interruptData)
name|void
name|interrupted
parameter_list|(
name|InterruptData
name|interruptData
parameter_list|)
function_decl|;
block|}
comment|/**    * Interrupt data to pass on.    */
DECL|class|InterruptData
specifier|public
specifier|static
class|class
name|InterruptData
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|number
specifier|private
specifier|final
name|int
name|number
decl_stmt|;
DECL|method|InterruptData (String name, int number)
specifier|public
name|InterruptData
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getNumber ()
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"signal "
operator|+
name|name
operator|+
literal|'('
operator|+
name|number
operator|+
literal|')'
return|;
block|}
block|}
block|}
end_class

end_unit

