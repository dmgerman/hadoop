begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MutableMetricsFactory
specifier|public
class|class
name|MutableMetricsFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MutableMetricsFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|newForField (Field field, Metric annotation, MetricsRegistry registry)
name|MutableMetric
name|newForField
parameter_list|(
name|Field
name|field
parameter_list|,
name|Metric
name|annotation
parameter_list|,
name|MetricsRegistry
name|registry
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"field "
operator|+
name|field
operator|+
literal|" with annotation "
operator|+
name|annotation
argument_list|)
expr_stmt|;
block|}
name|MetricsInfo
name|info
init|=
name|getInfo
argument_list|(
name|annotation
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|MutableMetric
name|metric
init|=
name|newForField
argument_list|(
name|field
argument_list|,
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|add
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|metric
argument_list|)
expr_stmt|;
return|return
name|metric
return|;
block|}
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|==
name|MutableCounterInt
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newCounter
argument_list|(
name|info
argument_list|,
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableCounterLong
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newCounter
argument_list|(
name|info
argument_list|,
literal|0L
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableGaugeInt
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|,
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableGaugeLong
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|,
literal|0L
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableRate
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newRate
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|info
operator|.
name|description
argument_list|()
argument_list|,
name|annotation
operator|.
name|always
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableRates
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|MutableRates
argument_list|(
name|registry
argument_list|)
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|MutableStat
operator|.
name|class
condition|)
block|{
return|return
name|registry
operator|.
name|newStat
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|info
operator|.
name|description
argument_list|()
argument_list|,
name|annotation
operator|.
name|sampleName
argument_list|()
argument_list|,
name|annotation
operator|.
name|valueName
argument_list|()
argument_list|,
name|annotation
operator|.
name|always
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|MetricsException
argument_list|(
literal|"Unsupported metric field "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" of type "
operator|+
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|newForMethod (Object source, Method method, Metric annotation, MetricsRegistry registry)
name|MutableMetric
name|newForMethod
parameter_list|(
name|Object
name|source
parameter_list|,
name|Method
name|method
parameter_list|,
name|Metric
name|annotation
parameter_list|,
name|MetricsRegistry
name|registry
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"method "
operator|+
name|method
operator|+
literal|" with annotation "
operator|+
name|annotation
argument_list|)
expr_stmt|;
block|}
name|MetricsInfo
name|info
init|=
name|getInfo
argument_list|(
name|annotation
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|MutableMetric
name|metric
init|=
name|newForMethod
argument_list|(
name|source
argument_list|,
name|method
argument_list|,
name|annotation
argument_list|)
decl_stmt|;
name|metric
operator|=
name|metric
operator|!=
literal|null
condition|?
name|metric
else|:
operator|new
name|MethodMetric
argument_list|(
name|source
argument_list|,
name|method
argument_list|,
name|info
argument_list|,
name|annotation
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|add
argument_list|(
name|info
operator|.
name|name
argument_list|()
argument_list|,
name|metric
argument_list|)
expr_stmt|;
return|return
name|metric
return|;
block|}
comment|/**    * Override to handle custom mutable metrics for fields    * @param field of the metric    * @param annotation  of the field    * @return a new metric object or null    */
DECL|method|newForField (Field field, Metric annotation)
specifier|protected
name|MutableMetric
name|newForField
parameter_list|(
name|Field
name|field
parameter_list|,
name|Metric
name|annotation
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Override to handle custom mutable metrics for methods    * @param source the metrics source object    * @param method to return the metric    * @param annotation of the method    * @return a new metric object or null    */
DECL|method|newForMethod (Object source, Method method, Metric annotation)
specifier|protected
name|MutableMetric
name|newForMethod
parameter_list|(
name|Object
name|source
parameter_list|,
name|Method
name|method
parameter_list|,
name|Metric
name|annotation
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getInfo (Metric annotation, Field field)
specifier|protected
name|MetricsInfo
name|getInfo
parameter_list|(
name|Metric
name|annotation
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
return|return
name|getInfo
argument_list|(
name|annotation
argument_list|,
name|getName
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getName (Field field)
specifier|protected
name|String
name|getName
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInfo (Metric annotation, Method method)
specifier|protected
name|MetricsInfo
name|getInfo
parameter_list|(
name|Metric
name|annotation
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|getInfo
argument_list|(
name|annotation
argument_list|,
name|getName
argument_list|(
name|method
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getInfo (Class<?> cls, Metrics annotation)
specifier|protected
name|MetricsInfo
name|getInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Metrics
name|annotation
parameter_list|)
block|{
name|String
name|name
init|=
name|annotation
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|about
init|=
name|annotation
operator|.
name|about
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|cls
operator|.
name|getSimpleName
argument_list|()
else|:
name|name
decl_stmt|;
return|return
name|Interns
operator|.
name|info
argument_list|(
name|name2
argument_list|,
name|about
operator|.
name|isEmpty
argument_list|()
condition|?
name|name2
else|:
name|about
argument_list|)
return|;
block|}
comment|/**    * Remove the prefix "get", if any, from the method name. Return the    * capacitalized method name."    */
DECL|method|getName (Method method)
specifier|protected
name|String
name|getName
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
return|return
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
return|return
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|methodName
argument_list|)
return|;
block|}
DECL|method|getInfo (Metric annotation, String defaultName)
specifier|protected
name|MetricsInfo
name|getInfo
parameter_list|(
name|Metric
name|annotation
parameter_list|,
name|String
name|defaultName
parameter_list|)
block|{
name|String
index|[]
name|value
init|=
name|annotation
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// Use name and description from the annotation
return|return
name|Interns
operator|.
name|info
argument_list|(
name|value
index|[
literal|0
index|]
argument_list|,
name|value
index|[
literal|1
index|]
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// Use description from the annotation and method name as metric name
return|return
name|Interns
operator|.
name|info
argument_list|(
name|defaultName
argument_list|,
name|value
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// Use method name as metric name and description
return|return
name|Interns
operator|.
name|info
argument_list|(
name|defaultName
argument_list|,
name|defaultName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

