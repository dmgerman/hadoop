begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_comment
comment|/**  * This class extends ScriptBasedMapping class and implements   * the {@link DNSToSwitchMappingWithDependency} interface using   * a script configured via the   * {@link CommonConfigurationKeys#NET_DEPENDENCY_SCRIPT_FILE_NAME_KEY} option.  *<p/>  * It contains a static class<code>RawScriptBasedMappingWithDependency</code>  * that performs the getDependency work.  *<p/>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ScriptBasedMappingWithDependency
specifier|public
class|class
name|ScriptBasedMappingWithDependency
extends|extends
name|ScriptBasedMapping
implements|implements
name|DNSToSwitchMappingWithDependency
block|{
comment|/**    * key to the dependency script filename {@value}    */
DECL|field|DEPENDENCY_SCRIPT_FILENAME_KEY
specifier|static
specifier|final
name|String
name|DEPENDENCY_SCRIPT_FILENAME_KEY
init|=
name|CommonConfigurationKeys
operator|.
name|NET_DEPENDENCY_SCRIPT_FILE_NAME_KEY
decl_stmt|;
DECL|field|dependencyCache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|dependencyCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Create an instance with the default configuration.    *</p>    * Calling {@link #setConf(Configuration)} will trigger a    * re-evaluation of the configuration settings and so be used to    * set up the mapping script.    */
DECL|method|ScriptBasedMappingWithDependency ()
specifier|public
name|ScriptBasedMappingWithDependency
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|RawScriptBasedMappingWithDependency
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the cached mapping and convert it to its real type    * @return the inner raw script mapping.    */
DECL|method|getRawMapping ()
specifier|private
name|RawScriptBasedMappingWithDependency
name|getRawMapping
parameter_list|()
block|{
return|return
operator|(
name|RawScriptBasedMappingWithDependency
operator|)
name|rawMapping
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"script-based mapping with "
operator|+
name|getRawMapping
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    *<p/>    * This will get called in the superclass constructor, so a check is needed    * to ensure that the raw mapping is defined before trying to relaying a null    * configuration.    * @param conf    */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getRawMapping
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get dependencies in the topology for a given host    * @param name - host name for which we are getting dependency    * @return a list of hosts dependent on the provided host name    */
annotation|@
name|Override
DECL|method|getDependency (String name)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDependency
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//normalize all input names to be in the form of IP addresses
name|name
operator|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|dependencies
init|=
name|dependencyCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependencies
operator|==
literal|null
condition|)
block|{
comment|//not cached
name|dependencies
operator|=
name|getRawMapping
argument_list|()
operator|.
name|getDependency
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|dependencies
operator|!=
literal|null
condition|)
block|{
name|dependencyCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependencies
return|;
block|}
comment|/**    * This is the uncached script mapping that is fed into the cache managed    * by the superclass {@link CachedDNSToSwitchMapping}    */
DECL|class|RawScriptBasedMappingWithDependency
specifier|private
specifier|static
specifier|final
class|class
name|RawScriptBasedMappingWithDependency
extends|extends
name|ScriptBasedMapping
operator|.
name|RawScriptBasedMapping
implements|implements
name|DNSToSwitchMappingWithDependency
block|{
DECL|field|dependencyScriptName
specifier|private
name|String
name|dependencyScriptName
decl_stmt|;
comment|/**      * Set the configuration and extract the configuration parameters of interest      * @param conf the new configuration      */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|dependencyScriptName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DEPENDENCY_SCRIPT_FILENAME_KEY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dependencyScriptName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Constructor. The mapping is not ready to use until      * {@link #setConf(Configuration)} has been called      */
DECL|method|RawScriptBasedMappingWithDependency ()
specifier|public
name|RawScriptBasedMappingWithDependency
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|getDependency (String name)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDependency
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|dependencyScriptName
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|m
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|runResolveCommand
argument_list|(
name|args
argument_list|,
name|dependencyScriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|allSwitchInfo
init|=
operator|new
name|StringTokenizer
argument_list|(
name|output
argument_list|)
decl_stmt|;
while|while
condition|(
name|allSwitchInfo
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|switchInfo
init|=
name|allSwitchInfo
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|switchInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// an error occurred. return null to signify this.
comment|// (exn was already logged in runResolveCommand)
return|return
literal|null
return|;
block|}
return|return
name|m
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|dependencyScriptName
operator|!=
literal|null
condition|?
operator|(
literal|"dependency script "
operator|+
name|dependencyScriptName
operator|)
else|:
name|NO_SCRIPT
return|;
block|}
block|}
block|}
end_class

end_unit

