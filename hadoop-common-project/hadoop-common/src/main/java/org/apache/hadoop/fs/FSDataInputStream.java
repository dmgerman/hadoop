begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ByteBufferUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|IdentityHashStore
import|;
end_import

begin_comment
comment|/** Utility that wraps a {@link FSInputStream} in a {@link DataInputStream}  * and buffers input through a {@link BufferedInputStream}. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FSDataInputStream
specifier|public
class|class
name|FSDataInputStream
extends|extends
name|DataInputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
implements|,
name|ByteBufferReadable
implements|,
name|HasFileDescriptor
implements|,
name|CanSetDropBehind
implements|,
name|CanSetReadahead
implements|,
name|HasEnhancedByteBufferAccess
block|{
comment|/**    * Map ByteBuffers that we have handed out to readers to ByteBufferPool     * objects    */
specifier|private
specifier|final
name|IdentityHashStore
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBufferPool
argument_list|>
DECL|field|extendedReadBuffers
name|extendedReadBuffers
init|=
operator|new
name|IdentityHashStore
argument_list|<
name|ByteBuffer
argument_list|,
name|ByteBufferPool
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|FSDataInputStream (InputStream in)
specifier|public
name|FSDataInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|Seekable
operator|)
operator|||
operator|!
operator|(
name|in
operator|instanceof
name|PositionedReadable
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"In is not an instance of Seekable or PositionedReadable"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Seek to the given offset.    *    * @param desired offset to seek to    */
annotation|@
name|Override
DECL|method|seek (long desired)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|desired
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
name|desired
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the current position in the input stream.    *    * @return current position in the input stream    */
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
return|;
block|}
comment|/**    * Read bytes from the given position in the stream to the given buffer.    *    * @param position  position in the input stream to seek    * @param buffer    buffer into which data is read    * @param offset    offset into the buffer in which data is written    * @param length    maximum number of bytes to read    * @return total number of bytes read into the buffer, or<code>-1</code>    *         if there is no more data because the end of the stream has been    *         reached    */
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * Read bytes from the given position in the stream to the given buffer.    * Continues to read until<code>length</code> bytes have been read.    *    * @param position  position in the input stream to seek    * @param buffer    buffer into which data is read    * @param offset    offset into the buffer in which data is written    * @param length    the number of bytes to read    * @throws EOFException If the end of stream is reached while reading.    *                      If an exception is thrown an undetermined number    *                      of bytes in the buffer may have been written.     */
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * See {@link #readFully(long, byte[], int, int)}.    */
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Seek to the given position on an alternate copy of the data.    *    * @param  targetPos  position to seek to    * @return true if a new source is found, false otherwise    */
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seekToNewSource
argument_list|(
name|targetPos
argument_list|)
return|;
block|}
comment|/**    * Get a reference to the wrapped input stream. Used by unit tests.    *    * @return the underlying input stream    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|method|getWrappedStream ()
specifier|public
name|InputStream
name|getWrappedStream
parameter_list|()
block|{
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|read (ByteBuffer buf)
specifier|public
name|int
name|read
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|instanceof
name|ByteBufferReadable
condition|)
block|{
return|return
operator|(
operator|(
name|ByteBufferReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|buf
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Byte-buffer read unsupported by input stream"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileDescriptor ()
specifier|public
name|FileDescriptor
name|getFileDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|instanceof
name|HasFileDescriptor
condition|)
block|{
return|return
operator|(
operator|(
name|HasFileDescriptor
operator|)
name|in
operator|)
operator|.
name|getFileDescriptor
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|in
operator|instanceof
name|FileInputStream
condition|)
block|{
return|return
operator|(
operator|(
name|FileInputStream
operator|)
name|in
operator|)
operator|.
name|getFD
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setReadahead (Long readahead)
specifier|public
name|void
name|setReadahead
parameter_list|(
name|Long
name|readahead
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
try|try
block|{
operator|(
operator|(
name|CanSetReadahead
operator|)
name|in
operator|)
operator|.
name|setReadahead
argument_list|(
name|readahead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this stream does not support setting the readahead "
operator|+
literal|"caching strategy."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|setDropBehind (Boolean dropBehind)
specifier|public
name|void
name|setDropBehind
parameter_list|(
name|Boolean
name|dropBehind
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
try|try
block|{
operator|(
operator|(
name|CanSetDropBehind
operator|)
name|in
operator|)
operator|.
name|setDropBehind
argument_list|(
name|dropBehind
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this stream does not "
operator|+
literal|"support setting the drop-behind caching setting."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (ByteBufferPool bufferPool, int maxLength, EnumSet<ReadOption> opts)
specifier|public
name|ByteBuffer
name|read
parameter_list|(
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|EnumSet
argument_list|<
name|ReadOption
argument_list|>
name|opts
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
try|try
block|{
return|return
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|bufferPool
argument_list|,
name|maxLength
argument_list|,
name|opts
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBufferUtil
operator|.
name|fallbackRead
argument_list|(
name|this
argument_list|,
name|bufferPool
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|extendedReadBuffers
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
name|bufferPool
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
block|}
DECL|field|EMPTY_READ_OPTIONS_SET
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ReadOption
argument_list|>
name|EMPTY_READ_OPTIONS_SET
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|ReadOption
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|read (ByteBufferPool bufferPool, int maxLength)
specifier|final
specifier|public
name|ByteBuffer
name|read
parameter_list|(
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
return|return
name|read
argument_list|(
name|bufferPool
argument_list|,
name|maxLength
argument_list|,
name|EMPTY_READ_OPTIONS_SET
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|releaseBuffer (ByteBuffer buffer)
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
try|try
block|{
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|ByteBufferPool
name|bufferPool
init|=
name|extendedReadBuffers
operator|.
name|remove
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferPool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tried to release a buffer "
operator|+
literal|"that was not created by this stream."
argument_list|)
throw|;
block|}
name|bufferPool
operator|.
name|putBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

