begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_comment
comment|/**  * This class is intended to be installed by calling   * {@link Thread#setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler)}  * in the main entry point.   *  * The base class will always attempt to shut down the process if an Error  * was raised; the behavior on a standard Exception, raised outside   * process shutdown, is simply to log it.   *  * (Based on the class {@code YarnUncaughtExceptionHandler})  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UseOfSystemOutOrSystemErr"
argument_list|)
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|HadoopUncaughtExceptionHandler
specifier|public
class|class
name|HadoopUncaughtExceptionHandler
implements|implements
name|UncaughtExceptionHandler
block|{
comment|/**    * Logger.    */
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HadoopUncaughtExceptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Delegate for simple exceptions.    */
DECL|field|delegate
specifier|private
specifier|final
name|UncaughtExceptionHandler
name|delegate
decl_stmt|;
comment|/**    * Create an instance delegating to the supplied handler if    * the exception is considered "simple".    * @param delegate a delegate exception handler.    */
DECL|method|HadoopUncaughtExceptionHandler (UncaughtExceptionHandler delegate)
specifier|public
name|HadoopUncaughtExceptionHandler
parameter_list|(
name|UncaughtExceptionHandler
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|/**    * Basic exception handler -logs simple exceptions, then continues.    */
DECL|method|HadoopUncaughtExceptionHandler ()
specifier|public
name|HadoopUncaughtExceptionHandler
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uncaught exception handler.    * If an error is raised: shutdown    * The state of the system is unknown at this point -attempting    * a clean shutdown is dangerous. Instead: exit    * @param thread thread that failed    * @param exception the raised exception    */
annotation|@
name|Override
DECL|method|uncaughtException (Thread thread, Throwable exception)
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|thread
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|isShutdownInProgress
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread {} threw an error during shutdown: {}."
argument_list|,
name|thread
operator|.
name|toString
argument_list|()
argument_list|,
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|Error
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread {} threw an error: {}. Shutting down"
argument_list|,
name|thread
operator|.
name|toString
argument_list|()
argument_list|,
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
comment|// We don't want to not exit because of an issue with logging
block|}
if|if
condition|(
name|exception
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// After catching an OOM java says it is undefined behavior, so don't
comment|// even try to clean up or we can get stuck on shutdown.
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Halting due to Out Of Memory Error..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|err
parameter_list|)
block|{
comment|// Again we don't want to exit because of logging issues.
block|}
name|ExitUtil
operator|.
name|haltOnOutOfMemory
argument_list|(
operator|(
name|OutOfMemoryError
operator|)
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// error other than OutOfMemory
name|ExitUtil
operator|.
name|ExitException
name|ee
init|=
name|ServiceLauncher
operator|.
name|convertToExitException
argument_list|(
name|exception
argument_list|)
decl_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|ee
operator|.
name|status
argument_list|,
name|ee
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// simple exception in a thread. There's a policy decision here:
comment|// terminate the process vs. keep going after a thread has failed
comment|// base implementation: do nothing but log
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread {} threw an exception: {}"
argument_list|,
name|thread
operator|.
name|toString
argument_list|()
argument_list|,
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|uncaughtException
argument_list|(
name|thread
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

