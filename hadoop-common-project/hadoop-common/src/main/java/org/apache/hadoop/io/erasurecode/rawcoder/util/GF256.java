begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A GaloisField utility class only caring of 256 fields for efficiency. Some  * of the codes are borrowed from ISA-L implementation (C or ASM codes).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|GF256
specifier|public
specifier|final
class|class
name|GF256
block|{
DECL|method|GF256 ()
specifier|private
name|GF256
parameter_list|()
block|{ }
DECL|method|gfBase ()
specifier|public
specifier|static
name|byte
index|[]
name|gfBase
parameter_list|()
block|{
return|return
name|GF_BASE
return|;
block|}
DECL|field|GF_BASE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|GF_BASE
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x02
block|,
operator|(
name|byte
operator|)
literal|0x04
block|,
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x1d
block|,
operator|(
name|byte
operator|)
literal|0x3a
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0xe8
block|,
operator|(
name|byte
operator|)
literal|0xcd
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x13
block|,
operator|(
name|byte
operator|)
literal|0x26
block|,
operator|(
name|byte
operator|)
literal|0x4c
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x2d
block|,
operator|(
name|byte
operator|)
literal|0x5a
block|,
operator|(
name|byte
operator|)
literal|0xb4
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0xea
block|,
operator|(
name|byte
operator|)
literal|0xc9
block|,
operator|(
name|byte
operator|)
literal|0x8f
block|,
operator|(
name|byte
operator|)
literal|0x03
block|,
operator|(
name|byte
operator|)
literal|0x06
block|,
operator|(
name|byte
operator|)
literal|0x0c
block|,
operator|(
name|byte
operator|)
literal|0x18
block|,
operator|(
name|byte
operator|)
literal|0x30
block|,
operator|(
name|byte
operator|)
literal|0x60
block|,
operator|(
name|byte
operator|)
literal|0xc0
block|,
operator|(
name|byte
operator|)
literal|0x9d
block|,
operator|(
name|byte
operator|)
literal|0x27
block|,
operator|(
name|byte
operator|)
literal|0x4e
block|,
operator|(
name|byte
operator|)
literal|0x9c
block|,
operator|(
name|byte
operator|)
literal|0x25
block|,
operator|(
name|byte
operator|)
literal|0x4a
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x35
block|,
operator|(
name|byte
operator|)
literal|0x6a
block|,
operator|(
name|byte
operator|)
literal|0xd4
block|,
operator|(
name|byte
operator|)
literal|0xb5
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0xee
block|,
operator|(
name|byte
operator|)
literal|0xc1
block|,
operator|(
name|byte
operator|)
literal|0x9f
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0x46
block|,
operator|(
name|byte
operator|)
literal|0x8c
block|,
operator|(
name|byte
operator|)
literal|0x05
block|,
operator|(
name|byte
operator|)
literal|0x0a
block|,
operator|(
name|byte
operator|)
literal|0x14
block|,
operator|(
name|byte
operator|)
literal|0x28
block|,
operator|(
name|byte
operator|)
literal|0x50
block|,
operator|(
name|byte
operator|)
literal|0xa0
block|,
operator|(
name|byte
operator|)
literal|0x5d
block|,
operator|(
name|byte
operator|)
literal|0xba
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0xd2
block|,
operator|(
name|byte
operator|)
literal|0xb9
block|,
operator|(
name|byte
operator|)
literal|0x6f
block|,
operator|(
name|byte
operator|)
literal|0xde
block|,
operator|(
name|byte
operator|)
literal|0xa1
block|,
operator|(
name|byte
operator|)
literal|0x5f
block|,
operator|(
name|byte
operator|)
literal|0xbe
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0xc2
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x2f
block|,
operator|(
name|byte
operator|)
literal|0x5e
block|,
operator|(
name|byte
operator|)
literal|0xbc
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0xca
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x0f
block|,
operator|(
name|byte
operator|)
literal|0x1e
block|,
operator|(
name|byte
operator|)
literal|0x3c
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0xf0
block|,
operator|(
name|byte
operator|)
literal|0xfd
block|,
operator|(
name|byte
operator|)
literal|0xe7
block|,
operator|(
name|byte
operator|)
literal|0xd3
block|,
operator|(
name|byte
operator|)
literal|0xbb
block|,
operator|(
name|byte
operator|)
literal|0x6b
block|,
operator|(
name|byte
operator|)
literal|0xd6
block|,
operator|(
name|byte
operator|)
literal|0xb1
block|,
operator|(
name|byte
operator|)
literal|0x7f
block|,
operator|(
name|byte
operator|)
literal|0xfe
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|,
operator|(
name|byte
operator|)
literal|0xdf
block|,
operator|(
name|byte
operator|)
literal|0xa3
block|,
operator|(
name|byte
operator|)
literal|0x5b
block|,
operator|(
name|byte
operator|)
literal|0xb6
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0xe2
block|,
operator|(
name|byte
operator|)
literal|0xd9
block|,
operator|(
name|byte
operator|)
literal|0xaf
block|,
operator|(
name|byte
operator|)
literal|0x43
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0x22
block|,
operator|(
name|byte
operator|)
literal|0x44
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x0d
block|,
operator|(
name|byte
operator|)
literal|0x1a
block|,
operator|(
name|byte
operator|)
literal|0x34
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0xd0
block|,
operator|(
name|byte
operator|)
literal|0xbd
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0xce
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x1f
block|,
operator|(
name|byte
operator|)
literal|0x3e
block|,
operator|(
name|byte
operator|)
literal|0x7c
block|,
operator|(
name|byte
operator|)
literal|0xf8
block|,
operator|(
name|byte
operator|)
literal|0xed
block|,
operator|(
name|byte
operator|)
literal|0xc7
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x3b
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0xec
block|,
operator|(
name|byte
operator|)
literal|0xc5
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x33
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0xcc
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x17
block|,
operator|(
name|byte
operator|)
literal|0x2e
block|,
operator|(
name|byte
operator|)
literal|0x5c
block|,
operator|(
name|byte
operator|)
literal|0xb8
block|,
operator|(
name|byte
operator|)
literal|0x6d
block|,
operator|(
name|byte
operator|)
literal|0xda
block|,
operator|(
name|byte
operator|)
literal|0xa9
block|,
operator|(
name|byte
operator|)
literal|0x4f
block|,
operator|(
name|byte
operator|)
literal|0x9e
block|,
operator|(
name|byte
operator|)
literal|0x21
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x15
block|,
operator|(
name|byte
operator|)
literal|0x2a
block|,
operator|(
name|byte
operator|)
literal|0x54
block|,
operator|(
name|byte
operator|)
literal|0xa8
block|,
operator|(
name|byte
operator|)
literal|0x4d
block|,
operator|(
name|byte
operator|)
literal|0x9a
block|,
operator|(
name|byte
operator|)
literal|0x29
block|,
operator|(
name|byte
operator|)
literal|0x52
block|,
operator|(
name|byte
operator|)
literal|0xa4
block|,
operator|(
name|byte
operator|)
literal|0x55
block|,
operator|(
name|byte
operator|)
literal|0xaa
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x39
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0xe4
block|,
operator|(
name|byte
operator|)
literal|0xd5
block|,
operator|(
name|byte
operator|)
literal|0xb7
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0xe6
block|,
operator|(
name|byte
operator|)
literal|0xd1
block|,
operator|(
name|byte
operator|)
literal|0xbf
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0xc6
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x3f
block|,
operator|(
name|byte
operator|)
literal|0x7e
block|,
operator|(
name|byte
operator|)
literal|0xfc
block|,
operator|(
name|byte
operator|)
literal|0xe5
block|,
operator|(
name|byte
operator|)
literal|0xd7
block|,
operator|(
name|byte
operator|)
literal|0xb3
block|,
operator|(
name|byte
operator|)
literal|0x7b
block|,
operator|(
name|byte
operator|)
literal|0xf6
block|,
operator|(
name|byte
operator|)
literal|0xf1
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xe3
block|,
operator|(
name|byte
operator|)
literal|0xdb
block|,
operator|(
name|byte
operator|)
literal|0xab
block|,
operator|(
name|byte
operator|)
literal|0x4b
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x31
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0xc4
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x37
block|,
operator|(
name|byte
operator|)
literal|0x6e
block|,
operator|(
name|byte
operator|)
literal|0xdc
block|,
operator|(
name|byte
operator|)
literal|0xa5
block|,
operator|(
name|byte
operator|)
literal|0x57
block|,
operator|(
name|byte
operator|)
literal|0xae
block|,
operator|(
name|byte
operator|)
literal|0x41
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x19
block|,
operator|(
name|byte
operator|)
literal|0x32
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0xc8
block|,
operator|(
name|byte
operator|)
literal|0x8d
block|,
operator|(
name|byte
operator|)
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0x0e
block|,
operator|(
name|byte
operator|)
literal|0x1c
block|,
operator|(
name|byte
operator|)
literal|0x38
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0xe0
block|,
operator|(
name|byte
operator|)
literal|0xdd
block|,
operator|(
name|byte
operator|)
literal|0xa7
block|,
operator|(
name|byte
operator|)
literal|0x53
block|,
operator|(
name|byte
operator|)
literal|0xa6
block|,
operator|(
name|byte
operator|)
literal|0x51
block|,
operator|(
name|byte
operator|)
literal|0xa2
block|,
operator|(
name|byte
operator|)
literal|0x59
block|,
operator|(
name|byte
operator|)
literal|0xb2
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0xf2
block|,
operator|(
name|byte
operator|)
literal|0xf9
block|,
operator|(
name|byte
operator|)
literal|0xef
block|,
operator|(
name|byte
operator|)
literal|0xc3
block|,
operator|(
name|byte
operator|)
literal|0x9b
block|,
operator|(
name|byte
operator|)
literal|0x2b
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0xac
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x8a
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x24
block|,
operator|(
name|byte
operator|)
literal|0x48
block|,
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x3d
block|,
operator|(
name|byte
operator|)
literal|0x7a
block|,
operator|(
name|byte
operator|)
literal|0xf4
block|,
operator|(
name|byte
operator|)
literal|0xf5
block|,
operator|(
name|byte
operator|)
literal|0xf7
block|,
operator|(
name|byte
operator|)
literal|0xf3
block|,
operator|(
name|byte
operator|)
literal|0xfb
block|,
operator|(
name|byte
operator|)
literal|0xeb
block|,
operator|(
name|byte
operator|)
literal|0xcb
block|,
operator|(
name|byte
operator|)
literal|0x8b
block|,
operator|(
name|byte
operator|)
literal|0x0b
block|,
operator|(
name|byte
operator|)
literal|0x16
block|,
operator|(
name|byte
operator|)
literal|0x2c
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0xb0
block|,
operator|(
name|byte
operator|)
literal|0x7d
block|,
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xe9
block|,
operator|(
name|byte
operator|)
literal|0xcf
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x1b
block|,
operator|(
name|byte
operator|)
literal|0x36
block|,
operator|(
name|byte
operator|)
literal|0x6c
block|,
operator|(
name|byte
operator|)
literal|0xd8
block|,
operator|(
name|byte
operator|)
literal|0xad
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x8e
block|,
operator|(
name|byte
operator|)
literal|0x01
block|}
decl_stmt|;
DECL|method|gfLogBase ()
specifier|public
specifier|static
name|byte
index|[]
name|gfLogBase
parameter_list|()
block|{
return|return
name|GF_LOG_BASE
return|;
block|}
DECL|field|GF_LOG_BASE
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|GF_LOG_BASE
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x19
block|,
operator|(
name|byte
operator|)
literal|0x02
block|,
operator|(
name|byte
operator|)
literal|0x32
block|,
operator|(
name|byte
operator|)
literal|0x1a
block|,
operator|(
name|byte
operator|)
literal|0xc6
block|,
operator|(
name|byte
operator|)
literal|0x03
block|,
operator|(
name|byte
operator|)
literal|0xdf
block|,
operator|(
name|byte
operator|)
literal|0x33
block|,
operator|(
name|byte
operator|)
literal|0xee
block|,
operator|(
name|byte
operator|)
literal|0x1b
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0xc7
block|,
operator|(
name|byte
operator|)
literal|0x4b
block|,
operator|(
name|byte
operator|)
literal|0x04
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0xe0
block|,
operator|(
name|byte
operator|)
literal|0x0e
block|,
operator|(
name|byte
operator|)
literal|0x34
block|,
operator|(
name|byte
operator|)
literal|0x8d
block|,
operator|(
name|byte
operator|)
literal|0xef
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x1c
block|,
operator|(
name|byte
operator|)
literal|0xc1
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0xf8
block|,
operator|(
name|byte
operator|)
literal|0xc8
block|,
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x4c
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x05
block|,
operator|(
name|byte
operator|)
literal|0x8a
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x2f
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|,
operator|(
name|byte
operator|)
literal|0x24
block|,
operator|(
name|byte
operator|)
literal|0x0f
block|,
operator|(
name|byte
operator|)
literal|0x21
block|,
operator|(
name|byte
operator|)
literal|0x35
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x8e
block|,
operator|(
name|byte
operator|)
literal|0xda
block|,
operator|(
name|byte
operator|)
literal|0xf0
block|,
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x1d
block|,
operator|(
name|byte
operator|)
literal|0xb5
block|,
operator|(
name|byte
operator|)
literal|0xc2
block|,
operator|(
name|byte
operator|)
literal|0x7d
block|,
operator|(
name|byte
operator|)
literal|0x6a
block|,
operator|(
name|byte
operator|)
literal|0x27
block|,
operator|(
name|byte
operator|)
literal|0xf9
block|,
operator|(
name|byte
operator|)
literal|0xb9
block|,
operator|(
name|byte
operator|)
literal|0xc9
block|,
operator|(
name|byte
operator|)
literal|0x9a
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x4d
block|,
operator|(
name|byte
operator|)
literal|0xe4
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0xa6
block|,
operator|(
name|byte
operator|)
literal|0x06
block|,
operator|(
name|byte
operator|)
literal|0xbf
block|,
operator|(
name|byte
operator|)
literal|0x8b
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0xdd
block|,
operator|(
name|byte
operator|)
literal|0x30
block|,
operator|(
name|byte
operator|)
literal|0xfd
block|,
operator|(
name|byte
operator|)
literal|0xe2
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x25
block|,
operator|(
name|byte
operator|)
literal|0xb3
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x22
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x36
block|,
operator|(
name|byte
operator|)
literal|0xd0
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0xce
block|,
operator|(
name|byte
operator|)
literal|0x8f
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0xdb
block|,
operator|(
name|byte
operator|)
literal|0xbd
block|,
operator|(
name|byte
operator|)
literal|0xf1
block|,
operator|(
name|byte
operator|)
literal|0xd2
block|,
operator|(
name|byte
operator|)
literal|0x13
block|,
operator|(
name|byte
operator|)
literal|0x5c
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x38
block|,
operator|(
name|byte
operator|)
literal|0x46
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x1e
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0xb6
block|,
operator|(
name|byte
operator|)
literal|0xa3
block|,
operator|(
name|byte
operator|)
literal|0xc3
block|,
operator|(
name|byte
operator|)
literal|0x48
block|,
operator|(
name|byte
operator|)
literal|0x7e
block|,
operator|(
name|byte
operator|)
literal|0x6e
block|,
operator|(
name|byte
operator|)
literal|0x6b
block|,
operator|(
name|byte
operator|)
literal|0x3a
block|,
operator|(
name|byte
operator|)
literal|0x28
block|,
operator|(
name|byte
operator|)
literal|0x54
block|,
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0xba
block|,
operator|(
name|byte
operator|)
literal|0x3d
block|,
operator|(
name|byte
operator|)
literal|0xca
block|,
operator|(
name|byte
operator|)
literal|0x5e
block|,
operator|(
name|byte
operator|)
literal|0x9b
block|,
operator|(
name|byte
operator|)
literal|0x9f
block|,
operator|(
name|byte
operator|)
literal|0x0a
block|,
operator|(
name|byte
operator|)
literal|0x15
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x2b
block|,
operator|(
name|byte
operator|)
literal|0x4e
block|,
operator|(
name|byte
operator|)
literal|0xd4
block|,
operator|(
name|byte
operator|)
literal|0xe5
block|,
operator|(
name|byte
operator|)
literal|0xac
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0xf3
block|,
operator|(
name|byte
operator|)
literal|0xa7
block|,
operator|(
name|byte
operator|)
literal|0x57
block|,
operator|(
name|byte
operator|)
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0xc0
block|,
operator|(
name|byte
operator|)
literal|0xf7
block|,
operator|(
name|byte
operator|)
literal|0x8c
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x0d
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x4a
block|,
operator|(
name|byte
operator|)
literal|0xde
block|,
operator|(
name|byte
operator|)
literal|0xed
block|,
operator|(
name|byte
operator|)
literal|0x31
block|,
operator|(
name|byte
operator|)
literal|0xc5
block|,
operator|(
name|byte
operator|)
literal|0xfe
block|,
operator|(
name|byte
operator|)
literal|0x18
block|,
operator|(
name|byte
operator|)
literal|0xe3
block|,
operator|(
name|byte
operator|)
literal|0xa5
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x26
block|,
operator|(
name|byte
operator|)
literal|0xb8
block|,
operator|(
name|byte
operator|)
literal|0xb4
block|,
operator|(
name|byte
operator|)
literal|0x7c
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0x44
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0xd9
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x2e
block|,
operator|(
name|byte
operator|)
literal|0x37
block|,
operator|(
name|byte
operator|)
literal|0x3f
block|,
operator|(
name|byte
operator|)
literal|0xd1
block|,
operator|(
name|byte
operator|)
literal|0x5b
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0xbc
block|,
operator|(
name|byte
operator|)
literal|0xcf
block|,
operator|(
name|byte
operator|)
literal|0xcd
block|,
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0xb2
block|,
operator|(
name|byte
operator|)
literal|0xdc
block|,
operator|(
name|byte
operator|)
literal|0xfc
block|,
operator|(
name|byte
operator|)
literal|0xbe
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0xf2
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0xd3
block|,
operator|(
name|byte
operator|)
literal|0xab
block|,
operator|(
name|byte
operator|)
literal|0x14
block|,
operator|(
name|byte
operator|)
literal|0x2a
block|,
operator|(
name|byte
operator|)
literal|0x5d
block|,
operator|(
name|byte
operator|)
literal|0x9e
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x3c
block|,
operator|(
name|byte
operator|)
literal|0x39
block|,
operator|(
name|byte
operator|)
literal|0x53
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x6d
block|,
operator|(
name|byte
operator|)
literal|0x41
block|,
operator|(
name|byte
operator|)
literal|0xa2
block|,
operator|(
name|byte
operator|)
literal|0x1f
block|,
operator|(
name|byte
operator|)
literal|0x2d
block|,
operator|(
name|byte
operator|)
literal|0x43
block|,
operator|(
name|byte
operator|)
literal|0xd8
block|,
operator|(
name|byte
operator|)
literal|0xb7
block|,
operator|(
name|byte
operator|)
literal|0x7b
block|,
operator|(
name|byte
operator|)
literal|0xa4
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0xc4
block|,
operator|(
name|byte
operator|)
literal|0x17
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0xec
block|,
operator|(
name|byte
operator|)
literal|0x7f
block|,
operator|(
name|byte
operator|)
literal|0x0c
block|,
operator|(
name|byte
operator|)
literal|0x6f
block|,
operator|(
name|byte
operator|)
literal|0xf6
block|,
operator|(
name|byte
operator|)
literal|0x6c
block|,
operator|(
name|byte
operator|)
literal|0xa1
block|,
operator|(
name|byte
operator|)
literal|0x3b
block|,
operator|(
name|byte
operator|)
literal|0x52
block|,
operator|(
name|byte
operator|)
literal|0x29
block|,
operator|(
name|byte
operator|)
literal|0x9d
block|,
operator|(
name|byte
operator|)
literal|0x55
block|,
operator|(
name|byte
operator|)
literal|0xaa
block|,
operator|(
name|byte
operator|)
literal|0xfb
block|,
operator|(
name|byte
operator|)
literal|0x60
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0xb1
block|,
operator|(
name|byte
operator|)
literal|0xbb
block|,
operator|(
name|byte
operator|)
literal|0xcc
block|,
operator|(
name|byte
operator|)
literal|0x3e
block|,
operator|(
name|byte
operator|)
literal|0x5a
block|,
operator|(
name|byte
operator|)
literal|0xcb
block|,
operator|(
name|byte
operator|)
literal|0x59
block|,
operator|(
name|byte
operator|)
literal|0x5f
block|,
operator|(
name|byte
operator|)
literal|0xb0
block|,
operator|(
name|byte
operator|)
literal|0x9c
block|,
operator|(
name|byte
operator|)
literal|0xa9
block|,
operator|(
name|byte
operator|)
literal|0xa0
block|,
operator|(
name|byte
operator|)
literal|0x51
block|,
operator|(
name|byte
operator|)
literal|0x0b
block|,
operator|(
name|byte
operator|)
literal|0xf5
block|,
operator|(
name|byte
operator|)
literal|0x16
block|,
operator|(
name|byte
operator|)
literal|0xeb
block|,
operator|(
name|byte
operator|)
literal|0x7a
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x2c
block|,
operator|(
name|byte
operator|)
literal|0xd7
block|,
operator|(
name|byte
operator|)
literal|0x4f
block|,
operator|(
name|byte
operator|)
literal|0xae
block|,
operator|(
name|byte
operator|)
literal|0xd5
block|,
operator|(
name|byte
operator|)
literal|0xe9
block|,
operator|(
name|byte
operator|)
literal|0xe6
block|,
operator|(
name|byte
operator|)
literal|0xe7
block|,
operator|(
name|byte
operator|)
literal|0xad
block|,
operator|(
name|byte
operator|)
literal|0xe8
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0xd6
block|,
operator|(
name|byte
operator|)
literal|0xf4
block|,
operator|(
name|byte
operator|)
literal|0xea
block|,
operator|(
name|byte
operator|)
literal|0xa8
block|,
operator|(
name|byte
operator|)
literal|0x50
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0xaf
block|}
decl_stmt|;
DECL|field|theGfMulTab
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|theGfMulTab
decl_stmt|;
comment|// multiply result table in GF 256 space
comment|/**    * Initialize the GF multiply table for performance. Just compute once, and    * avoid repeatedly doing the multiply during encoding/decoding.    */
static|static
block|{
name|theGfMulTab
operator|=
operator|new
name|byte
index|[
literal|256
index|]
index|[
literal|256
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|256
condition|;
name|j
operator|++
control|)
block|{
name|theGfMulTab
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|gfMul
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
operator|(
name|byte
operator|)
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the big GF multiply table so utilize it efficiently.    * @return the big GF multiply table    */
DECL|method|gfMulTab ()
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|gfMulTab
parameter_list|()
block|{
return|return
name|theGfMulTab
return|;
block|}
DECL|method|gfMul (byte a, byte b)
specifier|public
specifier|static
name|byte
name|gfMul
parameter_list|(
name|byte
name|a
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
if|if
condition|(
operator|(
name|a
operator|==
literal|0
operator|)
operator|||
operator|(
name|b
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|tmp
init|=
operator|(
name|GF_LOG_BASE
index|[
name|a
operator|&
literal|0xff
index|]
operator|&
literal|0xff
operator|)
operator|+
operator|(
name|GF_LOG_BASE
index|[
name|b
operator|&
literal|0xff
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|>
literal|254
condition|)
block|{
name|tmp
operator|-=
literal|255
expr_stmt|;
block|}
return|return
name|GF_BASE
index|[
name|tmp
index|]
return|;
block|}
DECL|method|gfInv (byte a)
specifier|public
specifier|static
name|byte
name|gfInv
parameter_list|(
name|byte
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|GF_BASE
index|[
literal|255
operator|-
name|GF_LOG_BASE
index|[
name|a
operator|&
literal|0xff
index|]
operator|&
literal|0xff
index|]
return|;
block|}
comment|/**    * Invert a matrix assuming it's invertible.    *    * Ported from Intel ISA-L library.    */
DECL|method|gfInvertMatrix (byte[] inMatrix, byte[] outMatrix, int n)
specifier|public
specifier|static
name|void
name|gfInvertMatrix
parameter_list|(
name|byte
index|[]
name|inMatrix
parameter_list|,
name|byte
index|[]
name|outMatrix
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
name|temp
decl_stmt|;
comment|// Set outMatrix[] to the identity matrix
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|*
name|n
condition|;
name|i
operator|++
control|)
block|{
comment|// memset(outMatrix, 0, n*n)
name|outMatrix
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// Inverse
for|for
control|(
name|int
name|j
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
comment|// Check for 0 in pivot element
if|if
condition|(
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|i
index|]
operator|==
literal|0
condition|)
block|{
comment|// Find a row with non-zero in current column and swap
for|for
control|(
name|j
operator|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|inMatrix
index|[
name|j
operator|*
name|n
operator|+
name|i
index|]
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|j
operator|==
name|n
condition|)
block|{
comment|// Couldn't find means it's singular
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not invertible"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|n
condition|;
name|k
operator|++
control|)
block|{
comment|// Swap rows i,j
name|temp
operator|=
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
expr_stmt|;
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
operator|=
name|inMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
expr_stmt|;
name|inMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
operator|=
name|temp
expr_stmt|;
name|temp
operator|=
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
expr_stmt|;
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
operator|=
name|outMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
expr_stmt|;
name|outMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
name|temp
operator|=
name|gfInv
argument_list|(
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
comment|// 1/pivot
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
comment|// Scale row i by 1/pivot
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|j
index|]
operator|=
name|gfMul
argument_list|(
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|j
index|]
argument_list|,
name|temp
argument_list|)
expr_stmt|;
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|j
index|]
operator|=
name|gfMul
argument_list|(
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|j
index|]
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|==
name|i
condition|)
block|{
continue|continue;
block|}
name|temp
operator|=
name|inMatrix
index|[
name|j
operator|*
name|n
operator|+
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|n
condition|;
name|k
operator|++
control|)
block|{
name|outMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
operator|^=
name|gfMul
argument_list|(
name|temp
argument_list|,
name|outMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
argument_list|)
expr_stmt|;
name|inMatrix
index|[
name|j
operator|*
name|n
operator|+
name|k
index|]
operator|^=
name|gfMul
argument_list|(
name|temp
argument_list|,
name|inMatrix
index|[
name|i
operator|*
name|n
operator|+
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Ported from Intel ISA-L library.    *    * Calculates const table gftbl in GF(2^8) from single input A    * gftbl(A) = {A{00}, A{01}, A{02}, ... , A{0f} }, {A{00}, A{10}, A{20},    * ... , A{f0} } -- from ISA-L implementation    */
DECL|method|gfVectMulInit (byte c, byte[] tbl, int offset)
specifier|public
specifier|static
name|void
name|gfVectMulInit
parameter_list|(
name|byte
name|c
parameter_list|,
name|byte
index|[]
name|tbl
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|byte
name|c2
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
name|byte
name|c4
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c2
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c2
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
name|byte
name|c8
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c4
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c4
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
decl_stmt|;
name|byte
name|c3
decl_stmt|,
name|c5
decl_stmt|,
name|c6
decl_stmt|,
name|c7
decl_stmt|,
name|c9
decl_stmt|,
name|c10
decl_stmt|,
name|c11
decl_stmt|,
name|c12
decl_stmt|,
name|c13
decl_stmt|,
name|c14
decl_stmt|,
name|c15
decl_stmt|;
name|byte
name|c17
decl_stmt|,
name|c18
decl_stmt|,
name|c19
decl_stmt|,
name|c20
decl_stmt|,
name|c21
decl_stmt|,
name|c22
decl_stmt|,
name|c23
decl_stmt|,
name|c24
decl_stmt|,
name|c25
decl_stmt|,
name|c26
decl_stmt|,
name|c27
decl_stmt|,
name|c28
decl_stmt|,
name|c29
decl_stmt|,
name|c30
decl_stmt|,
name|c31
decl_stmt|;
name|c3
operator|=
call|(
name|byte
call|)
argument_list|(
name|c2
operator|^
name|c
argument_list|)
expr_stmt|;
name|c5
operator|=
call|(
name|byte
call|)
argument_list|(
name|c4
operator|^
name|c
argument_list|)
expr_stmt|;
name|c6
operator|=
call|(
name|byte
call|)
argument_list|(
name|c4
operator|^
name|c2
argument_list|)
expr_stmt|;
name|c7
operator|=
call|(
name|byte
call|)
argument_list|(
name|c4
operator|^
name|c3
argument_list|)
expr_stmt|;
name|c9
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c
argument_list|)
expr_stmt|;
name|c10
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c2
argument_list|)
expr_stmt|;
name|c11
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c3
argument_list|)
expr_stmt|;
name|c12
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c4
argument_list|)
expr_stmt|;
name|c13
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c5
argument_list|)
expr_stmt|;
name|c14
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c6
argument_list|)
expr_stmt|;
name|c15
operator|=
call|(
name|byte
call|)
argument_list|(
name|c8
operator|^
name|c7
argument_list|)
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|c
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|c2
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|3
index|]
operator|=
name|c3
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|4
index|]
operator|=
name|c4
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|5
index|]
operator|=
name|c5
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|6
index|]
operator|=
name|c6
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|7
index|]
operator|=
name|c7
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|8
index|]
operator|=
name|c8
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|9
index|]
operator|=
name|c9
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|10
index|]
operator|=
name|c10
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|11
index|]
operator|=
name|c11
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|12
index|]
operator|=
name|c12
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|13
index|]
operator|=
name|c13
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|14
index|]
operator|=
name|c14
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|15
index|]
operator|=
name|c15
expr_stmt|;
name|c17
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c8
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c8
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|c18
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c17
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c17
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|c19
operator|=
call|(
name|byte
call|)
argument_list|(
name|c18
operator|^
name|c17
argument_list|)
expr_stmt|;
name|c20
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c18
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c18
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|c21
operator|=
call|(
name|byte
call|)
argument_list|(
name|c20
operator|^
name|c17
argument_list|)
expr_stmt|;
name|c22
operator|=
call|(
name|byte
call|)
argument_list|(
name|c20
operator|^
name|c18
argument_list|)
expr_stmt|;
name|c23
operator|=
call|(
name|byte
call|)
argument_list|(
name|c20
operator|^
name|c19
argument_list|)
expr_stmt|;
name|c24
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|c20
operator|<<
literal|1
operator|)
operator|^
operator|(
operator|(
name|c20
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|?
literal|0x1d
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|c25
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c17
argument_list|)
expr_stmt|;
name|c26
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c18
argument_list|)
expr_stmt|;
name|c27
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c19
argument_list|)
expr_stmt|;
name|c28
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c20
argument_list|)
expr_stmt|;
name|c29
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c21
argument_list|)
expr_stmt|;
name|c30
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c22
argument_list|)
expr_stmt|;
name|c31
operator|=
call|(
name|byte
call|)
argument_list|(
name|c24
operator|^
name|c23
argument_list|)
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|16
index|]
operator|=
literal|0
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|17
index|]
operator|=
name|c17
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|18
index|]
operator|=
name|c18
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|19
index|]
operator|=
name|c19
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|20
index|]
operator|=
name|c20
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|21
index|]
operator|=
name|c21
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|22
index|]
operator|=
name|c22
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|23
index|]
operator|=
name|c23
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|24
index|]
operator|=
name|c24
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|25
index|]
operator|=
name|c25
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|26
index|]
operator|=
name|c26
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|27
index|]
operator|=
name|c27
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|28
index|]
operator|=
name|c28
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|29
index|]
operator|=
name|c29
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|30
index|]
operator|=
name|c30
expr_stmt|;
name|tbl
index|[
name|offset
operator|+
literal|31
index|]
operator|=
name|c31
expr_stmt|;
block|}
block|}
end_class

end_unit

