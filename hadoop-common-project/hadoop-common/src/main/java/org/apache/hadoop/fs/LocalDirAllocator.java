begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** An implementation of a round-robin scheme for disk allocation for creating  * files. The way it works is that it is kept track what disk was last  * allocated for a file write. For the current request, the next disk from  * the set of disks would be allocated if the free space on the disk is   * sufficient enough to accommodate the file that is being considered for  * creation. If the space requirements cannot be met, the next disk in order  * would be tried and so on till a disk is found with sufficient capacity.  * Once a disk with sufficient space is identified, a check is done to make  * sure that the disk is writable. Also, there is an API provided that doesn't  * take the space requirements into consideration but just checks whether the  * disk under consideration is writable (this should be used for cases where  * the file size is not known apriori). An API is provided to read a path that  * was created earlier. That API works by doing a scan of all the disks for the  * input pathname.  * This implementation also provides the functionality of having multiple   * allocators per JVM (one for each unique functionality or context, like   * mapred, dfs-client, etc.). It ensures that there is only one instance of  * an allocator per context per JVM.  * Note:  * 1. The contexts referred above are actually the configuration items defined  * in the Configuration class like "mapred.local.dir" (for which we want to   * control the dir allocations). The context-strings are exactly those   * configuration items.  * 2. This implementation does not take into consideration cases where  * a disk becomes read-only or goes out of space while a file is being written  * to (disks are shared between multiple processes, and so the latter situation  * is probable).  * 3. In the class implementation, "Disk" is referred to as "Dir", which  * actually points to the configured directory on the Disk which will be the  * parent for all file write/read allocations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|LocalDirAllocator
specifier|public
class|class
name|LocalDirAllocator
block|{
comment|//A Map from the config item names like "mapred.local.dir"
comment|//to the instance of the AllocatorPerContext. This
comment|//is a static object to make sure there exists exactly one instance per JVM
DECL|field|contexts
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AllocatorPerContext
argument_list|>
name|contexts
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|AllocatorPerContext
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|contextCfgItemName
specifier|private
name|String
name|contextCfgItemName
decl_stmt|;
comment|/** Used when size of file to be allocated is unknown. */
DECL|field|SIZE_UNKNOWN
specifier|public
specifier|static
specifier|final
name|int
name|SIZE_UNKNOWN
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|diskValidator
specifier|private
specifier|final
name|DiskValidator
name|diskValidator
decl_stmt|;
comment|/**Create an allocator object    * @param contextCfgItemName    */
DECL|method|LocalDirAllocator (String contextCfgItemName)
specifier|public
name|LocalDirAllocator
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|)
block|{
name|this
operator|.
name|contextCfgItemName
operator|=
name|contextCfgItemName
expr_stmt|;
try|try
block|{
name|this
operator|.
name|diskValidator
operator|=
name|DiskValidatorFactory
operator|.
name|getInstance
argument_list|(
name|BasicDiskValidator
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|LocalDirAllocator (String contextCfgItemName, DiskValidator diskValidator)
specifier|public
name|LocalDirAllocator
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|,
name|DiskValidator
name|diskValidator
parameter_list|)
block|{
name|this
operator|.
name|contextCfgItemName
operator|=
name|contextCfgItemName
expr_stmt|;
name|this
operator|.
name|diskValidator
operator|=
name|diskValidator
expr_stmt|;
block|}
comment|/** This method must be used to obtain the dir allocation context for a     * particular value of the context name. The context name must be an item    * defined in the Configuration object for which we want to control the     * dir allocations (e.g.,<code>mapred.local.dir</code>). The method will    * create a context for that name if it doesn't already exist.    */
DECL|method|obtainContext (String contextCfgItemName)
specifier|private
name|AllocatorPerContext
name|obtainContext
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|contexts
init|)
block|{
name|AllocatorPerContext
name|l
init|=
name|contexts
operator|.
name|get
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|contexts
operator|.
name|put
argument_list|(
name|contextCfgItemName
argument_list|,
operator|(
name|l
operator|=
operator|new
name|AllocatorPerContext
argument_list|(
name|contextCfgItemName
argument_list|,
name|diskValidator
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
block|}
comment|/** Get a path from the local FS. This method should be used if the size of     *  the file is not known apriori. We go round-robin over the set of disks    *  (via the configured dirs) and return the first complete path where    *  we could create the parent directory of the passed path.     *  @param pathStr the requested path (this will be created on the first     *  available disk)    *  @param conf the Configuration object    *  @return the complete path to the file on a local disk    *  @throws IOException    */
DECL|method|getLocalPathForWrite (String pathStr, Configuration conf)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|SIZE_UNKNOWN
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Get a path from the local FS. Pass size as     *  SIZE_UNKNOWN if not known apriori. We    *  round-robin over the set of disks (via the configured dirs) and return    *  the first complete path which has enough space     *  @param pathStr the requested path (this will be created on the first     *  available disk)    *  @param size the size of the file that is going to be written    *  @param conf the Configuration object    *  @return the complete path to the file on a local disk    *  @throws IOException    */
DECL|method|getLocalPathForWrite (String pathStr, long size, Configuration conf)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|size
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Get a path from the local FS. Pass size as     *  SIZE_UNKNOWN if not known apriori. We    *  round-robin over the set of disks (via the configured dirs) and return    *  the first complete path which has enough space     *  @param pathStr the requested path (this will be created on the first     *  available disk)    *  @param size the size of the file that is going to be written    *  @param conf the Configuration object    *  @param checkWrite ensure that the path is writable    *  @return the complete path to the file on a local disk    *  @throws IOException    */
DECL|method|getLocalPathForWrite (String pathStr, long size, Configuration conf, boolean checkWrite)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|checkWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocatorPerContext
name|context
init|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|size
argument_list|,
name|conf
argument_list|,
name|checkWrite
argument_list|)
return|;
block|}
comment|/** Get a path from the local FS for reading. We search through all the    *  configured dirs for the file's existence and return the complete    *  path to the file when we find one     *  @param pathStr the requested file (this will be searched)    *  @param conf the Configuration object    *  @return the complete path to the file on a local disk    *  @throws IOException    */
DECL|method|getLocalPathToRead (String pathStr, Configuration conf)
specifier|public
name|Path
name|getLocalPathToRead
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocatorPerContext
name|context
init|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getLocalPathToRead
argument_list|(
name|pathStr
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get all of the paths that currently exist in the working directories.    * @param pathStr the path underneath the roots    * @param conf the configuration to look up the roots in    * @return all of the paths that exist under any of the roots    * @throws IOException    */
DECL|method|getAllLocalPathsToRead (String pathStr, Configuration conf )
specifier|public
name|Iterable
argument_list|<
name|Path
argument_list|>
name|getAllLocalPathsToRead
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocatorPerContext
name|context
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|context
operator|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
expr_stmt|;
block|}
return|return
name|context
operator|.
name|getAllLocalPathsToRead
argument_list|(
name|pathStr
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Creates a temporary file in the local FS. Pass size as -1 if not known     *  apriori. We round-robin over the set of disks (via the configured dirs)     *  and select the first complete path which has enough space. A file is    *  created on this directory. The file is guaranteed to go away when the    *  JVM exits.    *  @param pathStr prefix for the temporary file    *  @param size the size of the file that is going to be written    *  @param conf the Configuration object    *  @return a unique temporary file    *  @throws IOException    */
DECL|method|createTmpFileForWrite (String pathStr, long size, Configuration conf)
specifier|public
name|File
name|createTmpFileForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocatorPerContext
name|context
init|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|createTmpFileForWrite
argument_list|(
name|pathStr
argument_list|,
name|size
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Method to check whether a context is valid    * @param contextCfgItemName    * @return true/false    */
DECL|method|isContextValid (String contextCfgItemName)
specifier|public
specifier|static
name|boolean
name|isContextValid
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|contexts
init|)
block|{
return|return
name|contexts
operator|.
name|containsKey
argument_list|(
name|contextCfgItemName
argument_list|)
return|;
block|}
block|}
comment|/**    * Removes the context from the context config items    *     * @param contextCfgItemName    */
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|}
argument_list|)
DECL|method|removeContext (String contextCfgItemName)
specifier|public
specifier|static
name|void
name|removeContext
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|contexts
init|)
block|{
name|contexts
operator|.
name|remove
argument_list|(
name|contextCfgItemName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** We search through all the configured dirs for the file's existence    *  and return true when we find      *  @param pathStr the requested file (this will be searched)    *  @param conf the Configuration object    *  @return true if files exist. false otherwise    */
DECL|method|ifExists (String pathStr, Configuration conf)
specifier|public
name|boolean
name|ifExists
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|AllocatorPerContext
name|context
init|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|ifExists
argument_list|(
name|pathStr
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get the current directory index for the given configuration item.    * @return the current directory index for the given configuration item.    */
DECL|method|getCurrentDirectoryIndex ()
name|int
name|getCurrentDirectoryIndex
parameter_list|()
block|{
name|AllocatorPerContext
name|context
init|=
name|obtainContext
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getCurrentDirectoryIndex
argument_list|()
return|;
block|}
DECL|class|AllocatorPerContext
specifier|private
specifier|static
class|class
name|AllocatorPerContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AllocatorPerContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dirIndexRandomizer
specifier|private
name|Random
name|dirIndexRandomizer
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|contextCfgItemName
specifier|private
name|String
name|contextCfgItemName
decl_stmt|;
comment|// NOTE: the context must be accessed via a local reference as it
comment|//       may be updated at any time to reference a different context
DECL|field|currentContext
specifier|private
name|AtomicReference
argument_list|<
name|Context
argument_list|>
name|currentContext
decl_stmt|;
DECL|field|diskValidator
specifier|private
specifier|final
name|DiskValidator
name|diskValidator
decl_stmt|;
DECL|class|Context
specifier|private
specifier|static
class|class
name|Context
block|{
DECL|field|dirNumLastAccessed
specifier|private
name|AtomicInteger
name|dirNumLastAccessed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|localFS
specifier|private
name|FileSystem
name|localFS
decl_stmt|;
DECL|field|dirDF
specifier|private
name|DF
index|[]
name|dirDF
decl_stmt|;
DECL|field|localDirs
specifier|private
name|Path
index|[]
name|localDirs
decl_stmt|;
DECL|field|savedLocalDirs
specifier|private
name|String
name|savedLocalDirs
decl_stmt|;
DECL|method|getAndIncrDirNumLastAccessed ()
specifier|public
name|int
name|getAndIncrDirNumLastAccessed
parameter_list|()
block|{
return|return
name|getAndIncrDirNumLastAccessed
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|getAndIncrDirNumLastAccessed (int delta)
specifier|public
name|int
name|getAndIncrDirNumLastAccessed
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
if|if
condition|(
name|localDirs
operator|.
name|length
operator|<
literal|2
operator|||
name|delta
operator|==
literal|0
condition|)
block|{
return|return
name|dirNumLastAccessed
operator|.
name|get
argument_list|()
return|;
block|}
name|int
name|oldval
decl_stmt|,
name|newval
decl_stmt|;
do|do
block|{
name|oldval
operator|=
name|dirNumLastAccessed
operator|.
name|get
argument_list|()
expr_stmt|;
name|newval
operator|=
operator|(
name|oldval
operator|+
name|delta
operator|)
operator|%
name|localDirs
operator|.
name|length
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|dirNumLastAccessed
operator|.
name|compareAndSet
argument_list|(
name|oldval
argument_list|,
name|newval
argument_list|)
condition|)
do|;
return|return
name|oldval
return|;
block|}
block|}
DECL|method|AllocatorPerContext (String contextCfgItemName, DiskValidator diskValidator)
specifier|public
name|AllocatorPerContext
parameter_list|(
name|String
name|contextCfgItemName
parameter_list|,
name|DiskValidator
name|diskValidator
parameter_list|)
block|{
name|this
operator|.
name|contextCfgItemName
operator|=
name|contextCfgItemName
expr_stmt|;
name|this
operator|.
name|currentContext
operator|=
operator|new
name|AtomicReference
argument_list|<
name|Context
argument_list|>
argument_list|(
operator|new
name|Context
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|diskValidator
operator|=
name|diskValidator
expr_stmt|;
block|}
comment|/** This method gets called everytime before any read/write to make sure      * that any change to localDirs is reflected immediately.      */
DECL|method|confChanged (Configuration conf)
specifier|private
name|Context
name|confChanged
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Context
name|ctx
init|=
name|currentContext
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|newLocalDirs
init|=
name|conf
operator|.
name|get
argument_list|(
name|contextCfgItemName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|newLocalDirs
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|contextCfgItemName
operator|+
literal|" not configured"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|newLocalDirs
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|savedLocalDirs
argument_list|)
condition|)
block|{
name|ctx
operator|=
operator|new
name|Context
argument_list|()
expr_stmt|;
name|String
index|[]
name|dirStrings
init|=
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|newLocalDirs
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|numDirs
init|=
name|dirStrings
operator|.
name|length
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|numDirs
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|DF
argument_list|>
name|dfList
init|=
operator|new
name|ArrayList
argument_list|<
name|DF
argument_list|>
argument_list|(
name|numDirs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// filter problematic directories
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|dirStrings
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|localFS
operator|.
name|mkdirs
argument_list|(
name|tmpDir
argument_list|)
operator|||
name|ctx
operator|.
name|localFS
operator|.
name|exists
argument_list|(
name|tmpDir
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|tmpFile
init|=
name|tmpDir
operator|.
name|isAbsolute
argument_list|()
condition|?
operator|new
name|File
argument_list|(
name|ctx
operator|.
name|localFS
operator|.
name|makeQualified
argument_list|(
name|tmpDir
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
else|:
operator|new
name|File
argument_list|(
name|dirStrings
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|diskValidator
operator|.
name|checkStatus
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpFile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dfList
operator|.
name|add
argument_list|(
operator|new
name|DF
argument_list|(
name|tmpFile
argument_list|,
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|dirStrings
index|[
name|i
index|]
operator|+
literal|" is not writable\n"
argument_list|,
name|de
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|dirStrings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create "
operator|+
name|dirStrings
index|[
name|i
index|]
operator|+
literal|": "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
comment|//ignore
block|}
name|ctx
operator|.
name|localDirs
operator|=
name|dirs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|dirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|dirDF
operator|=
name|dfList
operator|.
name|toArray
argument_list|(
operator|new
name|DF
index|[
name|dirs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|savedLocalDirs
operator|=
name|newLocalDirs
expr_stmt|;
if|if
condition|(
name|dirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// randomize the first disk picked in the round-robin selection
name|ctx
operator|.
name|dirNumLastAccessed
operator|.
name|set
argument_list|(
name|dirIndexRandomizer
operator|.
name|nextInt
argument_list|(
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentContext
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
DECL|method|createPath (Path dir, String path, boolean checkWrite)
specifier|private
name|Path
name|createPath
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|checkWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkWrite
condition|)
block|{
comment|//check whether we are able to create a directory here. If the disk
comment|//happens to be RDONLY we will fail
try|try
block|{
name|diskValidator
operator|.
name|checkStatus
argument_list|(
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|d
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disk Error Exception: "
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|file
return|;
block|}
comment|/**      * Get the current directory index.      * @return the current directory index.      */
DECL|method|getCurrentDirectoryIndex ()
name|int
name|getCurrentDirectoryIndex
parameter_list|()
block|{
return|return
name|currentContext
operator|.
name|get
argument_list|()
operator|.
name|dirNumLastAccessed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Get a path from the local FS. If size is known, we go      *  round-robin over the set of disks (via the configured dirs) and return      *  the first complete path which has enough space.      *        *  If size is not known, use roulette selection -- pick directories      *  with probability proportional to their available space.      */
DECL|method|getLocalPathForWrite (String pathStr, long size, Configuration conf, boolean checkWrite)
specifier|public
name|Path
name|getLocalPathForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|checkWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|Context
name|ctx
init|=
name|confChanged
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numDirs
init|=
name|ctx
operator|.
name|localDirs
operator|.
name|length
decl_stmt|;
name|int
name|numDirsSearched
init|=
literal|0
decl_stmt|;
comment|//remove the leading slash from the path (to make sure that the uri
comment|//resolution results in a valid path on the dir being checked)
if|if
condition|(
name|pathStr
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pathStr
operator|=
name|pathStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|returnPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|size
operator|==
name|SIZE_UNKNOWN
condition|)
block|{
comment|//do roulette selection: pick dir with probability
comment|//proportional to available size
name|long
index|[]
name|availableOnDisk
init|=
operator|new
name|long
index|[
name|ctx
operator|.
name|dirDF
operator|.
name|length
index|]
decl_stmt|;
name|long
name|totalAvailable
init|=
literal|0
decl_stmt|;
comment|//build the "roulette wheel"
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctx
operator|.
name|dirDF
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|availableOnDisk
index|[
name|i
index|]
operator|=
name|ctx
operator|.
name|dirDF
index|[
name|i
index|]
operator|.
name|getAvailable
argument_list|()
expr_stmt|;
name|totalAvailable
operator|+=
name|availableOnDisk
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|totalAvailable
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"No space available in any of the local directories."
argument_list|)
throw|;
block|}
comment|// Keep rolling the wheel till we get a valid path
name|Random
name|r
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
name|numDirsSearched
operator|<
name|numDirs
operator|&&
name|returnPath
operator|==
literal|null
condition|)
block|{
name|long
name|randomPosition
init|=
operator|(
name|r
operator|.
name|nextLong
argument_list|()
operator|>>>
literal|1
operator|)
operator|%
name|totalAvailable
decl_stmt|;
name|int
name|dir
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|randomPosition
operator|>
name|availableOnDisk
index|[
name|dir
index|]
condition|)
block|{
name|randomPosition
operator|-=
name|availableOnDisk
index|[
name|dir
index|]
expr_stmt|;
name|dir
operator|++
expr_stmt|;
block|}
name|ctx
operator|.
name|dirNumLastAccessed
operator|.
name|set
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|returnPath
operator|=
name|createPath
argument_list|(
name|ctx
operator|.
name|localDirs
index|[
name|dir
index|]
argument_list|,
name|pathStr
argument_list|,
name|checkWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnPath
operator|==
literal|null
condition|)
block|{
name|totalAvailable
operator|-=
name|availableOnDisk
index|[
name|dir
index|]
expr_stmt|;
name|availableOnDisk
index|[
name|dir
index|]
operator|=
literal|0
expr_stmt|;
comment|// skip this disk
name|numDirsSearched
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Start linear search with random increment if possible
name|int
name|randomInc
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|numDirs
operator|>
literal|2
condition|)
block|{
name|randomInc
operator|+=
name|dirIndexRandomizer
operator|.
name|nextInt
argument_list|(
name|numDirs
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|dirNum
init|=
name|ctx
operator|.
name|getAndIncrDirNumLastAccessed
argument_list|(
name|randomInc
argument_list|)
decl_stmt|;
while|while
condition|(
name|numDirsSearched
operator|<
name|numDirs
condition|)
block|{
name|long
name|capacity
init|=
name|ctx
operator|.
name|dirDF
index|[
name|dirNum
index|]
operator|.
name|getAvailable
argument_list|()
decl_stmt|;
if|if
condition|(
name|capacity
operator|>
name|size
condition|)
block|{
name|returnPath
operator|=
name|createPath
argument_list|(
name|ctx
operator|.
name|localDirs
index|[
name|dirNum
index|]
argument_list|,
name|pathStr
argument_list|,
name|checkWrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnPath
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getAndIncrDirNumLastAccessed
argument_list|(
name|numDirsSearched
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|dirNum
operator|++
expr_stmt|;
name|dirNum
operator|=
name|dirNum
operator|%
name|numDirs
expr_stmt|;
name|numDirsSearched
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|returnPath
operator|!=
literal|null
condition|)
block|{
return|return
name|returnPath
return|;
block|}
comment|//no path found
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Could not find any valid local "
operator|+
literal|"directory for "
operator|+
name|pathStr
argument_list|)
throw|;
block|}
comment|/** Creates a file on the local FS. Pass size as       * {@link LocalDirAllocator.SIZE_UNKNOWN} if not known apriori. We      *  round-robin over the set of disks (via the configured dirs) and return      *  a file on the first path which has enough space. The file is guaranteed      *  to go away when the JVM exits.      */
DECL|method|createTmpFileForWrite (String pathStr, long size, Configuration conf)
specifier|public
name|File
name|createTmpFileForWrite
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|long
name|size
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// find an appropriate directory
name|Path
name|path
init|=
name|getLocalPathForWrite
argument_list|(
name|pathStr
argument_list|,
name|size
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// create a temp file on this directory
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
literal|null
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** Get a path from the local FS for reading. We search through all the      *  configured dirs for the file's existence and return the complete      *  path to the file when we find one       */
DECL|method|getLocalPathToRead (String pathStr, Configuration conf)
specifier|public
name|Path
name|getLocalPathToRead
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Context
name|ctx
init|=
name|confChanged
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|numDirs
init|=
name|ctx
operator|.
name|localDirs
operator|.
name|length
decl_stmt|;
name|int
name|numDirsSearched
init|=
literal|0
decl_stmt|;
comment|//remove the leading slash from the path (to make sure that the uri
comment|//resolution results in a valid path on the dir being checked)
if|if
condition|(
name|pathStr
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pathStr
operator|=
name|pathStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|numDirsSearched
operator|<
name|numDirs
condition|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ctx
operator|.
name|localDirs
index|[
name|numDirsSearched
index|]
argument_list|,
name|pathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|localFS
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
name|numDirsSearched
operator|++
expr_stmt|;
block|}
comment|//no path found
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Could not find "
operator|+
name|pathStr
operator|+
literal|" in any of"
operator|+
literal|" the configured local directories"
argument_list|)
throw|;
block|}
DECL|class|PathIterator
specifier|private
specifier|static
class|class
name|PathIterator
implements|implements
name|Iterator
argument_list|<
name|Path
argument_list|>
implements|,
name|Iterable
argument_list|<
name|Path
argument_list|>
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|pathStr
specifier|private
specifier|final
name|String
name|pathStr
decl_stmt|;
DECL|field|i
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|field|rootDirs
specifier|private
specifier|final
name|Path
index|[]
name|rootDirs
decl_stmt|;
DECL|field|next
specifier|private
name|Path
name|next
init|=
literal|null
decl_stmt|;
DECL|method|PathIterator (FileSystem fs, String pathStr, Path[] rootDirs)
specifier|private
name|PathIterator
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|pathStr
parameter_list|,
name|Path
index|[]
name|rootDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|pathStr
operator|=
name|pathStr
expr_stmt|;
name|this
operator|.
name|rootDirs
operator|=
name|rootDirs
expr_stmt|;
name|advance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
DECL|method|advance ()
specifier|private
name|void
name|advance
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|i
operator|<
name|rootDirs
operator|.
name|length
condition|)
block|{
name|next
operator|=
operator|new
name|Path
argument_list|(
name|rootDirs
index|[
name|i
operator|++
index|]
argument_list|,
name|pathStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|next
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|next
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Path
name|next
parameter_list|()
block|{
specifier|final
name|Path
name|result
init|=
name|next
decl_stmt|;
try|try
block|{
name|advance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't check existence of "
operator|+
name|next
argument_list|,
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"read only iterator"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
comment|/**      * Get all of the paths that currently exist in the working directories.      * @param pathStr the path underneath the roots      * @param conf the configuration to look up the roots in      * @return all of the paths that exist under any of the roots      * @throws IOException      */
DECL|method|getAllLocalPathsToRead (String pathStr, Configuration conf)
name|Iterable
argument_list|<
name|Path
argument_list|>
name|getAllLocalPathsToRead
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Context
name|ctx
init|=
name|confChanged
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathStr
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pathStr
operator|=
name|pathStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PathIterator
argument_list|(
name|ctx
operator|.
name|localFS
argument_list|,
name|pathStr
argument_list|,
name|ctx
operator|.
name|localDirs
argument_list|)
return|;
block|}
comment|/** We search through all the configured dirs for the file's existence      *  and return true when we find one       */
DECL|method|ifExists (String pathStr, Configuration conf)
specifier|public
name|boolean
name|ifExists
parameter_list|(
name|String
name|pathStr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Context
name|ctx
init|=
name|currentContext
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|numDirs
init|=
name|ctx
operator|.
name|localDirs
operator|.
name|length
decl_stmt|;
name|int
name|numDirsSearched
init|=
literal|0
decl_stmt|;
comment|//remove the leading slash from the path (to make sure that the uri
comment|//resolution results in a valid path on the dir being checked)
if|if
condition|(
name|pathStr
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pathStr
operator|=
name|pathStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|numDirsSearched
operator|<
name|numDirs
condition|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ctx
operator|.
name|localDirs
index|[
name|numDirsSearched
index|]
argument_list|,
name|pathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|localFS
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|numDirsSearched
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// IGNORE and try again
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

