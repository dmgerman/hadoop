begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Utilities for implementing Reed-Solomon code, used by RS coder. Some of the  * codes are borrowed from ISA-L implementation (C or ASM codes).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RSUtil
specifier|public
specifier|final
class|class
name|RSUtil
block|{
DECL|method|RSUtil ()
specifier|private
name|RSUtil
parameter_list|()
block|{}
comment|// We always use the byte system (with symbol size 8, field size 256,
comment|// primitive polynomial 285, and primitive root 2).
DECL|field|GF
specifier|public
specifier|static
name|GaloisField
name|GF
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|PRIMITIVE_ROOT
specifier|public
specifier|static
specifier|final
name|int
name|PRIMITIVE_ROOT
init|=
literal|2
decl_stmt|;
DECL|method|getPrimitivePower (int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|int
index|[]
name|getPrimitivePower
parameter_list|(
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|int
index|[]
name|primitivePower
init|=
operator|new
name|int
index|[
name|numDataUnits
operator|+
name|numParityUnits
index|]
decl_stmt|;
comment|// compute powers of the primitive root
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataUnits
operator|+
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|primitivePower
index|[
name|i
index|]
operator|=
name|GF
operator|.
name|power
argument_list|(
name|PRIMITIVE_ROOT
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|primitivePower
return|;
block|}
DECL|method|initTables (int k, int rows, byte[] codingMatrix, int matrixOffset, byte[] gfTables)
specifier|public
specifier|static
name|void
name|initTables
parameter_list|(
name|int
name|k
parameter_list|,
name|int
name|rows
parameter_list|,
name|byte
index|[]
name|codingMatrix
parameter_list|,
name|int
name|matrixOffset
parameter_list|,
name|byte
index|[]
name|gfTables
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|idx
init|=
name|matrixOffset
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|k
condition|;
name|j
operator|++
control|)
block|{
name|GF256
operator|.
name|gfVectMulInit
argument_list|(
name|codingMatrix
index|[
name|idx
operator|++
index|]
argument_list|,
name|gfTables
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|32
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Ported from Intel ISA-L library.    */
DECL|method|genCauchyMatrix (byte[] a, int m, int k)
specifier|public
specifier|static
name|void
name|genCauchyMatrix
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|k
parameter_list|)
block|{
comment|// Identity matrix in high position
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|k
operator|*
name|i
operator|+
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// For the rest choose 1/(i + j) | i != j
name|int
name|pos
init|=
name|k
operator|*
name|k
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|k
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|k
condition|;
name|j
operator|++
control|)
block|{
name|a
index|[
name|pos
operator|++
index|]
operator|=
name|GF256
operator|.
name|gfInv
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|^
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Encode a group of inputs data and generate the outputs. It's also used for    * decoding because, in this implementation, encoding and decoding are    * unified.    *    * The algorithm is ported from Intel ISA-L library for compatible. It    * leverages Java auto-vectorization support for performance.    */
DECL|method|encodeData (byte[] gfTables, int dataLen, byte[][] inputs, int[] inputOffsets, byte[][] outputs, int[] outputOffsets)
specifier|public
specifier|static
name|void
name|encodeData
parameter_list|(
name|byte
index|[]
name|gfTables
parameter_list|,
name|int
name|dataLen
parameter_list|,
name|byte
index|[]
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|inputOffsets
parameter_list|,
name|byte
index|[]
index|[]
name|outputs
parameter_list|,
name|int
index|[]
name|outputOffsets
parameter_list|)
block|{
name|int
name|numInputs
init|=
name|inputs
operator|.
name|length
decl_stmt|;
name|int
name|numOutputs
init|=
name|outputs
operator|.
name|length
decl_stmt|;
name|int
name|l
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|,
name|iPos
decl_stmt|,
name|oPos
decl_stmt|;
name|byte
index|[]
name|input
decl_stmt|,
name|output
decl_stmt|;
name|byte
name|s
decl_stmt|;
specifier|final
name|int
name|times
init|=
name|dataLen
operator|/
literal|8
decl_stmt|;
specifier|final
name|int
name|extra
init|=
name|dataLen
operator|-
name|dataLen
operator|%
literal|8
decl_stmt|;
name|byte
index|[]
name|tableLine
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
name|numOutputs
condition|;
name|l
operator|++
control|)
block|{
name|output
operator|=
name|outputs
index|[
name|l
index|]
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|numInputs
condition|;
name|j
operator|++
control|)
block|{
name|input
operator|=
name|inputs
index|[
name|j
index|]
expr_stmt|;
name|iPos
operator|=
name|inputOffsets
index|[
name|j
index|]
expr_stmt|;
name|oPos
operator|=
name|outputOffsets
index|[
name|l
index|]
expr_stmt|;
name|s
operator|=
name|gfTables
index|[
name|j
operator|*
literal|32
operator|+
name|l
operator|*
name|numInputs
operator|*
literal|32
operator|+
literal|1
index|]
expr_stmt|;
name|tableLine
operator|=
name|GF256
operator|.
name|gfMulTab
argument_list|()
index|[
name|s
operator|&
literal|0xff
index|]
expr_stmt|;
comment|/**          * Purely for performance, assuming we can use 8 bytes in the SIMD          * instruction. Subject to be improved.          */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
operator|,
name|iPos
operator|+=
literal|8
operator|,
name|oPos
operator|+=
literal|8
control|)
block|{
name|output
index|[
name|oPos
operator|+
literal|0
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|0
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|1
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|1
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|2
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|2
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|3
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|3
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|4
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|4
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|5
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|5
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|6
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|6
index|]
index|]
expr_stmt|;
name|output
index|[
name|oPos
operator|+
literal|7
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
operator|+
literal|7
index|]
index|]
expr_stmt|;
block|}
comment|/**          * For the left bytes, do it one by one.          */
for|for
control|(
name|i
operator|=
name|extra
init|;
name|i
operator|<
name|dataLen
condition|;
name|i
operator|++
operator|,
name|iPos
operator|++
operator|,
name|oPos
operator|++
control|)
block|{
name|output
index|[
name|oPos
index|]
operator|^=
name|tableLine
index|[
literal|0xff
operator|&
name|input
index|[
name|iPos
index|]
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * See above. Try to use the byte[] version when possible.    */
DECL|method|encodeData (byte[] gfTables, ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|public
specifier|static
name|void
name|encodeData
parameter_list|(
name|byte
index|[]
name|gfTables
parameter_list|,
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
block|{
name|int
name|numInputs
init|=
name|inputs
operator|.
name|length
decl_stmt|;
name|int
name|numOutputs
init|=
name|outputs
operator|.
name|length
decl_stmt|;
name|int
name|dataLen
init|=
name|inputs
index|[
literal|0
index|]
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|l
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|,
name|iPos
decl_stmt|,
name|oPos
decl_stmt|;
name|ByteBuffer
name|input
decl_stmt|,
name|output
decl_stmt|;
name|byte
name|s
decl_stmt|;
specifier|final
name|int
name|times
init|=
name|dataLen
operator|/
literal|8
decl_stmt|;
specifier|final
name|int
name|extra
init|=
name|dataLen
operator|-
name|dataLen
operator|%
literal|8
decl_stmt|;
name|byte
index|[]
name|tableLine
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
name|numOutputs
condition|;
name|l
operator|++
control|)
block|{
name|output
operator|=
name|outputs
index|[
name|l
index|]
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|numInputs
condition|;
name|j
operator|++
control|)
block|{
name|input
operator|=
name|inputs
index|[
name|j
index|]
expr_stmt|;
name|iPos
operator|=
name|input
operator|.
name|position
argument_list|()
expr_stmt|;
name|oPos
operator|=
name|output
operator|.
name|position
argument_list|()
expr_stmt|;
name|s
operator|=
name|gfTables
index|[
name|j
operator|*
literal|32
operator|+
name|l
operator|*
name|numInputs
operator|*
literal|32
operator|+
literal|1
index|]
expr_stmt|;
name|tableLine
operator|=
name|GF256
operator|.
name|gfMulTab
argument_list|()
index|[
name|s
operator|&
literal|0xff
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
operator|,
name|iPos
operator|+=
literal|8
operator|,
name|oPos
operator|+=
literal|8
control|)
block|{
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|0
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|0
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|0
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|1
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|1
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|1
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|2
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|2
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|2
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|3
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|3
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|3
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|4
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|4
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|4
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|5
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|5
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|5
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|6
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|6
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|6
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|put
argument_list|(
name|oPos
operator|+
literal|7
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
operator|+
literal|7
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
operator|+
literal|7
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
name|extra
init|;
name|i
operator|<
name|dataLen
condition|;
name|i
operator|++
operator|,
name|iPos
operator|++
operator|,
name|oPos
operator|++
control|)
block|{
name|output
operator|.
name|put
argument_list|(
name|oPos
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|output
operator|.
name|get
argument_list|(
name|oPos
argument_list|)
operator|^
name|tableLine
index|[
literal|0xff
operator|&
name|input
operator|.
name|get
argument_list|(
name|iPos
argument_list|)
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

