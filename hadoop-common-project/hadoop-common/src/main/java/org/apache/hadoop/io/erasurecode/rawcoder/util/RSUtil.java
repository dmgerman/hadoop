begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Some utilities for Reed-Solomon coding.  */
end_comment

begin_class
DECL|class|RSUtil
specifier|public
class|class
name|RSUtil
block|{
comment|// We always use the byte system (with symbol size 8, field size 256,
comment|// primitive polynomial 285, and primitive root 2).
DECL|field|GF
specifier|public
specifier|static
name|GaloisField
name|GF
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|PRIMITIVE_ROOT
specifier|public
specifier|static
specifier|final
name|int
name|PRIMITIVE_ROOT
init|=
literal|2
decl_stmt|;
DECL|method|getPrimitivePower (int numDataUnits, int numParityUnits)
specifier|public
specifier|static
name|int
index|[]
name|getPrimitivePower
parameter_list|(
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|)
block|{
name|int
index|[]
name|primitivePower
init|=
operator|new
name|int
index|[
name|numDataUnits
operator|+
name|numParityUnits
index|]
decl_stmt|;
comment|// compute powers of the primitive root
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataUnits
operator|+
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|primitivePower
index|[
name|i
index|]
operator|=
name|GF
operator|.
name|power
argument_list|(
name|PRIMITIVE_ROOT
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|primitivePower
return|;
block|}
block|}
end_class

end_unit

