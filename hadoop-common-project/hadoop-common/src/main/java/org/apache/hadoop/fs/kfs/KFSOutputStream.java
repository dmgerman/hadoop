begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  *  *   * Implements the Hadoop FSOutputStream interfaces to allow applications to write to  * files in Kosmos File System (KFS).  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.kfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kosmix
operator|.
name|kosmosfs
operator|.
name|access
operator|.
name|KfsAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kosmix
operator|.
name|kosmosfs
operator|.
name|access
operator|.
name|KfsOutputChannel
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|KFSOutputStream
class|class
name|KFSOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|kfsChannel
specifier|private
name|KfsOutputChannel
name|kfsChannel
decl_stmt|;
DECL|field|progressReporter
specifier|private
name|Progressable
name|progressReporter
decl_stmt|;
DECL|method|KFSOutputStream (KfsAccess kfsAccess, String path, short replication, boolean append, Progressable prog)
specifier|public
name|KFSOutputStream
parameter_list|(
name|KfsAccess
name|kfsAccess
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|boolean
name|append
parameter_list|,
name|Progressable
name|prog
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
if|if
condition|(
operator|(
name|append
operator|)
operator|&&
operator|(
name|kfsAccess
operator|.
name|kfs_isFile
argument_list|(
name|path
argument_list|)
operator|)
condition|)
name|this
operator|.
name|kfsChannel
operator|=
name|kfsAccess
operator|.
name|kfs_append
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|kfsChannel
operator|=
name|kfsAccess
operator|.
name|kfs_create
argument_list|(
name|path
argument_list|,
name|replication
argument_list|)
expr_stmt|;
name|this
operator|.
name|progressReporter
operator|=
name|prog
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|kfsChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File closed"
argument_list|)
throw|;
block|}
return|return
name|kfsChannel
operator|.
name|tell
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|write (int v)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kfsChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File closed"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|b
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|v
expr_stmt|;
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kfsChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File closed"
argument_list|)
throw|;
block|}
comment|// touch the progress before going into KFS since the call can block
name|progressReporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|kfsChannel
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|kfsChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File closed"
argument_list|)
throw|;
block|}
comment|// touch the progress before going into KFS since the call can block
name|progressReporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|kfsChannel
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|kfsChannel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|flush
argument_list|()
expr_stmt|;
name|kfsChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|kfsChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

