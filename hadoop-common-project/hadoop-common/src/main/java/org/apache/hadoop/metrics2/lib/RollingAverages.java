begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  * This class maintains a group of rolling average metrics. It implements the  * algorithm of rolling average, i.e. a number of sliding windows are kept to  * roll over and evict old subsets of samples. Each window has a subset of  * samples in a stream, where sub-sum and sub-total are collected. All sub-sums  * and sub-totals in all windows will be aggregated to final-sum and final-total  * used to compute final average, which is called rolling average.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RollingAverages
specifier|public
class|class
name|RollingAverages
extends|extends
name|MutableMetric
implements|implements
name|Closeable
block|{
DECL|field|innerMetrics
specifier|private
specifier|final
name|MutableRatesWithAggregation
name|innerMetrics
init|=
operator|new
name|MutableRatesWithAggregation
argument_list|()
decl_stmt|;
DECL|field|SCHEDULER
specifier|private
specifier|static
specifier|final
name|ScheduledExecutorService
name|SCHEDULER
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"RollingAverages-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|scheduledTask
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|scheduledTask
init|=
literal|null
decl_stmt|;
DECL|field|currentSnapshot
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MutableRate
argument_list|>
name|currentSnapshot
decl_stmt|;
DECL|field|numWindows
specifier|private
specifier|final
name|int
name|numWindows
decl_stmt|;
DECL|field|avgInfoNameTemplate
specifier|private
specifier|final
name|String
name|avgInfoNameTemplate
decl_stmt|;
DECL|field|avgInfoDescTemplate
specifier|private
specifier|final
name|String
name|avgInfoDescTemplate
decl_stmt|;
DECL|class|SumAndCount
specifier|private
specifier|static
class|class
name|SumAndCount
block|{
DECL|field|sum
specifier|private
specifier|final
name|double
name|sum
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|long
name|count
decl_stmt|;
DECL|method|SumAndCount (final double sum, final long count)
specifier|public
name|SumAndCount
parameter_list|(
specifier|final
name|double
name|sum
parameter_list|,
specifier|final
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|sum
operator|=
name|sum
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
DECL|method|getSum ()
specifier|public
name|double
name|getSum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
DECL|method|getCount ()
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
comment|/**    *<p>    * key: metric name    *</p>    *<p>    * value: deque where sub-sums and sub-totals for sliding windows are    * maintained.    *</p>    */
DECL|field|averages
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
argument_list|>
name|averages
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Constructor of {@link RollingAverages}.    * @param windowSize    *          The number of seconds of each window for which sub set of samples    *          are gathered to compute the rolling average, A.K.A. roll over    *          interval.    * @param numWindows    *          The number of windows maintained to compute the rolling average.    * @param valueName    *          of the metric (e.g. "Time", "Latency")    */
DECL|method|RollingAverages ( final int windowSize, final int numWindows, final String valueName)
specifier|public
name|RollingAverages
parameter_list|(
specifier|final
name|int
name|windowSize
parameter_list|,
specifier|final
name|int
name|numWindows
parameter_list|,
specifier|final
name|String
name|valueName
parameter_list|)
block|{
name|String
name|uvName
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|String
name|lvName
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|valueName
argument_list|)
decl_stmt|;
name|avgInfoNameTemplate
operator|=
literal|"%s"
operator|+
literal|"RollingAvg"
operator|+
name|uvName
expr_stmt|;
name|avgInfoDescTemplate
operator|=
literal|"Rolling average "
operator|+
name|lvName
operator|+
literal|" for "
operator|+
literal|"%s"
expr_stmt|;
name|this
operator|.
name|numWindows
operator|=
name|numWindows
expr_stmt|;
name|scheduledTask
operator|=
name|SCHEDULER
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|RatesRoller
argument_list|(
name|this
argument_list|)
argument_list|,
name|windowSize
argument_list|,
name|windowSize
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor of {@link RollingAverages}.    * @param windowSize    *          The number of seconds of each window for which sub set of samples    *          are gathered to compute rolling average, also A.K.A roll over    *          interval.    * @param numWindows    *          The number of windows maintained in the same time to compute the    *          average of the rolling averages.    */
DECL|method|RollingAverages ( final int windowSize, final int numWindows)
specifier|public
name|RollingAverages
parameter_list|(
specifier|final
name|int
name|windowSize
parameter_list|,
specifier|final
name|int
name|numWindows
parameter_list|)
block|{
name|this
argument_list|(
name|windowSize
argument_list|,
name|numWindows
argument_list|,
literal|"Time"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshot (MetricsRecordBuilder builder, boolean all)
specifier|public
name|void
name|snapshot
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|all
operator|||
name|changed
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
argument_list|>
name|entry
range|:
name|averages
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|MetricsInfo
name|avgInfo
init|=
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|avgInfoNameTemplate
argument_list|,
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|avgInfoDescTemplate
argument_list|,
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|totalSum
init|=
literal|0
decl_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|SumAndCount
name|sumAndCount
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|sumAndCount
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|totalSum
operator|+=
name|sumAndCount
operator|.
name|getSum
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalCount
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|addGauge
argument_list|(
name|avgInfo
argument_list|,
name|totalSum
operator|/
name|totalCount
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
argument_list|()
condition|)
block|{
name|clearChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Collects states maintained in {@link ThreadLocal}, if any.    */
DECL|method|collectThreadLocalStates ()
specifier|public
name|void
name|collectThreadLocalStates
parameter_list|()
block|{
name|innerMetrics
operator|.
name|collectThreadLocalStates
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param name    *          name of metric    * @param value    *          value of metric    */
DECL|method|add (final String name, final long value)
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|long
name|value
parameter_list|)
block|{
name|innerMetrics
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|class|RatesRoller
specifier|private
specifier|static
class|class
name|RatesRoller
implements|implements
name|Runnable
block|{
DECL|field|parent
specifier|private
specifier|final
name|RollingAverages
name|parent
decl_stmt|;
DECL|method|RatesRoller (final RollingAverages parent)
specifier|public
name|RatesRoller
parameter_list|(
specifier|final
name|RollingAverages
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|parent
init|)
block|{
specifier|final
name|MetricsCollectorImpl
name|mc
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
specifier|final
name|MetricsRecordBuilder
name|rb
init|=
name|mc
operator|.
name|addRecord
argument_list|(
literal|"RatesRoller"
argument_list|)
decl_stmt|;
comment|/**          * snapshot all metrics regardless of being changed or not, in case no          * ops since last snapshot, we will get 0.          */
name|parent
operator|.
name|innerMetrics
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|mc
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"There must be only one record and it's named with 'RatesRoller'"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|currentSnapshot
operator|=
name|parent
operator|.
name|innerMetrics
operator|.
name|getGlobalMetrics
argument_list|()
expr_stmt|;
name|parent
operator|.
name|rollOverAvgs
argument_list|()
expr_stmt|;
block|}
name|parent
operator|.
name|setChanged
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Iterates over snapshot to capture all Avg metrics into rolling structure    * {@link RollingAverages#averages}.    */
DECL|method|rollOverAvgs ()
specifier|private
name|void
name|rollOverAvgs
parameter_list|()
block|{
if|if
condition|(
name|currentSnapshot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableRate
argument_list|>
name|entry
range|:
name|currentSnapshot
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|MutableRate
name|rate
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
name|deque
init|=
name|averages
operator|.
name|computeIfAbsent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
name|apply
parameter_list|(
name|String
name|k
parameter_list|)
block|{
return|return
operator|new
name|LinkedBlockingDeque
argument_list|<
name|SumAndCount
argument_list|>
argument_list|(
name|numWindows
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|SumAndCount
name|sumAndCount
init|=
operator|new
name|SumAndCount
argument_list|(
name|rate
operator|.
name|lastStat
argument_list|()
operator|.
name|total
argument_list|()
argument_list|,
name|rate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
argument_list|)
decl_stmt|;
comment|/* put newest sum and count to the end */
if|if
condition|(
operator|!
name|deque
operator|.
name|offerLast
argument_list|(
name|sumAndCount
argument_list|)
condition|)
block|{
name|deque
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
name|deque
operator|.
name|offerLast
argument_list|(
name|sumAndCount
argument_list|)
expr_stmt|;
block|}
block|}
name|setChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scheduledTask
operator|!=
literal|null
condition|)
block|{
name|scheduledTask
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|scheduledTask
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

