begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|ZKFCProtocolProtos
operator|.
name|ZKFCProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|ZKFCProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|ZKFCProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
literal|"HDFS"
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ZKFCRpcServer
specifier|public
class|class
name|ZKFCRpcServer
implements|implements
name|ZKFCProtocol
block|{
DECL|field|HANDLER_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|HANDLER_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|zkfc
specifier|private
specifier|final
name|ZKFailoverController
name|zkfc
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|ZKFCRpcServer (Configuration conf, InetSocketAddress bindAddr, ZKFailoverController zkfc, PolicyProvider policy)
name|ZKFCRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|bindAddr
parameter_list|,
name|ZKFailoverController
name|zkfc
parameter_list|,
name|PolicyProvider
name|policy
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zkfc
operator|=
name|zkfc
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ZKFCProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ZKFCProtocolServerSideTranslatorPB
name|translator
init|=
operator|new
name|ZKFCProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|service
init|=
name|ZKFCProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|translator
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|RPC
operator|.
name|getServer
argument_list|(
name|ZKFCProtocolPB
operator|.
name|class
argument_list|,
name|service
argument_list|,
name|bindAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|bindAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|HANDLER_COUNT
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|,
literal|null
comment|/*secretManager*/
argument_list|)
expr_stmt|;
comment|// set service-level authorization security policy
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|server
operator|.
name|getListenerAddress
argument_list|()
return|;
block|}
DECL|method|stopAndJoin ()
name|void
name|stopAndJoin
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cedeActive (int millisToCede)
specifier|public
name|void
name|cedeActive
parameter_list|(
name|int
name|millisToCede
parameter_list|)
throws|throws
name|IOException
throws|,
name|AccessControlException
block|{
name|zkfc
operator|.
name|checkRpcAdminAccess
argument_list|()
expr_stmt|;
name|zkfc
operator|.
name|cedeActive
argument_list|(
name|millisToCede
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|gracefulFailover ()
specifier|public
name|void
name|gracefulFailover
parameter_list|()
throws|throws
name|IOException
throws|,
name|AccessControlException
block|{
name|zkfc
operator|.
name|checkRpcAdminAccess
argument_list|()
expr_stmt|;
name|zkfc
operator|.
name|gracefulFailoverToYou
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

