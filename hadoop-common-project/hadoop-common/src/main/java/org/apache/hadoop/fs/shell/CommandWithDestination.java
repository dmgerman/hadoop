begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Provides: argument processing to ensure the destination is valid  * for the number of source arguments.  A processPaths that accepts both  * a source and resolved target.  Sources are resolved as children of  * a destination directory.  */
end_comment

begin_class
DECL|class|CommandWithDestination
specifier|abstract
class|class
name|CommandWithDestination
extends|extends
name|FsCommand
block|{
DECL|field|dst
specifier|protected
name|PathData
name|dst
decl_stmt|;
DECL|field|overwrite
specifier|private
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
DECL|field|verifyChecksum
specifier|private
name|boolean
name|verifyChecksum
init|=
literal|true
decl_stmt|;
DECL|field|writeChecksum
specifier|private
name|boolean
name|writeChecksum
init|=
literal|true
decl_stmt|;
comment|/**    *     * This method is used to enable the force(-f)  option while copying the files.    *     * @param flag true/false    */
DECL|method|setOverwrite (boolean flag)
specifier|protected
name|void
name|setOverwrite
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|overwrite
operator|=
name|flag
expr_stmt|;
block|}
DECL|method|setVerifyChecksum (boolean flag)
specifier|protected
name|void
name|setVerifyChecksum
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|verifyChecksum
operator|=
name|flag
expr_stmt|;
block|}
DECL|method|setWriteChecksum (boolean flag)
specifier|protected
name|void
name|setWriteChecksum
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|writeChecksum
operator|=
name|flag
expr_stmt|;
block|}
comment|/**    *  The last arg is expected to be a local path, if only one argument is    *  given then the destination will be the current directory     *  @param args is the list of arguments    */
DECL|method|getLocalDestination (LinkedList<String> args)
specifier|protected
name|void
name|getLocalDestination
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pathString
init|=
operator|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|)
condition|?
name|Path
operator|.
name|CUR_DIR
else|:
name|args
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|dst
operator|=
operator|new
name|PathData
argument_list|(
operator|new
name|File
argument_list|(
name|pathString
argument_list|)
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *  The last arg is expected to be a remote path, if only one argument is    *  given then the destination will be the remote user's directory     *  @param args is the list of arguments    *  @throws PathIOException if path doesn't exist or matches too many times     */
DECL|method|getRemoteDestination (LinkedList<String> args)
specifier|protected
name|void
name|getRemoteDestination
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|dst
operator|=
operator|new
name|PathData
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|pathString
init|=
name|args
operator|.
name|removeLast
argument_list|()
decl_stmt|;
comment|// if the path is a glob, then it must match one and only one path
name|PathData
index|[]
name|items
init|=
name|PathData
operator|.
name|expandAsGlob
argument_list|(
name|pathString
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|items
operator|.
name|length
condition|)
block|{
case|case
literal|0
case|:
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|pathString
argument_list|)
throw|;
case|case
literal|1
case|:
name|dst
operator|=
name|items
index|[
literal|0
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|PathIOException
argument_list|(
name|pathString
argument_list|,
literal|"Too many matches"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|processArguments (LinkedList<PathData> args)
specifier|protected
name|void
name|processArguments
parameter_list|(
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if more than one arg, the destination must be a directory
comment|// if one arg, the dst must not exist or must be a directory
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|exists
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dst
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|dst
operator|.
name|exists
condition|)
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|PathExistsException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|dst
operator|.
name|parentExists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|super
operator|.
name|processArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPathArgument (PathData src)
specifier|protected
name|void
name|processPathArgument
parameter_list|(
name|PathData
name|src
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|src
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
operator|&&
name|src
operator|.
name|fs
operator|.
name|equals
argument_list|(
name|dst
operator|.
name|fs
argument_list|)
condition|)
block|{
name|PathData
name|target
init|=
name|getTargetPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|src
operator|.
name|fs
operator|.
name|makeQualified
argument_list|(
name|src
operator|.
name|path
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|dstPath
init|=
name|dst
operator|.
name|fs
operator|.
name|makeQualified
argument_list|(
name|target
operator|.
name|path
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstPath
operator|.
name|equals
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|PathIOException
name|e
init|=
operator|new
name|PathIOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
literal|"are identical"
argument_list|)
decl_stmt|;
name|e
operator|.
name|setTargetPath
argument_list|(
name|dstPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|dstPath
operator|.
name|startsWith
argument_list|(
name|srcPath
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|PathIOException
name|e
init|=
operator|new
name|PathIOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|,
literal|"is a subdirectory of itself"
argument_list|)
decl_stmt|;
name|e
operator|.
name|setTargetPath
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|super
operator|.
name|processPathArgument
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData src)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|processPath
argument_list|(
name|src
argument_list|,
name|getTargetPath
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called with a source and target destination pair    * @param src for the operation    * @param target for the operation    * @throws IOException if anything goes wrong    */
DECL|method|processPath (PathData src, PathData dst)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|src
parameter_list|,
name|PathData
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|src
operator|.
name|stat
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
comment|// TODO: remove when FileContext is supported, this needs to either
comment|// copy the symlink or deref the symlink
throw|throw
operator|new
name|PathOperationException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|stat
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|copyFileToTarget
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|isRecursive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|recursePath (PathData src)
specifier|protected
name|void
name|recursePath
parameter_list|(
name|PathData
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|PathData
name|savedDst
init|=
name|dst
decl_stmt|;
try|try
block|{
comment|// modify dst as we descend to append the basename of the
comment|// current directory being processed
name|dst
operator|=
name|getTargetPath
argument_list|(
name|src
argument_list|)
expr_stmt|;
if|if
condition|(
name|dst
operator|.
name|exists
condition|)
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|fs
operator|.
name|mkdirs
argument_list|(
name|dst
operator|.
name|path
argument_list|)
condition|)
block|{
comment|// too bad we have no clue what failed
name|PathIOException
name|e
init|=
operator|new
name|PathIOException
argument_list|(
name|dst
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|setOperation
argument_list|(
literal|"mkdir"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|dst
operator|.
name|refreshStatus
argument_list|()
expr_stmt|;
comment|// need to update stat to know it exists now
block|}
name|super
operator|.
name|recursePath
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dst
operator|=
name|savedDst
expr_stmt|;
block|}
block|}
DECL|method|getTargetPath (PathData src)
specifier|protected
name|PathData
name|getTargetPath
parameter_list|(
name|PathData
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|PathData
name|target
decl_stmt|;
comment|// on the first loop, the dst may be directory or a file, so only create
comment|// a child path if dst is a dir; after recursion, it's always a dir
if|if
condition|(
operator|(
name|getDepth
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|dst
operator|.
name|exists
operator|&&
name|dst
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
operator|)
condition|)
block|{
name|target
operator|=
name|dst
operator|.
name|getPathDataForChild
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dst
operator|.
name|representsDirectory
argument_list|()
condition|)
block|{
comment|// see if path looks like a dir
name|target
operator|=
name|dst
operator|.
name|getPathDataForChild
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|dst
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
comment|/**    * Copies the source file to the target.    * @param src item to copy    * @param target where to copy the item    * @throws IOException if copy fails    */
DECL|method|copyFileToTarget (PathData src, PathData target)
specifier|protected
name|void
name|copyFileToTarget
parameter_list|(
name|PathData
name|src
parameter_list|,
name|PathData
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|src
operator|.
name|fs
operator|.
name|setVerifyChecksum
argument_list|(
name|verifyChecksum
argument_list|)
expr_stmt|;
name|copyStreamToTarget
argument_list|(
name|src
operator|.
name|fs
operator|.
name|open
argument_list|(
name|src
operator|.
name|path
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies the stream contents to a temporary file.  If the copy is    * successful, the temporary file will be renamed to the real path,    * else the temporary file will be deleted.    * @param in the input stream for the copy    * @param target where to store the contents of the stream    * @throws IOException if copy fails    */
DECL|method|copyStreamToTarget (InputStream in, PathData target)
specifier|protected
name|void
name|copyStreamToTarget
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|PathData
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|.
name|exists
operator|&&
operator|(
name|target
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|overwrite
operator|)
condition|)
block|{
throw|throw
operator|new
name|PathExistsException
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|TargetFileSystem
name|targetFs
init|=
operator|new
name|TargetFileSystem
argument_list|(
name|target
operator|.
name|fs
argument_list|)
decl_stmt|;
try|try
block|{
name|PathData
name|tempTarget
init|=
name|target
operator|.
name|suffix
argument_list|(
literal|"._COPYING_"
argument_list|)
decl_stmt|;
name|targetFs
operator|.
name|setWriteChecksum
argument_list|(
name|writeChecksum
argument_list|)
expr_stmt|;
name|targetFs
operator|.
name|writeStreamToFile
argument_list|(
name|in
argument_list|,
name|tempTarget
argument_list|)
expr_stmt|;
name|targetFs
operator|.
name|rename
argument_list|(
name|tempTarget
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|targetFs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// last ditch effort to ensure temp file is removed
block|}
block|}
comment|// Helper filter filesystem that registers created files as temp files to
comment|// be deleted on exit unless successfully renamed
DECL|class|TargetFileSystem
specifier|private
specifier|static
class|class
name|TargetFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|TargetFileSystem (FileSystem fs)
name|TargetFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStreamToFile (InputStream in, PathData target)
name|void
name|writeStreamToFile
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|PathData
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|create
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// just in case copyBytes didn't
block|}
block|}
comment|// tag created files as temp files
DECL|method|create (PathData item)
name|FSDataOutputStream
name|create
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|create
argument_list|(
name|item
operator|.
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// might have been created but stream was interrupted
name|deleteOnExit
argument_list|(
name|item
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rename (PathData src, PathData target)
name|void
name|rename
parameter_list|(
name|PathData
name|src
parameter_list|,
name|PathData
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the rename method with an option to delete the target is deprecated
if|if
condition|(
name|target
operator|.
name|exists
operator|&&
operator|!
name|delete
argument_list|(
name|target
operator|.
name|path
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// too bad we don't know why it failed
name|PathIOException
name|e
init|=
operator|new
name|PathIOException
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|setOperation
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|rename
argument_list|(
name|src
operator|.
name|path
argument_list|,
name|target
operator|.
name|path
argument_list|)
condition|)
block|{
comment|// too bad we don't know why it failed
name|PathIOException
name|e
init|=
operator|new
name|PathIOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|setOperation
argument_list|(
literal|"rename"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTargetPath
argument_list|(
name|target
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// cancel delete on exit if rename is successful
name|cancelDeleteOnExit
argument_list|(
name|src
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// purge any remaining temp files, but don't close underlying fs
name|processDeleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

