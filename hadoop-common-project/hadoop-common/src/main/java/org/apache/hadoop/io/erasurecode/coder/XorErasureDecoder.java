begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|XorRawDecoder
import|;
end_import

begin_comment
comment|/**  * Xor erasure decoder that decodes a block group.  *  * It implements {@link ErasureDecoder}.  */
end_comment

begin_class
DECL|class|XorErasureDecoder
specifier|public
class|class
name|XorErasureDecoder
extends|extends
name|AbstractErasureDecoder
block|{
annotation|@
name|Override
DECL|method|prepareDecodingStep (final ECBlockGroup blockGroup)
specifier|protected
name|ErasureCodingStep
name|prepareDecodingStep
parameter_list|(
specifier|final
name|ECBlockGroup
name|blockGroup
parameter_list|)
block|{
comment|// May be configured
name|RawErasureDecoder
name|rawDecoder
init|=
operator|new
name|XorRawDecoder
argument_list|()
decl_stmt|;
name|rawDecoder
operator|.
name|initialize
argument_list|(
name|getNumDataUnits
argument_list|()
argument_list|,
name|getNumParityUnits
argument_list|()
argument_list|,
name|getChunkSize
argument_list|()
argument_list|)
expr_stmt|;
name|ECBlock
index|[]
name|inputBlocks
init|=
name|getInputBlocks
argument_list|(
name|blockGroup
argument_list|)
decl_stmt|;
return|return
operator|new
name|ErasureDecodingStep
argument_list|(
name|inputBlocks
argument_list|,
name|getErasedIndexes
argument_list|(
name|inputBlocks
argument_list|)
argument_list|,
name|getOutputBlocks
argument_list|(
name|blockGroup
argument_list|)
argument_list|,
name|rawDecoder
argument_list|)
return|;
block|}
comment|/**    * Which blocks were erased ? For XOR it's simple we only allow and return one    * erased block, either data or parity.    * @param blockGroup    * @return output blocks to recover    */
annotation|@
name|Override
DECL|method|getOutputBlocks (ECBlockGroup blockGroup)
specifier|protected
name|ECBlock
index|[]
name|getOutputBlocks
parameter_list|(
name|ECBlockGroup
name|blockGroup
parameter_list|)
block|{
comment|/**      * If more than one blocks (either data or parity) erased, then it's not      * edible to recover. We don't have the check here since it will be done      * by upper level: ErasreCoder call can be avoid if not possible to recover      * at all.      */
name|int
name|erasedNum
init|=
name|getNumErasedBlocks
argument_list|(
name|blockGroup
argument_list|)
decl_stmt|;
name|ECBlock
index|[]
name|outputBlocks
init|=
operator|new
name|ECBlock
index|[
name|erasedNum
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNumParityUnits
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|blockGroup
operator|.
name|getParityBlocks
argument_list|()
index|[
name|i
index|]
operator|.
name|isErased
argument_list|()
condition|)
block|{
name|outputBlocks
index|[
name|idx
operator|++
index|]
operator|=
name|blockGroup
operator|.
name|getParityBlocks
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNumDataUnits
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|blockGroup
operator|.
name|getDataBlocks
argument_list|()
index|[
name|i
index|]
operator|.
name|isErased
argument_list|()
condition|)
block|{
name|outputBlocks
index|[
name|idx
operator|++
index|]
operator|=
name|blockGroup
operator|.
name|getDataBlocks
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|outputBlocks
return|;
block|}
block|}
end_class

end_unit

