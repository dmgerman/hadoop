begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_comment
comment|/**  * The server-side secret manager for each token type.  * @param<T> The type of the token identifier  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SecretManager
specifier|public
specifier|abstract
class|class
name|SecretManager
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
block|{
comment|/**    * The token was invalid and the message explains why.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|InvalidToken
specifier|public
specifier|static
class|class
name|InvalidToken
extends|extends
name|IOException
block|{
DECL|method|InvalidToken (String msg)
specifier|public
name|InvalidToken
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the password for the given identifier.    * identifier may be modified inside this method.    * @param identifier the identifier to use    * @return the new password    */
DECL|method|createPassword (T identifier)
specifier|protected
specifier|abstract
name|byte
index|[]
name|createPassword
parameter_list|(
name|T
name|identifier
parameter_list|)
function_decl|;
comment|/**    * Retrieve the password for the given token identifier. Should check the date    * or registry to make sure the token hasn't expired or been revoked. Returns     * the relevant password.    * @param identifier the identifier to validate    * @return the password to use    * @throws InvalidToken the token was invalid    */
DECL|method|retrievePassword (T identifier)
specifier|public
specifier|abstract
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|T
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
function_decl|;
comment|/**    * The same functionality with {@link #retrievePassword}, except that this     * method can throw a {@link RetriableException} or a {@link StandbyException}    * to indicate that client can retry/failover the same operation because of     * temporary issue on the server side.    *     * @param identifier the identifier to validate    * @return the password to use    * @throws InvalidToken the token was invalid    * @throws StandbyException the server is in standby state, the client can    *         try other servers    * @throws RetriableException the token was invalid, and the server thinks     *         this may be a temporary issue and suggests the client to retry    * @throws IOException to allow future exceptions to be added without breaking    *         compatibility            */
DECL|method|retriableRetrievePassword (T identifier)
specifier|public
name|byte
index|[]
name|retriableRetrievePassword
parameter_list|(
name|T
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|StandbyException
throws|,
name|RetriableException
throws|,
name|IOException
block|{
return|return
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
return|;
block|}
comment|/**    * Create an empty token identifier.    * @return the newly created empty token identifier    */
DECL|method|createIdentifier ()
specifier|public
specifier|abstract
name|T
name|createIdentifier
parameter_list|()
function_decl|;
comment|/**    * No-op if the secret manager is available for reading tokens, throw a    * StandbyException otherwise.    *     * @throws StandbyException if the secret manager is not available to read    *         tokens    */
DECL|method|checkAvailableForRead ()
specifier|public
name|void
name|checkAvailableForRead
parameter_list|()
throws|throws
name|StandbyException
block|{
comment|// Default to being available for read.
block|}
comment|/**    * The name of the hashing algorithm.    */
DECL|field|DEFAULT_HMAC_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HMAC_ALGORITHM
init|=
literal|"HmacSHA1"
decl_stmt|;
comment|/**    * The length of the random keys to use.    */
DECL|field|KEY_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|KEY_LENGTH
init|=
literal|64
decl_stmt|;
comment|/**    * A thread local store for the Macs.    */
DECL|field|threadLocalMac
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Mac
argument_list|>
name|threadLocalMac
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Mac
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Mac
name|initialValue
parameter_list|()
block|{
try|try
block|{
return|return
name|Mac
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|nsa
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find "
operator|+
name|DEFAULT_HMAC_ALGORITHM
operator|+
literal|" algorithm."
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|/**    * Key generator to use.    */
DECL|field|keyGen
specifier|private
specifier|final
name|KeyGenerator
name|keyGen
decl_stmt|;
block|{
try|try
block|{
name|keyGen
operator|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
expr_stmt|;
name|keyGen
operator|.
name|init
argument_list|(
name|KEY_LENGTH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|nsa
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find "
operator|+
name|DEFAULT_HMAC_ALGORITHM
operator|+
literal|" algorithm."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Generate a new random secret key.    * @return the new key    */
DECL|method|generateSecret ()
specifier|protected
name|SecretKey
name|generateSecret
parameter_list|()
block|{
name|SecretKey
name|key
decl_stmt|;
synchronized|synchronized
init|(
name|keyGen
init|)
block|{
name|key
operator|=
name|keyGen
operator|.
name|generateKey
argument_list|()
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
comment|/**    * Compute HMAC of the identifier using the secret key and return the     * output as password    * @param identifier the bytes of the identifier    * @param key the secret key    * @return the bytes of the generated password    */
DECL|method|createPassword (byte[] identifier, SecretKey key)
specifier|protected
specifier|static
name|byte
index|[]
name|createPassword
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|,
name|SecretKey
name|key
parameter_list|)
block|{
name|Mac
name|mac
init|=
name|threadLocalMac
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|ike
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid key to HMAC computation"
argument_list|,
name|ike
argument_list|)
throw|;
block|}
return|return
name|mac
operator|.
name|doFinal
argument_list|(
name|identifier
argument_list|)
return|;
block|}
comment|/**    * Convert the byte[] to a secret key    * @param key the byte[] to create a secret key from    * @return the secret key    */
DECL|method|createSecretKey (byte[] key)
specifier|protected
specifier|static
name|SecretKey
name|createSecretKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|key
argument_list|,
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
return|;
block|}
block|}
end_class

end_unit

