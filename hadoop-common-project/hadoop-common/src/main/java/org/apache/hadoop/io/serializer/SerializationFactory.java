begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
operator|.
name|AvroReflectSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
operator|.
name|AvroSpecificSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  *<p>  * A factory for {@link Serialization}s.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SerializationFactory
specifier|public
class|class
name|SerializationFactory
extends|extends
name|Configured
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SerializationFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|serializations
specifier|private
name|List
argument_list|<
name|Serialization
argument_list|<
name|?
argument_list|>
argument_list|>
name|serializations
init|=
operator|new
name|ArrayList
argument_list|<
name|Serialization
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    *<p>    * Serializations are found by reading the<code>io.serializations</code>    * property from<code>conf</code>, which is a comma-delimited list of    * classnames.    *</p>    */
DECL|method|SerializationFactory (Configuration conf)
specifier|public
name|SerializationFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Serialization for various data types may not be available. Please configure "
operator|+
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
operator|+
literal|" properly to have serialization support (it is currently not set)."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|serializerName
range|:
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|,
operator|new
name|String
index|[]
block|{
name|WritableSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AvroSpecificSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AvroReflectSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
control|)
block|{
name|add
argument_list|(
name|conf
argument_list|,
name|serializerName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|add (Configuration conf, String serializationName)
specifier|private
name|void
name|add
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|serializationName
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Serialization
argument_list|>
name|serializionClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Serialization
argument_list|>
operator|)
name|conf
operator|.
name|getClassByName
argument_list|(
name|serializationName
argument_list|)
decl_stmt|;
name|serializations
operator|.
name|add
argument_list|(
operator|(
name|Serialization
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|serializionClass
argument_list|,
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Serialization class not found: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSerializer (Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Serializer
argument_list|<
name|T
argument_list|>
name|getSerializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|Serialization
argument_list|<
name|T
argument_list|>
name|serializer
init|=
name|getSerialization
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializer
operator|!=
literal|null
condition|)
block|{
return|return
name|serializer
operator|.
name|getSerializer
argument_list|(
name|c
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getDeserializer (Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Deserializer
argument_list|<
name|T
argument_list|>
name|getDeserializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|Serialization
argument_list|<
name|T
argument_list|>
name|serializer
init|=
name|getSerialization
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|serializer
operator|!=
literal|null
condition|)
block|{
return|return
name|serializer
operator|.
name|getDeserializer
argument_list|(
name|c
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getSerialization (Class<T> c)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Serialization
argument_list|<
name|T
argument_list|>
name|getSerialization
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
for|for
control|(
name|Serialization
name|serialization
range|:
name|serializations
control|)
block|{
if|if
condition|(
name|serialization
operator|.
name|accept
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
operator|(
name|Serialization
argument_list|<
name|T
argument_list|>
operator|)
name|serialization
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

