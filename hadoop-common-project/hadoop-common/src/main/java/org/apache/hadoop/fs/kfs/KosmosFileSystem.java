begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  *  *   * Implements the Hadoop FS interfaces to allow applications to store  *files in Kosmos File System (KFS).  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.kfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * A FileSystem backed by KFS.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|KosmosFileSystem
specifier|public
class|class
name|KosmosFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|localFs
specifier|private
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|kfsImpl
specifier|private
name|IFSImpl
name|kfsImpl
init|=
literal|null
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
DECL|method|KosmosFileSystem ()
specifier|public
name|KosmosFileSystem
parameter_list|()
block|{      }
DECL|method|KosmosFileSystem (IFSImpl fsimpl)
name|KosmosFileSystem
parameter_list|(
name|IFSImpl
name|fsimpl
parameter_list|)
block|{
name|this
operator|.
name|kfsImpl
operator|=
name|fsimpl
expr_stmt|;
block|}
comment|/**      * Return the protocol scheme for the FileSystem.      *<p/>      *      * @return<code>kfs</code>      */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"kfs"
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|kfsImpl
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|uri
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|kfsImpl
operator|=
operator|new
name|KFSImpl
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.kfs.metaServerHost"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"fs.kfs.metaServerPort"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kfsImpl
operator|=
operator|new
name|KFSImpl
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to initialize KFS"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|makeAbsolute (Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path path, FsPermission permission )
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|res
decl_stmt|;
comment|// System.out.println("Calling mkdirs on: " + srep);
name|res
operator|=
name|kfsImpl
operator|.
name|mkdirs
argument_list|(
name|srep
argument_list|)
expr_stmt|;
return|return
name|res
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|isDirectory (Path path)
specifier|public
name|boolean
name|isDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// System.out.println("Calling isdir on: " + srep);
return|return
name|kfsImpl
operator|.
name|isDirectory
argument_list|(
name|srep
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFile (Path path)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|kfsImpl
operator|.
name|isFile
argument_list|(
name|srep
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path path)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|kfsImpl
operator|.
name|exists
argument_list|(
name|srep
argument_list|)
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" does not exist."
argument_list|)
throw|;
if|if
condition|(
name|kfsImpl
operator|.
name|isFile
argument_list|(
name|srep
argument_list|)
condition|)
return|return
operator|new
name|FileStatus
index|[]
block|{
name|getFileStatus
argument_list|(
name|path
argument_list|)
block|}
return|;
return|return
name|kfsImpl
operator|.
name|readdirplus
argument_list|(
name|absolute
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path path)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|kfsImpl
operator|.
name|exists
argument_list|(
name|srep
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|kfsImpl
operator|.
name|isDirectory
argument_list|(
name|srep
argument_list|)
condition|)
block|{
comment|// System.out.println("Status of path: " + path + " is dir");
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|kfsImpl
operator|.
name|getModificationTime
argument_list|(
name|srep
argument_list|)
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// System.out.println("Status of path: " + path + " is file");
return|return
operator|new
name|FileStatus
argument_list|(
name|kfsImpl
operator|.
name|filesize
argument_list|(
name|srep
argument_list|)
argument_list|,
literal|false
argument_list|,
name|kfsImpl
operator|.
name|getReplication
argument_list|(
name|srep
argument_list|)
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|kfsImpl
operator|.
name|getModificationTime
argument_list|(
name|srep
argument_list|)
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|mkdirs
argument_list|(
name|parent
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|parent
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|kfsImpl
operator|.
name|append
argument_list|(
name|srep
argument_list|,
name|bufferSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path file, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists: "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
name|Path
name|parent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|mkdirs
argument_list|(
name|parent
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|parent
argument_list|)
throw|;
block|}
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|kfsImpl
operator|.
name|create
argument_list|(
name|srep
argument_list|,
name|replication
argument_list|,
name|bufferSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path path, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|path
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File does not exist: "
operator|+
name|path
argument_list|)
throw|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|kfsImpl
operator|.
name|open
argument_list|(
name|srep
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absoluteS
init|=
name|makeAbsolute
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|String
name|srepS
init|=
name|absoluteS
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|absoluteD
init|=
name|makeAbsolute
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|String
name|srepD
init|=
name|absoluteD
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// System.out.println("Calling rename on: " + srepS + " -> " + srepD);
return|return
name|kfsImpl
operator|.
name|rename
argument_list|(
name|srepS
argument_list|,
name|srepD
argument_list|)
operator|==
literal|0
return|;
block|}
comment|// recursively delete the directory and its contents
annotation|@
name|Override
DECL|method|delete (Path path, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|kfsImpl
operator|.
name|isFile
argument_list|(
name|srep
argument_list|)
condition|)
return|return
name|kfsImpl
operator|.
name|remove
argument_list|(
name|srep
argument_list|)
operator|==
literal|0
return|;
name|FileStatus
index|[]
name|dirEntries
init|=
name|listStatus
argument_list|(
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
operator|&&
operator|(
name|dirEntries
operator|.
name|length
operator|!=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|" is not empty."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|absolute
argument_list|,
name|dirEntries
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
return|return
name|kfsImpl
operator|.
name|rmdir
argument_list|(
name|srep
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|setReplication (Path path, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srep
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|kfsImpl
operator|.
name|setReplication
argument_list|(
name|srep
argument_list|,
name|replication
argument_list|)
decl_stmt|;
return|return
name|res
operator|>=
literal|0
return|;
block|}
comment|// 64MB is the KFS block size
annotation|@
name|Override
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
literal|1
operator|<<
literal|26
return|;
block|}
annotation|@
name|Deprecated
DECL|method|lock (Path path, boolean shared)
specifier|public
name|void
name|lock
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|shared
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Deprecated
DECL|method|release (Path path)
specifier|public
name|void
name|release
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{      }
comment|/**      * Return null if the file doesn't exist; otherwise, get the      * locations of the various chunks of the file file from KFS.      */
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|srep
init|=
name|makeAbsolute
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
index|[]
index|[]
name|hints
init|=
name|kfsImpl
operator|.
name|getDataLocation
argument_list|(
name|srep
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|hints
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BlockLocation
index|[]
name|result
init|=
operator|new
name|BlockLocation
index|[
name|hints
operator|.
name|length
index|]
decl_stmt|;
name|long
name|blockSize
init|=
name|getDefaultBlockSize
argument_list|()
decl_stmt|;
name|long
name|length
init|=
name|len
decl_stmt|;
name|long
name|blockStart
init|=
name|start
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
name|hints
index|[
name|i
index|]
argument_list|,
name|blockStart
argument_list|,
name|length
operator|<
name|blockSize
condition|?
name|length
else|:
name|blockSize
argument_list|)
expr_stmt|;
name|blockStart
operator|+=
name|blockSize
expr_stmt|;
name|length
operator|-=
name|blockSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|copyFromLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|localFs
argument_list|,
name|src
argument_list|,
name|this
argument_list|,
name|dst
argument_list|,
name|delSrc
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copyToLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyToLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|localFs
argument_list|,
name|dst
argument_list|,
name|delSrc
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tmpLocalFile
return|;
block|}
annotation|@
name|Override
DECL|method|completeLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
name|moveFromLocalFile
argument_list|(
name|tmpLocalFile
argument_list|,
name|fsOutputFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

