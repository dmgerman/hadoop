begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
operator|.
name|ActiveNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
operator|.
name|ActiveStandbyElectorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|RequestSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
operator|.
name|ZKAuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthMonitor
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
literal|"HDFS"
argument_list|)
DECL|class|ZKFailoverController
specifier|public
specifier|abstract
class|class
name|ZKFailoverController
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKFailoverController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZK_QUORUM_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ZK_QUORUM_KEY
init|=
literal|"ha.zookeeper.quorum"
decl_stmt|;
DECL|field|ZK_SESSION_TIMEOUT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ZK_SESSION_TIMEOUT_KEY
init|=
literal|"ha.zookeeper.session-timeout.ms"
decl_stmt|;
DECL|field|ZK_SESSION_TIMEOUT_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|ZK_SESSION_TIMEOUT_DEFAULT
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|ZK_PARENT_ZNODE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PARENT_ZNODE_KEY
init|=
literal|"ha.zookeeper.parent-znode"
decl_stmt|;
DECL|field|ZK_ACL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ZK_ACL_KEY
init|=
literal|"ha.zookeeper.acl"
decl_stmt|;
DECL|field|ZK_ACL_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|ZK_ACL_DEFAULT
init|=
literal|"world:anyone:rwcda"
decl_stmt|;
DECL|field|ZK_AUTH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ZK_AUTH_KEY
init|=
literal|"ha.zookeeper.auth"
decl_stmt|;
DECL|field|ZK_PARENT_ZNODE_DEFAULT
specifier|static
specifier|final
name|String
name|ZK_PARENT_ZNODE_DEFAULT
init|=
literal|"/hadoop-ha"
decl_stmt|;
comment|/**    * All of the conf keys used by the ZKFC. This is used in order to allow    * them to be overridden on a per-nameservice or per-namenode basis.    */
DECL|field|ZKFC_CONF_KEYS
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|ZKFC_CONF_KEYS
init|=
operator|new
name|String
index|[]
block|{
name|ZK_QUORUM_KEY
block|,
name|ZK_SESSION_TIMEOUT_KEY
block|,
name|ZK_PARENT_ZNODE_KEY
block|,
name|ZK_ACL_KEY
block|,
name|ZK_AUTH_KEY
block|}
decl_stmt|;
DECL|field|USAGE
specifier|protected
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: java zkfc [ -formatZK [-force] [-nonInteractive] ]"
decl_stmt|;
comment|/** Unable to format the parent znode in ZK */
DECL|field|ERR_CODE_FORMAT_DENIED
specifier|static
specifier|final
name|int
name|ERR_CODE_FORMAT_DENIED
init|=
literal|2
decl_stmt|;
comment|/** The parent znode doesn't exist in ZK */
DECL|field|ERR_CODE_NO_PARENT_ZNODE
specifier|static
specifier|final
name|int
name|ERR_CODE_NO_PARENT_ZNODE
init|=
literal|3
decl_stmt|;
comment|/** Fencing is not properly configured */
DECL|field|ERR_CODE_NO_FENCER
specifier|static
specifier|final
name|int
name|ERR_CODE_NO_FENCER
init|=
literal|4
decl_stmt|;
comment|/** Automatic failover is not enabled */
DECL|field|ERR_CODE_AUTO_FAILOVER_NOT_ENABLED
specifier|static
specifier|final
name|int
name|ERR_CODE_AUTO_FAILOVER_NOT_ENABLED
init|=
literal|5
decl_stmt|;
comment|/** Cannot connect to ZooKeeper */
DECL|field|ERR_CODE_NO_ZK
specifier|static
specifier|final
name|int
name|ERR_CODE_NO_ZK
init|=
literal|6
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|zkQuorum
specifier|private
name|String
name|zkQuorum
decl_stmt|;
DECL|field|localTarget
specifier|protected
specifier|final
name|HAServiceTarget
name|localTarget
decl_stmt|;
DECL|field|healthMonitor
specifier|private
name|HealthMonitor
name|healthMonitor
decl_stmt|;
DECL|field|elector
specifier|private
name|ActiveStandbyElector
name|elector
decl_stmt|;
DECL|field|rpcServer
specifier|protected
name|ZKFCRpcServer
name|rpcServer
decl_stmt|;
DECL|field|lastHealthState
specifier|private
name|State
name|lastHealthState
init|=
name|State
operator|.
name|INITIALIZING
decl_stmt|;
DECL|field|serviceState
specifier|private
specifier|volatile
name|HAServiceState
name|serviceState
init|=
name|HAServiceState
operator|.
name|INITIALIZING
decl_stmt|;
comment|/** Set if a fatal error occurs */
DECL|field|fatalError
specifier|private
name|String
name|fatalError
init|=
literal|null
decl_stmt|;
comment|/**    * A future nanotime before which the ZKFC will not join the election.    * This is used during graceful failover.    */
DECL|field|delayJoiningUntilNanotime
specifier|private
name|long
name|delayJoiningUntilNanotime
init|=
literal|0
decl_stmt|;
comment|/** Executor on which {@link #scheduleRecheck(long)} schedules events */
DECL|field|delayExecutor
specifier|private
name|ScheduledExecutorService
name|delayExecutor
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"ZKFC Delay timer #%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lastActiveAttemptRecord
specifier|private
name|ActiveAttemptRecord
name|lastActiveAttemptRecord
decl_stmt|;
DECL|field|activeAttemptRecordLock
specifier|private
name|Object
name|activeAttemptRecordLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|ZKFailoverController (Configuration conf, HAServiceTarget localTarget)
specifier|protected
name|ZKFailoverController
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HAServiceTarget
name|localTarget
parameter_list|)
block|{
name|this
operator|.
name|localTarget
operator|=
name|localTarget
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|targetToData (HAServiceTarget target)
specifier|protected
specifier|abstract
name|byte
index|[]
name|targetToData
parameter_list|(
name|HAServiceTarget
name|target
parameter_list|)
function_decl|;
DECL|method|dataToTarget (byte[] data)
specifier|protected
specifier|abstract
name|HAServiceTarget
name|dataToTarget
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
function_decl|;
DECL|method|loginAsFCUser ()
specifier|protected
specifier|abstract
name|void
name|loginAsFCUser
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|checkRpcAdminAccess ()
specifier|protected
specifier|abstract
name|void
name|checkRpcAdminAccess
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
function_decl|;
DECL|method|getRpcAddressToBindTo ()
specifier|protected
specifier|abstract
name|InetSocketAddress
name|getRpcAddressToBindTo
parameter_list|()
function_decl|;
DECL|method|getPolicyProvider ()
specifier|protected
specifier|abstract
name|PolicyProvider
name|getPolicyProvider
parameter_list|()
function_decl|;
comment|/**    * Return the name of a znode inside the configured parent znode in which    * the ZKFC will do all of its work. This is so that multiple federated    * nameservices can run on the same ZK quorum without having to manually    * configure them to separate subdirectories.    */
DECL|method|getScopeInsideParentNode ()
specifier|protected
specifier|abstract
name|String
name|getScopeInsideParentNode
parameter_list|()
function_decl|;
DECL|method|getLocalTarget ()
specifier|public
name|HAServiceTarget
name|getLocalTarget
parameter_list|()
block|{
return|return
name|localTarget
return|;
block|}
DECL|method|getServiceState ()
name|HAServiceState
name|getServiceState
parameter_list|()
block|{
return|return
name|serviceState
return|;
block|}
DECL|method|run (final String[] args)
specifier|public
name|int
name|run
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|localTarget
operator|.
name|isAutoFailoverEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Automatic failover is not enabled for "
operator|+
name|localTarget
operator|+
literal|"."
operator|+
literal|" Please ensure that automatic failover is enabled in the "
operator|+
literal|"configuration before running the ZK failover controller."
argument_list|)
expr_stmt|;
return|return
name|ERR_CODE_AUTO_FAILOVER_NOT_ENABLED
return|;
block|}
name|loginAsFCUser
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|SecurityUtil
operator|.
name|doAsLoginUserOrFatal
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|doRun
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|elector
operator|!=
literal|null
condition|)
block|{
name|elector
operator|.
name|terminateConnection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"The failover controller encounters runtime error: "
operator|+
name|rte
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|Exception
operator|)
name|rte
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
DECL|method|doRun (String[] args)
specifier|private
name|int
name|doRun
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|initZK
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to start failover controller. Unable to connect "
operator|+
literal|"to ZooKeeper quorum at "
operator|+
name|zkQuorum
operator|+
literal|". Please check the "
operator|+
literal|"configured value for "
operator|+
name|ZK_QUORUM_KEY
operator|+
literal|" and ensure that "
operator|+
literal|"ZooKeeper is running."
argument_list|)
expr_stmt|;
return|return
name|ERR_CODE_NO_ZK
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"-formatZK"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|boolean
name|force
init|=
literal|false
decl_stmt|;
name|boolean
name|interactive
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-force"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|force
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-nonInteractive"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|interactive
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|badArg
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|formatZK
argument_list|(
name|force
argument_list|,
name|interactive
argument_list|)
return|;
block|}
else|else
block|{
name|badArg
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|elector
operator|.
name|parentZNodeExists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Unable to start failover controller. "
operator|+
literal|"Parent znode does not exist.\n"
operator|+
literal|"Run with -formatZK flag to initialize ZooKeeper."
argument_list|)
expr_stmt|;
return|return
name|ERR_CODE_NO_PARENT_ZNODE
return|;
block|}
try|try
block|{
name|localTarget
operator|.
name|checkFencingConfigured
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadFencingConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Fencing is not configured for "
operator|+
name|localTarget
operator|+
literal|".\n"
operator|+
literal|"You must configure a fencing method before using automatic "
operator|+
literal|"failover."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|ERR_CODE_NO_FENCER
return|;
block|}
name|initRPC
argument_list|()
expr_stmt|;
name|initHM
argument_list|()
expr_stmt|;
name|startRPC
argument_list|()
expr_stmt|;
try|try
block|{
name|mainLoop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rpcServer
operator|.
name|stopAndJoin
argument_list|()
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|healthMonitor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|healthMonitor
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|badArg (String arg)
specifier|private
name|void
name|badArg
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Bad argument: "
operator|+
name|arg
argument_list|)
throw|;
block|}
DECL|method|printUsage ()
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|formatZK (boolean force, boolean interactive)
specifier|private
name|int
name|formatZK
parameter_list|(
name|boolean
name|force
parameter_list|,
name|boolean
name|interactive
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|elector
operator|.
name|parentZNodeExists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|force
operator|&&
operator|(
operator|!
name|interactive
operator|||
operator|!
name|confirmFormat
argument_list|()
operator|)
condition|)
block|{
return|return
name|ERR_CODE_FORMAT_DENIED
return|;
block|}
try|try
block|{
name|elector
operator|.
name|clearParentZNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to clear zk parent znode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
name|elector
operator|.
name|ensureParentZNode
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|confirmFormat ()
specifier|private
name|boolean
name|confirmFormat
parameter_list|()
block|{
name|String
name|parentZnode
init|=
name|getParentZnode
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"===============================================\n"
operator|+
literal|"The configured parent znode "
operator|+
name|parentZnode
operator|+
literal|" already exists.\n"
operator|+
literal|"Are you sure you want to clear all failover information from\n"
operator|+
literal|"ZooKeeper?\n"
operator|+
literal|"WARNING: Before proceeding, ensure that all HDFS services and\n"
operator|+
literal|"failover controllers are stopped!\n"
operator|+
literal|"==============================================="
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ToolRunner
operator|.
name|confirmPrompt
argument_list|(
literal|"Proceed formatting "
operator|+
name|parentZnode
operator|+
literal|"?"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to confirm"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// ------------------------------------------
comment|// Begin actual guts of failover controller
comment|// ------------------------------------------
DECL|method|initHM ()
specifier|private
name|void
name|initHM
parameter_list|()
block|{
name|healthMonitor
operator|=
operator|new
name|HealthMonitor
argument_list|(
name|conf
argument_list|,
name|localTarget
argument_list|)
expr_stmt|;
name|healthMonitor
operator|.
name|addCallback
argument_list|(
operator|new
name|HealthCallbacks
argument_list|()
argument_list|)
expr_stmt|;
name|healthMonitor
operator|.
name|addServiceStateCallback
argument_list|(
operator|new
name|ServiceStateCallBacks
argument_list|()
argument_list|)
expr_stmt|;
name|healthMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|initRPC ()
specifier|protected
name|void
name|initRPC
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|bindAddr
init|=
name|getRpcAddressToBindTo
argument_list|()
decl_stmt|;
name|rpcServer
operator|=
operator|new
name|ZKFCRpcServer
argument_list|(
name|conf
argument_list|,
name|bindAddr
argument_list|,
name|this
argument_list|,
name|getPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|startRPC ()
specifier|protected
name|void
name|startRPC
parameter_list|()
throws|throws
name|IOException
block|{
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|initZK ()
specifier|private
name|void
name|initZK
parameter_list|()
throws|throws
name|HadoopIllegalArgumentException
throws|,
name|IOException
throws|,
name|KeeperException
block|{
name|zkQuorum
operator|=
name|conf
operator|.
name|get
argument_list|(
name|ZK_QUORUM_KEY
argument_list|)
expr_stmt|;
name|int
name|zkTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ZK_SESSION_TIMEOUT_KEY
argument_list|,
name|ZK_SESSION_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
comment|// Parse ACLs from configuration.
name|String
name|zkAclConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZK_ACL_KEY
argument_list|,
name|ZK_ACL_DEFAULT
argument_list|)
decl_stmt|;
name|zkAclConf
operator|=
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
name|zkAclConf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcls
init|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
name|zkAclConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkAcls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|zkAcls
operator|=
name|Ids
operator|.
name|CREATOR_ALL_ACL
expr_stmt|;
block|}
comment|// Parse authentication from configuration.
name|String
name|zkAuthConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZK_AUTH_KEY
argument_list|)
decl_stmt|;
name|zkAuthConf
operator|=
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
name|zkAuthConf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|zkAuths
decl_stmt|;
if|if
condition|(
name|zkAuthConf
operator|!=
literal|null
condition|)
block|{
name|zkAuths
operator|=
name|ZKUtil
operator|.
name|parseAuth
argument_list|(
name|zkAuthConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkAuths
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
comment|// Sanity check configuration.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|zkQuorum
operator|!=
literal|null
argument_list|,
literal|"Missing required configuration '%s' for ZooKeeper quorum"
argument_list|,
name|ZK_QUORUM_KEY
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|zkTimeout
operator|>
literal|0
argument_list|,
literal|"Invalid ZK session timeout %s"
argument_list|,
name|zkTimeout
argument_list|)
expr_stmt|;
name|int
name|maxRetryNum
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_FC_ELECTOR_ZK_OP_RETRIES_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT
argument_list|)
decl_stmt|;
name|elector
operator|=
operator|new
name|ActiveStandbyElector
argument_list|(
name|zkQuorum
argument_list|,
name|zkTimeout
argument_list|,
name|getParentZnode
argument_list|()
argument_list|,
name|zkAcls
argument_list|,
name|zkAuths
argument_list|,
operator|new
name|ElectorCallbacks
argument_list|()
argument_list|,
name|maxRetryNum
argument_list|)
expr_stmt|;
block|}
DECL|method|getParentZnode ()
specifier|private
name|String
name|getParentZnode
parameter_list|()
block|{
name|String
name|znode
init|=
name|conf
operator|.
name|get
argument_list|(
name|ZK_PARENT_ZNODE_KEY
argument_list|,
name|ZK_PARENT_ZNODE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|znode
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|znode
operator|+=
literal|"/"
expr_stmt|;
block|}
return|return
name|znode
operator|+
name|getScopeInsideParentNode
argument_list|()
return|;
block|}
DECL|method|mainLoop ()
specifier|private
specifier|synchronized
name|void
name|mainLoop
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|fatalError
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
assert|assert
name|fatalError
operator|!=
literal|null
assert|;
comment|// only get here on fatal
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ZK Failover Controller failed: "
operator|+
name|fatalError
argument_list|)
throw|;
block|}
DECL|method|fatalError (String err)
specifier|private
specifier|synchronized
name|void
name|fatalError
parameter_list|(
name|String
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Fatal error occurred:"
operator|+
name|err
argument_list|)
expr_stmt|;
name|fatalError
operator|=
name|err
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
DECL|method|becomeActive ()
specifier|private
specifier|synchronized
name|void
name|becomeActive
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to make "
operator|+
name|localTarget
operator|+
literal|" active..."
argument_list|)
expr_stmt|;
try|try
block|{
name|HAServiceProtocolHelper
operator|.
name|transitionToActive
argument_list|(
name|localTarget
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|FailoverController
operator|.
name|getRpcTimeoutToNewActive
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|createReqInfo
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"Successfully transitioned "
operator|+
name|localTarget
operator|+
literal|" to active state"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|serviceState
operator|=
name|HAServiceState
operator|.
name|ACTIVE
expr_stmt|;
name|recordActiveAttempt
argument_list|(
operator|new
name|ActiveAttemptRecord
argument_list|(
literal|true
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Couldn't make "
operator|+
name|localTarget
operator|+
literal|" active"
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|recordActiveAttempt
argument_list|(
operator|new
name|ActiveAttemptRecord
argument_list|(
literal|false
argument_list|,
name|msg
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ServiceFailedException
condition|)
block|{
throw|throw
operator|(
name|ServiceFailedException
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Couldn't transition to active"
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|/* * TODO: * we need to make sure that if we get fenced and then quickly restarted, * none of these calls will retry across the restart boundary * perhaps the solution is that, whenever the nn starts, it gets a unique * ID, and when we start becoming active, we record it, and then any future * calls use the same ID */
block|}
block|}
comment|/**    * Store the results of the last attempt to become active.    * This is used so that, during manually initiated failover,    * we can report back the results of the attempt to become active    * to the initiator of the failover.    */
DECL|method|recordActiveAttempt ( ActiveAttemptRecord record)
specifier|private
name|void
name|recordActiveAttempt
parameter_list|(
name|ActiveAttemptRecord
name|record
parameter_list|)
block|{
synchronized|synchronized
init|(
name|activeAttemptRecordLock
init|)
block|{
name|lastActiveAttemptRecord
operator|=
name|record
expr_stmt|;
name|activeAttemptRecordLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait until one of the following events:    *<ul>    *<li>Another thread publishes the results of an attempt to become active    * using {@link #recordActiveAttempt(ActiveAttemptRecord)}</li>    *<li>The node enters bad health status</li>    *<li>The specified timeout elapses</li>    *</ul>    *     * @param timeoutMillis number of millis to wait    * @return the published record, or null if the timeout elapses or the    * service becomes unhealthy     * @throws InterruptedException if the thread is interrupted.    */
DECL|method|waitForActiveAttempt (int timeoutMillis)
specifier|private
name|ActiveAttemptRecord
name|waitForActiveAttempt
parameter_list|(
name|int
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|st
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|waitUntil
init|=
name|st
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
name|timeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
do|do
block|{
comment|// periodically check health state, because entering an
comment|// unhealthy state could prevent us from ever attempting to
comment|// become active. We can detect this and respond to the user
comment|// immediately.
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|lastHealthState
operator|!=
name|State
operator|.
name|SERVICE_HEALTHY
condition|)
block|{
comment|// early out if service became unhealthy
return|return
literal|null
return|;
block|}
block|}
synchronized|synchronized
init|(
name|activeAttemptRecordLock
init|)
block|{
if|if
condition|(
operator|(
name|lastActiveAttemptRecord
operator|!=
literal|null
operator|&&
name|lastActiveAttemptRecord
operator|.
name|nanoTime
operator|>=
name|st
operator|)
condition|)
block|{
return|return
name|lastActiveAttemptRecord
return|;
block|}
comment|// Only wait 1sec so that we periodically recheck the health state
comment|// above.
name|activeAttemptRecordLock
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|waitUntil
condition|)
do|;
comment|// Timeout elapsed.
name|LOG
operator|.
name|warn
argument_list|(
name|timeoutMillis
operator|+
literal|"ms timeout elapsed waiting for an attempt "
operator|+
literal|"to become active"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|createReqInfo ()
specifier|private
name|StateChangeRequestInfo
name|createReqInfo
parameter_list|()
block|{
return|return
operator|new
name|StateChangeRequestInfo
argument_list|(
name|RequestSource
operator|.
name|REQUEST_BY_ZKFC
argument_list|)
return|;
block|}
DECL|method|becomeStandby ()
specifier|private
specifier|synchronized
name|void
name|becomeStandby
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ZK Election indicated that "
operator|+
name|localTarget
operator|+
literal|" should become standby"
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|timeout
init|=
name|FailoverController
operator|.
name|getGracefulFenceTimeout
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localTarget
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|timeout
argument_list|)
operator|.
name|transitionToStandby
argument_list|(
name|createReqInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully transitioned "
operator|+
name|localTarget
operator|+
literal|" to standby state"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't transition "
operator|+
name|localTarget
operator|+
literal|" to standby state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// TODO handle this. It's a likely case since we probably got fenced
comment|// at the same time.
block|}
name|serviceState
operator|=
name|HAServiceState
operator|.
name|STANDBY
expr_stmt|;
block|}
DECL|method|fenceOldActive (byte[] data)
specifier|private
specifier|synchronized
name|void
name|fenceOldActive
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|HAServiceTarget
name|target
init|=
name|dataToTarget
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|doFence
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|recordActiveAttempt
argument_list|(
operator|new
name|ActiveAttemptRecord
argument_list|(
literal|false
argument_list|,
literal|"Unable to fence old active: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Throwables
operator|.
name|propagate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doFence (HAServiceTarget target)
specifier|private
name|void
name|doFence
parameter_list|(
name|HAServiceTarget
name|target
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Should fence: "
operator|+
name|target
argument_list|)
expr_stmt|;
name|boolean
name|gracefulWorked
init|=
operator|new
name|FailoverController
argument_list|(
name|conf
argument_list|,
name|RequestSource
operator|.
name|REQUEST_BY_ZKFC
argument_list|)
operator|.
name|tryGracefulFence
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|gracefulWorked
condition|)
block|{
comment|// It's possible that it's in standby but just about to go into active,
comment|// no? Is there some race here?
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully transitioned "
operator|+
name|target
operator|+
literal|" to standby "
operator|+
literal|"state without fencing"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|target
operator|.
name|checkFencingConfigured
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadFencingConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't fence old active "
operator|+
name|target
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|recordActiveAttempt
argument_list|(
operator|new
name|ActiveAttemptRecord
argument_list|(
literal|false
argument_list|,
literal|"Unable to fence old active"
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|target
operator|.
name|getFencer
argument_list|()
operator|.
name|fence
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to fence "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
comment|/**    * Request from graceful failover to cede active role. Causes    * this ZKFC to transition its local node to standby, then quit    * the election for the specified period of time, after which it    * will rejoin iff it is healthy.    */
DECL|method|cedeActive (final int millisToCede)
name|void
name|cedeActive
parameter_list|(
specifier|final
name|int
name|millisToCede
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|ServiceFailedException
throws|,
name|IOException
block|{
try|try
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|doCedeActive
argument_list|(
name|millisToCede
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doCedeActive (int millisToCede)
specifier|private
name|void
name|doCedeActive
parameter_list|(
name|int
name|millisToCede
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|ServiceFailedException
throws|,
name|IOException
block|{
name|int
name|timeout
init|=
name|FailoverController
operator|.
name|getGracefulFenceTimeout
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Lock elector to maintain lock ordering of elector -> ZKFC
synchronized|synchronized
init|(
name|elector
init|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|millisToCede
operator|<=
literal|0
condition|)
block|{
name|delayJoiningUntilNanotime
operator|=
literal|0
expr_stmt|;
name|recheckElectability
argument_list|()
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Requested by "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|+
literal|" at "
operator|+
name|Server
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|" to cede active role."
argument_list|)
expr_stmt|;
name|boolean
name|needFence
init|=
literal|false
decl_stmt|;
try|try
block|{
name|localTarget
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|timeout
argument_list|)
operator|.
name|transitionToStandby
argument_list|(
name|createReqInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully ensured local node is in standby mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to transition local node to standby: "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Quitting election but indicating that fencing is "
operator|+
literal|"necessary"
argument_list|)
expr_stmt|;
name|needFence
operator|=
literal|true
expr_stmt|;
block|}
name|delayJoiningUntilNanotime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
name|millisToCede
argument_list|)
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
name|needFence
argument_list|)
expr_stmt|;
name|serviceState
operator|=
name|HAServiceState
operator|.
name|INITIALIZING
expr_stmt|;
block|}
block|}
name|recheckElectability
argument_list|()
expr_stmt|;
block|}
comment|/**    * Coordinate a graceful failover to this node.    * @throws ServiceFailedException if the node fails to become active    * @throws IOException some other error occurs    */
DECL|method|gracefulFailoverToYou ()
name|void
name|gracefulFailoverToYou
parameter_list|()
throws|throws
name|ServiceFailedException
throws|,
name|IOException
block|{
try|try
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|doGracefulFailover
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Coordinate a graceful failover. This proceeds in several phases:    * 1) Pre-flight checks: ensure that the local node is healthy, and    * thus a candidate for failover.    * 2) Determine the current active node. If it is the local node, no    * need to failover - return success.    * 3) Ask that node to yield from the election for a number of seconds.    * 4) Allow the normal election path to run in other threads. Wait until    * we either become unhealthy or we see an election attempt recorded by    * the normal code path.    * 5) Allow the old active to rejoin the election, so a future    * failback is possible.    */
DECL|method|doGracefulFailover ()
specifier|private
name|void
name|doGracefulFailover
parameter_list|()
throws|throws
name|ServiceFailedException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|timeout
init|=
name|FailoverController
operator|.
name|getGracefulFenceTimeout
argument_list|(
name|conf
argument_list|)
operator|*
literal|2
decl_stmt|;
comment|// Phase 1: pre-flight checks
name|checkEligibleForFailover
argument_list|()
expr_stmt|;
comment|// Phase 2: determine old/current active node. Check that we're not
comment|// ourselves active, etc.
name|HAServiceTarget
name|oldActive
init|=
name|getCurrentActive
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldActive
operator|==
literal|null
condition|)
block|{
comment|// No node is currently active. So, if we aren't already
comment|// active ourselves by means of a normal election, then there's
comment|// probably something preventing us from becoming active.
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"No other node is currently active."
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldActive
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|localTarget
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Local node "
operator|+
name|localTarget
operator|+
literal|" is already active. "
operator|+
literal|"No need to failover. Returning success."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Phase 3: ask the old active to yield from the election.
name|LOG
operator|.
name|info
argument_list|(
literal|"Asking "
operator|+
name|oldActive
operator|+
literal|" to cede its active state for "
operator|+
name|timeout
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|ZKFCProtocol
name|oldZkfc
init|=
name|oldActive
operator|.
name|getZKFCProxy
argument_list|(
name|conf
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|oldZkfc
operator|.
name|cedeActive
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// Phase 4: wait for the normal election to make the local node
comment|// active.
name|ActiveAttemptRecord
name|attempt
init|=
name|waitForActiveAttempt
argument_list|(
name|timeout
operator|+
literal|60000
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
comment|// We didn't even make an attempt to become active.
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|lastHealthState
operator|!=
name|State
operator|.
name|SERVICE_HEALTHY
condition|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Unable to become active. "
operator|+
literal|"Service became unhealthy while trying to failover."
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Unable to become active. "
operator|+
literal|"Local node did not get an opportunity to do so from ZooKeeper, "
operator|+
literal|"or the local node took too long to transition to active."
argument_list|)
throw|;
block|}
comment|// Phase 5. At this point, we made some attempt to become active. So we
comment|// can tell the old active to rejoin if it wants. This allows a quick
comment|// fail-back if we immediately crash.
name|oldZkfc
operator|.
name|cedeActive
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|succeeded
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully became active. "
operator|+
name|attempt
operator|.
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Propagate failure
name|String
name|msg
init|=
literal|"Failed to become active. "
operator|+
name|attempt
operator|.
name|status
decl_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Ensure that the local node is in a healthy state, and thus    * eligible for graceful failover.    * @throws ServiceFailedException if the node is unhealthy    */
DECL|method|checkEligibleForFailover ()
specifier|private
specifier|synchronized
name|void
name|checkEligibleForFailover
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
comment|// Check health
if|if
condition|(
name|this
operator|.
name|getLastHealthState
argument_list|()
operator|!=
name|State
operator|.
name|SERVICE_HEALTHY
condition|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
name|localTarget
operator|+
literal|" is not currently healthy. "
operator|+
literal|"Cannot be failover target"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return an {@link HAServiceTarget} for the current active node    * in the cluster, or null if no node is active.    * @throws IOException if a ZK-related issue occurs    * @throws InterruptedException if thread is interrupted     */
DECL|method|getCurrentActive ()
specifier|private
name|HAServiceTarget
name|getCurrentActive
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|elector
init|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|byte
index|[]
name|activeData
decl_stmt|;
try|try
block|{
name|activeData
operator|=
name|elector
operator|.
name|getActiveData
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActiveNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected ZooKeeper issue fetching active node info"
argument_list|,
name|ke
argument_list|)
throw|;
block|}
name|HAServiceTarget
name|oldActive
init|=
name|dataToTarget
argument_list|(
name|activeData
argument_list|)
decl_stmt|;
return|return
name|oldActive
return|;
block|}
block|}
block|}
comment|/**    * Check the current state of the service, and join the election    * if it should be in the election.    */
DECL|method|recheckElectability ()
specifier|private
name|void
name|recheckElectability
parameter_list|()
block|{
comment|// Maintain lock ordering of elector -> ZKFC
synchronized|synchronized
init|(
name|elector
init|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|healthy
init|=
name|lastHealthState
operator|==
name|State
operator|.
name|SERVICE_HEALTHY
decl_stmt|;
name|long
name|remainingDelay
init|=
name|delayJoiningUntilNanotime
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|remainingDelay
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|healthy
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Would have joined master election, but this node is "
operator|+
literal|"prohibited from doing so for "
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|remainingDelay
argument_list|)
operator|+
literal|" more ms"
argument_list|)
expr_stmt|;
block|}
name|scheduleRecheck
argument_list|(
name|remainingDelay
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|lastHealthState
condition|)
block|{
case|case
name|SERVICE_HEALTHY
case|:
name|elector
operator|.
name|joinElection
argument_list|(
name|targetToData
argument_list|(
name|localTarget
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|quitElectionOnBadState
condition|)
block|{
name|quitElectionOnBadState
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
name|INITIALIZING
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Ensuring that "
operator|+
name|localTarget
operator|+
literal|" does not "
operator|+
literal|"participate in active master election"
argument_list|)
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serviceState
operator|=
name|HAServiceState
operator|.
name|INITIALIZING
expr_stmt|;
break|break;
case|case
name|SERVICE_UNHEALTHY
case|:
case|case
name|SERVICE_NOT_RESPONDING
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Quitting master election for "
operator|+
name|localTarget
operator|+
literal|" and marking that fencing is necessary"
argument_list|)
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serviceState
operator|=
name|HAServiceState
operator|.
name|INITIALIZING
expr_stmt|;
break|break;
case|case
name|HEALTH_MONITOR_FAILED
case|:
name|fatalError
argument_list|(
literal|"Health monitor failed!"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled state:"
operator|+
name|lastHealthState
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Schedule a call to {@link #recheckElectability()} in the future.    */
DECL|method|scheduleRecheck (long whenNanos)
specifier|private
name|void
name|scheduleRecheck
parameter_list|(
name|long
name|whenNanos
parameter_list|)
block|{
name|delayExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|recheckElectability
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fatalError
argument_list|(
literal|"Failed to recheck electability: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|whenNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
DECL|field|serviceStateMismatchCount
name|int
name|serviceStateMismatchCount
init|=
literal|0
decl_stmt|;
DECL|field|quitElectionOnBadState
name|boolean
name|quitElectionOnBadState
init|=
literal|false
decl_stmt|;
DECL|method|verifyChangedServiceState (HAServiceState changedState)
name|void
name|verifyChangedServiceState
parameter_list|(
name|HAServiceState
name|changedState
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elector
init|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|serviceState
operator|==
name|HAServiceState
operator|.
name|INITIALIZING
condition|)
block|{
if|if
condition|(
name|quitElectionOnBadState
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rechecking for electability from bad state"
argument_list|)
expr_stmt|;
name|recheckElectability
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|changedState
operator|==
name|serviceState
condition|)
block|{
name|serviceStateMismatchCount
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|serviceStateMismatchCount
operator|==
literal|0
condition|)
block|{
comment|// recheck one more time. As this might be due to parallel transition.
name|serviceStateMismatchCount
operator|++
expr_stmt|;
return|return;
block|}
comment|// quit the election as the expected state and reported state
comment|// mismatches.
name|LOG
operator|.
name|error
argument_list|(
literal|"Local service "
operator|+
name|localTarget
operator|+
literal|" has changed the serviceState to "
operator|+
name|changedState
operator|+
literal|". Expected was "
operator|+
name|serviceState
operator|+
literal|". Quitting election marking fencing necessary."
argument_list|)
expr_stmt|;
name|delayJoiningUntilNanotime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|quitElectionOnBadState
operator|=
literal|true
expr_stmt|;
name|serviceStateMismatchCount
operator|=
literal|0
expr_stmt|;
name|serviceState
operator|=
name|HAServiceState
operator|.
name|INITIALIZING
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return the last health state passed to the FC    * by the HealthMonitor.    */
annotation|@
name|VisibleForTesting
DECL|method|getLastHealthState ()
specifier|synchronized
name|State
name|getLastHealthState
parameter_list|()
block|{
return|return
name|lastHealthState
return|;
block|}
DECL|method|setLastHealthState (HealthMonitor.State newState)
specifier|private
specifier|synchronized
name|void
name|setLastHealthState
parameter_list|(
name|HealthMonitor
operator|.
name|State
name|newState
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Local service "
operator|+
name|localTarget
operator|+
literal|" entered state: "
operator|+
name|newState
argument_list|)
expr_stmt|;
name|lastHealthState
operator|=
name|newState
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getElectorForTests ()
name|ActiveStandbyElector
name|getElectorForTests
parameter_list|()
block|{
return|return
name|elector
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRpcServerForTests ()
name|ZKFCRpcServer
name|getRpcServerForTests
parameter_list|()
block|{
return|return
name|rpcServer
return|;
block|}
comment|/**    * Callbacks from elector    */
DECL|class|ElectorCallbacks
class|class
name|ElectorCallbacks
implements|implements
name|ActiveStandbyElectorCallback
block|{
annotation|@
name|Override
DECL|method|becomeActive ()
specifier|public
name|void
name|becomeActive
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
name|ZKFailoverController
operator|.
name|this
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|becomeStandby ()
specifier|public
name|void
name|becomeStandby
parameter_list|()
block|{
name|ZKFailoverController
operator|.
name|this
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enterNeutralMode ()
specifier|public
name|void
name|enterNeutralMode
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|notifyFatalError (String errorMessage)
specifier|public
name|void
name|notifyFatalError
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|fatalError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fenceOldActive (byte[] data)
specifier|public
name|void
name|fenceOldActive
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|ZKFailoverController
operator|.
name|this
operator|.
name|fenceOldActive
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
synchronized|synchronized
init|(
name|ZKFailoverController
operator|.
name|this
init|)
block|{
return|return
literal|"Elector callbacks for "
operator|+
name|localTarget
return|;
block|}
block|}
block|}
comment|/**    * Callbacks from HealthMonitor    */
DECL|class|HealthCallbacks
class|class
name|HealthCallbacks
implements|implements
name|HealthMonitor
operator|.
name|Callback
block|{
annotation|@
name|Override
DECL|method|enteredState (HealthMonitor.State newState)
specifier|public
name|void
name|enteredState
parameter_list|(
name|HealthMonitor
operator|.
name|State
name|newState
parameter_list|)
block|{
name|setLastHealthState
argument_list|(
name|newState
argument_list|)
expr_stmt|;
name|recheckElectability
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Callbacks for HAServiceStatus    */
DECL|class|ServiceStateCallBacks
class|class
name|ServiceStateCallBacks
implements|implements
name|HealthMonitor
operator|.
name|ServiceStateCallback
block|{
annotation|@
name|Override
DECL|method|reportServiceStatus (HAServiceStatus status)
specifier|public
name|void
name|reportServiceStatus
parameter_list|(
name|HAServiceStatus
name|status
parameter_list|)
block|{
name|verifyChangedServiceState
argument_list|(
name|status
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ActiveAttemptRecord
specifier|private
specifier|static
class|class
name|ActiveAttemptRecord
block|{
DECL|field|succeeded
specifier|private
specifier|final
name|boolean
name|succeeded
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|String
name|status
decl_stmt|;
DECL|field|nanoTime
specifier|private
specifier|final
name|long
name|nanoTime
decl_stmt|;
DECL|method|ActiveAttemptRecord (boolean succeeded, String status)
specifier|public
name|ActiveAttemptRecord
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|succeeded
operator|=
name|succeeded
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|nanoTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

