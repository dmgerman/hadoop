begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell.find
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|find
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathData
import|;
end_import

begin_comment
comment|/**  * Provides an abstract composition filter for the {@link Expression} interface.  * Allows other {@link Expression} implementations to be reused without  * inheritance.  */
end_comment

begin_class
DECL|class|FilterExpression
specifier|public
specifier|abstract
class|class
name|FilterExpression
implements|implements
name|Expression
implements|,
name|Configurable
block|{
DECL|field|expression
specifier|protected
name|Expression
name|expression
decl_stmt|;
DECL|method|FilterExpression (Expression expression)
specifier|protected
name|FilterExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOptions (FindOptions options)
specifier|public
name|void
name|setOptions
parameter_list|(
name|FindOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepare ()
specifier|public
name|void
name|prepare
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|prepare
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|apply (PathData item, int depth)
specifier|public
name|Result
name|apply
parameter_list|(
name|PathData
name|item
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|apply
argument_list|(
name|item
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|Result
operator|.
name|PASS
return|;
block|}
annotation|@
name|Override
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
index|[]
name|getUsage
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|getUsage
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getHelp ()
specifier|public
name|String
index|[]
name|getHelp
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|getHelp
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isAction ()
specifier|public
name|boolean
name|isAction
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|isAction
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isOperator ()
specifier|public
name|boolean
name|isOperator
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|isOperator
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getPrecedence ()
specifier|public
name|int
name|getPrecedence
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|expression
operator|.
name|getPrecedence
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|addChildren (Deque<Expression> expressions)
specifier|public
name|void
name|addChildren
parameter_list|(
name|Deque
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|addChildren
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addArguments (Deque<String> args)
specifier|public
name|void
name|addArguments
parameter_list|(
name|Deque
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|addArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|Configurable
condition|)
block|{
operator|(
operator|(
name|Configurable
operator|)
name|expression
operator|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|instanceof
name|Configurable
condition|)
block|{
return|return
operator|(
operator|(
name|Configurable
operator|)
name|expression
operator|)
operator|.
name|getConf
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-"
operator|+
name|expression
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

