begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A {@link GSet} implementation by {@link HashMap}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|GSetByHashMap
specifier|public
class|class
name|GSetByHashMap
parameter_list|<
name|K
parameter_list|,
name|E
extends|extends
name|K
parameter_list|>
implements|implements
name|GSet
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
block|{
DECL|field|m
specifier|private
specifier|final
name|HashMap
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
name|m
decl_stmt|;
DECL|method|GSetByHashMap (int initialCapacity, float loadFactor)
specifier|public
name|GSetByHashMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|m
operator|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|E
argument_list|>
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|m
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|contains (K k)
specifier|public
name|boolean
name|contains
parameter_list|(
name|K
name|k
parameter_list|)
block|{
return|return
name|m
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get (K k)
specifier|public
name|E
name|get
parameter_list|(
name|K
name|k
parameter_list|)
block|{
return|return
name|m
operator|.
name|get
argument_list|(
name|k
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|put (E element)
specifier|public
name|E
name|put
parameter_list|(
name|E
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
return|return
name|m
operator|.
name|put
argument_list|(
name|element
argument_list|,
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove (K k)
specifier|public
name|E
name|remove
parameter_list|(
name|K
name|k
parameter_list|)
block|{
return|return
name|m
operator|.
name|remove
argument_list|(
name|k
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|m
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|values ()
specifier|public
name|Collection
argument_list|<
name|E
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|m
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

