begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ThreadUtil
specifier|public
class|class
name|ThreadUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThreadUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Cause the current thread to sleep as close as possible to the provided    * number of milliseconds. This method will log and ignore any    * {@link InterruptedException} encountered.    *     * @param millis the number of milliseconds for the current thread to sleep    */
DECL|method|sleepAtLeastIgnoreInterrupts (long millis)
specifier|public
specifier|static
name|void
name|sleepAtLeastIgnoreInterrupts
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
while|while
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
operator|<
name|millis
condition|)
block|{
name|long
name|timeToSleep
init|=
name|millis
operator|-
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
operator|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeToSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"interrupted while sleeping"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Convenience method that returns a resource as inputstream from the    * classpath.    *<p>    * It first attempts to use the Thread's context classloader and if not    * set it uses the class' classloader.    *    * @param resourceName resource to retrieve.    *    * @throws IOException thrown if resource cannot be loaded    * @return inputstream with the resource.    */
DECL|method|getResourceAsStream (String resourceName)
specifier|public
specifier|static
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not read resource file '"
operator|+
name|resourceName
operator|+
literal|"' because class loader of the current thread is null"
argument_list|)
throw|;
block|}
name|InputStream
name|is
init|=
name|cl
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not read resource file '"
operator|+
name|resourceName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|is
return|;
block|}
block|}
end_class

end_unit

