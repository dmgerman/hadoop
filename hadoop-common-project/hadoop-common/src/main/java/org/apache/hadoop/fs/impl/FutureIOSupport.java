begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSBuilder
import|;
end_import

begin_comment
comment|/**  * Support for future IO and the FS Builder subclasses.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FutureIOSupport
specifier|public
specifier|final
class|class
name|FutureIOSupport
block|{
DECL|method|FutureIOSupport ()
specifier|private
name|FutureIOSupport
parameter_list|()
block|{   }
comment|/**    * Given a future, evaluate it. Raised exceptions are    * extracted and handled.    * @param future future to evaluate    * @param<T> type of the result.    * @return the result, if all went well.    * @throws InterruptedIOException future was interrupted    * @throws IOException if something went wrong    * @throws RuntimeException any nested RTE thrown    */
DECL|method|awaitFuture (final Future<T> future)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|awaitFuture
parameter_list|(
specifier|final
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|IOException
throws|,
name|RuntimeException
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
return|return
name|raiseInnerCause
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * Given a future, evaluate it. Raised exceptions are    * extracted and handled.    * @param future future to evaluate    * @param<T> type of the result.    * @return the result, if all went well.    * @throws InterruptedIOException future was interrupted    * @throws IOException if something went wrong    * @throws RuntimeException any nested RTE thrown    * @throws TimeoutException the future timed out.    */
DECL|method|awaitFuture (final Future<T> future, final long timeout, final TimeUnit unit)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|awaitFuture
parameter_list|(
specifier|final
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
specifier|final
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedIOException
throws|,
name|IOException
throws|,
name|RuntimeException
throws|,
name|TimeoutException
block|{
try|try
block|{
return|return
name|future
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
return|return
name|raiseInnerCause
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
comment|/**    * From the inner cause of an execution exception, extract the inner cause    * if it is an IOE or RTE.    * This will always raise an exception, either the inner IOException,    * an inner RuntimeException, or a new IOException wrapping the raised    * exception.    *    * @param e exception.    * @param<T> type of return value.    * @return nothing, ever.    * @throws IOException either the inner IOException, or a wrapper around    * any non-Runtime-Exception    * @throws RuntimeException if that is the inner cause.    */
DECL|method|raiseInnerCause (final ExecutionException e)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|raiseInnerCause
parameter_list|(
specifier|final
name|ExecutionException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|WrappedIOException
condition|)
block|{
throw|throw
operator|(
operator|(
name|WrappedIOException
operator|)
name|cause
operator|)
operator|.
name|getCause
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
comment|// other type: wrap with a new IOE
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
else|else
block|{
comment|// this only happens if somebody deliberately raises
comment|// an ExecutionException
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Propagate options to any builder, converting everything with the    * prefix to an option where, if there were 2+ dot-separated elements,    * it is converted to a schema.    *<pre>    *   fs.example.s3a.option => s3a:option    *   fs.example.fs.io.policy => s3a.io.policy    *   fs.example.something => something    *</pre>    * @param builder builder to modify    * @param conf configuration to read    * @param optionalPrefix prefix for optional settings    * @param mandatoryPrefix prefix for mandatory settings    * @param<T> type of result    * @param<U> type of builder    * @return the builder passed in.    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
extends|extends
name|FSBuilder
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
parameter_list|>
DECL|method|propagateOptions ( final FSBuilder<T, U> builder, final Configuration conf, final String optionalPrefix, final String mandatoryPrefix)
name|FSBuilder
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|propagateOptions
parameter_list|(
specifier|final
name|FSBuilder
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|builder
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|optionalPrefix
parameter_list|,
specifier|final
name|String
name|mandatoryPrefix
parameter_list|)
block|{
name|propagateOptions
argument_list|(
name|builder
argument_list|,
name|conf
argument_list|,
name|optionalPrefix
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|propagateOptions
argument_list|(
name|builder
argument_list|,
name|conf
argument_list|,
name|mandatoryPrefix
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**    * Propagate options to any builder, converting everything with the    * prefix to an option where, if there were 2+ dot-separated elements,    * it is converted to a schema.    *<pre>    *   fs.example.s3a.option => s3a:option    *   fs.example.fs.io.policy => s3a.io.policy    *   fs.example.something => something    *</pre>    * @param builder builder to modify    * @param conf configuration to read    * @param prefix prefix to scan/strip    * @param mandatory are the options to be mandatory or optional?    */
DECL|method|propagateOptions ( final FSBuilder<?, ?> builder, final Configuration conf, final String prefix, final boolean mandatory)
specifier|public
specifier|static
name|void
name|propagateOptions
parameter_list|(
specifier|final
name|FSBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|boolean
name|mandatory
parameter_list|)
block|{
specifier|final
name|String
name|p
init|=
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|prefix
else|:
operator|(
name|prefix
operator|+
literal|"."
operator|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propsWithPrefix
init|=
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|propsWithPrefix
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// change the schema off each entry
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mandatory
condition|)
block|{
name|builder
operator|.
name|must
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|opt
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

