begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.alias
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidParameterException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CommandShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This program is the CLI utility for the CredentialProvider facilities in  * Hadoop.  */
end_comment

begin_class
DECL|class|CredentialShell
specifier|public
class|class
name|CredentialShell
extends|extends
name|CommandShell
block|{
DECL|field|USAGE_PREFIX
specifier|final
specifier|static
specifier|private
name|String
name|USAGE_PREFIX
init|=
literal|"Usage: hadoop credential "
operator|+
literal|"[generic options]\n"
decl_stmt|;
DECL|field|COMMANDS
specifier|final
specifier|static
specifier|private
name|String
name|COMMANDS
init|=
literal|"   [-help]\n"
operator|+
literal|"   ["
operator|+
name|CreateCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"   ["
operator|+
name|DeleteCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"   ["
operator|+
name|ListCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|NO_VALID_PROVIDERS
specifier|public
specifier|static
specifier|final
name|String
name|NO_VALID_PROVIDERS
init|=
literal|"There are no valid (non-transient) providers configured.\n"
operator|+
literal|"No action has been taken. Use the -provider option to specify\n"
operator|+
literal|"a provider. If you want to use a transient provider then you\n"
operator|+
literal|"MUST use the -provider argument."
decl_stmt|;
DECL|field|interactive
specifier|private
name|boolean
name|interactive
init|=
literal|true
decl_stmt|;
comment|/** If true, fail if the provider requires a password and none is given. */
DECL|field|strict
specifier|private
name|boolean
name|strict
init|=
literal|false
decl_stmt|;
DECL|field|userSuppliedProvider
specifier|private
name|boolean
name|userSuppliedProvider
init|=
literal|false
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
init|=
literal|null
decl_stmt|;
DECL|field|passwordReader
specifier|private
name|PasswordReader
name|passwordReader
decl_stmt|;
comment|/**    * Parse the command line arguments and initialize the data.    *<pre>    * % hadoop credential create alias [-provider providerPath]    * % hadoop credential list [-provider providerPath]    * % hadoop credential delete alias [-provider providerPath] [-f]    *</pre>    * @param args    * @return 0 if the argument(s) were recognized, 1 otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|init (String[] args)
specifier|protected
name|int
name|init
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no args should print the help message
if|if
condition|(
literal|0
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|getErr
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"create"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
name|setSubCommand
argument_list|(
operator|new
name|CreateCommand
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
name|setSubCommand
argument_list|(
operator|new
name|DeleteCommand
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"list"
argument_list|)
condition|)
block|{
name|setSubCommand
argument_list|(
operator|new
name|ListCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-provider"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
name|userSuppliedProvider
operator|=
literal|true
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-f"
argument_list|)
operator|||
operator|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-force"
argument_list|)
operator|)
condition|)
block|{
name|interactive
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-strict"
argument_list|)
condition|)
block|{
name|strict
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
operator|||
operator|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-value"
argument_list|)
operator|)
condition|)
block|{
name|value
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|printShellUsage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|getErr
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandUsage ()
specifier|public
name|String
name|getCommandUsage
parameter_list|()
block|{
name|StringBuffer
name|sbuf
init|=
operator|new
name|StringBuffer
argument_list|(
name|USAGE_PREFIX
operator|+
name|COMMANDS
argument_list|)
decl_stmt|;
name|String
name|banner
init|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
literal|66
argument_list|)
decl_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|banner
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|CreateCommand
operator|.
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|CreateCommand
operator|.
name|DESC
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|banner
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|DeleteCommand
operator|.
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|DeleteCommand
operator|.
name|DESC
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|banner
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|ListCommand
operator|.
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|ListCommand
operator|.
name|DESC
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|sbuf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Command
specifier|private
specifier|abstract
class|class
name|Command
extends|extends
name|SubCommand
block|{
DECL|field|provider
specifier|protected
name|CredentialProvider
name|provider
init|=
literal|null
decl_stmt|;
DECL|method|getCredentialProvider ()
specifier|protected
name|CredentialProvider
name|getCredentialProvider
parameter_list|()
block|{
name|CredentialProvider
name|prov
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|CredentialProvider
argument_list|>
name|providers
decl_stmt|;
try|try
block|{
name|providers
operator|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|userSuppliedProvider
condition|)
block|{
name|prov
operator|=
name|providers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|CredentialProvider
name|p
range|:
name|providers
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isTransient
argument_list|()
condition|)
block|{
name|prov
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prov
operator|==
literal|null
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|NO_VALID_PROVIDERS
argument_list|)
expr_stmt|;
block|}
return|return
name|prov
return|;
block|}
DECL|method|printProviderWritten ()
specifier|protected
name|void
name|printProviderWritten
parameter_list|()
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Provider "
operator|+
name|provider
operator|.
name|toString
argument_list|()
operator|+
literal|" was updated."
argument_list|)
expr_stmt|;
block|}
DECL|method|warnIfTransientProvider ()
specifier|protected
name|void
name|warnIfTransientProvider
parameter_list|()
block|{
if|if
condition|(
name|provider
operator|.
name|isTransient
argument_list|()
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"WARNING: you are modifying a transient provider."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doHelp ()
specifier|protected
name|void
name|doHelp
parameter_list|()
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|USAGE_PREFIX
operator|+
name|COMMANDS
argument_list|)
expr_stmt|;
name|printShellUsage
argument_list|()
expr_stmt|;
block|}
DECL|method|execute ()
specifier|public
specifier|abstract
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|getUsage ()
specifier|public
specifier|abstract
name|String
name|getUsage
parameter_list|()
function_decl|;
block|}
DECL|class|ListCommand
specifier|private
class|class
name|ListCommand
extends|extends
name|Command
block|{
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"list [-provider provider-path] [-strict]"
decl_stmt|;
DECL|field|DESC
specifier|public
specifier|static
specifier|final
name|String
name|DESC
init|=
literal|"The list subcommand displays the aliases contained within \n"
operator|+
literal|"a particular provider - as configured in core-site.xml or\n"
operator|+
literal|"indicated through the -provider argument. If -strict is supplied,\n"
operator|+
literal|"fail immediately if the provider requires a password and none is\n"
operator|+
literal|"provided."
decl_stmt|;
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
name|provider
operator|=
name|getCredentialProvider
argument_list|()
expr_stmt|;
return|return
operator|(
name|provider
operator|!=
literal|null
operator|)
return|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliases
decl_stmt|;
try|try
block|{
name|aliases
operator|=
name|provider
operator|.
name|getAliases
argument_list|()
expr_stmt|;
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Listing aliases for CredentialProvider: "
operator|+
name|provider
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Cannot list aliases for CredentialProvider: "
operator|+
name|provider
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|DESC
return|;
block|}
block|}
DECL|class|DeleteCommand
specifier|private
class|class
name|DeleteCommand
extends|extends
name|Command
block|{
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"delete<alias> [-f] [-provider provider-path] [-strict]"
decl_stmt|;
DECL|field|DESC
specifier|public
specifier|static
specifier|final
name|String
name|DESC
init|=
literal|"The delete subcommand deletes the credential\n"
operator|+
literal|"specified as the<alias> argument from within the provider\n"
operator|+
literal|"indicated through the -provider argument. The command asks for\n"
operator|+
literal|"confirmation unless the -f option is specified. If -strict is\n"
operator|+
literal|"supplied, fail immediately if the provider requires a password\n"
operator|+
literal|"and none is given."
decl_stmt|;
DECL|field|alias
specifier|private
name|String
name|alias
init|=
literal|null
decl_stmt|;
DECL|field|cont
specifier|private
name|boolean
name|cont
init|=
literal|true
decl_stmt|;
DECL|method|DeleteCommand (String alias)
specifier|public
name|DeleteCommand
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"There is no alias specified. Please provide the"
operator|+
literal|"mandatory<alias>. See the usage description with -help."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|provider
operator|=
name|getCredentialProvider
argument_list|()
expr_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|interactive
condition|)
block|{
try|try
block|{
name|cont
operator|=
name|ToolRunner
operator|.
name|confirmPrompt
argument_list|(
literal|"You are about to DELETE the credential "
operator|+
name|alias
operator|+
literal|" from CredentialProvider "
operator|+
name|provider
operator|.
name|toString
argument_list|()
operator|+
literal|". Continue? "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cont
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Nothing has been deleted."
argument_list|)
expr_stmt|;
block|}
return|return
name|cont
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|alias
operator|+
literal|" will not be deleted."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|doHelp
argument_list|()
expr_stmt|;
return|return;
block|}
name|warnIfTransientProvider
argument_list|()
expr_stmt|;
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Deleting credential: "
operator|+
name|alias
operator|+
literal|" from CredentialProvider: "
operator|+
name|provider
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cont
condition|)
block|{
try|try
block|{
name|provider
operator|.
name|deleteCredentialEntry
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Credential "
operator|+
name|alias
operator|+
literal|" has been successfully deleted."
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|printProviderWritten
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Credential "
operator|+
name|alias
operator|+
literal|" has NOT been deleted."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|DESC
return|;
block|}
block|}
DECL|class|CreateCommand
specifier|private
class|class
name|CreateCommand
extends|extends
name|Command
block|{
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"create<alias> [-value alias-value] "
operator|+
literal|"[-provider provider-path] [-strict]"
decl_stmt|;
DECL|field|DESC
specifier|public
specifier|static
specifier|final
name|String
name|DESC
init|=
literal|"The create subcommand creates a new credential for the name\n"
operator|+
literal|"specified as the<alias> argument within the provider indicated\n"
operator|+
literal|"through the -provider argument. If -strict is supplied, fail\n"
operator|+
literal|"immediately if the provider requires a password and none is given.\n"
operator|+
literal|"If -value is provided, use that for the value of the credential\n"
operator|+
literal|"instead of prompting the user."
decl_stmt|;
DECL|field|alias
specifier|private
name|String
name|alias
init|=
literal|null
decl_stmt|;
DECL|method|CreateCommand (String alias)
specifier|public
name|CreateCommand
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"There is no alias specified. Please provide the"
operator|+
literal|"mandatory<alias>. See the usage description with -help."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|provider
operator|=
name|getCredentialProvider
argument_list|()
expr_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|provider
operator|.
name|needsPassword
argument_list|()
condition|)
block|{
if|if
condition|(
name|strict
condition|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|provider
operator|.
name|noPasswordError
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|provider
operator|.
name|noPasswordWarning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|getErr
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
if|if
condition|(
name|alias
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|doHelp
argument_list|()
expr_stmt|;
return|return;
block|}
name|warnIfTransientProvider
argument_list|()
expr_stmt|;
try|try
block|{
name|char
index|[]
name|credential
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// testing only
name|credential
operator|=
name|value
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|credential
operator|=
name|promptForCredential
argument_list|()
expr_stmt|;
block|}
name|provider
operator|.
name|createCredentialEntry
argument_list|(
name|alias
argument_list|,
name|credential
argument_list|)
expr_stmt|;
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
name|alias
operator|+
literal|" has been successfully created."
argument_list|)
expr_stmt|;
name|printProviderWritten
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidParameterException
name|e
parameter_list|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Credential "
operator|+
name|alias
operator|+
literal|" has NOT been created. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getOut
argument_list|()
operator|.
name|println
argument_list|(
literal|"Credential "
operator|+
name|alias
operator|+
literal|" has NOT been created. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|USAGE
operator|+
literal|":\n\n"
operator|+
name|DESC
return|;
block|}
block|}
DECL|method|promptForCredential ()
specifier|protected
name|char
index|[]
name|promptForCredential
parameter_list|()
throws|throws
name|IOException
block|{
name|PasswordReader
name|c
init|=
name|getPasswordReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No console available for prompting user."
argument_list|)
throw|;
block|}
name|char
index|[]
name|cred
init|=
literal|null
decl_stmt|;
name|boolean
name|noMatch
decl_stmt|;
do|do
block|{
name|char
index|[]
name|newPassword1
init|=
name|c
operator|.
name|readPassword
argument_list|(
literal|"Enter alias password: "
argument_list|)
decl_stmt|;
name|char
index|[]
name|newPassword2
init|=
name|c
operator|.
name|readPassword
argument_list|(
literal|"Enter alias password again: "
argument_list|)
decl_stmt|;
name|noMatch
operator|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|newPassword1
argument_list|,
name|newPassword2
argument_list|)
expr_stmt|;
if|if
condition|(
name|noMatch
condition|)
block|{
if|if
condition|(
name|newPassword1
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|newPassword1
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|format
argument_list|(
literal|"Passwords don't match. Try again.%n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cred
operator|=
name|newPassword1
expr_stmt|;
block|}
if|if
condition|(
name|newPassword2
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|newPassword2
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|noMatch
condition|)
do|;
return|return
name|cred
return|;
block|}
DECL|method|getPasswordReader ()
specifier|public
name|PasswordReader
name|getPasswordReader
parameter_list|()
block|{
if|if
condition|(
name|passwordReader
operator|==
literal|null
condition|)
block|{
name|passwordReader
operator|=
operator|new
name|PasswordReader
argument_list|()
expr_stmt|;
block|}
return|return
name|passwordReader
return|;
block|}
DECL|method|setPasswordReader (PasswordReader reader)
specifier|public
name|void
name|setPasswordReader
parameter_list|(
name|PasswordReader
name|reader
parameter_list|)
block|{
name|passwordReader
operator|=
name|reader
expr_stmt|;
block|}
comment|/** To facilitate testing since Console is a final class. */
DECL|class|PasswordReader
specifier|public
specifier|static
class|class
name|PasswordReader
block|{
DECL|method|readPassword (String prompt)
specifier|public
name|char
index|[]
name|readPassword
parameter_list|(
name|String
name|prompt
parameter_list|)
block|{
name|Console
name|console
init|=
name|System
operator|.
name|console
argument_list|()
decl_stmt|;
name|char
index|[]
name|pass
init|=
name|console
operator|.
name|readPassword
argument_list|(
name|prompt
argument_list|)
decl_stmt|;
return|return
name|pass
return|;
block|}
DECL|method|format (String message)
specifier|public
name|void
name|format
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Console
name|console
init|=
name|System
operator|.
name|console
argument_list|()
decl_stmt|;
name|console
operator|.
name|format
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Main program.    *    * @param args    *          Command line arguments    * @throws Exception    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|CredentialShell
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

