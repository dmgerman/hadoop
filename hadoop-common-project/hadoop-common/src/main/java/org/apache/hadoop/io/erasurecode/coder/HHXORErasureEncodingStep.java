begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
operator|.
name|util
operator|.
name|HHUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureEncoder
import|;
end_import

begin_comment
comment|/**  * Hitchhiker-XOR Erasure encoding step, a wrapper of all the necessary  * information to perform an encoding step involved in the whole process of  * encoding a block group.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|HHXORErasureEncodingStep
specifier|public
class|class
name|HHXORErasureEncodingStep
extends|extends
name|AbstractHHErasureCodingStep
block|{
DECL|field|piggyBackIndex
specifier|private
name|int
index|[]
name|piggyBackIndex
decl_stmt|;
DECL|field|rsRawEncoder
specifier|private
name|RawErasureEncoder
name|rsRawEncoder
decl_stmt|;
DECL|field|xorRawEncoder
specifier|private
name|RawErasureEncoder
name|xorRawEncoder
decl_stmt|;
comment|/**    * The constructor with all the necessary info.    *    * @param inputBlocks    * @param outputBlocks    * @param rsRawEncoder  underlying RS encoder for hitchhiker encoding    * @param xorRawEncoder underlying XOR encoder for hitchhiker encoding    */
DECL|method|HHXORErasureEncodingStep (ECBlock[] inputBlocks, ECBlock[] outputBlocks, RawErasureEncoder rsRawEncoder, RawErasureEncoder xorRawEncoder)
specifier|public
name|HHXORErasureEncodingStep
parameter_list|(
name|ECBlock
index|[]
name|inputBlocks
parameter_list|,
name|ECBlock
index|[]
name|outputBlocks
parameter_list|,
name|RawErasureEncoder
name|rsRawEncoder
parameter_list|,
name|RawErasureEncoder
name|xorRawEncoder
parameter_list|)
block|{
name|super
argument_list|(
name|inputBlocks
argument_list|,
name|outputBlocks
argument_list|)
expr_stmt|;
name|this
operator|.
name|rsRawEncoder
operator|=
name|rsRawEncoder
expr_stmt|;
name|this
operator|.
name|xorRawEncoder
operator|=
name|xorRawEncoder
expr_stmt|;
name|piggyBackIndex
operator|=
name|HHUtil
operator|.
name|initPiggyBackIndexWithoutPBVec
argument_list|(
name|rsRawEncoder
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|rsRawEncoder
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|performCoding (ECChunk[] inputChunks, ECChunk[] outputChunks)
specifier|public
name|void
name|performCoding
parameter_list|(
name|ECChunk
index|[]
name|inputChunks
parameter_list|,
name|ECChunk
index|[]
name|outputChunks
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|inputBuffers
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|inputChunks
argument_list|)
decl_stmt|;
name|ByteBuffer
index|[]
name|outputBuffers
init|=
name|ECChunk
operator|.
name|toBuffers
argument_list|(
name|outputChunks
argument_list|)
decl_stmt|;
name|performCoding
argument_list|(
name|inputBuffers
argument_list|,
name|outputBuffers
argument_list|)
expr_stmt|;
block|}
DECL|method|performCoding (ByteBuffer[] inputs, ByteBuffer[] outputs)
specifier|private
name|void
name|performCoding
parameter_list|(
name|ByteBuffer
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
name|outputs
parameter_list|)
block|{
specifier|final
name|int
name|numDataUnits
init|=
name|this
operator|.
name|rsRawEncoder
operator|.
name|getNumDataUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParityUnits
init|=
name|this
operator|.
name|rsRawEncoder
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
specifier|final
name|int
name|subSPacketSize
init|=
name|getSubPacketSize
argument_list|()
decl_stmt|;
comment|// inputs length = numDataUnits * subPacketSize
if|if
condition|(
name|inputs
operator|.
name|length
operator|!=
name|numDataUnits
operator|*
name|subSPacketSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid inputs length"
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputs
operator|.
name|length
operator|!=
name|numParityUnits
operator|*
name|subSPacketSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid outputs length"
argument_list|)
throw|;
block|}
comment|// first numDataUnits length is first sub-stripe,
comment|// second numDataUnits length is second sub-stripe
name|ByteBuffer
index|[]
index|[]
name|hhInputs
init|=
operator|new
name|ByteBuffer
index|[
name|subSPacketSize
index|]
index|[
name|numDataUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subSPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDataUnits
condition|;
operator|++
name|j
control|)
block|{
name|hhInputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|inputs
index|[
name|i
operator|*
name|numDataUnits
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
name|ByteBuffer
index|[]
index|[]
name|hhOutputs
init|=
operator|new
name|ByteBuffer
index|[
name|subSPacketSize
index|]
index|[
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subSPacketSize
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numParityUnits
condition|;
operator|++
name|j
control|)
block|{
name|hhOutputs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|outputs
index|[
name|i
operator|*
name|numParityUnits
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
name|doEncode
argument_list|(
name|hhInputs
argument_list|,
name|hhOutputs
argument_list|)
expr_stmt|;
block|}
DECL|method|doEncode (ByteBuffer[][] inputs, ByteBuffer[][] outputs)
specifier|private
name|void
name|doEncode
parameter_list|(
name|ByteBuffer
index|[]
index|[]
name|inputs
parameter_list|,
name|ByteBuffer
index|[]
index|[]
name|outputs
parameter_list|)
block|{
specifier|final
name|int
name|numParityUnits
init|=
name|this
operator|.
name|rsRawEncoder
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
comment|// calc piggyBacks using first sub-packet
name|ByteBuffer
index|[]
name|piggyBacks
init|=
name|HHUtil
operator|.
name|getPiggyBacksFromInput
argument_list|(
name|inputs
index|[
literal|0
index|]
argument_list|,
name|piggyBackIndex
argument_list|,
name|numParityUnits
argument_list|,
literal|0
argument_list|,
name|xorRawEncoder
argument_list|)
decl_stmt|;
comment|// Step1: RS encode each byte-stripe of sub-packets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getSubPacketSize
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|rsRawEncoder
operator|.
name|encode
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|outputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Step2: Adding piggybacks to the parities
comment|// Only second sub-packet is added with a piggyback.
name|encodeWithPiggyBacks
argument_list|(
name|piggyBacks
argument_list|,
name|outputs
argument_list|,
name|numParityUnits
argument_list|,
name|inputs
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|encodeWithPiggyBacks (ByteBuffer[] piggyBacks, ByteBuffer[][] outputs, int numParityUnits, boolean bIsDirect)
specifier|private
name|void
name|encodeWithPiggyBacks
parameter_list|(
name|ByteBuffer
index|[]
name|piggyBacks
parameter_list|,
name|ByteBuffer
index|[]
index|[]
name|outputs
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|boolean
name|bIsDirect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|bIsDirect
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParityUnits
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|parityIndex
init|=
name|i
operator|+
literal|1
decl_stmt|;
name|int
name|bufSize
init|=
name|piggyBacks
index|[
name|i
index|]
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|byte
index|[]
name|newOut
init|=
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|arrayOffset
argument_list|()
operator|+
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|position
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|offset
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufSize
condition|;
name|k
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|newOut
index|[
name|k
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|newOut
index|[
name|k
index|]
operator|^
name|piggyBacks
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParityUnits
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|int
name|parityIndex
init|=
name|i
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|piggyBacks
index|[
name|i
index|]
operator|.
name|position
argument_list|()
init|,
name|m
init|=
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|position
argument_list|()
init|;
name|k
operator|<
name|piggyBacks
index|[
name|i
index|]
operator|.
name|limit
argument_list|()
condition|;
name|k
operator|++
operator|,
name|m
operator|++
control|)
block|{
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|put
argument_list|(
name|m
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|outputs
index|[
literal|1
index|]
index|[
name|parityIndex
index|]
operator|.
name|get
argument_list|(
name|m
argument_list|)
operator|^
name|piggyBacks
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

