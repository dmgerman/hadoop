begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Helpful utilities for implementing some raw erasure coders.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CoderUtil
specifier|public
specifier|final
class|class
name|CoderUtil
block|{
DECL|method|CoderUtil ()
specifier|private
name|CoderUtil
parameter_list|()
block|{
comment|// No called
block|}
comment|/**    * Get indexes into inputs array for items marked as null, either erased or    * not to read.    * @return indexes into inputs array    */
DECL|method|getErasedOrNotToReadIndexes (T[] inputs)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
index|[]
name|getErasedOrNotToReadIndexes
parameter_list|(
name|T
index|[]
name|inputs
parameter_list|)
block|{
name|int
index|[]
name|invalidIndexes
init|=
operator|new
name|int
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|invalidIndexes
index|[
name|idx
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|invalidIndexes
argument_list|,
name|idx
argument_list|)
return|;
block|}
comment|/**    * Find the valid input from all the inputs.    * @param inputs input buffers to look for valid input    * @return the first valid input    */
DECL|method|findFirstValidInput (T[] inputs)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|findFirstValidInput
parameter_list|(
name|T
index|[]
name|inputs
parameter_list|)
block|{
for|for
control|(
name|T
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|input
return|;
block|}
block|}
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid inputs are found, all being null"
argument_list|)
throw|;
block|}
comment|/**    * Picking up indexes of valid inputs.    * @param inputs actually decoding input buffers    * @param validIndexes an array to be filled and returned    * @param<T>    */
DECL|method|makeValidIndexes (T[] inputs, int[] validIndexes)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|makeValidIndexes
parameter_list|(
name|T
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|validIndexes
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
operator|&&
name|idx
operator|<
name|validIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|validIndexes
index|[
name|idx
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

