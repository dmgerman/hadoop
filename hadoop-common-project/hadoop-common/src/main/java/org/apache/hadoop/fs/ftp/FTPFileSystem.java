begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  *<p>  * A {@link FileSystem} backed by an FTP client provided by<a  * href="http://commons.apache.org/net/">Apache Commons Net</a>.  *</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FTPFileSystem
specifier|public
class|class
name|FTPFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FTPFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|DEFAULT_BLOCK_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>ftp</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"ftp"
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// get host information from uri (overrides info in conf)
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|host
operator|=
operator|(
name|host
operator|==
literal|null
operator|)
condition|?
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.host"
argument_list|,
literal|null
argument_list|)
else|:
name|host
expr_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid host specified"
argument_list|)
throw|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"fs.ftp.host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// get port information from uri, (overrides info in conf)
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|port
operator|=
operator|(
name|port
operator|==
operator|-
literal|1
operator|)
condition|?
name|FTP
operator|.
name|DEFAULT_PORT
else|:
name|port
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"fs.ftp.host.port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// get user/password information from URI (overrides info in conf)
name|String
name|userAndPassword
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|userAndPassword
operator|==
literal|null
condition|)
block|{
name|userAndPassword
operator|=
operator|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.user."
operator|+
name|host
argument_list|,
literal|null
argument_list|)
operator|+
literal|":"
operator|+
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.password."
operator|+
name|host
argument_list|,
literal|null
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|userAndPassword
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid user/passsword specified"
argument_list|)
throw|;
block|}
block|}
name|String
index|[]
name|userPasswdInfo
init|=
name|userAndPassword
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.ftp.user."
operator|+
name|host
argument_list|,
name|userPasswdInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|userPasswdInfo
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.ftp.password."
operator|+
name|host
argument_list|,
name|userPasswdInfo
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.ftp.password."
operator|+
name|host
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
comment|/**    * Connect to the FTP server using configuration parameters *    *     * @return An FTPClient instance    * @throws IOException    */
DECL|method|connect ()
specifier|private
name|FTPClient
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.host"
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"fs.ftp.host.port"
argument_list|,
name|FTP
operator|.
name|DEFAULT_PORT
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.user."
operator|+
name|host
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"fs.ftp.password."
operator|+
name|host
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|FTPClient
argument_list|()
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|int
name|reply
init|=
name|client
operator|.
name|getReplyCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FTPReply
operator|.
name|isPositiveCompletion
argument_list|(
name|reply
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server - "
operator|+
name|host
operator|+
literal|" refused connection on port - "
operator|+
name|port
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|client
operator|.
name|login
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
condition|)
block|{
name|client
operator|.
name|setFileTransferMode
argument_list|(
name|FTP
operator|.
name|BLOCK_TRANSFER_MODE
argument_list|)
expr_stmt|;
name|client
operator|.
name|setFileType
argument_list|(
name|FTP
operator|.
name|BINARY_FILE_TYPE
argument_list|)
expr_stmt|;
name|client
operator|.
name|setBufferSize
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Login failed on server - "
operator|+
name|host
operator|+
literal|", port - "
operator|+
name|port
argument_list|)
throw|;
block|}
return|return
name|client
return|;
block|}
comment|/**    * Logout and disconnect the given FTPClient. *    *     * @param client    * @throws IOException    */
DECL|method|disconnect (FTPClient client)
specifier|private
name|void
name|disconnect
parameter_list|(
name|FTPClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|client
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Client not connected"
argument_list|)
throw|;
block|}
name|boolean
name|logoutSuccess
init|=
name|client
operator|.
name|logout
argument_list|()
decl_stmt|;
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|logoutSuccess
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Logout failed while disconnecting, error code - "
operator|+
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Resolve against given working directory. *    *     * @param workDir    * @param path    * @return    */
DECL|method|makeAbsolute (Path workDir, Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|workDir
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path file, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStat
init|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|file
operator|+
literal|" is a directory."
argument_list|)
throw|;
block|}
name|client
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// Change to parent directory on the
comment|// server. Only then can we read the
comment|// file
comment|// on the server by opening up an InputStream. As a side effect the working
comment|// directory on the server is changed to the parent directory of the file.
comment|// The FTP client connection is closed when close() is called on the
comment|// FSDataInputStream.
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|client
operator|.
name|retrieveFileStream
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|FTPInputStream
argument_list|(
name|is
argument_list|,
name|client
argument_list|,
name|statistics
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FTPReply
operator|.
name|isPositivePreliminary
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|)
condition|)
block|{
comment|// The ftpClient is an inconsistent state. Must close the stream
comment|// which in turn will logout and disconnect from FTP server
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to open file: "
operator|+
name|file
operator|+
literal|", Aborting"
argument_list|)
throw|;
block|}
return|return
name|fis
return|;
block|}
comment|/**    * A stream obtained via this call must be closed before using other APIs of    * this class or else the invocation will block.    */
annotation|@
name|Override
DECL|method|create (Path file, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
name|delete
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists: "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
name|Path
name|parent
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
operator|!
name|mkdirs
argument_list|(
name|client
argument_list|,
name|parent
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
condition|)
block|{
name|parent
operator|=
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
else|:
name|parent
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"create(): Mkdirs failed to create: "
operator|+
name|parent
argument_list|)
throw|;
block|}
name|client
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
comment|// Change to parent directory on the server. Only then can we write to the
comment|// file on the server by opening up an OutputStream. As a side effect the
comment|// working directory on the server is changed to the parent directory of the
comment|// file. The FTP client connection is closed when close() is called on the
comment|// FSDataOutputStream.
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|fos
init|=
operator|new
name|FSDataOutputStream
argument_list|(
name|client
operator|.
name|storeFileStream
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|statistics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Client not connected"
argument_list|)
throw|;
block|}
name|boolean
name|cmdCompleted
init|=
name|client
operator|.
name|completePendingCommand
argument_list|()
decl_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cmdCompleted
condition|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Could not complete transfer, Reply Code - "
operator|+
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|FTPReply
operator|.
name|isPositivePreliminary
argument_list|(
name|client
operator|.
name|getReplyCode
argument_list|()
argument_list|)
condition|)
block|{
comment|// The ftpClient is an inconsistent state. Must close the stream
comment|// which in turn will logout and disconnect from FTP server
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create file: "
operator|+
name|file
operator|+
literal|", Aborting"
argument_list|)
throw|;
block|}
return|return
name|fos
return|;
block|}
comment|/** This optional operation is not yet supported. */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|exists (FTPClient client, Path file)
specifier|private
name|boolean
name|exists
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
try|try
block|{
return|return
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Failed to get file status"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Path file, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|file
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|delete
argument_list|(
name|client
argument_list|,
name|file
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @deprecated Use delete(Path, boolean) instead */
annotation|@
name|Deprecated
DECL|method|delete (FTPClient client, Path file)
specifier|private
name|boolean
name|delete
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|client
argument_list|,
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|delete (FTPClient client, Path file, boolean recursive)
specifier|private
name|boolean
name|delete
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|pathName
init|=
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
name|fileStat
init|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStat
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|client
operator|.
name|deleteFile
argument_list|(
name|pathName
argument_list|)
return|;
block|}
name|FileStatus
index|[]
name|dirEntries
init|=
name|listStatus
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirEntries
operator|!=
literal|null
operator|&&
name|dirEntries
operator|.
name|length
operator|>
literal|0
operator|&&
operator|!
operator|(
name|recursive
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory: "
operator|+
name|file
operator|+
literal|" is not empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dirEntries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|delete
argument_list|(
name|client
argument_list|,
operator|new
name|Path
argument_list|(
name|absolute
argument_list|,
name|dirEntries
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|client
operator|.
name|removeDirectory
argument_list|(
name|pathName
argument_list|)
return|;
block|}
DECL|method|getFsAction (int accessGroup, FTPFile ftpFile)
specifier|private
name|FsAction
name|getFsAction
parameter_list|(
name|int
name|accessGroup
parameter_list|,
name|FTPFile
name|ftpFile
parameter_list|)
block|{
name|FsAction
name|action
init|=
name|FsAction
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|ftpFile
operator|.
name|hasPermission
argument_list|(
name|accessGroup
argument_list|,
name|FTPFile
operator|.
name|READ_PERMISSION
argument_list|)
condition|)
block|{
name|action
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ftpFile
operator|.
name|hasPermission
argument_list|(
name|accessGroup
argument_list|,
name|FTPFile
operator|.
name|WRITE_PERMISSION
argument_list|)
condition|)
block|{
name|action
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ftpFile
operator|.
name|hasPermission
argument_list|(
name|accessGroup
argument_list|,
name|FTPFile
operator|.
name|EXECUTE_PERMISSION
argument_list|)
condition|)
block|{
name|action
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
DECL|method|getPermissions (FTPFile ftpFile)
specifier|private
name|FsPermission
name|getPermissions
parameter_list|(
name|FTPFile
name|ftpFile
parameter_list|)
block|{
name|FsAction
name|user
decl_stmt|,
name|group
decl_stmt|,
name|others
decl_stmt|;
name|user
operator|=
name|getFsAction
argument_list|(
name|FTPFile
operator|.
name|USER_ACCESS
argument_list|,
name|ftpFile
argument_list|)
expr_stmt|;
name|group
operator|=
name|getFsAction
argument_list|(
name|FTPFile
operator|.
name|GROUP_ACCESS
argument_list|,
name|ftpFile
argument_list|)
expr_stmt|;
name|others
operator|=
name|getFsAction
argument_list|(
name|FTPFile
operator|.
name|WORLD_ACCESS
argument_list|,
name|ftpFile
argument_list|)
expr_stmt|;
return|return
operator|new
name|FsPermission
argument_list|(
name|user
argument_list|,
name|group
argument_list|,
name|others
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path file)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|stats
init|=
name|listStatus
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
decl_stmt|;
return|return
name|stats
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|listStatus (FTPClient client, Path file)
specifier|private
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStat
init|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStat
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|fileStat
block|}
return|;
block|}
name|FTPFile
index|[]
name|ftpFiles
init|=
name|client
operator|.
name|listFiles
argument_list|(
name|absolute
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStats
init|=
operator|new
name|FileStatus
index|[
name|ftpFiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ftpFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fileStats
index|[
name|i
index|]
operator|=
name|getFileStatus
argument_list|(
name|ftpFiles
index|[
name|i
index|]
argument_list|,
name|absolute
argument_list|)
expr_stmt|;
block|}
return|return
name|fileStats
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path file)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|getFileStatus (FTPClient client, Path file)
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStat
init|=
literal|null
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|Path
name|parentPath
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|==
literal|null
condition|)
block|{
comment|// root dir
name|long
name|length
init|=
operator|-
literal|1
decl_stmt|;
comment|// Length of root dir on server not known
name|boolean
name|isDir
init|=
literal|true
decl_stmt|;
name|int
name|blockReplication
init|=
literal|1
decl_stmt|;
name|long
name|blockSize
init|=
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
comment|// Block Size not known.
name|long
name|modTime
init|=
operator|-
literal|1
decl_stmt|;
comment|// Modification time of root dir not known.
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|root
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
name|String
name|pathName
init|=
name|parentPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FTPFile
index|[]
name|ftpFiles
init|=
name|client
operator|.
name|listFiles
argument_list|(
name|pathName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ftpFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FTPFile
name|ftpFile
range|:
name|ftpFiles
control|)
block|{
if|if
condition|(
name|ftpFile
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// file found in dir
name|fileStat
operator|=
name|getFileStatus
argument_list|(
name|ftpFile
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fileStat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|fileStat
return|;
block|}
comment|/**    * Convert the file information in FTPFile to a {@link FileStatus} object. *    *     * @param ftpFile    * @param parentPath    * @return FileStatus    */
DECL|method|getFileStatus (FTPFile ftpFile, Path parentPath)
specifier|private
name|FileStatus
name|getFileStatus
parameter_list|(
name|FTPFile
name|ftpFile
parameter_list|,
name|Path
name|parentPath
parameter_list|)
block|{
name|long
name|length
init|=
name|ftpFile
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|boolean
name|isDir
init|=
name|ftpFile
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
name|int
name|blockReplication
init|=
literal|1
decl_stmt|;
comment|// Using default block size since there is no way in FTP client to know of
comment|// block sizes on server. The assumption could be less than ideal.
name|long
name|blockSize
init|=
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
name|long
name|modTime
init|=
name|ftpFile
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|long
name|accessTime
init|=
literal|0
decl_stmt|;
name|FsPermission
name|permission
init|=
name|getPermissions
argument_list|(
name|ftpFile
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|ftpFile
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|group
init|=
name|ftpFile
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|parentPath
argument_list|,
name|ftpFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|length
argument_list|,
name|isDir
argument_list|,
name|blockReplication
argument_list|,
name|blockSize
argument_list|,
name|modTime
argument_list|,
name|accessTime
argument_list|,
name|permission
argument_list|,
name|user
argument_list|,
name|group
argument_list|,
name|filePath
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path file, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|mkdirs
argument_list|(
name|client
argument_list|,
name|file
argument_list|,
name|permission
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|mkdirs (FTPClient client, Path file, FsPermission permission)
specifier|private
name|boolean
name|mkdirs
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|created
init|=
literal|true
decl_stmt|;
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absolute
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|String
name|pathName
init|=
name|absolute
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
condition|)
block|{
name|Path
name|parent
init|=
name|absolute
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|created
operator|=
operator|(
name|parent
operator|==
literal|null
operator|||
name|mkdirs
argument_list|(
name|client
argument_list|,
name|parent
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|created
condition|)
block|{
name|String
name|parentDir
init|=
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|created
operator|=
name|created
operator|&&
name|client
operator|.
name|makeDirectory
argument_list|(
name|pathName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isFile
argument_list|(
name|client
argument_list|,
name|absolute
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path %s since it is a file."
argument_list|,
name|absolute
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|created
return|;
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    */
DECL|method|isFile (FTPClient client, Path file)
specifier|private
name|boolean
name|isFile
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
try|try
block|{
return|return
name|getFileStatus
argument_list|(
name|client
argument_list|,
name|file
argument_list|)
operator|.
name|isFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// file does not exist
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"File check failed"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/*    * Assuming that parent of both source and destination is the same. Is the    * assumption correct or it is suppose to work like 'move' ?    */
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|success
init|=
name|rename
argument_list|(
name|client
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convenience method, so that we don't open a new connection when using this    * method from within another method. Otherwise every API invocation incurs    * the overhead of opening/closing a TCP connection.    *     * @param client    * @param src    * @param dst    * @return    * @throws IOException    */
DECL|method|rename (FTPClient client, Path src, Path dst)
specifier|private
name|boolean
name|rename
parameter_list|(
name|FTPClient
name|client
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|absoluteSrc
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|Path
name|absoluteDst
init|=
name|makeAbsolute
argument_list|(
name|workDir
argument_list|,
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|client
argument_list|,
name|absoluteSrc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source path "
operator|+
name|src
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|exists
argument_list|(
name|client
argument_list|,
name|absoluteDst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Destination path "
operator|+
name|dst
operator|+
literal|" already exist, cannot rename!"
argument_list|)
throw|;
block|}
name|String
name|parentSrc
init|=
name|absoluteSrc
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|parentDst
init|=
name|absoluteDst
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|from
init|=
name|src
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|to
init|=
name|dst
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentSrc
operator|.
name|equals
argument_list|(
name|parentDst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rename parent(source): "
operator|+
name|parentSrc
operator|+
literal|", parent(destination):  "
operator|+
name|parentDst
argument_list|)
throw|;
block|}
name|client
operator|.
name|changeWorkingDirectory
argument_list|(
name|parentSrc
argument_list|)
expr_stmt|;
name|boolean
name|renamed
init|=
name|client
operator|.
name|rename
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
return|return
name|renamed
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
comment|// Return home directory always since we do not maintain state.
return|return
name|getHomeDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
name|FTPClient
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|=
name|connect
argument_list|()
expr_stmt|;
name|Path
name|homeDir
init|=
operator|new
name|Path
argument_list|(
name|client
operator|.
name|printWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|homeDir
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Failed to get home directory"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|disconnect
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|FTPException
argument_list|(
literal|"Failed to disconnect"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
comment|// we do not maintain the working directory state
block|}
block|}
end_class

end_unit

