begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Encapsulates logic for composing multiple CRCs into one or more combined CRCs  * corresponding to concatenated underlying data ranges. Optimized for composing  * a large number of CRCs that correspond to underlying chunks of data all of  * same size.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Common"
block|,
literal|"HDFS"
block|,
literal|"MapReduce"
block|,
literal|"Yarn"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CrcComposer
specifier|public
class|class
name|CrcComposer
block|{
DECL|field|CRC_SIZE_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|CRC_SIZE_BYTES
init|=
literal|4
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CrcComposer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|crcPolynomial
specifier|private
specifier|final
name|int
name|crcPolynomial
decl_stmt|;
DECL|field|precomputedMonomialForHint
specifier|private
specifier|final
name|int
name|precomputedMonomialForHint
decl_stmt|;
DECL|field|bytesPerCrcHint
specifier|private
specifier|final
name|long
name|bytesPerCrcHint
decl_stmt|;
DECL|field|stripeLength
specifier|private
specifier|final
name|long
name|stripeLength
decl_stmt|;
DECL|field|curCompositeCrc
specifier|private
name|int
name|curCompositeCrc
init|=
literal|0
decl_stmt|;
DECL|field|curPositionInStripe
specifier|private
name|long
name|curPositionInStripe
init|=
literal|0
decl_stmt|;
DECL|field|digestOut
specifier|private
name|ByteArrayOutputStream
name|digestOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|/**    * Returns a CrcComposer which will collapse all ingested CRCs into a single    * value.    */
DECL|method|newCrcComposer ( DataChecksum.Type type, long bytesPerCrcHint)
specifier|public
specifier|static
name|CrcComposer
name|newCrcComposer
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|,
name|long
name|bytesPerCrcHint
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|bytesPerCrcHint
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**    * Returns a CrcComposer which will collapse CRCs for every combined    * underlying data size which aligns with the specified stripe boundary. For    * example, if "update" is called with 20 CRCs and bytesPerCrc == 5, and    * stripeLength == 10, then every two (10 / 5) consecutive CRCs will be    * combined with each other, yielding a list of 10 CRC "stripes" in the    * final digest, each corresponding to 10 underlying data bytes. Using    * a stripeLength greater than the total underlying data size is equivalent    * to using a non-striped CrcComposer.    */
DECL|method|newStripedCrcComposer ( DataChecksum.Type type, long bytesPerCrcHint, long stripeLength)
specifier|public
specifier|static
name|CrcComposer
name|newStripedCrcComposer
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|,
name|long
name|bytesPerCrcHint
parameter_list|,
name|long
name|stripeLength
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|polynomial
init|=
name|DataChecksum
operator|.
name|getCrcPolynomialForType
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
operator|new
name|CrcComposer
argument_list|(
name|polynomial
argument_list|,
name|CrcUtil
operator|.
name|getMonomial
argument_list|(
name|bytesPerCrcHint
argument_list|,
name|polynomial
argument_list|)
argument_list|,
name|bytesPerCrcHint
argument_list|,
name|stripeLength
argument_list|)
return|;
block|}
DECL|method|CrcComposer ( int crcPolynomial, int precomputedMonomialForHint, long bytesPerCrcHint, long stripeLength)
name|CrcComposer
parameter_list|(
name|int
name|crcPolynomial
parameter_list|,
name|int
name|precomputedMonomialForHint
parameter_list|,
name|long
name|bytesPerCrcHint
parameter_list|,
name|long
name|stripeLength
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"crcPolynomial=0x{}, precomputedMonomialForHint=0x{}, "
operator|+
literal|"bytesPerCrcHint={}, stripeLength={}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|crcPolynomial
argument_list|,
literal|16
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|precomputedMonomialForHint
argument_list|,
literal|16
argument_list|)
argument_list|,
name|bytesPerCrcHint
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|crcPolynomial
operator|=
name|crcPolynomial
expr_stmt|;
name|this
operator|.
name|precomputedMonomialForHint
operator|=
name|precomputedMonomialForHint
expr_stmt|;
name|this
operator|.
name|bytesPerCrcHint
operator|=
name|bytesPerCrcHint
expr_stmt|;
name|this
operator|.
name|stripeLength
operator|=
name|stripeLength
expr_stmt|;
block|}
comment|/**    * Composes length / CRC_SIZE_IN_BYTES more CRCs from crcBuffer, with    * each CRC expected to correspond to exactly {@code bytesPerCrc} underlying    * data bytes.    *    * @param length must be a multiple of the expected byte-size of a CRC.    */
DECL|method|update ( byte[] crcBuffer, int offset, int length, long bytesPerCrc)
specifier|public
name|void
name|update
parameter_list|(
name|byte
index|[]
name|crcBuffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|bytesPerCrc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|length
operator|%
name|CRC_SIZE_BYTES
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Trying to update CRC from byte array with length '%d' at offset "
operator|+
literal|"'%d' which is not a multiple of %d!"
argument_list|,
name|length
argument_list|,
name|offset
argument_list|,
name|CRC_SIZE_BYTES
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|limit
init|=
name|offset
operator|+
name|length
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|limit
condition|)
block|{
name|int
name|crcB
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|crcBuffer
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|crcB
argument_list|,
name|bytesPerCrc
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|CRC_SIZE_BYTES
expr_stmt|;
block|}
block|}
comment|/**    * Composes {@code numChecksumsToRead} additional CRCs into the current digest    * out of {@code checksumIn}, with each CRC expected to correspond to exactly    * {@code bytesPerCrc} underlying data bytes.    */
DECL|method|update ( DataInputStream checksumIn, long numChecksumsToRead, long bytesPerCrc)
specifier|public
name|void
name|update
parameter_list|(
name|DataInputStream
name|checksumIn
parameter_list|,
name|long
name|numChecksumsToRead
parameter_list|,
name|long
name|bytesPerCrc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChecksumsToRead
condition|;
operator|++
name|i
control|)
block|{
name|int
name|crcB
init|=
name|checksumIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|update
argument_list|(
name|crcB
argument_list|,
name|bytesPerCrc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates with a single additional CRC which corresponds to an underlying    * data size of {@code bytesPerCrc}.    */
DECL|method|update (int crcB, long bytesPerCrc)
specifier|public
name|void
name|update
parameter_list|(
name|int
name|crcB
parameter_list|,
name|long
name|bytesPerCrc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|curCompositeCrc
operator|==
literal|0
condition|)
block|{
name|curCompositeCrc
operator|=
name|crcB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytesPerCrc
operator|==
name|bytesPerCrcHint
condition|)
block|{
name|curCompositeCrc
operator|=
name|CrcUtil
operator|.
name|composeWithMonomial
argument_list|(
name|curCompositeCrc
argument_list|,
name|crcB
argument_list|,
name|precomputedMonomialForHint
argument_list|,
name|crcPolynomial
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curCompositeCrc
operator|=
name|CrcUtil
operator|.
name|compose
argument_list|(
name|curCompositeCrc
argument_list|,
name|crcB
argument_list|,
name|bytesPerCrc
argument_list|,
name|crcPolynomial
argument_list|)
expr_stmt|;
block|}
name|curPositionInStripe
operator|+=
name|bytesPerCrc
expr_stmt|;
if|if
condition|(
name|curPositionInStripe
operator|>
name|stripeLength
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current position in stripe '%d' after advancing by bytesPerCrc '%d' "
operator|+
literal|"exceeds stripeLength '%d' without stripe alignment."
argument_list|,
name|curPositionInStripe
argument_list|,
name|bytesPerCrc
argument_list|,
name|stripeLength
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|curPositionInStripe
operator|==
name|stripeLength
condition|)
block|{
comment|// Hit a stripe boundary; flush the curCompositeCrc and reset for next
comment|// stripe.
name|digestOut
operator|.
name|write
argument_list|(
name|CrcUtil
operator|.
name|intToBytes
argument_list|(
name|curCompositeCrc
argument_list|)
argument_list|,
literal|0
argument_list|,
name|CRC_SIZE_BYTES
argument_list|)
expr_stmt|;
name|curCompositeCrc
operator|=
literal|0
expr_stmt|;
name|curPositionInStripe
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * Returns byte representation of composed CRCs; if no stripeLength was    * specified, the digest should be of length equal to exactly one CRC.    * Otherwise, the number of CRCs in the returned array is equal to the    * total sum bytesPerCrc divided by stripeLength. If the sum of bytesPerCrc    * is not a multiple of stripeLength, then the last CRC in the array    * corresponds to totalLength % stripeLength underlying data bytes.    */
DECL|method|digest ()
specifier|public
name|byte
index|[]
name|digest
parameter_list|()
block|{
if|if
condition|(
name|curPositionInStripe
operator|>
literal|0
condition|)
block|{
name|digestOut
operator|.
name|write
argument_list|(
name|CrcUtil
operator|.
name|intToBytes
argument_list|(
name|curCompositeCrc
argument_list|)
argument_list|,
literal|0
argument_list|,
name|CRC_SIZE_BYTES
argument_list|)
expr_stmt|;
name|curCompositeCrc
operator|=
literal|0
expr_stmt|;
name|curPositionInStripe
operator|=
literal|0
expr_stmt|;
block|}
name|byte
index|[]
name|digestValue
init|=
name|digestOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|digestOut
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|digestValue
return|;
block|}
block|}
end_class

end_unit

