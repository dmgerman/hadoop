begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Initializes hadoop-auth AuthenticationFilter which provides support for  * Kerberos HTTP SPNEGO authentication.  *<p>  * It enables anonymous access, simple/speudo and Kerberos HTTP SPNEGO  * authentication  for Hadoop JobTracker, NameNode, DataNodes and  * TaskTrackers.  *<p>  * Refer to the<code>core-default.xml</code> file, after the comment  * 'HTTP Authentication' for details on the configuration options.  * All related configuration properties have 'hadoop.http.authentication.'  * as prefix.  */
end_comment

begin_class
DECL|class|AuthenticationFilterInitializer
specifier|public
class|class
name|AuthenticationFilterInitializer
extends|extends
name|FilterInitializer
block|{
DECL|field|PREFIX
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"hadoop.http.authentication."
decl_stmt|;
comment|/**    * Initializes hadoop-auth AuthenticationFilter.    *<p>    * Propagates to hadoop-auth AuthenticationFilter configuration all Hadoop    * configuration properties prefixed with "hadoop.http.authentication."    *    * @param container The filter container    * @param conf Configuration for run-time parameters    */
annotation|@
name|Override
DECL|method|initFilter (FilterContainer container, Configuration conf)
specifier|public
name|void
name|initFilter
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfig
init|=
name|getFilterConfigMap
argument_list|(
name|conf
argument_list|,
name|PREFIX
argument_list|)
decl_stmt|;
name|container
operator|.
name|addFilter
argument_list|(
literal|"authentication"
argument_list|,
name|AuthenticationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilterConfigMap (Configuration conf, String prefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilterConfigMap
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//setting the cookie path to root '/' so it is used for all resources.
name|filterConfig
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propsWithPrefix
init|=
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|propsWithPrefix
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|filterConfig
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Resolve _HOST into bind address
name|String
name|bindAddress
init|=
name|conf
operator|.
name|get
argument_list|(
name|HttpServer2
operator|.
name|BIND_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|principal
init|=
name|filterConfig
operator|.
name|get
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|principal
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principal
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not resolve Kerberos principal name: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|filterConfig
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
return|return
name|filterConfig
return|;
block|}
block|}
end_class

end_unit

