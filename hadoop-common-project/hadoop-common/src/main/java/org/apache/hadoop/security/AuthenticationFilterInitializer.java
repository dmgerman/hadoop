begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|FilterInitializer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Initializes hadoop-auth AuthenticationFilter which provides support for  * Kerberos HTTP SPENGO authentication.  *<p/>  * It enables anonymous access, simple/speudo and Kerberos HTTP SPNEGO  * authentication  for Hadoop JobTracker, NameNode, DataNodes and  * TaskTrackers.  *<p/>  * Refer to the<code>core-default.xml</code> file, after the comment  * 'HTTP Authentication' for details on the configuration options.  * All related configuration properties have 'hadoop.http.authentication.'  * as prefix.  */
end_comment

begin_class
DECL|class|AuthenticationFilterInitializer
specifier|public
class|class
name|AuthenticationFilterInitializer
extends|extends
name|FilterInitializer
block|{
DECL|field|PREFIX
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"hadoop.http.authentication."
decl_stmt|;
DECL|field|SIGNATURE_SECRET_FILE
specifier|static
specifier|final
name|String
name|SIGNATURE_SECRET_FILE
init|=
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
operator|+
literal|".file"
decl_stmt|;
comment|/**    * Initializes hadoop-auth AuthenticationFilter.    *<p/>    * Propagates to hadoop-auth AuthenticationFilter configuration all Hadoop    * configuration properties prefixed with "hadoop.http.authentication."    *    * @param container The filter container    * @param conf Configuration for run-time parameters    */
annotation|@
name|Override
DECL|method|initFilter (FilterContainer container, Configuration conf)
specifier|public
name|void
name|initFilter
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterConfig
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//setting the cookie path to root '/' so it is used for all resources.
name|filterConfig
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|COOKIE_PATH
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|filterConfig
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|signatureSecretFile
init|=
name|filterConfig
operator|.
name|get
argument_list|(
name|SIGNATURE_SECRET_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureSecretFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Undefined property: "
operator|+
name|SIGNATURE_SECRET_FILE
argument_list|)
throw|;
block|}
try|try
block|{
name|StringBuilder
name|secret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|signatureSecretFile
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|c
operator|>
operator|-
literal|1
condition|)
block|{
name|secret
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|c
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|filterConfig
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|secret
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not read HTTP signature secret file: "
operator|+
name|signatureSecretFile
argument_list|)
throw|;
block|}
name|container
operator|.
name|addFilter
argument_list|(
literal|"authentication"
argument_list|,
name|AuthenticationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

