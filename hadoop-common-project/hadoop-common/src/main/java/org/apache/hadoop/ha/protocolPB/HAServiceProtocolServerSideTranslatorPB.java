begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|GetServiceStateRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|GetServiceStateResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|MonitorHealthRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|MonitorHealthResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|ReadyToBecomeActiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|ReadyToBecomeActiveResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToActiveRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToActiveResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToStandbyRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|TransitionToStandbyResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * This class is used on the server side. Calls come across the wire for the  * for protocol {@link HAServiceProtocolPB}.  * This class translates the PB data types  * to the native data types used inside the NN as specified in the generic  * ClientProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|HAServiceProtocolServerSideTranslatorPB
specifier|public
class|class
name|HAServiceProtocolServerSideTranslatorPB
implements|implements
name|HAServiceProtocolPB
block|{
DECL|field|server
specifier|private
specifier|final
name|HAServiceProtocol
name|server
decl_stmt|;
DECL|field|MONITOR_HEALTH_RESP
specifier|private
specifier|static
specifier|final
name|MonitorHealthResponseProto
name|MONITOR_HEALTH_RESP
init|=
name|MonitorHealthResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|TRANSITION_TO_ACTIVE_RESP
specifier|private
specifier|static
specifier|final
name|TransitionToActiveResponseProto
name|TRANSITION_TO_ACTIVE_RESP
init|=
name|TransitionToActiveResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|TRANSITION_TO_STANDBY_RESP
specifier|private
specifier|static
specifier|final
name|TransitionToStandbyResponseProto
name|TRANSITION_TO_STANDBY_RESP
init|=
name|TransitionToStandbyResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|HAServiceProtocolServerSideTranslatorPB (HAServiceProtocol server)
specifier|public
name|HAServiceProtocolServerSideTranslatorPB
parameter_list|(
name|HAServiceProtocol
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|monitorHealth (RpcController controller, MonitorHealthRequestProto request)
specifier|public
name|MonitorHealthResponseProto
name|monitorHealth
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MonitorHealthRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|server
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
return|return
name|MONITOR_HEALTH_RESP
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToActive ( RpcController controller, TransitionToActiveRequestProto request)
specifier|public
name|TransitionToActiveResponseProto
name|transitionToActive
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TransitionToActiveRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|server
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
return|return
name|TRANSITION_TO_ACTIVE_RESP
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|transitionToStandby ( RpcController controller, TransitionToStandbyRequestProto request)
specifier|public
name|TransitionToStandbyResponseProto
name|transitionToStandby
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TransitionToStandbyRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|server
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
return|return
name|TRANSITION_TO_STANDBY_RESP
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceState (RpcController controller, GetServiceStateRequestProto request)
specifier|public
name|GetServiceStateResponseProto
name|getServiceState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetServiceStateRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|HAServiceState
name|s
decl_stmt|;
try|try
block|{
name|s
operator|=
name|server
operator|.
name|getServiceState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|HAServiceStateProto
name|ret
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|ACTIVE
case|:
name|ret
operator|=
name|HAServiceStateProto
operator|.
name|ACTIVE
expr_stmt|;
break|break;
case|case
name|STANDBY
case|:
name|ret
operator|=
name|HAServiceStateProto
operator|.
name|STANDBY
expr_stmt|;
break|break;
case|case
name|INITIALIZING
case|:
default|default:
name|ret
operator|=
name|HAServiceStateProto
operator|.
name|INITIALIZING
expr_stmt|;
break|break;
block|}
return|return
name|GetServiceStateResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readyToBecomeActive ( RpcController controller, ReadyToBecomeActiveRequestProto request)
specifier|public
name|ReadyToBecomeActiveResponseProto
name|readyToBecomeActive
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReadyToBecomeActiveRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|ReadyToBecomeActiveResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReadyToBecomeActive
argument_list|(
name|server
operator|.
name|readyToBecomeActive
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

