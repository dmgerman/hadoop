begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSSHRemoteExecution
specifier|public
class|class
name|TestSSHRemoteExecution
block|{
annotation|@
name|Test
comment|/**    * Method: executeCommand(String remoteHostName, String user, String  command)    */
DECL|method|testExecuteCommandForRemoteHostNameUserCommand ()
specifier|public
name|void
name|testExecuteCommandForRemoteHostNameUserCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|command
init|=
literal|"ls -l /bin"
decl_stmt|;
name|SSHRemoteExecution
name|sshRE
init|=
operator|new
name|SSHRemoteExecution
argument_list|()
decl_stmt|;
name|sshRE
operator|.
name|executeCommand
argument_list|(
literal|"localhost"
argument_list|,
literal|null
argument_list|,
literal|"ls -l /bin"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sshRE
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code should is expected to be 0"
argument_list|,
name|sshRE
operator|.
name|getExitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched command string"
argument_list|,
name|sshRE
operator|.
name|getCommandString
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Method: getHomeDir()    */
DECL|method|testGetHomeDir ()
specifier|public
name|void
name|testGetHomeDir
parameter_list|()
throws|throws
name|Exception
block|{
name|SSHRemoteExecution
name|sshRE
init|=
operator|new
name|SSHRemoteExecution
argument_list|()
decl_stmt|;
name|String
name|ret
init|=
name|sshRE
operator|.
name|getHomeDir
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
name|ret
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

