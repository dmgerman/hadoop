begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|jcraft
operator|.
name|jsch
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Remote Execution of commands  on a remote machine.  */
end_comment

begin_class
DECL|class|SSHRemoteExecution
specifier|public
class|class
name|SSHRemoteExecution
implements|implements
name|RemoteExecution
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SSHRemoteExecution
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SSH_PORT
specifier|static
specifier|final
name|int
name|SSH_PORT
init|=
literal|22
decl_stmt|;
DECL|field|DEFAULT_IDENTITY
specifier|static
specifier|final
name|String
name|DEFAULT_IDENTITY
init|=
literal|"id_dsa"
decl_stmt|;
DECL|field|DEFAULT_KNOWNHOSTS
specifier|static
specifier|final
name|String
name|DEFAULT_KNOWNHOSTS
init|=
literal|"known_hosts"
decl_stmt|;
DECL|field|FS
specifier|static
specifier|final
name|String
name|FS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
DECL|field|LS
specifier|static
specifier|final
name|String
name|LS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|exitCode
specifier|private
name|int
name|exitCode
decl_stmt|;
DECL|field|output
specifier|private
name|StringBuffer
name|output
decl_stmt|;
DECL|field|commandString
specifier|private
name|String
name|commandString
decl_stmt|;
DECL|field|errorMessage
specifier|final
name|StringBuffer
name|errorMessage
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|method|SSHRemoteExecution ()
specifier|public
name|SSHRemoteExecution
parameter_list|()
throws|throws
name|Exception
block|{   }
DECL|method|getHomeDir ()
specifier|protected
name|String
name|getHomeDir
parameter_list|()
block|{
name|String
name|currentUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|userHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
return|return
name|userHome
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userHome
operator|.
name|indexOf
argument_list|(
name|currentUser
argument_list|)
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Execute command at remote host under given user    * @param remoteHostName remote host name    * @param user is the name of the user to be login under;    *   current user will be used if this is set to<code>null</code>    * @param command to be executed remotely    * @param identityFile is the name of alternative identity file; default    *   is ~user/.ssh/id_dsa    * @param portNumber remote SSH daemon port number, default is 22    * @throws Exception in case of errors    */
DECL|method|executeCommand (String remoteHostName, String user, String command, String identityFile, int portNumber)
specifier|public
name|void
name|executeCommand
parameter_list|(
name|String
name|remoteHostName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|identityFile
parameter_list|,
name|int
name|portNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|commandString
operator|=
name|command
expr_stmt|;
name|String
name|sessionUser
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|userHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|sessionUser
operator|=
name|user
expr_stmt|;
name|userHome
operator|=
name|getHomeDir
argument_list|()
operator|+
name|FS
operator|+
name|user
expr_stmt|;
block|}
name|String
name|dotSSHDir
init|=
name|userHome
operator|+
name|FS
operator|+
literal|".ssh"
decl_stmt|;
name|String
name|sessionIdentity
init|=
name|dotSSHDir
operator|+
name|FS
operator|+
name|DEFAULT_IDENTITY
decl_stmt|;
if|if
condition|(
name|identityFile
operator|!=
literal|null
condition|)
block|{
name|sessionIdentity
operator|=
name|identityFile
expr_stmt|;
block|}
name|JSch
name|jsch
init|=
operator|new
name|JSch
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|jsch
operator|.
name|getSession
argument_list|(
name|sessionUser
argument_list|,
name|remoteHostName
argument_list|,
name|portNumber
argument_list|)
decl_stmt|;
name|jsch
operator|.
name|setKnownHosts
argument_list|(
name|dotSSHDir
operator|+
name|FS
operator|+
name|DEFAULT_KNOWNHOSTS
argument_list|)
expr_stmt|;
name|jsch
operator|.
name|addIdentity
argument_list|(
name|sessionIdentity
argument_list|)
expr_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"StrictHostKeyChecking"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|session
operator|.
name|connect
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
comment|// making a connection with timeout.
name|Channel
name|channel
init|=
name|session
operator|.
name|openChannel
argument_list|(
literal|"exec"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ChannelExec
operator|)
name|channel
operator|)
operator|.
name|setCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setInputStream
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|BufferedReader
name|errReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|(
operator|(
name|ChannelExec
operator|)
name|channel
operator|)
operator|.
name|getErrStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|inReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|channel
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|channel
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Thread
name|errorThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|line
init|=
name|errReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|isInterrupted
argument_list|()
condition|)
block|{
name|errorMessage
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|errorMessage
operator|.
name|append
argument_list|(
name|LS
argument_list|)
expr_stmt|;
name|line
operator|=
name|errReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the error stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|errorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|parseExecResult
argument_list|(
name|inReader
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|inReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|inReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|exitCode
operator|=
name|channel
operator|.
name|getExitStatus
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"exit-status: "
operator|+
name|exitCode
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// make sure that the error thread exits
name|errorThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while reading the error stream"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|inReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing the input stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|errReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing the error stream"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|session
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Execute command at remote host under given username    * Default identity is ~/.ssh/id_dsa key will be used    * Default known_hosts file is ~/.ssh/known_hosts will be used    * @param remoteHostName remote host name    * @param user is the name of the user to be login under;    *   if equals to<code>null</code> then current user name will be used    * @param command to be executed remotely    */
annotation|@
name|Override
DECL|method|executeCommand (String remoteHostName, String user, String command)
specifier|public
name|void
name|executeCommand
parameter_list|(
name|String
name|remoteHostName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|remoteHostName
argument_list|,
name|user
argument_list|,
name|command
argument_list|,
literal|null
argument_list|,
name|SSH_PORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|512
index|]
decl_stmt|;
name|int
name|nRead
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|lines
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get the output of the ssh command.*/
annotation|@
name|Override
DECL|method|getOutput ()
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
operator|(
name|output
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Get the String representation of ssh command */
annotation|@
name|Override
DECL|method|getCommandString ()
specifier|public
name|String
name|getCommandString
parameter_list|()
block|{
return|return
name|commandString
return|;
block|}
block|}
end_class

end_unit

