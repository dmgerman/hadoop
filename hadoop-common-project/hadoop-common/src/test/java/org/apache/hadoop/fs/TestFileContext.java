begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestFileContext
specifier|public
class|class
name|TestFileContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFileContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultURIWithoutScheme ()
specifier|public
name|void
name|testDefaultURIWithoutScheme
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|UnsupportedFileSystemException
operator|.
name|class
operator|+
literal|" not thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFileSystemException
name|ufse
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception: "
argument_list|,
name|ufse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConfBasedAndAPIBasedSetUMask ()
specifier|public
name|void
name|testConfBasedAndAPIBasedSetUMask
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|defaultlUMask
init|=
name|conf
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Default UMask changed!"
argument_list|,
literal|"022"
argument_list|,
name|defaultlUMask
argument_list|)
expr_stmt|;
name|URI
name|uri1
init|=
operator|new
name|URI
argument_list|(
literal|"file://mydfs:50070/"
argument_list|)
decl_stmt|;
name|URI
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"file://tmp"
argument_list|)
decl_stmt|;
name|FileContext
name|fc1
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|uri1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileContext
name|fc2
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|uri2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc1 is incorrect"
argument_list|,
literal|022
argument_list|,
name|fc1
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc2 is incorrect"
argument_list|,
literal|022
argument_list|,
name|fc2
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Till a user explicitly calls FileContext.setUMask(), the updates through
comment|// configuration should be reflected..
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"011"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc1 is incorrect"
argument_list|,
literal|011
argument_list|,
name|fc1
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc2 is incorrect"
argument_list|,
literal|011
argument_list|,
name|fc2
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop reflecting the conf update for specific FileContexts, once an
comment|// explicit setUMask is done.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"066"
argument_list|)
expr_stmt|;
name|fc1
operator|.
name|setUMask
argument_list|(
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|00033
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc1 is incorrect"
argument_list|,
literal|033
argument_list|,
name|fc1
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc2 is incorrect"
argument_list|,
literal|066
argument_list|,
name|fc2
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_PERMISSIONS_UMASK_KEY
argument_list|,
literal|"077"
argument_list|)
expr_stmt|;
name|fc2
operator|.
name|setUMask
argument_list|(
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|00044
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc1 is incorrect"
argument_list|,
literal|033
argument_list|,
name|fc1
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Umask for fc2 is incorrect"
argument_list|,
literal|044
argument_list|,
name|fc2
operator|.
name|getUMask
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

