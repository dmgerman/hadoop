begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|util
operator|.
name|RSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Test raw Reed-solomon encoding and decoding.  */
end_comment

begin_class
DECL|class|TestJRSRawCoder
specifier|public
class|class
name|TestJRSRawCoder
extends|extends
name|TestRawCoderBase
block|{
DECL|field|symbolSize
specifier|private
specifier|static
name|int
name|symbolSize
init|=
literal|0
decl_stmt|;
DECL|field|symbolMax
specifier|private
specifier|static
name|int
name|symbolMax
init|=
literal|0
decl_stmt|;
static|static
block|{
name|symbolSize
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|RSUtil
operator|.
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|symbolMax
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|symbolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|encoderClass
operator|=
name|JRSRawEncoder
operator|.
name|class
expr_stmt|;
name|this
operator|.
name|decoderClass
operator|=
name|JRSRawDecoder
operator|.
name|class
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingNoDirectBuffer_10x4 ()
specifier|public
name|void
name|testCodingNoDirectBuffer_10x4
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingDirectBuffer_10x4 ()
specifier|public
name|void
name|testCodingDirectBuffer_10x4
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingDirectBuffer_10x4_erasure_of_2_4 ()
specifier|public
name|void
name|testCodingDirectBuffer_10x4_erasure_of_2_4
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingDirectBuffer_10x4_erasing_all ()
specifier|public
name|void
name|testCodingDirectBuffer_10x4_erasing_all
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|10
argument_list|,
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingNoDirectBuffer_3x3 ()
specifier|public
name|void
name|testCodingNoDirectBuffer_3x3
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodingDirectBuffer_3x3 ()
specifier|public
name|void
name|testCodingDirectBuffer_3x3
parameter_list|()
block|{
name|prepare
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testCoding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateDataChunk ()
specifier|protected
name|ECChunk
name|generateDataChunk
parameter_list|()
block|{
name|ByteBuffer
name|buffer
init|=
name|allocateOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkSize
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|RAND
operator|.
name|nextInt
argument_list|(
name|symbolMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
operator|new
name|ECChunk
argument_list|(
name|buffer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

