begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|re2j
operator|.
name|PatternSyntaxException
import|;
end_import

begin_comment
comment|/**  * Tests for glob patterns  */
end_comment

begin_class
DECL|class|TestGlobPattern
specifier|public
class|class
name|TestGlobPattern
block|{
DECL|method|assertMatch (boolean yes, String glob, String...input)
specifier|private
name|void
name|assertMatch
parameter_list|(
name|boolean
name|yes
parameter_list|,
name|String
name|glob
parameter_list|,
name|String
modifier|...
name|input
parameter_list|)
block|{
name|GlobPattern
name|pattern
init|=
operator|new
name|GlobPattern
argument_list|(
name|glob
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|input
control|)
block|{
name|boolean
name|result
init|=
name|pattern
operator|.
name|matches
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|glob
operator|+
literal|" should"
operator|+
operator|(
name|yes
condition|?
literal|""
else|:
literal|" not"
operator|)
operator|+
literal|" match "
operator|+
name|s
argument_list|,
name|yes
condition|?
name|result
else|:
operator|!
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shouldThrow (String... globs)
specifier|private
name|void
name|shouldThrow
parameter_list|(
name|String
modifier|...
name|globs
parameter_list|)
block|{
for|for
control|(
name|String
name|glob
range|:
name|globs
control|)
block|{
try|try
block|{
name|GlobPattern
operator|.
name|compile
argument_list|(
name|glob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|assertTrue
argument_list|(
literal|"glob "
operator|+
name|glob
operator|+
literal|" should throw"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testValidPatterns ()
annotation|@
name|Test
specifier|public
name|void
name|testValidPatterns
parameter_list|()
block|{
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"*"
argument_list|,
literal|"^$"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"?"
argument_list|,
literal|"?"
argument_list|,
literal|"^"
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|,
literal|"$"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"foo*"
argument_list|,
literal|"foo"
argument_list|,
literal|"food"
argument_list|,
literal|"fool"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"f*d"
argument_list|,
literal|"fud"
argument_list|,
literal|"food"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"*d"
argument_list|,
literal|"good"
argument_list|,
literal|"bad"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"\\*\\?\\[\\{\\\\"
argument_list|,
literal|"*?[{\\"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"[]^-]"
argument_list|,
literal|"]"
argument_list|,
literal|"-"
argument_list|,
literal|"^"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"]"
argument_list|,
literal|"]"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"^.$()|+"
argument_list|,
literal|"^.$()|+"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"[^^]"
argument_list|,
literal|"."
argument_list|,
literal|"$"
argument_list|,
literal|"["
argument_list|,
literal|"]"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|false
argument_list|,
literal|"[^^]"
argument_list|,
literal|"^"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"[!!-]"
argument_list|,
literal|"^"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|false
argument_list|,
literal|"[!!-]"
argument_list|,
literal|"!"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"{[12]*,[45]*,[78]*}"
argument_list|,
literal|"1"
argument_list|,
literal|"2!"
argument_list|,
literal|"4"
argument_list|,
literal|"42"
argument_list|,
literal|"7"
argument_list|,
literal|"7$"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|false
argument_list|,
literal|"{[12]*,[45]*,[78]*}"
argument_list|,
literal|"3"
argument_list|,
literal|"6"
argument_list|,
literal|"9Ã"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
literal|"}"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidPatterns ()
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPatterns
parameter_list|()
block|{
name|shouldThrow
argument_list|(
literal|"["
argument_list|,
literal|"[[]]"
argument_list|,
literal|"{"
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPathologicalPatterns ()
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
specifier|public
name|void
name|testPathologicalPatterns
parameter_list|()
block|{
name|String
name|badFilename
init|=
literal|"job_1429571161900_4222-1430338332599-tda%2D%2D+******************************+++...%270%27%28Stage-1430338580443-39-2000-SUCCEEDED-production%2Dhigh-1430338340360.jhist"
decl_stmt|;
name|assertMatch
argument_list|(
literal|true
argument_list|,
name|badFilename
argument_list|,
name|badFilename
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

