begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests the local file system via the FileSystem abstraction.  */
end_comment

begin_class
DECL|class|TestLocalFileSystemPermission
specifier|public
class|class
name|TestLocalFileSystemPermission
extends|extends
name|TestCase
block|{
DECL|field|TEST_PATH_PREFIX
specifier|static
specifier|final
name|String
name|TEST_PATH_PREFIX
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"/"
operator|+
name|TestLocalFileSystemPermission
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
block|{
try|try
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
operator|)
name|FileSystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot change log level\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeFile (FileSystem fs, String name)
specifier|private
name|Path
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH_PREFIX
operator|+
name|name
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"42\n"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|cleanupFile (FileSystem fs, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test LocalFileSystem.setPermission */
DECL|method|testLocalFSsetPermission ()
specifier|public
name|void
name|testLocalFSsetPermission
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test for Windows"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"foo"
decl_stmt|;
name|Path
name|f
init|=
name|writeFile
argument_list|(
name|localfs
argument_list|,
name|filename
argument_list|)
decl_stmt|;
try|try
block|{
name|FsPermission
name|initialPermission
init|=
name|getPermission
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|filename
operator|+
literal|": "
operator|+
name|initialPermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|initialPermission
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|// create files and manipulate them.
name|FsPermission
name|all
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|FsPermission
name|none
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|localfs
operator|.
name|setPermission
argument_list|(
name|f
argument_list|,
name|none
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|none
argument_list|,
name|getPermission
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|localfs
operator|.
name|setPermission
argument_list|(
name|f
argument_list|,
name|all
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|all
argument_list|,
name|getPermission
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupFile
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPermission (LocalFileSystem fs, Path p)
name|FsPermission
name|getPermission
parameter_list|(
name|LocalFileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getPermission
argument_list|()
return|;
block|}
comment|/** Test LocalFileSystem.setOwner */
DECL|method|testLocalFSsetOwner ()
specifier|public
name|void
name|testLocalFSsetOwner
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test for Windows"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|localfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|"bar"
decl_stmt|;
name|Path
name|f
init|=
name|writeFile
argument_list|(
name|localfs
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
try|try
block|{
name|groups
operator|=
name|getGroups
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|filename
operator|+
literal|": "
operator|+
name|getPermission
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|groups
operator|==
literal|null
operator|||
name|groups
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test: need at least one group.  groups="
operator|+
name|groups
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create files and manipulate them.
try|try
block|{
name|String
name|g0
init|=
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|localfs
operator|.
name|setOwner
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|g0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|g0
argument_list|,
name|getGroup
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|groups
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|g1
init|=
name|groups
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|localfs
operator|.
name|setOwner
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|g1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|g1
argument_list|,
name|getGroup
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Not testing changing the group since user "
operator|+
literal|"belongs to only one group."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanupFile
argument_list|(
name|localfs
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroups ()
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getGroupsCommand
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|s
argument_list|)
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|a
operator|.
name|add
argument_list|(
name|t
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|getGroup (LocalFileSystem fs, Path p)
name|String
name|getGroup
parameter_list|(
name|LocalFileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getGroup
argument_list|()
return|;
block|}
block|}
end_class

end_unit

