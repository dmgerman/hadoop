begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
DECL|class|TestWebDelegationToken
specifier|public
class|class
name|TestWebDelegationToken
block|{
DECL|field|OK_USER
specifier|private
specifier|static
specifier|final
name|String
name|OK_USER
init|=
literal|"ok-user"
decl_stmt|;
DECL|field|FAIL_USER
specifier|private
specifier|static
specifier|final
name|String
name|FAIL_USER
init|=
literal|"fail-user"
decl_stmt|;
DECL|field|FOO_USER
specifier|private
specifier|static
specifier|final
name|String
name|FOO_USER
init|=
literal|"foo"
decl_stmt|;
DECL|field|jetty
specifier|private
name|Server
name|jetty
decl_stmt|;
DECL|class|DummyAuthenticationHandler
specifier|public
specifier|static
class|class
name|DummyAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|managementOperation (AuthenticationToken token, HttpServletRequest request, HttpServletResponse response)
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"authenticated"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
operator|new
name|AuthenticationToken
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"authenticated"
argument_list|)
argument_list|,
literal|"U"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|KerberosAuthenticator
operator|.
name|WWW_AUTHENTICATE
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
block|}
DECL|class|DummyDelegationTokenAuthenticationHandler
specifier|public
specifier|static
class|class
name|DummyDelegationTokenAuthenticationHandler
extends|extends
name|DelegationTokenAuthenticationHandler
block|{
DECL|method|DummyDelegationTokenAuthenticationHandler ()
specifier|public
name|DummyDelegationTokenAuthenticationHandler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|DummyAuthenticationHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Properties config)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|TOKEN_KIND
argument_list|,
literal|"token-kind"
argument_list|)
expr_stmt|;
name|initTokenManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AFilter
specifier|public
specifier|static
class|class
name|AFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|DummyDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
DECL|class|PingServlet
specifier|public
specifier|static
class|class
name|PingServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|getHeader
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_TOKEN_HEADER
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|resp
operator|.
name|setHeader
argument_list|(
literal|"UsingHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|getQueryString
argument_list|()
operator|!=
literal|null
operator|&&
name|req
operator|.
name|getQueryString
argument_list|()
operator|.
name|contains
argument_list|(
name|DelegationTokenAuthenticator
operator|.
name|DELEGATION_PARAM
operator|+
literal|"="
argument_list|)
condition|)
block|{
name|resp
operator|.
name|setHeader
argument_list|(
literal|"UsingQueryString"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doPost (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Writer
name|writer
init|=
name|resp
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"ping: "
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|req
operator|.
name|getReader
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJettyServer ()
specifier|protected
name|Server
name|createJettyServer
parameter_list|()
block|{
try|try
block|{
name|jetty
operator|=
operator|new
name|Server
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ServerConnector
operator|)
name|jetty
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
return|return
name|jetty
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not setup Jetty: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getJettyURL ()
specifier|protected
name|String
name|getJettyURL
parameter_list|()
block|{
name|ServerConnector
name|c
init|=
operator|(
name|ServerConnector
operator|)
name|jetty
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
return|return
literal|"http://"
operator|+
name|c
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|c
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// resetting hadoop security to simple
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jetty
operator|=
name|createJettyServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// resetting hadoop security to simple
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getJetty ()
specifier|protected
name|Server
name|getJetty
parameter_list|()
block|{
return|return
name|jetty
return|;
block|}
annotation|@
name|Test
DECL|method|testRawHttpCalls ()
specifier|public
name|void
name|testRawHttpCalls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|AFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|PingServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|URL
name|nonAuthURL
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|URL
name|authURL
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar?authenticated=foo"
argument_list|)
decl_stmt|;
comment|// unauthenticated access to URL
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|nonAuthURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// authenticated access to URL
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|authURL
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// unauthenticated access to get delegation token
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|nonAuthURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"?op=GETDELEGATIONTOKEN"
argument_list|)
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// authenticated access to get delegation token
name|url
operator|=
operator|new
name|URL
argument_list|(
name|authURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"&op=GETDELEGATIONTOKEN&renewer=foo"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|Map
name|map
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|dt
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"Token"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dt
argument_list|)
expr_stmt|;
comment|// delegation token access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|nonAuthURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"?delegation="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// delegation token and authenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|authURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"&delegation="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// renewew delegation token, unauthenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|nonAuthURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"?op=RENEWDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// renewew delegation token, authenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|authURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"&op=RENEWDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// renewew delegation token, authenticated access to URL, not renewer
name|url
operator|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar?authenticated=bar&op=RENEWDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// cancel delegation token, nonauthenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|nonAuthURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"?op=CANCELDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// cancel canceled delegation token, nonauthenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|nonAuthURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"?op=CANCELDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// get new delegation token
name|url
operator|=
operator|new
name|URL
argument_list|(
name|authURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"&op=GETDELEGATIONTOKEN&renewer=foo"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|map
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
name|dt
operator|=
call|(
name|String
call|)
argument_list|(
operator|(
name|Map
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"Token"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dt
argument_list|)
expr_stmt|;
comment|// cancel delegation token, authenticated access to URL
name|url
operator|=
operator|new
name|URL
argument_list|(
name|authURL
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"&op=CANCELDELEGATIONTOKEN&token="
operator|+
name|dt
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAuthenticatorCallsWithHeader ()
specifier|public
name|void
name|testDelegationTokenAuthenticatorCallsWithHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenAuthenticatorCalls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAuthenticatorCallsWithQueryString ()
specifier|public
name|void
name|testDelegationTokenAuthenticatorCallsWithQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenAuthenticatorCalls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegationTokenAuthenticatorCalls (final boolean useQS)
specifier|private
name|void
name|testDelegationTokenAuthenticatorCalls
parameter_list|(
specifier|final
name|boolean
name|useQS
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|AFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|PingServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|nonAuthURL
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|URL
name|authURL
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar?authenticated=foo"
argument_list|)
decl_stmt|;
name|URL
name|authURL2
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar?authenticated=bar"
argument_list|)
decl_stmt|;
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
name|aUrl
operator|.
name|setUseQueryStringForDelegationToken
argument_list|(
name|useQS
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|nonAuthURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token-kind"
argument_list|)
argument_list|,
name|token
operator|.
name|getDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|nonAuthURL
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|authURL2
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"403"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|cancelDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|cancelDelegationToken
argument_list|(
name|nonAuthURL
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|nonAuthURL
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"401"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|nonAuthURL
argument_list|,
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useQS
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"UsingHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"UsingQueryString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"UsingHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"UsingQueryString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DummyDelegationTokenSecretManager
specifier|private
specifier|static
class|class
name|DummyDelegationTokenSecretManager
extends|extends
name|AbstractDelegationTokenSecretManager
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|method|DummyDelegationTokenSecretManager ()
specifier|public
name|DummyDelegationTokenSecretManager
parameter_list|()
block|{
name|super
argument_list|(
literal|10000
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|DelegationTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"fooKind"
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalDelegationTokenSecretManager ()
specifier|public
name|void
name|testExternalDelegationTokenSecretManager
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyDelegationTokenSecretManager
name|secretMgr
init|=
operator|new
name|DummyDelegationTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|AFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|PingServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|secretMgr
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|DelegationTokenAuthenticationFilter
operator|.
name|DELEGATION_TOKEN_SECRET_MANAGER_ATTR
argument_list|,
name|secretMgr
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|URL
name|authURL
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar?authenticated=foo"
argument_list|)
decl_stmt|;
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|authURL
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"fooKind"
argument_list|)
argument_list|,
name|token
operator|.
name|getDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|secretMgr
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NoDTFilter
specifier|public
specifier|static
class|class
name|NoDTFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|PseudoAuthenticationHandler
operator|.
name|TYPE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
DECL|class|NoDTHandlerDTAFilter
specifier|public
specifier|static
class|class
name|NoDTHandlerDTAFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|PseudoAuthenticationHandler
operator|.
name|TYPE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
DECL|class|UserServlet
specifier|public
specifier|static
class|class
name|UserServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|req
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAuthenticationURLWithNoDTFilter ()
specifier|public
name|void
name|testDelegationTokenAuthenticationURLWithNoDTFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenAuthenticatedURLWithNoDT
argument_list|(
name|NoDTFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenAuthenticationURLWithNoDTHandler ()
specifier|public
name|void
name|testDelegationTokenAuthenticationURLWithNoDTHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenAuthenticatedURLWithNoDT
argument_list|(
name|NoDTHandlerDTAFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// we are, also, implicitly testing  KerberosDelegationTokenAuthenticator
comment|// fallback here
DECL|method|testDelegationTokenAuthenticatedURLWithNoDT ( Class<? extends Filter> filterClass)
specifier|private
name|void
name|testDelegationTokenAuthenticatedURLWithNoDT
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Filter
argument_list|>
name|filterClass
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|filterClass
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UserServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|FOO_USER
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FOO_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"delegation token operation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|PseudoDTAFilter
specifier|public
specifier|static
class|class
name|PseudoDTAFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|PseudoDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|DelegationTokenAuthenticationHandler
operator|.
name|TOKEN_KIND
argument_list|,
literal|"token-kind"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getProxyuserConfiguration ( FilterConfig filterConfig)
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|getProxyuserConfiguration
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"proxyuser.foo.users"
argument_list|,
name|OK_USER
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"proxyuser.foo.hosts"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFallbackToPseudoDelegationTokenAuthenticator ()
specifier|public
name|void
name|testFallbackToPseudoDelegationTokenAuthenticator
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|PseudoDTAFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UserServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|FOO_USER
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FOO_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token-kind"
argument_list|)
argument_list|,
name|token
operator|.
name|getDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|KDTAFilter
specifier|public
specifier|static
class|class
name|KDTAFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
DECL|field|keytabFile
specifier|static
name|String
name|keytabFile
decl_stmt|;
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|AUTH_TYPE
argument_list|,
name|KerberosDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|keytabFile
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setProperty
argument_list|(
name|KerberosDelegationTokenAuthenticationHandler
operator|.
name|TOKEN_KIND
argument_list|,
literal|"token-kind"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getProxyuserConfiguration ( FilterConfig filterConfig)
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|getProxyuserConfiguration
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"proxyuser.client.users"
argument_list|,
name|OK_USER
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"proxyuser.client.hosts"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
DECL|class|KerberosConfiguration
specifier|private
specifier|static
class|class
name|KerberosConfiguration
extends|extends
name|Configuration
block|{
DECL|field|principal
specifier|private
name|String
name|principal
decl_stmt|;
DECL|field|keytab
specifier|private
name|String
name|keytab
decl_stmt|;
DECL|method|KerberosConfiguration (String principal, String keytab)
specifier|public
name|KerberosConfiguration
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytab
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keytab
operator|=
name|keytab
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"useTicketCache"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"renewTGT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"isInitiator"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|ticketCache
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KRB5CCNAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticketCache
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
literal|"ticketCache"
argument_list|,
name|ticketCache
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|KerberosUtil
operator|.
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|options
argument_list|)
block|,}
return|;
block|}
block|}
DECL|method|doAsKerberosUser (String principal, String keytab, final Callable<T> callable)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsKerberosUser
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytab
parameter_list|,
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|LoginContext
name|loginContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|loginContext
operator|=
operator|new
name|LoginContext
argument_list|(
literal|""
argument_list|,
name|subject
argument_list|,
literal|null
argument_list|,
operator|new
name|KerberosConfiguration
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
name|subject
operator|=
name|loginContext
operator|.
name|getSubject
argument_list|()
expr_stmt|;
return|return
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
operator|.
name|getException
argument_list|()
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|loginContext
operator|!=
literal|null
condition|)
block|{
name|loginContext
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testKerberosDelegationTokenAuthenticator ()
specifier|public
name|void
name|testKerberosDelegationTokenAuthenticator
parameter_list|()
throws|throws
name|Exception
block|{
name|testKerberosDelegationTokenAuthenticator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKerberosDelegationTokenAuthenticatorWithDoAs ()
specifier|public
name|void
name|testKerberosDelegationTokenAuthenticatorWithDoAs
parameter_list|()
throws|throws
name|Exception
block|{
name|testKerberosDelegationTokenAuthenticator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testKerberosDelegationTokenAuthenticator ( final boolean doAs)
specifier|private
name|void
name|testKerberosDelegationTokenAuthenticator
parameter_list|(
specifier|final
name|boolean
name|doAs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|doAsUser
init|=
name|doAs
condition|?
name|OK_USER
else|:
literal|null
decl_stmt|;
comment|// setting hadoop security to kerberos
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
literal|"target/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|MiniKdc
name|kdc
init|=
operator|new
name|MiniKdc
argument_list|(
name|MiniKdc
operator|.
name|createConf
argument_list|()
argument_list|,
name|testDir
argument_list|)
decl_stmt|;
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|KDTAFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UserServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
literal|"client"
argument_list|,
literal|"HTTP/localhost"
argument_list|)
expr_stmt|;
name|KDTAFilter
operator|.
name|keytabFile
operator|=
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
try|try
block|{
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"GSSException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doAsKerberosUser
argument_list|(
literal|"client"
argument_list|,
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAs
condition|?
name|doAsUser
else|:
literal|"client"
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token-kind"
argument_list|)
argument_list|,
name|token
operator|.
name|getDelegationToken
argument_list|()
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the token belongs to the right owner
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token-kind"
argument_list|)
argument_list|)
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doAs
condition|?
operator|new
name|Text
argument_list|(
name|OK_USER
argument_list|)
else|:
operator|new
name|Text
argument_list|(
literal|"client"
argument_list|)
argument_list|,
name|id
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAs
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"client"
argument_list|)
argument_list|,
name|id
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|aUrl
operator|.
name|renewDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"403"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|aUrl
operator|.
name|cancelDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyUser ()
specifier|public
name|void
name|testProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|PseudoDTAFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UserServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
comment|// proxyuser using raw HTTP, verifying doAs is case insensitive
name|String
name|strUrl
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s?user.name=%s&doas=%s"
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|FOO_USER
argument_list|,
name|OK_USER
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|strUrl
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OK_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|strUrl
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s?user.name=%s&DOAS=%s"
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|FOO_USER
argument_list|,
name|OK_USER
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|strUrl
argument_list|)
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OK_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|FOO_USER
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// proxyuser using authentication handler authentication
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|OK_USER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OK_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// unauthorized proxy user using authentication handler authentication
name|conn
operator|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FAIL_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// proxy using delegation token authentication
name|aUrl
operator|.
name|getDelegationToken
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|FOO_USER
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
comment|// requests using delegation token as auth do not honor doAs
name|conn
operator|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|OK_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FOO_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|UGIServlet
specifier|public
specifier|static
class|class
name|UGIServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|String
name|ret
init|=
literal|"remoteuser="
operator|+
name|req
operator|.
name|getRemoteUser
argument_list|()
operator|+
literal|":ugi="
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|ret
operator|=
literal|"realugi="
operator|+
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|":"
operator|+
name|ret
expr_stmt|;
block|}
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testHttpUGI ()
specifier|public
name|void
name|testHttpUGI
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|PseudoDTAFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UGIServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|FOO_USER
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// user foo
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"remoteuser="
operator|+
name|FOO_USER
operator|+
literal|":ugi="
operator|+
name|FOO_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// user ok-user via proxyuser foo
name|conn
operator|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|OK_USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"realugi="
operator|+
name|FOO_USER
operator|+
literal|":remoteuser="
operator|+
name|OK_USER
operator|+
literal|":ugi="
operator|+
name|OK_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|IpAddressBasedPseudoDTAFilter
specifier|public
specifier|static
class|class
name|IpAddressBasedPseudoDTAFilter
extends|extends
name|PseudoDTAFilter
block|{
annotation|@
name|Override
DECL|method|getProxyuserConfiguration (FilterConfig filterConfig)
specifier|protected
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|getProxyuserConfiguration
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|configuration
init|=
name|super
operator|.
name|getProxyuserConfiguration
argument_list|(
name|filterConfig
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"proxyuser.foo.hosts"
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIpaddressCheck ()
specifier|public
name|void
name|testIpaddressCheck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|jetty
init|=
name|createJettyServer
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterHolder
argument_list|(
name|IpAddressBasedPseudoDTAFilter
operator|.
name|class
argument_list|)
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|DispatcherType
operator|.
name|REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|UGIServlet
operator|.
name|class
argument_list|)
argument_list|,
literal|"/bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getJettyURL
argument_list|()
operator|+
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|FOO_USER
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|DelegationTokenAuthenticatedURL
name|aUrl
init|=
operator|new
name|DelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// user ok-user via proxyuser foo
name|HttpURLConnection
name|conn
init|=
name|aUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|,
name|OK_USER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"realugi="
operator|+
name|FOO_USER
operator|+
literal|":remoteuser="
operator|+
name|OK_USER
operator|+
literal|":ugi="
operator|+
name|OK_USER
argument_list|,
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

