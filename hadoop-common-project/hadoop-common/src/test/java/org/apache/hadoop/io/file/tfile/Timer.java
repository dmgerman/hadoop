begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * this class is a time class to   * measure to measure the time   * taken for some event.  */
end_comment

begin_class
DECL|class|Timer
specifier|public
class|class
name|Timer
block|{
DECL|field|startTimeEpoch
name|long
name|startTimeEpoch
decl_stmt|;
DECL|field|finishTimeEpoch
name|long
name|finishTimeEpoch
decl_stmt|;
DECL|method|startTime ()
specifier|public
name|void
name|startTime
parameter_list|()
throws|throws
name|IOException
block|{
name|startTimeEpoch
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
DECL|method|stopTime ()
specifier|public
name|void
name|stopTime
parameter_list|()
throws|throws
name|IOException
block|{
name|finishTimeEpoch
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
DECL|method|getIntervalMillis ()
specifier|public
name|long
name|getIntervalMillis
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|finishTimeEpoch
operator|-
name|startTimeEpoch
return|;
block|}
DECL|method|printlnWithTimestamp (String message)
specifier|public
name|void
name|printlnWithTimestamp
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatCurrentTime
argument_list|()
operator|+
literal|"  "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|formatTime (long millis)
specifier|public
name|String
name|formatTime
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
name|Time
operator|.
name|formatTime
argument_list|(
name|millis
argument_list|)
return|;
block|}
DECL|method|getIntervalString ()
specifier|public
name|String
name|getIntervalString
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|time
init|=
name|getIntervalMillis
argument_list|()
decl_stmt|;
return|return
name|formatTime
argument_list|(
name|time
argument_list|)
return|;
block|}
DECL|method|formatCurrentTime ()
specifier|public
name|String
name|formatCurrentTime
parameter_list|()
block|{
return|return
name|formatTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

