begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   * Tests string interning {@link StringInterner}  */
end_comment

begin_class
DECL|class|TestStringInterner
specifier|public
class|class
name|TestStringInterner
block|{
comment|/**    * Test different references are returned for any of string     * instances that are equal to each other but not interned.    */
annotation|@
name|Test
DECL|method|testNoIntern ()
specifier|public
name|void
name|testNoIntern
parameter_list|()
block|{
name|String
name|literalABC
init|=
literal|"ABC"
decl_stmt|;
name|String
name|substringABC
init|=
literal|"ABCDE"
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|heapABC
init|=
operator|new
name|String
argument_list|(
literal|"ABC"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|literalABC
argument_list|,
name|substringABC
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|literalABC
argument_list|,
name|heapABC
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|substringABC
argument_list|,
name|heapABC
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the same strong reference is returned for any     * of string instances that are equal to each other.    */
annotation|@
name|Test
DECL|method|testStrongIntern ()
specifier|public
name|void
name|testStrongIntern
parameter_list|()
block|{
name|String
name|strongInternLiteralABC
init|=
name|strongIntern
argument_list|(
literal|"ABC"
argument_list|)
decl_stmt|;
name|String
name|strongInternSubstringABC
init|=
name|strongIntern
argument_list|(
literal|"ABCDE"
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|strongInternHeapABC
init|=
name|strongIntern
argument_list|(
operator|new
name|String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|strongInternLiteralABC
argument_list|,
name|strongInternSubstringABC
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|strongInternLiteralABC
argument_list|,
name|strongInternHeapABC
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|strongInternSubstringABC
argument_list|,
name|strongInternHeapABC
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the same weak reference is returned for any     * of string instances that are equal to each other.    */
annotation|@
name|Test
DECL|method|testWeakIntern ()
specifier|public
name|void
name|testWeakIntern
parameter_list|()
block|{
name|String
name|weakInternLiteralABC
init|=
name|weakIntern
argument_list|(
literal|"ABC"
argument_list|)
decl_stmt|;
name|String
name|weakInternSubstringABC
init|=
name|weakIntern
argument_list|(
literal|"ABCDE"
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|weakInternHeapABC
init|=
name|weakIntern
argument_list|(
operator|new
name|String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|weakInternLiteralABC
argument_list|,
name|weakInternSubstringABC
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|weakInternLiteralABC
argument_list|,
name|weakInternHeapABC
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|weakInternSubstringABC
argument_list|,
name|weakInternHeapABC
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

