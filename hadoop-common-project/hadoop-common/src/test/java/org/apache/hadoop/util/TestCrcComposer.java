begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unittests for CrcComposer.  */
end_comment

begin_class
DECL|class|TestCrcComposer
specifier|public
class|class
name|TestCrcComposer
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
name|DataChecksum
operator|.
name|Type
name|type
init|=
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
decl_stmt|;
DECL|field|checksum
specifier|private
name|DataChecksum
name|checksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|type
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|dataSize
specifier|private
name|int
name|dataSize
init|=
literal|75
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataSize
index|]
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
init|=
literal|10
decl_stmt|;
DECL|field|cellSize
specifier|private
name|int
name|cellSize
init|=
literal|20
decl_stmt|;
DECL|field|fullCrc
specifier|private
name|int
name|fullCrc
decl_stmt|;
DECL|field|crcsByChunk
specifier|private
name|int
index|[]
name|crcsByChunk
decl_stmt|;
DECL|field|crcsByCell
specifier|private
name|int
index|[]
name|crcsByCell
decl_stmt|;
DECL|field|crcBytesByChunk
specifier|private
name|byte
index|[]
name|crcBytesByChunk
decl_stmt|;
DECL|field|crcBytesByCell
specifier|private
name|byte
index|[]
name|crcBytesByCell
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|fullCrc
operator|=
name|getRangeChecksum
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
comment|// 7 chunks of size chunkSize, 1 chunk of size (dataSize % chunkSize).
name|crcsByChunk
operator|=
operator|new
name|int
index|[
literal|8
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
operator|++
name|i
control|)
block|{
name|crcsByChunk
index|[
name|i
index|]
operator|=
name|getRangeChecksum
argument_list|(
name|data
argument_list|,
name|i
operator|*
name|chunkSize
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
name|crcsByChunk
index|[
literal|7
index|]
operator|=
name|getRangeChecksum
argument_list|(
name|data
argument_list|,
operator|(
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
operator|)
operator|*
name|chunkSize
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
comment|// 3 cells of size cellSize, 1 cell of size (dataSize % cellSize).
name|crcsByCell
operator|=
operator|new
name|int
index|[
literal|4
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|crcsByCell
index|[
name|i
index|]
operator|=
name|getRangeChecksum
argument_list|(
name|data
argument_list|,
name|i
operator|*
name|cellSize
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
block|}
name|crcsByCell
index|[
literal|3
index|]
operator|=
name|getRangeChecksum
argument_list|(
name|data
argument_list|,
operator|(
name|crcsByCell
operator|.
name|length
operator|-
literal|1
operator|)
operator|*
name|cellSize
argument_list|,
name|dataSize
operator|%
name|cellSize
argument_list|)
expr_stmt|;
name|crcBytesByChunk
operator|=
name|intArrayToByteArray
argument_list|(
name|crcsByChunk
argument_list|)
expr_stmt|;
name|crcBytesByCell
operator|=
name|intArrayToByteArray
argument_list|(
name|crcsByCell
argument_list|)
expr_stmt|;
block|}
DECL|method|getRangeChecksum (byte[] buf, int offset, int length)
specifier|private
name|int
name|getRangeChecksum
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|intArrayToByteArray (int[] values)
specifier|private
name|byte
index|[]
name|intArrayToByteArray
parameter_list|(
name|int
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|values
operator|.
name|length
operator|*
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|bytes
argument_list|,
name|i
operator|*
literal|4
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Test
DECL|method|testUnstripedIncorrectChunkSize ()
specifier|public
name|void
name|testUnstripedIncorrectChunkSize
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
comment|// If we incorrectly specify that all CRCs ingested correspond to chunkSize
comment|// when the last CRC in the array actually corresponds to
comment|// dataSize % chunkSize then we expect the resulting CRC to not be equal to
comment|// the fullCrc.
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
literal|0
argument_list|,
name|crcBytesByChunk
operator|.
name|length
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|digest
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|calculatedCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|fullCrc
argument_list|,
name|calculatedCrc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnstripedByteArray ()
specifier|public
name|void
name|testUnstripedByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
literal|0
argument_list|,
name|crcBytesByChunk
operator|.
name|length
operator|-
literal|4
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
name|crcBytesByChunk
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|4
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|digest
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|calculatedCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fullCrc
argument_list|,
name|calculatedCrc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnstripedDataInputStream ()
specifier|public
name|void
name|testUnstripedDataInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|DataInputStream
name|input
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|crcBytesByChunk
argument_list|)
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|digest
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|calculatedCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fullCrc
argument_list|,
name|calculatedCrc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnstripedSingleCrcs ()
specifier|public
name|void
name|testUnstripedSingleCrcs
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
name|i
index|]
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|digest
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|calculatedCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fullCrc
argument_list|,
name|calculatedCrc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripedByteArray ()
specifier|public
name|void
name|testStripedByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
literal|0
argument_list|,
name|crcBytesByChunk
operator|.
name|length
operator|-
literal|4
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
name|crcBytesByChunk
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|4
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|crcBytesByCell
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripedDataInputStream ()
specifier|public
name|void
name|testStripedDataInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|DataInputStream
name|input
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|crcBytesByChunk
argument_list|)
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|crcBytesByCell
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStripedSingleCrcs ()
specifier|public
name|void
name|testStripedSingleCrcs
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
name|i
index|]
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
block|}
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|crcBytesByCell
argument_list|,
name|digest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiStageMixed ()
specifier|public
name|void
name|testMultiStageMixed
parameter_list|()
throws|throws
name|IOException
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
comment|// First combine chunks into cells.
name|DataInputStream
name|input
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|crcBytesByChunk
argument_list|)
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
name|crcsByChunk
operator|.
name|length
operator|-
literal|1
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
name|dataSize
operator|%
name|chunkSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
comment|// Second, individually combine cells into full crc.
name|digester
operator|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digest
operator|.
name|length
operator|-
literal|4
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|int
name|cellCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|cellCrc
argument_list|,
name|cellSize
argument_list|)
expr_stmt|;
block|}
name|digester
operator|.
name|update
argument_list|(
name|digest
argument_list|,
name|digest
operator|.
name|length
operator|-
literal|4
argument_list|,
literal|4
argument_list|,
name|dataSize
operator|%
name|cellSize
argument_list|)
expr_stmt|;
name|digest
operator|=
name|digester
operator|.
name|digest
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|digest
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|calculatedCrc
init|=
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|digest
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fullCrc
argument_list|,
name|calculatedCrc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMismatchesStripe ()
specifier|public
name|void
name|testUpdateMismatchesStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newStripedCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
literal|0
index|]
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
comment|// Going from chunkSize to chunkSize + cellSize will cross a cellSize
comment|// boundary in a single CRC, which is not allowed, since we'd lack a
comment|// CRC corresponding to the actual cellSize boundary.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"stripe"
argument_list|,
parameter_list|()
lambda|->
name|digester
operator|.
name|update
argument_list|(
name|crcsByChunk
index|[
literal|1
index|]
argument_list|,
name|cellSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateByteArrayLengthUnalignedWithCrcSize ()
specifier|public
name|void
name|testUpdateByteArrayLengthUnalignedWithCrcSize
parameter_list|()
throws|throws
name|Exception
block|{
name|CrcComposer
name|digester
init|=
name|CrcComposer
operator|.
name|newCrcComposer
argument_list|(
name|type
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"length"
argument_list|,
parameter_list|()
lambda|->
name|digester
operator|.
name|update
argument_list|(
name|crcBytesByChunk
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

