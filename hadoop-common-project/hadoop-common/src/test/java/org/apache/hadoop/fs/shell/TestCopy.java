begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|assertExceptionContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CopyCommands
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|OngoingStubbing
import|;
end_import

begin_class
DECL|class|TestCopy
specifier|public
class|class
name|TestCopy
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|path
specifier|static
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/file"
argument_list|)
decl_stmt|;
DECL|field|tmpPath
specifier|static
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/file._COPYING_"
argument_list|)
decl_stmt|;
DECL|field|cmd
specifier|static
name|Put
name|cmd
decl_stmt|;
DECL|field|mockFs
specifier|static
name|FileSystem
name|mockFs
decl_stmt|;
DECL|field|target
specifier|static
name|PathData
name|target
decl_stmt|;
DECL|field|fileStat
specifier|static
name|FileStatus
name|fileStat
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockFs
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|fileStat
operator|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStat
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetMock ()
specifier|public
name|void
name|resetMock
parameter_list|()
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|CopyCommands
operator|.
name|Put
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyStreamTarget ()
specifier|public
name|void
name|testCopyStreamTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|mock
argument_list|(
name|FSDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|whenFsCreate
argument_list|()
operator|.
name|thenReturn
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSInputStream
name|in
init|=
name|mock
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no data was written.
name|verify
argument_list|(
name|out
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// temp path never had is existence checked. This is critical for S3 as it
comment|// avoids the successful path accidentally getting a 404 into the S3 load
comment|// balancer cache
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyStreamTargetExists ()
specifier|public
name|void
name|testCopyStreamTargetExists
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|mock
argument_list|(
name|FSDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|whenFsCreate
argument_list|()
operator|.
name|thenReturn
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|target
operator|.
name|refreshStatus
argument_list|()
expr_stmt|;
comment|// so it's updated as existing
name|cmd
operator|.
name|setOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSInputStream
name|in
init|=
name|mock
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterruptedCreate ()
specifier|public
name|void
name|testInterruptedCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|whenFsCreate
argument_list|()
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedIOException
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|rename
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a file but fail in the write.    * The copy operation should attempt to clean up by    * closing the output stream then deleting it.    */
annotation|@
name|Test
DECL|method|testFailedWrite ()
specifier|public
name|void
name|testFailedWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|mock
argument_list|(
name|FSDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"mocked"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|out
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|whenFsCreate
argument_list|()
operator|.
name|thenReturn
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|FSInputStream
name|in
init|=
name|mock
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|when
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|thrown
init|=
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertExceptionContains
argument_list|(
literal|"mocked"
argument_list|,
name|thrown
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|rename
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterruptedCopyBytes ()
specifier|public
name|void
name|testInterruptedCopyBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|mock
argument_list|(
name|FSDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|whenFsCreate
argument_list|()
operator|.
name|thenReturn
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|FSInputStream
name|in
init|=
name|mock
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// make IOUtils.copyBytes fail
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedIOException
argument_list|()
argument_list|)
expr_stmt|;
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|rename
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterruptedRename ()
specifier|public
name|void
name|testInterruptedRename
parameter_list|()
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|mock
argument_list|(
name|FSDataOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|whenFsCreate
argument_list|()
operator|.
name|thenReturn
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|InterruptedIOException
argument_list|()
argument_list|)
expr_stmt|;
name|FSInputStream
name|in
init|=
name|mock
argument_list|(
name|FSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tryCopyStream
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|rename
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|whenFsCreate ()
specifier|private
name|OngoingStubbing
argument_list|<
name|FSDataOutputStream
argument_list|>
name|whenFsCreate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|when
argument_list|(
name|mockFs
operator|.
name|create
argument_list|(
name|eq
argument_list|(
name|tmpPath
argument_list|)
argument_list|,
name|any
argument_list|(
name|FsPermission
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyShort
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|tryCopyStream (InputStream in, boolean shouldPass)
specifier|private
name|Throwable
name|tryCopyStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|boolean
name|shouldPass
parameter_list|)
block|{
try|try
block|{
name|cmd
operator|.
name|copyStreamToTarget
argument_list|(
operator|new
name|FSDataInputStream
argument_list|(
name|in
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|shouldPass
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"copy failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|e
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|shouldPass
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|e
return|;
block|}
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

