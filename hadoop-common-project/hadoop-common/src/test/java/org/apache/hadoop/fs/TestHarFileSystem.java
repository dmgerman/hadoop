begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHarFileSystem
specifier|public
class|class
name|TestHarFileSystem
block|{
annotation|@
name|Test
DECL|method|testHarUri ()
specifier|public
name|void
name|testHarUri
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://hdfs-/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://hdfs/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://-hdfs/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://-/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://127.0.0.1-/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkInvalidPath
argument_list|(
literal|"har://127.0.0.1/foo.har"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInvalidPath (String s, Configuration conf)
specifier|static
name|void
name|checkInvalidPath
parameter_list|(
name|String
name|s
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\ncheckInvalidPath: "
operator|+
name|s
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|p
operator|+
literal|" is an invalid path."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GOOD: Got an exception."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileChecksum ()
specifier|public
name|void
name|testFileChecksum
parameter_list|()
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"har://file-localhost/foo.har/file1"
argument_list|)
decl_stmt|;
specifier|final
name|HarFileSystem
name|harfs
init|=
operator|new
name|HarFileSystem
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|harfs
operator|.
name|getFileChecksum
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test how block location offsets and lengths are fixed.    */
annotation|@
name|Test
DECL|method|testFixBlockLocations ()
specifier|public
name|void
name|testFixBlockLocations
parameter_list|()
block|{
comment|// do some tests where start == 0
block|{
comment|// case 1: range starts before current har block and ends after
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 2: range starts in current har block and ends after
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 3: range starts before current har block and ends in
comment|// current har block
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 4: range starts and ends in current har block
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
comment|// now try a range where start == 3
block|{
comment|// case 5: range starts before current har block and ends after
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|3
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 6: range starts in current har block and ends after
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|3
argument_list|,
literal|20
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 7: range starts before current har block and ends in
comment|// current har block
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|{
comment|// case 8: range starts and ends in current har block
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// test case from JIRA MAPREDUCE-1752
block|{
name|BlockLocation
index|[]
name|b
init|=
block|{
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|512
argument_list|,
literal|512
argument_list|)
block|,
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1024
argument_list|,
literal|512
argument_list|)
block|}
decl_stmt|;
name|HarFileSystem
operator|.
name|fixBlockLocations
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|512
argument_list|,
literal|896
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|1
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
index|[
literal|1
index|]
operator|.
name|getLength
argument_list|()
argument_list|,
literal|384
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

