begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMove
specifier|public
class|class
name|TestMove
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockFs
specifier|static
name|FileSystem
name|mockFs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|mockFs
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetMock ()
specifier|public
name|void
name|resetMock
parameter_list|()
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveTargetExistsWithoutExplicitRename ()
specifier|public
name|void
name|testMoveTargetExistsWithoutExplicitRename
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/file"
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/fold0"
argument_list|)
decl_stmt|;
name|Path
name|dupPath
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/fold0/file"
argument_list|)
decl_stmt|;
name|Path
name|srcPath2
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs://user/file"
argument_list|)
decl_stmt|;
name|Path
name|targetPath2
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs://user/fold0"
argument_list|)
decl_stmt|;
name|Path
name|dupPath2
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs://user/fold0/file"
argument_list|)
decl_stmt|;
name|InstrumentedRenameCommand
name|cmd
decl_stmt|;
name|String
index|[]
name|cmdargs
init|=
operator|new
name|String
index|[]
block|{
literal|"mockfs:/file"
block|,
literal|"mockfs:/fold0"
block|}
decl_stmt|;
name|FileStatus
name|src_fileStat
decl_stmt|,
name|target_fileStat
decl_stmt|,
name|dup_fileStat
decl_stmt|;
name|URI
name|myuri
decl_stmt|;
name|src_fileStat
operator|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|target_fileStat
operator|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|dup_fileStat
operator|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|myuri
operator|=
operator|new
name|URI
argument_list|(
literal|"mockfs://user"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|src_fileStat
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|target_fileStat
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dup_fileStat
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|src_fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|srcPath2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|target_fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|targetPath2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dup_fileStat
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dupPath2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|srcPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|src_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|targetPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|target_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|dupPath
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dup_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|srcPath2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|src_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|targetPath2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|target_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|dupPath2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dup_fileStat
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|myuri
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|InstrumentedRenameCommand
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|run
argument_list|(
name|cmdargs
argument_list|)
expr_stmt|;
comment|// make sure command failed with the proper exception
name|assertTrue
argument_list|(
literal|"Rename should have failed with path exists exception"
argument_list|,
name|cmd
operator|.
name|error
operator|instanceof
name|PathExistsException
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
DECL|class|InstrumentedRenameCommand
specifier|private
specifier|static
class|class
name|InstrumentedRenameCommand
extends|extends
name|MoveCommands
operator|.
name|Rename
block|{
DECL|field|NAME
specifier|public
specifier|static
name|String
name|NAME
init|=
literal|"InstrumentedRename"
decl_stmt|;
DECL|field|error
specifier|private
name|Exception
name|error
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|displayError (Exception e)
specifier|public
name|void
name|displayError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

