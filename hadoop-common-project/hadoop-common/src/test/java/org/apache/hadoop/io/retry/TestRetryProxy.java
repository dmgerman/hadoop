begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|RETRY_FOREVER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryByException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryByRemoteException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithProportionalSleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryUpToMaximumTimeWithFixedSleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|exponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|UnreliableInterface
operator|.
name|FatalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|UnreliableInterface
operator|.
name|UnreliableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_class
DECL|class|TestRetryProxy
specifier|public
class|class
name|TestRetryProxy
extends|extends
name|TestCase
block|{
DECL|field|unreliableImpl
specifier|private
name|UnreliableImplementation
name|unreliableImpl
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|unreliableImpl
operator|=
operator|new
name|UnreliableImplementation
argument_list|()
expr_stmt|;
block|}
DECL|method|testTryOnceThenFail ()
specifier|public
name|void
name|testTryOnceThenFail
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|TRY_ONCE_THEN_FAIL
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Test for {@link RetryInvocationHandler#isRpcInvocation(Object)}    */
DECL|method|testRpcInvocation ()
specifier|public
name|void
name|testRpcInvocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// For a proxy method should return true
specifier|final
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|RETRY_FOREVER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|RetryInvocationHandler
operator|.
name|isRpcInvocation
argument_list|(
name|unreliable
argument_list|)
argument_list|)
expr_stmt|;
comment|// Embed the proxy in ProtocolTranslator
name|ProtocolTranslator
name|xlator
init|=
operator|new
name|ProtocolTranslator
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
return|return
name|unreliable
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|count
return|;
block|}
block|}
decl_stmt|;
comment|// For a proxy wrapped in ProtocolTranslator method should return true
name|assertTrue
argument_list|(
name|RetryInvocationHandler
operator|.
name|isRpcInvocation
argument_list|(
name|xlator
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure underlying proxy was looked at
name|assertEquals
argument_list|(
name|xlator
operator|.
name|toString
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// For non-proxy the method must return false
name|assertFalse
argument_list|(
name|RetryInvocationHandler
operator|.
name|isRpcInvocation
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRetryForever ()
specifier|public
name|void
name|testRetryForever
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|RETRY_FOREVER
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsTenTimesThenSucceeds
argument_list|()
expr_stmt|;
block|}
DECL|method|testRetryUpToMaximumCountWithFixedSleep ()
specifier|public
name|void
name|testRetryUpToMaximumCountWithFixedSleep
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|failsTenTimesThenSucceeds
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testRetryUpToMaximumTimeWithFixedSleep ()
specifier|public
name|void
name|testRetryUpToMaximumTimeWithFixedSleep
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|retryUpToMaximumTimeWithFixedSleep
argument_list|(
literal|80
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|failsTenTimesThenSucceeds
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testRetryUpToMaximumCountWithProportionalSleep ()
specifier|public
name|void
name|testRetryUpToMaximumCountWithProportionalSleep
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|retryUpToMaximumCountWithProportionalSleep
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|failsTenTimesThenSucceeds
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testExponentialRetry ()
specifier|public
name|void
name|testExponentialRetry
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|exponentialBackoffRetry
argument_list|(
literal|5
argument_list|,
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|alwaysSucceeds
argument_list|()
expr_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|failsTenTimesThenSucceeds
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testRetryByException ()
specifier|public
name|void
name|testRetryByException
parameter_list|()
throws|throws
name|UnreliableException
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
name|Collections
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
condition|,
name|RetryPolicy
operator|>
name|singletonMap
argument_list|(
name|FatalException
operator|.
name|class
argument_list|,
name|TRY_ONCE_THEN_FAIL
argument_list|)
decl_stmt|;
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|retryByException
argument_list|(
name|RETRY_FOREVER
argument_list|,
name|exceptionToPolicyMap
argument_list|)
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|failsOnceThenSucceeds
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|alwaysFailsWithFatalException
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FatalException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testRetryByRemoteException ()
specifier|public
name|void
name|testRetryByRemoteException
parameter_list|()
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
name|Collections
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
condition|,
name|RetryPolicy
operator|>
name|singletonMap
argument_list|(
name|FatalException
operator|.
name|class
argument_list|,
name|TRY_ONCE_THEN_FAIL
argument_list|)
decl_stmt|;
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|unreliableImpl
argument_list|,
name|retryByRemoteException
argument_list|(
name|RETRY_FOREVER
argument_list|,
name|exceptionToPolicyMap
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|unreliable
operator|.
name|alwaysFailsWithRemoteFatalException
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

