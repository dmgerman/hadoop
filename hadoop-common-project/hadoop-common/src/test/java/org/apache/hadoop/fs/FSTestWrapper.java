begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|CreateOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_comment
comment|/**  * Abstraction of filesystem functionality with additional helper methods  * commonly used in tests. This allows generic tests to be written which apply  * to the two filesystem abstractions in Hadoop: {@link FileSystem} and  * {@link FileContext}.  */
end_comment

begin_class
DECL|class|FSTestWrapper
specifier|public
specifier|abstract
class|class
name|FSTestWrapper
implements|implements
name|FSWrapper
block|{
comment|//
comment|// Test helper methods taken from FileContextTestHelper
comment|//
DECL|field|DEFAULT_BLOCK_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_NUM_BLOCKS
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_BLOCKS
init|=
literal|2
decl_stmt|;
DECL|field|testRootDir
specifier|protected
name|String
name|testRootDir
init|=
literal|null
decl_stmt|;
DECL|field|absTestRootDir
specifier|protected
name|String
name|absTestRootDir
init|=
literal|null
decl_stmt|;
DECL|method|FSTestWrapper (String testRootDir)
specifier|public
name|FSTestWrapper
parameter_list|(
name|String
name|testRootDir
parameter_list|)
block|{
comment|// Use default test dir if not provided
if|if
condition|(
name|testRootDir
operator|==
literal|null
operator|||
name|testRootDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|testRootDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
comment|// salt test dir with some random digits for safe parallel runs
name|this
operator|.
name|testRootDir
operator|=
name|testRootDir
operator|+
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileData (int numOfBlocks, long blockSize)
specifier|public
specifier|static
name|byte
index|[]
name|getFileData
parameter_list|(
name|int
name|numOfBlocks
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|numOfBlocks
operator|*
name|blockSize
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|getTestRootPath ()
specifier|public
name|Path
name|getTestRootPath
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTestRootPath (String pathString)
specifier|public
name|Path
name|getTestRootPath
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|pathString
argument_list|)
argument_list|)
return|;
block|}
comment|// the getAbsolutexxx method is needed because the root test dir
comment|// can be messed up by changing the working dir.
DECL|method|getAbsoluteTestRootDir ()
specifier|public
name|String
name|getAbsoluteTestRootDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|absTestRootDir
operator|==
literal|null
condition|)
block|{
name|Path
name|testRootPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|testRootPath
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|absTestRootDir
operator|=
name|testRootDir
expr_stmt|;
block|}
else|else
block|{
name|absTestRootDir
operator|=
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|testRootDir
expr_stmt|;
block|}
block|}
return|return
name|absTestRootDir
return|;
block|}
DECL|method|getAbsoluteTestRootPath ()
specifier|public
name|Path
name|getAbsoluteTestRootPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getAbsoluteTestRootDir
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLocalFSWrapper ()
specifier|abstract
specifier|public
name|FSTestWrapper
name|getLocalFSWrapper
parameter_list|()
throws|throws
name|UnsupportedFileSystemException
throws|,
name|IOException
function_decl|;
DECL|method|getDefaultWorkingDirectory ()
specifier|abstract
specifier|public
name|Path
name|getDefaultWorkingDirectory
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/*    * Create files with numBlocks blocks each with block size blockSize.    */
DECL|method|createFile (Path path, int numBlocks, CreateOpts... options)
specifier|abstract
specifier|public
name|long
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|CreateOpts
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createFile (Path path, int numBlocks, int blockSize)
specifier|abstract
specifier|public
name|long
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createFile (Path path)
specifier|abstract
specifier|public
name|long
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createFile (String name)
specifier|abstract
specifier|public
name|long
name|createFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createFileNonRecursive (String name)
specifier|abstract
specifier|public
name|long
name|createFileNonRecursive
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createFileNonRecursive (Path path)
specifier|abstract
specifier|public
name|long
name|createFileNonRecursive
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|appendToFile (Path path, int numBlocks, CreateOpts... options)
specifier|abstract
specifier|public
name|void
name|appendToFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|CreateOpts
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|exists (Path p)
specifier|abstract
specifier|public
name|boolean
name|exists
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isFile (Path p)
specifier|abstract
specifier|public
name|boolean
name|isFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isDir (Path p)
specifier|abstract
specifier|public
name|boolean
name|isDir
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isSymlink (Path p)
specifier|abstract
specifier|public
name|boolean
name|isSymlink
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|writeFile (Path path, byte b[])
specifier|abstract
specifier|public
name|void
name|writeFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readFile (Path path, int len)
specifier|abstract
specifier|public
name|byte
index|[]
name|readFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|containsPath (Path path, FileStatus[] dirList)
specifier|abstract
specifier|public
name|FileStatus
name|containsPath
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileStatus
index|[]
name|dirList
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|containsPath (String path, FileStatus[] dirList)
specifier|abstract
specifier|public
name|FileStatus
name|containsPath
parameter_list|(
name|String
name|path
parameter_list|,
name|FileStatus
index|[]
name|dirList
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|enum|fileType
enum|enum
name|fileType
block|{
DECL|enumConstant|isDir
DECL|enumConstant|isFile
DECL|enumConstant|isSymlink
name|isDir
block|,
name|isFile
block|,
name|isSymlink
block|}
empty_stmt|;
DECL|method|checkFileStatus (String path, fileType expectedType)
specifier|abstract
specifier|public
name|void
name|checkFileStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|fileType
name|expectedType
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|checkFileLinkStatus (String path, fileType expectedType)
specifier|abstract
specifier|public
name|void
name|checkFileLinkStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|fileType
name|expectedType
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

