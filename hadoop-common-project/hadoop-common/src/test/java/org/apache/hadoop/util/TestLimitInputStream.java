begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestLimitInputStream
specifier|public
class|class
name|TestLimitInputStream
extends|extends
name|HadoopTestBase
block|{
DECL|class|RandomInputStream
specifier|static
class|class
name|RandomInputStream
extends|extends
name|InputStream
block|{
DECL|field|rn
specifier|private
name|Random
name|rn
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
block|{
return|return
name|rn
operator|.
name|nextInt
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|LimitInputStream
name|limitInputStream
init|=
operator|new
name|LimitInputStream
argument_list|(
operator|new
name|RandomInputStream
argument_list|()
argument_list|,
literal|0
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Reading byte after reaching limit should return -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|limitInputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|LimitInputStream
name|limitInputStream
init|=
operator|new
name|LimitInputStream
argument_list|(
operator|new
name|RandomInputStream
argument_list|()
argument_list|,
literal|4
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect byte returned"
argument_list|,
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
operator|.
name|nextInt
argument_list|()
argument_list|,
name|limitInputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testResetWithoutMark ()
specifier|public
name|void
name|testResetWithoutMark
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|LimitInputStream
name|limitInputStream
init|=
operator|new
name|LimitInputStream
argument_list|(
operator|new
name|RandomInputStream
argument_list|()
argument_list|,
literal|128
argument_list|)
init|)
block|{
name|limitInputStream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadBytes ()
specifier|public
name|void
name|testReadBytes
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|LimitInputStream
name|limitInputStream
init|=
operator|new
name|LimitInputStream
argument_list|(
operator|new
name|RandomInputStream
argument_list|()
argument_list|,
literal|128
argument_list|)
init|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|byte
index|[]
name|expected
init|=
block|{
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
block|,
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
block|,
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
block|,
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
block|}
decl_stmt|;
name|limitInputStream
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Incorrect bytes returned"
argument_list|,
name|expected
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

