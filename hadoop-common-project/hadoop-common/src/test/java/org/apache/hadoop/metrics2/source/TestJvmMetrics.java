begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.source
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetricsInfo
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestJvmMetrics
specifier|public
class|class
name|TestJvmMetrics
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
DECL|field|pauseMonitor
specifier|private
name|JvmPauseMonitor
name|pauseMonitor
decl_stmt|;
comment|/**    * Robust shutdown of the pause monitor if it hasn't been stopped already.    */
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|pauseMonitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPresence ()
specifier|public
name|void
name|testPresence
parameter_list|()
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|JvmMetrics
name|jvmMetrics
init|=
operator|new
name|JvmMetrics
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|jvmMetrics
operator|.
name|setPauseMonitor
argument_list|(
name|pauseMonitor
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|jvmMetrics
argument_list|)
decl_stmt|;
name|MetricsCollector
name|mc
init|=
name|rb
operator|.
name|parent
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|mc
argument_list|)
operator|.
name|addRecord
argument_list|(
name|JvmMetrics
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|tag
argument_list|(
name|ProcessName
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|tag
argument_list|(
name|SessionId
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|JvmMetricsInfo
name|info
range|:
name|JvmMetricsInfo
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Mem"
argument_list|)
condition|)
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|)
argument_list|,
name|anyFloat
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|info
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Gc"
argument_list|)
condition|)
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|eq
argument_list|(
name|info
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|info
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Threads"
argument_list|)
condition|)
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|info
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Log"
argument_list|)
condition|)
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|eq
argument_list|(
name|info
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoubleStop ()
specifier|public
name|void
name|testDoubleStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleStart ()
specifier|public
name|void
name|testDoubleStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopBeforeStart ()
specifier|public
name|void
name|testStopBeforeStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
try|try
block|{
name|pauseMonitor
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|pauseMonitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cannot enter state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStopBeforeInit ()
specifier|public
name|void
name|testStopBeforeInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|pauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
try|try
block|{
name|pauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|pauseMonitor
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected an exception, got "
operator|+
name|pauseMonitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"cannot enter state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

