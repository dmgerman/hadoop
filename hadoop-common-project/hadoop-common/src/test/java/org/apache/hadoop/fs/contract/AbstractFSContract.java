begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Class representing a filesystem contract that a filesystem  * implementation is expected implement.  *  * Part of this contract class is to allow FS implementations to  * provide specific opt outs and limits, so that tests can be  * skip unsupported features (e.g. case sensitivity tests),  * dangerous operations (e.g. trying to delete the root directory),  * and limit filesize and other numeric variables for scale tests  */
end_comment

begin_class
DECL|class|AbstractFSContract
specifier|public
specifier|abstract
class|class
name|AbstractFSContract
extends|extends
name|Configured
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractFSContract
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
comment|/**    * Constructor: loads the authentication keys if found    * @param conf configuration to work with    */
DECL|method|AbstractFSContract (Configuration conf)
specifier|protected
name|AbstractFSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|maybeAddConfResource
argument_list|(
name|ContractOptions
operator|.
name|CONTRACT_OPTIONS_RESOURCE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded authentication keys from {}"
argument_list|,
name|ContractOptions
operator|.
name|CONTRACT_OPTIONS_RESOURCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not loaded: {}"
argument_list|,
name|ContractOptions
operator|.
name|CONTRACT_OPTIONS_RESOURCE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Any initialisation logic can go here    * @throws IOException IO problems    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{    }
comment|/**    * Add a configuration resource to this instance's configuration    * @param resource resource reference    * @throws AssertionError if the resource was not found.    */
DECL|method|addConfResource (String resource)
specifier|protected
name|void
name|addConfResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|boolean
name|found
init|=
name|maybeAddConfResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Resource not found "
operator|+
name|resource
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a configuration resource to this instance's configuration,    * return true if the resource was found    * @param resource resource reference    */
DECL|method|maybeAddConfResource (String resource)
specifier|protected
name|boolean
name|maybeAddConfResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|URL
name|url
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
name|url
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|found
condition|)
block|{
name|getConf
argument_list|()
operator|.
name|addResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
comment|/**    * Get the FS from a URI. The default implementation just retrieves    * it from the norrmal FileSystem factory/cache, with the local configuration    * @param uri URI of FS    * @return the filesystem    * @throws IOException IO problems    */
DECL|method|getFileSystem (URI uri)
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the filesystem for these tests    * @return the test fs    * @throws IOException IO problems    */
DECL|method|getTestFileSystem ()
specifier|public
specifier|abstract
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the scheme of this FS    * @return the scheme this FS supports    */
DECL|method|getScheme ()
specifier|public
specifier|abstract
name|String
name|getScheme
parameter_list|()
function_decl|;
comment|/**    * Return the path string for tests, e.g.<code>file:///tmp</code>    * @return a path in the test FS    */
DECL|method|getTestPath ()
specifier|public
specifier|abstract
name|Path
name|getTestPath
parameter_list|()
function_decl|;
comment|/**    * Boolean to indicate whether or not the contract test are enabled    * for this test run.    * @return true if the tests can be run.    */
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**    * Boolean to indicate whether or not the contract test are enabled    * for this test run.    * @param enabled flag which must be true if the tests can be run.    */
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
comment|/**    * Query for a feature being supported. This may include a probe for the feature    *    * @param feature feature to query    * @param defval default value    * @return true if the feature is supported    */
DECL|method|isSupported (String feature, boolean defval)
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|String
name|feature
parameter_list|,
name|boolean
name|defval
parameter_list|)
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|getConfKey
argument_list|(
name|feature
argument_list|)
argument_list|,
name|defval
argument_list|)
return|;
block|}
comment|/**    * Query for a feature's limit. This may include a probe for the feature    *    * @param feature feature to query    * @param defval default value    * @return true if the feature is supported    */
DECL|method|getLimit (String feature, int defval)
specifier|public
name|int
name|getLimit
parameter_list|(
name|String
name|feature
parameter_list|,
name|int
name|defval
parameter_list|)
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|getConfKey
argument_list|(
name|feature
argument_list|)
argument_list|,
name|defval
argument_list|)
return|;
block|}
DECL|method|getOption (String feature, String defval)
specifier|public
name|String
name|getOption
parameter_list|(
name|String
name|feature
parameter_list|,
name|String
name|defval
parameter_list|)
block|{
return|return
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|getConfKey
argument_list|(
name|feature
argument_list|)
argument_list|,
name|defval
argument_list|)
return|;
block|}
comment|/**    * Build a configuration key    * @param feature feature to query    * @return the configuration key base with the feature appended    */
DECL|method|getConfKey (String feature)
specifier|public
name|String
name|getConfKey
parameter_list|(
name|String
name|feature
parameter_list|)
block|{
return|return
name|ContractOptions
operator|.
name|FS_CONTRACT_KEY
operator|+
name|feature
return|;
block|}
comment|/**    * Create a URI off the scheme    * @param path path of URI    * @return a URI    * @throws IOException if the URI could not be created    */
DECL|method|toURI (String path)
specifier|protected
name|URI
name|toURI
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|getScheme
argument_list|()
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|" with "
operator|+
name|path
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FSContract for "
operator|+
name|getScheme
argument_list|()
return|;
block|}
block|}
end_class

end_unit

