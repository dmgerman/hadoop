begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDecompressorStream
specifier|public
class|class
name|TestDecompressorStream
block|{
DECL|field|TEST_STRING
specifier|private
specifier|static
specifier|final
name|String
name|TEST_STRING
init|=
literal|"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
decl_stmt|;
DECL|field|bytesIn
specifier|private
name|ByteArrayInputStream
name|bytesIn
decl_stmt|;
DECL|field|decompressor
specifier|private
name|Decompressor
name|decompressor
decl_stmt|;
DECL|field|decompressorStream
specifier|private
name|DecompressorStream
name|decompressorStream
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|bytesIn
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|decompressor
operator|=
operator|new
name|FakeDecompressor
argument_list|()
expr_stmt|;
name|decompressorStream
operator|=
operator|new
name|DecompressorStream
argument_list|(
name|bytesIn
argument_list|,
name|decompressor
argument_list|,
literal|20
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadOneByte ()
specifier|public
name|void
name|testReadOneByte
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_STRING
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|read
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|TEST_STRING
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|ret
init|=
name|decompressorStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Not reachable but got ret "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Expect EOF exception
block|}
block|}
annotation|@
name|Test
DECL|method|testReadBuffer ()
specifier|public
name|void
name|testReadBuffer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 32 buf.length< 52 TEST_STRING.length()
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|int
name|bytesToRead
init|=
name|TEST_STRING
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesToRead
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|bytesToRead
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|bytesRead
init|=
name|decompressorStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bytesRead
operator|>
literal|0
operator|&&
name|bytesRead
operator|<=
name|n
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
argument_list|,
name|is
argument_list|(
name|TEST_STRING
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
name|bytesRead
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bytesToRead
operator|=
name|bytesToRead
operator|-
name|bytesRead
expr_stmt|;
name|i
operator|=
name|i
operator|+
name|bytesRead
expr_stmt|;
block|}
try|try
block|{
name|int
name|ret
init|=
name|decompressorStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Not reachable but got ret "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Expect EOF exception
block|}
block|}
annotation|@
name|Test
DECL|method|testSkip ()
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|skip
argument_list|(
literal|12
argument_list|)
argument_list|,
name|is
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|read
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|TEST_STRING
operator|.
name|charAt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|read
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|TEST_STRING
operator|.
name|charAt
argument_list|(
literal|13
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|read
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|TEST_STRING
operator|.
name|charAt
argument_list|(
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|skip
argument_list|(
literal|10
argument_list|)
argument_list|,
name|is
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|decompressorStream
operator|.
name|read
argument_list|()
argument_list|,
name|is
argument_list|(
operator|(
name|int
operator|)
name|TEST_STRING
operator|.
name|charAt
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|ret
init|=
name|decompressorStream
operator|.
name|skip
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Not reachable but got ret "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Expect EOF exception
block|}
block|}
block|}
end_class

end_unit

