begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * JUnit test class for {@link org.apache.hadoop.fs.shell.Count}  *   */
end_comment

begin_class
DECL|class|TestCount
specifier|public
class|class
name|TestCount
block|{
DECL|field|WITH_QUOTAS
specifier|private
specifier|static
specifier|final
name|String
name|WITH_QUOTAS
init|=
literal|"Content summary with quotas"
decl_stmt|;
DECL|field|NO_QUOTAS
specifier|private
specifier|static
specifier|final
name|String
name|NO_QUOTAS
init|=
literal|"Content summary without quotas"
decl_stmt|;
DECL|field|HUMAN
specifier|private
specifier|static
specifier|final
name|String
name|HUMAN
init|=
literal|"human: "
decl_stmt|;
DECL|field|BYTES
specifier|private
specifier|static
specifier|final
name|String
name|BYTES
init|=
literal|"bytes: "
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockFs
specifier|private
specifier|static
name|FileSystem
name|mockFs
decl_stmt|;
DECL|field|fileStat
specifier|private
specifier|static
name|FileStatus
name|fileStat
decl_stmt|;
DECL|field|mockCs
specifier|private
specifier|static
name|ContentSummary
name|mockCs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockFs
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|fileStat
operator|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCs
operator|=
name|mock
argument_list|(
name|ContentSummary
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileStat
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetMock ()
specifier|public
name|void
name|resetMock
parameter_list|()
block|{
name|reset
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processOptionsHumanReadable ()
specifier|public
name|void
name|processOptionsHumanReadable
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|count
operator|.
name|isShowQuotas
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processOptionsAll ()
specifier|public
name|void
name|processOptionsAll
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-q"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|isShowQuotas
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check quotas are reported correctly
annotation|@
name|Test
DECL|method|processPathShowQuotas ()
specifier|public
name|void
name|processPathShowQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/test"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|PathData
name|pathData
init|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-q"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|count
operator|.
name|processPath
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|BYTES
operator|+
name|WITH_QUOTAS
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check counts without quotas are reported correctly
annotation|@
name|Test
DECL|method|processPathNoQuotas ()
specifier|public
name|void
name|processPathNoQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/test"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|PathData
name|pathData
init|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|count
operator|.
name|processPath
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|BYTES
operator|+
name|NO_QUOTAS
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processPathShowQuotasHuman ()
specifier|public
name|void
name|processPathShowQuotasHuman
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/test"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|PathData
name|pathData
init|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-q"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|count
operator|.
name|processPath
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|HUMAN
operator|+
name|WITH_QUOTAS
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processPathNoQuotasHuman ()
specifier|public
name|void
name|processPathNoQuotasHuman
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs:/test"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStat
argument_list|)
expr_stmt|;
name|PathData
name|pathData
init|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|count
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|count
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|count
operator|.
name|processPath
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|HUMAN
operator|+
name|NO_QUOTAS
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getCommandName ()
specifier|public
name|void
name|getCommandName
parameter_list|()
block|{
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|count
operator|.
name|getCommandName
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"count"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Count.getCommandName"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|isDeprecated ()
specifier|public
name|void
name|isDeprecated
parameter_list|()
block|{
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|boolean
name|actual
init|=
name|count
operator|.
name|isDeprecated
argument_list|()
decl_stmt|;
name|boolean
name|expected
init|=
literal|false
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Count.isDeprecated"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getReplacementCommand ()
specifier|public
name|void
name|getReplacementCommand
parameter_list|()
block|{
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|count
operator|.
name|getReplacementCommand
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Count.getReplacementCommand"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getName ()
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|count
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"count"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Count.getName"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getUsage ()
specifier|public
name|void
name|getUsage
parameter_list|()
block|{
name|Count
name|count
init|=
operator|new
name|Count
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|count
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"-count [-q] [-h]<path> ..."
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Count.getUsage"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|// mock content system
DECL|class|MockContentSummary
specifier|static
class|class
name|MockContentSummary
extends|extends
name|ContentSummary
block|{
DECL|method|MockContentSummary ()
specifier|public
name|MockContentSummary
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|toString (boolean qOption, boolean hOption)
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|qOption
parameter_list|,
name|boolean
name|hOption
parameter_list|)
block|{
if|if
condition|(
name|qOption
condition|)
block|{
if|if
condition|(
name|hOption
condition|)
block|{
return|return
operator|(
name|HUMAN
operator|+
name|WITH_QUOTAS
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|BYTES
operator|+
name|WITH_QUOTAS
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hOption
condition|)
block|{
return|return
operator|(
name|HUMAN
operator|+
name|NO_QUOTAS
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|BYTES
operator|+
name|NO_QUOTAS
operator|)
return|;
block|}
block|}
block|}
block|}
comment|// mock file system for use in testing
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MockContentSummary
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

