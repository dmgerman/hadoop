begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MockitoMaker
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_class
DECL|class|TestDiskChecker
specifier|public
class|class
name|TestDiskChecker
block|{
DECL|field|defaultPerm
specifier|final
name|FsPermission
name|defaultPerm
init|=
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
decl_stmt|;
DECL|field|invalidPerm
specifier|final
name|FsPermission
name|invalidPerm
init|=
operator|new
name|FsPermission
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMkdirs_dirExists ()
specifier|public
name|void
name|testMkdirs_dirExists
parameter_list|()
throws|throws
name|Throwable
block|{
name|_mkdirs
argument_list|(
literal|true
argument_list|,
name|defaultPerm
argument_list|,
name|defaultPerm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMkdirs_noDir ()
specifier|public
name|void
name|testMkdirs_noDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|_mkdirs
argument_list|(
literal|false
argument_list|,
name|defaultPerm
argument_list|,
name|defaultPerm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMkdirs_dirExists_badUmask ()
specifier|public
name|void
name|testMkdirs_dirExists_badUmask
parameter_list|()
throws|throws
name|Throwable
block|{
name|_mkdirs
argument_list|(
literal|true
argument_list|,
name|defaultPerm
argument_list|,
name|invalidPerm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMkdirs_noDir_badUmask ()
specifier|public
name|void
name|testMkdirs_noDir_badUmask
parameter_list|()
throws|throws
name|Throwable
block|{
name|_mkdirs
argument_list|(
literal|false
argument_list|,
name|defaultPerm
argument_list|,
name|invalidPerm
argument_list|)
expr_stmt|;
block|}
DECL|method|_mkdirs (boolean exists, FsPermission before, FsPermission after)
specifier|private
name|void
name|_mkdirs
parameter_list|(
name|boolean
name|exists
parameter_list|,
name|FsPermission
name|before
parameter_list|,
name|FsPermission
name|after
parameter_list|)
throws|throws
name|Throwable
block|{
name|File
name|localDir
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|exists
argument_list|)
operator|.
name|from
operator|.
name|exists
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localDir
operator|.
name|mkdir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// use default stubs
name|LocalFileSystem
name|fs
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|localDir
argument_list|)
operator|.
name|from
operator|.
name|pathToFile
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|after
argument_list|)
operator|.
name|from
operator|.
name|getPermission
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stat
argument_list|)
expr_stmt|;
try|try
block|{
name|DiskChecker
operator|.
name|mkdirsWithExistsAndPermissionCheck
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|before
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exists
condition|)
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|before
argument_list|)
expr_stmt|;
else|else
block|{
name|verify
argument_list|(
name|fs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|stat
argument_list|)
operator|.
name|getPermission
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
if|if
condition|(
name|before
operator|!=
name|after
condition|)
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Incorrect permission"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_normal ()
specifier|public
name|void
name|testCheckDir_normal
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notDir ()
specifier|public
name|void
name|testCheckDir_notDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|false
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"000"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notReadable ()
specifier|public
name|void
name|testCheckDir_notReadable
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"000"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notWritable ()
specifier|public
name|void
name|testCheckDir_notWritable
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"444"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notListable ()
specifier|public
name|void
name|testCheckDir_notListable
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"666"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// not listable
block|}
DECL|method|_checkDirs (boolean isDir, FsPermission perm, boolean success)
specifier|private
name|void
name|_checkDirs
parameter_list|(
name|boolean
name|isDir
parameter_list|,
name|FsPermission
name|perm
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|Throwable
block|{
name|File
name|localDir
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
literal|true
argument_list|)
operator|.
name|from
operator|.
name|exists
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|localDir
operator|.
name|mkdir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|localDir
argument_list|)
operator|.
name|from
operator|.
name|pathToFile
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|make
argument_list|(
name|stub
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
operator|.
name|returning
argument_list|(
name|perm
argument_list|)
operator|.
name|from
operator|.
name|getPermission
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|stat
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|isDir
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stat
argument_list|)
expr_stmt|;
try|try
block|{
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|stat
argument_list|)
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|fs
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|stat
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checkDir success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"checkDir success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checkDir success: "
operator|+
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * These test cases test to test the creation of a local folder with correct    * permission for result of mapper.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_normal_local ()
specifier|public
name|void
name|testCheckDir_normal_local
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
literal|"755"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notDir_local ()
specifier|public
name|void
name|testCheckDir_notDir_local
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|false
argument_list|,
literal|"000"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notReadable_local ()
specifier|public
name|void
name|testCheckDir_notReadable_local
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
literal|"000"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notWritable_local ()
specifier|public
name|void
name|testCheckDir_notWritable_local
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
literal|"444"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCheckDir_notListable_local ()
specifier|public
name|void
name|testCheckDir_notListable_local
parameter_list|()
throws|throws
name|Throwable
block|{
name|_checkDirs
argument_list|(
literal|true
argument_list|,
literal|"666"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|_checkDirs (boolean isDir, String perm, boolean success)
specifier|private
name|void
name|_checkDirs
parameter_list|(
name|boolean
name|isDir
parameter_list|,
name|String
name|perm
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|Throwable
block|{
name|File
name|localDir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|localDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|localDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getSetPermissionCommand
argument_list|(
name|perm
argument_list|,
literal|false
argument_list|,
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checkDir success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"checkDir success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|localDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"checkDir success: "
operator|+
name|success
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

