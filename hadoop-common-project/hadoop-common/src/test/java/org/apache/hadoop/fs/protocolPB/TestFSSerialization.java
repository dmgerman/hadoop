begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Verify PB serialization of FS data structures.  */
end_comment

begin_class
DECL|class|TestFSSerialization
specifier|public
class|class
name|TestFSSerialization
block|{
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testWritableFlagSerialization ()
specifier|public
name|void
name|testWritableFlagSerialization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://yaks:4344/dingos/f"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|0x8
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|boolean
name|acl
init|=
literal|0
operator|!=
operator|(
name|i
operator|&
literal|0x1
operator|)
decl_stmt|;
specifier|final
name|boolean
name|crypt
init|=
literal|0
operator|!=
operator|(
name|i
operator|&
literal|0x2
operator|)
decl_stmt|;
specifier|final
name|boolean
name|ec
init|=
literal|0
operator|!=
operator|(
name|i
operator|&
literal|0x4
operator|)
decl_stmt|;
name|FileStatus
name|stat
init|=
operator|new
name|FileStatus
argument_list|(
literal|1024L
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|1L
operator|<<
literal|31
argument_list|,
literal|12345678L
argument_list|,
literal|87654321L
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
literal|"hadoop"
argument_list|,
literal|"unqbbc"
argument_list|,
literal|null
argument_list|,
name|p
argument_list|,
name|acl
argument_list|,
name|crypt
argument_list|,
name|ec
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|stat
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
name|fstat
init|=
operator|new
name|FileStatus
argument_list|()
decl_stmt|;
name|fstat
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stat
argument_list|,
name|fstat
argument_list|)
expr_stmt|;
name|checkFields
argument_list|(
name|stat
argument_list|,
name|fstat
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUtilitySerialization ()
specifier|public
name|void
name|testUtilitySerialization
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://yaks:4344/dingos/f"
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
operator|new
name|FileStatus
argument_list|(
literal|1024L
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|1L
operator|<<
literal|31
argument_list|,
literal|12345678L
argument_list|,
literal|87654321L
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0111
argument_list|)
argument_list|,
literal|"hadoop"
argument_list|,
literal|"unqbbc"
argument_list|,
literal|null
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|FileStatusProto
name|fsp
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|FileStatus
name|stat2
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|fsp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stat
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
name|checkFields
argument_list|(
name|stat
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFields (FileStatus expected, FileStatus actual)
specifier|private
specifier|static
name|void
name|checkFields
parameter_list|(
name|FileStatus
name|expected
parameter_list|,
name|FileStatus
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPath
argument_list|()
argument_list|,
name|actual
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|actual
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLen
argument_list|()
argument_list|,
name|actual
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPermission
argument_list|()
argument_list|,
name|actual
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getOwner
argument_list|()
argument_list|,
name|actual
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getGroup
argument_list|()
argument_list|,
name|actual
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReplication
argument_list|()
argument_list|,
name|actual
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|actual
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|hasAcl
argument_list|()
argument_list|,
name|actual
operator|.
name|hasAcl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isEncrypted
argument_list|()
argument_list|,
name|actual
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isErasureCoded
argument_list|()
argument_list|,
name|actual
operator|.
name|isErasureCoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

