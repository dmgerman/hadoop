begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestUTF8ByteArrayUtils
specifier|public
class|class
name|TestUTF8ByteArrayUtils
extends|extends
name|HadoopTestBase
block|{
annotation|@
name|Test
DECL|method|testFindByte ()
specifier|public
name|void
name|testFindByte
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
literal|"Hello, world!"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Character 'a' does not exist in string"
argument_list|,
operator|-
literal|1
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findByte
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find first occurrence of character 'o'"
argument_list|,
literal|4
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findByte
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindBytes ()
specifier|public
name|void
name|testFindBytes
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
literal|"Hello, world!"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find first occurrence of pattern 'ello'"
argument_list|,
literal|1
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findBytes
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|"ello"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Substring starting at position 2 does not contain pattern 'ello'"
argument_list|,
operator|-
literal|1
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findBytes
argument_list|(
name|data
argument_list|,
literal|2
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|"ello"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindNthByte ()
specifier|public
name|void
name|testFindNthByte
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
literal|"Hello, world!"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find 2nd occurrence of character 'l'"
argument_list|,
literal|3
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findNthByte
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|'l'
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4th occurrence of character 'l' does not exist"
argument_list|,
operator|-
literal|1
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findNthByte
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|'l'
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find 3rd occurrence of character 'l'"
argument_list|,
literal|10
argument_list|,
name|UTF8ByteArrayUtils
operator|.
name|findNthByte
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|'l'
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

