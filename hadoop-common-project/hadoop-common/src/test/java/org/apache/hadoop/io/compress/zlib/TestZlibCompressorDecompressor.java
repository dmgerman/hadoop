begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zlib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressDecompressTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DecompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressDecompressTester
operator|.
name|CompressionTestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|TestZlibCompressorDecompressor
specifier|public
class|class
name|TestZlibCompressorDecompressor
block|{
DECL|field|random
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|12345L
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZlibCompressorDecompressor ()
specifier|public
name|void
name|testZlibCompressorDecompressor
parameter_list|()
block|{
try|try
block|{
name|int
name|SIZE
init|=
literal|44
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|rawData
init|=
name|generate
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
name|CompressDecompressTester
operator|.
name|of
argument_list|(
name|rawData
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|ZlibCompressor
argument_list|()
argument_list|,
operator|new
name|ZlibDecompressor
argument_list|()
argument_list|)
operator|.
name|withTestCases
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_SINGLE_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_ERRORS
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
argument_list|)
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorDecompressor error !!!"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompressorDecompressorWithExeedBufferLimit ()
specifier|public
name|void
name|testCompressorDecompressorWithExeedBufferLimit
parameter_list|()
block|{
name|int
name|BYTE_SIZE
init|=
literal|100
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|rawData
init|=
name|generate
argument_list|(
name|BYTE_SIZE
argument_list|)
decl_stmt|;
try|try
block|{
name|CompressDecompressTester
operator|.
name|of
argument_list|(
name|rawData
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|ZlibCompressor
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|,
name|CompressionStrategy
operator|.
name|DEFAULT_STRATEGY
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionHeader
operator|.
name|DEFAULT_HEADER
argument_list|,
name|BYTE_SIZE
argument_list|)
argument_list|,
operator|new
name|ZlibDecompressor
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibDecompressor
operator|.
name|CompressionHeader
operator|.
name|DEFAULT_HEADER
argument_list|,
name|BYTE_SIZE
argument_list|)
argument_list|)
operator|.
name|withTestCases
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_SINGLE_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_ERRORS
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
argument_list|)
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorDecompressorWithExeedBufferLimit error !!!"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZlibCompressorDecompressorWithConfiguration ()
specifier|public
name|void
name|testZlibCompressorDecompressorWithConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|byte
index|[]
name|rawData
decl_stmt|;
name|int
name|tryNumber
init|=
literal|5
decl_stmt|;
name|int
name|BYTE_SIZE
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|Compressor
name|zlibCompressor
init|=
name|ZlibFactory
operator|.
name|getZlibCompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Decompressor
name|zlibDecompressor
init|=
name|ZlibFactory
operator|.
name|getZlibDecompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|BYTE_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tryNumber
condition|;
name|i
operator|++
control|)
name|compressDecompressZlib
argument_list|(
name|rawData
argument_list|,
operator|(
name|ZlibCompressor
operator|)
name|zlibCompressor
argument_list|,
operator|(
name|ZlibDecompressor
operator|)
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|zlibCompressor
operator|.
name|reinit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testZlibCompressorDecompressorWithConfiguration ex error "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZlibCompressDecompress ()
specifier|public
name|void
name|testZlibCompressDecompress
parameter_list|()
block|{
name|byte
index|[]
name|rawData
init|=
literal|null
decl_stmt|;
name|int
name|rawDataSize
init|=
literal|0
decl_stmt|;
name|rawDataSize
operator|=
literal|1024
operator|*
literal|64
expr_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
try|try
block|{
name|ZlibCompressor
name|compressor
init|=
operator|new
name|ZlibCompressor
argument_list|()
decl_stmt|;
name|ZlibDecompressor
name|decompressor
init|=
operator|new
name|ZlibDecompressor
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"testZlibCompressDecompress finished error"
argument_list|,
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibCompressDecompress getBytesRead before error"
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|compressedResult
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|rawDataSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibCompressDecompress getBytesRead ather error"
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
operator|==
name|rawDataSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibCompressDecompress compressed size no less then original size"
argument_list|,
name|cSize
operator|<
name|rawDataSize
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decompressedBytes
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressedBytes
argument_list|,
literal|0
argument_list|,
name|decompressedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"testZlibCompressDecompress arrays not equals "
argument_list|,
name|rawData
argument_list|,
name|decompressedBytes
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testZlibCompressDecompress ex !!!"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZlibCompressorDecompressorSetDictionary ()
specifier|public
name|void
name|testZlibCompressorDecompressorSetDictionary
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_NATIVE_LIB_AVAILABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Compressor
name|zlibCompressor
init|=
name|ZlibFactory
operator|.
name|getZlibCompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Decompressor
name|zlibDecompressor
init|=
name|ZlibFactory
operator|.
name|getZlibDecompressor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|checkSetDictionaryNullPointerException
argument_list|(
name|zlibCompressor
argument_list|)
expr_stmt|;
name|checkSetDictionaryNullPointerException
argument_list|(
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|checkSetDictionaryArrayIndexOutOfBoundsException
argument_list|(
name|zlibDecompressor
argument_list|)
expr_stmt|;
name|checkSetDictionaryArrayIndexOutOfBoundsException
argument_list|(
name|zlibCompressor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"ZlibFactory is using native libs against request"
argument_list|,
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testZlibFactory ()
specifier|public
name|void
name|testZlibFactory
parameter_list|()
block|{
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibFactory compression level error !!!"
argument_list|,
name|CompressionLevel
operator|.
name|DEFAULT_COMPRESSION
operator|==
name|ZlibFactory
operator|.
name|getCompressionLevel
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibFactory compression strategy error !!!"
argument_list|,
name|CompressionStrategy
operator|.
name|DEFAULT_STRATEGY
operator|==
name|ZlibFactory
operator|.
name|getCompressionStrategy
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|cfg
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibFactory compression strategy error !!!"
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
operator|==
name|ZlibFactory
operator|.
name|getCompressionLevel
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|cfg
argument_list|,
name|CompressionStrategy
operator|.
name|FILTERED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testZlibFactory compression strategy error !!!"
argument_list|,
name|CompressionStrategy
operator|.
name|FILTERED
operator|==
name|ZlibFactory
operator|.
name|getCompressionStrategy
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSetDictionaryNullPointerException ( Decompressor decompressor)
specifier|private
name|boolean
name|checkSetDictionaryNullPointerException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setDictionary
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
return|return
literal|false
return|;
block|}
DECL|method|checkSetDictionaryNullPointerException (Compressor compressor)
specifier|private
name|boolean
name|checkSetDictionaryNullPointerException
parameter_list|(
name|Compressor
name|compressor
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setDictionary
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
return|return
literal|false
return|;
block|}
DECL|method|checkSetDictionaryArrayIndexOutOfBoundsException ( Compressor compressor)
specifier|private
name|boolean
name|checkSetDictionaryArrayIndexOutOfBoundsException
parameter_list|(
name|Compressor
name|compressor
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setDictionary
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
return|return
literal|false
return|;
block|}
DECL|method|checkSetDictionaryArrayIndexOutOfBoundsException ( Decompressor decompressor)
specifier|private
name|boolean
name|checkSetDictionaryArrayIndexOutOfBoundsException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setDictionary
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
return|return
literal|false
return|;
block|}
DECL|method|compressDecompressZlib (byte[] rawData, ZlibCompressor zlibCompressor, ZlibDecompressor zlibDecompressor)
specifier|private
name|byte
index|[]
name|compressDecompressZlib
parameter_list|(
name|byte
index|[]
name|rawData
parameter_list|,
name|ZlibCompressor
name|zlibCompressor
parameter_list|,
name|ZlibDecompressor
name|zlibDecompressor
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|cSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|compressedByte
init|=
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|decompressedRawData
init|=
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
decl_stmt|;
name|zlibCompressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|zlibCompressor
operator|.
name|finish
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|zlibCompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|cSize
operator|=
name|zlibCompressor
operator|.
name|compress
argument_list|(
name|compressedByte
argument_list|,
literal|0
argument_list|,
name|compressedByte
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|zlibCompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|getBytesWritten
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|getBytesRead
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|zlibDecompressor
operator|.
name|setInput
argument_list|(
name|compressedByte
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|zlibDecompressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|zlibDecompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|zlibDecompressor
operator|.
name|decompress
argument_list|(
name|decompressedRawData
argument_list|,
literal|0
argument_list|,
name|decompressedRawData
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|getBytesWritten
argument_list|()
operator|==
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|getBytesRead
argument_list|()
operator|==
name|cSize
argument_list|)
expr_stmt|;
name|zlibDecompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|zlibDecompressor
operator|.
name|getRemaining
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"testZlibCompressorDecompressorWithConfiguration array equals error"
argument_list|,
name|rawData
argument_list|,
name|decompressedRawData
argument_list|)
expr_stmt|;
return|return
name|decompressedRawData
return|;
block|}
annotation|@
name|Test
DECL|method|testBuiltInGzipDecompressorExceptions ()
specifier|public
name|void
name|testBuiltInGzipDecompressorExceptions
parameter_list|()
block|{
name|BuiltInGzipDecompressor
name|decompresser
init|=
operator|new
name|BuiltInGzipDecompressor
argument_list|()
decl_stmt|;
try|try
block|{
name|decompresser
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testBuiltInGzipDecompressorExceptions npe error "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|decompresser
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testBuiltInGzipDecompressorExceptions aioob error"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"decompresser.getBytesRead error"
argument_list|,
name|decompresser
operator|.
name|getBytesRead
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"decompresser.getRemaining error"
argument_list|,
name|decompresser
operator|.
name|getRemaining
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|decompresser
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompresser
operator|.
name|end
argument_list|()
expr_stmt|;
name|InputStream
name|decompStream
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// invalid 0 and 1 bytes , must be 31, -117
name|int
name|buffSize
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|Decompressor
name|decompressor
init|=
operator|new
name|BuiltInGzipDecompressor
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|decompStream
operator|=
operator|new
name|DecompressorStream
argument_list|(
name|gzbuf
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|11
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|decompStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"invalid 0 and 1 byte in gzip stream"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// invalid 2 byte, must be 8
try|try
block|{
name|int
name|buffSize
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|Decompressor
name|decompressor
init|=
operator|new
name|BuiltInGzipDecompressor
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|decompStream
operator|=
operator|new
name|DecompressorStream
argument_list|(
name|gzbuf
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|31
block|,
operator|-
literal|117
block|,
literal|7
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|11
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|decompStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"invalid 2 byte in gzip stream"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|buffSize
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|Decompressor
name|decompressor
init|=
operator|new
name|BuiltInGzipDecompressor
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|decompStream
operator|=
operator|new
name|DecompressorStream
argument_list|(
name|gzbuf
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|31
block|,
operator|-
literal|117
block|,
literal|8
block|,
operator|-
literal|32
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|11
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|decompStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"invalid 3 byte in gzip stream"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|buffSize
init|=
literal|1
operator|*
literal|1024
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|buffSize
index|]
decl_stmt|;
name|Decompressor
name|decompressor
init|=
operator|new
name|BuiltInGzipDecompressor
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|gzbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|decompStream
operator|=
operator|new
name|DecompressorStream
argument_list|(
name|gzbuf
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
name|gzbuf
operator|.
name|reset
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|31
block|,
operator|-
literal|117
block|,
literal|8
block|,
literal|4
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|11
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|decompStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"invalid 3 byte make hasExtraField"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generate (int size)
specifier|public
specifier|static
name|byte
index|[]
name|generate
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

