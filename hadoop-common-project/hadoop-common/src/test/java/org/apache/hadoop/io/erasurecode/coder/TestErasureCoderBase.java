begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|TestCoderBase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_comment
comment|/**  * Erasure coder test base with utilities.  */
end_comment

begin_class
DECL|class|TestErasureCoderBase
specifier|public
specifier|abstract
class|class
name|TestErasureCoderBase
extends|extends
name|TestCoderBase
block|{
DECL|field|encoderClass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
name|encoderClass
decl_stmt|;
DECL|field|decoderClass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
name|decoderClass
decl_stmt|;
DECL|field|encoder
specifier|private
name|ErasureCoder
name|encoder
decl_stmt|;
DECL|field|decoder
specifier|private
name|ErasureCoder
name|decoder
decl_stmt|;
DECL|field|numChunksInBlock
specifier|protected
name|int
name|numChunksInBlock
init|=
literal|16
decl_stmt|;
comment|/**    * It's just a block for this test purpose. We don't use HDFS block here    * at all for simple.    */
DECL|class|TestBlock
specifier|protected
specifier|static
class|class
name|TestBlock
extends|extends
name|ECBlock
block|{
DECL|field|chunks
specifier|private
name|ECChunk
index|[]
name|chunks
decl_stmt|;
comment|// For simple, just assume the block have the chunks already ready.
comment|// In practice we need to read/write chunks from/to the block via file IO.
DECL|method|TestBlock (ECChunk[] chunks)
specifier|public
name|TestBlock
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|this
operator|.
name|chunks
operator|=
name|chunks
expr_stmt|;
block|}
block|}
comment|/**    * Generating source data, encoding, recovering and then verifying.    * RawErasureCoder mainly uses ECChunk to pass input and output data buffers,    * it supports two kinds of ByteBuffers, one is array backed, the other is    * direct ByteBuffer. Have usingDirectBuffer to indicate which case to test.    * @param usingDirectBuffer    */
DECL|method|testCoding (boolean usingDirectBuffer)
specifier|protected
name|void
name|testCoding
parameter_list|(
name|boolean
name|usingDirectBuffer
parameter_list|)
block|{
name|this
operator|.
name|usingDirectBuffer
operator|=
name|usingDirectBuffer
expr_stmt|;
name|prepareCoders
argument_list|()
expr_stmt|;
comment|/**      * The following runs will use 3 different chunkSize for inputs and outputs,      * to verify the same encoder/decoder can process variable width of data.      */
name|performTestCoding
argument_list|(
name|baseChunkSize
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performTestCoding
argument_list|(
name|baseChunkSize
operator|-
literal|17
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|performTestCoding
argument_list|(
name|baseChunkSize
operator|+
literal|16
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|performTestCoding (int chunkSize, boolean usingSlicedBuffer)
specifier|private
name|void
name|performTestCoding
parameter_list|(
name|int
name|chunkSize
parameter_list|,
name|boolean
name|usingSlicedBuffer
parameter_list|)
block|{
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|prepareBufferAllocator
argument_list|(
name|usingSlicedBuffer
argument_list|)
expr_stmt|;
comment|// Generate data and encode
name|ECBlockGroup
name|blockGroup
init|=
name|prepareBlockGroupForEncoding
argument_list|()
decl_stmt|;
comment|// Backup all the source chunks for later recovering because some coders
comment|// may affect the source data.
name|TestBlock
index|[]
name|clonedDataBlocks
init|=
name|cloneBlocksWithData
argument_list|(
operator|(
name|TestBlock
index|[]
operator|)
name|blockGroup
operator|.
name|getDataBlocks
argument_list|()
argument_list|)
decl_stmt|;
name|TestBlock
index|[]
name|parityBlocks
init|=
operator|(
name|TestBlock
index|[]
operator|)
name|blockGroup
operator|.
name|getParityBlocks
argument_list|()
decl_stmt|;
name|ErasureCodingStep
name|codingStep
decl_stmt|;
name|codingStep
operator|=
name|encoder
operator|.
name|calculateCoding
argument_list|(
name|blockGroup
argument_list|)
expr_stmt|;
name|performCodingStep
argument_list|(
name|codingStep
argument_list|)
expr_stmt|;
comment|// Erase specified sources but return copies of them for later comparing
name|TestBlock
index|[]
name|backupBlocks
init|=
name|backupAndEraseBlocks
argument_list|(
name|clonedDataBlocks
argument_list|,
name|parityBlocks
argument_list|)
decl_stmt|;
comment|// Decode
name|blockGroup
operator|=
operator|new
name|ECBlockGroup
argument_list|(
name|clonedDataBlocks
argument_list|,
name|blockGroup
operator|.
name|getParityBlocks
argument_list|()
argument_list|)
expr_stmt|;
name|codingStep
operator|=
name|decoder
operator|.
name|calculateCoding
argument_list|(
name|blockGroup
argument_list|)
expr_stmt|;
name|performCodingStep
argument_list|(
name|codingStep
argument_list|)
expr_stmt|;
comment|// Compare
name|compareAndVerify
argument_list|(
name|backupBlocks
argument_list|,
name|codingStep
operator|.
name|getOutputBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is typically how a coding step should be performed.    * @param codingStep    */
DECL|method|performCodingStep (ErasureCodingStep codingStep)
specifier|private
name|void
name|performCodingStep
parameter_list|(
name|ErasureCodingStep
name|codingStep
parameter_list|)
block|{
comment|// Pretend that we're opening these input blocks and output blocks.
name|ECBlock
index|[]
name|inputBlocks
init|=
name|codingStep
operator|.
name|getInputBlocks
argument_list|()
decl_stmt|;
name|ECBlock
index|[]
name|outputBlocks
init|=
name|codingStep
operator|.
name|getOutputBlocks
argument_list|()
decl_stmt|;
comment|// We allocate input and output chunks accordingly.
name|ECChunk
index|[]
name|inputChunks
init|=
operator|new
name|ECChunk
index|[
name|inputBlocks
operator|.
name|length
index|]
decl_stmt|;
name|ECChunk
index|[]
name|outputChunks
init|=
operator|new
name|ECChunk
index|[
name|outputBlocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChunksInBlock
condition|;
operator|++
name|i
control|)
block|{
comment|// Pretend that we're reading input chunks from input blocks.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputBlocks
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|inputChunks
index|[
name|j
index|]
operator|=
operator|(
operator|(
name|TestBlock
operator|)
name|inputBlocks
index|[
name|j
index|]
operator|)
operator|.
name|chunks
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// Pretend that we allocate and will write output results to the blocks.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|outputBlocks
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|outputChunks
index|[
name|j
index|]
operator|=
name|allocateOutputChunk
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TestBlock
operator|)
name|outputBlocks
index|[
name|j
index|]
operator|)
operator|.
name|chunks
index|[
name|i
index|]
operator|=
name|outputChunks
index|[
name|j
index|]
expr_stmt|;
block|}
comment|// Given the input chunks and output chunk buffers, just call it !
name|codingStep
operator|.
name|performCoding
argument_list|(
name|inputChunks
argument_list|,
name|outputChunks
argument_list|)
expr_stmt|;
block|}
name|codingStep
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
comment|/**    * Compare and verify if recovered blocks data are the same with the erased    * blocks data.    * @param erasedBlocks    * @param recoveredBlocks    */
DECL|method|compareAndVerify (ECBlock[] erasedBlocks, ECBlock[] recoveredBlocks)
specifier|protected
name|void
name|compareAndVerify
parameter_list|(
name|ECBlock
index|[]
name|erasedBlocks
parameter_list|,
name|ECBlock
index|[]
name|recoveredBlocks
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedBlocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|compareAndVerify
argument_list|(
operator|(
operator|(
name|TestBlock
operator|)
name|erasedBlocks
index|[
name|i
index|]
operator|)
operator|.
name|chunks
argument_list|,
operator|(
operator|(
name|TestBlock
operator|)
name|recoveredBlocks
index|[
name|i
index|]
operator|)
operator|.
name|chunks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareCoders ()
specifier|private
name|void
name|prepareCoders
parameter_list|()
block|{
if|if
condition|(
name|encoder
operator|==
literal|null
condition|)
block|{
name|encoder
operator|=
name|createEncoder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|decoder
operator|==
literal|null
condition|)
block|{
name|decoder
operator|=
name|createDecoder
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create the raw erasure encoder to test    * @return    */
DECL|method|createEncoder ()
specifier|protected
name|ErasureCoder
name|createEncoder
parameter_list|()
block|{
name|ErasureCoder
name|encoder
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
name|constructor
init|=
operator|(
name|Constructor
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
operator|)
name|encoderClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|encoder
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create encoder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|encoder
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|encoder
return|;
block|}
comment|/**    * create the raw erasure decoder to test    * @return    */
DECL|method|createDecoder ()
specifier|protected
name|ErasureCoder
name|createDecoder
parameter_list|()
block|{
name|ErasureCoder
name|decoder
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
name|constructor
init|=
operator|(
name|Constructor
argument_list|<
name|?
extends|extends
name|ErasureCoder
argument_list|>
operator|)
name|decoderClass
operator|.
name|getConstructor
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|decoder
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create decoder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|decoder
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|decoder
return|;
block|}
comment|/**    * Prepare a block group for encoding.    * @return    */
DECL|method|prepareBlockGroupForEncoding ()
specifier|protected
name|ECBlockGroup
name|prepareBlockGroupForEncoding
parameter_list|()
block|{
name|ECBlock
index|[]
name|dataBlocks
init|=
operator|new
name|TestBlock
index|[
name|numDataUnits
index|]
decl_stmt|;
name|ECBlock
index|[]
name|parityBlocks
init|=
operator|new
name|TestBlock
index|[
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataUnits
condition|;
name|i
operator|++
control|)
block|{
name|dataBlocks
index|[
name|i
index|]
operator|=
name|generateDataBlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|parityBlocks
index|[
name|i
index|]
operator|=
name|allocateOutputBlock
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ECBlockGroup
argument_list|(
name|dataBlocks
argument_list|,
name|parityBlocks
argument_list|)
return|;
block|}
comment|/**    * Generate random data and return a data block.    * @return    */
DECL|method|generateDataBlock ()
specifier|protected
name|ECBlock
name|generateDataBlock
parameter_list|()
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|numChunksInBlock
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChunksInBlock
condition|;
operator|++
name|i
control|)
block|{
name|chunks
index|[
name|i
index|]
operator|=
name|generateDataChunk
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TestBlock
argument_list|(
name|chunks
argument_list|)
return|;
block|}
comment|/**    * Erase blocks to test the recovering of them. Before erasure clone them    * first so could return themselves.    * @param dataBlocks    * @return clone of erased dataBlocks    */
DECL|method|backupAndEraseBlocks (TestBlock[] dataBlocks, TestBlock[] parityBlocks)
specifier|protected
name|TestBlock
index|[]
name|backupAndEraseBlocks
parameter_list|(
name|TestBlock
index|[]
name|dataBlocks
parameter_list|,
name|TestBlock
index|[]
name|parityBlocks
parameter_list|)
block|{
name|TestBlock
index|[]
name|toEraseBlocks
init|=
operator|new
name|TestBlock
index|[
name|erasedDataIndexes
operator|.
name|length
operator|+
name|erasedParityIndexes
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TestBlock
name|block
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedParityIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|block
operator|=
name|parityBlocks
index|[
name|erasedParityIndexes
index|[
name|i
index|]
index|]
expr_stmt|;
name|toEraseBlocks
index|[
name|idx
operator|++
index|]
operator|=
name|cloneBlockWithData
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|eraseDataFromBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedDataIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|block
operator|=
name|dataBlocks
index|[
name|erasedDataIndexes
index|[
name|i
index|]
index|]
expr_stmt|;
name|toEraseBlocks
index|[
name|idx
operator|++
index|]
operator|=
name|cloneBlockWithData
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|eraseDataFromBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|toEraseBlocks
return|;
block|}
comment|/**    * Allocate an output block. Note the chunk buffer will be allocated by the    * up caller when performing the coding step.    * @return    */
DECL|method|allocateOutputBlock ()
specifier|protected
name|TestBlock
name|allocateOutputBlock
parameter_list|()
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|numChunksInBlock
index|]
decl_stmt|;
return|return
operator|new
name|TestBlock
argument_list|(
name|chunks
argument_list|)
return|;
block|}
comment|/**    * Clone blocks with data copied along with, avoiding affecting the original    * blocks.    * @param blocks    * @return    */
DECL|method|cloneBlocksWithData (TestBlock[] blocks)
specifier|protected
name|TestBlock
index|[]
name|cloneBlocksWithData
parameter_list|(
name|TestBlock
index|[]
name|blocks
parameter_list|)
block|{
name|TestBlock
index|[]
name|results
init|=
operator|new
name|TestBlock
index|[
name|blocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|cloneBlockWithData
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Clone exactly a block, avoiding affecting the original block.    * @param block    * @return a new block    */
DECL|method|cloneBlockWithData (TestBlock block)
specifier|protected
name|TestBlock
name|cloneBlockWithData
parameter_list|(
name|TestBlock
name|block
parameter_list|)
block|{
name|ECChunk
index|[]
name|newChunks
init|=
name|cloneChunksWithData
argument_list|(
name|block
operator|.
name|chunks
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestBlock
argument_list|(
name|newChunks
argument_list|)
return|;
block|}
comment|/**    * Erase data from a block.    */
DECL|method|eraseDataFromBlock (TestBlock theBlock)
specifier|protected
name|void
name|eraseDataFromBlock
parameter_list|(
name|TestBlock
name|theBlock
parameter_list|)
block|{
name|eraseDataFromChunks
argument_list|(
name|theBlock
operator|.
name|chunks
argument_list|)
expr_stmt|;
name|theBlock
operator|.
name|setErased
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

