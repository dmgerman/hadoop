begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
operator|.
name|KMSDelegationToken
operator|.
name|TOKEN_KIND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link KMSClientProvider} class.  */
end_comment

begin_class
DECL|class|TestKMSClientProvider
specifier|public
class|class
name|TestKMSClientProvider
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|token
specifier|private
specifier|final
name|Token
name|token
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
DECL|field|oldToken
specifier|private
specifier|final
name|Token
name|oldToken
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
DECL|field|urlString
specifier|private
specifier|final
name|String
name|urlString
init|=
literal|"https://host:16000/kms"
decl_stmt|;
DECL|field|providerUriString
specifier|private
specifier|final
name|String
name|providerUriString
init|=
literal|"kms://https@host:16000/kms"
decl_stmt|;
DECL|field|oldTokenService
specifier|private
specifier|final
name|String
name|oldTokenService
init|=
literal|"host:16000"
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
parameter_list|(
name|KMSClientProvider
operator|.
name|LOG
parameter_list|,
name|Level
operator|.
name|TRACE
parameter_list|)
constructor_decl|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|SecurityUtil
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|TOKEN_KIND
argument_list|)
expr_stmt|;
name|token
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|providerUriString
argument_list|)
argument_list|)
expr_stmt|;
name|oldToken
operator|.
name|setKind
argument_list|(
name|TOKEN_KIND
argument_list|)
expr_stmt|;
name|oldToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|oldTokenService
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectDelegationToken ()
specifier|public
name|void
name|testSelectDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|providerUriString
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|KMSClientProvider
operator|.
name|selectDelegationToken
argument_list|(
name|creds
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|KMSClientProvider
operator|.
name|selectDelegationToken
argument_list|(
name|creds
argument_list|,
operator|new
name|Text
argument_list|(
name|oldTokenService
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|KMSClientProvider
operator|.
name|selectDelegationToken
argument_list|(
name|creds
argument_list|,
operator|new
name|Text
argument_list|(
name|providerUriString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectTokenOldService ()
specifier|public
name|void
name|testSelectTokenOldService
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|providerUriString
argument_list|)
decl_stmt|;
specifier|final
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|oldTokenService
argument_list|)
argument_list|,
name|oldToken
argument_list|)
expr_stmt|;
specifier|final
name|Token
name|t
init|=
name|kp
operator|.
name|selectDelegationToken
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oldToken
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSelectTokenWhenBothExist ()
specifier|public
name|void
name|testSelectTokenWhenBothExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|providerUriString
argument_list|)
decl_stmt|;
specifier|final
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|creds
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|oldToken
operator|.
name|getService
argument_list|()
argument_list|,
name|oldToken
argument_list|)
expr_stmt|;
specifier|final
name|Token
name|t
init|=
name|kp
operator|.
name|selectDelegationToken
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new token should be selected when both exist"
argument_list|,
name|token
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testURLSelectTokenUriFormat ()
specifier|public
name|void
name|testURLSelectTokenUriFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|testURLSelectToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testURLSelectTokenIpPort ()
specifier|public
name|void
name|testURLSelectTokenIpPort
parameter_list|()
throws|throws
name|Exception
block|{
name|testURLSelectToken
argument_list|(
name|oldToken
argument_list|)
expr_stmt|;
block|}
DECL|method|testURLSelectToken (final Token tok)
specifier|private
name|void
name|testURLSelectToken
parameter_list|(
specifier|final
name|Token
name|tok
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|providerUriString
argument_list|)
decl_stmt|;
specifier|final
name|KMSClientProvider
name|kp
init|=
operator|new
name|KMSClientProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|DelegationTokenAuthenticatedURL
name|url
init|=
name|kp
operator|.
name|createAuthenticatedURL
argument_list|()
decl_stmt|;
specifier|final
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|tok
operator|.
name|getService
argument_list|()
argument_list|,
name|tok
argument_list|)
expr_stmt|;
specifier|final
name|Token
name|chosen
init|=
name|url
operator|.
name|selectDelegationToken
argument_list|(
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
argument_list|,
name|creds
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tok
argument_list|,
name|chosen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

