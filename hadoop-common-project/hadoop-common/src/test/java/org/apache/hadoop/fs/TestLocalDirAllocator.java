begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/** This test LocalDirAllocator works correctly;  * Every test case uses different buffer dirs to  * enforce the AllocatorPerContext initialization.  * This test does not run on Cygwin because under Cygwin  * a directory can be created in a read-only directory  * which breaks this test.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestLocalDirAllocator
specifier|public
class|class
name|TestLocalDirAllocator
block|{
DECL|field|conf
specifier|final
specifier|static
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|BUFFER_DIR_ROOT
specifier|final
specifier|static
specifier|private
name|String
name|BUFFER_DIR_ROOT
init|=
literal|"build/test/temp"
decl_stmt|;
DECL|field|ABSOLUTE_DIR_ROOT
specifier|final
specifier|static
specifier|private
name|String
name|ABSOLUTE_DIR_ROOT
decl_stmt|;
DECL|field|QUALIFIED_DIR_ROOT
specifier|final
specifier|static
specifier|private
name|String
name|QUALIFIED_DIR_ROOT
decl_stmt|;
DECL|field|BUFFER_PATH_ROOT
specifier|final
specifier|static
specifier|private
name|Path
name|BUFFER_PATH_ROOT
init|=
operator|new
name|Path
argument_list|(
name|BUFFER_DIR_ROOT
argument_list|)
decl_stmt|;
DECL|field|BUFFER_ROOT
specifier|final
specifier|static
specifier|private
name|File
name|BUFFER_ROOT
init|=
operator|new
name|File
argument_list|(
name|BUFFER_DIR_ROOT
argument_list|)
decl_stmt|;
DECL|field|CONTEXT
specifier|final
specifier|static
specifier|private
name|String
name|CONTEXT
init|=
literal|"mapred.local.dir"
decl_stmt|;
DECL|field|FILENAME
specifier|final
specifier|static
specifier|private
name|String
name|FILENAME
init|=
literal|"block"
decl_stmt|;
DECL|field|dirAllocator
specifier|final
specifier|static
specifier|private
name|LocalDirAllocator
name|dirAllocator
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|CONTEXT
argument_list|)
decl_stmt|;
DECL|field|localFs
specifier|static
name|LocalFileSystem
name|localFs
decl_stmt|;
DECL|field|isWindows
specifier|final
specifier|static
specifier|private
name|boolean
name|isWindows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|SMALL_FILE_SIZE
specifier|final
specifier|static
name|int
name|SMALL_FILE_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|RELATIVE
specifier|final
specifier|static
specifier|private
name|String
name|RELATIVE
init|=
literal|"/RELATIVE"
decl_stmt|;
DECL|field|ABSOLUTE
specifier|final
specifier|static
specifier|private
name|String
name|ABSOLUTE
init|=
literal|"/ABSOLUTE"
decl_stmt|;
DECL|field|QUALIFIED
specifier|final
specifier|static
specifier|private
name|String
name|QUALIFIED
init|=
literal|"/QUALIFIED"
decl_stmt|;
DECL|field|ROOT
specifier|final
specifier|private
name|String
name|ROOT
decl_stmt|;
DECL|field|PREFIX
specifier|final
specifier|private
name|String
name|PREFIX
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// absolute path in test environment
comment|// /home/testuser/src/hadoop-common-project/hadoop-common/build/test/temp
name|ABSOLUTE_DIR_ROOT
operator|=
operator|new
name|Path
argument_list|(
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|BUFFER_DIR_ROOT
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// file:/home/testuser/src/hadoop-common-project/hadoop-common/build/test/temp
name|QUALIFIED_DIR_ROOT
operator|=
operator|new
name|Path
argument_list|(
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|BUFFER_DIR_ROOT
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|TestLocalDirAllocator (String root, String prefix)
specifier|public
name|TestLocalDirAllocator
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|ROOT
operator|=
name|root
expr_stmt|;
name|PREFIX
operator|=
name|prefix
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
name|Object
index|[]
index|[]
name|data
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|BUFFER_DIR_ROOT
block|,
name|RELATIVE
block|}
block|,
block|{
name|ABSOLUTE_DIR_ROOT
block|,
name|ABSOLUTE
block|}
block|,
block|{
name|QUALIFIED_DIR_ROOT
block|,
name|QUALIFIED
block|}
block|}
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|data
argument_list|)
return|;
block|}
DECL|method|rmBufferDirs ()
specifier|private
specifier|static
name|void
name|rmBufferDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
name|BUFFER_PATH_ROOT
argument_list|)
operator|||
name|localFs
operator|.
name|delete
argument_list|(
name|BUFFER_PATH_ROOT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateTempDirCreation (String dir)
specifier|private
specifier|static
name|void
name|validateTempDirCreation
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Checking for "
operator|+
name|dir
operator|+
literal|" in "
operator|+
name|result
operator|+
literal|" - FAILED!"
argument_list|,
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile ()
specifier|private
specifier|static
name|File
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createTempFile
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|createTempFile (long size)
specifier|private
specifier|static
name|File
name|createTempFile
parameter_list|(
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|dirAllocator
operator|.
name|createTmpFileForWrite
argument_list|(
name|FILENAME
argument_list|,
name|size
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|buildBufferDir (String dir, int i)
specifier|private
name|String
name|buildBufferDir
parameter_list|(
name|String
name|dir
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|dir
operator|+
name|PREFIX
operator|+
name|i
return|;
block|}
comment|/** Two buffer dirs. The first dir does not exist& is on a read-only disk;    * The second dir exists& is RW    * @throws Exception    */
annotation|@
name|Test
DECL|method|test0 ()
specifier|public
name|void
name|test0
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir0
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|dir1
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir0
operator|+
literal|","
operator|+
name|dir1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BUFFER_ROOT
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. The first dir exists& is on a read-only disk;    * The second dir exists& is RW    * @throws Exception    */
annotation|@
name|Test
DECL|method|testROBufferDirAndRWBufferDir ()
specifier|public
name|void
name|testROBufferDirAndRWBufferDir
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir1
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|dir2
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir1
operator|+
literal|","
operator|+
name|dir2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BUFFER_ROOT
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. Both do not exist but on a RW disk.    * Check if tmp dirs are allocated in a round-robin    */
annotation|@
name|Test
DECL|method|testDirsNotExist ()
specifier|public
name|void
name|testDirsNotExist
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir2
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|dir3
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|3
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir2
operator|+
literal|","
operator|+
name|dir3
argument_list|)
expr_stmt|;
comment|// create the first file, and then figure the round-robin sequence
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
expr_stmt|;
name|int
name|firstDirIdx
init|=
operator|(
name|dirAllocator
operator|.
name|getCurrentDirectoryIndex
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|2
else|:
literal|3
decl_stmt|;
name|int
name|secondDirIdx
init|=
operator|(
name|firstDirIdx
operator|==
literal|2
operator|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
comment|// check if tmp dirs are allocated in a round-robin manner
name|validateTempDirCreation
argument_list|(
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
name|firstDirIdx
argument_list|)
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
name|secondDirIdx
argument_list|)
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
name|firstDirIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. Both exists and on a R/W disk.    * Later disk1 becomes read-only.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRWBufferDirBecomesRO ()
specifier|public
name|void
name|testRWBufferDirBecomesRO
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir3
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
name|dir4
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|4
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir3
operator|+
literal|","
operator|+
name|dir4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the first small file
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
expr_stmt|;
comment|// Determine the round-robin sequence
name|int
name|nextDirIdx
init|=
operator|(
name|dirAllocator
operator|.
name|getCurrentDirectoryIndex
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|validateTempDirCreation
argument_list|(
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
name|nextDirIdx
argument_list|)
argument_list|)
expr_stmt|;
comment|// change buffer directory 2 to be read only
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|dir4
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir3
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|dir3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Two buffer dirs, on read-write disk.    *    * Try to create a whole bunch of files.    *  Verify that they do indeed all get created where they should.    *    *  Would ideally check statistical properties of distribution, but    *  we don't have the nerve to risk false-positives here.    *    * @throws Exception    */
DECL|field|TRIALS
specifier|static
specifier|final
name|int
name|TRIALS
init|=
literal|100
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateManyFiles ()
specifier|public
name|void
name|testCreateManyFiles
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir5
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|dir6
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|6
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir5
operator|+
literal|","
operator|+
name|dir6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|inDir5
init|=
literal|0
decl_stmt|,
name|inDir6
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TRIALS
condition|;
operator|++
name|i
control|)
block|{
name|File
name|result
init|=
name|createTempFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|Path
argument_list|(
name|dir5
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|inDir5
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|Path
argument_list|(
name|dir6
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|inDir6
operator|++
expr_stmt|;
block|}
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|inDir5
operator|+
name|inDir6
operator|==
name|TRIALS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. The first dir does not exist& is on a read-only disk;    * The second dir exists& is RW    * getLocalPathForWrite with checkAccess set to false should create a parent    * directory. With checkAccess true, the directory should not be created.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testLocalPathForWriteDirCreation ()
specifier|public
name|void
name|testLocalPathForWriteDirCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dir0
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|dir1
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir0
operator|+
literal|","
operator|+
name|dir1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BUFFER_ROOT
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|Path
name|p1
init|=
name|dirAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
literal|"p1/x"
argument_list|,
name|SMALL_FILE_SIZE
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|p1
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|p2
init|=
name|dirAllocator
operator|.
name|getLocalPathForWrite
argument_list|(
literal|"p2/x"
argument_list|,
name|SMALL_FILE_SIZE
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|p2
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Test no side effect files are left over. After creating a temp    * temp file, remove both the temp file and its parent. Verify that    * no files or directories are left over as can happen when File objects    * are mistakenly created from fully qualified path strings.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testNoSideEffects ()
specifier|public
name|void
name|testNoSideEffects
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|File
name|result
init|=
name|dirAllocator
operator|.
name|createTmpFileForWrite
argument_list|(
name|FILENAME
argument_list|,
operator|-
literal|1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getParentFile
argument_list|()
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test getLocalPathToRead() returns correct filename and "file" schema.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testGetLocalPathToRead ()
specifier|public
name|void
name|testGetLocalPathToRead
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
name|String
name|dir
init|=
name|buildBufferDir
argument_list|(
name|ROOT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|f1
init|=
name|dirAllocator
operator|.
name|createTmpFileForWrite
argument_list|(
name|FILENAME
argument_list|,
name|SMALL_FILE_SIZE
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p1
init|=
name|dirAllocator
operator|.
name|getLocalPathToRead
argument_list|(
name|f1
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f1
operator|.
name|getName
argument_list|()
argument_list|,
name|p1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file"
argument_list|,
name|p1
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

