begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test base of common utilities for tests not only raw coders but also block  * coders.  */
end_comment

begin_class
DECL|class|TestCoderBase
specifier|public
specifier|abstract
class|class
name|TestCoderBase
block|{
DECL|field|RAND
specifier|protected
specifier|static
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|numDataUnits
specifier|protected
name|int
name|numDataUnits
decl_stmt|;
DECL|field|numParityUnits
specifier|protected
name|int
name|numParityUnits
decl_stmt|;
DECL|field|baseChunkSize
specifier|protected
name|int
name|baseChunkSize
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
init|=
name|baseChunkSize
decl_stmt|;
DECL|field|zeroChunkBytes
specifier|private
name|byte
index|[]
name|zeroChunkBytes
decl_stmt|;
DECL|field|startBufferWithZero
specifier|private
name|boolean
name|startBufferWithZero
init|=
literal|true
decl_stmt|;
comment|// Indexes of erased data units.
DECL|field|erasedDataIndexes
specifier|protected
name|int
index|[]
name|erasedDataIndexes
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
comment|// Indexes of erased parity units.
DECL|field|erasedParityIndexes
specifier|protected
name|int
index|[]
name|erasedParityIndexes
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
comment|// Data buffers are either direct or on-heap, for performance the two cases
comment|// may go to different coding implementations.
DECL|field|usingDirectBuffer
specifier|protected
name|boolean
name|usingDirectBuffer
init|=
literal|true
decl_stmt|;
DECL|method|getChunkSize ()
specifier|protected
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
DECL|method|setChunkSize (int chunkSize)
specifier|protected
name|void
name|setChunkSize
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|zeroChunkBytes
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
comment|// With ZERO by default
block|}
comment|/**    * Prepare before running the case.    * @param numDataUnits    * @param numParityUnits    * @param erasedDataIndexes    */
DECL|method|prepare (Configuration conf, int numDataUnits, int numParityUnits, int[] erasedDataIndexes, int[] erasedParityIndexes)
specifier|protected
name|void
name|prepare
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numDataUnits
parameter_list|,
name|int
name|numParityUnits
parameter_list|,
name|int
index|[]
name|erasedDataIndexes
parameter_list|,
name|int
index|[]
name|erasedParityIndexes
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|numDataUnits
operator|=
name|numDataUnits
expr_stmt|;
name|this
operator|.
name|numParityUnits
operator|=
name|numParityUnits
expr_stmt|;
name|this
operator|.
name|erasedDataIndexes
operator|=
name|erasedDataIndexes
operator|!=
literal|null
condition|?
name|erasedDataIndexes
else|:
operator|new
name|int
index|[]
block|{
literal|0
block|}
expr_stmt|;
name|this
operator|.
name|erasedParityIndexes
operator|=
name|erasedParityIndexes
operator|!=
literal|null
condition|?
name|erasedParityIndexes
else|:
operator|new
name|int
index|[]
block|{
literal|0
block|}
expr_stmt|;
block|}
comment|/**    * Get the conf the test.    * @return configuration    */
DECL|method|getConf ()
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Compare and verify if erased chunks are equal to recovered chunks    * @param erasedChunks    * @param recoveredChunks    */
DECL|method|compareAndVerify (ECChunk[] erasedChunks, ECChunk[] recoveredChunks)
specifier|protected
name|void
name|compareAndVerify
parameter_list|(
name|ECChunk
index|[]
name|erasedChunks
parameter_list|,
name|ECChunk
index|[]
name|recoveredChunks
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|erased
init|=
name|toArrays
argument_list|(
name|erasedChunks
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|recovered
init|=
name|toArrays
argument_list|(
name|recoveredChunks
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|erased
argument_list|,
name|recovered
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Decoding and comparing failed."
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adjust and return erased indexes altogether, including erased data indexes    * and parity indexes.    * @return erased indexes altogether    */
DECL|method|getErasedIndexesForDecoding ()
specifier|protected
name|int
index|[]
name|getErasedIndexesForDecoding
parameter_list|()
block|{
name|int
index|[]
name|erasedIndexesForDecoding
init|=
operator|new
name|int
index|[
name|erasedParityIndexes
operator|.
name|length
operator|+
name|erasedDataIndexes
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedParityIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|erasedIndexesForDecoding
index|[
name|idx
operator|++
index|]
operator|=
name|erasedParityIndexes
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedDataIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|erasedIndexesForDecoding
index|[
name|idx
operator|++
index|]
operator|=
name|erasedDataIndexes
index|[
name|i
index|]
operator|+
name|numParityUnits
expr_stmt|;
block|}
return|return
name|erasedIndexesForDecoding
return|;
block|}
comment|/**    * Return input chunks for decoding, which is parityChunks + dataChunks.    * @param dataChunks    * @param parityChunks    * @return    */
DECL|method|prepareInputChunksForDecoding (ECChunk[] dataChunks, ECChunk[] parityChunks)
specifier|protected
name|ECChunk
index|[]
name|prepareInputChunksForDecoding
parameter_list|(
name|ECChunk
index|[]
name|dataChunks
parameter_list|,
name|ECChunk
index|[]
name|parityChunks
parameter_list|)
block|{
name|ECChunk
index|[]
name|inputChunks
init|=
operator|new
name|ECChunk
index|[
name|numParityUnits
operator|+
name|numDataUnits
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParityUnits
condition|;
name|i
operator|++
control|)
block|{
name|inputChunks
index|[
name|idx
operator|++
index|]
operator|=
name|parityChunks
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataUnits
condition|;
name|i
operator|++
control|)
block|{
name|inputChunks
index|[
name|idx
operator|++
index|]
operator|=
name|dataChunks
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|inputChunks
return|;
block|}
comment|/**    * Erase chunks to test the recovering of them. Before erasure clone them    * first so could return them.    * @param dataChunks    * @param parityChunks    * @return clone of erased chunks    */
DECL|method|backupAndEraseChunks (ECChunk[] dataChunks, ECChunk[] parityChunks)
specifier|protected
name|ECChunk
index|[]
name|backupAndEraseChunks
parameter_list|(
name|ECChunk
index|[]
name|dataChunks
parameter_list|,
name|ECChunk
index|[]
name|parityChunks
parameter_list|)
block|{
name|ECChunk
index|[]
name|toEraseChunks
init|=
operator|new
name|ECChunk
index|[
name|erasedParityIndexes
operator|.
name|length
operator|+
name|erasedDataIndexes
operator|.
name|length
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|ECChunk
name|chunk
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedParityIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunk
operator|=
name|parityChunks
index|[
name|erasedParityIndexes
index|[
name|i
index|]
index|]
expr_stmt|;
name|toEraseChunks
index|[
name|idx
operator|++
index|]
operator|=
name|cloneChunkWithData
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|eraseDataFromChunk
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedDataIndexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunk
operator|=
name|dataChunks
index|[
name|erasedDataIndexes
index|[
name|i
index|]
index|]
expr_stmt|;
name|toEraseChunks
index|[
name|idx
operator|++
index|]
operator|=
name|cloneChunkWithData
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
name|eraseDataFromChunk
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
return|return
name|toEraseChunks
return|;
block|}
comment|/**    * Erase data from the specified chunks, putting ZERO bytes to the buffers.    * @param chunks    */
DECL|method|eraseDataFromChunks (ECChunk[] chunks)
specifier|protected
name|void
name|eraseDataFromChunks
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eraseDataFromChunk
argument_list|(
name|chunks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Erase data from the specified chunk, putting ZERO bytes to the buffer.    * @param chunk with a buffer ready to read at the current position    */
DECL|method|eraseDataFromChunk (ECChunk chunk)
specifier|protected
name|void
name|eraseDataFromChunk
parameter_list|(
name|ECChunk
name|chunk
parameter_list|)
block|{
name|ByteBuffer
name|chunkBuffer
init|=
name|chunk
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
comment|// Erase the data at the position, and restore the buffer ready for reading
comment|// same many bytes but all ZERO.
name|int
name|pos
init|=
name|chunkBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|chunkBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|chunkBuffer
operator|.
name|put
argument_list|(
name|zeroChunkBytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// Back to readable again after data erased
name|chunkBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|chunkBuffer
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|chunkBuffer
operator|.
name|limit
argument_list|(
name|pos
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clone chunks along with copying the associated data. It respects how the    * chunk buffer is allocated, direct or non-direct. It avoids affecting the    * original chunk buffers.    * @param chunks    * @return    */
DECL|method|cloneChunksWithData (ECChunk[] chunks)
specifier|protected
name|ECChunk
index|[]
name|cloneChunksWithData
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|ECChunk
index|[]
name|results
init|=
operator|new
name|ECChunk
index|[
name|chunks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|cloneChunkWithData
argument_list|(
name|chunks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Clone chunk along with copying the associated data. It respects how the    * chunk buffer is allocated, direct or non-direct. It avoids affecting the    * original chunk.    * @param chunk    * @return a new chunk    */
DECL|method|cloneChunkWithData (ECChunk chunk)
specifier|protected
name|ECChunk
name|cloneChunkWithData
parameter_list|(
name|ECChunk
name|chunk
parameter_list|)
block|{
name|ByteBuffer
name|srcBuffer
init|=
name|chunk
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytesArr
init|=
operator|new
name|byte
index|[
name|srcBuffer
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|srcBuffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|srcBuffer
operator|.
name|get
argument_list|(
name|bytesArr
argument_list|,
literal|0
argument_list|,
name|bytesArr
operator|.
name|length
argument_list|)
expr_stmt|;
name|srcBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteBuffer
name|destBuffer
init|=
name|allocateOutputBuffer
argument_list|(
name|bytesArr
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|destBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|destBuffer
operator|.
name|put
argument_list|(
name|bytesArr
argument_list|)
expr_stmt|;
name|destBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|destBuffer
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
operator|new
name|ECChunk
argument_list|(
name|destBuffer
argument_list|)
return|;
block|}
comment|/**    * Allocate a chunk for output or writing.    * @return    */
DECL|method|allocateOutputChunk ()
specifier|protected
name|ECChunk
name|allocateOutputChunk
parameter_list|()
block|{
name|ByteBuffer
name|buffer
init|=
name|allocateOutputBuffer
argument_list|(
name|chunkSize
argument_list|)
decl_stmt|;
return|return
operator|new
name|ECChunk
argument_list|(
name|buffer
argument_list|)
return|;
block|}
comment|/**    * Allocate a buffer for output or writing. It can prepare for two kinds of    * data buffers: one with position as 0, the other with position> 0    * @return a buffer ready to write chunkSize bytes from current position    */
DECL|method|allocateOutputBuffer (int bufferLen)
specifier|protected
name|ByteBuffer
name|allocateOutputBuffer
parameter_list|(
name|int
name|bufferLen
parameter_list|)
block|{
comment|/**      * When startBufferWithZero, will prepare a buffer as:---------------      * otherwise, the buffer will be like:             ___TO--BE--WRITTEN___,      * and in the beginning, dummy data are prefixed, to simulate a buffer of      * position> 0.      */
name|int
name|startOffset
init|=
name|startBufferWithZero
condition|?
literal|0
else|:
literal|11
decl_stmt|;
comment|// 11 is arbitrary
name|int
name|allocLen
init|=
name|startOffset
operator|+
name|bufferLen
operator|+
name|startOffset
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|usingDirectBuffer
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|allocLen
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|allocLen
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|startOffset
operator|+
name|bufferLen
argument_list|)
expr_stmt|;
name|fillDummyData
argument_list|(
name|buffer
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
name|startBufferWithZero
operator|=
operator|!
name|startBufferWithZero
expr_stmt|;
return|return
name|buffer
return|;
block|}
comment|/**    * Prepare data chunks for each data unit, by generating random data.    * @return    */
DECL|method|prepareDataChunksForEncoding ()
specifier|protected
name|ECChunk
index|[]
name|prepareDataChunksForEncoding
parameter_list|()
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|numDataUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunks
index|[
name|i
index|]
operator|=
name|generateDataChunk
argument_list|()
expr_stmt|;
block|}
return|return
name|chunks
return|;
block|}
comment|/**    * Generate data chunk by making random data.    * @return    */
DECL|method|generateDataChunk ()
specifier|protected
name|ECChunk
name|generateDataChunk
parameter_list|()
block|{
name|ByteBuffer
name|buffer
init|=
name|allocateOutputBuffer
argument_list|(
name|chunkSize
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|buffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|generateData
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
operator|new
name|ECChunk
argument_list|(
name|buffer
argument_list|)
return|;
block|}
comment|/**    * Fill len of dummy data in the buffer at the current position.    * @param buffer    * @param len    */
DECL|method|fillDummyData (ByteBuffer buffer, int len)
specifier|protected
name|void
name|fillDummyData
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|dummy
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|RAND
operator|.
name|nextBytes
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
DECL|method|generateData (int len)
specifier|protected
name|byte
index|[]
name|generateData
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|RAND
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
comment|/**    * Prepare parity chunks for encoding, each chunk for each parity unit.    * @return    */
DECL|method|prepareParityChunksForEncoding ()
specifier|protected
name|ECChunk
index|[]
name|prepareParityChunksForEncoding
parameter_list|()
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|numParityUnits
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunks
index|[
name|i
index|]
operator|=
name|allocateOutputChunk
argument_list|()
expr_stmt|;
block|}
return|return
name|chunks
return|;
block|}
comment|/**    * Prepare output chunks for decoding, each output chunk for each erased    * chunk.    * @return    */
DECL|method|prepareOutputChunksForDecoding ()
specifier|protected
name|ECChunk
index|[]
name|prepareOutputChunksForDecoding
parameter_list|()
block|{
name|ECChunk
index|[]
name|chunks
init|=
operator|new
name|ECChunk
index|[
name|erasedDataIndexes
operator|.
name|length
operator|+
name|erasedParityIndexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunks
index|[
name|i
index|]
operator|=
name|allocateOutputChunk
argument_list|()
expr_stmt|;
block|}
return|return
name|chunks
return|;
block|}
comment|/**    * Convert an array of this chunks to an array of byte array.    * Note the chunk buffers are not affected.    * @param chunks    * @return an array of byte array    */
DECL|method|toArrays (ECChunk[] chunks)
specifier|protected
name|byte
index|[]
index|[]
name|toArrays
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|bytesArr
init|=
operator|new
name|byte
index|[
name|chunks
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytesArr
index|[
name|i
index|]
operator|=
name|chunks
index|[
name|i
index|]
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
return|return
name|bytesArr
return|;
block|}
comment|/**    * Make some chunk messy or not correct any more    * @param chunks    */
DECL|method|corruptSomeChunk (ECChunk[] chunks)
specifier|protected
name|void
name|corruptSomeChunk
parameter_list|(
name|ECChunk
index|[]
name|chunks
parameter_list|)
block|{
name|int
name|idx
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|chunks
operator|.
name|length
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|chunks
index|[
name|idx
index|]
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|position
argument_list|(
name|buffer
operator|.
name|position
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

