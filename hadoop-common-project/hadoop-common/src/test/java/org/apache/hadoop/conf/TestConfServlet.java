begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Basic test case that the ConfServlet can write configuration  * to its output in XML and JSON format.  */
end_comment

begin_class
DECL|class|TestConfServlet
specifier|public
class|class
name|TestConfServlet
block|{
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"testconfservlet.key"
decl_stmt|;
DECL|field|TEST_VAL
specifier|private
specifier|static
specifier|final
name|String
name|TEST_VAL
init|=
literal|"testval"
decl_stmt|;
DECL|field|TEST_PROPERTIES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|TEST_PROPERTIES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|TEST_FORMATS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|TEST_FORMATS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initTestProperties ()
specifier|public
specifier|static
name|void
name|initTestProperties
parameter_list|()
block|{
name|TEST_PROPERTIES
operator|.
name|put
argument_list|(
literal|"test.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|TEST_PROPERTIES
operator|.
name|put
argument_list|(
literal|"test.key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|TEST_PROPERTIES
operator|.
name|put
argument_list|(
literal|"test.key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|TEST_FORMATS
operator|.
name|put
argument_list|(
name|ConfServlet
operator|.
name|FORMAT_XML
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
name|TEST_FORMATS
operator|.
name|put
argument_list|(
name|ConfServlet
operator|.
name|FORMAT_JSON
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestConf ()
specifier|private
name|Configuration
name|getTestConf
parameter_list|()
block|{
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|testConf
operator|.
name|set
argument_list|(
name|TEST_KEY
argument_list|,
name|TEST_VAL
argument_list|)
expr_stmt|;
return|return
name|testConf
return|;
block|}
DECL|method|getMultiPropertiesConf ()
specifier|private
name|Configuration
name|getMultiPropertiesConf
parameter_list|()
block|{
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|TEST_PROPERTIES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|testConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|TEST_PROPERTIES
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testConf
return|;
block|}
annotation|@
name|Test
DECL|method|testParseHeaders ()
specifier|public
name|void
name|testParseHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|verifyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|verifyMap
operator|.
name|put
argument_list|(
literal|"text/plain"
argument_list|,
name|ConfServlet
operator|.
name|FORMAT_XML
argument_list|)
expr_stmt|;
name|verifyMap
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|ConfServlet
operator|.
name|FORMAT_XML
argument_list|)
expr_stmt|;
name|verifyMap
operator|.
name|put
argument_list|(
literal|"text/xml"
argument_list|,
name|ConfServlet
operator|.
name|FORMAT_XML
argument_list|)
expr_stmt|;
name|verifyMap
operator|.
name|put
argument_list|(
literal|"application/xml"
argument_list|,
name|ConfServlet
operator|.
name|FORMAT_XML
argument_list|)
expr_stmt|;
name|verifyMap
operator|.
name|put
argument_list|(
literal|"application/json"
argument_list|,
name|ConfServlet
operator|.
name|FORMAT_JSON
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|contentTypeExpected
range|:
name|verifyMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|contenTypeActual
init|=
name|verifyMap
operator|.
name|get
argument_list|(
name|contentTypeExpected
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|contentTypeExpected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|contenTypeActual
argument_list|,
name|ConfServlet
operator|.
name|parseAcceptHeader
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyGetProperty (Configuration conf, String format, String propertyName)
specifier|private
name|void
name|verifyGetProperty
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
name|ConfServlet
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|=
operator|new
name|ConfServlet
argument_list|()
expr_stmt|;
name|ServletConfig
name|servletConf
init|=
name|mock
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|service
operator|.
name|init
argument_list|(
name|servletConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|HttpServer2
operator|.
name|CONF_CONTEXT_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_FORMATS
operator|.
name|get
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|sw
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pw
argument_list|)
expr_stmt|;
comment|// response request
name|service
operator|.
name|doGet
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// if property name is null or empty, expect all properties
comment|// in the response
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|TEST_PROPERTIES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|&&
name|result
operator|.
name|contains
argument_list|(
name|TEST_PROPERTIES
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if property name is not empty and property is found
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|TEST_PROPERTIES
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// if property name is not empty, and it's not in configuration
comment|// expect proper error code and error message is set to the response
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|"Property "
operator|+
name|propertyName
operator|+
literal|" not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|sw
operator|!=
literal|null
condition|)
block|{
name|sw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pw
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGetProperty ()
specifier|public
name|void
name|testGetProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configurations
init|=
name|getMultiPropertiesConf
argument_list|()
decl_stmt|;
comment|// list various of property names
name|String
index|[]
name|testKeys
init|=
operator|new
name|String
index|[]
block|{
literal|"test.key1"
block|,
literal|"test.unknown.key"
block|,
literal|""
block|,
literal|"test.key2"
block|,
literal|null
block|}
decl_stmt|;
for|for
control|(
name|String
name|format
range|:
name|TEST_FORMATS
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|key
range|:
name|testKeys
control|)
block|{
name|verifyGetProperty
argument_list|(
name|configurations
argument_list|,
name|format
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testWriteJson ()
specifier|public
name|void
name|testWriteJson
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ConfServlet
operator|.
name|writeResponse
argument_list|(
name|getTestConf
argument_list|()
argument_list|,
name|sw
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|foundSetting
init|=
literal|false
decl_stmt|;
name|Object
name|parsed
init|=
name|JSON
operator|.
name|parse
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Object
index|[]
name|properties
init|=
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
operator|)
name|parsed
operator|)
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|properties
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propertyInfo
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|propertyInfo
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|propertyInfo
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|resource
init|=
operator|(
name|String
operator|)
name|propertyInfo
operator|.
name|get
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"k: "
operator|+
name|key
operator|+
literal|" v: "
operator|+
name|val
operator|+
literal|" r: "
operator|+
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|TEST_KEY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|TEST_VAL
operator|.
name|equals
argument_list|(
name|val
argument_list|)
operator|&&
literal|"programmatically"
operator|.
name|equals
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|foundSetting
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundSetting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteXml ()
specifier|public
name|void
name|testWriteXml
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ConfServlet
operator|.
name|writeResponse
argument_list|(
name|getTestConf
argument_list|()
argument_list|,
name|sw
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NodeList
name|nameNodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|boolean
name|foundSetting
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|nameNode
init|=
name|nameNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|nameNode
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|TEST_KEY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|foundSetting
operator|=
literal|true
expr_stmt|;
name|Element
name|propertyElem
init|=
operator|(
name|Element
operator|)
name|nameNode
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|propertyElem
operator|.
name|getElementsByTagName
argument_list|(
literal|"value"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_VAL
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundSetting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadFormat ()
specifier|public
name|void
name|testBadFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|ConfServlet
operator|.
name|writeResponse
argument_list|(
name|getTestConf
argument_list|()
argument_list|,
name|sw
argument_list|,
literal|"not a format"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writeResponse with bad format didn't throw!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfServlet
operator|.
name|BadFormatException
name|bfe
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOzoneConfigTagCommands ()
specifier|public
name|void
name|testOzoneConfigTagCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|pw
init|=
literal|null
decl_stmt|;
name|ConfServlet
name|service
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|=
operator|new
name|ConfServlet
argument_list|()
expr_stmt|;
name|ServletContext
name|context
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletConfig
name|servletConf
init|=
name|mock
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|service
operator|.
name|init
argument_list|(
name|servletConf
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|mock
argument_list|(
name|OzoneConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAttribute
argument_list|(
name|HttpServer2
operator|.
name|CONF_CONTEXT_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|service
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cmd"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"getOzoneTags"
argument_list|)
expr_stmt|;
name|HttpServletResponse
name|response
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|sw
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pw
argument_list|)
expr_stmt|;
comment|// response request
name|service
operator|.
name|doGet
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
for|for
control|(
name|OzonePropertyTag
name|ozoneTag
range|:
name|OzonePropertyTag
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|ozoneTag
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"cmd"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"badCommand"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"OZONE,CLIENT"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"group"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"ozone"
argument_list|)
expr_stmt|;
name|service
operator|.
name|doGet
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|response
argument_list|)
operator|.
name|sendError
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|"badCommand is not a valid command."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sw
operator|!=
literal|null
condition|)
block|{
name|sw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pw
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

