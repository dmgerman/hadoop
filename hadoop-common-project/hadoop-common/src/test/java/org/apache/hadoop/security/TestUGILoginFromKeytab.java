begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosTicket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_comment
comment|/**  * Verify UGI login from keytab. Check that the UGI is  * configured to use keytab to catch regressions like  * HADOOP-10786.  */
end_comment

begin_class
DECL|class|TestUGILoginFromKeytab
specifier|public
class|class
name|TestUGILoginFromKeytab
block|{
DECL|field|kdc
specifier|private
name|MiniKdc
name|kdc
decl_stmt|;
DECL|field|workDir
specifier|private
name|File
name|workDir
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
specifier|final
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|startMiniKdc ()
specifier|public
name|void
name|startMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This setting below is required. If not enabled, UGI will abort
comment|// any attempt to loginUserFromKeytab.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setShouldRenewImmediatelyForTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|workDir
operator|=
name|folder
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|kdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|MiniKdc
operator|.
name|createConf
argument_list|()
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|kdc
operator|.
name|start
argument_list|()
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopMiniKdc ()
specifier|public
name|void
name|stopMiniKdc
parameter_list|()
block|{
if|if
condition|(
name|kdc
operator|!=
literal|null
condition|)
block|{
name|kdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Login from keytab using the MiniKDC and verify the UGI can successfully    * relogin from keytab as well. This will catch regressions like HADOOP-10786.    */
annotation|@
name|Test
DECL|method|testUGILoginFromKeytab ()
specifier|public
name|void
name|testUGILoginFromKeytab
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|principal
init|=
literal|"foo"
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"foo.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"UGI should be configured to login from keytab"
argument_list|,
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify relogin from keytab.
name|User
name|user
init|=
name|getUser
argument_list|(
name|ugi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|firstLogin
init|=
name|user
operator|.
name|getLastLogin
argument_list|()
decl_stmt|;
specifier|final
name|LoginContext
name|login1
init|=
name|user
operator|.
name|getLogin
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|login1
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
specifier|final
name|long
name|secondLogin
init|=
name|user
operator|.
name|getLastLogin
argument_list|()
decl_stmt|;
specifier|final
name|LoginContext
name|login2
init|=
name|user
operator|.
name|getLogin
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"User should have been able to relogin from keytab"
argument_list|,
name|secondLogin
operator|>
name|firstLogin
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|login2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|login1
argument_list|,
name|login2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetUGIFromKnownSubject ()
specifier|public
name|void
name|testGetUGIFromKnownSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi1
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
name|ugi1
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|LoginContext
name|login
init|=
name|user
operator|.
name|getLogin
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|login
argument_list|)
expr_stmt|;
comment|// User instance and/or login context should not change.
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|user
argument_list|,
name|getUser
argument_list|(
name|ugi2
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|login
argument_list|,
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetUGIFromExternalSubject ()
specifier|public
name|void
name|testGetUGIFromExternalSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
name|ugi
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|removeUser
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// first call to get the ugi should add the User instance w/o a login
comment|// context.
name|UserGroupInformation
name|ugi1
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|subject
argument_list|,
name|ugi1
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
comment|// subsequent call should not change the existing User instance.
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|subject
argument_list|,
name|ugi2
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|user
argument_list|,
name|getUser
argument_list|(
name|ugi2
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetUGIFromExternalSubjectWithLogin ()
specifier|public
name|void
name|testGetUGIFromExternalSubjectWithLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// alter the User's login context to appear to be a foreign and
comment|// unmanagable context.
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
name|ugi
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|getUser
argument_list|(
name|subject
argument_list|)
decl_stmt|;
specifier|final
name|LoginContext
name|dummyLogin
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LoginContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|user
operator|.
name|setLogin
argument_list|(
name|dummyLogin
argument_list|)
expr_stmt|;
comment|// nothing should change.
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|subject
argument_list|,
name|ugi2
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|user
argument_list|,
name|getUser
argument_list|(
name|ugi2
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|dummyLogin
argument_list|,
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUGIRefreshFromKeytab ()
specifier|public
name|void
name|testUGIRefreshFromKeytab
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
literal|"bar"
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"bar.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|UserGroupInformation
operator|.
name|isKerberosKeyTabLoginRenewalEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|UserGroupInformation
operator|.
name|getKerberosLoginRenewalExecutor
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUGIRefreshFromKeytabDisabled ()
specifier|public
name|void
name|testUGIRefreshFromKeytabDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|UserGroupInformation
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
literal|"bar"
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"bar.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|UserGroupInformation
operator|.
name|isKerberosKeyTabLoginRenewalEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|UserGroupInformation
operator|.
name|getKerberosLoginRenewalExecutor
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getTicket (UserGroupInformation ugi)
specifier|private
specifier|static
name|KerberosTicket
name|getTicket
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|Set
argument_list|<
name|KerberosTicket
argument_list|>
name|tickets
init|=
name|ugi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrivateCredentials
argument_list|(
name|KerberosTicket
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|tickets
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|tickets
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
comment|// verify ugi has expected principal, a keytab, and has a ticket for
comment|// the expected principal.
DECL|method|checkTicketAndKeytab (UserGroupInformation ugi, KerberosPrincipal principal, boolean expectIsKeytab)
specifier|private
specifier|static
name|KerberosTicket
name|checkTicketAndKeytab
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|KerberosPrincipal
name|principal
parameter_list|,
name|boolean
name|expectIsKeytab
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong principal"
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"is not keytab"
argument_list|,
name|expectIsKeytab
argument_list|,
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosTicket
name|ticket
init|=
name|getTicket
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"no ticket"
argument_list|,
name|ticket
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong principal"
argument_list|,
name|principal
argument_list|,
name|ticket
operator|.
name|getClient
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ticket
return|;
block|}
annotation|@
name|Test
DECL|method|testReloginForUGIFromSubject ()
specifier|public
name|void
name|testReloginForUGIFromSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal1
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|File
name|keytab1
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user1.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab1
argument_list|,
name|principal1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosPrincipal
name|principal2
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|File
name|keytab2
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user2.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab2
argument_list|,
name|principal2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Login a user and remove the User instance so it looks like an
comment|// "external" subject.
specifier|final
name|Subject
name|extSubject
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal2
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab2
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|removeUser
argument_list|(
name|extSubject
argument_list|)
expr_stmt|;
comment|// Login another user.
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal1
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|loginUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|KerberosTicket
name|loginTicket
init|=
name|checkTicketAndKeytab
argument_list|(
name|loginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// get the ugi for the previously logged in subject.
name|UserGroupInformation
name|extSubjectUser
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|extSubject
argument_list|)
decl_stmt|;
name|KerberosTicket
name|ticket
init|=
name|checkTicketAndKeytab
argument_list|(
name|extSubjectUser
argument_list|,
name|principal2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// verify login user got a new ticket.
name|loginUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|KerberosTicket
name|newLoginTicket
init|=
name|checkTicketAndKeytab
argument_list|(
name|loginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|loginTicket
operator|.
name|getAuthTime
argument_list|()
argument_list|,
name|newLoginTicket
operator|.
name|getAuthTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify an "external" subject ticket does not change.
name|extSubjectUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|ticket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|extSubjectUser
argument_list|,
name|principal2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify subject ugi relogin did not affect the login user.
name|Assert
operator|.
name|assertSame
argument_list|(
name|newLoginTicket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|loginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReloginForLoginFromSubject ()
specifier|public
name|void
name|testReloginForLoginFromSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal1
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|File
name|keytab1
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user1.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab1
argument_list|,
name|principal1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosPrincipal
name|principal2
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|File
name|keytab2
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user2.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab2
argument_list|,
name|principal2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// login principal1 with a keytab.
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal1
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|originalLoginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|getUser
argument_list|(
name|originalLoginUser
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
name|originalLoginUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|KerberosTicket
name|originalLoginUserTicket
init|=
name|checkTicketAndKeytab
argument_list|(
name|originalLoginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// login principal2 from a subject with keytab.  it's external so
comment|// no login context should be attached to the user.
specifier|final
name|Subject
name|subject
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal2
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab2
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|removeUser
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// verify the new login user is external.
name|UserGroupInformation
operator|.
name|loginUserFromSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getUser
argument_list|(
name|subject
argument_list|)
operator|.
name|getLogin
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|extLoginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|KerberosTicket
name|extLoginUserTicket
init|=
name|checkTicketAndKeytab
argument_list|(
name|extLoginUser
argument_list|,
name|principal2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// verify subject-based login user does not get a new ticket, and
comment|// original login user not affected.
name|extLoginUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|extLoginUserTicket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|extLoginUser
argument_list|,
name|principal2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|originalLoginUserTicket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|originalLoginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify original login user gets a new ticket, new login user
comment|// not affected.
name|originalLoginUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|originalLoginUserTicket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|originalLoginUser
argument_list|,
name|principal1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|extLoginUserTicket
argument_list|,
name|checkTicketAndKeytab
argument_list|(
name|extLoginUser
argument_list|,
name|principal2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReloginAfterFailedRelogin ()
specifier|public
name|void
name|testReloginAfterFailedRelogin
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user1.keytab"
argument_list|)
decl_stmt|;
name|File
name|keytabBackup
init|=
operator|new
name|File
argument_list|(
name|keytab
operator|+
literal|".backup"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|loginUser
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|checkTicketAndKeytab
argument_list|(
name|loginUser
argument_list|,
name|principal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// move the keytab to induce a relogin failure.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keytab
operator|.
name|renameTo
argument_list|(
name|keytabBackup
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|loginUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"relogin should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KerberosAuthException
name|kae
parameter_list|)
block|{
comment|// expected.
block|}
comment|// even though no KeyTab object, ugi should know it's keytab based.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|loginUser
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|getTicket
argument_list|(
name|loginUser
argument_list|)
argument_list|)
expr_stmt|;
comment|// move keytab back to enable relogin to succeed.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keytabBackup
operator|.
name|renameTo
argument_list|(
name|keytab
argument_list|)
argument_list|)
expr_stmt|;
name|loginUser
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|checkTicketAndKeytab
argument_list|(
name|loginUser
argument_list|,
name|principal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// verify getting concurrent relogins blocks to avoid indeterminate
comment|// credentials corruption, but getting a ugi for the subject does not block.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testConcurrentRelogin ()
specifier|public
name|void
name|testConcurrentRelogin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosPrincipal
name|principal
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"testUser"
argument_list|)
decl_stmt|;
name|File
name|keytab
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"user1.keytab"
argument_list|)
decl_stmt|;
name|kdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a keytab ugi.
specifier|final
name|UserGroupInformation
name|loginUgi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|keytab
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|loginUgi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loginUgi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new ugi instance based on subject from the logged in user.
specifier|final
name|UserGroupInformation
name|clonedUgi
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|loginUgi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|clonedUgi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|clonedUgi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
comment|// cause first relogin to block on a barrier in logout to verify relogins
comment|// are atomic.
name|User
name|user
init|=
name|getUser
argument_list|(
name|loginUgi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LoginContext
name|spyLogin
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|user
operator|.
name|getLogin
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|setLogin
argument_list|(
name|spyLogin
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|invocation
operator|.
name|callRealMethod
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyLogin
argument_list|)
operator|.
name|logout
argument_list|()
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|relogin
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"relogin"
argument_list|)
expr_stmt|;
name|loginUgi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// wait for the thread to block on the barrier in the logout of the
comment|// relogin.
name|assertTrue
argument_list|(
literal|"first relogin didn't block"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// although the logout removed the keytab instance, verify the ugi
comment|// knows from its login params that it is supposed to be from a keytab.
name|assertTrue
argument_list|(
name|clonedUgi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
comment|// another concurrent re-login should block.
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyLogin
argument_list|)
operator|.
name|logout
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyLogin
argument_list|)
operator|.
name|login
argument_list|()
expr_stmt|;
name|Future
argument_list|<
name|UserGroupInformation
argument_list|>
name|clonedRelogin
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"clonedRelogin"
argument_list|)
expr_stmt|;
name|clonedUgi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
return|return
name|clonedUgi
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|clonedRelogin
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"second relogin didn't block!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// expected
block|}
comment|// concurrent UGI instantiation should not block and again should
comment|// know it's supposed to be from a keytab.
name|loginUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clonedUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ugi
operator|.
name|isFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// second relogin should still be blocked until the original relogin
comment|// is blocked.
name|assertFalse
argument_list|(
name|clonedRelogin
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|relogin
operator|.
name|get
argument_list|()
expr_stmt|;
name|clonedRelogin
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|method|getUser (Subject subject)
specifier|private
name|User
name|getUser
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|Iterator
argument_list|<
name|User
argument_list|>
name|iter
init|=
name|subject
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|iter
operator|.
name|hasNext
argument_list|()
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|removeUser (Subject subject)
specifier|private
name|void
name|removeUser
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
comment|// remove User instance so it appears to not be logged in.
for|for
control|(
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|iter
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|instanceof
name|User
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

