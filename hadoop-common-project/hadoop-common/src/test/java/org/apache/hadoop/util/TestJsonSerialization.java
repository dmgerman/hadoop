begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_comment
comment|/**  * Test the JSON serialization helper.  */
end_comment

begin_class
DECL|class|TestJsonSerialization
specifier|public
class|class
name|TestJsonSerialization
extends|extends
name|HadoopTestBase
block|{
DECL|field|serDeser
specifier|private
specifier|final
name|JsonSerialization
argument_list|<
name|KeyVal
argument_list|>
name|serDeser
init|=
operator|new
name|JsonSerialization
argument_list|<>
argument_list|(
name|KeyVal
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|KeyVal
name|source
init|=
operator|new
name|KeyVal
argument_list|(
literal|"key"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
DECL|class|KeyVal
specifier|private
specifier|static
class|class
name|KeyVal
implements|implements
name|Serializable
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|KeyVal (String name, String value)
name|KeyVal
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|KeyVal ()
name|KeyVal
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SimpleJson{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", value='"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KeyVal
name|that
init|=
operator|(
name|KeyVal
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|that
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStringRoundTrip ()
specifier|public
name|void
name|testStringRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|wire
init|=
name|serDeser
operator|.
name|toJson
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|KeyVal
name|unmarshalled
init|=
name|serDeser
operator|.
name|fromJson
argument_list|(
name|wire
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to unmarshall: "
operator|+
name|wire
argument_list|,
name|source
argument_list|,
name|unmarshalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBytesRoundTrip ()
specifier|public
name|void
name|testBytesRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|wire
init|=
name|serDeser
operator|.
name|toBytes
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|KeyVal
name|unmarshalled
init|=
name|serDeser
operator|.
name|fromBytes
argument_list|(
name|wire
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|source
argument_list|,
name|unmarshalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadBytesRoundTrip ()
specifier|public
name|void
name|testBadBytesRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|JsonParseException
operator|.
name|class
argument_list|,
literal|"token"
argument_list|,
parameter_list|()
lambda|->
name|serDeser
operator|.
name|fromBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloneViaJson ()
specifier|public
name|void
name|testCloneViaJson
parameter_list|()
throws|throws
name|Throwable
block|{
name|KeyVal
name|unmarshalled
init|=
name|serDeser
operator|.
name|fromInstance
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|source
argument_list|,
name|unmarshalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileRoundTrip ()
specifier|public
name|void
name|testFileRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"Keyval"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
try|try
block|{
name|serDeser
operator|.
name|save
argument_list|(
name|tempFile
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|source
argument_list|,
name|serDeser
operator|.
name|load
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEmptyFile ()
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"Keyval"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
try|try
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
literal|"empty"
argument_list|,
parameter_list|()
lambda|->
name|serDeser
operator|.
name|load
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileSystemRoundTrip ()
specifier|public
name|void
name|testFileSystemRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"Keyval"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|tempFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|serDeser
operator|.
name|save
argument_list|(
name|fs
argument_list|,
name|tempPath
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|source
argument_list|,
name|serDeser
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tempPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileSystemEmptyPath ()
specifier|public
name|void
name|testFileSystemEmptyPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"Keyval"
argument_list|,
literal|".json"
argument_list|)
decl_stmt|;
name|Path
name|tempPath
init|=
operator|new
name|Path
argument_list|(
name|tempFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|serDeser
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tempPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|serDeser
operator|.
name|load
argument_list|(
name|fs
argument_list|,
name|tempPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tempPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

