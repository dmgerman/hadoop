begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestProxyUserFromEnv
specifier|public
class|class
name|TestProxyUserFromEnv
block|{
comment|/** Test HADOOP_PROXY_USER for impersonation */
annotation|@
name|Test
DECL|method|testProxyUserFromEnvironment ()
specifier|public
name|void
name|testProxyUserFromEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|proxyUser
init|=
literal|"foo.bar"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|UserGroupInformation
operator|.
name|HADOOP_PROXY_USER
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|proxyUser
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|realUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|realUgi
argument_list|)
expr_stmt|;
comment|// get the expected real user name
name|Process
name|pp
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"whoami"
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pp
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|realUser
init|=
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// On Windows domain joined machine, whoami returns the username
comment|// in the DOMAIN\\username format, so we trim the domain part before
comment|// the comparison. We don't have to special case for Windows
comment|// given that Unix systems do not allow slashes in usernames.
name|int
name|backslashIndex
init|=
name|realUser
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
decl_stmt|;
if|if
condition|(
name|backslashIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|realUser
operator|=
name|realUser
operator|.
name|substring
argument_list|(
name|backslashIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|realUser
argument_list|,
name|realUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

