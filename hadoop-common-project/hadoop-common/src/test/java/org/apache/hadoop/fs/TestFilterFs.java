begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFilterFs
specifier|public
class|class
name|TestFilterFs
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|FileSystem
operator|.
name|LOG
decl_stmt|;
DECL|class|DontCheck
specifier|public
specifier|static
class|class
name|DontCheck
block|{
DECL|method|checkScheme (URI uri, String supportedScheme)
specifier|public
name|void
name|checkScheme
parameter_list|(
name|URI
name|uri
parameter_list|,
name|String
name|supportedScheme
parameter_list|)
block|{ }
DECL|method|listStatusIterator (Path f)
specifier|public
name|Iterator
argument_list|<
name|FileStatus
argument_list|>
name|listStatusIterator
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|listLocatedStatus (final Path f)
specifier|public
name|Iterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFilterFileSystem ()
specifier|public
name|void
name|testFilterFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Method
name|m
range|:
name|AbstractFileSystem
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Modifier
operator|.
name|isFinal
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|DontCheck
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exc
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|m
argument_list|)
expr_stmt|;
try|try
block|{
name|FilterFs
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|exc2
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"FilterFileSystem doesn't implement "
operator|+
name|m
argument_list|)
expr_stmt|;
throw|throw
name|exc2
throw|;
block|}
block|}
block|}
block|}
comment|// Test that FilterFs will accept an AbstractFileSystem to be filtered which
comment|// has an optional authority, such as ViewFs
annotation|@
name|Test
DECL|method|testFilteringWithNonrequiredAuthority ()
specifier|public
name|void
name|testFilteringWithNonrequiredAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"custom"
argument_list|,
literal|"/mnt"
argument_list|,
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|)
expr_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"viewfs://custom/"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|FilterFs
argument_list|(
name|fc
operator|.
name|getDefaultFileSystem
argument_list|()
argument_list|)
block|{}
expr_stmt|;
block|}
block|}
end_class

end_unit

