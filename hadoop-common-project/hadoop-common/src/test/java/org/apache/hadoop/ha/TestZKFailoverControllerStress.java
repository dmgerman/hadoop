begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Stress test for ZKFailoverController.  * Starts multiple ZKFCs for dummy services, and then performs many automatic  * failovers. While doing so, ensures that a fake "shared resource"  * (simulating the shared edits dir) is only owned by one service at a time.   */
end_comment

begin_class
DECL|class|TestZKFailoverControllerStress
specifier|public
class|class
name|TestZKFailoverControllerStress
extends|extends
name|ClientBaseWithFixes
block|{
DECL|field|STRESS_RUNTIME_SECS
specifier|private
specifier|static
specifier|final
name|int
name|STRESS_RUNTIME_SECS
init|=
literal|30
decl_stmt|;
DECL|field|EXTRA_TIMEOUT_SECS
specifier|private
specifier|static
specifier|final
name|int
name|EXTRA_TIMEOUT_SECS
init|=
literal|10
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniZKFCCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setupConfAndServices ()
specifier|public
name|void
name|setupConfAndServices
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ZKFailoverController
operator|.
name|ZK_QUORUM_KEY
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
operator|new
name|MiniZKFCCluster
argument_list|(
name|conf
argument_list|,
name|getServer
argument_list|(
name|serverFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopCluster ()
specifier|public
name|void
name|stopCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simply fail back and forth between two services for the    * configured amount of time, via expiring their ZK sessions.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
operator|(
name|STRESS_RUNTIME_SECS
operator|+
name|EXTRA_TIMEOUT_SECS
expr|)
operator|*
literal|1000
block|)
DECL|method|testExpireBackAndForth ()
specifier|public
name|void
name|testExpireBackAndForth
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|runFor
init|=
name|STRESS_RUNTIME_SECS
operator|*
literal|1000
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|st
operator|<
name|runFor
condition|)
block|{
comment|// flip flop the services back and forth
name|int
name|from
init|=
name|i
operator|%
literal|2
decl_stmt|;
name|int
name|to
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|2
decl_stmt|;
comment|// Expire one service, it should fail over to the other
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over via expiration from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|expireAndVerifyFailover
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Randomly expire the ZK sessions of the two ZKFCs. This differs    * from the above test in that it is not a controlled failover -    * we just do random expirations and expect neither one to ever    * generate fatal exceptions.    */
end_comment

begin_annotation
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
operator|(
name|STRESS_RUNTIME_SECS
operator|+
name|EXTRA_TIMEOUT_SECS
expr|)
end_annotation

begin_expr_stmt
operator|*
literal|1000
end_expr_stmt

begin_function
unit|)
DECL|method|testRandomExpirations ()
specifier|public
name|void
name|testRandomExpirations
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|runFor
init|=
name|STRESS_RUNTIME_SECS
operator|*
literal|1000
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
while|while
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|st
operator|<
name|runFor
condition|)
block|{
name|cluster
operator|.
name|getTestContext
argument_list|()
operator|.
name|checkException
argument_list|()
expr_stmt|;
name|int
name|targetIdx
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ActiveStandbyElector
name|target
init|=
name|cluster
operator|.
name|getElector
argument_list|(
name|targetIdx
argument_list|)
decl_stmt|;
name|long
name|sessId
init|=
name|target
operator|.
name|getZKSessionIdForTests
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessId
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expiring session %x for svc %d"
argument_list|,
name|sessId
argument_list|,
name|targetIdx
argument_list|)
argument_list|)
expr_stmt|;
name|getServer
argument_list|(
name|serverFactory
argument_list|)
operator|.
name|closeSession
argument_list|(
name|sessId
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Have the services fail their health checks half the time,    * causing the master role to bounce back and forth in the    * cluster. Meanwhile, causes ZK to disconnect clients every    * 50ms, to trigger the retry code and failures to become active.    */
end_comment

begin_annotation
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
operator|(
name|STRESS_RUNTIME_SECS
operator|+
name|EXTRA_TIMEOUT_SECS
expr|)
end_annotation

begin_expr_stmt
operator|*
literal|1000
end_expr_stmt

begin_function
unit|)
DECL|method|testRandomHealthAndDisconnects ()
specifier|public
name|void
name|testRandomHealthAndDisconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|runFor
init|=
name|STRESS_RUNTIME_SECS
operator|*
literal|1000
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|RandomlyThrow
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|cluster
operator|.
name|getService
argument_list|(
literal|0
argument_list|)
operator|.
name|proxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|RandomlyThrow
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|cluster
operator|.
name|getService
argument_list|(
literal|1
argument_list|)
operator|.
name|proxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_FC_ELECTOR_ZK_OP_RETRIES_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Don't start until after the above mocking. Otherwise we can get
comment|// Mockito errors if the HM calls the proxy in the middle of
comment|// setting up the mock.
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
while|while
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|st
operator|<
name|runFor
condition|)
block|{
name|cluster
operator|.
name|getTestContext
argument_list|()
operator|.
name|checkException
argument_list|()
expr_stmt|;
name|serverFactory
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Randomly throw an exception half the time the method is called    */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|RandomlyThrow
specifier|private
specifier|static
class|class
name|RandomlyThrow
implements|implements
name|Answer
block|{
DECL|field|r
specifier|private
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|svcIdx
specifier|private
specifier|final
name|int
name|svcIdx
decl_stmt|;
DECL|method|RandomlyThrow (int svcIdx)
specifier|public
name|RandomlyThrow
parameter_list|(
name|int
name|svcIdx
parameter_list|)
block|{
name|this
operator|.
name|svcIdx
operator|=
name|svcIdx
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Throwing an exception for svc "
operator|+
name|svcIdx
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"random failure"
argument_list|)
throw|;
block|}
return|return
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
end_class

unit|}
end_unit

