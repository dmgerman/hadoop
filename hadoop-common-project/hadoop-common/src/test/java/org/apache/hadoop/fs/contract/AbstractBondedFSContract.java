begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_comment
comment|/**  * This is a filesystem contract for any class that bonds to a filesystem  * through the configuration.  *  * It looks for a definition of the test filesystem with the key  * derived from "fs.contract.test.fs.%s" -if found the value  * is converted to a URI and used to create a filesystem. If not -the  * tests are not enabled  */
end_comment

begin_class
DECL|class|AbstractBondedFSContract
specifier|public
specifier|abstract
class|class
name|AbstractBondedFSContract
extends|extends
name|AbstractFSContract
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractBondedFSContract
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Pattern for the option for test filesystems from schema    */
DECL|field|FSNAME_OPTION
specifier|public
specifier|static
specifier|final
name|String
name|FSNAME_OPTION
init|=
literal|"test.fs.%s"
decl_stmt|;
comment|/**    * Constructor: loads the authentication keys if found     * @param conf configuration to work with    */
DECL|method|AbstractBondedFSContract (Configuration conf)
specifier|protected
name|AbstractBondedFSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|fsName
specifier|private
name|String
name|fsName
decl_stmt|;
DECL|field|fsURI
specifier|private
name|URI
name|fsURI
decl_stmt|;
DECL|field|filesystem
specifier|private
name|FileSystem
name|filesystem
decl_stmt|;
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
comment|//this test is only enabled if the test FS is present
name|fsName
operator|=
name|loadFilesystemName
argument_list|(
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
operator|!
name|fsName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|fsURI
operator|=
operator|new
name|URI
argument_list|(
name|fsName
argument_list|)
expr_stmt|;
name|filesystem
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fsURI
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid URI "
operator|+
name|fsName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid URI "
operator|+
name|fsName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"skipping tests as FS name is not defined in "
operator|+
name|getFilesystemConfKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load the name of a test filesystem.    * @param schema schema to look up    * @return the filesystem name -or "" if none was defined    */
DECL|method|loadFilesystemName (String schema)
specifier|public
name|String
name|loadFilesystemName
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
return|return
name|getOption
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|FSNAME_OPTION
argument_list|,
name|schema
argument_list|)
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Get the conf key for a filesystem    */
DECL|method|getFilesystemConfKey ()
specifier|protected
name|String
name|getFilesystemConfKey
parameter_list|()
block|{
return|return
name|getConfKey
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|FSNAME_OPTION
argument_list|,
name|getScheme
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTestFileSystem ()
specifier|public
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|filesystem
return|;
block|}
annotation|@
name|Override
DECL|method|getTestPath ()
specifier|public
name|Path
name|getTestPath
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getScheme
argument_list|()
operator|+
literal|" Contract against "
operator|+
name|fsName
return|;
block|}
block|}
end_class

end_unit

