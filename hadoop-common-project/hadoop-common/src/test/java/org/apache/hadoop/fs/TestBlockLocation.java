begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestBlockLocation
specifier|public
class|class
name|TestBlockLocation
block|{
DECL|field|EMPTY_STR_ARRAY
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_STR_ARRAY
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|method|checkBlockLocation (final BlockLocation loc)
specifier|private
specifier|static
name|void
name|checkBlockLocation
parameter_list|(
specifier|final
name|BlockLocation
name|loc
parameter_list|)
throws|throws
name|Exception
block|{
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBlockLocation (final BlockLocation loc, final long offset, final long length, final boolean corrupt)
specifier|private
specifier|static
name|void
name|checkBlockLocation
parameter_list|(
specifier|final
name|BlockLocation
name|loc
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|corrupt
parameter_list|)
throws|throws
name|Exception
block|{
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
name|EMPTY_STR_ARRAY
argument_list|,
name|EMPTY_STR_ARRAY
argument_list|,
name|EMPTY_STR_ARRAY
argument_list|,
name|EMPTY_STR_ARRAY
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|corrupt
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBlockLocation (final BlockLocation loc, String[] names, String[] hosts, String[] cachedHosts, String[] topologyPaths, final long offset, final long length, final boolean corrupt)
specifier|private
specifier|static
name|void
name|checkBlockLocation
parameter_list|(
specifier|final
name|BlockLocation
name|loc
parameter_list|,
name|String
index|[]
name|names
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|cachedHosts
parameter_list|,
name|String
index|[]
name|topologyPaths
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|corrupt
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|loc
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|loc
operator|.
name|getCachedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|loc
operator|.
name|getNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|loc
operator|.
name|getTopologyPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|hosts
argument_list|,
name|loc
operator|.
name|getHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|cachedHosts
argument_list|,
name|loc
operator|.
name|getCachedHosts
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|names
argument_list|,
name|loc
operator|.
name|getNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|topologyPaths
argument_list|,
name|loc
operator|.
name|getTopologyPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|loc
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|loc
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corrupt
argument_list|,
name|loc
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call all the constructors and verify the delegation is working properly    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testBlockLocationConstructors ()
specifier|public
name|void
name|testBlockLocationConstructors
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
name|BlockLocation
name|loc
decl_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|()
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call each of the setters and verify    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testBlockLocationSetters ()
specifier|public
name|void
name|testBlockLocationSetters
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockLocation
name|loc
decl_stmt|;
name|loc
operator|=
operator|new
name|BlockLocation
argument_list|()
expr_stmt|;
comment|// Test that null sets the empty array
name|loc
operator|.
name|setHosts
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setCachedHosts
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setNames
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setTopologyPaths
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|)
expr_stmt|;
comment|// Test that not-null gets set properly
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host"
block|}
decl_stmt|;
name|String
index|[]
name|cachedHosts
init|=
operator|new
name|String
index|[]
block|{
literal|"cachedHost"
block|}
decl_stmt|;
name|String
index|[]
name|topologyPaths
init|=
operator|new
name|String
index|[]
block|{
literal|"path"
block|}
decl_stmt|;
name|loc
operator|.
name|setNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setHosts
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setCachedHosts
argument_list|(
name|cachedHosts
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setTopologyPaths
argument_list|(
name|topologyPaths
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setOffset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setCorrupt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkBlockLocation
argument_list|(
name|loc
argument_list|,
name|names
argument_list|,
name|hosts
argument_list|,
name|cachedHosts
argument_list|,
name|topologyPaths
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

