begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|TestRpcServiceProtos
operator|.
name|TestProtobufRpcHandoffProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestProtoBufRpcServerHandoff
specifier|public
class|class
name|TestProtoBufRpcServerHandoff
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProtoBufRpcServerHandoff
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|TestProtoBufRpcServerHandoffServer
name|serverImpl
init|=
operator|new
name|TestProtoBufRpcServerHandoffServer
argument_list|()
decl_stmt|;
name|BlockingService
name|blockingService
init|=
name|TestProtobufRpcHandoffProto
operator|.
name|newReflectiveBlockingService
argument_list|(
name|serverImpl
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestProtoBufRpcServerHandoffProtocol
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestProtoBufRpcServerHandoffProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|blockingService
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|1
argument_list|)
comment|// Num Handlers explicitly set to 1 for test.
operator|.
name|build
argument_list|()
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|server
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|long
name|serverStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Server started at: "
operator|+
name|address
operator|+
literal|" at time: "
operator|+
name|serverStartTime
argument_list|)
expr_stmt|;
specifier|final
name|TestProtoBufRpcServerHandoffProtocol
name|client
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestProtoBufRpcServerHandoffProtocol
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|address
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|ClientInvocationCallable
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|ClientInvocationCallable
argument_list|>
argument_list|(
name|executorService
argument_list|)
decl_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|ClientInvocationCallable
argument_list|(
name|client
argument_list|,
literal|5000l
argument_list|)
argument_list|)
expr_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|ClientInvocationCallable
argument_list|(
name|client
argument_list|,
literal|5000l
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|ClientInvocationCallable
argument_list|>
name|future1
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|ClientInvocationCallable
argument_list|>
name|future2
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|ClientInvocationCallable
name|callable1
init|=
name|future1
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClientInvocationCallable
name|callable2
init|=
name|future2
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|callable1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|callable2
argument_list|)
expr_stmt|;
comment|// Ensure the 5 second sleep responses are within a reasonable time of each
comment|// other.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|callable1
operator|.
name|endTime
operator|-
name|callable2
operator|.
name|endTime
argument_list|)
operator|<
literal|2000l
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|submitTime
operator|<
literal|7000l
argument_list|)
expr_stmt|;
block|}
DECL|class|ClientInvocationCallable
specifier|private
specifier|static
class|class
name|ClientInvocationCallable
implements|implements
name|Callable
argument_list|<
name|ClientInvocationCallable
argument_list|>
block|{
DECL|field|client
specifier|final
name|TestProtoBufRpcServerHandoffProtocol
name|client
decl_stmt|;
DECL|field|sleepTime
specifier|final
name|long
name|sleepTime
decl_stmt|;
DECL|field|result
name|TestProtos
operator|.
name|SleepResponseProto2
name|result
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
name|long
name|endTime
decl_stmt|;
DECL|method|ClientInvocationCallable ( TestProtoBufRpcServerHandoffProtocol client, long sleepTime)
specifier|private
name|ClientInvocationCallable
parameter_list|(
name|TestProtoBufRpcServerHandoffProtocol
name|client
parameter_list|,
name|long
name|sleepTime
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|sleepTime
operator|=
name|sleepTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ClientInvocationCallable
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|result
operator|=
name|client
operator|.
name|sleep
argument_list|(
literal|null
argument_list|,
name|TestProtos
operator|.
name|SleepRequestProto2
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSleepTime
argument_list|(
name|sleepTime
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|endTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"startTime="
operator|+
name|startTime
operator|+
literal|", endTime="
operator|+
name|endTime
operator|+
operator|(
name|result
operator|!=
literal|null
condition|?
literal|", result.receiveTime="
operator|+
name|result
operator|.
name|getReceiveTime
argument_list|()
operator|+
literal|", result.responseTime="
operator|+
name|result
operator|.
name|getResponseTime
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
annotation|@
name|ProtocolInfo
argument_list|(
name|protocolName
operator|=
literal|"org.apache.hadoop.ipc.TestProtoBufRpcServerHandoff$TestProtoBufRpcServerHandoffProtocol"
argument_list|,
name|protocolVersion
operator|=
literal|1
argument_list|)
DECL|interface|TestProtoBufRpcServerHandoffProtocol
specifier|public
interface|interface
name|TestProtoBufRpcServerHandoffProtocol
extends|extends
name|TestProtobufRpcHandoffProto
operator|.
name|BlockingInterface
block|{   }
DECL|class|TestProtoBufRpcServerHandoffServer
specifier|public
specifier|static
class|class
name|TestProtoBufRpcServerHandoffServer
implements|implements
name|TestProtoBufRpcServerHandoffProtocol
block|{
annotation|@
name|Override
DECL|method|sleep (RpcController controller, TestProtos.SleepRequestProto2 request)
specifier|public
name|TestProtos
operator|.
name|SleepResponseProto2
name|sleep
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TestProtos
operator|.
name|SleepRequestProto2
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|ProtobufRpcEngineCallback
name|callback
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|registerForDeferredResponse
argument_list|()
decl_stmt|;
specifier|final
name|long
name|sleepTime
init|=
name|request
operator|.
name|getSleepTime
argument_list|()
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|callback
operator|.
name|setResponse
argument_list|(
name|TestProtos
operator|.
name|SleepResponseProto2
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReceiveTime
argument_list|(
name|startTime
argument_list|)
operator|.
name|setResponseTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

