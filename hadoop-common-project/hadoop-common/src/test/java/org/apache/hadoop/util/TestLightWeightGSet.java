begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightGSet
operator|.
name|LinkedElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Testing {@link LightWeightGSet} */
end_comment

begin_class
DECL|class|TestLightWeightGSet
specifier|public
class|class
name|TestLightWeightGSet
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLightWeightGSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getRandomList (int length, int randomSeed)
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|getRandomList
parameter_list|(
name|int
name|length
parameter_list|,
name|int
name|randomSeed
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|randomSeed
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|class|TestElement
specifier|private
specifier|static
class|class
name|TestElement
implements|implements
name|LightWeightGSet
operator|.
name|LinkedElement
block|{
DECL|field|val
specifier|private
specifier|final
name|int
name|val
decl_stmt|;
DECL|field|next
specifier|private
name|LinkedElement
name|next
decl_stmt|;
DECL|method|TestElement (int val)
name|TestElement
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getVal ()
specifier|public
name|int
name|getVal
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
DECL|method|setNext (LinkedElement next)
specifier|public
name|void
name|setNext
parameter_list|(
name|LinkedElement
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|LinkedElement
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveAllViaIterator ()
specifier|public
name|void
name|testRemoveAllViaIterator
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|getRandomList
argument_list|(
literal|100
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|LightWeightGSet
argument_list|<
name|TestElement
argument_list|,
name|TestElement
argument_list|>
name|set
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|TestElement
argument_list|,
name|TestElement
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|list
control|)
block|{
name|set
operator|.
name|put
argument_list|(
operator|new
name|TestElement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|TestElement
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveSomeViaIterator ()
specifier|public
name|void
name|testRemoveSomeViaIterator
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|getRandomList
argument_list|(
literal|100
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|LightWeightGSet
argument_list|<
name|TestElement
argument_list|,
name|TestElement
argument_list|>
name|set
init|=
operator|new
name|LightWeightGSet
argument_list|<
name|TestElement
argument_list|,
name|TestElement
argument_list|>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|list
control|)
block|{
name|set
operator|.
name|put
argument_list|(
operator|new
name|TestElement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TestElement
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sum
operator|+=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getVal
argument_list|()
expr_stmt|;
block|}
name|long
name|mode
init|=
name|sum
operator|/
name|set
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing all elements above "
operator|+
name|mode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TestElement
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
name|item
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getVal
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|>
name|mode
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|TestElement
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getVal
argument_list|()
operator|<=
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

