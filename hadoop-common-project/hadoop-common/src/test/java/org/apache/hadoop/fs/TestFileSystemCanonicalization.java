begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtilsTestResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileSystemCanonicalization
specifier|public
class|class
name|TestFileSystemCanonicalization
extends|extends
name|TestCase
block|{
DECL|field|authorities
specifier|static
name|String
index|[]
name|authorities
init|=
block|{
literal|"myfs://host"
block|,
literal|"myfs://host.a"
block|,
literal|"myfs://host.a.b"
block|,   }
decl_stmt|;
DECL|field|ips
specifier|static
name|String
index|[]
name|ips
init|=
block|{
literal|"myfs://127.0.0.1"
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testSetupResolver ()
specifier|public
name|void
name|testSetupResolver
parameter_list|()
throws|throws
name|Exception
block|{
name|NetUtilsTestResolver
operator|.
name|install
argument_list|()
expr_stmt|;
block|}
comment|// no ports
annotation|@
name|Test
DECL|method|testShortAuthority ()
specifier|public
name|void
name|testShortAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialAuthority ()
specifier|public
name|void
name|testPartialAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullAuthority ()
specifier|public
name|void
name|testFullAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a.b"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// with default ports
annotation|@
name|Test
DECL|method|testShortAuthorityWithDefaultPort ()
specifier|public
name|void
name|testShortAuthorityWithDefaultPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host:123"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialAuthorityWithDefaultPort ()
specifier|public
name|void
name|testPartialAuthorityWithDefaultPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a:123"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullAuthorityWithDefaultPort ()
specifier|public
name|void
name|testFullAuthorityWithDefaultPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a.b:123"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// with non-standard ports
annotation|@
name|Test
DECL|method|testShortAuthorityWithOtherPort ()
specifier|public
name|void
name|testShortAuthorityWithOtherPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host:456"
argument_list|,
literal|"myfs://host.a.b:456"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPartialAuthorityWithOtherPort ()
specifier|public
name|void
name|testPartialAuthorityWithOtherPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a:456"
argument_list|,
literal|"myfs://host.a.b:456"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullAuthorityWithOtherPort ()
specifier|public
name|void
name|testFullAuthorityWithOtherPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host.a.b:456"
argument_list|,
literal|"myfs://host.a.b:456"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// ips
annotation|@
name|Test
DECL|method|testIpAuthority ()
specifier|public
name|void
name|testIpAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://127.0.0.1"
argument_list|,
literal|"myfs://127.0.0.1:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpAuthorityWithDefaultPort ()
specifier|public
name|void
name|testIpAuthorityWithDefaultPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://127.0.0.1:123"
argument_list|,
literal|"myfs://127.0.0.1:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpAuthorityWithOtherPort ()
specifier|public
name|void
name|testIpAuthorityWithOtherPort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://127.0.0.1:456"
argument_list|,
literal|"myfs://127.0.0.1:456"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// bad stuff
annotation|@
name|Test
DECL|method|testMismatchedSchemes ()
specifier|public
name|void
name|testMismatchedSchemes
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs2://simple"
argument_list|,
literal|"myfs2://simple:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMismatchedHosts ()
specifier|public
name|void
name|testMismatchedHosts
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://simple"
argument_list|,
literal|"myfs://simple:123"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullAuthority ()
specifier|public
name|void
name|testNullAuthority
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs:///"
argument_list|,
literal|"myfs:///"
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|authorities
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|123
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
name|ips
argument_list|,
literal|456
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthorityFromDefaultFS ()
specifier|public
name|void
name|testAuthorityFromDefaultFS
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|defaultFsKey
init|=
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getVerifiedFS
argument_list|(
literal|"myfs://host"
argument_list|,
literal|"myfs://host.a.b:123"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|defaultFsKey
argument_list|,
literal|"myfs://host"
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|defaultFsKey
argument_list|,
literal|"myfs2://host"
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|defaultFsKey
argument_list|,
literal|"myfs://host:123"
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|defaultFsKey
argument_list|,
literal|"myfs://host:456"
argument_list|)
expr_stmt|;
name|verifyPaths
argument_list|(
name|fs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myfs://"
block|}
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getVerifiedFS (String authority, String canonical)
name|FileSystem
name|getVerifiedFS
parameter_list|(
name|String
name|authority
parameter_list|,
name|String
name|canonical
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getVerifiedFS
argument_list|(
name|authority
argument_list|,
name|canonical
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
comment|// create a fs from the authority, then check its uri against the given uri
comment|// and the canonical.  then try to fetch paths using the canonical
DECL|method|getVerifiedFS (String authority, String canonical, Configuration conf)
name|FileSystem
name|getVerifiedFS
parameter_list|(
name|String
name|authority
parameter_list|,
name|String
name|canonical
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|authority
argument_list|)
decl_stmt|;
name|URI
name|canonicalUri
init|=
name|URI
operator|.
name|create
argument_list|(
name|canonical
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
operator|new
name|DummyFileSystem
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uri
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|canonicalUri
argument_list|,
name|fs
operator|.
name|getCanonicalUri
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCheckPath
argument_list|(
name|fs
argument_list|,
literal|"/file"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|verifyPaths (FileSystem fs, String[] uris, int port, boolean shouldPass)
name|void
name|verifyPaths
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
index|[]
name|uris
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|shouldPass
parameter_list|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
name|uri
operator|+=
literal|":"
operator|+
name|port
expr_stmt|;
name|verifyCheckPath
argument_list|(
name|fs
argument_list|,
name|uri
operator|+
literal|"/file"
argument_list|,
name|shouldPass
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyCheckPath (FileSystem fs, String path, boolean shouldPass)
name|void
name|verifyCheckPath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|shouldPass
parameter_list|)
block|{
name|Path
name|rawPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Path
name|fqPath
init|=
literal|null
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fqPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|rawPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|e
operator|=
name|iae
expr_stmt|;
block|}
if|if
condition|(
name|shouldPass
condition|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|pathAuthority
init|=
name|rawPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathAuthority
operator|==
literal|null
condition|)
block|{
name|pathAuthority
operator|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|pathAuthority
argument_list|,
name|fqPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"did not fail"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong FS: "
operator|+
name|rawPath
operator|+
literal|", expected: "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DummyFileSystem
specifier|static
class|class
name|DummyFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|uri
name|URI
name|uri
decl_stmt|;
DECL|field|defaultPort
specifier|static
name|int
name|defaultPort
init|=
literal|123
decl_stmt|;
DECL|method|DummyFileSystem (URI uri, Configuration conf)
name|DummyFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|defaultPort
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|new_dir
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"not supposed to be here"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

