begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_class
DECL|class|TestChunkedArrayList
specifier|public
class|class
name|TestChunkedArrayList
block|{
annotation|@
name|Test
DECL|method|testBasics ()
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
specifier|final
name|int
name|N_ELEMS
init|=
literal|100000
decl_stmt|;
name|ChunkedArrayList
argument_list|<
name|Integer
argument_list|>
name|l
init|=
operator|new
name|ChunkedArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert a bunch of elements.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N_ELEMS
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|l
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|N_ELEMS
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that it got chunked.
name|assertTrue
argument_list|(
name|l
operator|.
name|getNumChunks
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8192
argument_list|,
name|l
operator|.
name|getMaxChunkSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|ChunkedArrayList
argument_list|<
name|Integer
argument_list|>
name|l
init|=
operator|new
name|ChunkedArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30000
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|fromList
range|:
name|l
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|fromList
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPerformance ()
specifier|public
name|void
name|testPerformance
parameter_list|()
block|{
name|String
name|obj
init|=
literal|"hello world"
decl_stmt|;
specifier|final
name|int
name|numElems
init|=
literal|1000000
decl_stmt|;
specifier|final
name|int
name|numTrials
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|trial
init|=
literal|0
init|;
name|trial
operator|<
name|numTrials
condition|;
name|trial
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|arrayList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Stopwatch
name|sw
init|=
operator|new
name|Stopwatch
argument_list|()
decl_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElems
condition|;
name|i
operator|++
control|)
block|{
name|arrayList
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       ArrayList "
operator|+
name|sw
operator|.
name|elapsedMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test ChunkedArrayList
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|{
name|ChunkedArrayList
argument_list|<
name|String
argument_list|>
name|chunkedList
init|=
operator|new
name|ChunkedArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Stopwatch
name|sw
init|=
operator|new
name|Stopwatch
argument_list|()
decl_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElems
condition|;
name|i
operator|++
control|)
block|{
name|chunkedList
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ChunkedArrayList "
operator|+
name|sw
operator|.
name|elapsedMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

