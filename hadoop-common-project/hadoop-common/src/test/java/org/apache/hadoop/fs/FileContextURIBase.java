begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of tests for the {@link FileContext} to test path names passed  * as URIs. This test should be used for testing an instance of FileContext that  * has been initialized to a specific default FileSystem such a LocalFileSystem,  * HDFS,S3, etc, and where path names are passed that are URIs in a different  * FileSystem.  *</p>  *   *<p>  * To test a given {@link FileSystem} implementation create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fc1</code> and  *<code>fc2</code>  *   * The tests will do operations on fc1 that use a URI in fc2  *   * {@link FileContext} instance variable.  *</p>  */
end_comment

begin_class
DECL|class|FileContextURIBase
specifier|public
specifier|abstract
class|class
name|FileContextURIBase
block|{
DECL|field|basePath
specifier|private
specifier|static
specifier|final
name|String
name|basePath
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testContextURI"
argument_list|)
decl_stmt|;
DECL|field|BASE
specifier|private
specifier|static
specifier|final
name|Path
name|BASE
init|=
operator|new
name|Path
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
comment|// Matches anything containing<,>, :, ", |, ?, *, or anything that ends with
comment|// space or dot.
DECL|field|WIN_INVALID_FILE_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|WIN_INVALID_FILE_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*?[<>\\:\"\\|\\?\\*].*?)|(.*?[ \\.])$"
argument_list|)
decl_stmt|;
DECL|field|fc1
specifier|protected
name|FileContext
name|fc1
decl_stmt|;
DECL|field|fc2
specifier|protected
name|FileContext
name|fc2
decl_stmt|;
comment|//Helper method to make path qualified
DECL|method|qualifiedPath (String path, FileContext fc)
specifier|protected
name|Path
name|qualifiedPath
parameter_list|(
name|String
name|path
parameter_list|,
name|FileContext
name|fc
parameter_list|)
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE
argument_list|,
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{ }
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clean up after test completion
comment|// No need to clean fc1 as fc1 and fc2 points same location
if|if
condition|(
name|fc2
operator|!=
literal|null
condition|)
block|{
name|fc2
operator|.
name|delete
argument_list|(
name|BASE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateFile ()
specifier|public
name|void
name|testCreateFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileNames
index|[]
init|=
block|{
literal|"testFile"
block|,
literal|"test File"
block|,
literal|"test*File"
block|,
literal|"test#File"
block|,
literal|"test1234"
block|,
literal|"1234Test"
block|,
literal|"test)File"
block|,
literal|"test_File"
block|,
literal|"()&^%$#@!~_+}{><?"
block|,
literal|"  "
block|,
literal|"^ "
block|}
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fileNames
control|)
block|{
if|if
condition|(
operator|!
name|isTestableFileNameOnPlatform
argument_list|(
name|f
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Create a file on fc2's file system using fc1
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|f
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now create file
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Ensure fc2 has the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateFileWithNullName ()
specifier|public
name|void
name|testCreateFileWithNullName
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|fileName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Create file with null name should throw IllegalArgumentException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateExistingFile ()
specifier|public
name|void
name|testCreateExistingFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
literal|"testCreateExistingFile"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|fileName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Create same file with fc1
try|try
block|{
name|createFile
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Create existing file should throw an IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Ensure fc2 has the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileInNonExistingDirectory ()
specifier|public
name|void
name|testCreateFileInNonExistingDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
literal|"testCreateFileInNonExistingDirectory/testFile"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|fileName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Ensure using fc2 that file is created
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testCreateFileInNonExistingDirectory"
argument_list|,
name|testPath
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirectory ()
specifier|public
name|void
name|testCreateDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|qualifiedPath
argument_list|(
literal|"test/hadoop"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
name|Path
name|falsePath
init|=
name|qualifiedPath
argument_list|(
literal|"path/doesnot.exist"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
name|Path
name|subDirPath
init|=
name|qualifiedPath
argument_list|(
literal|"dir0"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure that testPath does not exist in fc1
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc1
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fc1
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isDir
argument_list|(
name|fc1
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a directory on fc2's file system using fc1
name|fc1
operator|.
name|mkdir
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure fc2 has directory
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fc2
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test to create same dir twice, (HDFS mkdir is similar to mkdir -p )
name|fc1
operator|.
name|mkdir
argument_list|(
name|subDirPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// This should not throw exception
name|fc1
operator|.
name|mkdir
argument_list|(
name|subDirPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create Sub Dirs
name|fc1
operator|.
name|mkdir
argument_list|(
name|subDirPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Check parent dir
name|Path
name|parentDir
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fc2
argument_list|,
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check parent parent dir
name|Path
name|grandparentDir
init|=
name|parentDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fc2
argument_list|,
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative test cases
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|falsePath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|falsePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// TestCase - Create multiple directories
name|String
name|dirNames
index|[]
init|=
block|{
literal|"createTest/testDir"
block|,
literal|"createTest/test Dir"
block|,
literal|"deleteTest/test*Dir"
block|,
literal|"deleteTest/test#Dir"
block|,
literal|"deleteTest/test1234"
block|,
literal|"deleteTest/test_DIr"
block|,
literal|"deleteTest/1234Test"
block|,
literal|"deleteTest/test)Dir"
block|,
literal|"deleteTest/()&^%$#@!~_+}{><?"
block|,
literal|"  "
block|,
literal|"^ "
block|}
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|dirNames
control|)
block|{
if|if
condition|(
operator|!
name|isTestableFileNameOnPlatform
argument_list|(
name|f
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Create a file on fc2's file system using fc1
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|f
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now create directory
name|fc1
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure fc2 has the created directory
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMkdirsFailsForSubdirectoryOfExistingFile ()
specifier|public
name|void
name|testMkdirsFailsForSubdirectoryOfExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|qualifiedPath
argument_list|(
literal|"test/hadoop"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|fc2
operator|.
name|mkdir
argument_list|(
name|testDir
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file on fc1 using fc2 context
name|createFile
argument_list|(
name|fc1
argument_list|,
name|qualifiedPath
argument_list|(
literal|"test/hadoop/file"
argument_list|,
name|fc2
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testSubDir
init|=
name|qualifiedPath
argument_list|(
literal|"test/hadoop/file/subdir"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
try|try
block|{
name|fc1
operator|.
name|mkdir
argument_list|(
name|testSubDir
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc1
argument_list|,
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testDeepSubDir
init|=
name|qualifiedPath
argument_list|(
literal|"test/hadoop/file/deep/sub/dir"
argument_list|,
name|fc1
argument_list|)
decl_stmt|;
try|try
block|{
name|fc2
operator|.
name|mkdir
argument_list|(
name|testDeepSubDir
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc1
argument_list|,
name|testDeepSubDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsDirectory ()
specifier|public
name|void
name|testIsDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
literal|"dirTest"
decl_stmt|;
name|String
name|invalidDir
init|=
literal|"nonExistantDir"
decl_stmt|;
name|String
name|rootDir
init|=
literal|"/"
decl_stmt|;
name|Path
name|existingPath
init|=
name|qualifiedPath
argument_list|(
name|dirName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
name|Path
name|nonExistingPath
init|=
name|qualifiedPath
argument_list|(
name|invalidDir
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
name|Path
name|pathToRootDir
init|=
name|qualifiedPath
argument_list|(
name|rootDir
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Create a directory on fc2's file system using fc1
name|fc1
operator|.
name|mkdir
argument_list|(
name|existingPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure fc2 has directory
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|existingPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|pathToRootDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative test case
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|nonExistingPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteFile ()
specifier|public
name|void
name|testDeleteFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
literal|"testDeleteFile"
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// First create a file on file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Ensure file exist
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete file using fc2
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Ensure fc2 does not have deleted file
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonExistingFile ()
specifier|public
name|void
name|testDeleteNonExistingFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testFileName
init|=
literal|"testDeleteNonExistingFile"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testFileName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// TestCase1 : Test delete on file never existed
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing file should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// TestCase2 : Create , Delete , Delete file
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Ensure file exist
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete test file, deleting existing file should return true
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing file should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonExistingFileInDir ()
specifier|public
name|void
name|testDeleteNonExistingFileInDir
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testFileInDir
init|=
literal|"testDeleteNonExistingFileInDir/testDir/TestFile"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testFileInDir
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// TestCase1 : Test delete on file never existed
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing file should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// TestCase2 : Create , Delete , Delete file
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Ensure file exist
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete test file, deleting existing file should return true
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing file should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDirectory ()
specifier|public
name|void
name|testDeleteDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
literal|"dirTest"
decl_stmt|;
name|Path
name|testDirPath
init|=
name|qualifiedPath
argument_list|(
name|dirName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure directory does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testDirPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a directory on fc2's file system using fc1
name|fc1
operator|.
name|mkdir
argument_list|(
name|testDirPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure dir is created
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|fc2
operator|.
name|delete
argument_list|(
name|testDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure that directory is deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testDirPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// TestCase - Create and delete multiple directories
name|String
name|dirNames
index|[]
init|=
block|{
literal|"deleteTest/testDir"
block|,
literal|"deleteTest/test Dir"
block|,
literal|"deleteTest/test*Dir"
block|,
literal|"deleteTest/test#Dir"
block|,
literal|"deleteTest/test1234"
block|,
literal|"deleteTest/1234Test"
block|,
literal|"deleteTest/test)Dir"
block|,
literal|"deleteTest/test_DIr"
block|,
literal|"deleteTest/()&^%$#@!~_+}{><?"
block|,
literal|"  "
block|,
literal|"^ "
block|}
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|dirNames
control|)
block|{
if|if
condition|(
operator|!
name|isTestableFileNameOnPlatform
argument_list|(
name|f
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Create a file on fc2's file system using fc1
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|f
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now create directory
name|fc1
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure fc2 has the created directory
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete dir
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify if directory is deleted
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isDir
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteNonExistingDirectory ()
specifier|public
name|void
name|testDeleteNonExistingDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testDirName
init|=
literal|"testDeleteNonExistingDirectory"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testDirName
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// TestCase1 : Test delete on directory never existed
comment|// Ensure directory does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing directory should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// TestCase2 : Create dir, Delete dir, Delete dir
comment|// Create a file on fc2's file system using fc1
name|fc1
operator|.
name|mkdir
argument_list|(
name|testPath
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Ensure dir exist
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete test file, deleting existing file should return true
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure file does not exist
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc2
argument_list|,
name|testPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete on non existing file should return false
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fc2
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModificationTime ()
specifier|public
name|void
name|testModificationTime
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testFile
init|=
literal|"testModificationTime"
decl_stmt|;
name|long
name|fc2ModificationTime
decl_stmt|,
name|fc1ModificationTime
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testFile
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
comment|// Get modification time using fc2 and fc1
name|fc1ModificationTime
operator|=
name|fc1
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|fc2ModificationTime
operator|=
name|fc2
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
comment|// Ensure fc1 and fc2 reports same modification time
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fc1ModificationTime
argument_list|,
name|fc2ModificationTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileStatus ()
specifier|public
name|void
name|testFileStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
literal|"testModificationTime"
decl_stmt|;
name|Path
name|path2
init|=
name|fc2
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|BASE
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create a file on fc2's file system using fc1
name|createFile
argument_list|(
name|fc1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|FsStatus
name|fc2Status
init|=
name|fc2
operator|.
name|getFsStatus
argument_list|(
name|path2
argument_list|)
decl_stmt|;
comment|// FsStatus , used, free and capacity are non-negative longs
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fc2Status
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2Status
operator|.
name|getCapacity
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2Status
operator|.
name|getRemaining
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fc2Status
operator|.
name|getUsed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testGetFileStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testFile
init|=
literal|"test/hadoop/fileDoesNotExist"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testFile
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
try|try
block|{
name|fc1
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testListStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testListStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testFile
init|=
literal|"test/hadoop/file"
decl_stmt|;
name|Path
name|testPath
init|=
name|qualifiedPath
argument_list|(
name|testFile
argument_list|,
name|fc2
argument_list|)
decl_stmt|;
try|try
block|{
name|fc1
operator|.
name|listStatus
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|hPrefix
init|=
literal|"test/hadoop"
decl_stmt|;
specifier|final
name|String
index|[]
name|dirs
init|=
block|{
name|hPrefix
operator|+
literal|"/a"
block|,
name|hPrefix
operator|+
literal|"/b"
block|,
name|hPrefix
operator|+
literal|"/c"
block|,
name|hPrefix
operator|+
literal|"/1"
block|,
name|hPrefix
operator|+
literal|"/#@#@"
block|,
name|hPrefix
operator|+
literal|"/&*#$#$@234"
block|}
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|testDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|dirs
control|)
block|{
if|if
condition|(
operator|!
name|isTestableFileNameOnPlatform
argument_list|(
name|d
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|testDirs
operator|.
name|add
argument_list|(
name|qualifiedPath
argument_list|(
name|d
argument_list|,
name|fc2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fc1
argument_list|,
name|testDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fc1
operator|.
name|mkdir
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// test listStatus that returns an array of FileStatus
name|FileStatus
index|[]
name|paths
init|=
name|fc1
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
literal|"test"
argument_list|,
name|fc1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|qualifiedPath
argument_list|(
name|hPrefix
argument_list|,
name|fc1
argument_list|)
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fc1
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
name|hPrefix
argument_list|,
name|fc1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testDirs
operator|.
name|size
argument_list|()
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDirs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paths
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|qualifiedPath
argument_list|(
name|testDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|fc1
argument_list|)
operator|.
name|equals
argument_list|(
name|paths
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" not found"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|paths
operator|=
name|fc1
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|,
name|fc1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test listStatus that returns an iterator of FileStatus
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|pathsItor
init|=
name|fc1
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
literal|"test"
argument_list|,
name|fc1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|qualifiedPath
argument_list|(
name|hPrefix
argument_list|,
name|fc1
argument_list|)
argument_list|,
name|pathsItor
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pathsItor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|pathsItor
operator|=
name|fc1
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
name|hPrefix
argument_list|,
name|fc1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|dirLen
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|pathsItor
operator|.
name|hasNext
argument_list|()
condition|;
name|dirLen
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|FileStatus
name|stat
init|=
name|pathsItor
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dirs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|qualifiedPath
argument_list|(
name|dirs
index|[
name|j
index|]
argument_list|,
name|fc1
argument_list|)
operator|.
name|equals
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|+
literal|" not found"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testDirs
operator|.
name|size
argument_list|()
argument_list|,
name|dirLen
argument_list|)
expr_stmt|;
name|pathsItor
operator|=
name|fc1
operator|.
name|listStatus
argument_list|(
name|qualifiedPath
argument_list|(
name|dirs
index|[
literal|0
index|]
argument_list|,
name|fc1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pathsItor
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true if the argument is a file name that is testable on the platform    * currently running the test.  This is intended for use by tests so that they    * can skip checking file names that aren't supported by the underlying    * platform.  The current implementation specifically checks for patterns that    * are not valid file names on Windows when the tests are running on Windows.    *     * @param fileName String file name to check    * @return boolean true if the argument is valid as a file name    */
DECL|method|isTestableFileNameOnPlatform (String fileName)
specifier|private
specifier|static
name|boolean
name|isTestableFileNameOnPlatform
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// Disallow reserved characters:<,>, :, ", |, ?, *.
comment|// Disallow trailing space or period.
comment|// See http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx
name|valid
operator|=
operator|!
name|WIN_INVALID_FILE_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
operator|.
name|matches
argument_list|()
expr_stmt|;
block|}
return|return
name|valid
return|;
block|}
block|}
end_class

end_unit

