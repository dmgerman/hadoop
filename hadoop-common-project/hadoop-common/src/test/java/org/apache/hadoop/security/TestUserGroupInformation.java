begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestRpcBase
operator|.
name|TestTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KeyTab
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_TREAT_SUBJECT_EXTERNAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTH_TO_LOCAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounterGt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGaugeGt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertQuantileGauges
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getDoubleGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestUserGroupInformation
specifier|public
class|class
name|TestUserGroupInformation
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|USER_NAME
specifier|final
specifier|private
specifier|static
name|String
name|USER_NAME
init|=
literal|"user1@HADOOP.APACHE.ORG"
decl_stmt|;
DECL|field|GROUP1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP1_NAME
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP2_NAME
init|=
literal|"group2"
decl_stmt|;
DECL|field|GROUP3_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP3_NAME
init|=
literal|"group3"
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|final
specifier|private
specifier|static
name|String
index|[]
name|GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
decl_stmt|;
comment|// Rollover interval of percentile metrics (in seconds)
DECL|field|PERCENTILES_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|PERCENTILES_INTERVAL
init|=
literal|1
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
comment|/**    * UGI should not use the default security conf, else it will collide    * with other classes that may change the default conf.  Using this dummy    * class that simply throws an exception will ensure that the tests fail    * if UGI uses the static default config instead of its own config    */
DECL|class|DummyLoginConfiguration
specifier|private
specifier|static
class|class
name|DummyLoginConfiguration
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
annotation|@
name|Override
DECL|method|getAppConfigurationEntry (String name)
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UGI is not using its own security conf!"
argument_list|)
throw|;
block|}
block|}
comment|/** configure ugi */
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|setConfiguration
argument_list|(
operator|new
name|DummyLoginConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// doesn't matter what it is, but getGroups needs it set...
comment|// use HADOOP_HOME environment variable to prevent interfering with logic
comment|// that finds winutils.exe
name|String
name|home
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HADOOP_HOME"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.home.dir"
argument_list|,
operator|(
name|home
operator|!=
literal|null
condition|?
name|home
else|:
literal|"."
operator|)
argument_list|)
expr_stmt|;
comment|// fake the realm is kerberos is enabled
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.kdc"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.realm"
argument_list|,
literal|"DEFAULT.REALM"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupUgi ()
specifier|public
name|void
name|setupUgi
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|resetUgi ()
specifier|public
name|void
name|resetUgi
parameter_list|()
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSimpleLogin ()
specifier|public
name|void
name|testSimpleLogin
parameter_list|()
throws|throws
name|IOException
block|{
name|tryLoginAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTokenLogin ()
specifier|public
name|void
name|testTokenLogin
parameter_list|()
throws|throws
name|IOException
block|{
name|tryLoginAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testProxyLogin ()
specifier|public
name|void
name|testProxyLogin
parameter_list|()
throws|throws
name|IOException
block|{
name|tryLoginAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|tryLoginAuthenticationMethod (AuthenticationMethod method, boolean expectSuccess)
specifier|private
name|void
name|tryLoginAuthenticationMethod
parameter_list|(
name|AuthenticationMethod
name|method
parameter_list|,
name|boolean
name|expectSuccess
parameter_list|)
throws|throws
name|IOException
block|{
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|method
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// pick up changed auth
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|expectSuccess
condition|)
block|{
name|assertNotNull
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
name|ex
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
operator|+
literal|" login authentication is not supported"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetRealAuthenticationMethod ()
specifier|public
name|void
name|testGetRealAuthenticationMethod
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|,
name|ugi
operator|.
name|getRealAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"user2"
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|,
name|ugi
operator|.
name|getRealAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCreateRemoteUser ()
specifier|public
name|void
name|testCreateRemoteUser
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|SIMPLE
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ugi
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"(auth:SIMPLE)"
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user1"
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ugi
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"(auth:KERBEROS)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test login method */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLogin ()
specifier|public
name|void
name|testLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|PERCENTILES_INTERVAL
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// login from unix
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
operator|.
name|length
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|verifyGroupMetrics
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// ensure that doAs works correctly
name|UserGroupInformation
name|userGroupInfo
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|curUGI
init|=
name|userGroupInfo
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// make sure in the scope of the doAs, the right user is current
name|assertEquals
argument_list|(
name|curUGI
argument_list|,
name|userGroupInfo
argument_list|)
expr_stmt|;
comment|// make sure it is not the same as the login user
name|assertFalse
argument_list|(
name|curUGI
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * given user name - get all the groups.    * Needs to happen before creating the test users    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetServerSideGroups ()
specifier|public
name|void
name|testGetServerSideGroups
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// get the user name
name|Process
name|pp
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"whoami"
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pp
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|br
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// If on windows domain, token format is DOMAIN\\user and we want to
comment|// extract only the user name
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|int
name|sp
init|=
name|userName
operator|.
name|lastIndexOf
argument_list|(
literal|'\\'
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|!=
operator|-
literal|1
condition|)
block|{
name|userName
operator|=
name|userName
operator|.
name|substring
argument_list|(
name|sp
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// user names are case insensitive on Windows. Make consistent
name|userName
operator|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
comment|// get the groups
name|pp
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|Shell
operator|.
name|WINDOWS
condition|?
name|Shell
operator|.
name|getWinUtilsPath
argument_list|()
operator|+
literal|" groups -F"
else|:
literal|"id -Gn "
operator|+
name|userName
argument_list|)
expr_stmt|;
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|pp
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|userName
operator|+
literal|":"
operator|+
name|line
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
name|Shell
operator|.
name|TOKEN_SEPARATOR_REGEX
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|tokens
control|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|login
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|loginUserName
init|=
name|login
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// user names are case insensitive on Windows. Make consistent
name|loginUserName
operator|=
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|loginUserName
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|userName
argument_list|,
name|loginUserName
argument_list|)
expr_stmt|;
name|String
index|[]
name|gi
init|=
name|login
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|,
name|gi
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gi
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|groups
operator|.
name|contains
argument_list|(
name|gi
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserGroupInformation
name|fakeUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo.bar"
argument_list|)
decl_stmt|;
name|fakeUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|current
operator|.
name|equals
argument_list|(
name|login
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|current
argument_list|,
name|fakeUser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|getGroupNames
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** test constructor */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// security off, so default should just return simple name
name|testConstructorSuccess
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user2@DEFAULT.REALM"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user3/cron@DEFAULT.REALM"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user4@OTHER.REALM"
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user5/cron@OTHER.REALM"
argument_list|,
literal|"user5"
argument_list|)
expr_stmt|;
comment|// failure test
name|testConstructorFailures
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/** test constructor */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConstructorWithRules ()
specifier|public
name|void
name|testConstructorWithRules
parameter_list|()
throws|throws
name|Exception
block|{
comment|// security off, but use rules if explicitly set
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
literal|"RULE:[1:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user4@OTHER.REALM"
argument_list|,
literal|"other-user4"
argument_list|)
expr_stmt|;
comment|// pass through test, no transformation
name|testConstructorSuccess
argument_list|(
literal|"user2@DEFAULT.REALM"
argument_list|,
literal|"user2@DEFAULT.REALM"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user3/cron@DEFAULT.REALM"
argument_list|,
literal|"user3/cron@DEFAULT.REALM"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user5/cron@OTHER.REALM"
argument_list|,
literal|"user5/cron@OTHER.REALM"
argument_list|)
expr_stmt|;
comment|// failures
name|testConstructorFailures
argument_list|(
literal|"user6@example.com@OTHER.REALM"
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|"user7@example.com@DEFAULT.REALM"
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/** test constructor */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConstructorWithKerberos ()
specifier|public
name|void
name|testConstructorWithKerberos
parameter_list|()
throws|throws
name|Exception
block|{
comment|// security on, default is remove default realm
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user2@DEFAULT.REALM"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user3/cron@DEFAULT.REALM"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
comment|// no rules applied, local name remains the same
name|testConstructorSuccess
argument_list|(
literal|"user4@OTHER.REALM"
argument_list|,
literal|"user4@OTHER.REALM"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user5/cron@OTHER.REALM"
argument_list|,
literal|"user5/cron@OTHER.REALM"
argument_list|)
expr_stmt|;
comment|// failure test
name|testConstructorFailures
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/** test constructor */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConstructorWithKerberosRules ()
specifier|public
name|void
name|testConstructorWithKerberosRules
parameter_list|()
throws|throws
name|Exception
block|{
comment|// security on, explicit rules
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
literal|"RULE:[2:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"
operator|+
literal|"RULE:[1:$1@$0](.*@OTHER.REALM)s/(.*)@.*/other-$1/"
operator|+
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user2@DEFAULT.REALM"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user3/cron@DEFAULT.REALM"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user4@OTHER.REALM"
argument_list|,
literal|"other-user4"
argument_list|)
expr_stmt|;
name|testConstructorSuccess
argument_list|(
literal|"user5/cron@OTHER.REALM"
argument_list|,
literal|"other-user5"
argument_list|)
expr_stmt|;
comment|// failure test
name|testConstructorFailures
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructorSuccess (String principal, String shortName)
specifier|private
name|void
name|testConstructorSuccess
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|shortName
parameter_list|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|principal
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
comment|// make sure the short and full user names are correct
name|assertEquals
argument_list|(
name|principal
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shortName
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructorFailures (String userName)
specifier|private
name|void
name|testConstructorFailures
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
try|try
block|{
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"user:"
operator|+
name|userName
operator|+
literal|" wasn't invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|String
name|expect
init|=
operator|(
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|"Null user"
else|:
literal|"Illegal principal name "
operator|+
name|userName
decl_stmt|;
name|String
name|expect2
init|=
literal|"Malformed Kerberos name: "
operator|+
name|userName
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find "
operator|+
name|expect
operator|+
literal|" or "
operator|+
name|expect2
operator|+
literal|" in "
operator|+
name|e
argument_list|,
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expect
argument_list|)
operator|||
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expect2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetConfigWithRules ()
specifier|public
name|void
name|testSetConfigWithRules
parameter_list|()
block|{
name|String
index|[]
name|rules
init|=
block|{
literal|"RULE:[1:TEST1]"
block|,
literal|"RULE:[1:TEST2]"
block|,
literal|"RULE:[1:TEST3]"
block|}
decl_stmt|;
comment|// explicitly set a rule
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|KerberosName
operator|.
name|hasRulesBeenSet
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosName
operator|.
name|setRules
argument_list|(
name|rules
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KerberosName
operator|.
name|hasRulesBeenSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
index|[
literal|0
index|]
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
comment|// implicit init should honor rules already being set
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someone"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
index|[
literal|0
index|]
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
comment|// set conf, should override
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
name|rules
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
index|[
literal|1
index|]
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
comment|// set conf, should again override
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
name|rules
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
index|[
literal|2
index|]
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
comment|// implicit init should honor rules already being set
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someone"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
index|[
literal|2
index|]
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testEnsureInitWithRules ()
specifier|public
name|void
name|testEnsureInitWithRules
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rules
init|=
literal|"RULE:[1:RULE1]"
decl_stmt|;
comment|// trigger implicit init, rules should init
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|KerberosName
operator|.
name|hasRulesBeenSet
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someone"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KerberosName
operator|.
name|hasRulesBeenSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// set a rule, trigger implicit init, rule should not change
name|UserGroupInformation
operator|.
name|reset
argument_list|()
expr_stmt|;
name|KerberosName
operator|.
name|setRules
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|KerberosName
operator|.
name|hasRulesBeenSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"someone"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rules
argument_list|,
name|KerberosName
operator|.
name|getRules
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|uugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
name|uugi
argument_list|)
expr_stmt|;
comment|// The subjects should be different, so this should fail
name|UserGroupInformation
name|ugi2
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|uugi
operator|.
name|equals
argument_list|(
name|ugi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uugi
operator|.
name|hashCode
argument_list|()
operator|==
name|ugi2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// two ugi that have the same subject need to be equal
name|UserGroupInformation
name|ugi3
init|=
operator|new
name|UserGroupInformation
argument_list|(
name|uugi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
name|ugi3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uugi
operator|.
name|hashCode
argument_list|()
argument_list|,
name|ugi3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testEqualsWithRealUser ()
specifier|public
name|void
name|testEqualsWithRealUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|realUgi1
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"RealUser"
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi1
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|USER_NAME
argument_list|,
name|realUgi1
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi2
init|=
operator|new
name|UserGroupInformation
argument_list|(
name|proxyUgi1
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|remoteUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|USER_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|proxyUgi1
argument_list|,
name|proxyUgi2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|remoteUgi
operator|.
name|equals
argument_list|(
name|proxyUgi1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGettingGroups ()
specifier|public
name|void
name|testGettingGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|uugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|USER_NAME
argument_list|,
name|uugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|uugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|uugi
operator|.
name|getGroups
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GROUP1_NAME
argument_list|,
name|uugi
operator|.
name|getPrimaryGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// from Mockito mocks
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAddToken ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testAddToken
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t3
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// add token to ugi
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// replace token t1 with t2 - with same key (null)
name|ugi
operator|.
name|addToken
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|// change t1 service and add token
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|// overwrite t1 token with t3 - same key (!null)
name|when
argument_list|(
name|t3
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t3
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t2
argument_list|,
name|t3
argument_list|)
expr_stmt|;
comment|// just try to re-add with new name
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|,
name|t3
argument_list|)
expr_stmt|;
comment|// just try to re-add with new name again
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|,
name|t3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// from Mockito mocks
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetCreds ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testGetCreds
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t2
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t3
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t3
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// add token to ugi
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|t3
operator|.
name|getService
argument_list|()
argument_list|,
name|t3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|t3
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that ugi wasn't modified
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// from Mockito mocks
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAddCreds ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testAddCreds
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t2
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secret
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|Text
name|secretKey
init|=
operator|new
name|Text
argument_list|(
literal|"sshhh"
argument_list|)
decl_stmt|;
comment|// fill credentials
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|t2
operator|.
name|getService
argument_list|()
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secretKey
argument_list|,
name|secret
argument_list|)
expr_stmt|;
comment|// add creds to ugi, and check ugi
name|ugi
operator|.
name|addCredentials
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|checkTokens
argument_list|(
name|ugi
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|secret
argument_list|,
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|secretKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetCredsNotSame ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testGetCredsNotSame
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
comment|// should always get a new copy
name|assertNotSame
argument_list|(
name|creds
argument_list|,
name|ugi
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTokens (UserGroupInformation ugi, Token<?> ... tokens)
specifier|private
name|void
name|checkTokens
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
modifier|...
name|tokens
parameter_list|)
block|{
comment|// check the ugi's token collection
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|ugiTokens
init|=
name|ugi
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
range|:
name|tokens
control|)
block|{
name|assertTrue
argument_list|(
name|ugiTokens
operator|.
name|contains
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tokens
operator|.
name|length
argument_list|,
name|ugiTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the ugi's credentials
name|Credentials
name|ugiCreds
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
range|:
name|tokens
control|)
block|{
name|assertSame
argument_list|(
name|t
argument_list|,
name|ugiCreds
operator|.
name|getToken
argument_list|(
name|t
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tokens
operator|.
name|length
argument_list|,
name|ugiCreds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// from Mockito mocks
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAddNamedToken ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testAddNamedToken
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service1
argument_list|)
expr_stmt|;
comment|// add token
name|ugi
operator|.
name|addToken
argument_list|(
name|service1
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|t1
argument_list|,
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add token with another name
name|ugi
operator|.
name|addToken
argument_list|(
name|service2
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|t1
argument_list|,
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|t1
argument_list|,
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// from Mockito mocks
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testUGITokens ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testUGITokens
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"TheDoctor"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TheTARDIS"
block|}
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t1
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t2
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secretKey
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|Text
name|secretName
init|=
operator|new
name|Text
argument_list|(
literal|"shhh"
argument_list|)
decl_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secretName
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addCredentials
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|z
init|=
name|ugi
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|contains
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|contains
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|z
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|ugiCreds
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|secretKey
argument_list|,
name|ugiCreds
operator|.
name|getSecretKey
argument_list|(
name|secretName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ugiCreds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|z
operator|.
name|remove
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to modify token collection from UGI"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
comment|// Can't modify tokens
block|}
comment|// ensure that the tokens are passed through doAs
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|otherSet
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getTokens
argument_list|()
return|;
block|}
block|}
block|)
function|;
name|assertTrue
argument_list|(
name|otherSet
operator|.
name|contains
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|otherSet
operator|.
name|contains
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTokenIdentifiers ()
specifier|public
name|void
name|testTokenIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"TheDoctor"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TheTARDIS"
block|}
argument_list|)
decl_stmt|;
name|TokenIdentifier
name|t1
init|=
name|mock
argument_list|(
name|TokenIdentifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenIdentifier
name|t2
init|=
name|mock
argument_list|(
name|TokenIdentifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|t2
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|TokenIdentifier
argument_list|>
name|z
init|=
name|ugi
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|contains
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|z
operator|.
name|contains
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|z
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that the token identifiers are passed through doAs
name|Collection
argument_list|<
name|TokenIdentifier
argument_list|>
name|otherSet
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|TokenIdentifier
argument_list|>
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getTokenIdentifiers
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|otherSet
operator|.
name|contains
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|otherSet
operator|.
name|contains
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|otherSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testTestAuthMethod ()
specifier|public
name|void
name|testTestAuthMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// verify the reverse mappings works
for|for
control|(
name|AuthenticationMethod
name|am
range|:
name|AuthenticationMethod
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|am
operator|.
name|getAuthMethod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|am
operator|.
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|am
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testUGIAuthMethod ()
specifier|public
name|void
name|testUGIAuthMethod
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|AuthenticationMethod
name|am
init|=
name|AuthenticationMethod
operator|.
name|KERBEROS
decl_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testUGIAuthMethodInRealUser ()
specifier|public
name|void
name|testUGIAuthMethodInRealUser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|proxyUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"proxy"
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
specifier|final
name|AuthenticationMethod
name|am
init|=
name|AuthenticationMethod
operator|.
name|KERBEROS
decl_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|am
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am
argument_list|,
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|proxyUgi
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am
argument_list|,
name|UserGroupInformation
operator|.
name|getRealAuthenticationMethod
argument_list|(
name|proxyUgi
argument_list|)
argument_list|)
expr_stmt|;
name|proxyUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|proxyUgi2
init|=
operator|new
name|UserGroupInformation
argument_list|(
name|proxyUgi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|proxyUgi2
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyUgi
argument_list|,
name|proxyUgi2
argument_list|)
expr_stmt|;
comment|// Equality should work if authMethod is null
name|UserGroupInformation
name|realugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|proxyUgi3
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
literal|"proxyAnother"
argument_list|,
name|realugi
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUgi4
init|=
operator|new
name|UserGroupInformation
argument_list|(
name|proxyUgi3
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|proxyUgi3
argument_list|,
name|proxyUgi4
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLoginObjectInSubject ()
specifier|public
name|void
name|testLoginObjectInSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|loginUgi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|anotherUgi
init|=
operator|new
name|UserGroupInformation
argument_list|(
name|loginUgi
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
name|LoginContext
name|login1
init|=
name|loginUgi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLogin
argument_list|()
decl_stmt|;
name|LoginContext
name|login2
init|=
name|anotherUgi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLogin
argument_list|()
decl_stmt|;
comment|//login1 and login2 must be same instances
name|Assert
operator|.
name|assertTrue
argument_list|(
name|login1
operator|==
name|login2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testLoginModuleCommit ()
specifier|public
name|void
name|testLoginModuleCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|loginUgi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|User
name|user1
init|=
name|loginUgi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|LoginContext
name|login
init|=
name|user1
operator|.
name|getLogin
argument_list|()
decl_stmt|;
name|login
operator|.
name|logout
argument_list|()
expr_stmt|;
name|login
operator|.
name|login
argument_list|()
expr_stmt|;
name|User
name|user2
init|=
name|loginUgi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// user1 and user2 must be same instances.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|user1
operator|==
name|user2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|verifyLoginMetrics (long success, int failure)
specifier|public
specifier|static
name|void
name|verifyLoginMetrics
parameter_list|(
name|long
name|success
parameter_list|,
name|int
name|failure
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ensure metrics related to kerberos login is updated.
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
literal|"UgiMetrics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|>
literal|0
condition|)
block|{
name|assertCounter
argument_list|(
literal|"LoginSuccessNumOps"
argument_list|,
name|success
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGaugeGt
argument_list|(
literal|"LoginSuccessAvgTime"
argument_list|,
literal|0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failure
operator|>
literal|0
condition|)
block|{
name|assertCounter
argument_list|(
literal|"LoginFailureNumPos"
argument_list|,
name|failure
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertGaugeGt
argument_list|(
literal|"LoginFailureAvgTime"
argument_list|,
literal|0
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|verifyGroupMetrics ( long groups)
specifier|private
specifier|static
name|void
name|verifyGroupMetrics
parameter_list|(
name|long
name|groups
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
literal|"UgiMetrics"
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|>
literal|0
condition|)
block|{
name|assertCounterGt
argument_list|(
literal|"GetGroupsNumOps"
argument_list|,
name|groups
operator|-
literal|1
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
name|getDoubleGauge
argument_list|(
literal|"GetGroupsAvgTime"
argument_list|,
name|rb
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|avg
operator|>=
literal|0.0
argument_list|)
expr_stmt|;
comment|// Sleep for an interval+slop to let the percentiles rollover
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|PERCENTILES_INTERVAL
operator|+
literal|1
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Check that the percentiles were updated
name|assertQuantileGauges
argument_list|(
literal|"GetGroups1s"
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Test for the case that UserGroupInformation.getCurrentUser()    * is called when the AccessControlContext has a Subject associated    * with it, but that Subject was not created by Hadoop (ie it has no    * associated User principal)    */
end_comment

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testUGIUnderNonHadoopContext ()
specifier|public
name|void
name|testUGIUnderNonHadoopContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Subject
name|nonHadoopSubject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|nonHadoopSubject
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGetUGIFromSubject ()
specifier|public
name|void
name|testGetUGIFromSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|KerberosPrincipal
name|p
init|=
operator|new
name|KerberosPrincipal
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getUGIFromSubject
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"guest@DEFAULT.REALM"
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Test hasSufficientTimeElapsed method */
end_comment

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHasSufficientTimeElapsed ()
specifier|public
name|void
name|testHasSufficientTimeElapsed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make hasSufficientTimeElapsed public
name|Method
name|method
init|=
name|UserGroupInformation
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"hasSufficientTimeElapsed"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|ugi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrincipals
argument_list|(
name|User
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Using default relogin time (1 minute)
name|user
operator|.
name|setLastLogin
argument_list|(
name|now
operator|-
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 2 minutes before "now"
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|ugi
argument_list|,
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setLastLogin
argument_list|(
name|now
operator|-
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 30 seconds before "now"
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|ugi
argument_list|,
name|now
argument_list|)
argument_list|)
expr_stmt|;
comment|// Using relogin time of 10 minutes
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN
argument_list|,
literal|10
operator|*
literal|60
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|user
operator|.
name|setLastLogin
argument_list|(
name|now
operator|-
literal|15
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 15 minutes before "now"
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|ugi
argument_list|,
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setLastLogin
argument_list|(
name|now
operator|-
literal|6
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// 6 minutes before "now"
name|assertFalse
argument_list|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|ugi
argument_list|,
name|now
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restore original conf to UGI
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Restore hasSufficientTimElapsed back to private
name|method
operator|.
name|setAccessible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSetLoginUser ()
specifier|public
name|void
name|testSetLoginUser
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"test-user"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ugi
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * In some scenario, such as HA, delegation tokens are associated with a    * logical name. The tokens are cloned and are associated with the    * physical address of the server where the service is provided.    * This test ensures cloned delegated tokens are locally used    * and are not returned in {@link UserGroupInformation#getCredentials()}    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testPrivateTokenExclusion ()
specifier|public
name|void
name|testPrivateTokenExclusion
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"privateUser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"PRIVATEUSERS"
block|}
argument_list|)
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"regular-token"
argument_list|)
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// Now add cloned private token
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"private-token"
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|service
argument_list|,
name|token
operator|.
name|privateClone
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"private-token1"
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|service1
argument_list|,
name|token
operator|.
name|privateClone
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure only non-private tokens are returned
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This test checks a race condition between getting and adding tokens for    * the current user.  Calling UserGroupInformation.getCurrentUser() returns    * a new object each time, so simply making these methods synchronized was not    * enough to prevent race conditions and causing a    * ConcurrentModificationException.  These methods are synchronized on the    * Subject, which is the same object between UserGroupInformation instances.    * This test tries to cause a CME, by exposing the race condition.  Previously    * this test would fail every time; now it does not.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testTokenRaceCondition ()
specifier|public
name|void
name|testTokenRaceCondition
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|userGroupInfo
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|userGroupInfo
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure it is not the same as the login user because we use the
comment|// same UGI object for every instantiation of the login user and you
comment|// won't run into the race condition otherwise
name|assertNotEquals
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|GetTokenThread
name|thread
init|=
operator|new
name|GetTokenThread
argument_list|()
decl_stmt|;
try|try
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Text
argument_list|(
literal|"t"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addToken
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"ConcurrentModificationException encountered"
argument_list|,
name|thread
operator|.
name|cme
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|cme
parameter_list|)
block|{
name|cme
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"ConcurrentModificationException encountered"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|thread
operator|.
name|runThread
operator|=
literal|false
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|GetTokenThread
specifier|static
class|class
name|GetTokenThread
extends|extends
name|Thread
block|{
DECL|field|runThread
name|boolean
name|runThread
init|=
literal|true
decl_stmt|;
DECL|field|cme
specifier|volatile
name|ConcurrentModificationException
name|cme
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|runThread
condition|)
block|{
try|try
block|{
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|cme
parameter_list|)
block|{
name|this
operator|.
name|cme
operator|=
name|cme
expr_stmt|;
name|cme
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|runThread
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
annotation|@
name|Test
DECL|method|testExternalTokenFiles ()
specifier|public
name|void
name|testExternalTokenFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|tokenFullPathnames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|tokenFilenames
init|=
literal|"token1,token2"
decl_stmt|;
name|String
name|tokenFiles
index|[]
init|=
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|tokenFilenames
argument_list|)
decl_stmt|;
specifier|final
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestUserGroupInformation
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|testDirPath
init|=
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|// create path for token files
for|for
control|(
name|String
name|tokenFile
range|:
name|tokenFiles
control|)
block|{
if|if
condition|(
name|tokenFullPathnames
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokenFullPathnames
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|tokenFullPathnames
operator|.
name|append
argument_list|(
name|testDirPath
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|tokenFile
argument_list|)
expr_stmt|;
block|}
comment|// create new token and store it
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|()
decl_stmt|;
name|Credentials
name|cred1
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"token-service1"
argument_list|)
argument_list|)
decl_stmt|;
name|cred1
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|cred1
operator|.
name|writeTokenStorageFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testDirPath
argument_list|,
name|tokenFiles
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Credentials
name|cred2
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"token-service2"
argument_list|)
argument_list|)
decl_stmt|;
name|cred2
operator|.
name|addToken
argument_list|(
name|token2
operator|.
name|getService
argument_list|()
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|cred2
operator|.
name|writeTokenStorageFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testDirPath
argument_list|,
name|tokenFiles
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// set property for token external token files
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.token.files"
argument_list|,
name|tokenFullPathnames
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|tokenUgi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|credsugiTokens
init|=
name|tokenUgi
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|credsugiTokens
operator|.
name|contains
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|credsugiTokens
operator|.
name|contains
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testCheckTGTAfterLoginFromSubjectHelper ()
specifier|private
name|void
name|testCheckTGTAfterLoginFromSubjectHelper
parameter_list|()
throws|throws
name|Exception
block|{
comment|// security on, default is remove default realm
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Login from a pre-set subject with a keytab
specifier|final
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|KeyTab
name|keytab
init|=
name|KeyTab
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|keytab
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
operator|.
name|loginUserFromSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// this should not throw.
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|KerberosAuthException
operator|.
name|class
argument_list|)
DECL|method|testCheckTGTAfterLoginFromSubject ()
specifier|public
name|void
name|testCheckTGTAfterLoginFromSubject
parameter_list|()
throws|throws
name|Exception
block|{
name|testCheckTGTAfterLoginFromSubjectHelper
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testCheckTGTAfterLoginFromSubjectFix ()
specifier|public
name|void
name|testCheckTGTAfterLoginFromSubjectFix
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HADOOP_TREAT_SUBJECT_EXTERNAL_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCheckTGTAfterLoginFromSubjectHelper
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testGetNextRetryTime ()
specifier|public
name|void
name|testGetNextRetryTime
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|UserGroupInformation
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
specifier|final
name|long
name|reloginInterval
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|reloginIntervalMs
init|=
name|reloginInterval
operator|*
literal|1000
decl_stmt|;
comment|// Relogin happens every 1 second.
name|conf
operator|.
name|setLong
argument_list|(
name|HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN
argument_list|,
name|reloginInterval
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Suppose tgt start time is now, end time is 20 seconds from now.
specifier|final
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
specifier|final
name|Date
name|endDate
init|=
operator|new
name|Date
argument_list|(
name|now
operator|+
literal|20000
argument_list|)
decl_stmt|;
comment|// Explicitly test the exponential back-off logic.
comment|// Suppose some time (10 seconds) passed.
comment|// Verify exponential backoff and max=(login interval before endTime).
specifier|final
name|long
name|currentTime
init|=
name|now
operator|+
literal|10000
decl_stmt|;
specifier|final
name|long
name|endTime
init|=
name|endDate
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|RetryPolicy
name|rp
init|=
name|RetryPolicies
operator|.
name|exponentialBackoffRetry
argument_list|(
name|Long
operator|.
name|SIZE
operator|-
literal|2
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|lastRetry
init|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|assertWithinBounds
argument_list|(
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|lastRetry
argument_list|,
name|reloginIntervalMs
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|incr
argument_list|()
expr_stmt|;
name|lastRetry
operator|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|assertWithinBounds
argument_list|(
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|lastRetry
argument_list|,
name|reloginIntervalMs
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|incr
argument_list|()
expr_stmt|;
name|lastRetry
operator|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|assertWithinBounds
argument_list|(
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|lastRetry
argument_list|,
name|reloginIntervalMs
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|incr
argument_list|()
expr_stmt|;
name|lastRetry
operator|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|assertWithinBounds
argument_list|(
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|lastRetry
argument_list|,
name|reloginIntervalMs
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
comment|// last try should be right before expiry.
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|incr
argument_list|()
expr_stmt|;
name|lastRetry
operator|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"5th retry, now:"
operator|+
name|currentTime
operator|+
literal|", retry:"
operator|+
name|lastRetry
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|endTime
operator|-
name|reloginIntervalMs
argument_list|,
name|lastRetry
argument_list|)
expr_stmt|;
comment|// make sure no more retries after (tgt endTime - login interval).
name|UserGroupInformation
operator|.
name|metrics
operator|.
name|getRenewalFailures
argument_list|()
operator|.
name|incr
argument_list|()
expr_stmt|;
name|lastRetry
operator|=
name|UserGroupInformation
operator|.
name|getNextTgtRenewalTime
argument_list|(
name|endTime
argument_list|,
name|currentTime
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"overflow retry, now:"
operator|+
name|currentTime
operator|+
literal|", retry:"
operator|+
name|lastRetry
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|endTime
operator|-
name|reloginIntervalMs
argument_list|,
name|lastRetry
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertWithinBounds (final int numFailures, final long lastRetry, final long reloginIntervalMs, long now)
specifier|private
name|void
name|assertWithinBounds
parameter_list|(
specifier|final
name|int
name|numFailures
parameter_list|,
specifier|final
name|long
name|lastRetry
parameter_list|,
specifier|final
name|long
name|reloginIntervalMs
parameter_list|,
name|long
name|now
parameter_list|)
block|{
comment|// shift is 2 to the power of (numFailure).
name|int
name|shift
init|=
name|numFailures
operator|+
literal|1
decl_stmt|;
specifier|final
name|long
name|lower
init|=
name|now
operator|+
name|reloginIntervalMs
operator|*
call|(
name|long
call|)
argument_list|(
operator|(
literal|1
operator|<<
name|shift
operator|)
operator|*
literal|0.5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|upper
init|=
name|now
operator|+
name|reloginIntervalMs
operator|*
call|(
name|long
call|)
argument_list|(
operator|(
literal|1
operator|<<
name|shift
operator|)
operator|*
literal|1.5
argument_list|)
decl_stmt|;
specifier|final
name|String
name|str
init|=
operator|new
name|String
argument_list|(
literal|"Retry#"
operator|+
operator|(
name|numFailures
operator|+
literal|1
operator|)
operator|+
literal|", now:"
operator|+
name|now
operator|+
literal|", lower bound:"
operator|+
name|lower
operator|+
literal|", upper bound:"
operator|+
name|upper
operator|+
literal|", retry:"
operator|+
name|lastRetry
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|str
argument_list|,
name|lower
operator|<=
name|lastRetry
operator|&&
name|lastRetry
operator|<
name|upper
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

