begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A test for AsyncDiskService.  */
end_comment

begin_class
DECL|class|TestAsyncDiskService
specifier|public
class|class
name|TestAsyncDiskService
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAsyncDiskService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Access by multiple threads from the ThreadPools in AsyncDiskService.
DECL|field|count
specifier|volatile
name|int
name|count
decl_stmt|;
comment|/** An example task for incrementing a counter.      */
DECL|class|ExampleTask
class|class
name|ExampleTask
implements|implements
name|Runnable
block|{
DECL|method|ExampleTask ()
name|ExampleTask
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|TestAsyncDiskService
operator|.
name|this
init|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
comment|/**    * This test creates some ExampleTasks and runs them.     */
annotation|@
name|Test
DECL|method|testAsyncDiskService ()
specifier|public
name|void
name|testAsyncDiskService
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
index|[]
name|vols
init|=
operator|new
name|String
index|[]
block|{
literal|"/0"
block|,
literal|"/1"
block|}
decl_stmt|;
name|AsyncDiskService
name|service
init|=
operator|new
name|AsyncDiskService
argument_list|(
name|vols
argument_list|)
decl_stmt|;
name|int
name|total
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|service
operator|.
name|execute
argument_list|(
name|vols
index|[
name|i
operator|%
literal|2
index|]
argument_list|,
operator|new
name|ExampleTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|service
operator|.
name|execute
argument_list|(
literal|"no_such_volume"
argument_list|,
operator|new
name|ExampleTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|e
operator|=
name|ex
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Executing a task on a non-existing volume should throw an "
operator|+
literal|"Exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|service
operator|.
name|awaitTermination
argument_list|(
literal|5000
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"AsyncDiskService didn't shutdown in 5 seconds."
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

