begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|AbstractSystemMultipartUploaderTest
specifier|public
specifier|abstract
class|class
name|AbstractSystemMultipartUploaderTest
block|{
DECL|method|getFS ()
specifier|abstract
name|FileSystem
name|getFS
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getBaseTestPath ()
specifier|abstract
name|Path
name|getBaseTestPath
parameter_list|()
function_decl|;
annotation|@
name|Test
DECL|method|testMultipartUpload ()
specifier|public
name|void
name|testMultipartUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getBaseTestPath
argument_list|()
argument_list|,
literal|"some-file"
argument_list|)
decl_stmt|;
name|MultipartUploader
name|mpu
init|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|mpu
operator|.
name|initialize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
argument_list|>
name|partHandles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
name|i
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|partHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PathHandle
name|fd
init|=
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fdData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fd
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|readString
init|=
operator|new
name|String
argument_list|(
name|fdData
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|readString
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|fdData
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipartUploadReverseOrder ()
specifier|public
name|void
name|testMultipartUploadReverseOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getBaseTestPath
argument_list|()
argument_list|,
literal|"some-file"
argument_list|)
decl_stmt|;
name|MultipartUploader
name|mpu
init|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|mpu
operator|.
name|initialize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
argument_list|>
name|partHandles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
name|i
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|partHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PathHandle
name|fd
init|=
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fdData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fd
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|readString
init|=
operator|new
name|String
argument_list|(
name|fdData
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|readString
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|fdData
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipartUploadReverseOrderNoNContiguousPartNumbers ()
specifier|public
name|void
name|testMultipartUploadReverseOrderNoNContiguousPartNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getBaseTestPath
argument_list|()
argument_list|,
literal|"some-file"
argument_list|)
decl_stmt|;
name|MultipartUploader
name|mpu
init|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|mpu
operator|.
name|initialize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
argument_list|>
name|partHandles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|200
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|contents
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|200
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
name|i
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|partHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PathHandle
name|fd
init|=
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fdData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|fd
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|readString
init|=
operator|new
name|String
argument_list|(
name|fdData
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|readString
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|fdData
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipartUploadAbort ()
specifier|public
name|void
name|testMultipartUploadAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|getBaseTestPath
argument_list|()
argument_list|,
literal|"some-file"
argument_list|)
decl_stmt|;
name|MultipartUploader
name|mpu
init|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|mpu
operator|.
name|initialize
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|100
init|;
name|i
operator|>=
literal|50
condition|;
operator|--
name|i
control|)
block|{
name|String
name|contents
init|=
literal|"ThisIsPart"
operator|+
name|i
operator|+
literal|"\n"
decl_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
name|i
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
decl_stmt|;
block|}
name|mpu
operator|.
name|abort
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
literal|"ThisIsPart49\n"
decl_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
literal|49
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"putPart should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ok
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

