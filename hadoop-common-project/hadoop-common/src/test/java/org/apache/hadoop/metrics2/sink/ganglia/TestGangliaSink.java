begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.sink.ganglia
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|sink
operator|.
name|ganglia
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|ConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MulticastSocket
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestGangliaSink
specifier|public
class|class
name|TestGangliaSink
block|{
annotation|@
name|Test
DECL|method|testShouldCreateDatagramSocketByDefault ()
specifier|public
name|void
name|testShouldCreateDatagramSocketByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|SubsetConfiguration
name|conf
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|subset
argument_list|(
literal|"test.sink.ganglia"
argument_list|)
decl_stmt|;
name|GangliaSink30
name|gangliaSink
init|=
operator|new
name|GangliaSink30
argument_list|()
decl_stmt|;
name|gangliaSink
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DatagramSocket
name|socket
init|=
name|gangliaSink
operator|.
name|getDatagramSocket
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Did not create DatagramSocket"
argument_list|,
name|socket
operator|==
literal|null
operator|||
name|socket
operator|instanceof
name|MulticastSocket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldCreateDatagramSocketIfMulticastIsDisabled ()
specifier|public
name|void
name|testShouldCreateDatagramSocketIfMulticastIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|SubsetConfiguration
name|conf
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"test.sink.ganglia.multicast"
argument_list|,
literal|false
argument_list|)
operator|.
name|subset
argument_list|(
literal|"test.sink.ganglia"
argument_list|)
decl_stmt|;
name|GangliaSink30
name|gangliaSink
init|=
operator|new
name|GangliaSink30
argument_list|()
decl_stmt|;
name|gangliaSink
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DatagramSocket
name|socket
init|=
name|gangliaSink
operator|.
name|getDatagramSocket
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Did not create DatagramSocket"
argument_list|,
name|socket
operator|==
literal|null
operator|||
name|socket
operator|instanceof
name|MulticastSocket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldCreateMulticastSocket ()
specifier|public
name|void
name|testShouldCreateMulticastSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|SubsetConfiguration
name|conf
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"test.sink.ganglia.multicast"
argument_list|,
literal|true
argument_list|)
operator|.
name|subset
argument_list|(
literal|"test.sink.ganglia"
argument_list|)
decl_stmt|;
name|GangliaSink30
name|gangliaSink
init|=
operator|new
name|GangliaSink30
argument_list|()
decl_stmt|;
name|gangliaSink
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DatagramSocket
name|socket
init|=
name|gangliaSink
operator|.
name|getDatagramSocket
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not create MulticastSocket"
argument_list|,
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|instanceof
name|MulticastSocket
argument_list|)
expr_stmt|;
name|int
name|ttl
init|=
operator|(
operator|(
name|MulticastSocket
operator|)
name|socket
operator|)
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not set default TTL"
argument_list|,
literal|1
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldSetMulticastSocketTtl ()
specifier|public
name|void
name|testShouldSetMulticastSocketTtl
parameter_list|()
throws|throws
name|Exception
block|{
name|SubsetConfiguration
name|conf
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"test.sink.ganglia.multicast"
argument_list|,
literal|true
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.ganglia.multicast.ttl"
argument_list|,
literal|3
argument_list|)
operator|.
name|subset
argument_list|(
literal|"test.sink.ganglia"
argument_list|)
decl_stmt|;
name|GangliaSink30
name|gangliaSink
init|=
operator|new
name|GangliaSink30
argument_list|()
decl_stmt|;
name|gangliaSink
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|DatagramSocket
name|socket
init|=
name|gangliaSink
operator|.
name|getDatagramSocket
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not create MulticastSocket"
argument_list|,
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|instanceof
name|MulticastSocket
argument_list|)
expr_stmt|;
name|int
name|ttl
init|=
operator|(
operator|(
name|MulticastSocket
operator|)
name|socket
operator|)
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not set TTL"
argument_list|,
literal|3
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

