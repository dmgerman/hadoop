begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.alias
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_class
DECL|class|TestCredentialProvider
specifier|public
class|class
name|TestCredentialProvider
block|{
annotation|@
name|Test
DECL|method|testCredentialEntry ()
specifier|public
name|void
name|testCredentialEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|char
index|[]
name|key1
init|=
operator|new
name|char
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|CredentialProvider
operator|.
name|CredentialEntry
name|obj
init|=
operator|new
name|CredentialProvider
operator|.
name|CredentialEntry
argument_list|(
literal|"cred1"
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cred1"
argument_list|,
name|obj
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|char
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
name|obj
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnnestUri ()
specifier|public
name|void
name|testUnnestUri
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://nn.example.com/my/path"
argument_list|)
argument_list|,
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"myscheme://hdfs@nn.example.com/my/path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://nn/my/path?foo=bar&baz=bat#yyy"
argument_list|)
argument_list|,
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"myscheme://hdfs@nn/my/path?foo=bar&baz=bat#yyy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"inner://hdfs@nn1.example.com/my/path"
argument_list|)
argument_list|,
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"outer://inner@hdfs@nn1.example.com/my/path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"outer://user/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

