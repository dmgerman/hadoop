begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|AvroTestUtil
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestPath
specifier|public
class|class
name|TestPath
extends|extends
name|TestCase
block|{
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|toStringTest
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"/foo/bar#boo"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"foo/bar#boo"
argument_list|)
expr_stmt|;
name|boolean
name|emptyException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|toStringTest
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expect to receive an IllegalArgumentException
name|emptyException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|emptyException
argument_list|)
expr_stmt|;
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|toStringTest
argument_list|(
literal|"c:"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"c:/"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"c:foo"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"c:foo/bar"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"c:foo/bar"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"c:/foo/bar"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"C:/foo/bar#boo"
argument_list|)
expr_stmt|;
name|toStringTest
argument_list|(
literal|"C:foo/bar#boo"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toStringTest (String pathString)
specifier|private
name|void
name|toStringTest
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|pathString
argument_list|,
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalize ()
specifier|public
name|void
name|testNormalize
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".."
argument_list|,
operator|new
name|Path
argument_list|(
literal|".."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"//"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"///"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"//foo/"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"//foo/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"//foo/"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"//foo//"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"//foo/bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"//foo//bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo//"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo//bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|assertEquals
argument_list|(
literal|"c:/a/b"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"c:\\a\\b"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIsAbsolute ()
specifier|public
name|void
name|testIsAbsolute
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|assertTrue
argument_list|(
operator|new
name|Path
argument_list|(
literal|"c:/a/b"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|Path
argument_list|(
literal|"c:a/b"
argument_list|)
operator|.
name|isAbsolute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParent ()
specifier|public
name|void
name|testParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo/bar"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"c:/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"c:/foo"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testChild ()
specifier|public
name|void
name|testChild
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|,
literal|"bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/baz"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|,
literal|"bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/baz"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo/bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|,
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"c:/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|,
literal|"c:/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"c:/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"d:/bar"
argument_list|,
literal|"c:/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertFalse
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|equals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDots ()
specifier|public
name|void
name|testDots
parameter_list|()
block|{
comment|// Test Path(String)
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/bar/baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|,
literal|"."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/../baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/./baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/bar/baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz/../../fud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/fud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz/.././../fud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/fud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"../../foo/bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../foo/bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|".././../foo/bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../foo/bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"./foo/bar/baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo/bar/baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/../../baz/boo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/baz/boo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/../baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo/baz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/../../baz/boo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"baz/boo"
argument_list|)
expr_stmt|;
comment|// Test Path(Path,Path)
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|,
literal|"baz/boo"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/bar/baz/boo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/"
argument_list|,
literal|"baz/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo/bar/baz/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|,
literal|"../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar"
argument_list|,
literal|"../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|,
literal|"boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar/baz"
argument_list|,
literal|"../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/foo/boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/baz"
argument_list|,
literal|"../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo/boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"../../"
argument_list|,
literal|"../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../../../boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"../../foo"
argument_list|,
literal|"../../../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../../../boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"../../foo/bar"
argument_list|,
literal|"../boo/bud"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../foo/boo/bud"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/baz"
argument_list|,
literal|"../../.."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo/bar/baz"
argument_list|,
literal|"../../../../.."
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../.."
argument_list|)
expr_stmt|;
block|}
comment|/** Test Path objects created from other Path objects */
DECL|method|testChildParentResolution ()
specifier|public
name|void
name|testChildParentResolution
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"foo1://bar1/baz1"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
literal|"foo2://bar2/baz2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|child
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScheme ()
specifier|public
name|void
name|testScheme
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"foo:/bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo:/"
argument_list|,
literal|"/bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo://bar/baz"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo://bar/"
argument_list|,
literal|"/baz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testURI ()
specifier|public
name|void
name|testURI
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"file:///bar#baz"
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uri
operator|.
name|equals
argument_list|(
operator|new
name|URI
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uri
operator|.
name|equals
argument_list|(
operator|new
name|URI
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// uri without hash
name|URI
name|uri2
init|=
operator|new
name|URI
argument_list|(
literal|"file:///bar/baz"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uri2
operator|.
name|equals
argument_list|(
operator|new
name|URI
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|uri2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo://bar/baz#boo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo://bar/"
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/baz#boo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo://bar/baz/fud#boo"
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
literal|"foo://bar/baz#bud"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
literal|"fud#boo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the child uri is absolute path
name|assertEquals
argument_list|(
literal|"foo://bar/fud#boo"
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
literal|"foo://bar/baz#bud"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/fud#boo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test URIs created from Path objects */
DECL|method|testPathToUriConversion ()
specifier|public
name|void
name|testPathToUriConversion
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
comment|// Path differs from URI in that it ignores the query part..
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo?bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo?bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo\"bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo\"bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// therefore "foo?bar" is a valid Path, so a URI created from a Path has path "foo?bar"
comment|// where in a straight URI the path part is just "foo"
name|assertEquals
argument_list|(
literal|"/foo?bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"http://localhost/foo?bar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http://localhost/foo?bar"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// The path part handling in Path is equivalent to URI
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo;bar"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo;bar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo;bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo;bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo+bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo+bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo-bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo-bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo=bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo=bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/foo,bar"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo,bar"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test reserved characters in URIs (and therefore Paths) */
DECL|method|testReservedCharacters ()
specifier|public
name|void
name|testReservedCharacters
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
comment|// URI encodes the path
name|assertEquals
argument_list|(
literal|"/foo%20bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// URI#getPath decodes the path
name|assertEquals
argument_list|(
literal|"/foo bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// URI#toString returns an encoded path
name|assertEquals
argument_list|(
literal|"/foo%20bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"/foo bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%20bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo bar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reserved chars are not encoded
name|assertEquals
argument_list|(
literal|"/foo;bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"/foo;bar"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo;bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"/foo;bar"
argument_list|)
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo+bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"/foo+bar"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo+bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"/foo+bar"
argument_list|)
operator|.
name|getRawPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// URI#getPath decodes the path part (and URL#getPath does not decode)
name|assertEquals
argument_list|(
literal|"/foo bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"http://localhost/foo bar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%20bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"http://localhost/foo bar"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo?bar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"/foo?bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/foo%3Fbar"
argument_list|,
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|"/foo?bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toURL
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMakeQualified ()
specifier|public
name|void
name|testMakeQualified
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|defaultUri
init|=
operator|new
name|URI
argument_list|(
literal|"hdfs://host1/dir1"
argument_list|)
decl_stmt|;
name|URI
name|wd
init|=
operator|new
name|URI
argument_list|(
literal|"hdfs://host2/dir2"
argument_list|)
decl_stmt|;
comment|// The scheme from defaultUri is used but the path part is not
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://host1/dir/file"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|defaultUri
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The defaultUri is only used if the path + wd has no scheme
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs://host2/dir2/file"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"file"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|defaultUri
argument_list|,
operator|new
name|Path
argument_list|(
name|wd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetName ()
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"hdfs://host/foo/bar"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAvroReflect ()
specifier|public
name|void
name|testAvroReflect
parameter_list|()
throws|throws
name|Exception
block|{
name|AvroTestUtil
operator|.
name|testReflect
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"{\"type\":\"string\",\"java-class\":\"org.apache.hadoop.fs.Path\"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testGlobEscapeStatus ()
specifier|public
name|void
name|testGlobEscapeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|testRoot
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"test/build/data"
argument_list|)
argument_list|,
literal|"testPathGlob"
argument_list|)
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|testRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdirs
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lfs
operator|.
name|isDirectory
argument_list|(
name|testRoot
argument_list|)
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setWorkingDirectory
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
comment|// create a couple dirs with file in them
name|Path
name|paths
index|[]
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*/f"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"d1/f"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"d2/f"
argument_list|)
block|}
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|lfs
operator|.
name|create
argument_list|(
name|p
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// try the non-globbed listStatus
name|FileStatus
name|stats
index|[]
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*/f"
argument_list|)
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure globStatus with "*" finds all dir contents
name|stats
operator|=
name|lfs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|length
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|paths
index|[
name|i
index|]
operator|.
name|getParent
argument_list|()
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ensure that globStatus with an escaped "\*" only finds "*"
name|stats
operator|=
name|lfs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"\\*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*"
argument_list|)
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to glob the inner file for all dirs
name|stats
operator|=
name|lfs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*/f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|length
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|,
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try to get the inner file for only the "*" dir
name|stats
operator|=
name|lfs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"\\*/f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*/f"
argument_list|)
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to glob all the contents of the "*" dir
name|stats
operator|=
name|lfs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"\\*/*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"*/f"
argument_list|)
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

