begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test default URI related APIs in {@link FileSystem}.  */
end_comment

begin_class
DECL|class|TestDefaultUri
specifier|public
class|class
name|TestDefaultUri
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|tetGetDefaultUri ()
specifier|public
name|void
name|tetGetDefaultUri
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://nn_host"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"hdfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"nn_host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tetGetDefaultUriWithPort ()
specifier|public
name|void
name|tetGetDefaultUriWithPort
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://nn_host:5432"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"hdfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"nn_host:5432"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tetGetDefaultUriTrailingSlash ()
specifier|public
name|void
name|tetGetDefaultUriTrailingSlash
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"hdfs://nn_host/"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"hdfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"nn_host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tetGetDefaultUriNoScheme ()
specifier|public
name|void
name|tetGetDefaultUriNoScheme
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"nn_host"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"hdfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"nn_host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tetGetDefaultUriNoSchemeTrailingSlash ()
specifier|public
name|void
name|tetGetDefaultUriNoSchemeTrailingSlash
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"nn_host/"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect IAE: No scheme in default FS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No scheme in default FS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|tetFsGet ()
specifier|public
name|void
name|tetFsGet
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fs
argument_list|,
name|instanceOf
argument_list|(
name|LocalFileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tetFsGetNoScheme ()
specifier|public
name|void
name|tetFsGetNoScheme
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Bare host name or address indicates hdfs scheme
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"nn_host"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect IOE: No FileSystem for scheme: hdfs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No FileSystem for scheme: hdfs"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|tetFsGetNoSchemeTrailingSlash ()
specifier|public
name|void
name|tetFsGetNoSchemeTrailingSlash
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Bare host name or address with trailing slash is invalid
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"nn_host/"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect IAE: No scheme in default FS"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No scheme in default FS"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

