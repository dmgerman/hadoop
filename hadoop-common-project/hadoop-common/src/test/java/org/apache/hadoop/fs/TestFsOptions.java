begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFsOptions
specifier|public
class|class
name|TestFsOptions
block|{
annotation|@
name|Test
DECL|method|testProcessChecksumOpt ()
specifier|public
name|void
name|testProcessChecksumOpt
parameter_list|()
block|{
name|ChecksumOpt
name|defaultOpt
init|=
operator|new
name|ChecksumOpt
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|ChecksumOpt
name|finalOpt
decl_stmt|;
comment|// Give a null
name|finalOpt
operator|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultOpt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkParams
argument_list|(
name|defaultOpt
argument_list|,
name|finalOpt
argument_list|)
expr_stmt|;
comment|// null with bpc
name|finalOpt
operator|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultOpt
argument_list|,
literal|null
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkParams
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|1024
argument_list|,
name|finalOpt
argument_list|)
expr_stmt|;
name|ChecksumOpt
name|myOpt
init|=
operator|new
name|ChecksumOpt
argument_list|()
decl_stmt|;
comment|// custom with unspecified parameters
name|finalOpt
operator|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultOpt
argument_list|,
name|myOpt
argument_list|)
expr_stmt|;
name|checkParams
argument_list|(
name|defaultOpt
argument_list|,
name|finalOpt
argument_list|)
expr_stmt|;
name|myOpt
operator|=
operator|new
name|ChecksumOpt
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
comment|// custom config
name|finalOpt
operator|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultOpt
argument_list|,
name|myOpt
argument_list|)
expr_stmt|;
name|checkParams
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|2048
argument_list|,
name|finalOpt
argument_list|)
expr_stmt|;
comment|// custom config + bpc
name|finalOpt
operator|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultOpt
argument_list|,
name|myOpt
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|checkParams
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|4096
argument_list|,
name|finalOpt
argument_list|)
expr_stmt|;
block|}
DECL|method|checkParams (ChecksumOpt expected, ChecksumOpt obtained)
specifier|private
name|void
name|checkParams
parameter_list|(
name|ChecksumOpt
name|expected
parameter_list|,
name|ChecksumOpt
name|obtained
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|obtained
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|obtained
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkParams (DataChecksum.Type type, int bpc, ChecksumOpt obtained)
specifier|private
name|void
name|checkParams
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|,
name|int
name|bpc
parameter_list|,
name|ChecksumOpt
name|obtained
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|type
argument_list|,
name|obtained
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bpc
argument_list|,
name|obtained
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

