begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestGetSpaceUsed
specifier|public
class|class
name|TestGetSpaceUsed
block|{
DECL|field|DIR
specifier|final
specifier|static
specifier|private
name|File
name|DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"TestGetSpaceUsed"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|DIR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|DIR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the builder can create a class specified through the class.    */
annotation|@
name|Test
DECL|method|testBuilderConf ()
specifier|public
name|void
name|testBuilderConf
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|DIR
argument_list|,
literal|"testBuilderConf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.getspaceused.classname"
argument_list|,
name|DummyDU
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CachingGetSpaceUsed
name|instance
init|=
operator|(
name|CachingGetSpaceUsed
operator|)
operator|new
name|CachingGetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|file
argument_list|)
operator|.
name|setInterval
argument_list|(
literal|0
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|instanceof
name|DummyDU
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|running
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildInitial ()
specifier|public
name|void
name|testBuildInitial
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|DIR
argument_list|,
literal|"testBuildInitial"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|CachingGetSpaceUsed
name|instance
init|=
operator|(
name|CachingGetSpaceUsed
operator|)
operator|new
name|CachingGetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|file
argument_list|)
operator|.
name|setInitialUsed
argument_list|(
literal|90210
argument_list|)
operator|.
name|setKlass
argument_list|(
name|DummyDU
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|90210
argument_list|,
name|instance
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildInterval ()
specifier|public
name|void
name|testBuildInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|DIR
argument_list|,
literal|"testBuildInitial"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|CachingGetSpaceUsed
name|instance
init|=
operator|(
name|CachingGetSpaceUsed
operator|)
operator|new
name|CachingGetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|file
argument_list|)
operator|.
name|setInitialUsed
argument_list|(
literal|90210
argument_list|)
operator|.
name|setInterval
argument_list|(
literal|50060
argument_list|)
operator|.
name|setKlass
argument_list|(
name|DummyDU
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|50060
argument_list|,
name|instance
operator|.
name|getRefreshInterval
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildNonCaching ()
specifier|public
name|void
name|testBuildNonCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|DIR
argument_list|,
literal|"testBuildNonCaching"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|GetSpaceUsed
name|instance
init|=
operator|new
name|CachingGetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|file
argument_list|)
operator|.
name|setInitialUsed
argument_list|(
literal|90210
argument_list|)
operator|.
name|setInterval
argument_list|(
literal|50060
argument_list|)
operator|.
name|setKlass
argument_list|(
name|DummyGetSpaceUsed
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|instance
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|instanceof
name|DummyGetSpaceUsed
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyDU
specifier|private
specifier|static
class|class
name|DummyDU
extends|extends
name|CachingGetSpaceUsed
block|{
DECL|method|DummyDU (Builder builder)
specifier|public
name|DummyDU
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Push to the base class.
comment|// Most times that's all that will need to be done.
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|protected
name|void
name|refresh
parameter_list|()
block|{
comment|// This is a test so don't du anything.
block|}
block|}
DECL|class|DummyGetSpaceUsed
specifier|private
specifier|static
class|class
name|DummyGetSpaceUsed
implements|implements
name|GetSpaceUsed
block|{
DECL|method|DummyGetSpaceUsed (GetSpaceUsed.Builder builder)
specifier|public
name|DummyGetSpaceUsed
parameter_list|(
name|GetSpaceUsed
operator|.
name|Builder
name|builder
parameter_list|)
block|{      }
DECL|method|getUsed ()
annotation|@
name|Override
specifier|public
name|long
name|getUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|300
return|;
block|}
block|}
block|}
end_class

end_unit

