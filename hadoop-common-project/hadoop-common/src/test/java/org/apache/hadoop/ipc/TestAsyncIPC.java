begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestIPC
operator|.
name|CallInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestIPC
operator|.
name|TestServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAsyncIPC
specifier|public
class|class
name|TestAsyncIPC
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAsyncIPC
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setupConf ()
specifier|public
name|void
name|setupConf
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|Client
operator|.
name|setPingInterval
argument_list|(
name|conf
argument_list|,
name|TestIPC
operator|.
name|PING_INTERVAL
argument_list|)
expr_stmt|;
comment|// set asynchronous mode for main thread
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|SerialCaller
specifier|protected
specifier|static
class|class
name|SerialCaller
extends|extends
name|Thread
block|{
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|server
specifier|private
name|InetSocketAddress
name|server
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|field|returnFutures
name|Map
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|LongWritable
argument_list|>
argument_list|>
name|returnFutures
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Future
argument_list|<
name|LongWritable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|expectedValues
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expectedValues
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SerialCaller (Client client, InetSocketAddress server, int count)
specifier|public
name|SerialCaller
parameter_list|(
name|Client
name|client
parameter_list|,
name|InetSocketAddress
name|server
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
comment|// set asynchronous mode, since SerialCaller extends Thread
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// in case Thread#Start is called, which will spawn new thread
name|Client
operator|.
name|setAsynchronousMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
specifier|final
name|long
name|param
init|=
name|TestIPC
operator|.
name|RANDOM
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|TestIPC
operator|.
name|call
argument_list|(
name|client
argument_list|,
name|param
argument_list|,
name|server
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|LongWritable
argument_list|>
name|returnFuture
init|=
name|Client
operator|.
name|getReturnValue
argument_list|()
decl_stmt|;
name|returnFutures
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|returnFuture
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Caught: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForReturnValues ()
specifier|public
name|void
name|waitForReturnValues
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|LongWritable
name|value
init|=
name|returnFutures
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|value
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Call-%d failed!"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSerial ()
specifier|public
name|void
name|testSerial
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|internalTestSerial
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|internalTestSerial
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|internalTestSerial (int handlerCount, boolean handlerSleep, int clientCount, int callerCount, int callCount)
specifier|public
name|void
name|internalTestSerial
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|handlerSleep
parameter_list|,
name|int
name|clientCount
parameter_list|,
name|int
name|callerCount
parameter_list|,
name|int
name|callCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Server
name|server
init|=
operator|new
name|TestIPC
operator|.
name|TestServer
argument_list|(
name|handlerCount
argument_list|,
name|handlerSleep
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Client
index|[]
name|clients
init|=
operator|new
name|Client
index|[
name|clientCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|SerialCaller
index|[]
name|callers
init|=
operator|new
name|SerialCaller
index|[
name|callerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|=
operator|new
name|SerialCaller
argument_list|(
name|clients
index|[
name|i
operator|%
name|clientCount
index|]
argument_list|,
name|addr
argument_list|,
name|callCount
argument_list|)
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|waitForReturnValues
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected not failed for caller-%d: %s."
argument_list|,
name|i
argument_list|,
name|callers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|callers
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if (1) the rpc server uses the call id/retry provided by the rpc    * client, and (2) the rpc client receives the same call id/retry from the rpc    * server.    *    * @throws ExecutionException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCallIdAndRetry ()
specifier|public
name|void
name|testCallIdAndRetry
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|CallInfo
argument_list|>
name|infoMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|CallInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// Override client to store the call info and check response
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|Call
name|createCall
parameter_list|(
name|RpcKind
name|rpcKind
parameter_list|,
name|Writable
name|rpcRequest
parameter_list|)
block|{
comment|// Set different call id and retry count for the next call
name|Client
operator|.
name|setCallIdAndRetryCount
argument_list|(
name|Client
operator|.
name|nextCallId
argument_list|()
argument_list|,
name|TestIPC
operator|.
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|255
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Call
name|call
init|=
name|super
operator|.
name|createCall
argument_list|(
name|rpcKind
argument_list|,
name|rpcRequest
argument_list|)
decl_stmt|;
name|CallInfo
name|info
init|=
operator|new
name|CallInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|id
operator|=
name|call
operator|.
name|id
expr_stmt|;
name|info
operator|.
name|retry
operator|=
name|call
operator|.
name|retry
expr_stmt|;
name|infoMap
operator|.
name|put
argument_list|(
name|call
operator|.
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
annotation|@
name|Override
name|void
name|checkResponse
parameter_list|(
name|RpcResponseHeaderProto
name|header
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|checkResponse
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|infoMap
operator|.
name|get
argument_list|(
name|header
operator|.
name|getCallId
argument_list|()
argument_list|)
operator|.
name|retry
argument_list|,
name|header
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// Attach a listener that tracks every call received by the server.
specifier|final
name|TestServer
name|server
init|=
operator|new
name|TestIPC
operator|.
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|infoMap
operator|.
name|get
argument_list|(
name|Server
operator|.
name|getCallId
argument_list|()
argument_list|)
operator|.
name|retry
argument_list|,
name|Server
operator|.
name|getCallRetryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|SerialCaller
name|caller
init|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|caller
operator|.
name|run
argument_list|()
expr_stmt|;
name|caller
operator|.
name|waitForReturnValues
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected not failed for caller: %s."
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|caller
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test if the rpc server gets the retry count from client.    *    * @throws ExecutionException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCallRetryCount ()
specifier|public
name|void
name|testCallRetryCount
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|retryCount
init|=
literal|255
decl_stmt|;
comment|// Override client to store the call id
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Client
operator|.
name|setCallIdAndRetryCount
argument_list|(
name|Client
operator|.
name|nextCallId
argument_list|()
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
comment|// Attach a listener that tracks every call ID received by the server.
specifier|final
name|TestServer
name|server
init|=
operator|new
name|TestIPC
operator|.
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// we have not set the retry count for the client, thus on the server
comment|// side we should see retry count as 0
name|Assert
operator|.
name|assertEquals
argument_list|(
name|retryCount
argument_list|,
name|Server
operator|.
name|getCallRetryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|SerialCaller
name|caller
init|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|caller
operator|.
name|run
argument_list|()
expr_stmt|;
name|caller
operator|.
name|waitForReturnValues
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected not failed for caller: %s."
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|caller
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test if the rpc server gets the default retry count (0) from client.    *    * @throws ExecutionException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInitialCallRetryCount ()
specifier|public
name|void
name|testInitialCallRetryCount
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// Override client to store the call id
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Attach a listener that tracks every call ID received by the server.
specifier|final
name|TestServer
name|server
init|=
operator|new
name|TestIPC
operator|.
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// we have not set the retry count for the client, thus on the server
comment|// side we should see retry count as 0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Server
operator|.
name|getCallRetryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|SerialCaller
name|caller
init|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|caller
operator|.
name|run
argument_list|()
expr_stmt|;
name|caller
operator|.
name|waitForReturnValues
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected not failed for caller: %s."
argument_list|,
name|caller
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|caller
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that client generates a unique sequential call ID for each RPC call,    * even if multiple threads are using the same client.    *    * @throws InterruptedException    * @throws ExecutionException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUniqueSequentialCallIds ()
specifier|public
name|void
name|testUniqueSequentialCallIds
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|int
name|serverThreads
init|=
literal|10
decl_stmt|,
name|callerCount
init|=
literal|100
decl_stmt|,
name|perCallerCallCount
init|=
literal|100
decl_stmt|;
name|TestServer
name|server
init|=
operator|new
name|TestIPC
operator|.
name|TestServer
argument_list|(
name|serverThreads
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Attach a listener that tracks every call ID received by the server. This
comment|// list must be synchronized, because multiple server threads will add to
comment|// it.
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|callIds
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callIds
operator|.
name|add
argument_list|(
name|Server
operator|.
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|SerialCaller
index|[]
name|callers
init|=
operator|new
name|SerialCaller
index|[
name|callerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
operator|++
name|i
control|)
block|{
name|callers
index|[
name|i
index|]
operator|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
name|perCallerCallCount
argument_list|)
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
operator|++
name|i
control|)
block|{
name|callers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|waitForReturnValues
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Expected not failed for caller-%d: %s."
argument_list|,
name|i
argument_list|,
name|callers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|callers
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|int
name|expectedCallCount
init|=
name|callerCount
operator|*
name|perCallerCallCount
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCallCount
argument_list|,
name|callIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// It is not guaranteed that the server executes requests in sequential
comment|// order
comment|// of client call ID, so we must sort the call IDs before checking that it
comment|// contains every expected value.
name|Collections
operator|.
name|sort
argument_list|(
name|callIds
argument_list|)
expr_stmt|;
specifier|final
name|int
name|startID
init|=
name|callIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCallCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|startID
operator|+
name|i
argument_list|,
name|callIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

