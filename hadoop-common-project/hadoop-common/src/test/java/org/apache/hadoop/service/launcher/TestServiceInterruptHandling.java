begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|BreakableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|FailureTestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test service launcher interrupt handling.  */
end_comment

begin_class
DECL|class|TestServiceInterruptHandling
specifier|public
class|class
name|TestServiceInterruptHandling
extends|extends
name|AbstractServiceLauncherTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestServiceInterruptHandling
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testRegisterAndRaise ()
specifier|public
name|void
name|testRegisterAndRaise
parameter_list|()
throws|throws
name|Throwable
block|{
name|InterruptCatcher
name|catcher
init|=
operator|new
name|InterruptCatcher
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|IrqHandler
operator|.
name|CONTROL_C
decl_stmt|;
name|IrqHandler
name|irqHandler
init|=
operator|new
name|IrqHandler
argument_list|(
name|name
argument_list|,
name|catcher
argument_list|)
decl_stmt|;
name|irqHandler
operator|.
name|bind
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|irqHandler
operator|.
name|getSignalCount
argument_list|()
argument_list|)
expr_stmt|;
name|irqHandler
operator|.
name|raise
argument_list|()
expr_stmt|;
comment|// allow for an async event
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|IrqHandler
operator|.
name|InterruptData
name|data
init|=
name|catcher
operator|.
name|interruptData
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"interrupt data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|data
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|irqHandler
operator|.
name|getSignalCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterruptEscalationShutdown ()
specifier|public
name|void
name|testInterruptEscalationShutdown
parameter_list|()
throws|throws
name|Throwable
block|{
name|ExitTrackingServiceLauncher
argument_list|<
name|BreakableService
argument_list|>
name|launcher
init|=
operator|new
name|ExitTrackingServiceLauncher
argument_list|<>
argument_list|(
name|BreakableService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BreakableService
name|service
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|InterruptEscalator
name|escalator
init|=
operator|new
name|InterruptEscalator
argument_list|(
name|launcher
argument_list|,
literal|500
argument_list|)
decl_stmt|;
comment|// call the interrupt operation directly
try|try
block|{
name|escalator
operator|.
name|interrupted
argument_list|(
operator|new
name|IrqHandler
operator|.
name|InterruptData
argument_list|(
literal|"INT"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to be raised in "
operator|+
name|escalator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertExceptionDetails
argument_list|(
name|EXIT_INTERRUPTED
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//the service is now stopped
name|assertStopped
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"isSignalAlreadyReceived() == false in "
operator|+
name|escalator
argument_list|,
name|escalator
operator|.
name|isSignalAlreadyReceived
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"isForcedShutdownTimedOut() == true in "
operator|+
name|escalator
argument_list|,
name|escalator
operator|.
name|isForcedShutdownTimedOut
argument_list|()
argument_list|)
expr_stmt|;
comment|// now interrupt it a second time and expect it to escalate to a halt
try|try
block|{
name|escalator
operator|.
name|interrupted
argument_list|(
operator|new
name|IrqHandler
operator|.
name|InterruptData
argument_list|(
literal|"INT"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to be raised in "
operator|+
name|escalator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|HaltException
name|e
parameter_list|)
block|{
name|assertExceptionDetails
argument_list|(
name|EXIT_INTERRUPTED
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockingShutdownTimeouts ()
specifier|public
name|void
name|testBlockingShutdownTimeouts
parameter_list|()
throws|throws
name|Throwable
block|{
name|ExitTrackingServiceLauncher
argument_list|<
name|FailureTestService
argument_list|>
name|launcher
init|=
operator|new
name|ExitTrackingServiceLauncher
argument_list|<>
argument_list|(
name|FailureTestService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FailureTestService
name|service
init|=
operator|new
name|FailureTestService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|2000
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|InterruptEscalator
name|escalator
init|=
operator|new
name|InterruptEscalator
argument_list|(
name|launcher
argument_list|,
literal|500
argument_list|)
decl_stmt|;
comment|// call the interrupt operation directly
try|try
block|{
name|escalator
operator|.
name|interrupted
argument_list|(
operator|new
name|IrqHandler
operator|.
name|InterruptData
argument_list|(
literal|"INT"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to be raised from "
operator|+
name|escalator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertExceptionDetails
argument_list|(
name|EXIT_INTERRUPTED
argument_list|,
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"isForcedShutdownTimedOut() == false in "
operator|+
name|escalator
argument_list|,
name|escalator
operator|.
name|isForcedShutdownTimedOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|InterruptCatcher
specifier|private
specifier|static
class|class
name|InterruptCatcher
implements|implements
name|IrqHandler
operator|.
name|Interrupted
block|{
DECL|field|interruptData
specifier|public
name|IrqHandler
operator|.
name|InterruptData
name|interruptData
decl_stmt|;
annotation|@
name|Override
DECL|method|interrupted (IrqHandler.InterruptData data)
specifier|public
name|void
name|interrupted
parameter_list|(
name|IrqHandler
operator|.
name|InterruptData
name|data
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupt caught"
argument_list|)
expr_stmt|;
name|this
operator|.
name|interruptData
operator|=
name|data
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

