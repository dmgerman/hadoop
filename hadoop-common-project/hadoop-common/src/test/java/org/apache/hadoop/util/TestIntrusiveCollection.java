begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *<pre>  * Story 1  * As a software developer,  *  I want to use the IntrusiveCollection class;  * So that I can save on memory usage during execution.  *</pre>  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|IntrusiveCollection
operator|.
name|Element
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestIntrusiveCollection
specifier|public
class|class
name|TestIntrusiveCollection
extends|extends
name|HadoopTestBase
block|{
DECL|class|SimpleElement
specifier|static
class|class
name|SimpleElement
implements|implements
name|IntrusiveCollection
operator|.
name|Element
block|{
specifier|private
name|Map
argument_list|<
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
argument_list|,
name|Element
argument_list|>
DECL|field|prevMap
DECL|field|nextMap
name|prevMap
decl_stmt|,
name|nextMap
decl_stmt|;
DECL|field|isMemberMap
specifier|private
name|Map
argument_list|<
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
argument_list|,
name|Boolean
argument_list|>
name|isMemberMap
decl_stmt|;
DECL|method|SimpleElement ()
specifier|public
name|SimpleElement
parameter_list|()
block|{
name|prevMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nextMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|isMemberMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insertInternal (IntrusiveCollection<? extends Element> list, Element prev, Element next)
specifier|public
name|void
name|insertInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
name|isMemberMap
operator|.
name|put
argument_list|(
name|list
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|prevMap
operator|.
name|put
argument_list|(
name|list
argument_list|,
name|prev
argument_list|)
expr_stmt|;
name|nextMap
operator|.
name|put
argument_list|(
name|list
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPrev (IntrusiveCollection<? extends Element> list, Element prev)
specifier|public
name|void
name|setPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|)
block|{
name|prevMap
operator|.
name|put
argument_list|(
name|list
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNext (IntrusiveCollection<? extends Element> list, Element next)
specifier|public
name|void
name|setNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
name|nextMap
operator|.
name|put
argument_list|(
name|list
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeInternal (IntrusiveCollection<? extends Element> list)
specifier|public
name|void
name|removeInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
name|prevMap
operator|.
name|remove
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|nextMap
operator|.
name|remove
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|isMemberMap
operator|.
name|remove
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPrev (IntrusiveCollection<? extends Element> list)
specifier|public
name|Element
name|getPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|prevMap
operator|.
name|getOrDefault
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNext (IntrusiveCollection<? extends Element> list)
specifier|public
name|Element
name|getNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|nextMap
operator|.
name|getOrDefault
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isInList (IntrusiveCollection<? extends Element> list)
specifier|public
name|boolean
name|isInList
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|isMemberMap
operator|.
name|getOrDefault
argument_list|(
name|list
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|/**    *<pre>    * Scenario S1.1: Adding an element    * Given  an IntrusiveCollection has been created    *  and    the IntrusiveCollection is empty    * When    I insert an element    * Then    the IntrusiveCollection contains the newly added element.    *</pre>    */
annotation|@
name|Test
DECL|method|testShouldAddElement ()
specifier|public
name|void
name|testShouldAddElement
parameter_list|()
block|{
name|IntrusiveCollection
argument_list|<
name|SimpleElement
argument_list|>
name|intrusiveCollection
init|=
operator|new
name|IntrusiveCollection
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleElement
name|element
init|=
operator|new
name|SimpleElement
argument_list|()
decl_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Collection should not be empty"
argument_list|,
name|intrusiveCollection
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection should contain added element"
argument_list|,
name|intrusiveCollection
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *<pre>    * Scenario S1.2: Removing an element    * Given  an IntrusiveCollection has been created    *  and    the InstrusiveCollection contains a single element    * When    I remove the element    * Then    the IntrusiveCollection is empty.    *</pre>    */
annotation|@
name|Test
DECL|method|testShouldRemoveElement ()
specifier|public
name|void
name|testShouldRemoveElement
parameter_list|()
block|{
name|IntrusiveCollection
argument_list|<
name|SimpleElement
argument_list|>
name|intrusiveCollection
init|=
operator|new
name|IntrusiveCollection
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleElement
name|element
init|=
operator|new
name|SimpleElement
argument_list|()
decl_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|remove
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection should be empty"
argument_list|,
name|intrusiveCollection
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Collection should not contain removed element"
argument_list|,
name|intrusiveCollection
operator|.
name|contains
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *<pre>    * Scenario S1.3: Removing all elements    * Given  an IntrusiveCollection has been created    *  and    the IntrusiveCollection contains multiple elements    * When    I remove all elements    * Then    the IntrusiveCollection is empty.    *</pre>    */
annotation|@
name|Test
DECL|method|testShouldRemoveAllElements ()
specifier|public
name|void
name|testShouldRemoveAllElements
parameter_list|()
block|{
name|IntrusiveCollection
argument_list|<
name|SimpleElement
argument_list|>
name|intrusiveCollection
init|=
operator|new
name|IntrusiveCollection
argument_list|<>
argument_list|()
decl_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
operator|new
name|SimpleElement
argument_list|()
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
operator|new
name|SimpleElement
argument_list|()
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
operator|new
name|SimpleElement
argument_list|()
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Collection should be empty"
argument_list|,
name|intrusiveCollection
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *<pre>    * Scenario S1.4: Iterating through elements    * Given  an IntrusiveCollection has been created    *  and    the IntrusiveCollection contains multiple elements    * When    I iterate through the IntrusiveCollection    * Then    I get each element in the collection, successively.    *</pre>    */
annotation|@
name|Test
DECL|method|testIterateShouldReturnAllElements ()
specifier|public
name|void
name|testIterateShouldReturnAllElements
parameter_list|()
block|{
name|IntrusiveCollection
argument_list|<
name|SimpleElement
argument_list|>
name|intrusiveCollection
init|=
operator|new
name|IntrusiveCollection
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleElement
name|elem1
init|=
operator|new
name|SimpleElement
argument_list|()
decl_stmt|;
name|SimpleElement
name|elem2
init|=
operator|new
name|SimpleElement
argument_list|()
decl_stmt|;
name|SimpleElement
name|elem3
init|=
operator|new
name|SimpleElement
argument_list|()
decl_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
name|elem1
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
name|elem2
argument_list|)
expr_stmt|;
name|intrusiveCollection
operator|.
name|add
argument_list|(
name|elem3
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SimpleElement
argument_list|>
name|iterator
init|=
name|intrusiveCollection
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"First element returned is incorrect"
argument_list|,
name|elem1
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second element returned is incorrect"
argument_list|,
name|elem2
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Third element returned is incorrect"
argument_list|,
name|elem3
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Iterator should not have next element"
argument_list|,
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

