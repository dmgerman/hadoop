begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test class for @DefaultImpersonationProvider  */
end_comment

begin_class
DECL|class|TestDefaultImpersonationProvider
specifier|public
class|class
name|TestDefaultImpersonationProvider
block|{
DECL|field|proxyUser
specifier|private
name|String
name|proxyUser
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|provider
specifier|private
name|DefaultImpersonationProvider
name|provider
decl_stmt|;
DECL|field|userGroupInformation
specifier|private
name|UserGroupInformation
name|userGroupInformation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|realUserUGI
specifier|private
name|UserGroupInformation
name|realUserUGI
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|provider
operator|=
operator|new
name|DefaultImpersonationProvider
argument_list|()
expr_stmt|;
comment|// Setup 3 proxy users
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.fakeuser.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.fakeuser.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.user.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.user.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test user2.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test user2.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|provider
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|provider
operator|.
name|init
argument_list|(
name|ProxyUsers
operator|.
name|CONF_HADOOP_PROXYUSER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthorizationSuccess ()
specifier|public
name|void
name|testAuthorizationSuccess
parameter_list|()
throws|throws
name|AuthorizationException
block|{
name|proxyUser
operator|=
literal|"fakeuser"
expr_stmt|;
name|user
operator|=
literal|"dummyUser"
expr_stmt|;
name|when
argument_list|(
name|realUserUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|userGroupInformation
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|realUserUGI
argument_list|)
expr_stmt|;
name|provider
operator|.
name|authorize
argument_list|(
name|userGroupInformation
argument_list|,
literal|"2.2.2.2"
argument_list|)
expr_stmt|;
name|user
operator|=
literal|"somerandomuser"
expr_stmt|;
name|proxyUser
operator|=
literal|"test.user"
expr_stmt|;
name|when
argument_list|(
name|realUserUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|userGroupInformation
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|realUserUGI
argument_list|)
expr_stmt|;
name|provider
operator|.
name|authorize
argument_list|(
name|userGroupInformation
argument_list|,
literal|"2.2.2.2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthorizationFailure ()
specifier|public
name|void
name|testAuthorizationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|user
operator|=
literal|"dummyUser"
expr_stmt|;
name|proxyUser
operator|=
literal|"test user2"
expr_stmt|;
name|when
argument_list|(
name|realUserUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|realUserUGI
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|userGroupInformation
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|userGroupInformation
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|realUserUGI
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthorizationException
operator|.
name|class
argument_list|,
literal|"User: "
operator|+
name|proxyUser
operator|+
literal|" is not allowed to impersonate "
operator|+
name|user
argument_list|,
parameter_list|()
lambda|->
name|provider
operator|.
name|authorize
argument_list|(
name|userGroupInformation
argument_list|,
literal|"2.2.2.2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|provider
operator|=
literal|null
expr_stmt|;
name|conf
operator|=
literal|null
expr_stmt|;
name|userGroupInformation
operator|=
literal|null
expr_stmt|;
name|realUserUGI
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

