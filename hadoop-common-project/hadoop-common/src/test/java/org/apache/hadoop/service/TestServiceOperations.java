begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Test miscellaneous service operations through mocked failures.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestServiceOperations
specifier|public
class|class
name|TestServiceOperations
block|{
annotation|@
name|Mock
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
annotation|@
name|Mock
DECL|field|e
specifier|private
name|RuntimeException
name|e
decl_stmt|;
annotation|@
name|Test
DECL|method|testStopQuietlyWhenServiceStopThrowsException ()
specifier|public
name|void
name|testStopQuietlyWhenServiceStopThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestServiceOperations
operator|.
name|class
argument_list|)
decl_stmt|;
name|LogCapturer
name|logCapturer
init|=
name|captureLogs
argument_list|(
name|logger
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
name|e
argument_list|)
operator|.
name|when
argument_list|(
name|service
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|logger
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"When stopping the service "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|e
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|printStackTrace
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|PrintWriter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

