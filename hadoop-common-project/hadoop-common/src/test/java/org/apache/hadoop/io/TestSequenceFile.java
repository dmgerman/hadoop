begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
operator|.
name|AvroReflectSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/** Support for flat files of binary key/value pairs. */
end_comment

begin_class
DECL|class|TestSequenceFile
specifier|public
class|class
name|TestSequenceFile
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSequenceFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/** Unit tests for SequenceFile. */
annotation|@
name|Test
DECL|method|testZlibSequenceFile ()
specifier|public
name|void
name|testZlibSequenceFile
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing SequenceFile with DefaultCodec"
argument_list|)
expr_stmt|;
name|compressedSeqFileTest
argument_list|(
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully tested SequenceFile with DefaultCodec"
argument_list|)
expr_stmt|;
block|}
DECL|method|compressedSeqFileTest (CompressionCodec codec)
specifier|public
name|void
name|compressedSeqFileTest
parameter_list|(
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|1024
operator|*
literal|10
decl_stmt|;
name|int
name|megabytes
init|=
literal|1
decl_stmt|;
name|int
name|factor
init|=
literal|5
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|recordCompressedFile
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.rc.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|blockCompressedFile
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.bc.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// SequenceFile.Writer
name|writeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|readTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|false
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|true
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|false
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// SequenceFile.RecordCompressWriter
name|writeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|readTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|false
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|true
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
literal|false
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
literal|true
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
comment|// SequenceFile.BlockCompressWriter
name|writeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|readTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|false
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
literal|true
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
literal|false
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
literal|true
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|writeTest (FileSystem fs, int count, int seed, Path file, CompressionType compressionType, CompressionCodec codec)
specifier|private
name|void
name|writeTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|seed
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionType
name|compressionType
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating "
operator|+
name|count
operator|+
literal|" records with "
operator|+
name|compressionType
operator|+
literal|" compression"
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|file
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|compressionType
argument_list|,
name|codec
argument_list|)
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|readTest (FileSystem fs, int count, int seed, Path file)
specifier|private
name|void
name|readTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|seed
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"reading "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|RandomDatum
name|k
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|rawKey
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|ValueBytes
name|rawValue
init|=
name|reader
operator|.
name|createValueBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|5
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Testing 'raw' apis
name|rawKey
operator|.
name|reset
argument_list|()
expr_stmt|;
name|reader
operator|.
name|nextRaw
argument_list|(
name|rawKey
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Testing 'non-raw' apis
if|if
condition|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|reader
operator|.
name|next
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getCurrentValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
comment|// Check
if|if
condition|(
operator|!
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wrong key at "
operator|+
name|i
argument_list|)
throw|;
if|if
condition|(
operator|!
name|v
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wrong value at "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Problem on row "
operator|+
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected key = "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected len = "
operator|+
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual key = "
operator|+
name|k
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual len = "
operator|+
name|k
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected value = "
operator|+
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected len = "
operator|+
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual value = "
operator|+
name|v
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual len = "
operator|+
name|v
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Key equals: "
operator|+
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"value equals: "
operator|+
name|v
operator|.
name|equals
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|sortTest (FileSystem fs, int count, int megabytes, int factor, boolean fast, Path file)
specifier|private
name|void
name|sortTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|megabytes
parameter_list|,
name|int
name|factor
parameter_list|,
name|boolean
name|fast
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|+
literal|".sorted"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
name|newSorter
argument_list|(
name|fs
argument_list|,
name|fast
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sorting "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
name|file
argument_list|,
name|file
operator|.
name|suffix
argument_list|(
literal|".sorted"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done sorting "
operator|+
name|count
operator|+
literal|" debug"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|checkSort (FileSystem fs, int count, int seed, Path file)
specifier|private
name|void
name|checkSort
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|seed
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sorting "
operator|+
name|count
operator|+
literal|" records in memory for debug"
argument_list|)
expr_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|RandomDatum
argument_list|,
name|RandomDatum
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|RandomDatum
argument_list|,
name|RandomDatum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"checking order of "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|RandomDatum
name|k
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|RandomDatum
argument_list|,
name|RandomDatum
argument_list|>
argument_list|>
name|iterator
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|file
operator|.
name|suffix
argument_list|(
literal|".sorted"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|RandomDatum
argument_list|,
name|RandomDatum
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|RandomDatum
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wrong key at "
operator|+
name|i
argument_list|)
throw|;
if|if
condition|(
operator|!
name|v
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wrong value at "
operator|+
name|i
argument_list|)
throw|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sucessfully checked "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|mergeTest (FileSystem fs, int count, int seed, Path file, CompressionType compressionType, boolean fast, int factor, int megabytes)
specifier|private
name|void
name|mergeTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|seed
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionType
name|compressionType
parameter_list|,
name|boolean
name|fast
parameter_list|,
name|int
name|factor
parameter_list|,
name|int
name|megabytes
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating "
operator|+
name|factor
operator|+
literal|" files with "
operator|+
name|count
operator|/
name|factor
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
index|[]
name|writers
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
index|[
name|factor
index|]
decl_stmt|;
name|Path
index|[]
name|names
init|=
operator|new
name|Path
index|[
name|factor
index|]
decl_stmt|;
name|Path
index|[]
name|sortedNames
init|=
operator|new
name|Path
index|[
name|factor
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factor
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|file
operator|.
name|suffix
argument_list|(
literal|"."
operator|+
name|i
argument_list|)
expr_stmt|;
name|sortedNames
index|[
name|i
index|]
operator|=
name|names
index|[
name|i
index|]
operator|.
name|suffix
argument_list|(
literal|".sorted"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|sortedNames
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|names
index|[
name|i
index|]
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|compressionType
argument_list|)
expr_stmt|;
block|}
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writers
index|[
name|i
operator|%
name|factor
index|]
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factor
condition|;
name|i
operator|++
control|)
name|writers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factor
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"sorting file "
operator|+
name|i
operator|+
literal|" with "
operator|+
name|count
operator|/
name|factor
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|newSorter
argument_list|(
name|fs
argument_list|,
name|fast
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|)
operator|.
name|sort
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|sortedNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"merging "
operator|+
name|factor
operator|+
literal|" files with "
operator|+
name|count
operator|/
name|factor
operator|+
literal|" debug"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|+
literal|".sorted"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newSorter
argument_list|(
name|fs
argument_list|,
name|fast
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|)
operator|.
name|merge
argument_list|(
name|sortedNames
argument_list|,
name|file
operator|.
name|suffix
argument_list|(
literal|".sorted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newSorter (FileSystem fs, boolean fast, int megabytes, int factor)
specifier|private
name|SequenceFile
operator|.
name|Sorter
name|newSorter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|fast
parameter_list|,
name|int
name|megabytes
parameter_list|,
name|int
name|factor
parameter_list|)
block|{
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
name|fast
condition|?
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
operator|new
name|RandomDatum
operator|.
name|Comparator
argument_list|()
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|conf
argument_list|)
else|:
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|setMemory
argument_list|(
name|megabytes
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
expr_stmt|;
return|return
name|sorter
return|;
block|}
comment|/** Unit tests for SequenceFile metadata. */
annotation|@
name|Test
DECL|method|testSequenceFileMetadata ()
specifier|public
name|void
name|testSequenceFileMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing SequenceFile with metadata"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1024
operator|*
literal|10
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|DefaultCodec
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.seq.metadata"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|sortedFile
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.sorted.seq.metadata"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|recordCompressedFile
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.rc.seq.metadata"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|blockCompressedFile
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test.bc.seq.metadata"
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Metadata
name|theMetadata
init|=
operator|new
name|SequenceFile
operator|.
name|Metadata
argument_list|()
decl_stmt|;
name|theMetadata
operator|.
name|set
argument_list|(
operator|new
name|Text
argument_list|(
literal|"name_1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value_1"
argument_list|)
argument_list|)
expr_stmt|;
name|theMetadata
operator|.
name|set
argument_list|(
operator|new
name|Text
argument_list|(
literal|"name_2"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value_2"
argument_list|)
argument_list|)
expr_stmt|;
name|theMetadata
operator|.
name|set
argument_list|(
operator|new
name|Text
argument_list|(
literal|"name_3"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value_3"
argument_list|)
argument_list|)
expr_stmt|;
name|theMetadata
operator|.
name|set
argument_list|(
operator|new
name|Text
argument_list|(
literal|"name_4"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value_4"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
try|try
block|{
comment|// SequenceFile.Writer
name|writeMetadataTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|theMetadata
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Metadata
name|aMetadata
init|=
name|readMetadata
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|theMetadata
operator|.
name|equals
argument_list|(
name|aMetadata
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The original metadata:\n"
operator|+
name|theMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The retrieved metadata:\n"
operator|+
name|aMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metadata not match:  "
operator|+
literal|1
argument_list|)
throw|;
block|}
comment|// SequenceFile.RecordCompressWriter
name|writeMetadataTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|recordCompressedFile
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|codec
argument_list|,
name|theMetadata
argument_list|)
expr_stmt|;
name|aMetadata
operator|=
name|readMetadata
argument_list|(
name|fs
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|theMetadata
operator|.
name|equals
argument_list|(
name|aMetadata
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The original metadata:\n"
operator|+
name|theMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The retrieved metadata:\n"
operator|+
name|aMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metadata not match:  "
operator|+
literal|2
argument_list|)
throw|;
block|}
comment|// SequenceFile.BlockCompressWriter
name|writeMetadataTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|blockCompressedFile
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|codec
argument_list|,
name|theMetadata
argument_list|)
expr_stmt|;
name|aMetadata
operator|=
name|readMetadata
argument_list|(
name|fs
argument_list|,
name|blockCompressedFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|theMetadata
operator|.
name|equals
argument_list|(
name|aMetadata
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The original metadata:\n"
operator|+
name|theMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The retrieved metadata:\n"
operator|+
name|aMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metadata not match:  "
operator|+
literal|3
argument_list|)
throw|;
block|}
comment|// SequenceFile.Sorter
name|sortMetadataTest
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|sortedFile
argument_list|,
name|theMetadata
argument_list|)
expr_stmt|;
name|aMetadata
operator|=
name|readMetadata
argument_list|(
name|fs
argument_list|,
name|recordCompressedFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|theMetadata
operator|.
name|equals
argument_list|(
name|aMetadata
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The original metadata:\n"
operator|+
name|theMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The retrieved metadata:\n"
operator|+
name|aMetadata
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metadata not match:  "
operator|+
literal|4
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully tested SequenceFile with metadata"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|readMetadata (FileSystem fs, Path file)
specifier|private
name|SequenceFile
operator|.
name|Metadata
name|readMetadata
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"reading file: "
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Metadata
name|meta
init|=
name|reader
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|meta
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|writeMetadataTest (FileSystem fs, int count, int seed, Path file, CompressionType compressionType, CompressionCodec codec, SequenceFile.Metadata metadata)
specifier|private
name|void
name|writeMetadataTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|seed
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionType
name|compressionType
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|SequenceFile
operator|.
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating "
operator|+
name|count
operator|+
literal|" records with metadata and with "
operator|+
name|compressionType
operator|+
literal|" compression"
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|file
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|compressionType
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|sortMetadataTest (FileSystem fs, Path unsortedFile, Path sortedFile, SequenceFile.Metadata metadata)
specifier|private
name|void
name|sortMetadataTest
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|unsortedFile
parameter_list|,
name|Path
name|sortedFile
parameter_list|,
name|SequenceFile
operator|.
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|sortedFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sorting: "
operator|+
name|unsortedFile
operator|+
literal|" to: "
operator|+
name|sortedFile
argument_list|)
expr_stmt|;
specifier|final
name|WritableComparator
name|comparator
init|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|RandomDatum
operator|.
name|class
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
name|comparator
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|sort
argument_list|(
operator|new
name|Path
index|[]
block|{
name|unsortedFile
block|}
argument_list|,
name|sortedFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create a sequence file 1
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test1.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|path1
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
literal|"file1-1"
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
literal|"file1-2"
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"test2.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|path2
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
literal|"file2-1"
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|Text
argument_list|(
literal|"file2-2"
argument_list|)
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create a reader which uses 4 BuiltInZLibInflater instances
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Returns the 4 BuiltInZLibInflater instances to the CodecPool
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The second close _could_ erroneously returns the same
comment|// 4 BuiltInZLibInflater instances to the CodecPool again
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The first reader gets 4 BuiltInZLibInflater instances from the CodecPool
name|SequenceFile
operator|.
name|Reader
name|reader1
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// read first value from reader1
name|Text
name|text
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|reader1
operator|.
name|next
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file1-1"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// The second reader _could_ get the same 4 BuiltInZLibInflater
comment|// instances from the CodePool as reader1
name|SequenceFile
operator|.
name|Reader
name|reader2
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path2
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// read first value from reader2
name|reader2
operator|.
name|next
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file2-1"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// read second value from reader1
name|reader1
operator|.
name|next
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file1-2"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// read second value from reader2 (this throws an exception)
name|reader2
operator|.
name|next
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file2-2"
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader1
operator|.
name|next
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader2
operator|.
name|next
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that makes sure the FileSystem passed to createWriter    * @throws Exception    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testCreateUsesFsArg ()
specifier|public
name|void
name|testCreateUsesFsArg
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|spyFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testCreateUsesFSArg.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|spyFs
argument_list|,
name|conf
argument_list|,
name|p
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spyFs
argument_list|)
operator|.
name|getDefaultReplication
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|class|TestFSDataInputStream
specifier|private
specifier|static
class|class
name|TestFSDataInputStream
extends|extends
name|FSDataInputStream
block|{
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|TestFSDataInputStream (InputStream in)
specifier|private
name|TestFSDataInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testCloseForErroneousSequenceFile ()
specifier|public
name|void
name|testCloseForErroneousSequenceFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create an empty file (which is not a valid sequence file)
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"broken.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// try to create SequenceFile.Reader
specifier|final
name|TestFSDataInputStream
index|[]
name|openedFile
init|=
operator|new
name|TestFSDataInputStream
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
block|{
comment|// this method is called by the SequenceFile.Reader constructor, overwritten, so we can access the opened file
annotation|@
name|Override
specifier|protected
name|FSDataInputStream
name|openFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InputStream
name|in
init|=
name|super
operator|.
name|openFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bufferSize
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|openedFile
index|[
literal|0
index|]
operator|=
operator|new
name|TestFSDataInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|openedFile
index|[
literal|0
index|]
return|;
block|}
block|}
expr_stmt|;
name|fail
argument_list|(
literal|"IOException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{}
name|assertNotNull
argument_list|(
name|path
operator|+
literal|" should have been opened."
argument_list|,
name|openedFile
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"InputStream for "
operator|+
name|path
operator|+
literal|" should have been closed."
argument_list|,
name|openedFile
index|[
literal|0
index|]
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to makes sure zero length sequence file is handled properly while    * initializing.    */
annotation|@
name|Test
DECL|method|testInitZeroLengthSequenceFile ()
specifier|public
name|void
name|testInitZeroLengthSequenceFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create an empty file (which is not a valid sequence file)
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"zerolength.seq"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"IOException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|instanceof
name|EOFException
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that makes sure createWriter succeeds on a file that was     * already created    * @throws IOException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testCreateWriterOnExistingFile ()
specifier|public
name|void
name|testCreateWriterOnExistingFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|name
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"createWriterOnExistingFile"
argument_list|)
argument_list|)
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testRecursiveSeqFileCreate ()
specifier|public
name|void
name|testRecursiveSeqFileCreate
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|name
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"recursiveCreateDir"
argument_list|)
argument_list|)
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|boolean
name|createParent
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|4096
argument_list|,
name|createParent
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException due to missing parent"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Expected
block|}
name|createParent
operator|=
literal|true
expr_stmt|;
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
name|RandomDatum
operator|.
name|class
argument_list|,
literal|512
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|4096
argument_list|,
name|createParent
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
comment|// should succeed, fails if exception thrown
block|}
annotation|@
name|Test
DECL|method|testSerializationAvailability ()
specifier|public
name|void
name|testSerializationAvailability
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"serializationAvailability"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check if any serializers aren't found.
try|try
block|{
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: This may also fail someday if JavaSerialization
comment|// is activated by default.
name|fail
argument_list|(
literal|"Must throw IOException for missing serializer for the Key class"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Could not find a serializer for the Key class: '"
operator|+
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: This may also fail someday if JavaSerialization
comment|// is activated by default.
name|fail
argument_list|(
literal|"Must throw IOException for missing serializer for the Value class"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Could not find a serializer for the Value class: '"
operator|+
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Write a simple file to test deserialization failures with
name|writeTest
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|path
argument_list|,
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Remove Writable serializations, to enforce error.
name|conf
operator|.
name|setStrings
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|,
name|AvroReflectSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check if any deserializers aren't found.
try|try
block|{
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must throw IOException for missing deserializer for the Key class"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Could not find a deserializer for the Key class: '"
operator|+
name|RandomDatum
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** For debugging and testing. */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|int
name|megabytes
init|=
literal|1
decl_stmt|;
name|int
name|factor
init|=
literal|10
decl_stmt|;
name|boolean
name|create
init|=
literal|true
decl_stmt|;
name|boolean
name|rwonly
init|=
literal|false
decl_stmt|;
name|boolean
name|check
init|=
literal|false
decl_stmt|;
name|boolean
name|fast
init|=
literal|false
decl_stmt|;
name|boolean
name|merge
init|=
literal|false
decl_stmt|;
name|String
name|compressType
init|=
literal|"NONE"
decl_stmt|;
name|String
name|compressionCodec
init|=
literal|"org.apache.hadoop.io.compress.DefaultCodec"
decl_stmt|;
name|Path
name|file
init|=
literal|null
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|usage
init|=
literal|"Usage: testsequencefile "
operator|+
literal|"[-count N] "
operator|+
literal|"[-seed #] [-check] [-compressType<NONE|RECORD|BLOCK>] "
operator|+
literal|"-codec<compressionCodec> "
operator|+
literal|"[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] "
operator|+
literal|" file"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-count"
argument_list|)
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-megabytes"
argument_list|)
condition|)
block|{
name|megabytes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-factor"
argument_list|)
condition|)
block|{
name|factor
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-seed"
argument_list|)
condition|)
block|{
name|seed
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-rwonly"
argument_list|)
condition|)
block|{
name|rwonly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-nocreate"
argument_list|)
condition|)
block|{
name|create
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-check"
argument_list|)
condition|)
block|{
name|check
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-fast"
argument_list|)
condition|)
block|{
name|fast
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-merge"
argument_list|)
condition|)
block|{
name|merge
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-compressType"
argument_list|)
condition|)
block|{
name|compressType
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-codec"
argument_list|)
condition|)
block|{
name|compressionCodec
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// file is required parameter
name|file
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|TestSequenceFile
name|test
init|=
operator|new
name|TestSequenceFile
argument_list|()
decl_stmt|;
name|fs
operator|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|test
operator|.
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"count = "
operator|+
name|count
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"megabytes = "
operator|+
name|megabytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"factor = "
operator|+
name|factor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create = "
operator|+
name|create
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed = "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"rwonly = "
operator|+
name|rwonly
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"check = "
operator|+
name|check
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fast = "
operator|+
name|fast
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"merge = "
operator|+
name|merge
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"compressType = "
operator|+
name|compressType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"compressionCodec = "
operator|+
name|compressionCodec
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"file = "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|rwonly
operator|&&
operator|(
operator|!
name|create
operator|||
name|merge
operator|||
name|fast
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|CompressionType
name|compressionType
init|=
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|compressType
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|test
operator|.
name|conf
operator|.
name|getClassByName
argument_list|(
name|compressionCodec
argument_list|)
argument_list|,
name|test
operator|.
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|rwonly
operator|||
operator|(
name|create
operator|&&
operator|!
name|merge
operator|)
condition|)
block|{
name|test
operator|.
name|writeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|compressionType
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|test
operator|.
name|readTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rwonly
condition|)
block|{
if|if
condition|(
name|merge
condition|)
block|{
name|test
operator|.
name|mergeTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|,
name|compressionType
argument_list|,
name|fast
argument_list|,
name|factor
argument_list|,
name|megabytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|test
operator|.
name|sortTest
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|megabytes
argument_list|,
name|factor
argument_list|,
name|fast
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|check
condition|)
block|{
name|test
operator|.
name|checkSort
argument_list|(
name|fs
argument_list|,
name|count
argument_list|,
name|seed
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

