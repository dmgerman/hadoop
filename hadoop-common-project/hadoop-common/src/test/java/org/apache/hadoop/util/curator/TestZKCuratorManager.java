begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util.curator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the manager for ZooKeeper Curator.  */
end_comment

begin_class
DECL|class|TestZKCuratorManager
specifier|public
class|class
name|TestZKCuratorManager
block|{
DECL|field|server
specifier|private
name|TestingServer
name|server
decl_stmt|;
DECL|field|curator
specifier|private
name|ZKCuratorManager
name|curator
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|server
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|this
operator|.
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|curator
operator|=
operator|new
name|ZKCuratorManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|server
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadWriteData ()
specifier|public
name|void
name|testReadWriteData
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testZNode
init|=
literal|"/test"
decl_stmt|;
name|String
name|expectedString
init|=
literal|"testString"
decl_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|testZNode
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|create
argument_list|(
name|testZNode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|testZNode
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|setData
argument_list|(
name|testZNode
argument_list|,
name|expectedString
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|String
name|testString
init|=
name|curator
operator|.
name|getStringData
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildren ()
specifier|public
name|void
name|testChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|curator
operator|.
name|getChildren
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|create
argument_list|(
literal|"/node1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
literal|"/node1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
literal|"/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|create
argument_list|(
literal|"/node2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
literal|"/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|=
name|curator
operator|.
name|getChildren
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|curator
operator|.
name|delete
argument_list|(
literal|"/node2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
literal|"/node2"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|=
name|curator
operator|.
name|getChildren
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetStringData ()
specifier|public
name|void
name|testGetStringData
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|node1
init|=
literal|"/node1"
decl_stmt|;
name|String
name|node2
init|=
literal|"/node2"
decl_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|create
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|curator
operator|.
name|getStringData
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|setData
init|=
literal|"setData"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|curator
operator|.
name|setData
argument_list|(
name|node1
argument_list|,
name|setData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"setData"
argument_list|,
name|curator
operator|.
name|getStringData
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|create
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|curator
operator|.
name|getStringData
argument_list|(
name|node2
argument_list|,
name|stat
argument_list|)
argument_list|)
expr_stmt|;
name|curator
operator|.
name|setData
argument_list|(
name|node2
argument_list|,
name|setData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"setData"
argument_list|,
name|curator
operator|.
name|getStringData
argument_list|(
name|node2
argument_list|,
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransaction ()
specifier|public
name|void
name|testTransaction
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcl
init|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ACL_DEFAULT
argument_list|)
decl_stmt|;
name|String
name|fencingNodePath
init|=
literal|"/fencing"
decl_stmt|;
name|String
name|node1
init|=
literal|"/node1"
decl_stmt|;
name|String
name|node2
init|=
literal|"/node2"
decl_stmt|;
name|byte
index|[]
name|testData
init|=
literal|"testData"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|fencingNodePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|ZKCuratorManager
operator|.
name|SafeTransaction
name|txn
init|=
name|curator
operator|.
name|createTransaction
argument_list|(
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
decl_stmt|;
name|txn
operator|.
name|create
argument_list|(
name|node1
argument_list|,
name|testData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|txn
operator|.
name|create
argument_list|(
name|node2
argument_list|,
name|testData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|fencingNodePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|fencingNodePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|testData
argument_list|,
name|curator
operator|.
name|getData
argument_list|(
name|node1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|testData
argument_list|,
name|curator
operator|.
name|getData
argument_list|(
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|setData
init|=
literal|"setData"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|txn
operator|=
name|curator
operator|.
name|createTransaction
argument_list|(
name|zkAcl
argument_list|,
name|fencingNodePath
argument_list|)
expr_stmt|;
name|txn
operator|.
name|setData
argument_list|(
name|node1
argument_list|,
name|setData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|txn
operator|.
name|delete
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|testData
argument_list|,
name|curator
operator|.
name|getData
argument_list|(
name|node1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|txn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|curator
operator|.
name|exists
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|setData
argument_list|,
name|curator
operator|.
name|getData
argument_list|(
name|node1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

