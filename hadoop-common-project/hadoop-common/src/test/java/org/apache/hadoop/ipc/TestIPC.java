begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_comment
comment|/** Unit tests for IPC. */
end_comment

begin_class
DECL|class|TestIPC
specifier|public
class|class
name|TestIPC
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestIPC
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|final
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|PING_INTERVAL
specifier|final
specifier|static
specifier|private
name|int
name|PING_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|MIN_SLEEP_TIME
specifier|final
specifier|static
specifier|private
name|int
name|MIN_SLEEP_TIME
init|=
literal|1000
decl_stmt|;
comment|/**    * Flag used to turn off the fault injection behavior    * of the various writables.    **/
DECL|field|WRITABLE_FAULTS_ENABLED
specifier|static
name|boolean
name|WRITABLE_FAULTS_ENABLED
init|=
literal|true
decl_stmt|;
DECL|field|WRITABLE_FAULTS_SLEEP
specifier|static
name|int
name|WRITABLE_FAULTS_SLEEP
init|=
literal|0
decl_stmt|;
static|static
block|{
name|Client
operator|.
name|setPingInterval
argument_list|(
name|conf
argument_list|,
name|PING_INTERVAL
argument_list|)
expr_stmt|;
block|}
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
comment|/** Directory where we can count open file descriptors on Linux */
DECL|field|FD_DIR
specifier|private
specifier|static
specifier|final
name|File
name|FD_DIR
init|=
operator|new
name|File
argument_list|(
literal|"/proc/self/fd"
argument_list|)
decl_stmt|;
DECL|class|TestServer
specifier|private
specifier|static
class|class
name|TestServer
extends|extends
name|Server
block|{
comment|// Tests can set callListener to run a piece of code each time the server
comment|// receives a call.  This code executes on the server thread, so it has
comment|// visibility of that thread's thread-local storage.
DECL|field|callListener
specifier|private
name|Runnable
name|callListener
decl_stmt|;
DECL|field|sleep
specifier|private
name|boolean
name|sleep
decl_stmt|;
DECL|field|responseClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|responseClass
decl_stmt|;
DECL|method|TestServer (int handlerCount, boolean sleep)
specifier|public
name|TestServer
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|sleep
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|handlerCount
argument_list|,
name|sleep
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|TestServer (int handlerCount, boolean sleep, Class<? extends Writable> paramClass, Class<? extends Writable> responseClass)
specifier|public
name|TestServer
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|sleep
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|paramClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|responseClass
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ADDRESS
argument_list|,
literal|0
argument_list|,
name|paramClass
argument_list|,
name|handlerCount
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleep
operator|=
name|sleep
expr_stmt|;
name|this
operator|.
name|responseClass
operator|=
name|responseClass
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call (RPC.RpcKind rpcKind, String protocol, Writable param, long receiveTime)
specifier|public
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sleep
condition|)
block|{
comment|// sleep a bit
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|PING_INTERVAL
argument_list|)
operator|+
name|MIN_SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|callListener
operator|!=
literal|null
condition|)
block|{
name|callListener
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|responseClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|param
return|;
comment|// echo param as result
block|}
block|}
block|}
DECL|class|SerialCaller
specifier|private
specifier|static
class|class
name|SerialCaller
extends|extends
name|Thread
block|{
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|server
specifier|private
name|InetSocketAddress
name|server
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|method|SerialCaller (Client client, InetSocketAddress server, int count)
specifier|public
name|SerialCaller
parameter_list|(
name|Client
name|client
parameter_list|,
name|InetSocketAddress
name|server
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|LongWritable
name|param
init|=
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|LongWritable
name|value
init|=
operator|(
name|LongWritable
operator|)
name|client
operator|.
name|call
argument_list|(
name|param
argument_list|,
name|server
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Call failed!"
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Caught: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSerial ()
specifier|public
name|void
name|testSerial
parameter_list|()
throws|throws
name|Exception
block|{
name|testSerial
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testSerial
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testSerial (int handlerCount, boolean handlerSleep, int clientCount, int callerCount, int callCount)
specifier|public
name|void
name|testSerial
parameter_list|(
name|int
name|handlerCount
parameter_list|,
name|boolean
name|handlerSleep
parameter_list|,
name|int
name|clientCount
parameter_list|,
name|int
name|callerCount
parameter_list|,
name|int
name|callCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
name|handlerCount
argument_list|,
name|handlerSleep
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Client
index|[]
name|clients
init|=
operator|new
name|Client
index|[
name|clientCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|SerialCaller
index|[]
name|callers
init|=
operator|new
name|SerialCaller
index|[
name|callerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|=
operator|new
name|SerialCaller
argument_list|(
name|clients
index|[
name|i
operator|%
name|clientCount
index|]
argument_list|,
name|addr
argument_list|,
name|callCount
argument_list|)
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|callers
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStandAloneClient ()
specifier|public
name|void
name|testStandAloneClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|addressText
init|=
name|address
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|address
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find "
operator|+
name|addressText
operator|+
literal|" in "
operator|+
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
name|addressText
argument_list|)
argument_list|)
expr_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No nested exception in "
operator|+
name|e
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|String
name|causeText
init|=
name|cause
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find "
operator|+
name|causeText
operator|+
literal|" in "
operator|+
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
name|causeText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|maybeThrowIOE ()
specifier|static
name|void
name|maybeThrowIOE
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|WRITABLE_FAULTS_ENABLED
condition|)
block|{
name|maybeSleep
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected fault"
argument_list|)
throw|;
block|}
block|}
DECL|method|maybeThrowRTE ()
specifier|static
name|void
name|maybeThrowRTE
parameter_list|()
block|{
if|if
condition|(
name|WRITABLE_FAULTS_ENABLED
condition|)
block|{
name|maybeSleep
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault"
argument_list|)
throw|;
block|}
block|}
DECL|method|maybeSleep ()
specifier|private
specifier|static
name|void
name|maybeSleep
parameter_list|()
block|{
if|if
condition|(
name|WRITABLE_FAULTS_SLEEP
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|WRITABLE_FAULTS_SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|IOEOnReadWritable
specifier|private
specifier|static
class|class
name|IOEOnReadWritable
extends|extends
name|LongWritable
block|{
DECL|method|IOEOnReadWritable ()
specifier|public
name|IOEOnReadWritable
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|maybeThrowIOE
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|RTEOnReadWritable
specifier|private
specifier|static
class|class
name|RTEOnReadWritable
extends|extends
name|LongWritable
block|{
DECL|method|RTEOnReadWritable ()
specifier|public
name|RTEOnReadWritable
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|maybeThrowRTE
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|IOEOnWriteWritable
specifier|private
specifier|static
class|class
name|IOEOnWriteWritable
extends|extends
name|LongWritable
block|{
DECL|method|IOEOnWriteWritable ()
specifier|public
name|IOEOnWriteWritable
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|maybeThrowIOE
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|class|RTEOnWriteWritable
specifier|private
specifier|static
class|class
name|RTEOnWriteWritable
extends|extends
name|LongWritable
block|{
DECL|method|RTEOnWriteWritable ()
specifier|public
name|RTEOnWriteWritable
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|maybeThrowRTE
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Generic test case for exceptions thrown at some point in the IPC    * process.    *     * @param clientParamClass - client writes this writable for parameter    * @param serverParamClass - server reads this writable for parameter    * @param serverResponseClass - server writes this writable for response    * @param clientResponseClass - client reads this writable for response    */
DECL|method|doErrorTest ( Class<? extends LongWritable> clientParamClass, Class<? extends LongWritable> serverParamClass, Class<? extends LongWritable> serverResponseClass, Class<? extends LongWritable> clientResponseClass)
specifier|private
name|void
name|doErrorTest
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|LongWritable
argument_list|>
name|clientParamClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|LongWritable
argument_list|>
name|serverParamClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|LongWritable
argument_list|>
name|serverResponseClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|LongWritable
argument_list|>
name|clientResponseClass
parameter_list|)
throws|throws
name|Exception
block|{
comment|// start server
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
name|serverParamClass
argument_list|,
name|serverResponseClass
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start client
name|WRITABLE_FAULTS_ENABLED
operator|=
literal|true
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|clientResponseClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LongWritable
name|param
init|=
name|clientParamClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
name|param
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
name|t
argument_list|,
literal|"Injected fault"
argument_list|)
expr_stmt|;
block|}
comment|// Doing a second call with faults disabled should return fine --
comment|// ie the internal state of the client or server should not be broken
comment|// by the failed call
name|WRITABLE_FAULTS_ENABLED
operator|=
literal|false
expr_stmt|;
name|client
operator|.
name|call
argument_list|(
name|param
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOEOnClientWriteParam ()
specifier|public
name|void
name|testIOEOnClientWriteParam
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|IOEOnWriteWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRTEOnClientWriteParam ()
specifier|public
name|void
name|testRTEOnClientWriteParam
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|RTEOnWriteWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIOEOnServerReadParam ()
specifier|public
name|void
name|testIOEOnServerReadParam
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|IOEOnReadWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRTEOnServerReadParam ()
specifier|public
name|void
name|testRTEOnServerReadParam
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|RTEOnReadWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIOEOnServerWriteResponse ()
specifier|public
name|void
name|testIOEOnServerWriteResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|IOEOnWriteWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRTEOnServerWriteResponse ()
specifier|public
name|void
name|testRTEOnServerWriteResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|RTEOnWriteWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIOEOnClientReadResponse ()
specifier|public
name|void
name|testIOEOnClientReadResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|IOEOnReadWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRTEOnClientReadResponse ()
specifier|public
name|void
name|testRTEOnClientReadResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|doErrorTest
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|RTEOnReadWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case that fails a write, but only after taking enough time    * that a ping should have been sent. This is a reproducer for a    * deadlock seen in one iteration of HADOOP-6762.    */
annotation|@
name|Test
DECL|method|testIOEOnWriteAfterPingClient ()
specifier|public
name|void
name|testIOEOnWriteAfterPingClient
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start server
name|Client
operator|.
name|setPingInterval
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|WRITABLE_FAULTS_SLEEP
operator|=
literal|1000
expr_stmt|;
name|doErrorTest
argument_list|(
name|IOEOnWriteWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|WRITABLE_FAULTS_SLEEP
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|assertExceptionContains ( Throwable t, String substring)
specifier|private
specifier|static
name|void
name|assertExceptionContains
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|substring
parameter_list|)
block|{
name|String
name|msg
init|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Exception should contain substring '"
operator|+
name|substring
operator|+
literal|"':\n"
operator|+
name|msg
argument_list|,
name|msg
operator|.
name|contains
argument_list|(
name|substring
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that, if the socket factory throws an IOE, it properly propagates    * to the client.    */
annotation|@
name|Test
DECL|method|testSocketFactoryException ()
specifier|public
name|void
name|testSocketFactoryException
parameter_list|()
throws|throws
name|Exception
block|{
name|SocketFactory
name|mockFactory
init|=
name|mock
argument_list|(
name|SocketFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Injected fault"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockFactory
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|mockFactory
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Injected fault"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that, if a RuntimeException is thrown after creating a socket    * but before successfully connecting to the IPC server, that the    * failure is handled properly. This is a regression test for    * HADOOP-7428.    */
annotation|@
name|Test
DECL|method|testRTEDuringConnectionSetup ()
specifier|public
name|void
name|testRTEDuringConnectionSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up a socket factory which returns sockets which
comment|// throw an RTE when setSoTimeout is called.
name|SocketFactory
name|spyFactory
init|=
name|spy
argument_list|(
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Socket
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Socket
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Socket
name|s
init|=
name|spy
argument_list|(
operator|(
name|Socket
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|s
argument_list|)
operator|.
name|setSoTimeout
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyFactory
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Call should fail due to injected exception.
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|spyFactory
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"caught expected exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Injected fault"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Resetting to the normal socket behavior should succeed
comment|// (i.e. it should not have cached a half-constructed connection)
name|Mockito
operator|.
name|reset
argument_list|(
name|spyFactory
argument_list|)
expr_stmt|;
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIpcTimeout ()
specifier|public
name|void
name|testIpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start server
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start client
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// set timeout to be less than MIN_SLEEP_TIME
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MIN_SLEEP_TIME
operator|/
literal|2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get a SocketTimeoutException "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// set timeout to be bigger than 3*ping interval
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|3
operator|*
name|PING_INTERVAL
operator|+
name|MIN_SLEEP_TIME
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpcConnectTimeout ()
specifier|public
name|void
name|testIpcConnectTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start server
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
comment|//Intentionally do not start server to get a connection timeout
comment|// start client
name|Client
operator|.
name|setConnectTimeout
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// set the rpc timeout to twice the MIN_SLEEP_TIME
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MIN_SLEEP_TIME
operator|*
literal|2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception to have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get a SocketTimeoutException "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check service class byte in IPC header is correct on wire.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testIpcWithServiceClass ()
specifier|public
name|void
name|testIpcWithServiceClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start server
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start client
name|Client
operator|.
name|setConnectTimeout
argument_list|(
name|conf
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|callAndVerify
argument_list|(
name|server
argument_list|,
name|addr
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Service Class is low to -128 as byte on wire.
comment|// -128 shouldn't be casted on wire but -129 should.
name|callAndVerify
argument_list|(
name|server
argument_list|,
name|addr
argument_list|,
operator|-
literal|128
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|callAndVerify
argument_list|(
name|server
argument_list|,
name|addr
argument_list|,
operator|-
literal|129
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Service Class is up to 127.
comment|// 127 shouldn't be casted on wire but 128 should.
name|callAndVerify
argument_list|(
name|server
argument_list|,
name|addr
argument_list|,
literal|127
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|callAndVerify
argument_list|(
name|server
argument_list|,
name|addr
argument_list|,
literal|128
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Make a call from a client and verify if header info is changed in server side    */
DECL|method|callAndVerify (Server server, InetSocketAddress addr, int serviceClass, boolean noChanged)
specifier|private
name|void
name|callAndVerify
parameter_list|(
name|Server
name|server
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|int
name|serviceClass
parameter_list|,
name|boolean
name|noChanged
parameter_list|)
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MIN_SLEEP_TIME
argument_list|,
name|serviceClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|server
operator|.
name|getConnections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|serviceClass2
init|=
name|connection
operator|.
name|getServiceClass
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|noChanged
operator|^
name|serviceClass
operator|==
name|serviceClass2
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|,
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testIpcAfterStopping ()
specifier|public
name|void
name|testIpcAfterStopping
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// start server
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start client
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MIN_SLEEP_TIME
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// This call should throw IOException.
name|client
operator|.
name|call
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|RANDOM
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MIN_SLEEP_TIME
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that file descriptors aren't leaked by starting    * and stopping IPC servers.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSocketLeak ()
specifier|public
name|void
name|testSocketLeak
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|FD_DIR
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// only run on Linux
name|long
name|startFds
init|=
name|countOpenFileDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|long
name|endFds
init|=
name|countOpenFileDescriptors
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Leaked "
operator|+
operator|(
name|endFds
operator|-
name|startFds
operator|)
operator|+
literal|" file descriptors"
argument_list|,
name|endFds
operator|-
name|startFds
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|countOpenFileDescriptors ()
specifier|private
name|long
name|countOpenFileDescriptors
parameter_list|()
block|{
return|return
name|FD_DIR
operator|.
name|list
argument_list|()
operator|.
name|length
return|;
block|}
annotation|@
name|Test
DECL|method|testIpcFromHadoop_0_18_13 ()
specifier|public
name|void
name|testIpcFromHadoop_0_18_13
parameter_list|()
throws|throws
name|Exception
block|{
name|doIpcVersionTest
argument_list|(
name|NetworkTraces
operator|.
name|HADOOP_0_18_3_RPC_DUMP
argument_list|,
name|NetworkTraces
operator|.
name|RESPONSE_TO_HADOOP_0_18_3_RPC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpcFromHadoop0_20_3 ()
specifier|public
name|void
name|testIpcFromHadoop0_20_3
parameter_list|()
throws|throws
name|Exception
block|{
name|doIpcVersionTest
argument_list|(
name|NetworkTraces
operator|.
name|HADOOP_0_20_3_RPC_DUMP
argument_list|,
name|NetworkTraces
operator|.
name|RESPONSE_TO_HADOOP_0_20_3_RPC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIpcFromHadoop0_21_0 ()
specifier|public
name|void
name|testIpcFromHadoop0_21_0
parameter_list|()
throws|throws
name|Exception
block|{
name|doIpcVersionTest
argument_list|(
name|NetworkTraces
operator|.
name|HADOOP_0_21_0_RPC_DUMP
argument_list|,
name|NetworkTraces
operator|.
name|RESPONSE_TO_HADOOP_0_21_0_RPC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHttpGetResponse ()
specifier|public
name|void
name|testHttpGetResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|doIpcVersionTest
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Server
operator|.
name|RECEIVED_HTTP_REQ_RESPONSE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectionRetriesOnSocketTimeoutExceptions ()
specifier|public
name|void
name|testConnectionRetriesOnSocketTimeoutExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set max retries to 0
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRetriesOnSocketTimeouts
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set max retries to 3
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertRetriesOnSocketTimeouts
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|class|CallId
specifier|private
specifier|static
class|class
name|CallId
block|{
DECL|field|id
name|int
name|id
init|=
name|RpcConstants
operator|.
name|INVALID_CALL_ID
decl_stmt|;
block|}
comment|/**    * Test if the rpc server uses the call id generated by the rpc client.    */
annotation|@
name|Test
DECL|method|testCallIds ()
specifier|public
name|void
name|testCallIds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CallId
name|callId
init|=
operator|new
name|CallId
argument_list|()
decl_stmt|;
comment|// Override client to store the call id
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|Call
name|createCall
parameter_list|(
name|RpcKind
name|rpcKind
parameter_list|,
name|Writable
name|rpcRequest
parameter_list|)
block|{
specifier|final
name|Call
name|call
init|=
name|super
operator|.
name|createCall
argument_list|(
name|rpcKind
argument_list|,
name|rpcRequest
argument_list|)
decl_stmt|;
name|callId
operator|.
name|id
operator|=
name|call
operator|.
name|id
expr_stmt|;
return|return
name|call
return|;
block|}
block|}
decl_stmt|;
comment|// Attach a listener that tracks every call ID received by the server.
specifier|final
name|TestServer
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|callId
operator|.
name|id
argument_list|,
name|Server
operator|.
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|SerialCaller
name|caller
init|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|caller
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|caller
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that client generates a unique sequential call ID for each RPC call,    * even if multiple threads are using the same client.    */
annotation|@
name|Test
DECL|method|testUniqueSequentialCallIds ()
specifier|public
name|void
name|testUniqueSequentialCallIds
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|serverThreads
init|=
literal|10
decl_stmt|,
name|callerCount
init|=
literal|100
decl_stmt|,
name|perCallerCallCount
init|=
literal|100
decl_stmt|;
name|TestServer
name|server
init|=
operator|new
name|TestServer
argument_list|(
name|serverThreads
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Attach a listener that tracks every call ID received by the server.  This
comment|// list must be synchronized, because multiple server threads will add to it.
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|callIds
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|callListener
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callIds
operator|.
name|add
argument_list|(
name|Server
operator|.
name|getCallId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|SerialCaller
index|[]
name|callers
init|=
operator|new
name|SerialCaller
index|[
name|callerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
operator|++
name|i
control|)
block|{
name|callers
index|[
name|i
index|]
operator|=
operator|new
name|SerialCaller
argument_list|(
name|client
argument_list|,
name|addr
argument_list|,
name|perCallerCallCount
argument_list|)
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
operator|++
name|i
control|)
block|{
name|callers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|callers
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|int
name|expectedCallCount
init|=
name|callerCount
operator|*
name|perCallerCallCount
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCallCount
argument_list|,
name|callIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// It is not guaranteed that the server executes requests in sequential order
comment|// of client call ID, so we must sort the call IDs before checking that it
comment|// contains every expected value.
name|Collections
operator|.
name|sort
argument_list|(
name|callIds
argument_list|)
expr_stmt|;
specifier|final
name|int
name|startID
init|=
name|callIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedCallCount
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|startID
operator|+
name|i
argument_list|,
name|callIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRetriesOnSocketTimeouts (Configuration conf, int maxTimeoutRetries)
specifier|private
name|void
name|assertRetriesOnSocketTimeouts
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|maxTimeoutRetries
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SocketFactory
name|mockFactory
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SocketFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|ConnectTimeoutException
argument_list|(
literal|"fake"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockFactory
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|mockFactory
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|9090
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Not throwing the SocketTimeoutException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockFactory
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
name|maxTimeoutRetries
argument_list|)
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doIpcVersionTest ( byte[] requestData, byte[] expectedResponse)
specifier|private
name|void
name|doIpcVersionTest
parameter_list|(
name|byte
index|[]
name|requestData
parameter_list|,
name|byte
index|[]
name|expectedResponse
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
try|try
block|{
name|NetUtils
operator|.
name|connect
argument_list|(
name|socket
argument_list|,
name|addr
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|requestData
argument_list|,
literal|0
argument_list|,
name|requestData
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|baos
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|byte
index|[]
name|responseData
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|expectedResponse
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|responseData
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Convert a string of lines that look like:    *   "68 72 70 63 02 00 00 00  82 00 1d 6f 72 67 2e 61 hrpc.... ...org.a"    * .. into an array of bytes.    */
DECL|method|hexDumpToBytes (String hexdump)
specifier|private
specifier|static
name|byte
index|[]
name|hexDumpToBytes
parameter_list|(
name|String
name|hexdump
parameter_list|)
block|{
specifier|final
name|int
name|LAST_HEX_COL
init|=
literal|3
operator|*
literal|16
decl_stmt|;
name|StringBuilder
name|hexString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|hexdump
operator|.
name|toUpperCase
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|hexString
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|LAST_HEX_COL
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
name|hexString
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Wireshark traces collected from various client versions. These enable    * us to test that old versions of the IPC stack will receive the correct    * responses so that they will throw a meaningful error message back    * to the user.    */
DECL|class|NetworkTraces
specifier|private
specifier|static
specifier|abstract
class|class
name|NetworkTraces
block|{
comment|/**      * Wireshark dump of an RPC request from Hadoop 0.18.3      */
DECL|field|HADOOP_0_18_3_RPC_DUMP
specifier|final
specifier|static
name|byte
index|[]
name|HADOOP_0_18_3_RPC_DUMP
init|=
name|hexDumpToBytes
argument_list|(
literal|"68 72 70 63 02 00 00 00  82 00 1d 6f 72 67 2e 61 hrpc.... ...org.a\n"
operator|+
literal|"70 61 63 68 65 2e 68 61  64 6f 6f 70 2e 69 6f 2e pache.ha doop.io.\n"
operator|+
literal|"57 72 69 74 61 62 6c 65  00 30 6f 72 67 2e 61 70 Writable .0org.ap\n"
operator|+
literal|"61 63 68 65 2e 68 61 64  6f 6f 70 2e 69 6f 2e 4f ache.had oop.io.O\n"
operator|+
literal|"62 6a 65 63 74 57 72 69  74 61 62 6c 65 24 4e 75 bjectWri table$Nu\n"
operator|+
literal|"6c 6c 49 6e 73 74 61 6e  63 65 00 2f 6f 72 67 2e llInstan ce./org.\n"
operator|+
literal|"61 70 61 63 68 65 2e 68  61 64 6f 6f 70 2e 73 65 apache.h adoop.se\n"
operator|+
literal|"63 75 72 69 74 79 2e 55  73 65 72 47 72 6f 75 70 curity.U serGroup\n"
operator|+
literal|"49 6e 66 6f 72 6d 61 74  69 6f 6e 00 00 00 6c 00 Informat ion...l.\n"
operator|+
literal|"00 00 00 00 12 67 65 74  50 72 6f 74 6f 63 6f 6c .....get Protocol\n"
operator|+
literal|"56 65 72 73 69 6f 6e 00  00 00 02 00 10 6a 61 76 Version. .....jav\n"
operator|+
literal|"61 2e 6c 61 6e 67 2e 53  74 72 69 6e 67 00 2e 6f a.lang.S tring..o\n"
operator|+
literal|"72 67 2e 61 70 61 63 68  65 2e 68 61 64 6f 6f 70 rg.apach e.hadoop\n"
operator|+
literal|"2e 6d 61 70 72 65 64 2e  4a 6f 62 53 75 62 6d 69 .mapred. JobSubmi\n"
operator|+
literal|"73 73 69 6f 6e 50 72 6f  74 6f 63 6f 6c 00 04 6c ssionPro tocol..l\n"
operator|+
literal|"6f 6e 67 00 00 00 00 00  00 00 0a                ong..... ...     \n"
argument_list|)
decl_stmt|;
DECL|field|HADOOP0_18_ERROR_MSG
specifier|final
specifier|static
name|String
name|HADOOP0_18_ERROR_MSG
init|=
literal|"Server IPC version "
operator|+
name|RpcConstants
operator|.
name|CURRENT_VERSION
operator|+
literal|" cannot communicate with client version 2"
decl_stmt|;
comment|/**      * Wireshark dump of the correct response that triggers an error message      * on an 0.18.3 client.      */
DECL|field|RESPONSE_TO_HADOOP_0_18_3_RPC
specifier|final
specifier|static
name|byte
index|[]
name|RESPONSE_TO_HADOOP_0_18_3_RPC
init|=
name|Bytes
operator|.
name|concat
argument_list|(
name|hexDumpToBytes
argument_list|(
literal|"00 00 00 00 01 00 00 00  29 6f 72 67 2e 61 70 61 ........ )org.apa\n"
operator|+
literal|"63 68 65 2e 68 61 64 6f  6f 70 2e 69 70 63 2e 52 che.hado op.ipc.R\n"
operator|+
literal|"50 43 24 56 65 72 73 69  6f 6e 4d 69 73 6d 61 74 PC$Versi onMismat\n"
operator|+
literal|"63 68                                            ch               \n"
argument_list|)
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
name|HADOOP0_18_ERROR_MSG
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|HADOOP0_18_ERROR_MSG
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Wireshark dump of an RPC request from Hadoop 0.20.3      */
DECL|field|HADOOP_0_20_3_RPC_DUMP
specifier|final
specifier|static
name|byte
index|[]
name|HADOOP_0_20_3_RPC_DUMP
init|=
name|hexDumpToBytes
argument_list|(
literal|"68 72 70 63 03 00 00 00  79 27 6f 72 67 2e 61 70 hrpc.... y'org.ap\n"
operator|+
literal|"61 63 68 65 2e 68 61 64  6f 6f 70 2e 69 70 63 2e ache.had oop.ipc.\n"
operator|+
literal|"56 65 72 73 69 6f 6e 65  64 50 72 6f 74 6f 63 6f Versione dProtoco\n"
operator|+
literal|"6c 01 0a 53 54 52 49 4e  47 5f 55 47 49 04 74 6f l..STRIN G_UGI.to\n"
operator|+
literal|"64 64 09 04 74 6f 64 64  03 61 64 6d 07 64 69 61 dd..todd .adm.dia\n"
operator|+
literal|"6c 6f 75 74 05 63 64 72  6f 6d 07 70 6c 75 67 64 lout.cdr om.plugd\n"
operator|+
literal|"65 76 07 6c 70 61 64 6d  69 6e 05 61 64 6d 69 6e ev.lpadm in.admin\n"
operator|+
literal|"0a 73 61 6d 62 61 73 68  61 72 65 06 6d 72 74 65 .sambash are.mrte\n"
operator|+
literal|"73 74 00 00 00 6c 00 00  00 00 00 12 67 65 74 50 st...l.. ....getP\n"
operator|+
literal|"72 6f 74 6f 63 6f 6c 56  65 72 73 69 6f 6e 00 00 rotocolV ersion..\n"
operator|+
literal|"00 02 00 10 6a 61 76 61  2e 6c 61 6e 67 2e 53 74 ....java .lang.St\n"
operator|+
literal|"72 69 6e 67 00 2e 6f 72  67 2e 61 70 61 63 68 65 ring..or g.apache\n"
operator|+
literal|"2e 68 61 64 6f 6f 70 2e  6d 61 70 72 65 64 2e 4a .hadoop. mapred.J\n"
operator|+
literal|"6f 62 53 75 62 6d 69 73  73 69 6f 6e 50 72 6f 74 obSubmis sionProt\n"
operator|+
literal|"6f 63 6f 6c 00 04 6c 6f  6e 67 00 00 00 00 00 00 ocol..lo ng......\n"
operator|+
literal|"00 14                                            ..               \n"
argument_list|)
decl_stmt|;
DECL|field|HADOOP0_20_ERROR_MSG
specifier|final
specifier|static
name|String
name|HADOOP0_20_ERROR_MSG
init|=
literal|"Server IPC version "
operator|+
name|RpcConstants
operator|.
name|CURRENT_VERSION
operator|+
literal|" cannot communicate with client version 3"
decl_stmt|;
DECL|field|RESPONSE_TO_HADOOP_0_20_3_RPC
specifier|final
specifier|static
name|byte
index|[]
name|RESPONSE_TO_HADOOP_0_20_3_RPC
init|=
name|Bytes
operator|.
name|concat
argument_list|(
name|hexDumpToBytes
argument_list|(
literal|"ff ff ff ff ff ff ff ff  00 00 00 29 6f 72 67 2e ........ ...)org.\n"
operator|+
literal|"61 70 61 63 68 65 2e 68  61 64 6f 6f 70 2e 69 70 apache.h adoop.ip\n"
operator|+
literal|"63 2e 52 50 43 24 56 65  72 73 69 6f 6e 4d 69 73 c.RPC$Ve rsionMis\n"
operator|+
literal|"6d 61 74 63 68                                   match            \n"
argument_list|)
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
name|HADOOP0_20_ERROR_MSG
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|HADOOP0_20_ERROR_MSG
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|HADOOP0_21_ERROR_MSG
specifier|final
specifier|static
name|String
name|HADOOP0_21_ERROR_MSG
init|=
literal|"Server IPC version "
operator|+
name|RpcConstants
operator|.
name|CURRENT_VERSION
operator|+
literal|" cannot communicate with client version 4"
decl_stmt|;
DECL|field|HADOOP_0_21_0_RPC_DUMP
specifier|final
specifier|static
name|byte
index|[]
name|HADOOP_0_21_0_RPC_DUMP
init|=
name|hexDumpToBytes
argument_list|(
literal|"68 72 70 63 04 50                                hrpc.P"
operator|+
comment|// in 0.21 it comes in two separate TCP packets
literal|"00 00 00 3c 33 6f 72 67  2e 61 70 61 63 68 65 2e ...<3org .apache.\n"
operator|+
literal|"68 61 64 6f 6f 70 2e 6d  61 70 72 65 64 75 63 65 hadoop.m apreduce\n"
operator|+
literal|"2e 70 72 6f 74 6f 63 6f  6c 2e 43 6c 69 65 6e 74 .protoco l.Client\n"
operator|+
literal|"50 72 6f 74 6f 63 6f 6c  01 00 04 74 6f 64 64 00 Protocol ...todd.\n"
operator|+
literal|"00 00 00 71 00 00 00 00  00 12 67 65 74 50 72 6f ...q.... ..getPro\n"
operator|+
literal|"74 6f 63 6f 6c 56 65 72  73 69 6f 6e 00 00 00 02 tocolVer sion....\n"
operator|+
literal|"00 10 6a 61 76 61 2e 6c  61 6e 67 2e 53 74 72 69 ..java.l ang.Stri\n"
operator|+
literal|"6e 67 00 33 6f 72 67 2e  61 70 61 63 68 65 2e 68 ng.3org. apache.h\n"
operator|+
literal|"61 64 6f 6f 70 2e 6d 61  70 72 65 64 75 63 65 2e adoop.ma preduce.\n"
operator|+
literal|"70 72 6f 74 6f 63 6f 6c  2e 43 6c 69 65 6e 74 50 protocol .ClientP\n"
operator|+
literal|"72 6f 74 6f 63 6f 6c 00  04 6c 6f 6e 67 00 00 00 rotocol. .long...\n"
operator|+
literal|"00 00 00 00 21                                   ....!            \n"
argument_list|)
decl_stmt|;
DECL|field|RESPONSE_TO_HADOOP_0_21_0_RPC
specifier|final
specifier|static
name|byte
index|[]
name|RESPONSE_TO_HADOOP_0_21_0_RPC
init|=
name|Bytes
operator|.
name|concat
argument_list|(
name|hexDumpToBytes
argument_list|(
literal|"ff ff ff ff ff ff ff ff  00 00 00 29 6f 72 67 2e ........ ...)org.\n"
operator|+
literal|"61 70 61 63 68 65 2e 68  61 64 6f 6f 70 2e 69 70 apache.h adoop.ip\n"
operator|+
literal|"63 2e 52 50 43 24 56 65  72 73 69 6f 6e 4d 69 73 c.RPC$Ve rsionMis\n"
operator|+
literal|"6d 61 74 63 68                                   match            \n"
argument_list|)
argument_list|,
name|Ints
operator|.
name|toByteArray
argument_list|(
name|HADOOP0_21_ERROR_MSG
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|HADOOP0_21_ERROR_MSG
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

