begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestConfTest
specifier|public
class|class
name|TestConfTest
block|{
annotation|@
name|Test
DECL|method|testEmptyConfiguration ()
specifier|public
name|void
name|testEmptyConfiguration
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration/>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidConfiguration ()
specifier|public
name|void
name|testValidConfiguration
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<value>bar</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSourceDuplicationIsValid ()
specifier|public
name|void
name|testSourceDuplicationIsValid
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property source='a'>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<value>bar</value>\n"
operator|+
literal|"<source>b</source>\n"
operator|+
literal|"<source>c</source>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyInput ()
specifier|public
name|void
name|testEmptyInput
parameter_list|()
block|{
name|String
name|conf
init|=
literal|""
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"bad conf file: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidFormat ()
specifier|public
name|void
name|testInvalidFormat
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"bad conf file: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRootElementNotConfiguration ()
specifier|public
name|void
name|testRootElementNotConfiguration
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configurations/>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad conf file: top-level element not<configuration>"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubElementNotProperty ()
specifier|public
name|void
name|testSubElementNotProperty
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<foo/>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2: element not<property>"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasNoName ()
specifier|public
name|void
name|testPropertyHasNoName
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<value>foo</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2:<property> has no<name>"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasEmptyName ()
specifier|public
name|void
name|testPropertyHasEmptyName
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name></name>\n"
operator|+
literal|"<value>foo</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2:<property> has an empty<name>"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasNoValue ()
specifier|public
name|void
name|testPropertyHasNoValue
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2:<property> has no<value>"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasEmptyValue ()
specifier|public
name|void
name|testPropertyHasEmptyValue
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<value></value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasDuplicatedAttributeAndElement ()
specifier|public
name|void
name|testPropertyHasDuplicatedAttributeAndElement
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property name='foo'>\n"
operator|+
literal|"<name>bar</name>\n"
operator|+
literal|"<value>baz</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2:<property> has duplicated<name>s"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyHasDuplicatedElements ()
specifier|public
name|void
name|testPropertyHasDuplicatedElements
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<name>bar</name>\n"
operator|+
literal|"<value>baz</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2:<property> has duplicated<name>s"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicatedProperties ()
specifier|public
name|void
name|testDuplicatedProperties
parameter_list|()
block|{
name|String
name|conf
init|=
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<value>bar</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>foo</name>\n"
operator|+
literal|"<value>baz</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|conf
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|ConfTest
operator|.
name|checkConf
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Line 2, 6: duplicated<property>s for foo"
argument_list|,
name|errors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

