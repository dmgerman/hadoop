begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BBUploadHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MultipartUploader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MultipartUploaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PartHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UploadHandle
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyPathExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|cleanupWithLogger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|eventually
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_class
DECL|class|AbstractContractMultipartUploaderTest
specifier|public
specifier|abstract
class|class
name|AbstractContractMultipartUploaderTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractContractMultipartUploaderTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Size of very small uploads.    * Enough to be non empty, not big enough to cause delays on uploads.    */
DECL|field|SMALL_FILE
specifier|protected
specifier|static
specifier|final
name|int
name|SMALL_FILE
init|=
literal|100
decl_stmt|;
DECL|field|mpu
specifier|private
name|MultipartUploader
name|mpu
decl_stmt|;
DECL|field|mpu2
specifier|private
name|MultipartUploader
name|mpu2
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|activeUpload
specifier|private
name|UploadHandle
name|activeUpload
decl_stmt|;
DECL|field|activeUploadPath
specifier|private
name|Path
name|activeUploadPath
decl_stmt|;
DECL|method|getMethodName ()
specifier|protected
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
operator|.
name|getMethodName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|getContract
argument_list|()
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|mpu
operator|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|mpu2
operator|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mpu
operator|!=
literal|null
operator|&&
name|activeUpload
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mpu
operator|.
name|abort
argument_list|(
name|activeUploadPath
argument_list|,
name|activeUpload
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignored
parameter_list|)
block|{
comment|/* this is fine */
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"in teardown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|mpu
argument_list|,
name|mpu2
argument_list|)
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get a test path based on the method name.    * @return a path to use in the test    * @throws IOException failure to build the path name up.    */
DECL|method|methodPath ()
specifier|protected
name|Path
name|methodPath
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|path
argument_list|(
name|getMethodName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The payload is the part number repeated for the length of the part.    * This makes checking the correctness of the upload straightforward.    * @param partNumber part number    * @return the bytes to upload.    */
DECL|method|generatePayload (int partNumber)
specifier|private
name|byte
index|[]
name|generatePayload
parameter_list|(
name|int
name|partNumber
parameter_list|)
block|{
return|return
name|generatePayload
argument_list|(
name|partNumber
argument_list|,
name|partSizeInBytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Generate a payload of a given size; part number is used    * for all the values.    * @param partNumber part number    * @param size size in bytes    * @return the bytes to upload.    */
DECL|method|generatePayload (final int partNumber, final int size)
specifier|private
name|byte
index|[]
name|generatePayload
parameter_list|(
specifier|final
name|int
name|partNumber
parameter_list|,
specifier|final
name|int
name|size
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|/
operator|(
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
condition|;
operator|++
name|i
control|)
block|{
name|buffer
operator|.
name|putInt
argument_list|(
name|partNumber
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|array
argument_list|()
return|;
block|}
comment|/**    * Load a path, make an MD5 digest.    * @param path path to load    * @return the digest array    * @throws IOException failure to read or digest the file.    */
DECL|method|digest (Path path)
specifier|protected
name|byte
index|[]
name|digest
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
init|)
block|{
name|byte
index|[]
name|fdData
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|MessageDigest
name|newDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|byte
index|[]
name|digest
init|=
name|newDigest
operator|.
name|digest
argument_list|(
name|fdData
argument_list|)
decl_stmt|;
return|return
name|digest
return|;
block|}
finally|finally
block|{
name|timer
operator|.
name|end
argument_list|(
literal|"Download and digest of path %s"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the partition size in bytes to use for each upload.    * @return a number> 0    */
DECL|method|partSizeInBytes ()
specifier|protected
specifier|abstract
name|int
name|partSizeInBytes
parameter_list|()
function_decl|;
comment|/**    * Get the number of test payloads to upload.    * @return a number> 1    */
DECL|method|getTestPayloadCount ()
specifier|protected
name|int
name|getTestPayloadCount
parameter_list|()
block|{
return|return
literal|10
return|;
block|}
comment|/**    * How long in milliseconds for propagation of    * store changes, including update/delete/list    * to be everywhere.    * If 0: the FS is consistent.    * @return a time in milliseconds.    */
DECL|method|timeToBecomeConsistentMillis ()
specifier|protected
name|int
name|timeToBecomeConsistentMillis
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**    * Does a call to finalize an upload (either complete or abort) consume the    * uploadID immediately or is it reaped at a later point in time?    * @return true if the uploadID will be consumed immediately (and no longer    * resuable).    */
DECL|method|finalizeConsumesUploadIdImmediately ()
specifier|protected
specifier|abstract
name|boolean
name|finalizeConsumesUploadIdImmediately
parameter_list|()
function_decl|;
comment|/**    * Does the store support concurrent uploads to the same destination path?    * @return true if concurrent uploads are supported.    */
DECL|method|supportsConcurrentUploadsToSamePath ()
specifier|protected
specifier|abstract
name|boolean
name|supportsConcurrentUploadsToSamePath
parameter_list|()
function_decl|;
comment|/**    * Pick a multipart uploader from the index value.    * @param index index of upload    * @return an uploader    */
DECL|method|mpu (int index)
specifier|protected
name|MultipartUploader
name|mpu
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|%
literal|2
operator|==
literal|0
operator|)
condition|?
name|mpu
else|:
name|mpu2
return|;
block|}
comment|/**    * Pick a multipart uploader at random.    * @return an uploader    */
DECL|method|randomMpu ()
specifier|protected
name|MultipartUploader
name|randomMpu
parameter_list|()
block|{
return|return
name|mpu
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Assert that a multipart upload is successful.    * @throws Exception failure    */
annotation|@
name|Test
DECL|method|testSingleUpload ()
specifier|public
name|void
name|testSingleUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MessageDigest
name|origDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|SMALL_FILE
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|generatePayload
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|origDigest
operator|.
name|update
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|PartHandle
name|partHandle
init|=
name|putPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
literal|1
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
name|PathHandle
name|fd
init|=
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
name|origDigest
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalizeConsumesUploadIdImmediately
argument_list|()
condition|)
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PathHandle
name|fd2
init|=
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Path handles differ"
argument_list|,
name|fd
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|fd2
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize an upload.    * This saves the path and upload handle as the active    * upload, for aborting in teardown    * @param dest destination    * @return the handle    * @throws IOException failure to initialize    */
DECL|method|initializeUpload (final Path dest)
specifier|protected
name|UploadHandle
name|initializeUpload
parameter_list|(
specifier|final
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|activeUploadPath
operator|=
name|dest
expr_stmt|;
name|activeUpload
operator|=
name|randomMpu
argument_list|()
operator|.
name|initialize
argument_list|(
name|dest
argument_list|)
expr_stmt|;
return|return
name|activeUpload
return|;
block|}
comment|/**    * Generate then upload a part.    * @param file destination    * @param uploadHandle handle    * @param index index of part    * @param origDigest digest to build up. May be null    * @return the part handle    * @throws IOException IO failure.    */
DECL|method|buildAndPutPart ( final Path file, final UploadHandle uploadHandle, final int index, final MessageDigest origDigest)
specifier|protected
name|PartHandle
name|buildAndPutPart
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|UploadHandle
name|uploadHandle
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|MessageDigest
name|origDigest
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|payload
init|=
name|generatePayload
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|origDigest
operator|!=
literal|null
condition|)
block|{
name|origDigest
operator|.
name|update
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|putPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|index
argument_list|,
name|payload
argument_list|)
return|;
block|}
comment|/**    * Put a part.    * The entire byte array is uploaded.    * @param file destination    * @param uploadHandle handle    * @param index index of part    * @param payload byte array of payload    * @return the part handle    * @throws IOException IO failure.    */
DECL|method|putPart (final Path file, final UploadHandle uploadHandle, final int index, final byte[] payload)
specifier|protected
name|PartHandle
name|putPart
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|UploadHandle
name|uploadHandle
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|mpu
argument_list|(
name|index
argument_list|)
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
argument_list|,
name|index
argument_list|,
name|uploadHandle
argument_list|,
name|payload
operator|.
name|length
argument_list|)
decl_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"Uploaded part %s"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upload bandwidth {} MB/s"
argument_list|,
name|timer
operator|.
name|bandwidthDescription
argument_list|(
name|payload
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|partHandle
return|;
block|}
comment|/**    * Complete an upload with the active MPU instance.    * @param file destination    * @param uploadHandle handle    * @param partHandles map of handles    * @param origDigest digest of source data (may be null)    * @param expectedLength expected length of result.    * @return the path handle from the upload.    * @throws IOException IO failure    */
DECL|method|completeUpload (final Path file, final UploadHandle uploadHandle, final Map<Integer, PartHandle> partHandles, final MessageDigest origDigest, final int expectedLength)
specifier|private
name|PathHandle
name|completeUpload
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|UploadHandle
name|uploadHandle
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
parameter_list|,
specifier|final
name|MessageDigest
name|origDigest
parameter_list|,
specifier|final
name|int
name|expectedLength
parameter_list|)
throws|throws
name|IOException
block|{
name|PathHandle
name|fd
init|=
name|complete
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|verifyPathExists
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"Completed file"
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"length of "
operator|+
name|status
argument_list|,
name|expectedLength
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|origDigest
operator|!=
literal|null
condition|)
block|{
name|verifyContents
argument_list|(
name|file
argument_list|,
name|origDigest
argument_list|,
name|expectedLength
argument_list|)
expr_stmt|;
block|}
return|return
name|fd
return|;
block|}
comment|/**    * Verify the contents of a file.    * @param file path    * @param origDigest digest    * @param expectedLength expected length (for logging B/W)    * @throws IOException IO failure    */
DECL|method|verifyContents (final Path file, final MessageDigest origDigest, final int expectedLength)
specifier|protected
name|void
name|verifyContents
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|MessageDigest
name|origDigest
parameter_list|,
specifier|final
name|int
name|expectedLength
parameter_list|)
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer2
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"digest of source and "
operator|+
name|file
operator|+
literal|" differ"
argument_list|,
name|origDigest
operator|.
name|digest
argument_list|()
argument_list|,
name|digest
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|timer2
operator|.
name|end
argument_list|(
literal|"Completed digest"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Download bandwidth {} MB/s"
argument_list|,
name|timer2
operator|.
name|bandwidthDescription
argument_list|(
name|expectedLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform the inner complete without verification.    * @param file destination path    * @param uploadHandle upload handle    * @param partHandles map of parts    * @return the path handle from the upload.    * @throws IOException IO failure    */
DECL|method|complete (final Path file, final UploadHandle uploadHandle, final Map<Integer, PartHandle> partHandles)
specifier|private
name|PathHandle
name|complete
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|UploadHandle
name|uploadHandle
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
parameter_list|)
throws|throws
name|IOException
block|{
name|ContractTestUtils
operator|.
name|NanoTimer
name|timer
init|=
operator|new
name|ContractTestUtils
operator|.
name|NanoTimer
argument_list|()
decl_stmt|;
name|PathHandle
name|fd
init|=
name|randomMpu
argument_list|()
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
decl_stmt|;
name|timer
operator|.
name|end
argument_list|(
literal|"Completed upload to %s"
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|fd
return|;
block|}
comment|/**    * Abort an upload.    * @param file path    * @param uploadHandle handle    * @throws IOException failure    */
DECL|method|abortUpload (final Path file, UploadHandle uploadHandle)
specifier|private
name|void
name|abortUpload
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
name|UploadHandle
name|uploadHandle
parameter_list|)
throws|throws
name|IOException
block|{
name|randomMpu
argument_list|()
operator|.
name|abort
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a multipart upload is successful.    * @throws Exception failure    */
annotation|@
name|Test
DECL|method|testMultipartUpload ()
specifier|public
name|void
name|testMultipartUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MessageDigest
name|origDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
specifier|final
name|int
name|payloadCount
init|=
name|getTestPayloadCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|payloadCount
condition|;
operator|++
name|i
control|)
block|{
name|PartHandle
name|partHandle
init|=
name|buildAndPutPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|i
argument_list|,
name|origDigest
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
block|}
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
name|origDigest
argument_list|,
name|payloadCount
operator|*
name|partSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a multipart upload is successful when a single empty part is    * uploaded.    * @throws Exception failure    */
annotation|@
name|Test
DECL|method|testMultipartUploadEmptyPart ()
specifier|public
name|void
name|testMultipartUploadEmptyPart
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|path
argument_list|(
literal|"testMultipartUpload"
argument_list|)
decl_stmt|;
try|try
init|(
name|MultipartUploader
name|uploader
init|=
name|MultipartUploaderFactory
operator|.
name|get
argument_list|(
name|fs
argument_list|,
literal|null
argument_list|)
init|)
block|{
name|UploadHandle
name|uploadHandle
init|=
name|uploader
operator|.
name|initialize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MessageDigest
name|origDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|origDigest
operator|.
name|update
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|uploader
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
literal|1
argument_list|,
name|uploadHandle
argument_list|,
name|payload
operator|.
name|length
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
name|origDigest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Assert that a multipart upload is successful.    * @throws Exception failure    */
annotation|@
name|Test
DECL|method|testUploadEmptyBlock ()
specifier|public
name|void
name|testUploadEmptyBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|putPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
literal|1
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a multipart upload is successful even when the parts are    * given in the reverse order.    */
annotation|@
name|Test
DECL|method|testMultipartUploadReverseOrder ()
specifier|public
name|void
name|testMultipartUploadReverseOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MessageDigest
name|origDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
specifier|final
name|int
name|payloadCount
init|=
name|getTestPayloadCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|payloadCount
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|payload
init|=
name|generatePayload
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|origDigest
operator|.
name|update
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|payloadCount
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|partHandles
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|buildAndPutPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
name|origDigest
argument_list|,
name|payloadCount
operator|*
name|partSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that a multipart upload is successful even when the parts are    * given in reverse order and the part numbers are not contiguous.    */
annotation|@
name|Test
DECL|method|testMultipartUploadReverseOrderNonContiguousPartNumbers ()
specifier|public
name|void
name|testMultipartUploadReverseOrderNonContiguousPartNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Upload in reverse order and the part numbers are not contiguous"
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|MessageDigest
name|origDigest
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|int
name|payloadCount
init|=
literal|2
operator|*
name|getTestPayloadCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
name|payloadCount
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|byte
index|[]
name|payload
init|=
name|generatePayload
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|origDigest
operator|.
name|update
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|payloadCount
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
name|partHandles
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|buildAndPutPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
name|origDigest
argument_list|,
name|getTestPayloadCount
argument_list|()
operator|*
name|partSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that when we abort a multipart upload, the resulting file does    * not show up.    */
annotation|@
name|Test
DECL|method|testMultipartUploadAbort ()
specifier|public
name|void
name|testMultipartUploadAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Upload and then abort it before completing"
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|int
name|end
init|=
literal|10
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|12
init|;
name|i
operator|>
literal|10
condition|;
name|i
operator|--
control|)
block|{
name|partHandles
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|buildAndPutPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|i
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|abortUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
literal|"ThisIsPart49\n"
decl_stmt|;
name|int
name|len
init|=
name|contents
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|length
decl_stmt|;
name|InputStream
name|is
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|contents
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|putPart
argument_list|(
name|file
argument_list|,
name|is
argument_list|,
literal|49
argument_list|,
name|uploadHandle
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|complete
argument_list|(
name|file
argument_list|,
name|partHandles
argument_list|,
name|uploadHandle
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Uploaded file should not exist"
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// A second abort should be an FileNotFoundException if the UploadHandle is
comment|// consumed by finalization operations (complete, abort).
if|if
condition|(
name|finalizeConsumesUploadIdImmediately
argument_list|()
condition|)
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|abortUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|abortUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Trying to abort from an invalid handle must fail.    */
annotation|@
name|Test
DECL|method|testAbortUnknownUpload ()
specifier|public
name|void
name|testAbortUnknownUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"invalid-handle"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|BBUploadHandle
operator|.
name|from
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|abortUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trying to abort with a handle of size 0 must fail.    */
annotation|@
name|Test
DECL|method|testAbortEmptyUpload ()
specifier|public
name|void
name|testAbortEmptyUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"initialize upload and abort before uploading data"
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|abortUpload
argument_list|(
name|file
argument_list|,
name|initializeUpload
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Uploaded file should not exist"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trying to abort with a handle of size 0 must fail.    */
annotation|@
name|Test
DECL|method|testAbortEmptyUploadHandle ()
specifier|public
name|void
name|testAbortEmptyUploadHandle
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|BBUploadHandle
operator|.
name|from
argument_list|(
name|byteBuffer
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|abortUpload
argument_list|(
name|methodPath
argument_list|()
argument_list|,
name|uploadHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When we complete with no parts provided, it must fail.    */
annotation|@
name|Test
DECL|method|testCompleteEmptyUpload ()
specifier|public
name|void
name|testCompleteEmptyUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Expect an empty MPU to fail, but still be abortable"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|handle
init|=
name|initializeUpload
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|complete
argument_list|(
name|dest
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|handle
argument_list|)
argument_list|)
expr_stmt|;
name|abortUpload
argument_list|(
name|dest
argument_list|,
name|handle
argument_list|)
expr_stmt|;
block|}
comment|/**    * When we pass empty uploadID, putPart throws IllegalArgumentException.    */
annotation|@
name|Test
DECL|method|testPutPartEmptyUploadID ()
specifier|public
name|void
name|testPutPartEmptyUploadID
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Expect IllegalArgumentException when putPart uploadID is empty"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|emptyHandle
init|=
name|BBUploadHandle
operator|.
name|from
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|generatePayload
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|putPart
argument_list|(
name|dest
argument_list|,
name|is
argument_list|,
literal|1
argument_list|,
name|emptyHandle
argument_list|,
name|payload
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * When we pass empty uploadID, complete throws IllegalArgumentException.    */
annotation|@
name|Test
DECL|method|testCompleteEmptyUploadID ()
specifier|public
name|void
name|testCompleteEmptyUploadID
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"Expect IllegalArgumentException when complete uploadID is empty"
argument_list|)
expr_stmt|;
name|Path
name|dest
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|realHandle
init|=
name|initializeUpload
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|UploadHandle
name|emptyHandle
init|=
name|BBUploadHandle
operator|.
name|from
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|putPart
argument_list|(
name|dest
argument_list|,
name|realHandle
argument_list|,
literal|1
argument_list|,
name|generatePayload
argument_list|(
literal|1
argument_list|,
name|SMALL_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|complete
argument_list|(
name|dest
argument_list|,
name|partHandles
argument_list|,
name|emptyHandle
argument_list|)
argument_list|)
expr_stmt|;
comment|// and, while things are setup, attempt to complete with
comment|// a part index of 0
name|partHandles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|mpu
operator|.
name|complete
argument_list|(
name|dest
argument_list|,
name|partHandles
argument_list|,
name|realHandle
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that upon completion, a directory in the way of the file will    * result in a failure. This test only applies to backing stores with a    * concept of directories.    * @throws Exception failure    */
annotation|@
name|Test
DECL|method|testDirectoryInTheWay ()
specifier|public
name|void
name|testDirectoryInTheWay
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
name|UploadHandle
name|uploadHandle
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|SMALL_FILE
decl_stmt|;
name|PartHandle
name|partHandle
init|=
name|putPart
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
literal|1
argument_list|,
name|generatePayload
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|partHandles
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|partHandle
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|completeUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|,
name|partHandles
argument_list|,
literal|null
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
comment|// abort should still work
name|abortUpload
argument_list|(
name|file
argument_list|,
name|uploadHandle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentUploads ()
specifier|public
name|void
name|testConcurrentUploads
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// if the FS doesn't support concurrent uploads, this test is
comment|// required to fail during the second initialization.
specifier|final
name|boolean
name|concurrent
init|=
name|supportsConcurrentUploadsToSamePath
argument_list|()
decl_stmt|;
name|describe
argument_list|(
literal|"testing concurrent uploads, MPU support for this is "
operator|+
name|concurrent
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
name|methodPath
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size1
init|=
name|SMALL_FILE
decl_stmt|;
specifier|final
name|int
name|partId1
init|=
literal|1
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload1
init|=
name|generatePayload
argument_list|(
name|partId1
argument_list|,
name|size1
argument_list|)
decl_stmt|;
specifier|final
name|MessageDigest
name|digest1
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|digest1
operator|.
name|update
argument_list|(
name|payload1
argument_list|)
expr_stmt|;
specifier|final
name|UploadHandle
name|upload1
init|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// initiate part 2
comment|// by using a different size, it's straightforward to see which
comment|// version is visible, before reading/digesting the contents
specifier|final
name|int
name|size2
init|=
name|size1
operator|*
literal|2
decl_stmt|;
specifier|final
name|int
name|partId2
init|=
literal|2
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload2
init|=
name|generatePayload
argument_list|(
name|partId1
argument_list|,
name|size2
argument_list|)
decl_stmt|;
specifier|final
name|MessageDigest
name|digest2
init|=
name|DigestUtils
operator|.
name|getMd5Digest
argument_list|()
decl_stmt|;
name|digest2
operator|.
name|update
argument_list|(
name|payload2
argument_list|)
expr_stmt|;
specifier|final
name|UploadHandle
name|upload2
decl_stmt|;
try|try
block|{
name|upload2
operator|=
name|initializeUpload
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
literal|"The Filesystem is unexpectedly supporting concurrent uploads"
argument_list|,
name|concurrent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|concurrent
condition|)
block|{
comment|// this is expected, so end the test
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expected exception raised on concurrent uploads {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartHandle
argument_list|>
name|partHandles2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"Upload handles match"
argument_list|,
name|upload1
argument_list|,
name|upload2
argument_list|)
expr_stmt|;
comment|// put part 1
name|partHandles1
operator|.
name|put
argument_list|(
name|partId1
argument_list|,
name|putPart
argument_list|(
name|file
argument_list|,
name|upload1
argument_list|,
name|partId1
argument_list|,
name|payload1
argument_list|)
argument_list|)
expr_stmt|;
comment|// put part2
name|partHandles2
operator|.
name|put
argument_list|(
name|partId2
argument_list|,
name|putPart
argument_list|(
name|file
argument_list|,
name|upload2
argument_list|,
name|partId2
argument_list|,
name|payload2
argument_list|)
argument_list|)
expr_stmt|;
comment|// complete part u1. expect its size and digest to
comment|// be as expected.
name|completeUpload
argument_list|(
name|file
argument_list|,
name|upload1
argument_list|,
name|partHandles1
argument_list|,
name|digest1
argument_list|,
name|size1
argument_list|)
expr_stmt|;
comment|// now upload part 2.
name|complete
argument_list|(
name|file
argument_list|,
name|upload2
argument_list|,
name|partHandles2
argument_list|)
expr_stmt|;
comment|// and await the visible length to match
name|eventually
argument_list|(
name|timeToBecomeConsistentMillis
argument_list|()
argument_list|,
literal|500
argument_list|,
parameter_list|()
lambda|->
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File length in "
operator|+
name|status
argument_list|,
name|size2
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|verifyContents
argument_list|(
name|file
argument_list|,
name|digest2
argument_list|,
name|size2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

