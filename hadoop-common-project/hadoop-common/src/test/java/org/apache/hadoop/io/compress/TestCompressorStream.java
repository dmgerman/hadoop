begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCompressorStream
specifier|public
class|class
name|TestCompressorStream
extends|extends
name|CompressorStream
block|{
DECL|field|fop
specifier|private
specifier|static
name|FileOutputStream
name|fop
init|=
literal|null
decl_stmt|;
DECL|field|file
specifier|private
specifier|static
name|File
name|file
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
literal|"tmp.txt"
argument_list|)
expr_stmt|;
name|fop
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error while creating a new file "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|TestCompressorStream ()
specifier|public
name|TestCompressorStream
parameter_list|()
block|{
name|super
argument_list|(
name|fop
argument_list|)
expr_stmt|;
block|}
comment|/**    * Overriding {@link CompressorStream#finish()} method in order     * to reproduce test case    */
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
comment|/**    * In {@link CompressorStream#close()}, if     * {@link CompressorStream#finish()} throws an IOEXception, outputStream     * object was not getting closed.    */
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
block|{
name|TestCompressorStream
name|testCompressorStream
init|=
operator|new
name|TestCompressorStream
argument_list|()
decl_stmt|;
try|try
block|{
name|testCompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected IOException"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"closed shoud be true"
argument_list|,
operator|(
operator|(
name|CompressorStream
operator|)
name|testCompressorStream
operator|)
operator|.
name|closed
argument_list|)
expr_stmt|;
comment|//cleanup after test case
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

