begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util.hash
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|hash
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHash
specifier|public
class|class
name|TestHash
block|{
DECL|field|LINE
specifier|static
specifier|final
name|String
name|LINE
init|=
literal|"34563@45kjkksdf/ljfdb9d8fbusd*89uggjsk<dfgjsdfh@sddc2q3esc"
decl_stmt|;
annotation|@
name|Test
DECL|method|testHash ()
specifier|public
name|void
name|testHash
parameter_list|()
block|{
name|int
name|iterations
init|=
literal|30
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testHash jenkins error !!!"
argument_list|,
name|Hash
operator|.
name|JENKINS_HASH
operator|==
name|Hash
operator|.
name|parseHashType
argument_list|(
literal|"jenkins"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash murmur error !!!"
argument_list|,
name|Hash
operator|.
name|MURMUR_HASH
operator|==
name|Hash
operator|.
name|parseHashType
argument_list|(
literal|"murmur"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash undefined"
argument_list|,
name|Hash
operator|.
name|INVALID_HASH
operator|==
name|Hash
operator|.
name|parseHashType
argument_list|(
literal|"undefined"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|set
argument_list|(
literal|"hadoop.util.hash.type"
argument_list|,
literal|"murmur"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash"
argument_list|,
name|MurmurHash
operator|.
name|getInstance
argument_list|()
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|set
argument_list|(
literal|"hadoop.util.hash.type"
argument_list|,
literal|"jenkins"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash jenkins configuration error !!!"
argument_list|,
name|JenkinsHash
operator|.
name|getInstance
argument_list|()
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash undefine configuration error !!!"
argument_list|,
name|MurmurHash
operator|.
name|getInstance
argument_list|()
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash error jenkin getInstance !!!"
argument_list|,
name|JenkinsHash
operator|.
name|getInstance
argument_list|()
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|JENKINS_HASH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testHash error murmur getInstance !!!"
argument_list|,
name|MurmurHash
operator|.
name|getInstance
argument_list|()
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"testHash error invalid getInstance !!!"
argument_list|,
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|INVALID_HASH
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|murmurHash
init|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"multiple evaluation murmur hash error !!!"
argument_list|,
name|murmurHash
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|murmurHash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|67
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"multiple evaluation murmur hash error !!!"
argument_list|,
name|murmurHash
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|67
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|jenkinsHash
init|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|JENKINS_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"multiple evaluation jenkins hash error !!!"
argument_list|,
name|jenkinsHash
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|JENKINS_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jenkinsHash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|JENKINS_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|67
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"multiple evaluation jenkins hash error !!!"
argument_list|,
name|jenkinsHash
operator|==
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|JENKINS_HASH
argument_list|)
operator|.
name|hash
argument_list|(
name|LINE
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|67
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

