begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|WeightedRoundRobinMultiplexer
operator|.
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
import|;
end_import

begin_class
DECL|class|TestWeightedRoundRobinMultiplexer
specifier|public
class|class
name|TestWeightedRoundRobinMultiplexer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWeightedRoundRobinMultiplexer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mux
specifier|private
name|WeightedRoundRobinMultiplexer
name|mux
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInstantiateNegativeMux ()
specifier|public
name|void
name|testInstantiateNegativeMux
parameter_list|()
block|{
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInstantiateZeroMux ()
specifier|public
name|void
name|testInstantiateZeroMux
parameter_list|()
block|{
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInstantiateIllegalMux ()
specifier|public
name|void
name|testInstantiateIllegalMux
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"namespace."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// ask for 3 weights with 2 queues
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|2
argument_list|,
literal|"namespace"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLegalInstantiation ()
specifier|public
name|void
name|testLegalInstantiation
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"namespace."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
comment|// ask for 3 weights with 3 queues
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|3
argument_list|,
literal|"namespace."
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPattern ()
specifier|public
name|void
name|testDefaultPattern
parameter_list|()
block|{
comment|// Mux of size 1: 0 0 0 0 0, etc
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Mux of size 2: 0 0 1 0 0 1 0 0 1, etc
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|2
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Size 3: 4x0 2x1 1x2, etc
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|3
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Size 4: 8x0 4x1 2x2 1x3
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|4
argument_list|,
literal|""
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomPattern ()
specifier|public
name|void
name|testCustomPattern
parameter_list|()
block|{
comment|// 1x0 1x1
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"test.custom."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
argument_list|,
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|2
argument_list|,
literal|"test.custom"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 1x0 3x1 2x2
name|conf
operator|.
name|setStrings
argument_list|(
literal|"test.custom."
operator|+
name|IPC_CALLQUEUE_WRRMUX_WEIGHTS_KEY
argument_list|,
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|mux
operator|=
operator|new
name|WeightedRoundRobinMultiplexer
argument_list|(
literal|3
argument_list|,
literal|"test.custom"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mux
operator|.
name|getAndAdvanceCurrentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// Ensure pattern repeats
block|}
block|}
end_class

end_unit

