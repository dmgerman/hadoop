begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.bzip2
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|Bzip2Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|Bzip2Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|TestBzip2CompressorDecompressor
specifier|public
class|class
name|TestBzip2CompressorDecompressor
block|{
DECL|field|rnd
specifier|private
specifier|static
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|12345l
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|Bzip2Factory
operator|.
name|isNativeBzip2Loaded
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test compress/decompress process
annotation|@
name|Test
DECL|method|testCompressDecompress ()
specifier|public
name|void
name|testCompressDecompress
parameter_list|()
block|{
name|byte
index|[]
name|rawData
init|=
literal|null
decl_stmt|;
name|int
name|rawDataSize
init|=
literal|0
decl_stmt|;
name|rawDataSize
operator|=
literal|1024
operator|*
literal|64
expr_stmt|;
name|rawData
operator|=
name|generate
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
try|try
block|{
name|Bzip2Compressor
name|compressor
init|=
operator|new
name|Bzip2Compressor
argument_list|()
decl_stmt|;
name|Bzip2Decompressor
name|decompressor
init|=
operator|new
name|Bzip2Decompressor
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"testBzip2CompressDecompress finished error"
argument_list|,
name|compressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBzip2CompressDecompress getBytesRead before error"
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|compressedResult
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|rawDataSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testBzip2CompressDecompress getBytesRead after error"
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
operator|==
name|rawDataSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testBzip2CompressDecompress compressed size no less than original size"
argument_list|,
name|cSize
operator|<
name|rawDataSize
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decompressedBytes
init|=
operator|new
name|byte
index|[
name|rawDataSize
index|]
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressedBytes
argument_list|,
literal|0
argument_list|,
name|decompressedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"testBzip2CompressDecompress arrays not equals "
argument_list|,
name|rawData
argument_list|,
name|decompressedBytes
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testBzip2CompressDecompress ex !!!"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generate (int size)
specifier|public
specifier|static
name|byte
index|[]
name|generate
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|array
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|rnd
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
annotation|@
name|Test
DECL|method|testBzip2CompressDecompressInMultiThreads ()
specifier|public
name|void
name|testBzip2CompressDecompressInMultiThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|MultithreadedTestUtil
operator|.
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|testCompressDecompress
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

