begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test host name and IP resolution and caching.  */
end_comment

begin_class
DECL|class|TestDNS
specifier|public
class|class
name|TestDNS
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDNS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT
init|=
literal|"default"
decl_stmt|;
comment|/**    * Test that asking for the default hostname works    * @throws Exception if hostname lookups fail    */
annotation|@
name|Test
DECL|method|testGetLocalHost ()
specifier|public
name|void
name|testGetLocalHost
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hostname
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that repeated calls to getting the local host are fairly fast, and    * hence that caching is being used    * @throws Exception if hostname lookups fail    */
annotation|@
name|Test
DECL|method|testGetLocalHostIsFast ()
specifier|public
name|void
name|testGetLocalHostIsFast
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hostname1
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|hostname1
argument_list|)
expr_stmt|;
name|String
name|hostname2
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|hostname3
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|hostname3
argument_list|,
name|hostname2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hostname2
argument_list|,
name|hostname1
argument_list|)
expr_stmt|;
name|long
name|interval
init|=
name|t2
operator|-
name|t1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Took too long to determine local host - caching is not working"
argument_list|,
name|interval
operator|<
literal|20000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that our local IP address is not null    * @throws Exception if something went wrong    */
annotation|@
name|Test
DECL|method|testLocalHostHasAnAddress ()
specifier|public
name|void
name|testLocalHostHasAnAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|getLocalIPAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalIPAddr ()
specifier|private
name|InetAddress
name|getLocalIPAddr
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|String
name|hostname
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|InetAddress
name|localhost
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
return|return
name|localhost
return|;
block|}
comment|/**    * Test null interface name    */
annotation|@
name|Test
DECL|method|testNullInterface ()
specifier|public
name|void
name|testNullInterface
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|host
init|=
name|DNS
operator|.
name|getDefaultHost
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected a NullPointerException, got "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Expected
block|}
try|try
block|{
name|String
name|ip
init|=
name|DNS
operator|.
name|getDefaultIP
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected a NullPointerException, got "
operator|+
name|ip
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/**    * Get the IP addresses of an unknown interface    */
annotation|@
name|Test
DECL|method|testIPsOfUnknownInterface ()
specifier|public
name|void
name|testIPsOfUnknownInterface
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DNS
operator|.
name|getIPs
argument_list|(
literal|"name-of-an-unknown-interface"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Got an IP for a bogus interface"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No such interface name-of-an-unknown-interface"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the "default" IP addresses is the local IP addr    */
annotation|@
name|Test
DECL|method|testGetIPWithDefault ()
specifier|public
name|void
name|testGetIPWithDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|ips
init|=
name|DNS
operator|.
name|getIPs
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only return 1 default IP"
argument_list|,
literal|1
argument_list|,
name|ips
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getLocalIPAddr
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|ips
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ip
init|=
name|DNS
operator|.
name|getDefaultIP
argument_list|(
name|DEFAULT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ip
argument_list|,
name|ips
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * TestCase: get our local address and reverse look it up    */
annotation|@
name|Test
DECL|method|testRDNS ()
specifier|public
name|void
name|testRDNS
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|localhost
init|=
name|getLocalIPAddr
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|s
init|=
name|DNS
operator|.
name|reverseDns
argument_list|(
name|localhost
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Local revers DNS hostname is "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NameNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|localhost
operator|.
name|isLinkLocalAddress
argument_list|()
operator|||
name|localhost
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
comment|//these addresses probably won't work with rDNS anyway, unless someone
comment|//has unusual entries in their DNS server mapping 1.0.0.127 to localhost
name|LOG
operator|.
name|info
argument_list|(
literal|"Reverse DNS failing as due to incomplete networking"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address is "
operator|+
name|localhost
operator|+
literal|" Loopback="
operator|+
name|localhost
operator|.
name|isLoopbackAddress
argument_list|()
operator|+
literal|" Linklocal="
operator|+
name|localhost
operator|.
name|isLinkLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that the name "localhost" resolves to something.    *    * If this fails, your machine's network is in a mess, go edit /etc/hosts    */
annotation|@
name|Test
DECL|method|testLocalhostResolves ()
specifier|public
name|void
name|testLocalhostResolves
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|localhost
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"localhost is null"
argument_list|,
name|localhost
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Localhost IPAddr is "
operator|+
name|localhost
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

