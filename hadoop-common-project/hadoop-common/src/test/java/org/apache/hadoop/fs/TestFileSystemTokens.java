begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|MockFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestFileSystemTokens
specifier|public
class|class
name|TestFileSystemTokens
block|{
DECL|field|renewer
specifier|private
specifier|static
name|String
name|renewer
init|=
literal|"renewer!"
decl_stmt|;
annotation|@
name|Test
DECL|method|testFsWithNoToken ()
specifier|public
name|void
name|testFsWithNoToken
parameter_list|()
throws|throws
name|Exception
block|{
name|MockFileSystem
name|fs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithToken ()
specifier|public
name|void
name|testFsWithToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
name|createFileSystemForServiceName
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithTokenExists ()
specifier|public
name|void
name|testFsWithTokenExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
name|createFileSystemForServiceName
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|service
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|fs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|token
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithChildTokens ()
specifier|public
name|void
name|testFsWithChildTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs2"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
name|service2
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs3
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|,
name|fs1
argument_list|,
name|fs2
argument_list|,
name|fs3
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// has no tokens of own, only child tokens
name|verifyTokenFetch
argument_list|(
name|fs1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithDuplicateChildren ()
specifier|public
name|void
name|testFsWithDuplicateChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs
init|=
name|createFileSystemForServiceName
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithDuplicateChildrenTokenExists ()
specifier|public
name|void
name|testFsWithDuplicateChildrenTokenExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|service
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs
init|=
name|createFileSystemForServiceName
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|,
name|fs
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|token
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithChildTokensOneExists ()
specifier|public
name|void
name|testFsWithChildTokensOneExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs2"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|service2
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
name|service2
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs3
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|,
name|fs1
argument_list|,
name|fs2
argument_list|,
name|fs3
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we had added its token to credentials
name|verifyTokenFetch
argument_list|(
name|fs3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|token
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithMyOwnAndChildTokens ()
specifier|public
name|void
name|testFsWithMyOwnAndChildTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs2"
argument_list|)
decl_stmt|;
name|Text
name|myService
init|=
operator|new
name|Text
argument_list|(
literal|"multiTokenFs"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|service2
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
name|service2
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
name|myService
argument_list|,
name|fs1
argument_list|,
name|fs2
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// its own token and also of its children
name|verifyTokenFetch
argument_list|(
name|fs1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we had added its token to credentials
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|myService
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithMyOwnExistsAndChildTokens ()
specifier|public
name|void
name|testFsWithMyOwnExistsAndChildTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs2"
argument_list|)
decl_stmt|;
name|Text
name|myService
init|=
operator|new
name|Text
argument_list|(
literal|"multiTokenFs"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|myService
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
name|service2
argument_list|)
decl_stmt|;
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
name|myService
argument_list|,
name|fs1
argument_list|,
name|fs2
argument_list|)
decl_stmt|;
name|multiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we had added its token to credentials
name|verifyTokenFetch
argument_list|(
name|fs1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|token
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|myService
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsWithNestedDuplicatesChildren ()
specifier|public
name|void
name|testFsWithNestedDuplicatesChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs2"
argument_list|)
decl_stmt|;
name|Text
name|service4
init|=
operator|new
name|Text
argument_list|(
literal|"singleTokenFs4"
argument_list|)
decl_stmt|;
name|Text
name|multiService
init|=
operator|new
name|Text
argument_list|(
literal|"multiTokenFs"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|service2
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|MockFileSystem
name|fs1
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs1B
init|=
name|createFileSystemForServiceName
argument_list|(
name|service1
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs2
init|=
name|createFileSystemForServiceName
argument_list|(
name|service2
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs3
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MockFileSystem
name|fs4
init|=
name|createFileSystemForServiceName
argument_list|(
name|service4
argument_list|)
decl_stmt|;
comment|// now let's get dirty!  ensure dup tokens aren't fetched even when
comment|// repeated and dupped in a nested fs.  fs4 is a real test of the drill
comment|// down: multi-filter-multi-filter-filter-fs4.
name|MockFileSystem
name|multiFs
init|=
name|createFileSystemForServiceName
argument_list|(
name|multiService
argument_list|,
name|fs1
argument_list|,
name|fs1B
argument_list|,
name|fs2
argument_list|,
name|fs2
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
name|fs3
argument_list|)
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
operator|new
name|FilterFileSystem
argument_list|(
name|fs4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|MockFileSystem
name|superMultiFs
init|=
name|createFileSystemForServiceName
argument_list|(
literal|null
argument_list|,
name|fs1
argument_list|,
name|fs1B
argument_list|,
name|fs1
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
name|fs3
argument_list|)
argument_list|,
operator|new
name|FilterFileSystem
argument_list|(
name|multiFs
argument_list|)
argument_list|)
decl_stmt|;
name|superMultiFs
operator|.
name|addDelegationTokens
argument_list|(
name|renewer
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|superMultiFs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// does not have its own token
name|verifyTokenFetch
argument_list|(
name|multiFs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// has its own token
name|verifyTokenFetch
argument_list|(
name|fs1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyTokenFetch
argument_list|(
name|fs2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we had added its token to credentials
name|verifyTokenFetch
argument_list|(
name|fs3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// has no tokens
name|verifyTokenFetch
argument_list|(
name|fs4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|credentials
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|//fs1+fs2+fs4+multifs (fs3=0)
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|token2
argument_list|,
name|credentials
operator|.
name|getToken
argument_list|(
name|service2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|multiService
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|credentials
operator|.
name|getToken
argument_list|(
name|service4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileSystemForServiceName ( final Text service, final FileSystem... children)
specifier|public
specifier|static
name|MockFileSystem
name|createFileSystemForServiceName
parameter_list|(
specifier|final
name|Text
name|service
parameter_list|,
specifier|final
name|FileSystem
modifier|...
name|children
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MockFileSystem
name|fs
init|=
operator|new
name|MockFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|MockFileSystem
name|mockFs
init|=
name|fs
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|mockFs
operator|.
name|getCanonicalServiceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
block|)
empty_stmt|;
block|}
name|when
argument_list|(
name|mockFs
operator|.
name|getChildFileSystems
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|children
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
end_class

begin_comment
comment|// check that canonical name was requested, if renewer is not null that
end_comment

begin_comment
comment|// a token was requested, and that child fs was invoked
end_comment

begin_function
DECL|method|verifyTokenFetch (MockFileSystem fs, boolean expected)
specifier|private
name|void
name|verifyTokenFetch
parameter_list|(
name|MockFileSystem
name|fs
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|verify
argument_list|(
name|fs
operator|.
name|getRawFileSystem
argument_list|()
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getCanonicalServiceName
argument_list|()
expr_stmt|;
if|if
condition|(
name|expected
condition|)
block|{
name|verify
argument_list|(
name|fs
operator|.
name|getRawFileSystem
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verify
argument_list|(
name|fs
operator|.
name|getRawFileSystem
argument_list|()
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|fs
operator|.
name|getRawFileSystem
argument_list|()
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getChildFileSystems
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

