begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_comment
comment|/**  * Unit test of etag operations.  */
end_comment

begin_class
DECL|class|TestEtagChecksum
specifier|public
class|class
name|TestEtagChecksum
extends|extends
name|Assert
block|{
DECL|field|empty1
specifier|private
specifier|final
name|EtagChecksum
name|empty1
init|=
name|tag
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|empty2
specifier|private
specifier|final
name|EtagChecksum
name|empty2
init|=
name|tag
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|valid1
specifier|private
specifier|final
name|EtagChecksum
name|valid1
init|=
name|tag
argument_list|(
literal|"valid"
argument_list|)
decl_stmt|;
DECL|field|valid2
specifier|private
specifier|final
name|EtagChecksum
name|valid2
init|=
name|tag
argument_list|(
literal|"valid"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testEmptyTagsEqual ()
specifier|public
name|void
name|testEmptyTagsEqual
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|empty1
argument_list|,
name|empty2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyTagRoundTrip ()
specifier|public
name|void
name|testEmptyTagRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
name|empty1
argument_list|,
name|roundTrip
argument_list|(
name|empty1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidTagsEqual ()
specifier|public
name|void
name|testValidTagsEqual
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|valid1
argument_list|,
name|valid2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidTagRoundTrip ()
specifier|public
name|void
name|testValidTagRoundTrip
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
name|valid1
argument_list|,
name|roundTrip
argument_list|(
name|valid1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidAndEmptyTagsDontMatch ()
specifier|public
name|void
name|testValidAndEmptyTagsDontMatch
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|valid1
argument_list|,
name|empty1
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|valid1
argument_list|,
name|tag
argument_list|(
literal|"other valid one"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentTagsDontMatch ()
specifier|public
name|void
name|testDifferentTagsDontMatch
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|valid1
argument_list|,
name|tag
argument_list|(
literal|"other valid one"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tag (String t)
specifier|private
name|EtagChecksum
name|tag
parameter_list|(
name|String
name|t
parameter_list|)
block|{
return|return
operator|new
name|EtagChecksum
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|roundTrip (EtagChecksum tag)
specifier|private
name|EtagChecksum
name|roundTrip
parameter_list|(
name|EtagChecksum
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
init|;
name|DataInputBuffer
name|dib
operator|=
operator|new
name|DataInputBuffer
argument_list|()
init|)
block|{
name|tag
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|EtagChecksum
name|t2
init|=
operator|new
name|EtagChecksum
argument_list|()
decl_stmt|;
name|t2
operator|.
name|readFields
argument_list|(
name|dib
argument_list|)
expr_stmt|;
return|return
name|t2
return|;
block|}
block|}
block|}
end_class

end_unit

