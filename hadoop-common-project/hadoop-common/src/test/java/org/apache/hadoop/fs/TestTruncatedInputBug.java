begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_comment
comment|/**  * test for the input truncation bug when mark/reset is used.  * HADOOP-1489  */
end_comment

begin_class
DECL|class|TestTruncatedInputBug
specifier|public
class|class
name|TestTruncatedInputBug
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|method|writeFile (FileSystem fileSys, Path name, int nBytesToWrite)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|nBytesToWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nBytesToWrite
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When mark() is used on BufferedInputStream, the request    * size on the checksum file system can be small.  However,    * checksum file system currently depends on the request size    *>= bytesPerSum to work properly.    */
DECL|method|testTruncatedInputBug ()
specifier|public
name|void
name|testTruncatedInputBug
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|ioBufSize
init|=
literal|512
decl_stmt|;
specifier|final
name|int
name|fileSize
init|=
name|ioBufSize
operator|*
literal|4
decl_stmt|;
name|int
name|filePos
init|=
literal|0
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|ioBufSize
argument_list|)
expr_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// First create a test input file.
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"HADOOP-1489"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|testFile
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|testFile
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
name|fileSize
argument_list|)
expr_stmt|;
comment|// Now read the file for ioBufSize bytes
name|FSDataInputStream
name|in
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|testFile
argument_list|,
name|ioBufSize
argument_list|)
decl_stmt|;
comment|// seek beyond data buffered by open
name|filePos
operator|+=
name|ioBufSize
operator|*
literal|2
operator|+
operator|(
name|ioBufSize
operator|-
literal|10
operator|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|filePos
argument_list|)
expr_stmt|;
comment|// read 4 more bytes before marking
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
operator|++
name|filePos
expr_stmt|;
block|}
comment|// Now set mark() to trigger the bug
comment|// NOTE: in the fixed code, mark() does nothing (not supported) and
comment|//   hence won't trigger this bug.
name|in
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MARKED"
argument_list|)
expr_stmt|;
comment|// Try to read the rest
while|while
condition|(
name|filePos
operator|<
name|fileSize
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
operator|++
name|filePos
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Read "
operator|+
name|filePos
operator|+
literal|" bytes."
operator|+
literal|" file size="
operator|+
name|fileSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filePos
operator|==
name|fileSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop
block|}
block|}
block|}
comment|// end testTruncatedInputBug
block|}
end_class

end_unit

