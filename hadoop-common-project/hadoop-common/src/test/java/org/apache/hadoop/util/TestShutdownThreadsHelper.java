begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestShutdownThreadsHelper
specifier|public
class|class
name|TestShutdownThreadsHelper
block|{
DECL|field|sampleRunnable
specifier|private
name|Runnable
name|sampleRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|ShutdownThreadsHelper
operator|.
name|SHUTDOWN_WAIT_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread interrupted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testShutdownThread ()
specifier|public
name|void
name|testShutdownThread
parameter_list|()
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|sampleRunnable
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|ret
init|=
name|ShutdownThreadsHelper
operator|.
name|shutdownThread
argument_list|(
name|thread
argument_list|)
decl_stmt|;
name|boolean
name|isTerminated
init|=
operator|!
name|thread
operator|.
name|isAlive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return value"
argument_list|,
name|ret
argument_list|,
name|isTerminated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Thread is not shutdown"
argument_list|,
name|isTerminated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShutdownThreadPool ()
specifier|public
name|void
name|testShutdownThreadPool
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|sampleRunnable
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|ShutdownThreadsHelper
operator|.
name|shutdownExecutorService
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|boolean
name|isTerminated
init|=
name|executor
operator|.
name|isTerminated
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect return value"
argument_list|,
name|ret
argument_list|,
name|isTerminated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ExecutorService is not shutdown"
argument_list|,
name|isTerminated
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

