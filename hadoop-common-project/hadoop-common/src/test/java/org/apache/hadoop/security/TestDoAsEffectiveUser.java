begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestRpcBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|DefaultImpersonationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_comment
comment|/**  * Test do as effective user.  */
end_comment

begin_class
DECL|class|TestDoAsEffectiveUser
specifier|public
class|class
name|TestDoAsEffectiveUser
extends|extends
name|TestRpcBase
block|{
DECL|field|REAL_USER_NAME
specifier|final
specifier|private
specifier|static
name|String
name|REAL_USER_NAME
init|=
literal|"realUser1@HADOOP.APACHE.ORG"
decl_stmt|;
DECL|field|REAL_USER_SHORT_NAME
specifier|final
specifier|private
specifier|static
name|String
name|REAL_USER_SHORT_NAME
init|=
literal|"realUser1"
decl_stmt|;
DECL|field|PROXY_USER_NAME
specifier|final
specifier|private
specifier|static
name|String
name|PROXY_USER_NAME
init|=
literal|"proxyUser"
decl_stmt|;
DECL|field|GROUP1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP1_NAME
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP2_NAME
init|=
literal|"group2"
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|final
specifier|private
specifier|static
name|String
index|[]
name|GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|}
decl_stmt|;
DECL|field|client
specifier|private
name|TestRpcService
name|client
decl_stmt|;
DECL|field|masterConf
specifier|private
specifier|static
specifier|final
name|Configuration
name|masterConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDoAsEffectiveUser
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|masterConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTH_TO_LOCAL
argument_list|,
literal|"RULE:[2:$1@$0](.*@HADOOP.APACHE.ORG)s/@.*//"
operator|+
literal|"RULE:[1:$1@$0](.*@HADOOP.APACHE.ORG)s/@.*//"
operator|+
literal|"DEFAULT"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setMasterConf ()
specifier|public
name|void
name|setMasterConf
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|masterConf
argument_list|)
expr_stmt|;
name|refreshConf
argument_list|(
name|masterConf
argument_list|)
expr_stmt|;
block|}
DECL|method|configureSuperUserIPAddresses (Configuration conf, String superUserShortName)
specifier|private
name|void
name|configureSuperUserIPAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|superUserShortName
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ipList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|netInterfaceList
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|netInterfaceList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|inf
init|=
name|netInterfaceList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrList
init|=
name|inf
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|addrList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ipList
operator|.
name|add
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ip
range|:
name|ipList
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"127.0.1.1,"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Local Ip addresses: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|superUserShortName
argument_list|)
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method for    * {@link org.apache.hadoop.security.UserGroupInformation#createProxyUser(java.lang.String, org.apache.hadoop.security.UserGroupInformation)}    * .    */
annotation|@
name|Test
DECL|method|testCreateProxyUser ()
specifier|public
name|void
name|testCreateProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure that doAs works correctly
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|curUGI
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PROXY_USER_NAME
operator|+
literal|" (auth:PROXY) via "
operator|+
name|REAL_USER_NAME
operator|+
literal|" (auth:SIMPLE)"
argument_list|,
name|curUGI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRemoteUgi (final UserGroupInformation ugi, final Configuration conf)
specifier|private
name|void
name|checkRemoteUgi
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|ServiceException
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|currentUser
init|=
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|serverRemoteUser
init|=
name|client
operator|.
name|getServerRemoteUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|toString
argument_list|()
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ugi
operator|.
name|toString
argument_list|()
argument_list|,
name|serverRemoteUser
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|4000
argument_list|)
DECL|method|testRealUserSetup ()
specifier|public
name|void
name|testRealUserSetup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|configureSuperUserIPAddresses
argument_list|(
name|conf
argument_list|,
name|REAL_USER_SHORT_NAME
argument_list|)
expr_stmt|;
comment|// Set RPC engine to protobuf RPC engine
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|checkRemoteUgi
argument_list|(
name|realUserUgi
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|checkRemoteUgi
argument_list|(
name|proxyUserUgi
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|4000
argument_list|)
DECL|method|testRealUserAuthorizationSuccess ()
specifier|public
name|void
name|testRealUserAuthorizationSuccess
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configureSuperUserIPAddresses
argument_list|(
name|conf
argument_list|,
name|REAL_USER_SHORT_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|checkRemoteUgi
argument_list|(
name|realUserUgi
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|checkRemoteUgi
argument_list|(
name|proxyUserUgi
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Tests authorization of superuser's ip.    */
annotation|@
name|Test
DECL|method|testRealUserIPAuthorizationFailure ()
specifier|public
name|void
name|testRealUserIPAuthorizationFailure
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"20.20.20.20"
argument_list|)
expr_stmt|;
comment|//Authorized IP address
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|String
name|retVal
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|ServiceException
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The RPC must have failed "
operator|+
name|retVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRealUserIPNotSpecified ()
specifier|public
name|void
name|testRealUserIPNotSpecified
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"group1"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|String
name|retVal
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|ServiceException
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The RPC must have failed "
operator|+
name|retVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRealUserGroupNotSpecified ()
specifier|public
name|void
name|testRealUserGroupNotSpecified
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configureSuperUserIPAddresses
argument_list|(
name|conf
argument_list|,
name|REAL_USER_SHORT_NAME
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|String
name|retVal
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|ServiceException
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The RPC must have failed "
operator|+
name|retVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRealUserGroupAuthorizationFailure ()
specifier|public
name|void
name|testRealUserGroupAuthorizationFailure
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configureSuperUserIPAddresses
argument_list|(
name|conf
argument_list|,
name|REAL_USER_SHORT_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|DefaultImpersonationProvider
operator|.
name|getTestProvider
argument_list|()
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_SHORT_NAME
argument_list|)
argument_list|,
literal|"group3"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|String
name|retVal
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|ServiceException
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The RPC must have failed "
operator|+
name|retVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    *  Tests the scenario when token authorization is used.    *  The server sees only the the owner of the token as the    *  user.    */
annotation|@
name|Test
DECL|method|testProxyWithToken ()
specifier|public
name|void
name|testProxyWithToken
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|masterConf
argument_list|)
decl_stmt|;
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"SomeSuperUser"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|current
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|proxyUserUgi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|refreshConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|retVal
init|=
name|proxyUserUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|//The user returned by server must be the one in the token.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|REAL_USER_NAME
operator|+
literal|" (auth:TOKEN) via SomeSuperUser (auth:SIMPLE)"
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
block|}
comment|/*    * The user gets the token via a superuser. Server should authenticate    * this user.     */
annotation|@
name|Test
DECL|method|testTokenBySuperUser ()
specifier|public
name|void
name|testTokenBySuperUser
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|masterConf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
comment|// Set RPC engine to protobuf RPC engine
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|newConf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|newConf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|REAL_USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|refreshConf
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"SomeSuperUser"
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|String
name|retVal
init|=
name|current
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|getCurrentUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
name|REAL_USER_NAME
operator|+
literal|" (auth:TOKEN) via SomeSuperUser (auth:SIMPLE)"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|retVal
operator|+
literal|"!="
operator|+
name|expected
argument_list|,
name|expected
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
block|}
comment|//
DECL|method|refreshConf (Configuration conf)
specifier|private
name|void
name|refreshConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

