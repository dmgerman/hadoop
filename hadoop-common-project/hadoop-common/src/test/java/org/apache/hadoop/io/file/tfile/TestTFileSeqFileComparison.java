begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_class
DECL|class|TestTFileSeqFileComparison
specifier|public
class|class
name|TestTFileSeqFileComparison
extends|extends
name|TestCase
block|{
DECL|field|options
name|MyOptions
name|options
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|startTimeEpoch
specifier|private
name|long
name|startTimeEpoch
decl_stmt|;
DECL|field|finishTimeEpoch
specifier|private
name|long
name|finishTimeEpoch
decl_stmt|;
DECL|field|formatter
specifier|private
name|DateFormat
name|formatter
decl_stmt|;
DECL|field|dictionary
name|byte
index|[]
index|[]
name|dictionary
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{
name|options
operator|=
operator|new
name|MyOptions
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.input.buffer.size"
argument_list|,
name|options
operator|.
name|fsInputBufferSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.output.buffer.size"
argument_list|,
name|options
operator|.
name|fsOutputBufferSize
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|rootDir
argument_list|)
decl_stmt|;
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|formatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
expr_stmt|;
name|setUpDictionary
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpDictionary ()
specifier|private
name|void
name|setUpDictionary
parameter_list|()
block|{
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|dictionary
operator|=
operator|new
name|byte
index|[
name|options
operator|.
name|dictSize
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|dictSize
condition|;
operator|++
name|i
control|)
block|{
name|int
name|len
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|options
operator|.
name|maxWordLen
operator|-
name|options
operator|.
name|minWordLen
argument_list|)
operator|+
name|options
operator|.
name|minWordLen
decl_stmt|;
name|dictionary
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|dictionary
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
DECL|method|startTime ()
specifier|public
name|void
name|startTime
parameter_list|()
throws|throws
name|IOException
block|{
name|startTimeEpoch
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatTime
argument_list|()
operator|+
literal|" Started timing."
argument_list|)
expr_stmt|;
block|}
DECL|method|stopTime ()
specifier|public
name|void
name|stopTime
parameter_list|()
throws|throws
name|IOException
block|{
name|finishTimeEpoch
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatTime
argument_list|()
operator|+
literal|" Stopped timing."
argument_list|)
expr_stmt|;
block|}
DECL|method|getIntervalMillis ()
specifier|public
name|long
name|getIntervalMillis
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|finishTimeEpoch
operator|-
name|startTimeEpoch
return|;
block|}
DECL|method|printlnWithTimestamp (String message)
specifier|public
name|void
name|printlnWithTimestamp
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatTime
argument_list|()
operator|+
literal|"  "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
comment|/*    * Format millis into minutes and seconds.    */
DECL|method|formatTime (long milis)
specifier|public
name|String
name|formatTime
parameter_list|(
name|long
name|milis
parameter_list|)
block|{
return|return
name|formatter
operator|.
name|format
argument_list|(
name|milis
argument_list|)
return|;
block|}
DECL|method|formatTime ()
specifier|public
name|String
name|formatTime
parameter_list|()
block|{
return|return
name|formatTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
return|;
block|}
DECL|interface|KVAppendable
specifier|private
interface|interface
name|KVAppendable
block|{
DECL|method|append (BytesWritable key, BytesWritable value)
specifier|public
name|void
name|append
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|interface|KVReadable
specifier|private
interface|interface
name|KVReadable
block|{
DECL|method|getKey ()
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
function_decl|;
DECL|method|getValue ()
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
function_decl|;
DECL|method|getKeyLength ()
specifier|public
name|int
name|getKeyLength
parameter_list|()
function_decl|;
DECL|method|getValueLength ()
specifier|public
name|int
name|getValueLength
parameter_list|()
function_decl|;
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|TFileAppendable
specifier|static
class|class
name|TFileAppendable
implements|implements
name|KVAppendable
block|{
DECL|field|fsdos
specifier|private
name|FSDataOutputStream
name|fsdos
decl_stmt|;
DECL|field|writer
specifier|private
name|TFile
operator|.
name|Writer
name|writer
decl_stmt|;
DECL|method|TFileAppendable (FileSystem fs, Path path, String compress, int minBlkSize, int osBufferSize, Configuration conf)
specifier|public
name|TFileAppendable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|compress
parameter_list|,
name|int
name|minBlkSize
parameter_list|,
name|int
name|osBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fsdos
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|osBufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|TFile
operator|.
name|Writer
argument_list|(
name|fsdos
argument_list|,
name|minBlkSize
argument_list|,
name|compress
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append (BytesWritable key, BytesWritable value)
specifier|public
name|void
name|append
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getSize
argument_list|()
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TFileReadable
specifier|static
class|class
name|TFileReadable
implements|implements
name|KVReadable
block|{
DECL|field|fsdis
specifier|private
name|FSDataInputStream
name|fsdis
decl_stmt|;
DECL|field|reader
specifier|private
name|TFile
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|field|scanner
specifier|private
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|scanner
decl_stmt|;
DECL|field|keyBuffer
specifier|private
name|byte
index|[]
name|keyBuffer
decl_stmt|;
DECL|field|keyLength
specifier|private
name|int
name|keyLength
decl_stmt|;
DECL|field|valueBuffer
specifier|private
name|byte
index|[]
name|valueBuffer
decl_stmt|;
DECL|field|valueLength
specifier|private
name|int
name|valueLength
decl_stmt|;
DECL|method|TFileReadable (FileSystem fs, Path path, int osBufferSize, Configuration conf)
specifier|public
name|TFileReadable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|osBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fsdis
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|osBufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
operator|new
name|TFile
operator|.
name|Reader
argument_list|(
name|fsdis
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|()
expr_stmt|;
name|keyBuffer
operator|=
operator|new
name|byte
index|[
literal|32
index|]
expr_stmt|;
name|valueBuffer
operator|=
operator|new
name|byte
index|[
literal|32
index|]
expr_stmt|;
block|}
DECL|method|checkKeyBuffer (int size)
specifier|private
name|void
name|checkKeyBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
name|keyBuffer
operator|.
name|length
condition|)
block|{
return|return;
block|}
name|keyBuffer
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
literal|2
operator|*
name|keyBuffer
operator|.
name|length
argument_list|,
literal|2
operator|*
name|size
operator|-
name|keyBuffer
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
DECL|method|checkValueBuffer (int size)
specifier|private
name|void
name|checkValueBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
name|valueBuffer
operator|.
name|length
condition|)
block|{
return|return;
block|}
name|valueBuffer
operator|=
operator|new
name|byte
index|[
name|Math
operator|.
name|max
argument_list|(
literal|2
operator|*
name|valueBuffer
operator|.
name|length
argument_list|,
literal|2
operator|*
name|size
operator|-
name|valueBuffer
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|keyBuffer
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyLength ()
specifier|public
name|int
name|getKeyLength
parameter_list|()
block|{
return|return
name|keyLength
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|valueBuffer
return|;
block|}
annotation|@
name|Override
DECL|method|getValueLength ()
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|valueLength
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scanner
operator|.
name|atEnd
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
name|entry
init|=
name|scanner
operator|.
name|entry
argument_list|()
decl_stmt|;
name|keyLength
operator|=
name|entry
operator|.
name|getKeyLength
argument_list|()
expr_stmt|;
name|checkKeyBuffer
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getKey
argument_list|(
name|keyBuffer
argument_list|)
expr_stmt|;
name|valueLength
operator|=
name|entry
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
name|checkValueBuffer
argument_list|(
name|valueLength
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|(
name|valueBuffer
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsdis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SeqFileAppendable
specifier|static
class|class
name|SeqFileAppendable
implements|implements
name|KVAppendable
block|{
DECL|field|fsdos
specifier|private
name|FSDataOutputStream
name|fsdos
decl_stmt|;
DECL|field|writer
specifier|private
name|SequenceFile
operator|.
name|Writer
name|writer
decl_stmt|;
DECL|method|SeqFileAppendable (FileSystem fs, Path path, int osBufferSize, String compress, int minBlkSize)
specifier|public
name|SeqFileAppendable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|osBufferSize
parameter_list|,
name|String
name|compress
parameter_list|,
name|int
name|minBlkSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"lzo"
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|codec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|LZO
operator|.
name|getCodec
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"gz"
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|codec
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getCodec
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
literal|"none"
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Codec not supported."
argument_list|)
throw|;
name|this
operator|.
name|fsdos
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|osBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"none"
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|fsdos
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|fsdos
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|append (BytesWritable key, BytesWritable value)
specifier|public
name|void
name|append
parameter_list|(
name|BytesWritable
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SeqFileReadable
specifier|static
class|class
name|SeqFileReadable
implements|implements
name|KVReadable
block|{
DECL|field|reader
specifier|private
name|SequenceFile
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|field|key
specifier|private
name|BytesWritable
name|key
decl_stmt|;
DECL|field|value
specifier|private
name|BytesWritable
name|value
decl_stmt|;
DECL|method|SeqFileReadable (FileSystem fs, Path path, int osBufferSize)
specifier|public
name|SeqFileReadable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|osBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
name|osBufferSize
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
name|value
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|key
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyLength ()
specifier|public
name|int
name|getKeyLength
parameter_list|()
block|{
return|return
name|key
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValueLength ()
specifier|public
name|int
name|getValueLength
parameter_list|()
block|{
return|return
name|value
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reportStats (Path path, long totalBytes)
specifier|private
name|void
name|reportStats
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|totalBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|duration
init|=
name|getIntervalMillis
argument_list|()
decl_stmt|;
name|long
name|fsize
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|printlnWithTimestamp
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Duration: %dms...total size: %.2fMB...raw thrpt: %.2fMB/s"
argument_list|,
name|duration
argument_list|,
operator|(
name|double
operator|)
name|totalBytes
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
operator|(
name|double
operator|)
name|totalBytes
operator|/
name|duration
operator|*
literal|1000
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|printlnWithTimestamp
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Compressed size: %.2fMB...compressed thrpt: %.2fMB/s."
argument_list|,
operator|(
name|double
operator|)
name|fsize
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
operator|(
name|double
operator|)
name|fsize
operator|/
name|duration
operator|*
literal|1000
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fillBuffer (Random rng, BytesWritable bw, byte[] tmp, int len)
specifier|private
name|void
name|fillBuffer
parameter_list|(
name|Random
name|rng
parameter_list|,
name|BytesWritable
name|bw
parameter_list|,
name|byte
index|[]
name|tmp
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|len
condition|)
block|{
name|byte
index|[]
name|word
init|=
name|dictionary
index|[
name|rng
operator|.
name|nextInt
argument_list|(
name|dictionary
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|l
init|=
name|Math
operator|.
name|min
argument_list|(
name|word
operator|.
name|length
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|word
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
name|n
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|n
operator|+=
name|l
expr_stmt|;
block|}
name|bw
operator|.
name|set
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|timeWrite (Path path, KVAppendable appendable, int baseKlen, int baseVlen, long fileSize)
specifier|private
name|void
name|timeWrite
parameter_list|(
name|Path
name|path
parameter_list|,
name|KVAppendable
name|appendable
parameter_list|,
name|int
name|baseKlen
parameter_list|,
name|int
name|baseVlen
parameter_list|,
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxKlen
init|=
name|baseKlen
operator|*
literal|2
decl_stmt|;
name|int
name|maxVlen
init|=
name|baseVlen
operator|*
literal|2
decl_stmt|;
name|BytesWritable
name|key
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyBuffer
init|=
operator|new
name|byte
index|[
name|maxKlen
index|]
decl_stmt|;
name|byte
index|[]
name|valueBuffer
init|=
operator|new
name|byte
index|[
name|maxVlen
index|]
decl_stmt|;
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|(
name|options
operator|.
name|seed
argument_list|)
decl_stmt|;
name|long
name|totalBytes
init|=
literal|0
decl_stmt|;
name|printlnWithTimestamp
argument_list|(
literal|"Start writing: "
operator|+
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|startTime
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
literal|true
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
comment|// test the size for every 1000 rows.
if|if
condition|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
operator|>=
name|fileSize
condition|)
block|{
break|break;
block|}
block|}
name|int
name|klen
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|baseKlen
argument_list|)
operator|+
name|baseKlen
decl_stmt|;
name|int
name|vlen
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|baseVlen
argument_list|)
operator|+
name|baseVlen
decl_stmt|;
name|fillBuffer
argument_list|(
name|rng
argument_list|,
name|key
argument_list|,
name|keyBuffer
argument_list|,
name|klen
argument_list|)
expr_stmt|;
name|fillBuffer
argument_list|(
name|rng
argument_list|,
name|value
argument_list|,
name|valueBuffer
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|keyBuffer
argument_list|,
literal|0
argument_list|,
name|klen
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|valueBuffer
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
name|appendable
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|klen
expr_stmt|;
name|totalBytes
operator|+=
name|vlen
expr_stmt|;
block|}
name|stopTime
argument_list|()
expr_stmt|;
name|appendable
operator|.
name|close
argument_list|()
expr_stmt|;
name|reportStats
argument_list|(
name|path
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|timeRead (Path path, KVReadable readable)
specifier|private
name|void
name|timeRead
parameter_list|(
name|Path
name|path
parameter_list|,
name|KVReadable
name|readable
parameter_list|)
throws|throws
name|IOException
block|{
name|printlnWithTimestamp
argument_list|(
literal|"Start reading: "
operator|+
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|long
name|totalBytes
init|=
literal|0
decl_stmt|;
name|startTime
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|readable
operator|.
name|next
argument_list|()
condition|;
control|)
block|{
name|totalBytes
operator|+=
name|readable
operator|.
name|getKeyLength
argument_list|()
expr_stmt|;
name|totalBytes
operator|+=
name|readable
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
name|stopTime
argument_list|()
expr_stmt|;
name|readable
operator|.
name|close
argument_list|()
expr_stmt|;
name|reportStats
argument_list|(
name|path
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|createTFile (String parameters, String compress)
specifier|private
name|void
name|createTFile
parameter_list|(
name|String
name|parameters
parameter_list|,
name|String
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=== TFile: Creation ("
operator|+
name|parameters
operator|+
literal|") === "
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|rootDir
argument_list|,
literal|"TFile.Performance"
argument_list|)
decl_stmt|;
name|KVAppendable
name|appendable
init|=
operator|new
name|TFileAppendable
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|compress
argument_list|,
name|options
operator|.
name|minBlockSize
argument_list|,
name|options
operator|.
name|osOutputBufferSize
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|timeWrite
argument_list|(
name|path
argument_list|,
name|appendable
argument_list|,
name|options
operator|.
name|keyLength
argument_list|,
name|options
operator|.
name|valueLength
argument_list|,
name|options
operator|.
name|fileSize
argument_list|)
expr_stmt|;
block|}
DECL|method|readTFile (String parameters, boolean delFile)
specifier|private
name|void
name|readTFile
parameter_list|(
name|String
name|parameters
parameter_list|,
name|boolean
name|delFile
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=== TFile: Reading ("
operator|+
name|parameters
operator|+
literal|") === "
argument_list|)
expr_stmt|;
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|rootDir
argument_list|,
literal|"TFile.Performance"
argument_list|)
decl_stmt|;
name|KVReadable
name|readable
init|=
operator|new
name|TFileReadable
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|options
operator|.
name|osInputBufferSize
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|timeRead
argument_list|(
name|path
argument_list|,
name|readable
argument_list|)
expr_stmt|;
if|if
condition|(
name|delFile
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createSeqFile (String parameters, String compress)
specifier|private
name|void
name|createSeqFile
parameter_list|(
name|String
name|parameters
parameter_list|,
name|String
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=== SeqFile: Creation ("
operator|+
name|parameters
operator|+
literal|") === "
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|rootDir
argument_list|,
literal|"SeqFile.Performance"
argument_list|)
decl_stmt|;
name|KVAppendable
name|appendable
init|=
operator|new
name|SeqFileAppendable
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|options
operator|.
name|osOutputBufferSize
argument_list|,
name|compress
argument_list|,
name|options
operator|.
name|minBlockSize
argument_list|)
decl_stmt|;
name|timeWrite
argument_list|(
name|path
argument_list|,
name|appendable
argument_list|,
name|options
operator|.
name|keyLength
argument_list|,
name|options
operator|.
name|valueLength
argument_list|,
name|options
operator|.
name|fileSize
argument_list|)
expr_stmt|;
block|}
DECL|method|readSeqFile (String parameters, boolean delFile)
specifier|private
name|void
name|readSeqFile
parameter_list|(
name|String
name|parameters
parameter_list|,
name|boolean
name|delFile
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=== SeqFile: Reading ("
operator|+
name|parameters
operator|+
literal|") === "
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|rootDir
argument_list|,
literal|"SeqFile.Performance"
argument_list|)
decl_stmt|;
name|KVReadable
name|readable
init|=
operator|new
name|SeqFileReadable
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|options
operator|.
name|osInputBufferSize
argument_list|)
decl_stmt|;
name|timeRead
argument_list|(
name|path
argument_list|,
name|readable
argument_list|)
expr_stmt|;
if|if
condition|(
name|delFile
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|compareRun (String compress)
specifier|private
name|void
name|compareRun
parameter_list|(
name|String
name|compress
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|supported
init|=
name|TFile
operator|.
name|getSupportedCompressionAlgorithms
argument_list|()
decl_stmt|;
name|boolean
name|proceed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|supported
control|)
block|{
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|proceed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|proceed
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipped for "
operator|+
name|compress
argument_list|)
expr_stmt|;
return|return;
block|}
name|options
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
name|String
name|parameters
init|=
name|parameters2String
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|createSeqFile
argument_list|(
name|parameters
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|readSeqFile
argument_list|(
name|parameters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTFile
argument_list|(
name|parameters
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|readTFile
argument_list|(
name|parameters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTFile
argument_list|(
name|parameters
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|readTFile
argument_list|(
name|parameters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createSeqFile
argument_list|(
name|parameters
argument_list|,
name|compress
argument_list|)
expr_stmt|;
name|readSeqFile
argument_list|(
name|parameters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRunComparisons ()
specifier|public
name|void
name|testRunComparisons
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|compresses
init|=
operator|new
name|String
index|[]
block|{
literal|"none"
block|,
literal|"lzo"
block|,
literal|"gz"
block|}
decl_stmt|;
for|for
control|(
name|String
name|compress
range|:
name|compresses
control|)
block|{
if|if
condition|(
name|compress
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.input.buffer.size"
argument_list|,
name|options
operator|.
name|fsInputBufferSizeNone
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.output.buffer.size"
argument_list|,
name|options
operator|.
name|fsOutputBufferSizeNone
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compress
operator|.
name|equals
argument_list|(
literal|"lzo"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.input.buffer.size"
argument_list|,
name|options
operator|.
name|fsInputBufferSizeLzo
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.output.buffer.size"
argument_list|,
name|options
operator|.
name|fsOutputBufferSizeLzo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.input.buffer.size"
argument_list|,
name|options
operator|.
name|fsInputBufferSizeGz
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"tfile.fs.output.buffer.size"
argument_list|,
name|options
operator|.
name|fsOutputBufferSizeGz
argument_list|)
expr_stmt|;
block|}
name|compareRun
argument_list|(
name|compress
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parameters2String (MyOptions options)
specifier|private
specifier|static
name|String
name|parameters2String
parameter_list|(
name|MyOptions
name|options
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"KLEN: %d-%d... VLEN: %d-%d...MinBlkSize: %.2fKB...Target Size: %.2fMB...Compression: ...%s"
argument_list|,
name|options
operator|.
name|keyLength
argument_list|,
name|options
operator|.
name|keyLength
operator|*
literal|2
argument_list|,
name|options
operator|.
name|valueLength
argument_list|,
name|options
operator|.
name|valueLength
operator|*
literal|2
argument_list|,
operator|(
name|double
operator|)
name|options
operator|.
name|minBlockSize
operator|/
literal|1024
argument_list|,
operator|(
name|double
operator|)
name|options
operator|.
name|fileSize
operator|/
literal|1024
operator|/
literal|1024
argument_list|,
name|options
operator|.
name|compress
argument_list|)
return|;
block|}
DECL|class|MyOptions
specifier|private
specifier|static
class|class
name|MyOptions
block|{
DECL|field|rootDir
name|String
name|rootDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/tfile-test"
argument_list|)
decl_stmt|;
DECL|field|compress
name|String
name|compress
init|=
literal|"gz"
decl_stmt|;
DECL|field|format
name|String
name|format
init|=
literal|"tfile"
decl_stmt|;
DECL|field|dictSize
name|int
name|dictSize
init|=
literal|1000
decl_stmt|;
DECL|field|minWordLen
name|int
name|minWordLen
init|=
literal|5
decl_stmt|;
DECL|field|maxWordLen
name|int
name|maxWordLen
init|=
literal|20
decl_stmt|;
DECL|field|keyLength
name|int
name|keyLength
init|=
literal|50
decl_stmt|;
DECL|field|valueLength
name|int
name|valueLength
init|=
literal|100
decl_stmt|;
DECL|field|minBlockSize
name|int
name|minBlockSize
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
DECL|field|fsOutputBufferSize
name|int
name|fsOutputBufferSize
init|=
literal|1
decl_stmt|;
DECL|field|fsInputBufferSize
name|int
name|fsInputBufferSize
init|=
literal|0
decl_stmt|;
comment|// special variable only for unit testing.
DECL|field|fsInputBufferSizeNone
name|int
name|fsInputBufferSizeNone
init|=
literal|0
decl_stmt|;
DECL|field|fsInputBufferSizeGz
name|int
name|fsInputBufferSizeGz
init|=
literal|0
decl_stmt|;
DECL|field|fsInputBufferSizeLzo
name|int
name|fsInputBufferSizeLzo
init|=
literal|0
decl_stmt|;
DECL|field|fsOutputBufferSizeNone
name|int
name|fsOutputBufferSizeNone
init|=
literal|1
decl_stmt|;
DECL|field|fsOutputBufferSizeGz
name|int
name|fsOutputBufferSizeGz
init|=
literal|1
decl_stmt|;
DECL|field|fsOutputBufferSizeLzo
name|int
name|fsOutputBufferSizeLzo
init|=
literal|1
decl_stmt|;
comment|// un-exposed parameters.
DECL|field|osInputBufferSize
name|int
name|osInputBufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|osOutputBufferSize
name|int
name|osOutputBufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|fileSize
name|long
name|fileSize
init|=
literal|3
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|seed
name|long
name|seed
decl_stmt|;
DECL|field|OP_CREATE
specifier|static
specifier|final
name|int
name|OP_CREATE
init|=
literal|1
decl_stmt|;
DECL|field|OP_READ
specifier|static
specifier|final
name|int
name|OP_READ
init|=
literal|2
decl_stmt|;
DECL|field|op
name|int
name|op
init|=
name|OP_READ
decl_stmt|;
DECL|field|proceed
name|boolean
name|proceed
init|=
literal|false
decl_stmt|;
DECL|method|MyOptions (String[] args)
specifier|public
name|MyOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|seed
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
try|try
block|{
name|Options
name|opts
init|=
name|buildOptions
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|processOptions
argument_list|(
name|line
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|validateOptions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try \"--help\" option for details."
argument_list|)
expr_stmt|;
name|setStopProceed
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|proceed ()
specifier|public
name|boolean
name|proceed
parameter_list|()
block|{
return|return
name|proceed
return|;
block|}
DECL|method|buildOptions ()
specifier|private
name|Options
name|buildOptions
parameter_list|()
block|{
name|Option
name|compress
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"compress"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"[none|lzo|gz]"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"compression scheme"
argument_list|)
operator|.
name|create
argument_list|(
literal|'c'
argument_list|)
decl_stmt|;
name|Option
name|ditSize
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"dict"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"number of dictionary entries"
argument_list|)
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
decl_stmt|;
name|Option
name|fileSize
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"file-size"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size-in-MB"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"target size of the file (in MB)."
argument_list|)
operator|.
name|create
argument_list|(
literal|'s'
argument_list|)
decl_stmt|;
name|Option
name|format
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"format"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"[tfile|seqfile]"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"choose TFile or SeqFile"
argument_list|)
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
decl_stmt|;
name|Option
name|fsInputBufferSz
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"fs-input-buffer"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"size of the file system input buffer (in bytes)."
argument_list|)
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
decl_stmt|;
name|Option
name|fsOutputBufferSize
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"fs-output-buffer"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"size of the file system output buffer (in bytes)."
argument_list|)
operator|.
name|create
argument_list|(
literal|'o'
argument_list|)
decl_stmt|;
name|Option
name|keyLen
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"key-length"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"length"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"base length of the key (in bytes), actual length varies in [base, 2*base)"
argument_list|)
operator|.
name|create
argument_list|(
literal|'k'
argument_list|)
decl_stmt|;
name|Option
name|valueLen
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"value-length"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"length"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"base length of the value (in bytes), actual length varies in [base, 2*base)"
argument_list|)
operator|.
name|create
argument_list|(
literal|'v'
argument_list|)
decl_stmt|;
name|Option
name|wordLen
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"word-length"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"min,max"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"range of dictionary word length (in bytes)"
argument_list|)
operator|.
name|create
argument_list|(
literal|'w'
argument_list|)
decl_stmt|;
name|Option
name|blockSz
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"block"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size-in-KB"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"minimum block size (in KB)"
argument_list|)
operator|.
name|create
argument_list|(
literal|'b'
argument_list|)
decl_stmt|;
name|Option
name|seed
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"seed"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"long-int"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"specify the seed"
argument_list|)
operator|.
name|create
argument_list|(
literal|'S'
argument_list|)
decl_stmt|;
name|Option
name|operation
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"operation"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"r|w|rw"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"action: read-only, create-only, read-after-create"
argument_list|)
operator|.
name|create
argument_list|(
literal|'x'
argument_list|)
decl_stmt|;
name|Option
name|rootDir
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"root-dir"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"path"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"specify root directory where files will be created."
argument_list|)
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
decl_stmt|;
name|Option
name|help
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"show this screen"
argument_list|)
operator|.
name|create
argument_list|(
literal|"h"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Options
argument_list|()
operator|.
name|addOption
argument_list|(
name|compress
argument_list|)
operator|.
name|addOption
argument_list|(
name|ditSize
argument_list|)
operator|.
name|addOption
argument_list|(
name|fileSize
argument_list|)
operator|.
name|addOption
argument_list|(
name|format
argument_list|)
operator|.
name|addOption
argument_list|(
name|fsInputBufferSz
argument_list|)
operator|.
name|addOption
argument_list|(
name|fsOutputBufferSize
argument_list|)
operator|.
name|addOption
argument_list|(
name|keyLen
argument_list|)
operator|.
name|addOption
argument_list|(
name|wordLen
argument_list|)
operator|.
name|addOption
argument_list|(
name|blockSz
argument_list|)
operator|.
name|addOption
argument_list|(
name|rootDir
argument_list|)
operator|.
name|addOption
argument_list|(
name|valueLen
argument_list|)
operator|.
name|addOption
argument_list|(
name|operation
argument_list|)
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
return|;
block|}
DECL|method|processOptions (CommandLine line, Options opts)
specifier|private
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|Options
name|opts
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// --help -h and --version -V must be processed first.
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TFile and SeqFile benchmark."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|100
argument_list|,
literal|"java ... TestTFileSeqFileComparison [options]"
argument_list|,
literal|"\nSupported options:"
argument_list|,
name|opts
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'c'
argument_list|)
condition|)
block|{
name|compress
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'c'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'d'
argument_list|)
condition|)
block|{
name|dictSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'s'
argument_list|)
condition|)
block|{
name|fileSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'s'
argument_list|)
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'f'
argument_list|)
condition|)
block|{
name|format
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'i'
argument_list|)
condition|)
block|{
name|fsInputBufferSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'i'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'o'
argument_list|)
condition|)
block|{
name|fsOutputBufferSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'k'
argument_list|)
condition|)
block|{
name|keyLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'k'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'v'
argument_list|)
condition|)
block|{
name|valueLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'v'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'b'
argument_list|)
condition|)
block|{
name|minBlockSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'b'
argument_list|)
argument_list|)
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'r'
argument_list|)
condition|)
block|{
name|rootDir
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'S'
argument_list|)
condition|)
block|{
name|seed
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'S'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'w'
argument_list|)
condition|)
block|{
name|String
name|min_max
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'w'
argument_list|)
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|min_max
argument_list|,
literal|" \t,"
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Bad word length specification: "
operator|+
name|min_max
argument_list|)
throw|;
block|}
name|minWordLen
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
name|maxWordLen
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|'x'
argument_list|)
condition|)
block|{
name|String
name|strOp
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|'x'
argument_list|)
decl_stmt|;
if|if
condition|(
name|strOp
operator|.
name|equals
argument_list|(
literal|"r"
argument_list|)
condition|)
block|{
name|op
operator|=
name|OP_READ
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strOp
operator|.
name|equals
argument_list|(
literal|"w"
argument_list|)
condition|)
block|{
name|op
operator|=
name|OP_CREATE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strOp
operator|.
name|equals
argument_list|(
literal|"rw"
argument_list|)
condition|)
block|{
name|op
operator|=
name|OP_CREATE
operator||
name|OP_READ
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unknown action specifier: "
operator|+
name|strOp
argument_list|)
throw|;
block|}
block|}
name|proceed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|validateOptions ()
specifier|private
name|void
name|validateOptions
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|compress
operator|.
name|equals
argument_list|(
literal|"none"
argument_list|)
operator|&&
operator|!
name|compress
operator|.
name|equals
argument_list|(
literal|"lzo"
argument_list|)
operator|&&
operator|!
name|compress
operator|.
name|equals
argument_list|(
literal|"gz"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unknown compression scheme: "
operator|+
name|compress
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|format
operator|.
name|equals
argument_list|(
literal|"tfile"
argument_list|)
operator|&&
operator|!
name|format
operator|.
name|equals
argument_list|(
literal|"seqfile"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unknown file format: "
operator|+
name|format
argument_list|)
throw|;
block|}
if|if
condition|(
name|minWordLen
operator|>=
name|maxWordLen
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Max word length must be greater than min word length."
argument_list|)
throw|;
block|}
return|return;
block|}
DECL|method|setStopProceed ()
specifier|private
name|void
name|setStopProceed
parameter_list|()
block|{
name|proceed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|doCreate ()
specifier|public
name|boolean
name|doCreate
parameter_list|()
block|{
return|return
operator|(
name|op
operator|&
name|OP_CREATE
operator|)
operator|!=
literal|0
return|;
block|}
DECL|method|doRead ()
specifier|public
name|boolean
name|doRead
parameter_list|()
block|{
return|return
operator|(
name|op
operator|&
name|OP_READ
operator|)
operator|!=
literal|0
return|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|TestTFileSeqFileComparison
name|testCase
init|=
operator|new
name|TestTFileSeqFileComparison
argument_list|()
decl_stmt|;
name|MyOptions
name|options
init|=
operator|new
name|MyOptions
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|proceed
operator|==
literal|false
condition|)
block|{
return|return;
block|}
name|testCase
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|String
name|parameters
init|=
name|parameters2String
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|testCase
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|testCase
operator|.
name|options
operator|.
name|format
operator|.
name|equals
argument_list|(
literal|"tfile"
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|doCreate
argument_list|()
condition|)
block|{
name|testCase
operator|.
name|createTFile
argument_list|(
name|parameters
argument_list|,
name|options
operator|.
name|compress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|doRead
argument_list|()
condition|)
block|{
name|testCase
operator|.
name|readTFile
argument_list|(
name|parameters
argument_list|,
name|options
operator|.
name|doCreate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|doCreate
argument_list|()
condition|)
block|{
name|testCase
operator|.
name|createSeqFile
argument_list|(
name|parameters
argument_list|,
name|options
operator|.
name|compress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|doRead
argument_list|()
condition|)
block|{
name|testCase
operator|.
name|readSeqFile
argument_list|(
name|parameters
argument_list|,
name|options
operator|.
name|doCreate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|testCase
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

