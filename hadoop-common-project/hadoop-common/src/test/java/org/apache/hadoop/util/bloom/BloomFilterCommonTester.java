begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util.bloom
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|bloom
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|hash
operator|.
name|Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|BloomFilterCommonTester
specifier|public
class|class
name|BloomFilterCommonTester
parameter_list|<
name|T
extends|extends
name|Filter
parameter_list|>
block|{
DECL|field|LN2
specifier|private
specifier|static
specifier|final
name|double
name|LN2
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|LN2_SQUARED
specifier|private
specifier|static
specifier|final
name|double
name|LN2_SQUARED
init|=
name|LN2
operator|*
name|LN2
decl_stmt|;
DECL|field|hashType
specifier|private
specifier|final
name|int
name|hashType
decl_stmt|;
DECL|field|numInsertions
specifier|private
specifier|final
name|int
name|numInsertions
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|T
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|field|filterTestStrateges
specifier|private
name|ImmutableSet
argument_list|<
name|BloomFilterTestStrategy
argument_list|>
name|filterTestStrateges
decl_stmt|;
DECL|field|preAssertionHelper
specifier|private
specifier|final
name|PreAssertionHelper
name|preAssertionHelper
decl_stmt|;
DECL|method|optimalNumOfBits (int n, double p)
specifier|static
name|int
name|optimalNumOfBits
parameter_list|(
name|int
name|n
parameter_list|,
name|double
name|p
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|-
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|p
argument_list|)
operator|/
name|LN2_SQUARED
argument_list|)
return|;
block|}
DECL|method|of (int hashId, int numInsertions)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Filter
parameter_list|>
name|BloomFilterCommonTester
argument_list|<
name|T
argument_list|>
name|of
parameter_list|(
name|int
name|hashId
parameter_list|,
name|int
name|numInsertions
parameter_list|)
block|{
return|return
operator|new
name|BloomFilterCommonTester
argument_list|<
name|T
argument_list|>
argument_list|(
name|hashId
argument_list|,
name|numInsertions
argument_list|)
return|;
block|}
DECL|method|withFilterInstance (T filter)
specifier|public
name|BloomFilterCommonTester
argument_list|<
name|T
argument_list|>
name|withFilterInstance
parameter_list|(
name|T
name|filter
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|BloomFilterCommonTester (int hashId, int numInsertions)
specifier|private
name|BloomFilterCommonTester
parameter_list|(
name|int
name|hashId
parameter_list|,
name|int
name|numInsertions
parameter_list|)
block|{
name|this
operator|.
name|hashType
operator|=
name|hashId
expr_stmt|;
name|this
operator|.
name|numInsertions
operator|=
name|numInsertions
expr_stmt|;
name|this
operator|.
name|preAssertionHelper
operator|=
operator|new
name|PreAssertionHelper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|(
name|int
name|hashId
parameter_list|)
block|{
switch|switch
condition|(
name|hashId
condition|)
block|{
case|case
name|Hash
operator|.
name|JENKINS_HASH
case|:
block|{
comment|// // false pos for odd and event under 1000
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|99
argument_list|,
literal|963
argument_list|)
return|;
block|}
case|case
name|Hash
operator|.
name|MURMUR_HASH
case|:
block|{
comment|// false pos for odd and event under 1000
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|769
argument_list|,
literal|772
argument_list|,
literal|810
argument_list|,
literal|874
argument_list|)
return|;
block|}
default|default:
block|{
comment|// fail fast with unknown hash error !!!
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"unknown hash error"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ImmutableSet
operator|.
name|of
argument_list|()
return|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
DECL|method|withTestCases ( ImmutableSet<BloomFilterTestStrategy> filterTestStrateges)
specifier|public
name|BloomFilterCommonTester
argument_list|<
name|T
argument_list|>
name|withTestCases
parameter_list|(
name|ImmutableSet
argument_list|<
name|BloomFilterTestStrategy
argument_list|>
name|filterTestStrateges
parameter_list|)
block|{
name|this
operator|.
name|filterTestStrateges
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|filterTestStrateges
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
specifier|final
name|ImmutableList
argument_list|<
name|T
argument_list|>
name|filtersList
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
init|=
name|preAssertionHelper
operator|.
name|falsePositives
argument_list|(
name|hashType
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|filter
range|:
name|filtersList
control|)
block|{
for|for
control|(
name|BloomFilterTestStrategy
name|strategy
range|:
name|filterTestStrateges
control|)
block|{
name|strategy
operator|.
name|getStrategy
argument_list|()
operator|.
name|assertWhat
argument_list|(
name|filter
argument_list|,
name|numInsertions
argument_list|,
name|hashType
argument_list|,
name|falsePositives
argument_list|)
expr_stmt|;
comment|// create fresh instance for next test iteration
name|filter
operator|=
operator|(
name|T
operator|)
name|getSymmetricFilter
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
name|hashType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|interface|FilterTesterStrategy
interface|interface
name|FilterTesterStrategy
block|{
DECL|field|logger
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FilterTesterStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|assertWhat (Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives)
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
function_decl|;
block|}
DECL|method|getSymmetricFilter (Class<?> filterClass, int numInsertions, int hashType)
specifier|private
specifier|static
name|Filter
name|getSymmetricFilter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|filterClass
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashType
parameter_list|)
block|{
name|int
name|bitSetSize
init|=
name|optimalNumOfBits
argument_list|(
name|numInsertions
argument_list|,
literal|0.03
argument_list|)
decl_stmt|;
name|int
name|hashFunctionNumber
init|=
literal|5
decl_stmt|;
if|if
condition|(
name|filterClass
operator|==
name|BloomFilter
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|BloomFilter
argument_list|(
name|bitSetSize
argument_list|,
name|hashFunctionNumber
argument_list|,
name|hashType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|filterClass
operator|==
name|CountingBloomFilter
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|CountingBloomFilter
argument_list|(
name|bitSetSize
argument_list|,
name|hashFunctionNumber
argument_list|,
name|hashType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|filterClass
operator|==
name|RetouchedBloomFilter
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|RetouchedBloomFilter
argument_list|(
name|bitSetSize
argument_list|,
name|hashFunctionNumber
argument_list|,
name|hashType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|filterClass
operator|==
name|DynamicBloomFilter
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|DynamicBloomFilter
argument_list|(
name|bitSetSize
argument_list|,
name|hashFunctionNumber
argument_list|,
name|hashType
argument_list|,
literal|3
argument_list|)
return|;
block|}
else|else
block|{
comment|//fail fast
name|assertFalse
argument_list|(
literal|"unexpected filterClass"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|enum|BloomFilterTestStrategy
specifier|public
enum|enum
name|BloomFilterTestStrategy
block|{
DECL|enumConstant|ADD_KEYS_STRATEGY
name|ADD_KEYS_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|Key
argument_list|>
name|keys
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|49
block|,
literal|48
block|,
literal|48
block|}
argument_list|)
argument_list|,
operator|new
name|Key
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|50
block|,
literal|48
block|,
literal|48
block|}
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|filter
operator|.
name|add
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"200"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|Key
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"200"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|AbstractCollection
argument_list|<
name|Key
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Key
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|keys
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|keys
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"100"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" might contain key error "
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
literal|"200"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|KEY_TEST_STRATEGY
name|KEY_TEST_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
specifier|private
name|void
name|checkOnKeyMethods
parameter_list|()
block|{
name|String
name|line
init|=
literal|"werabsdbe"
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"default key weight error "
argument_list|,
name|key
operator|.
name|getWeight
argument_list|()
operator|==
literal|1d
argument_list|)
expr_stmt|;
name|key
operator|.
name|set
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" setted key weight error "
argument_list|,
name|key
operator|.
name|getWeight
argument_list|()
operator|==
literal|2d
argument_list|)
expr_stmt|;
name|Key
name|sKey
init|=
operator|new
name|Key
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2d
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"equals error"
argument_list|,
name|key
operator|.
name|equals
argument_list|(
name|sKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hashcode error"
argument_list|,
name|key
operator|.
name|hashCode
argument_list|()
operator|==
name|sKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|sKey
operator|=
operator|new
name|Key
argument_list|(
name|line
operator|.
name|concat
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"equals error"
argument_list|,
name|key
operator|.
name|equals
argument_list|(
name|sKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"hashcode error"
argument_list|,
name|key
operator|.
name|hashCode
argument_list|()
operator|==
name|sKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|sKey
operator|=
operator|new
name|Key
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|3d
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"equals error"
argument_list|,
name|key
operator|.
name|equals
argument_list|(
name|sKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"hashcode error"
argument_list|,
name|key
operator|.
name|hashCode
argument_list|()
operator|==
name|sKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|incrementWeight
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"weight error"
argument_list|,
name|key
operator|.
name|getWeight
argument_list|()
operator|==
literal|3d
argument_list|)
expr_stmt|;
name|key
operator|.
name|incrementWeight
argument_list|(
literal|2d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"weight error"
argument_list|,
name|key
operator|.
name|getWeight
argument_list|()
operator|==
literal|5d
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkOnReadWrite
parameter_list|()
block|{
name|String
name|line
init|=
literal|"qryqeb354645rghdfvbaq23312fg"
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|Key
name|originKey
init|=
operator|new
name|Key
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|100d
argument_list|)
decl_stmt|;
try|try
block|{
name|originKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Key
name|restoredKey
init|=
operator|new
name|Key
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"checkOnReadWrite equals error"
argument_list|,
name|restoredKey
operator|.
name|equals
argument_list|(
name|originKey
argument_list|)
argument_list|)
expr_stmt|;
name|restoredKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checkOnReadWrite equals error"
argument_list|,
name|restoredKey
operator|.
name|equals
argument_list|(
name|originKey
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"checkOnReadWrite ex error"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkSetOnIAE
parameter_list|()
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|()
decl_stmt|;
try|try
block|{
name|key
operator|.
name|set
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"checkSetOnIAE ex error"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|checkOnKeyMethods
argument_list|()
expr_stmt|;
name|checkOnReadWrite
argument_list|()
expr_stmt|;
name|checkSetOnIAE
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|EXCEPTIONS_CHECK_STRATEGY
name|EXCEPTIONS_CHECK_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|checkAddOnNPE
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|checkTestMembershipOnNPE
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|checkAndOnIAE
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAndOnIAE
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|Filter
name|tfilter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|Key
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Key
index|[]
name|keys
init|=
literal|null
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ImmutableList
argument_list|<
name|Key
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|filter
operator|.
name|and
argument_list|(
name|tfilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|filter
operator|.
name|or
argument_list|(
name|tfilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|filter
operator|.
name|xor
argument_list|(
name|tfilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|unex
parameter_list|)
block|{
comment|//
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkTestMembershipOnNPE
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
try|try
block|{
name|Key
name|nullKey
init|=
literal|null
decl_stmt|;
name|filter
operator|.
name|membershipTest
argument_list|(
name|nullKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkAddOnNPE
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
try|try
block|{
name|Key
name|nullKey
init|=
literal|null
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|nullKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|ODD_EVEN_ABSENT_STRATEGY
name|ODD_EVEN_ABSENT_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
comment|// add all even keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check on present even key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|" filter might contains "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check on absent odd in event
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
operator|!
name|falsePositives
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|" filter should not contain "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|WRITE_READ_STRATEGY
name|WRITE_READ_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
specifier|private
name|int
name|slotSize
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|Filter
name|tempFilter
init|=
name|getSymmetricFilter
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
name|hashId
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|>
name|blist
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slotSize
condition|;
name|i
operator|++
control|)
block|{
name|blist
operator|.
name|add
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|numInsertions
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ImmutableList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
name|blist
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// mark bits for later check
for|for
control|(
name|Integer
name|slot
range|:
name|list
control|)
block|{
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|slot
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|tempFilter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|slot
range|:
name|list
control|)
block|{
name|assertTrue
argument_list|(
literal|"read/write mask check filter error on "
operator|+
name|slot
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|slot
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"error ex !!!"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|FILTER_XOR_STRATEGY
name|FILTER_XOR_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|Filter
name|symmetricFilter
init|=
name|getSymmetricFilter
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
name|hashId
argument_list|)
decl_stmt|;
try|try
block|{
comment|// 0 xor 0 -> 0
name|filter
operator|.
name|xor
argument_list|(
name|symmetricFilter
argument_list|)
expr_stmt|;
comment|// check on present all key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|" filter might contains "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add all even keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add all odd keys
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|symmetricFilter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filter
operator|.
name|xor
argument_list|(
name|symmetricFilter
argument_list|)
expr_stmt|;
comment|// 1 xor 1 -> 0
comment|// check on absent all key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|" filter might not contains "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|// not all Filter's implements this method
return|return;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|FILTER_AND_STRATEGY
name|FILTER_AND_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|int
name|startIntersection
init|=
name|numInsertions
operator|-
operator|(
name|numInsertions
operator|-
literal|100
operator|)
decl_stmt|;
name|int
name|endIntersection
init|=
name|numInsertions
operator|-
literal|100
decl_stmt|;
name|Filter
name|partialFilter
init|=
name|getSymmetricFilter
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
name|hashId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
name|String
name|digit
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|digit
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|startIntersection
operator|&&
name|i
operator|<=
name|endIntersection
condition|)
block|{
name|partialFilter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|digit
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do logic AND
name|filter
operator|.
name|and
argument_list|(
name|partialFilter
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|startIntersection
operator|&&
name|i
operator|<=
name|endIntersection
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|" filter might contains "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|FILTER_OR_STRATEGY
name|FILTER_OR_STRATEGY
argument_list|(
operator|new
name|FilterTesterStrategy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|assertWhat
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|numInsertions
parameter_list|,
name|int
name|hashId
parameter_list|,
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|)
block|{
name|Filter
name|evenFilter
init|=
name|getSymmetricFilter
argument_list|(
name|filter
operator|.
name|getClass
argument_list|()
argument_list|,
name|numInsertions
argument_list|,
name|hashId
argument_list|)
decl_stmt|;
comment|// add all even
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|evenFilter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add all odd
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// union odd with even
name|filter
operator|.
name|or
argument_list|(
name|evenFilter
argument_list|)
expr_stmt|;
comment|// check on present all key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInsertions
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|" filter might contains "
operator|+
name|i
argument_list|,
name|filter
operator|.
name|membershipTest
argument_list|(
operator|new
name|Key
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|;
DECL|field|testerStrategy
specifier|private
specifier|final
name|FilterTesterStrategy
name|testerStrategy
decl_stmt|;
DECL|method|BloomFilterTestStrategy (FilterTesterStrategy testerStrategy)
name|BloomFilterTestStrategy
parameter_list|(
name|FilterTesterStrategy
name|testerStrategy
parameter_list|)
block|{
name|this
operator|.
name|testerStrategy
operator|=
name|testerStrategy
expr_stmt|;
block|}
DECL|method|getStrategy ()
specifier|public
name|FilterTesterStrategy
name|getStrategy
parameter_list|()
block|{
return|return
name|testerStrategy
return|;
block|}
block|}
DECL|interface|PreAssertionHelper
interface|interface
name|PreAssertionHelper
block|{
DECL|method|falsePositives (int hashId)
specifier|public
name|ImmutableSet
argument_list|<
name|Integer
argument_list|>
name|falsePositives
parameter_list|(
name|int
name|hashId
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

