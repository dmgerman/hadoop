begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|TestFileStatus
specifier|public
class|class
name|TestFileStatus
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testFileStatusWritable ()
specifier|public
name|void
name|testFileStatusWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|tests
init|=
block|{
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
block|,
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing FileStatuses to a ByteArrayOutputStream"
argument_list|)
expr_stmt|;
comment|// Writing input list to ByteArrayOutputStream
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|tests
control|)
block|{
name|fs
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating ByteArrayInputStream object"
argument_list|)
expr_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing if read objects are equal to written ones"
argument_list|)
expr_stmt|;
name|FileStatus
name|dest
init|=
operator|new
name|FileStatus
argument_list|()
decl_stmt|;
name|int
name|iterator
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|tests
control|)
block|{
name|dest
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different FileStatuses in iteration "
operator|+
name|iterator
argument_list|,
name|dest
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|iterator
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

