begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.log
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|WriterAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|HierarchyEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggerRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|ThrowableInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|MappingJsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ContainerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
DECL|class|TestLog4Json
specifier|public
class|class
name|TestLog4Json
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLog4Json
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|factory
specifier|private
specifier|static
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|MappingJsonFactory
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testConstruction ()
specifier|public
name|void
name|testConstruction
parameter_list|()
throws|throws
name|Throwable
block|{
name|Log4Json
name|l4j
init|=
operator|new
name|Log4Json
argument_list|()
decl_stmt|;
name|String
name|outcome
init|=
name|l4j
operator|.
name|toJson
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
literal|"DEBUG"
argument_list|,
literal|"thread1"
argument_list|,
literal|"hello, world"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|println
argument_list|(
literal|"testConstruction"
argument_list|,
name|outcome
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testException ()
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Throwable
block|{
name|Exception
name|e
init|=
operator|new
name|NoRouteToHostException
argument_list|(
literal|"that box caught fire 3 years ago"
argument_list|)
decl_stmt|;
name|ThrowableInformation
name|ti
init|=
operator|new
name|ThrowableInformation
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|Log4Json
name|l4j
init|=
operator|new
name|Log4Json
argument_list|()
decl_stmt|;
name|long
name|timeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|outcome
init|=
name|l4j
operator|.
name|toJson
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|,
literal|"testException"
argument_list|,
name|timeStamp
argument_list|,
literal|"INFO"
argument_list|,
literal|"quoted\""
argument_list|,
literal|"new line\n and {}"
argument_list|,
name|ti
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|println
argument_list|(
literal|"testException"
argument_list|,
name|outcome
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedException ()
specifier|public
name|void
name|testNestedException
parameter_list|()
throws|throws
name|Throwable
block|{
name|Exception
name|e
init|=
operator|new
name|NoRouteToHostException
argument_list|(
literal|"that box caught fire 3 years ago"
argument_list|)
decl_stmt|;
name|Exception
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Datacenter problems"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ThrowableInformation
name|ti
init|=
operator|new
name|ThrowableInformation
argument_list|(
name|ioe
argument_list|)
decl_stmt|;
name|Log4Json
name|l4j
init|=
operator|new
name|Log4Json
argument_list|()
decl_stmt|;
name|long
name|timeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|outcome
init|=
name|l4j
operator|.
name|toJson
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|,
literal|"testNestedException"
argument_list|,
name|timeStamp
argument_list|,
literal|"INFO"
argument_list|,
literal|"quoted\""
argument_list|,
literal|"new line\n and {}"
argument_list|,
name|ti
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|println
argument_list|(
literal|"testNestedException"
argument_list|,
name|outcome
argument_list|)
expr_stmt|;
name|ContainerNode
name|rootNode
init|=
name|Log4Json
operator|.
name|parse
argument_list|(
name|outcome
argument_list|)
decl_stmt|;
name|assertEntryEquals
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|LEVEL
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|assertEntryEquals
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|NAME
argument_list|,
literal|"testNestedException"
argument_list|)
expr_stmt|;
name|assertEntryEquals
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|TIME
argument_list|,
name|timeStamp
argument_list|)
expr_stmt|;
name|assertEntryEquals
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|EXCEPTION_CLASS
argument_list|,
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|JsonNode
name|node
init|=
name|assertNodeContains
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|STACK
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not an array: "
operator|+
name|node
argument_list|,
name|node
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|assertNodeContains
argument_list|(
name|rootNode
argument_list|,
name|Log4Json
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not a string: "
operator|+
name|node
argument_list|,
name|node
operator|.
name|isTextual
argument_list|()
argument_list|)
expr_stmt|;
comment|//rather than try and make assertions about the format of the text
comment|//message equalling another ISO date, this test asserts that the hypen
comment|//and colon characters are in the string.
name|String
name|dateText
init|=
name|node
operator|.
name|getTextValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No '-' in "
operator|+
name|dateText
argument_list|,
name|dateText
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No '-' in "
operator|+
name|dateText
argument_list|,
name|dateText
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a log instance and and log to it    * @throws Throwable if it all goes wrong    */
annotation|@
name|Test
DECL|method|testLog ()
specifier|public
name|void
name|testLog
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
literal|"test message"
decl_stmt|;
name|Throwable
name|throwable
init|=
literal|null
decl_stmt|;
name|String
name|json
init|=
name|logOut
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
decl_stmt|;
name|println
argument_list|(
literal|"testLog"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a log instance and and log to it    * @throws Throwable if it all goes wrong    */
annotation|@
name|Test
DECL|method|testLogExceptions ()
specifier|public
name|void
name|testLogExceptions
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|message
init|=
literal|"test message"
decl_stmt|;
name|Throwable
name|inner
init|=
operator|new
name|IOException
argument_list|(
literal|"Directory / not found"
argument_list|)
decl_stmt|;
name|Throwable
name|throwable
init|=
operator|new
name|IOException
argument_list|(
literal|"startup failure"
argument_list|,
name|inner
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|logOut
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
decl_stmt|;
name|println
argument_list|(
literal|"testLogExceptions"
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEntryEquals (ContainerNode rootNode, String key, String value)
name|void
name|assertEntryEquals
parameter_list|(
name|ContainerNode
name|rootNode
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|JsonNode
name|node
init|=
name|assertNodeContains
argument_list|(
name|rootNode
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|node
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodeContains (ContainerNode rootNode, String key)
specifier|private
name|JsonNode
name|assertNodeContains
parameter_list|(
name|ContainerNode
name|rootNode
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|JsonNode
name|node
init|=
name|rootNode
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"No entry of name \""
operator|+
name|key
operator|+
literal|"\" found in "
operator|+
name|rootNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
DECL|method|assertEntryEquals (ContainerNode rootNode, String key, long value)
name|void
name|assertEntryEquals
parameter_list|(
name|ContainerNode
name|rootNode
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|JsonNode
name|node
init|=
name|assertNodeContains
argument_list|(
name|rootNode
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|node
operator|.
name|getNumberValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print out what's going on. The logging APIs aren't used and the text    * delimited for more details    *    * @param name name of operation    * @param text text to print    */
DECL|method|println (String name, String text)
specifier|private
name|void
name|println
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": #"
operator|+
name|text
operator|+
literal|"#"
argument_list|)
expr_stmt|;
block|}
DECL|method|logOut (String message, Throwable throwable)
specifier|private
name|String
name|logOut
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Logger
name|logger
init|=
name|createLogger
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
comment|//remove and close the appender
name|logger
operator|.
name|removeAllAppenders
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createLogger (Writer writer)
specifier|public
name|Logger
name|createLogger
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|TestLoggerRepository
name|repo
init|=
operator|new
name|TestLoggerRepository
argument_list|()
decl_stmt|;
name|Logger
name|logger
init|=
name|repo
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Log4Json
name|layout
init|=
operator|new
name|Log4Json
argument_list|()
decl_stmt|;
name|WriterAppender
name|appender
init|=
operator|new
name|WriterAppender
argument_list|(
name|layout
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
return|return
name|logger
return|;
block|}
comment|/**    * This test logger avoids integrating with the main runtimes Logger hierarchy    * in ways the reader does not want to know.    */
DECL|class|TestLogger
specifier|private
specifier|static
class|class
name|TestLogger
extends|extends
name|Logger
block|{
DECL|method|TestLogger (String name, LoggerRepository repo)
specifier|private
name|TestLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|LoggerRepository
name|repo
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|repository
operator|=
name|repo
expr_stmt|;
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestLoggerRepository
specifier|public
specifier|static
class|class
name|TestLoggerRepository
implements|implements
name|LoggerRepository
block|{
annotation|@
name|Override
DECL|method|addHierarchyEventListener (HierarchyEventListener listener)
specifier|public
name|void
name|addHierarchyEventListener
parameter_list|(
name|HierarchyEventListener
name|listener
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|isDisabled (int level)
specifier|public
name|boolean
name|isDisabled
parameter_list|(
name|int
name|level
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setThreshold (Level level)
specifier|public
name|void
name|setThreshold
parameter_list|(
name|Level
name|level
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|setThreshold (String val)
specifier|public
name|void
name|setThreshold
parameter_list|(
name|String
name|val
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|emitNoAppenderWarning (Category cat)
specifier|public
name|void
name|emitNoAppenderWarning
parameter_list|(
name|Category
name|cat
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getThreshold ()
specifier|public
name|Level
name|getThreshold
parameter_list|()
block|{
return|return
name|Level
operator|.
name|ALL
return|;
block|}
annotation|@
name|Override
DECL|method|getLogger (String name)
specifier|public
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestLogger
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLogger (String name, LoggerFactory factory)
specifier|public
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|LoggerFactory
name|factory
parameter_list|)
block|{
return|return
operator|new
name|TestLogger
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRootLogger ()
specifier|public
name|Logger
name|getRootLogger
parameter_list|()
block|{
return|return
operator|new
name|TestLogger
argument_list|(
literal|"root"
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|exists (String name)
specifier|public
name|Logger
name|exists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getCurrentLoggers ()
specifier|public
name|Enumeration
name|getCurrentLoggers
parameter_list|()
block|{
return|return
operator|new
name|Vector
argument_list|()
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentCategories ()
specifier|public
name|Enumeration
name|getCurrentCategories
parameter_list|()
block|{
return|return
operator|new
name|Vector
argument_list|()
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fireAddAppenderEvent (Category logger, Appender appender)
specifier|public
name|void
name|fireAddAppenderEvent
parameter_list|(
name|Category
name|logger
parameter_list|,
name|Appender
name|appender
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|resetConfiguration ()
specifier|public
name|void
name|resetConfiguration
parameter_list|()
block|{     }
block|}
block|}
end_class

end_unit

