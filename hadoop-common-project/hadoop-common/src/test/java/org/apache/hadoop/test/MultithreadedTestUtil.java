begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A utility to easily test threaded/synchronized code.  * Utility works by letting you add threads that do some work to a  * test context object, and then lets you kick them all off to stress test  * your parallel code.  *  * Also propagates thread exceptions back to the runner, to let you verify.  *  * An example:  *  *<code>  *  final AtomicInteger threadsRun = new AtomicInteger();  *  *  TestContext ctx = new TestContext();  *  // Add 3 threads to test.  *  for (int i = 0; i< 3; i++) {  *    ctx.addThread(new TestingThread(ctx) {  *      @Override  *      public void doWork() throws Exception {  *        threadsRun.incrementAndGet();  *      }  *    });  *  }  *  ctx.startThreads();  *  // Set a timeout period for threads to complete.  *  ctx.waitFor(30000);  *  assertEquals(3, threadsRun.get());  *</code>  *  * For repetitive actions, use the {@link MultithreadedTestUtil.RepeatingThread}  * instead.  *  * (More examples can be found in {@link TestMultithreadedTestUtil})  */
end_comment

begin_class
DECL|class|MultithreadedTestUtil
specifier|public
specifier|abstract
class|class
name|MultithreadedTestUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultithreadedTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * TestContext is used to setup the multithreaded test runner.    * It lets you add threads, run them, wait upon or stop them.    */
DECL|class|TestContext
specifier|public
specifier|static
class|class
name|TestContext
block|{
DECL|field|err
specifier|private
name|Throwable
name|err
init|=
literal|null
decl_stmt|;
DECL|field|stopped
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
DECL|field|testThreads
specifier|private
name|Set
argument_list|<
name|TestingThread
argument_list|>
name|testThreads
init|=
operator|new
name|HashSet
argument_list|<
name|TestingThread
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|finishedThreads
specifier|private
name|Set
argument_list|<
name|TestingThread
argument_list|>
name|finishedThreads
init|=
operator|new
name|HashSet
argument_list|<
name|TestingThread
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Check if the context can run threads.      * Can't if its been stopped and contains an error.      * @return true if it can run, false if it can't.      */
DECL|method|shouldRun ()
specifier|public
specifier|synchronized
name|boolean
name|shouldRun
parameter_list|()
block|{
return|return
operator|!
name|stopped
operator|&&
name|err
operator|==
literal|null
return|;
block|}
comment|/**      * Add a thread to the context for running.      * Threads can be of type {@link MultithreadedTestUtil.TestingThread}      * or {@link MultithreadedTestUtil.RepeatingTestThread}      * or other custom derivatives of the former.      * @param t the thread to add for running.      */
DECL|method|addThread (TestingThread t)
specifier|public
name|void
name|addThread
parameter_list|(
name|TestingThread
name|t
parameter_list|)
block|{
name|testThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts all test threads that have been added so far.      */
DECL|method|startThreads ()
specifier|public
name|void
name|startThreads
parameter_list|()
block|{
for|for
control|(
name|TestingThread
name|t
range|:
name|testThreads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Waits for threads to finish or error out.      * @param millis the number of milliseconds to wait      * for threads to complete.      * @throws Exception if one or more of the threads      * have thrown up an error.      */
DECL|method|waitFor (long millis)
specifier|public
specifier|synchronized
name|void
name|waitFor
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|millis
decl_stmt|;
while|while
condition|(
name|shouldRun
argument_list|()
operator|&&
name|finishedThreads
operator|.
name|size
argument_list|()
operator|<
name|testThreads
operator|.
name|size
argument_list|()
condition|)
block|{
name|long
name|left
init|=
name|endTime
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
break|break;
name|checkException
argument_list|()
expr_stmt|;
name|wait
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|checkException
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks for thread exceptions, and if they've occurred      * throws them as RuntimeExceptions in a deferred manner.      */
DECL|method|checkException ()
specifier|private
specifier|synchronized
name|void
name|checkException
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Deferred"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
comment|/**      * Called by {@link MultithreadedTestUtil.TestingThread}s to signal      * a failed thread.      * @param t the thread that failed.      */
DECL|method|threadFailed (Throwable t)
specifier|public
specifier|synchronized
name|void
name|threadFailed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|err
operator|==
literal|null
condition|)
name|err
operator|=
name|t
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed!"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
comment|/**      * Called by {@link MultithreadedTestUtil.TestingThread}s to signal      * a successful completion.      * @param t the thread that finished.      */
DECL|method|threadDone (TestingThread t)
specifier|public
specifier|synchronized
name|void
name|threadDone
parameter_list|(
name|TestingThread
name|t
parameter_list|)
block|{
name|finishedThreads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns after stopping all threads by joining them back.      * @throws Exception in case a thread terminated with a failure.      */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|TestingThread
name|t
range|:
name|testThreads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|checkException
argument_list|()
expr_stmt|;
block|}
DECL|method|getTestThreads ()
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Thread
argument_list|>
name|getTestThreads
parameter_list|()
block|{
return|return
name|testThreads
return|;
block|}
block|}
comment|/**    * A thread that can be added to a test context, and properly    * passes exceptions through.    */
DECL|class|TestingThread
specifier|public
specifier|static
specifier|abstract
class|class
name|TestingThread
extends|extends
name|Thread
block|{
DECL|field|ctx
specifier|protected
specifier|final
name|TestContext
name|ctx
decl_stmt|;
DECL|field|stopped
specifier|protected
name|boolean
name|stopped
decl_stmt|;
DECL|method|TestingThread (TestContext ctx)
specifier|public
name|TestingThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doWork
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ctx
operator|.
name|threadFailed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|threadDone
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * User method to add any code to test thread behavior of.      * @throws Exception throw an exception if a failure has occurred.      */
DECL|method|doWork ()
specifier|public
specifier|abstract
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|stopTestThread ()
specifier|protected
name|void
name|stopTestThread
parameter_list|()
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * A test thread that performs a repeating operation.    */
DECL|class|RepeatingTestThread
specifier|public
specifier|static
specifier|abstract
class|class
name|RepeatingTestThread
extends|extends
name|TestingThread
block|{
DECL|method|RepeatingTestThread (TestContext ctx)
specifier|public
name|RepeatingTestThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
comment|/**      * Repeats a given user action until the context is asked to stop      * or meets an error.      */
DECL|method|doWork ()
specifier|public
specifier|final
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
name|ctx
operator|.
name|shouldRun
argument_list|()
operator|&&
operator|!
name|stopped
condition|)
block|{
name|doAnAction
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * User method for any code to test repeating behavior of (as threads).      * @throws Exception throw an exception if a failure has occured.      */
DECL|method|doAnAction ()
specifier|public
specifier|abstract
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

