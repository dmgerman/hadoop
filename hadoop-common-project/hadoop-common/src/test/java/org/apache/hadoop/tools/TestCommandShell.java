begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|CommandShell
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCommandShell
specifier|public
class|class
name|TestCommandShell
block|{
DECL|class|Example
specifier|public
class|class
name|Example
extends|extends
name|CommandShell
block|{
DECL|field|EXAMPLE
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE
init|=
literal|"example"
decl_stmt|;
DECL|field|HELLO
specifier|public
specifier|static
specifier|final
name|String
name|HELLO
init|=
literal|"hello"
decl_stmt|;
DECL|field|HELLO_MSG
specifier|public
specifier|static
specifier|final
name|String
name|HELLO_MSG
init|=
literal|"hello is running"
decl_stmt|;
DECL|field|GOODBYE
specifier|public
specifier|static
specifier|final
name|String
name|GOODBYE
init|=
literal|"goodbye"
decl_stmt|;
DECL|field|GOODBYE_MSG
specifier|public
specifier|static
specifier|final
name|String
name|GOODBYE_MSG
init|=
literal|"goodbye is running"
decl_stmt|;
DECL|field|savedArgs
specifier|public
name|String
index|[]
name|savedArgs
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init (String[] args)
specifier|protected
name|int
name|init
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|command
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|HELLO
argument_list|)
condition|)
block|{
name|setSubCommand
argument_list|(
operator|new
name|Hello
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|GOODBYE
argument_list|)
condition|)
block|{
name|setSubCommand
argument_list|(
operator|new
name|Goodbye
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
name|savedArgs
operator|=
name|args
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|getCommandUsage ()
specifier|public
name|String
name|getCommandUsage
parameter_list|()
block|{
return|return
name|EXAMPLE
return|;
block|}
DECL|class|Hello
specifier|public
class|class
name|Hello
extends|extends
name|SubCommand
block|{
DECL|field|HELLO_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|HELLO_USAGE
init|=
name|EXAMPLE
operator|+
literal|" hello"
decl_stmt|;
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
return|return
name|savedArgs
operator|.
name|length
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|HELLO_MSG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|HELLO_USAGE
return|;
block|}
block|}
DECL|class|Goodbye
specifier|public
class|class
name|Goodbye
extends|extends
name|SubCommand
block|{
DECL|field|GOODBYE_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|GOODBYE_USAGE
init|=
name|EXAMPLE
operator|+
literal|" goodbye"
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|GOODBYE_MSG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUsage ()
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|GOODBYE_USAGE
return|;
block|}
block|}
block|}
DECL|field|outContent
specifier|private
specifier|final
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|method|outMsg (String message)
specifier|private
name|String
name|outMsg
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
literal|"OUT:\n"
operator|+
name|outContent
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
operator|+
name|message
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommandShellExample ()
specifier|public
name|void
name|testCommandShellExample
parameter_list|()
throws|throws
name|Exception
block|{
name|Example
name|ex
init|=
operator|new
name|Example
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args1
init|=
block|{
literal|"hello"
block|}
decl_stmt|;
name|rc
operator|=
name|ex
operator|.
name|run
argument_list|(
name|args1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outMsg
argument_list|(
literal|"test exit code - normal hello"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outMsg
argument_list|(
literal|"test normal hello message"
argument_list|)
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|Example
operator|.
name|HELLO_MSG
argument_list|)
argument_list|)
expr_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args2
init|=
block|{
literal|"hello"
block|,
literal|"x"
block|}
decl_stmt|;
name|rc
operator|=
name|ex
operator|.
name|run
argument_list|(
name|args2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outMsg
argument_list|(
literal|"test exit code - bad hello"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outMsg
argument_list|(
literal|"test bad hello message"
argument_list|)
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|Example
operator|.
name|Hello
operator|.
name|HELLO_USAGE
argument_list|)
argument_list|)
expr_stmt|;
name|outContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args3
init|=
block|{
literal|"goodbye"
block|}
decl_stmt|;
name|rc
operator|=
name|ex
operator|.
name|run
argument_list|(
name|args3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outMsg
argument_list|(
literal|"test exit code - normal goodbye"
argument_list|)
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outMsg
argument_list|(
literal|"test normal goodbye message"
argument_list|)
argument_list|,
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|Example
operator|.
name|GOODBYE_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

