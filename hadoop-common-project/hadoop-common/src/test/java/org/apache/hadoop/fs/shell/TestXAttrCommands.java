begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestXAttrCommands
specifier|public
class|class
name|TestXAttrCommands
block|{
DECL|field|errContent
specifier|private
specifier|final
name|ByteArrayOutputStream
name|errContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|initialStdErr
specifier|private
name|PrintStream
name|initialStdErr
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|initialStdErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errContent
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|initialStdErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetfattrValidations ()
specifier|public
name|void
name|testGetfattrValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfattr should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"<path> is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfattr should fail with extra argument"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"extra"
block|,
literal|"-d"
block|,
literal|"/test"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Too many arguments"
argument_list|)
argument_list|)
expr_stmt|;
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfattr should fail without \"-n name\" or \"-d\""
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"/test"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Must specify '-n name' or '-d' option"
argument_list|)
argument_list|)
expr_stmt|;
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfattr should fail with invalid encoding"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfattr"
block|,
literal|"-d"
block|,
literal|"-e"
block|,
literal|"aaa"
block|,
literal|"/test"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid/unsupported encoding option specified: aaa"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetfattrValidations ()
specifier|public
name|void
name|testSetfattrValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfattr should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"<path> is missing"
argument_list|)
argument_list|)
expr_stmt|;
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfattr should fail with extra arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"extra"
block|,
literal|"-n"
block|,
literal|"user.a1"
block|,
literal|"/test"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Too many arguments"
argument_list|)
argument_list|)
expr_stmt|;
name|errContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfattr should fail without \"-n name\" or \"-x name\""
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfattr"
block|,
literal|"/test"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Must specify '-n name' or '-x name' option"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runCommand (String[] commands)
specifier|private
name|int
name|runCommand
parameter_list|(
name|String
index|[]
name|commands
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FsShell
argument_list|()
argument_list|,
name|commands
argument_list|)
return|;
block|}
block|}
end_class

end_unit

