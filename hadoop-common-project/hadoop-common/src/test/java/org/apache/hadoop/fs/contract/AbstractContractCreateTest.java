begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|skip
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|writeDataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|writeTextFile
import|;
end_import

begin_comment
comment|/**  * Test creating files, overwrite options&c  */
end_comment

begin_class
DECL|class|AbstractContractCreateTest
specifier|public
specifier|abstract
class|class
name|AbstractContractCreateTest
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Test
DECL|method|testCreateNewFile ()
specifier|public
name|void
name|testCreateNewFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Foundational 'create a file' test"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testCreateNewFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileOverExistingFileNoOverwrite ()
specifier|public
name|void
name|testCreateFileOverExistingFileNoOverwrite
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify overwriting an existing file fails"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testCreateFileOverExistingFileNoOverwrite"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data2
init|=
name|dataset
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
try|try
block|{
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data2
argument_list|,
name|data2
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writing without overwrite unexpectedly succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|expected
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|relaxed
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"Creating a file over a file with overwrite==false"
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|relaxed
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test catches some eventual consistency problems that blobstores exhibit,    * as we are implicitly verifying that updates are consistent. This    * is why different file lengths and datasets are used    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testOverwriteExistingFile ()
specifier|public
name|void
name|testOverwriteExistingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Overwrite an existing file and verify the new data is there"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testOverwriteExistingFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data2
init|=
name|dataset
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data2
argument_list|,
name|data2
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverwriteEmptyDirectory ()
specifier|public
name|void
name|testOverwriteEmptyDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify trying to create a file over an empty dir fails"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testOverwriteEmptyDirectory"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
try|try
block|{
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"write of file over empty dir succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|expected
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"overwriting a dir with a file "
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"overwriting a dir with a file "
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverwriteNonEmptyDirectory ()
specifier|public
name|void
name|testOverwriteNonEmptyDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify trying to create a file over a non-empty dir fails"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testOverwriteNonEmptyDirectory"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|failure
parameter_list|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|CREATE_OVERWRITES_DIRECTORY
argument_list|)
condition|)
block|{
comment|// file/directory hack surfaces here
throw|throw
operator|new
name|AssumptionViolatedException
argument_list|(
name|failure
operator|.
name|toString
argument_list|()
argument_list|,
name|failure
argument_list|)
throw|;
block|}
comment|// else: rethrow
throw|throw
name|failure
throw|;
block|}
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|writeTextFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|child
argument_list|,
literal|"child file"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
try|try
block|{
name|writeDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|boolean
name|isDir
init|=
name|status
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isDir
operator|&&
name|isSupported
argument_list|(
name|CREATE_OVERWRITES_DIRECTORY
argument_list|)
condition|)
block|{
comment|// For some file systems, downgrade to a skip so that the failure is
comment|// visible in test results.
name|skip
argument_list|(
literal|"This Filesystem allows a file to overwrite a directory"
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"write of file over dir succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|expected
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"overwriting a dir with a file "
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"overwriting a dir with a file "
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertIsFile
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatedFileIsImmediatelyVisible ()
specifier|public
name|void
name|testCreatedFileIsImmediatelyVisible
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that a newly created file exists as soon as open returns"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testCreatedFileIsImmediatelyVisible"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|out
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|1024
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSupported
argument_list|(
name|CREATE_VISIBILITY_DELAYED
argument_list|)
condition|)
block|{
comment|// For some file systems, downgrade to a skip so that the failure is
comment|// visible in test results.
name|skip
argument_list|(
literal|"This Filesystem delays visibility of newly created files"
argument_list|)
expr_stmt|;
block|}
name|assertPathExists
argument_list|(
literal|"expected path to be visible before anything written"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

