begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher.testservices
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|AbstractLaunchableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|ServiceLaunchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitCodeProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Raise an exception in the execute() method; the exception type can  * be configured from the CLI.  */
end_comment

begin_class
DECL|class|ExceptionInExecuteLaunchableService
specifier|public
class|class
name|ExceptionInExecuteLaunchableService
extends|extends
name|AbstractLaunchableService
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.hadoop.service.launcher.testservices.ExceptionInExecuteLaunchableService"
decl_stmt|;
DECL|field|ARG_THROW_SLE
specifier|public
specifier|static
specifier|final
name|String
name|ARG_THROW_SLE
init|=
literal|"--SLE"
decl_stmt|;
DECL|field|ARG_THROW_IOE
specifier|public
specifier|static
specifier|final
name|String
name|ARG_THROW_IOE
init|=
literal|"--IOE"
decl_stmt|;
DECL|field|ARG_THROWABLE
specifier|public
specifier|static
specifier|final
name|String
name|ARG_THROWABLE
init|=
literal|"--throwable"
decl_stmt|;
DECL|field|SLE_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|SLE_TEXT
init|=
literal|"SLE raised in execute()"
decl_stmt|;
DECL|field|OTHER_EXCEPTION_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|OTHER_EXCEPTION_TEXT
init|=
literal|"Other exception"
decl_stmt|;
DECL|field|EXIT_IN_IOE_TEXT
specifier|public
specifier|static
specifier|final
name|String
name|EXIT_IN_IOE_TEXT
init|=
literal|"Exit in IOE"
decl_stmt|;
DECL|field|IOE_EXIT_CODE
specifier|public
specifier|static
specifier|final
name|int
name|IOE_EXIT_CODE
init|=
literal|64
decl_stmt|;
DECL|field|exceptionType
specifier|private
name|ExType
name|exceptionType
init|=
name|ExType
operator|.
name|EX
decl_stmt|;
DECL|method|ExceptionInExecuteLaunchableService ()
specifier|public
name|ExceptionInExecuteLaunchableService
parameter_list|()
block|{
name|super
argument_list|(
literal|"ExceptionInExecuteLaunchedService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bindArgs (Configuration config, List<String> args)
specifier|public
name|Configuration
name|bindArgs
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|ARG_THROW_SLE
argument_list|)
condition|)
block|{
name|exceptionType
operator|=
name|ExType
operator|.
name|SLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|ARG_THROW_IOE
argument_list|)
condition|)
block|{
name|exceptionType
operator|=
name|ExType
operator|.
name|IOE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|ARG_THROWABLE
argument_list|)
condition|)
block|{
name|exceptionType
operator|=
name|ExType
operator|.
name|THROWABLE
expr_stmt|;
block|}
return|return
name|super
operator|.
name|bindArgs
argument_list|(
name|config
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|exceptionType
condition|)
block|{
case|case
name|SLE
case|:
throw|throw
operator|new
name|ServiceLaunchException
argument_list|(
name|LauncherExitCodes
operator|.
name|EXIT_OTHER_FAILURE
argument_list|,
name|SLE_TEXT
argument_list|)
throw|;
case|case
name|IOE
case|:
throw|throw
operator|new
name|IOECodedException
argument_list|()
throw|;
case|case
name|THROWABLE
case|:
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
literal|"OOM"
argument_list|)
throw|;
case|case
name|EX
case|:
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
name|OTHER_EXCEPTION_TEXT
argument_list|)
throw|;
block|}
block|}
DECL|enum|ExType
DECL|enumConstant|EX
DECL|enumConstant|SLE
DECL|enumConstant|IOE
DECL|enumConstant|THROWABLE
enum|enum
name|ExType
block|{
name|EX
block|,
name|SLE
block|,
name|IOE
block|,
name|THROWABLE
block|}
DECL|class|IOECodedException
specifier|public
specifier|static
class|class
name|IOECodedException
extends|extends
name|IOException
implements|implements
name|ExitCodeProvider
block|{
DECL|method|IOECodedException ()
specifier|public
name|IOECodedException
parameter_list|()
block|{
name|super
argument_list|(
name|EXIT_IN_IOE_TEXT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|IOE_EXIT_CODE
return|;
block|}
block|}
block|}
end_class

end_unit

