begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.lz4
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|BlockCompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|BlockDecompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Lz4Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
operator|.
name|Lz4Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
operator|.
name|Lz4Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestLz4CompressorDecompressor
specifier|public
class|class
name|TestLz4CompressorDecompressor
block|{
DECL|field|rnd
specifier|private
specifier|static
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|12345l
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|Lz4Codec
operator|.
name|isNativeCodeLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//test on NullPointerException in {@code compressor.setInput()}
annotation|@
name|Test
DECL|method|testCompressorSetInputNullPointerException ()
specifier|public
name|void
name|testCompressorSetInputNullPointerException
parameter_list|()
block|{
try|try
block|{
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testCompressorSetInputNullPointerException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorSetInputNullPointerException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on NullPointerException in {@code decompressor.setInput()}
annotation|@
name|Test
DECL|method|testDecompressorSetInputNullPointerException ()
specifier|public
name|void
name|testDecompressorSetInputNullPointerException
parameter_list|()
block|{
try|try
block|{
name|Lz4Decompressor
name|decompressor
init|=
operator|new
name|Lz4Decompressor
argument_list|()
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testDecompressorSetInputNullPointerException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDecompressorSetInputNullPointerException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code compressor.setInput()}
annotation|@
name|Test
DECL|method|testCompressorSetInputAIOBException ()
specifier|public
name|void
name|testCompressorSetInputAIOBException
parameter_list|()
block|{
try|try
block|{
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testCompressorSetInputAIOBException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorSetInputAIOBException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code decompressor.setInput()}
annotation|@
name|Test
DECL|method|testDecompressorSetInputAIOUBException ()
specifier|public
name|void
name|testDecompressorSetInputAIOUBException
parameter_list|()
block|{
try|try
block|{
name|Lz4Decompressor
name|decompressor
init|=
operator|new
name|Lz4Decompressor
argument_list|()
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testDecompressorSetInputAIOBException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDecompressorSetInputAIOBException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on NullPointerException in {@code compressor.compress()}
annotation|@
name|Test
DECL|method|testCompressorCompressNullPointerException ()
specifier|public
name|void
name|testCompressorCompressNullPointerException
parameter_list|()
block|{
try|try
block|{
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testCompressorCompressNullPointerException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorCompressNullPointerException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on NullPointerException in {@code decompressor.decompress()}
annotation|@
name|Test
DECL|method|testDecompressorCompressNullPointerException ()
specifier|public
name|void
name|testDecompressorCompressNullPointerException
parameter_list|()
block|{
try|try
block|{
name|Lz4Decompressor
name|decompressor
init|=
operator|new
name|Lz4Decompressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testDecompressorCompressNullPointerException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDecompressorCompressNullPointerException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on ArrayIndexOutOfBoundsException in {@code compressor.compress()}
annotation|@
name|Test
DECL|method|testCompressorCompressAIOBException ()
specifier|public
name|void
name|testCompressorCompressAIOBException
parameter_list|()
block|{
try|try
block|{
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testCompressorCompressAIOBException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorCompressAIOBException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//test on ArrayIndexOutOfBoundsException in decompressor.decompress()
annotation|@
name|Test
DECL|method|testDecompressorCompressAIOBException ()
specifier|public
name|void
name|testDecompressorCompressAIOBException
parameter_list|()
block|{
try|try
block|{
name|Lz4Decompressor
name|decompressor
init|=
operator|new
name|Lz4Decompressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
literal|1024
operator|*
literal|6
argument_list|)
decl_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testDecompressorCompressAIOBException error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDecompressorCompressAIOBException ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test Lz4Compressor compressor.compress()
annotation|@
name|Test
DECL|method|testSetInputWithBytesSizeMoreThenDefaultLz4CompressorByfferSize ()
specifier|public
name|void
name|testSetInputWithBytesSizeMoreThenDefaultLz4CompressorByfferSize
parameter_list|()
block|{
name|int
name|BYTES_SIZE
init|=
literal|1024
operator|*
literal|64
operator|+
literal|1
decl_stmt|;
try|try
block|{
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
name|BYTES_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"needsInput error !!!"
argument_list|,
name|compressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|emptyBytes
init|=
operator|new
name|byte
index|[
name|BYTES_SIZE
index|]
decl_stmt|;
name|int
name|csize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|emptyBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testSetInputWithBytesSizeMoreThenDefaultLz4CompressorByfferSize error !!!"
argument_list|,
name|csize
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testSetInputWithBytesSizeMoreThenDefaultLz4CompressorByfferSize ex error !!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test compress/decompress process
annotation|@
name|Test
DECL|method|testCompressDecompress ()
specifier|public
name|void
name|testCompressDecompress
parameter_list|()
block|{
name|int
name|BYTE_SIZE
init|=
literal|1024
operator|*
literal|54
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
name|BYTE_SIZE
argument_list|)
decl_stmt|;
name|Lz4Compressor
name|compressor
init|=
operator|new
name|Lz4Compressor
argument_list|()
decl_stmt|;
try|try
block|{
name|compressor
operator|.
name|setInput
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lz4CompressDecompress getBytesRead error !!!"
argument_list|,
name|compressor
operator|.
name|getBytesRead
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lz4CompressDecompress getBytesWritten before compress error !!!"
argument_list|,
name|compressor
operator|.
name|getBytesWritten
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|compressed
init|=
operator|new
name|byte
index|[
name|BYTE_SIZE
index|]
decl_stmt|;
name|int
name|cSize
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|compressed
operator|.
name|length
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Lz4CompressDecompress getBytesWritten after compress error !!!"
argument_list|,
name|compressor
operator|.
name|getBytesWritten
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Lz4Decompressor
name|decompressor
init|=
operator|new
name|Lz4Decompressor
argument_list|()
decl_stmt|;
comment|// set as input for decompressor only compressed data indicated with cSize
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressed
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decompressed
init|=
operator|new
name|byte
index|[
name|BYTE_SIZE
index|]
decl_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressed
argument_list|,
literal|0
argument_list|,
name|decompressed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testLz4CompressDecompress finished error !!!"
argument_list|,
name|decompressor
operator|.
name|finished
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|decompressed
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"decompressor getRemaining error !!!"
argument_list|,
name|decompressor
operator|.
name|getRemaining
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testLz4CompressDecompress ex error!!!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test compress/decompress with empty stream
annotation|@
name|Test
DECL|method|testCompressorDecompressorEmptyStreamLogic ()
specifier|public
name|void
name|testCompressorDecompressorEmptyStreamLogic
parameter_list|()
block|{
name|ByteArrayInputStream
name|bytesIn
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|bytesOut
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
name|BlockDecompressorStream
name|blockDecompressorStream
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// compress empty stream
name|bytesOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|BlockCompressorStream
name|blockCompressorStream
init|=
operator|new
name|BlockCompressorStream
argument_list|(
name|bytesOut
argument_list|,
operator|new
name|Lz4Compressor
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// close without write
name|blockCompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check compressed output
name|buf
operator|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"empty stream compressed output size != 4"
argument_list|,
literal|4
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// use compressed output as input for decompression
name|bytesIn
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// create decompression stream
name|blockDecompressorStream
operator|=
operator|new
name|BlockDecompressorStream
argument_list|(
name|bytesIn
argument_list|,
operator|new
name|Lz4Decompressor
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// no byte is available because stream was closed
name|assertEquals
argument_list|(
literal|"return value is not -1"
argument_list|,
operator|-
literal|1
argument_list|,
name|blockDecompressorStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testCompressorDecompressorEmptyStreamLogic ex error !!!"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|blockDecompressorStream
operator|!=
literal|null
condition|)
try|try
block|{
name|bytesIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockDecompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
block|}
comment|// test compress/decompress process through CompressionOutputStream/CompressionInputStream api
annotation|@
name|Test
DECL|method|testCompressorDecopressorLogicWithCompressionStreams ()
specifier|public
name|void
name|testCompressorDecopressorLogicWithCompressionStreams
parameter_list|()
block|{
name|DataOutputStream
name|deflateOut
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|inflateIn
init|=
literal|null
decl_stmt|;
name|int
name|BYTE_SIZE
init|=
literal|1024
operator|*
literal|100
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|generate
argument_list|(
name|BYTE_SIZE
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
literal|262144
decl_stmt|;
name|int
name|compressionOverhead
init|=
operator|(
name|bufferSize
operator|/
literal|6
operator|)
operator|+
literal|32
decl_stmt|;
try|try
block|{
name|DataOutputBuffer
name|compressedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
operator|new
name|BlockCompressorStream
argument_list|(
name|compressedDataBuffer
argument_list|,
operator|new
name|Lz4Compressor
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|compressionOverhead
argument_list|)
decl_stmt|;
name|deflateOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|deflateFilter
argument_list|)
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|deCompressedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inflateFilter
init|=
operator|new
name|BlockDecompressorStream
argument_list|(
name|deCompressedDataBuffer
argument_list|,
operator|new
name|Lz4Decompressor
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|inflateIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inflateFilter
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|BYTE_SIZE
index|]
decl_stmt|;
name|inflateIn
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"original array not equals compress/decompressed array"
argument_list|,
name|result
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testLz4CompressorDecopressorLogicWithCompressionStreams ex error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|deflateOut
operator|!=
literal|null
condition|)
name|deflateOut
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|inflateIn
operator|!=
literal|null
condition|)
name|inflateIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
block|}
DECL|method|generate (int size)
specifier|public
specifier|static
name|byte
index|[]
name|generate
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|array
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|rnd
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
block|}
end_class

end_unit

