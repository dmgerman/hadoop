begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|CreateOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|CreateOpts
operator|.
name|BlockSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Helper class for unit tests.  */
end_comment

begin_class
DECL|class|FileContextTestHelper
specifier|public
specifier|final
class|class
name|FileContextTestHelper
block|{
DECL|field|DEFAULT_BLOCK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_NUM_BLOCKS
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_BLOCKS
init|=
literal|2
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|final
name|String
name|testRootDir
decl_stmt|;
DECL|field|absTestRootDir
specifier|private
name|String
name|absTestRootDir
init|=
literal|null
decl_stmt|;
comment|/**    * Create a context with test root relative to the test directory    */
DECL|method|FileContextTestHelper ()
specifier|public
name|FileContextTestHelper
parameter_list|()
block|{
name|this
argument_list|(
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a context with the given test root    */
DECL|method|FileContextTestHelper (String testRootDir)
specifier|public
name|FileContextTestHelper
parameter_list|(
name|String
name|testRootDir
parameter_list|)
block|{
name|this
operator|.
name|testRootDir
operator|=
name|testRootDir
expr_stmt|;
block|}
DECL|method|getDefaultBlockSize ()
specifier|public
specifier|static
name|int
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|DEFAULT_BLOCK_SIZE
return|;
block|}
DECL|method|getFileData (int numOfBlocks, long blockSize)
specifier|public
specifier|static
name|byte
index|[]
name|getFileData
parameter_list|(
name|int
name|numOfBlocks
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|numOfBlocks
operator|*
name|blockSize
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|getTestRootPath (FileContext fc)
specifier|public
name|Path
name|getTestRootPath
parameter_list|(
name|FileContext
name|fc
parameter_list|)
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTestRootPath (FileContext fc, String pathString)
specifier|public
name|Path
name|getTestRootPath
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|pathString
parameter_list|)
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
name|pathString
argument_list|)
argument_list|)
return|;
block|}
comment|// the getAbsolutexxx method is needed because the root test dir
comment|// can be messed up by changing the working dir.
DECL|method|getAbsoluteTestRootDir (FileContext fc)
specifier|public
name|String
name|getAbsoluteTestRootDir
parameter_list|(
name|FileContext
name|fc
parameter_list|)
block|{
if|if
condition|(
name|absTestRootDir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|absTestRootDir
operator|=
name|testRootDir
expr_stmt|;
block|}
else|else
block|{
name|absTestRootDir
operator|=
name|fc
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|testRootDir
expr_stmt|;
block|}
block|}
return|return
name|absTestRootDir
return|;
block|}
DECL|method|getAbsoluteTestRootPath (FileContext fc)
specifier|public
name|Path
name|getAbsoluteTestRootPath
parameter_list|(
name|FileContext
name|fc
parameter_list|)
block|{
return|return
name|fc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getAbsoluteTestRootDir
argument_list|(
name|fc
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDefaultWorkingDirectory (FileContext fc)
specifier|public
name|Path
name|getDefaultWorkingDirectory
parameter_list|(
name|FileContext
name|fc
parameter_list|)
block|{
return|return
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fc
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|fc
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Create files with numBlocks blocks each with block size blockSize.    */
DECL|method|createFile (FileContext fc, Path path, int numBlocks, CreateOpts... options)
specifier|public
specifier|static
name|long
name|createFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|CreateOpts
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockSize
name|blockSizeOpt
init|=
name|CreateOpts
operator|.
name|getOpt
argument_list|(
name|CreateOpts
operator|.
name|BlockSize
operator|.
name|class
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|blockSizeOpt
operator|!=
literal|null
condition|?
name|blockSizeOpt
operator|.
name|getValue
argument_list|()
else|:
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getFileData
argument_list|(
name|numBlocks
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|data
operator|.
name|length
return|;
block|}
DECL|method|createFile (FileContext fc, Path path, int numBlocks, int blockSize)
specifier|public
specifier|static
name|long
name|createFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFile
argument_list|(
name|fc
argument_list|,
name|path
argument_list|,
name|numBlocks
argument_list|,
name|CreateOpts
operator|.
name|blockSize
argument_list|(
name|blockSize
argument_list|)
argument_list|,
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createFile (FileContext fc, Path path)
specifier|public
specifier|static
name|long
name|createFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFile
argument_list|(
name|fc
argument_list|,
name|path
argument_list|,
name|DEFAULT_NUM_BLOCKS
argument_list|,
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createFile (FileContext fc, String name)
specifier|public
name|long
name|createFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|createFile
argument_list|(
name|fc
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|createFileNonRecursive (FileContext fc, String name)
specifier|public
name|long
name|createFileNonRecursive
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|createFileNonRecursive
argument_list|(
name|fc
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|createFileNonRecursive (FileContext fc, Path path)
specifier|public
specifier|static
name|long
name|createFileNonRecursive
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createFile
argument_list|(
name|fc
argument_list|,
name|path
argument_list|,
name|DEFAULT_NUM_BLOCKS
argument_list|,
name|CreateOpts
operator|.
name|donotCreateParent
argument_list|()
argument_list|)
return|;
block|}
DECL|method|appendToFile (FileContext fc, Path path, int numBlocks, CreateOpts... options)
specifier|public
specifier|static
name|void
name|appendToFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|CreateOpts
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockSize
name|blockSizeOpt
init|=
name|CreateOpts
operator|.
name|getOpt
argument_list|(
name|CreateOpts
operator|.
name|BlockSize
operator|.
name|class
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|blockSizeOpt
operator|!=
literal|null
condition|?
name|blockSizeOpt
operator|.
name|getValue
argument_list|()
else|:
name|DEFAULT_BLOCK_SIZE
decl_stmt|;
name|FSDataOutputStream
name|out
decl_stmt|;
name|out
operator|=
name|fc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|getFileData
argument_list|(
name|numBlocks
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|exists (FileContext fc, Path p)
specifier|public
specifier|static
name|boolean
name|exists
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|isFile (FileContext fc, Path p)
specifier|public
specifier|static
name|boolean
name|isFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|fc
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isDir (FileContext fc, Path p)
specifier|public
specifier|static
name|boolean
name|isDir
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|fc
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isSymlink (FileContext fc, Path p)
specifier|public
specifier|static
name|boolean
name|isSymlink
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|fc
operator|.
name|getFileLinkStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isSymlink
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|writeFile (FileContext fc, Path path, byte b[])
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fc
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readFile (FileContext fc, Path path, int len)
specifier|public
specifier|static
name|byte
index|[]
name|readFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|dis
init|=
name|fc
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|dis
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|buffer
return|;
block|}
DECL|method|containsPath (FileContext fc, Path path, FileStatus[] dirList)
specifier|public
name|FileStatus
name|containsPath
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|path
parameter_list|,
name|FileStatus
index|[]
name|dirList
parameter_list|)
block|{
return|return
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|dirList
argument_list|)
return|;
block|}
DECL|method|containsPath (Path path, FileStatus[] dirList)
specifier|public
specifier|static
name|FileStatus
name|containsPath
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileStatus
index|[]
name|dirList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|dirList
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
return|return
name|dirList
index|[
name|i
index|]
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|containsPath (FileContext fc, String path, FileStatus[] dirList)
specifier|public
name|FileStatus
name|containsPath
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|String
name|path
parameter_list|,
name|FileStatus
index|[]
name|dirList
parameter_list|)
block|{
return|return
name|containsPath
argument_list|(
name|fc
argument_list|,
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|dirList
argument_list|)
return|;
block|}
DECL|enum|fileType
DECL|enumConstant|isDir
DECL|enumConstant|isFile
DECL|enumConstant|isSymlink
specifier|public
enum|enum
name|fileType
block|{
name|isDir
block|,
name|isFile
block|,
name|isSymlink
block|}
empty_stmt|;
DECL|method|checkFileStatus (FileContext aFc, String path, fileType expectedType)
specifier|public
specifier|static
name|void
name|checkFileStatus
parameter_list|(
name|FileContext
name|aFc
parameter_list|,
name|String
name|path
parameter_list|,
name|fileType
name|expectedType
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|s
init|=
name|aFc
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isDir
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isFile
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isSymlink
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aFc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFileLinkStatus (FileContext aFc, String path, fileType expectedType)
specifier|public
specifier|static
name|void
name|checkFileLinkStatus
parameter_list|(
name|FileContext
name|aFc
parameter_list|,
name|String
name|path
parameter_list|,
name|fileType
name|expectedType
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|s
init|=
name|aFc
operator|.
name|getFileLinkStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isDir
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isFile
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedType
operator|==
name|fileType
operator|.
name|isSymlink
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aFc
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

