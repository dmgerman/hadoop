begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SHELL_MISSING_DEFAULT_FS_WARNING_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_comment
comment|/**  * JUnit test class for {@link org.apache.hadoop.fs.shell.Ls}  *  */
end_comment

begin_class
DECL|class|TestLs
specifier|public
class|class
name|TestLs
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockFs
specifier|private
specifier|static
name|FileSystem
name|mockFs
decl_stmt|;
DECL|field|NOW
specifier|private
specifier|static
specifier|final
name|Date
name|NOW
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"mockfs:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockFs
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetMock ()
specifier|public
name|void
name|resetMock
parameter_list|()
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
name|AclStatus
name|mockAclStatus
init|=
name|mock
argument_list|(
name|AclStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAclStatus
operator|.
name|getEntries
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getAclStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAclStatus
argument_list|)
expr_stmt|;
block|}
comment|// check that default options are correct
annotation|@
name|Test
DECL|method|processOptionsNone ()
specifier|public
name|void
name|processOptionsNone
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -C option is recognised
annotation|@
name|Test
DECL|method|processOptionsPathOnly ()
specifier|public
name|void
name|processOptionsPathOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-C"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -d option is recognised
annotation|@
name|Test
DECL|method|processOptionsDirectory ()
specifier|public
name|void
name|processOptionsDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -h option is recognised
annotation|@
name|Test
DECL|method|processOptionsHuman ()
specifier|public
name|void
name|processOptionsHuman
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -R option is recognised
annotation|@
name|Test
DECL|method|processOptionsRecursive ()
specifier|public
name|void
name|processOptionsRecursive
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-R"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -r option is recognised
annotation|@
name|Test
DECL|method|processOptionsReverse ()
specifier|public
name|void
name|processOptionsReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -S option is recognised
annotation|@
name|Test
DECL|method|processOptionsSize ()
specifier|public
name|void
name|processOptionsSize
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the -t option is recognised
annotation|@
name|Test
DECL|method|processOptionsMtime ()
specifier|public
name|void
name|processOptionsMtime
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the precedence of the -t and -S options
annotation|@
name|Test
DECL|method|processOptionsMtimeSize ()
specifier|public
name|void
name|processOptionsMtimeSize
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check the precedence of the -t, -S and -r options
annotation|@
name|Test
DECL|method|processOptionsMtimeSizeReverse ()
specifier|public
name|void
name|processOptionsMtimeSizeReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// chheck the -u option is recognised
annotation|@
name|Test
DECL|method|processOptionsAtime ()
specifier|public
name|void
name|processOptionsAtime
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check all options is handled correctly
annotation|@
name|Test
DECL|method|processOptionsAll ()
specifier|public
name|void
name|processOptionsAll
parameter_list|()
throws|throws
name|IOException
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-C"
argument_list|)
expr_stmt|;
comment|// show file path only
name|options
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
comment|// directory
name|options
operator|.
name|add
argument_list|(
literal|"-h"
argument_list|)
expr_stmt|;
comment|// human readable
name|options
operator|.
name|add
argument_list|(
literal|"-R"
argument_list|)
expr_stmt|;
comment|// recursive
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
comment|// reverse order
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
comment|// time order
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
comment|// size order
name|options
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
comment|// show atime
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isPathOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isDirRecurse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isHumanReadable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
comment|// -d overrules -R
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderReverse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ls
operator|.
name|isOrderSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// -t overrules -S
name|assertTrue
argument_list|(
name|ls
operator|.
name|isOrderTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ls
operator|.
name|isUseAtime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check listing of a single file
annotation|@
name|Test
DECL|method|processPathFile ()
specifier|public
name|void
name|processPathFile
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir"
argument_list|,
literal|"testFile"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check listing of multiple files
annotation|@
name|Test
DECL|method|processPathFiles ()
specifier|public
name|void
name|processPathFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir01"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir02"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir03"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir04"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir05"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDir06"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile01
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile02
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile03
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile04
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile05
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testfile06
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check listing of a single directory
annotation|@
name|Test
DECL|method|processPathDirectory ()
specifier|public
name|void
name|processPathDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check listing of multiple directories
annotation|@
name|Test
DECL|method|processPathDirectories ()
specifier|public
name|void
name|processPathDirectories
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir01
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory01"
argument_list|)
decl_stmt|;
name|testDir01
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir01
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|)
expr_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir02
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory02"
argument_list|)
decl_stmt|;
name|testDir02
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir02
operator|.
name|addContents
argument_list|(
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir01
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir02
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 3 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 3 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check the default ordering
annotation|@
name|Test
DECL|method|processPathDirOrderDefault ()
specifier|public
name|void
name|processPathDirOrderDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add contents in non-lexigraphic order to show they get sorted
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile03
argument_list|,
name|testfile05
argument_list|,
name|testfile02
argument_list|,
name|testfile04
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check reverse default ordering
annotation|@
name|Test
DECL|method|processPathDirOrderDefaultReverse ()
specifier|public
name|void
name|processPathDirOrderDefaultReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add contents in non-lexigraphic order to show they get sorted
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile03
argument_list|,
name|testfile05
argument_list|,
name|testfile02
argument_list|,
name|testfile04
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check mtime ordering (-t option); most recent first in line with unix
comment|// convention
annotation|@
name|Test
DECL|method|processPathDirOrderMtime ()
specifier|public
name|void
name|processPathDirOrderMtime
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file mtime in different order to file names
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check reverse mtime ordering (-t -r options)
annotation|@
name|Test
DECL|method|processPathDirOrderMtimeReverse ()
specifier|public
name|void
name|processPathDirOrderMtimeReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file mtime in different order to file names
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check multiple directories are order independently
annotation|@
name|Test
DECL|method|processPathDirsOrderMtime ()
specifier|public
name|void
name|processPathDirsOrderMtime
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory01"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory02"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file mtime in different order to file names
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|TestFile
name|testDir01
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory01"
argument_list|)
decl_stmt|;
name|testDir01
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir01
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|)
expr_stmt|;
name|TestFile
name|testDir02
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory02"
argument_list|)
decl_stmt|;
name|testDir02
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir02
operator|.
name|addContents
argument_list|(
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir01
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir02
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 3 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 3 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check mtime ordering with large time gaps between files (checks integer
comment|// overflow issues)
annotation|@
name|Test
DECL|method|processPathDirOrderMtimeYears ()
specifier|public
name|void
name|processPathDirOrderMtimeYears
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file mtime in different order to file names
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|0
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|0
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
name|Integer
operator|.
name|MIN_VALUE
operator|+
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check length order (-S option)
annotation|@
name|Test
DECL|method|processPathDirOrderLength ()
specifier|public
name|void
name|processPathDirOrderLength
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file length in different order to file names
name|long
name|length
init|=
literal|1234567890
decl_stmt|;
name|testfile01
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check reverse length order (-S -r options)
annotation|@
name|Test
DECL|method|processPathDirOrderLengthReverse ()
specifier|public
name|void
name|processPathDirOrderLengthReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file length in different order to file names
name|long
name|length
init|=
literal|1234567890
decl_stmt|;
name|testfile01
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check length ordering with large size gaps between files (checks integer
comment|// overflow issues)
annotation|@
name|Test
DECL|method|processPathDirOrderLengthLarge ()
specifier|public
name|void
name|processPathDirOrderLengthLarge
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file length in different order to file names
name|long
name|length
init|=
literal|1234567890
decl_stmt|;
name|testfile01
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|3l
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setLength
argument_list|(
name|length
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|2l
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|4l
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|2l
operator|*
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setLength
argument_list|(
name|length
operator|+
literal|0
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-S"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineMtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check access time display (-u option)
annotation|@
name|Test
DECL|method|processPathDirectoryAtime ()
specifier|public
name|void
name|processPathDirectoryAtime
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check access time order (-u -t options)
annotation|@
name|Test
DECL|method|processPathDirOrderAtime ()
specifier|public
name|void
name|processPathDirOrderAtime
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file atime in different order to file names
name|testfile01
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
comment|// set file mtime in different order to atime
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check reverse access time order (-u -t -r options)
annotation|@
name|Test
DECL|method|processPathDirOrderAtimeReverse ()
specifier|public
name|void
name|processPathDirOrderAtimeReverse
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
comment|// set file atime in different order to file names
name|testfile01
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setAtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
comment|// set file mtime in different order to atime
name|testfile01
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|60
argument_list|)
expr_stmt|;
name|testfile02
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|50
argument_list|)
expr_stmt|;
name|testfile03
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|20
argument_list|)
expr_stmt|;
name|testfile04
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|testfile05
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|testfile06
operator|.
name|setMtime
argument_list|(
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|40
argument_list|)
expr_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-r"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|String
name|lineFormat
init|=
name|TestFile
operator|.
name|computeLineFormat
argument_list|(
name|pathData
argument_list|)
decl_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Found 6 items"
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|formatLineAtime
argument_list|(
name|lineFormat
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// check path only display (-C option)
annotation|@
name|Test
DECL|method|processPathDirectoryPathOnly ()
specifier|public
name|void
name|processPathDirectoryPathOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|TestFile
name|testfile01
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile01"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile02
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile02"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile03
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile03"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile04
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile04"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile05
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile05"
argument_list|)
decl_stmt|;
name|TestFile
name|testfile06
init|=
operator|new
name|TestFile
argument_list|(
literal|"testDirectory"
argument_list|,
literal|"testFile06"
argument_list|)
decl_stmt|;
name|TestFile
name|testDir
init|=
operator|new
name|TestFile
argument_list|(
literal|""
argument_list|,
literal|"testDirectory"
argument_list|)
decl_stmt|;
name|testDir
operator|.
name|setIsDir
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|addContents
argument_list|(
name|testfile01
argument_list|,
name|testfile02
argument_list|,
name|testfile03
argument_list|,
name|testfile04
argument_list|,
name|testfile05
argument_list|,
name|testfile06
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|pathData
init|=
operator|new
name|LinkedList
argument_list|<
name|PathData
argument_list|>
argument_list|()
decl_stmt|;
name|pathData
operator|.
name|add
argument_list|(
name|testDir
operator|.
name|getPathData
argument_list|()
argument_list|)
expr_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|ls
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
literal|"-C"
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|ls
operator|.
name|processArguments
argument_list|(
name|pathData
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile01
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile02
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile03
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile04
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile05
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|testfile06
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|displayWarningOnLocalFileSystem (boolean shouldDisplay)
specifier|private
specifier|static
name|void
name|displayWarningOnLocalFileSystem
parameter_list|(
name|boolean
name|shouldDisplay
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HADOOP_SHELL_MISSING_DEFAULT_FS_WARNING_KEY
argument_list|,
name|shouldDisplay
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|err
init|=
operator|new
name|PrintStream
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ls
operator|.
name|err
operator|=
name|err
expr_stmt|;
name|ls
operator|.
name|run
argument_list|(
literal|"file:///."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shouldDisplay
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Warning: fs.defaultFS is not set when running \"ls\" command."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|displayWarningsOnLocalFileSystem ()
specifier|public
name|void
name|displayWarningsOnLocalFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Display warnings.
name|displayWarningOnLocalFileSystem
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Does not display warnings.
name|displayWarningOnLocalFileSystem
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// check the deprecated flag isn't set
annotation|@
name|Test
DECL|method|isDeprecated ()
specifier|public
name|void
name|isDeprecated
parameter_list|()
block|{
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|boolean
name|actual
init|=
name|ls
operator|.
name|isDeprecated
argument_list|()
decl_stmt|;
name|boolean
name|expected
init|=
literal|false
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ls.isDeprecated"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|// check there's no replacement command
annotation|@
name|Test
DECL|method|getReplacementCommand ()
specifier|public
name|void
name|getReplacementCommand
parameter_list|()
block|{
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|ls
operator|.
name|getReplacementCommand
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ls.getReplacementCommand"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|// check the correct name is returned
annotation|@
name|Test
DECL|method|getName ()
specifier|public
name|void
name|getName
parameter_list|()
block|{
name|Ls
name|ls
init|=
operator|new
name|Ls
argument_list|()
decl_stmt|;
name|String
name|actual
init|=
name|ls
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|"ls"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ls.getName"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|// test class representing a file to be listed
DECL|class|TestFile
specifier|static
class|class
name|TestFile
block|{
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_ISDIR
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_ISDIR
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_MODE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MODE
init|=
literal|"750"
decl_stmt|;
DECL|field|DEFAULT_REPLICATION
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_REPLICATION
init|=
literal|3
decl_stmt|;
DECL|field|DEFAULT_OWNER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OWNER
init|=
literal|"test_owner"
decl_stmt|;
DECL|field|DEFAULT_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_GROUP
init|=
literal|"test_group"
decl_stmt|;
DECL|field|DEFAULT_LENGTH
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_LENGTH
init|=
literal|1234567890L
decl_stmt|;
DECL|field|DEFAULT_MTIME
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_MTIME
init|=
name|NOW
operator|.
name|getTime
argument_list|()
operator|-
literal|86400000
decl_stmt|;
DECL|field|DEFAULT_ATIME
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_ATIME
init|=
name|NOW
operator|.
name|getTime
argument_list|()
operator|+
literal|86400000
decl_stmt|;
DECL|field|DEFAULT_BLOCKSIZE
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOCKSIZE
init|=
literal|64L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|dirname
specifier|private
name|String
name|dirname
decl_stmt|;
DECL|field|filename
specifier|private
name|String
name|filename
decl_stmt|;
DECL|field|isDir
specifier|private
name|boolean
name|isDir
decl_stmt|;
DECL|field|permission
specifier|private
name|FsPermission
name|permission
decl_stmt|;
DECL|field|replication
specifier|private
name|int
name|replication
decl_stmt|;
DECL|field|owner
specifier|private
name|String
name|owner
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|mtime
specifier|private
name|long
name|mtime
decl_stmt|;
DECL|field|atime
specifier|private
name|long
name|atime
decl_stmt|;
DECL|field|blocksize
specifier|private
name|long
name|blocksize
decl_stmt|;
DECL|field|contents
specifier|private
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|contents
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
init|=
literal|null
decl_stmt|;
DECL|field|fileStatus
specifier|private
name|FileStatus
name|fileStatus
init|=
literal|null
decl_stmt|;
DECL|field|pathData
specifier|private
name|PathData
name|pathData
init|=
literal|null
decl_stmt|;
DECL|method|TestFile (String dirname, String filename)
specifier|public
name|TestFile
parameter_list|(
name|String
name|dirname
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|setDirname
argument_list|(
name|dirname
argument_list|)
expr_stmt|;
name|setFilename
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|setIsDir
argument_list|(
name|DEFAULT_ISDIR
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|DEFAULT_MODE
argument_list|)
expr_stmt|;
name|setReplication
argument_list|(
name|DEFAULT_REPLICATION
argument_list|)
expr_stmt|;
name|setOwner
argument_list|(
name|DEFAULT_OWNER
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|setLength
argument_list|(
name|DEFAULT_LENGTH
argument_list|)
expr_stmt|;
name|setMtime
argument_list|(
name|DEFAULT_MTIME
argument_list|)
expr_stmt|;
name|setAtime
argument_list|(
name|DEFAULT_ATIME
argument_list|)
expr_stmt|;
name|setBlocksize
argument_list|(
name|DEFAULT_BLOCKSIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|setDirname (String dirname)
specifier|public
name|void
name|setDirname
parameter_list|(
name|String
name|dirname
parameter_list|)
block|{
name|this
operator|.
name|dirname
operator|=
name|dirname
expr_stmt|;
block|}
DECL|method|setFilename (String filename)
specifier|public
name|void
name|setFilename
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
expr_stmt|;
block|}
DECL|method|setIsDir (boolean isDir)
specifier|public
name|void
name|setIsDir
parameter_list|(
name|boolean
name|isDir
parameter_list|)
block|{
name|this
operator|.
name|isDir
operator|=
name|isDir
expr_stmt|;
block|}
DECL|method|setPermission (String mode)
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|setPermission
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setPermission (FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
block|}
DECL|method|setReplication (int replication)
specifier|public
name|void
name|setReplication
parameter_list|(
name|int
name|replication
parameter_list|)
block|{
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
block|}
DECL|method|setOwner (String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|setLength (long length)
specifier|public
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|setMtime (long mtime)
specifier|public
name|void
name|setMtime
parameter_list|(
name|long
name|mtime
parameter_list|)
block|{
name|this
operator|.
name|mtime
operator|=
name|mtime
expr_stmt|;
block|}
DECL|method|setAtime (long atime)
specifier|public
name|void
name|setAtime
parameter_list|(
name|long
name|atime
parameter_list|)
block|{
name|this
operator|.
name|atime
operator|=
name|atime
expr_stmt|;
block|}
DECL|method|setBlocksize (long blocksize)
specifier|public
name|void
name|setBlocksize
parameter_list|(
name|long
name|blocksize
parameter_list|)
block|{
name|this
operator|.
name|blocksize
operator|=
name|blocksize
expr_stmt|;
block|}
DECL|method|addContents (TestFile... contents)
specifier|public
name|void
name|addContents
parameter_list|(
name|TestFile
modifier|...
name|contents
parameter_list|)
block|{
for|for
control|(
name|TestFile
name|testFile
range|:
name|contents
control|)
block|{
name|this
operator|.
name|contents
operator|.
name|add
argument_list|(
name|testFile
operator|.
name|getFileStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDirname ()
specifier|private
name|String
name|getDirname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dirname
return|;
block|}
DECL|method|getFilename ()
specifier|private
name|String
name|getFilename
parameter_list|()
block|{
return|return
name|this
operator|.
name|filename
return|;
block|}
DECL|method|getPathname ()
specifier|private
name|String
name|getPathname
parameter_list|()
block|{
return|return
name|getDirname
argument_list|()
operator|+
literal|"/"
operator|+
name|getFilename
argument_list|()
return|;
block|}
DECL|method|isDir ()
specifier|private
name|boolean
name|isDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|isDir
return|;
block|}
DECL|method|isFile ()
specifier|private
name|boolean
name|isFile
parameter_list|()
block|{
return|return
operator|!
name|this
operator|.
name|isDir
argument_list|()
return|;
block|}
DECL|method|getPermission ()
specifier|private
name|FsPermission
name|getPermission
parameter_list|()
block|{
return|return
name|this
operator|.
name|permission
return|;
block|}
DECL|method|getReplication ()
specifier|private
name|int
name|getReplication
parameter_list|()
block|{
return|return
name|this
operator|.
name|replication
return|;
block|}
DECL|method|getOwner ()
specifier|private
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|this
operator|.
name|owner
return|;
block|}
DECL|method|getGroup ()
specifier|private
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|this
operator|.
name|group
return|;
block|}
DECL|method|getLength ()
specifier|private
name|long
name|getLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
DECL|method|getMtime ()
specifier|private
name|long
name|getMtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|mtime
return|;
block|}
DECL|method|getAtime ()
specifier|private
name|long
name|getAtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|atime
return|;
block|}
DECL|method|getBlocksize ()
specifier|private
name|long
name|getBlocksize
parameter_list|()
block|{
return|return
name|this
operator|.
name|blocksize
return|;
block|}
DECL|method|getContents ()
specifier|private
name|FileStatus
index|[]
name|getContents
parameter_list|()
block|{
return|return
name|this
operator|.
name|contents
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns a formated output line based on the given format mask, file      * status and file name.      *      * @param lineFormat      *          format mask      * @param fileStatus      *          file status      * @param fileName      *          file name      * @return formated line      */
DECL|method|formatLineMtime (String lineFormat)
specifier|private
name|String
name|formatLineMtime
parameter_list|(
name|String
name|lineFormat
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|lineFormat
argument_list|,
operator|(
name|isDir
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
operator|)
argument_list|,
name|getPermission
argument_list|()
argument_list|,
operator|(
name|isFile
argument_list|()
condition|?
name|getReplication
argument_list|()
else|:
literal|"-"
operator|)
argument_list|,
name|getOwner
argument_list|()
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getMtime
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|getPathname
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a formated output line based on the given format mask, file      * status and file name.      *      * @param lineFormat      *          format mask      * @param fileStatus      *          file status      * @param fileName      *          file name      * @return formated line      */
DECL|method|formatLineAtime (String lineFormat)
specifier|private
name|String
name|formatLineAtime
parameter_list|(
name|String
name|lineFormat
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|lineFormat
argument_list|,
operator|(
name|isDir
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
operator|)
argument_list|,
name|getPermission
argument_list|()
argument_list|,
operator|(
name|isFile
argument_list|()
condition|?
name|getReplication
argument_list|()
else|:
literal|"-"
operator|)
argument_list|,
name|getOwner
argument_list|()
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|getAtime
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|getPathname
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFileStatus ()
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|()
block|{
if|if
condition|(
name|fileStatus
operator|==
literal|null
condition|)
block|{
name|Path
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|fileStatus
operator|=
operator|new
name|FileStatus
argument_list|(
name|getLength
argument_list|()
argument_list|,
name|isDir
argument_list|()
argument_list|,
name|getReplication
argument_list|()
argument_list|,
name|getBlocksize
argument_list|()
argument_list|,
name|getMtime
argument_list|()
argument_list|,
name|getAtime
argument_list|()
argument_list|,
name|getPermission
argument_list|()
argument_list|,
name|getOwner
argument_list|()
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|fileStatus
return|;
block|}
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|getDirname
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|getDirname
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|getDirname
argument_list|()
argument_list|,
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|path
return|;
block|}
DECL|method|getPathData ()
specifier|public
name|PathData
name|getPathData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pathData
operator|==
literal|null
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getFileStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
name|pathData
operator|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|getContents
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|eq
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContents
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pathData
return|;
block|}
comment|/**      * Compute format string based on maximum column widths. Copied from      * Ls.adjustColumnWidths as these tests are more interested in proving      * regression rather than absolute format.      *      * @param items      *          to find the max field width for each column      */
DECL|method|computeLineFormat (LinkedList<PathData> items)
specifier|public
specifier|static
name|String
name|computeLineFormat
parameter_list|(
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|items
parameter_list|)
block|{
name|int
name|maxRepl
init|=
literal|3
decl_stmt|,
name|maxLen
init|=
literal|10
decl_stmt|,
name|maxOwner
init|=
literal|0
decl_stmt|,
name|maxGroup
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PathData
name|item
range|:
name|items
control|)
block|{
name|FileStatus
name|stat
init|=
name|item
operator|.
name|stat
decl_stmt|;
name|maxRepl
operator|=
name|maxLength
argument_list|(
name|maxRepl
argument_list|,
name|stat
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|maxLen
operator|=
name|maxLength
argument_list|(
name|maxLen
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|maxOwner
operator|=
name|maxLength
argument_list|(
name|maxOwner
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|maxGroup
operator|=
name|maxLength
argument_list|(
name|maxGroup
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|fmt
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%s%s "
argument_list|)
expr_stmt|;
comment|// permission string
name|fmt
operator|.
name|append
argument_list|(
literal|"%"
operator|+
name|maxRepl
operator|+
literal|"s "
argument_list|)
expr_stmt|;
comment|// Do not use '%-0s' as a formatting conversion, since it will throw a
comment|// a MissingFormatWidthException if it is used in String.format().
comment|// http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#intFlags
name|fmt
operator|.
name|append
argument_list|(
operator|(
name|maxOwner
operator|>
literal|0
operator|)
condition|?
literal|"%-"
operator|+
name|maxOwner
operator|+
literal|"s "
else|:
literal|"%s"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
operator|(
name|maxGroup
operator|>
literal|0
operator|)
condition|?
literal|"%-"
operator|+
name|maxGroup
operator|+
literal|"s "
else|:
literal|"%s"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%"
operator|+
name|maxLen
operator|+
literal|"s "
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|append
argument_list|(
literal|"%s %s"
argument_list|)
expr_stmt|;
comment|// mod time& path
return|return
name|fmt
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Return the maximum of two values, treating null as 0      *      * @param n      *          integer to be compared      * @param value      *          value to be compared      * @return maximum of the two inputs      */
DECL|method|maxLength (int n, Object value)
specifier|private
specifier|static
name|int
name|maxLength
parameter_list|(
name|int
name|n
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|n
argument_list|,
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|length
argument_list|()
else|:
literal|0
argument_list|)
return|;
block|}
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mockFs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

