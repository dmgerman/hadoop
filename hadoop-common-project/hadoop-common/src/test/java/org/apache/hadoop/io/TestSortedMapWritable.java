begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests SortedMapWritable  */
end_comment

begin_class
DECL|class|TestSortedMapWritable
specifier|public
class|class
name|TestSortedMapWritable
block|{
comment|/** the test */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSortedMapWritable ()
specifier|public
name|void
name|testSortedMapWritable
parameter_list|()
block|{
name|Text
index|[]
name|keys
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key3"
argument_list|)
block|,     }
decl_stmt|;
name|BytesWritable
index|[]
name|values
init|=
block|{
operator|new
name|BytesWritable
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|BytesWritable
argument_list|(
literal|"value2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|BytesWritable
argument_list|(
literal|"value3"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|SortedMapWritable
name|inMap
init|=
operator|new
name|SortedMapWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inMap
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inMap
operator|.
name|firstKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inMap
operator|.
name|lastKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|keys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SortedMapWritable
name|outMap
init|=
operator|new
name|SortedMapWritable
argument_list|(
name|inMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inMap
operator|.
name|size
argument_list|()
argument_list|,
name|outMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|inMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|outMap
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|WritableComparable
operator|)
name|outMap
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now for something a little harder...
name|Text
index|[]
name|maps
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"map1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"map2"
argument_list|)
block|}
decl_stmt|;
name|SortedMapWritable
name|mapOfMaps
init|=
operator|new
name|SortedMapWritable
argument_list|()
decl_stmt|;
name|mapOfMaps
operator|.
name|put
argument_list|(
name|maps
index|[
literal|0
index|]
argument_list|,
name|inMap
argument_list|)
expr_stmt|;
name|mapOfMaps
operator|.
name|put
argument_list|(
name|maps
index|[
literal|1
index|]
argument_list|,
name|outMap
argument_list|)
expr_stmt|;
name|SortedMapWritable
name|copyOfMapOfMaps
init|=
operator|new
name|SortedMapWritable
argument_list|(
name|mapOfMaps
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|copyOfMapOfMaps
operator|.
name|containsKey
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SortedMapWritable
name|a
init|=
operator|(
name|SortedMapWritable
operator|)
name|mapOfMaps
operator|.
name|get
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|SortedMapWritable
name|b
init|=
operator|(
name|SortedMapWritable
operator|)
name|copyOfMapOfMaps
operator|.
name|get
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Writable
name|key
range|:
name|a
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|b
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// This will work because we know what we put into each set
name|WritableComparable
name|aValue
init|=
operator|(
name|WritableComparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|WritableComparable
name|bValue
init|=
operator|(
name|WritableComparable
operator|)
name|b
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aValue
operator|.
name|compareTo
argument_list|(
name|bValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that number of "unknown" classes is propagated across multiple copies.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testForeignClass ()
specifier|public
name|void
name|testForeignClass
parameter_list|()
block|{
name|SortedMapWritable
name|inMap
init|=
operator|new
name|SortedMapWritable
argument_list|()
decl_stmt|;
name|inMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key"
argument_list|)
argument_list|,
operator|new
name|UTF8
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|inMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
operator|new
name|UTF8
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|SortedMapWritable
name|outMap
init|=
operator|new
name|SortedMapWritable
argument_list|(
name|inMap
argument_list|)
decl_stmt|;
name|SortedMapWritable
name|copyOfCopy
init|=
operator|new
name|SortedMapWritable
argument_list|(
name|outMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyOfCopy
operator|.
name|getNewClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if equal and hashCode method still hold the contract.    */
annotation|@
name|Test
DECL|method|testEqualsAndHashCode ()
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
name|String
name|failureReason
decl_stmt|;
name|SortedMapWritable
name|mapA
init|=
operator|new
name|SortedMapWritable
argument_list|()
decl_stmt|;
name|SortedMapWritable
name|mapB
init|=
operator|new
name|SortedMapWritable
argument_list|()
decl_stmt|;
comment|// Sanity checks
name|failureReason
operator|=
literal|"SortedMapWritable couldn't be initialized. Got null reference"
expr_stmt|;
name|assertNotNull
argument_list|(
name|failureReason
argument_list|,
name|mapA
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|failureReason
argument_list|,
name|mapB
argument_list|)
expr_stmt|;
comment|// Basic null check
name|assertFalse
argument_list|(
literal|"equals method returns true when passed null"
argument_list|,
name|mapA
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// When entry set is empty, they should be equal
name|assertTrue
argument_list|(
literal|"Two empty SortedMapWritables are no longer equal"
argument_list|,
name|mapA
operator|.
name|equals
argument_list|(
name|mapB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup
name|Text
index|[]
name|keys
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
block|}
decl_stmt|;
name|BytesWritable
index|[]
name|values
init|=
block|{
operator|new
name|BytesWritable
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|BytesWritable
argument_list|(
literal|"value2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|mapA
operator|.
name|put
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mapB
operator|.
name|put
argument_list|(
name|keys
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// entrySets are different
name|failureReason
operator|=
literal|"Two SortedMapWritables with different data are now equal"
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
name|mapA
operator|.
name|hashCode
argument_list|()
operator|!=
name|mapB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
operator|!
name|mapA
operator|.
name|equals
argument_list|(
name|mapB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
operator|!
name|mapB
operator|.
name|equals
argument_list|(
name|mapA
argument_list|)
argument_list|)
expr_stmt|;
name|mapA
operator|.
name|put
argument_list|(
name|keys
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|mapB
operator|.
name|put
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// entrySets are now same
name|failureReason
operator|=
literal|"Two SortedMapWritables with same entry sets formed in different order are now different"
expr_stmt|;
name|assertEquals
argument_list|(
name|failureReason
argument_list|,
name|mapA
operator|.
name|hashCode
argument_list|()
argument_list|,
name|mapB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
name|mapA
operator|.
name|equals
argument_list|(
name|mapB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
name|mapB
operator|.
name|equals
argument_list|(
name|mapA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let's check if entry sets of same keys but different values
name|mapA
operator|.
name|put
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|mapA
operator|.
name|put
argument_list|(
name|keys
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|failureReason
operator|=
literal|"Two SortedMapWritables with different content are now equal"
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
name|mapA
operator|.
name|hashCode
argument_list|()
operator|!=
name|mapB
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
operator|!
name|mapA
operator|.
name|equals
argument_list|(
name|mapB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failureReason
argument_list|,
operator|!
name|mapB
operator|.
name|equals
argument_list|(
name|mapA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

