begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.loadGenerator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|loadGenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|CreateOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** The load generator is a tool for testing NameNode behavior under  * different client loads. Note there is a subclass of this clas that lets   * you run a the load generator as a MapReduce job (see LoadGeneratorMR in the   * MapReduce project.  *   * The loadGenerator allows the user to generate different mixes of read, write,  * and list requests by specifying the probabilities of read and  * write. The user controls the intensity of the load by  * adjusting parameters for the number of worker threads and the delay  * between operations. While load generators are running, the user  * can profile and monitor the running of the NameNode. When a load  * generator exits, it print some NameNode statistics like the average  * execution time of each kind of operations and the NameNode  * throughput.  *  * The program can run in one of two forms. As a regular single process command  * that runs multiple threads to generate load on the NN or as a Map Reduce  * program that runs multiple (multi-threaded) map tasks that generate load  * on the NN; the results summary is generated by a single reduce task.  *   *   * The user may either specify constant duration, read and write   * probabilities via the command line, or may specify a text file  * that acts as a script of which read and write probabilities to  * use for specified durations. If no duration is specified the program  * runs till killed (duration required if run as MapReduce).  *   * The script takes the form of lines of duration in seconds, read  * probability and write probability, each separated by white space.  * Blank lines and lines starting with # (comments) are ignored. If load  * generator is run as a MapReduce program then the script file needs to be  * accessible on the the Map task as a HDFS file.  *   * After command line argument parsing and data initialization,  * the load generator spawns the number of worker threads   * as specified by the user.  * Each thread sends a stream of requests to the NameNode.  * For each iteration, it first decides if it is going to read a file,  * create a file, or listing a directory following the read and write   * probabilities specified by the user.  * When reading, it randomly picks a file in the test space and reads  * the entire file. When writing, it randomly picks a directory in the  * test space and creates a file whose name consists of the current   * machine's host name and the thread id. The length of the file  * follows Gaussian distribution with an average size of 2 blocks and  * the standard deviation of 1 block. The new file is filled with 'a'.  * Immediately after the file creation completes, the file is deleted  * from the test space.  * While listing, it randomly picks a directory in the test space and  * list the directory content.  * Between two consecutive operations, the thread pauses for a random  * amount of time in the range of [0, maxDelayBetweenOps]   * if the specified max delay is not zero.  * All threads are stopped when the specified elapsed time has passed   * in command-line execution, or all the lines of script have been   * executed, if using a script.  * Before exiting, the program prints the average execution for   * each kind of NameNode operations, and the number of requests  * served by the NameNode.  *  * The synopsis of the command is  * java LoadGenerator  *   -readProbability<read probability>: read probability [0, 1]  *                                        with a default value of 0.3333.   *   -writeProbability<write probability>: write probability [0, 1]  *                                         with a default value of 0.3333.  *   -root<root>: test space with a default value of /testLoadSpace  *   -maxDelayBetweenOps<maxDelayBetweenOpsInMillis>:   *      Max delay in the unit of milliseconds between two operations with a   *      default value of 0 indicating no delay.  *   -numOfThreads<numOfThreads>:   *      number of threads to spawn with a default value of 200.  *   -elapsedTime<elapsedTimeInSecs>:   *      the elapsed time of program with a default value of 0   *      indicating running forever  *   -startTime<startTimeInMillis> : when the threads start to run.  *   -scriptFile<file name>: text file to parse for scripted operation  */
end_comment

begin_class
DECL|class|LoadGenerator
specifier|public
class|class
name|LoadGenerator
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoadGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
specifier|static
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|field|root
specifier|protected
specifier|static
name|Path
name|root
init|=
name|DataGenerator
operator|.
name|DEFAULT_ROOT
decl_stmt|;
DECL|field|fc
specifier|private
specifier|static
name|FileContext
name|fc
decl_stmt|;
DECL|field|maxDelayBetweenOps
specifier|protected
specifier|static
name|int
name|maxDelayBetweenOps
init|=
literal|0
decl_stmt|;
DECL|field|numOfThreads
specifier|protected
specifier|static
name|int
name|numOfThreads
init|=
literal|200
decl_stmt|;
DECL|field|durations
specifier|protected
specifier|static
name|long
index|[]
name|durations
init|=
block|{
literal|0
block|}
decl_stmt|;
DECL|field|readProbs
specifier|protected
specifier|static
name|double
index|[]
name|readProbs
init|=
block|{
literal|0.3333
block|}
decl_stmt|;
DECL|field|writeProbs
specifier|protected
specifier|static
name|double
index|[]
name|writeProbs
init|=
block|{
literal|0.3333
block|}
decl_stmt|;
DECL|field|currentIndex
specifier|private
specifier|static
specifier|volatile
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
DECL|field|totalTime
specifier|protected
specifier|static
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
DECL|field|startTime
specifier|protected
specifier|static
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|10000
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|final
specifier|static
specifier|private
name|int
name|BLOCK_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|files
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// a table of file names
DECL|field|dirs
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// a table of directory names
DECL|field|r
specifier|protected
specifier|static
name|Random
name|r
init|=
literal|null
decl_stmt|;
DECL|field|seed
specifier|protected
specifier|static
name|long
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|scriptFile
specifier|protected
specifier|static
name|String
name|scriptFile
init|=
literal|null
decl_stmt|;
DECL|field|FLAGFILE_DEFAULT
specifier|protected
specifier|static
specifier|final
name|String
name|FLAGFILE_DEFAULT
init|=
literal|"/tmp/flagFile"
decl_stmt|;
DECL|field|flagFile
specifier|protected
specifier|static
name|Path
name|flagFile
init|=
operator|new
name|Path
argument_list|(
name|FLAGFILE_DEFAULT
argument_list|)
decl_stmt|;
DECL|field|hostname
specifier|protected
name|String
name|hostname
decl_stmt|;
DECL|field|USAGE_CMD
specifier|final
specifier|private
specifier|static
name|String
name|USAGE_CMD
init|=
literal|"java LoadGenerator\n"
decl_stmt|;
DECL|field|USAGE_ARGS
specifier|final
specifier|protected
specifier|static
name|String
name|USAGE_ARGS
init|=
literal|"-readProbability<read probability>\n"
operator|+
literal|"-writeProbability<write probability>\n"
operator|+
literal|"-root<root>\n"
operator|+
literal|"-maxDelayBetweenOps<maxDelayBetweenOpsInMillis>\n"
operator|+
literal|"-numOfThreads<numOfThreads>\n"
operator|+
literal|"-elapsedTime<elapsedTimeInSecs>\n"
operator|+
literal|"-startTime<startTimeInMillis>\n"
operator|+
literal|"-scriptFile<filename>\n"
operator|+
literal|"-flagFile<filename>"
decl_stmt|;
DECL|field|USAGE
specifier|final
specifier|private
specifier|static
name|String
name|USAGE
init|=
name|USAGE_CMD
operator|+
name|USAGE_ARGS
decl_stmt|;
DECL|field|WRITE_CONTENTS
specifier|private
specifier|final
name|byte
index|[]
name|WRITE_CONTENTS
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
DECL|field|ERR_TEST_FAILED
specifier|private
specifier|static
specifier|final
name|int
name|ERR_TEST_FAILED
init|=
literal|2
decl_stmt|;
comment|/** Constructor */
DECL|method|LoadGenerator ()
specifier|public
name|LoadGenerator
parameter_list|()
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|hostname
operator|=
name|addr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|WRITE_CONTENTS
argument_list|,
operator|(
name|byte
operator|)
literal|'a'
argument_list|)
expr_stmt|;
block|}
DECL|method|LoadGenerator (Configuration conf)
specifier|public
name|LoadGenerator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|this
argument_list|()
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|OPEN
specifier|protected
specifier|final
specifier|static
name|int
name|OPEN
init|=
literal|0
decl_stmt|;
DECL|field|LIST
specifier|protected
specifier|final
specifier|static
name|int
name|LIST
init|=
literal|1
decl_stmt|;
DECL|field|CREATE
specifier|protected
specifier|final
specifier|static
name|int
name|CREATE
init|=
literal|2
decl_stmt|;
DECL|field|WRITE_CLOSE
specifier|protected
specifier|final
specifier|static
name|int
name|WRITE_CLOSE
init|=
literal|3
decl_stmt|;
DECL|field|DELETE
specifier|protected
specifier|final
specifier|static
name|int
name|DELETE
init|=
literal|4
decl_stmt|;
DECL|field|TOTAL_OP_TYPES
specifier|protected
specifier|final
specifier|static
name|int
name|TOTAL_OP_TYPES
init|=
literal|5
decl_stmt|;
DECL|field|executionTime
specifier|protected
specifier|static
name|long
index|[]
name|executionTime
init|=
operator|new
name|long
index|[
name|TOTAL_OP_TYPES
index|]
decl_stmt|;
DECL|field|numOfOps
specifier|protected
specifier|static
name|long
index|[]
name|numOfOps
init|=
operator|new
name|long
index|[
name|TOTAL_OP_TYPES
index|]
decl_stmt|;
DECL|field|totalOps
specifier|protected
specifier|static
name|long
name|totalOps
init|=
literal|0
decl_stmt|;
comment|// across all of types
comment|/** A thread sends a stream of requests to the NameNode.    * At each iteration, it first decides if it is going to read a file,    * create a file, or listing a directory following the read    * and write probabilities.    * When reading, it randomly picks a file in the test space and reads    * the entire file. When writing, it randomly picks a directory in the    * test space and creates a file whose name consists of the current     * machine's host name and the thread id. The length of the file    * follows Gaussian distribution with an average size of 2 blocks and    * the standard deviation of 1 block. The new file is filled with 'a'.    * Immediately after the file creation completes, the file is deleted    * from the test space.    * While listing, it randomly picks a directory in the test space and    * list the directory content.    * Between two consecutive operations, the thread pauses for a random    * amount of time in the range of [0, maxDelayBetweenOps]     * if the specified max delay is not zero.    * A thread runs for the specified elapsed time if the time isn't zero.    * Otherwise, it runs forever.    */
DECL|class|DFSClientThread
specifier|private
class|class
name|DFSClientThread
extends|extends
name|Thread
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|executionTime
specifier|private
name|long
index|[]
name|executionTime
init|=
operator|new
name|long
index|[
name|TOTAL_OP_TYPES
index|]
decl_stmt|;
DECL|field|totalNumOfOps
specifier|private
name|long
index|[]
name|totalNumOfOps
init|=
operator|new
name|long
index|[
name|TOTAL_OP_TYPES
index|]
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|method|DFSClientThread (int id)
specifier|private
name|DFSClientThread
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/** Main loop for each thread      * Each iteration decides what's the next operation and then pauses.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
name|nextOp
argument_list|()
expr_stmt|;
name|delay
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Let the thread pause for a random amount of time in the range of      * [0, maxDelayBetweenOps] if the delay is not zero. Otherwise, no pause.      */
DECL|method|delay ()
specifier|private
name|void
name|delay
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|maxDelayBetweenOps
operator|>
literal|0
condition|)
block|{
name|int
name|delay
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxDelayBetweenOps
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Perform the next operation.       *       * Depending on the read and write probabilities, the next      * operation could be either read, write, or list.      */
DECL|method|nextOp ()
specifier|private
name|void
name|nextOp
parameter_list|()
throws|throws
name|IOException
block|{
name|double
name|rn
init|=
name|r
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|currentIndex
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Thread "
operator|+
name|this
operator|.
name|id
operator|+
literal|" moving to index "
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|rn
operator|<
name|readProbs
index|[
name|i
index|]
condition|)
block|{
name|read
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rn
operator|<
name|readProbs
index|[
name|i
index|]
operator|+
name|writeProbs
index|[
name|i
index|]
condition|)
block|{
name|write
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|list
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Read operation randomly picks a file in the test space and reads      * the entire file */
DECL|method|read ()
specifier|private
name|void
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|files
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|files
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|fc
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|executionTime
index|[
name|OPEN
index|]
operator|+=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|totalNumOfOps
index|[
name|OPEN
index|]
operator|++
expr_stmt|;
while|while
condition|(
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** The write operation randomly picks a directory in the      * test space and creates a file whose name consists of the current       * machine's host name and the thread id. The length of the file      * follows Gaussian distribution with an average size of 2 blocks and      * the standard deviation of 1 block. The new file is filled with 'a'.      * Immediately after the file creation completes, the file is deleted      * from the test space.      */
DECL|method|write ()
specifier|private
name|void
name|write
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|dirs
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|dirName
argument_list|,
name|hostname
operator|+
name|id
argument_list|)
decl_stmt|;
name|double
name|fileSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|fileSize
operator|=
name|r
operator|.
name|nextGaussian
argument_list|()
operator|+
literal|2
operator|)
operator|<=
literal|0
condition|)
block|{}
name|genFile
argument_list|(
name|file
argument_list|,
call|(
name|long
call|)
argument_list|(
name|fileSize
operator|*
name|BLOCK_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|fc
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|executionTime
index|[
name|DELETE
index|]
operator|+=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|totalNumOfOps
index|[
name|DELETE
index|]
operator|++
expr_stmt|;
block|}
comment|/** The list operation randomly picks a directory in the test space and      * list the directory content.      */
DECL|method|list ()
specifier|private
name|void
name|list
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|dirs
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|dirs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|fc
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
name|executionTime
index|[
name|LIST
index|]
operator|+=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|totalNumOfOps
index|[
name|LIST
index|]
operator|++
expr_stmt|;
block|}
comment|/** Create a file with a length of<code>fileSize</code>.      * The file is filled with 'a'.      */
DECL|method|genFile (Path file, long fileSize)
specifier|private
name|void
name|genFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|fileSize
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fc
operator|.
name|create
argument_list|(
name|file
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|CreateOpts
operator|.
name|createParent
argument_list|()
argument_list|,
name|CreateOpts
operator|.
name|bufferSize
argument_list|(
literal|4096
argument_list|)
argument_list|,
name|CreateOpts
operator|.
name|repFac
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|executionTime
index|[
name|CREATE
index|]
operator|+=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|numOfOps
index|[
name|CREATE
index|]
operator|++
expr_stmt|;
name|long
name|i
init|=
name|fileSize
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|long
name|s
init|=
name|Math
operator|.
name|min
argument_list|(
name|fileSize
argument_list|,
name|WRITE_CONTENTS
operator|.
name|length
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|WRITE_CONTENTS
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|s
argument_list|)
expr_stmt|;
name|i
operator|-=
name|s
expr_stmt|;
block|}
name|startTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|executionTime
index|[
name|WRITE_CLOSE
index|]
operator|+=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|numOfOps
index|[
name|WRITE_CLOSE
index|]
operator|++
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Main function called by tool runner.    * It first initializes data by parsing the command line arguments.    * It then calls the loadGenerator    */
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|parseArgs
argument_list|(
literal|false
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
return|return
name|exitCode
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running LoadGenerator against fileSystem: "
operator|+
name|FileContext
operator|.
name|getFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|generateLoadOnNN
argument_list|()
expr_stmt|;
name|printResults
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
DECL|method|stopFileCreated ()
name|boolean
name|stopFileCreated
parameter_list|()
block|{
try|try
block|{
name|fc
operator|.
name|getFileStatus
argument_list|(
name|flagFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got error when checking if file exists:"
operator|+
name|flagFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Flag file was created. Stopping the test."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**   * This is the main function - run threads to generate load on NN   * It starts the number of DFSClient threads as specified by   * the user.   * It stops all the threads when the specified elapsed time is passed.   */
DECL|method|generateLoadOnNN ()
specifier|protected
name|int
name|generateLoadOnNN
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|hostHashCode
init|=
name|hostname
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|seed
operator|==
literal|0
condition|)
block|{
name|r
operator|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|hostHashCode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|Random
argument_list|(
name|seed
operator|+
name|hostHashCode
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not initialize the file system: "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|status
init|=
name|initFileDirTables
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
return|return
name|status
return|;
block|}
name|barrier
argument_list|()
expr_stmt|;
name|DFSClientThread
index|[]
name|threads
init|=
operator|new
name|DFSClientThread
index|[
name|numOfThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|DFSClientThread
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|durations
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|durations
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// There is a fixed run time
while|while
condition|(
name|shouldRun
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|totalTime
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|totalTime
operator|>=
name|durations
index|[
literal|0
index|]
operator|||
name|stopFileCreated
argument_list|()
condition|)
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// script run
while|while
condition|(
name|shouldRun
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|durations
index|[
name|currentIndex
index|]
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|totalTime
operator|+=
name|durations
index|[
name|currentIndex
index|]
expr_stmt|;
comment|// Are we on the final line of the script?
if|if
condition|(
operator|(
name|currentIndex
operator|+
literal|1
operator|)
operator|==
name|durations
operator|.
name|length
operator|||
name|stopFileCreated
argument_list|()
condition|)
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving to index "
operator|+
name|currentIndex
operator|+
literal|": r = "
operator|+
name|readProbs
index|[
name|currentIndex
index|]
operator|+
literal|", w = "
operator|+
name|writeProbs
operator|+
literal|" for duration "
operator|+
name|durations
index|[
name|currentIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|currentIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done with testing.  Waiting for threads to finish."
argument_list|)
expr_stmt|;
block|}
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DFSClientThread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_OP_TYPES
condition|;
name|i
operator|++
control|)
block|{
name|executionTime
index|[
name|i
index|]
operator|+=
name|thread
operator|.
name|executionTime
index|[
name|i
index|]
expr_stmt|;
name|numOfOps
index|[
name|i
index|]
operator|+=
name|thread
operator|.
name|totalNumOfOps
index|[
name|i
index|]
expr_stmt|;
block|}
name|failed
operator|=
name|failed
operator|||
name|thread
operator|.
name|failed
expr_stmt|;
block|}
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|failed
condition|)
block|{
name|exitCode
operator|=
operator|-
name|ERR_TEST_FAILED
expr_stmt|;
block|}
name|totalOps
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_OP_TYPES
condition|;
name|i
operator|++
control|)
block|{
name|totalOps
operator|+=
name|numOfOps
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|printResults (PrintStream out)
specifier|protected
specifier|static
name|void
name|printResults
parameter_list|(
name|PrintStream
name|out
parameter_list|)
throws|throws
name|UnsupportedFileSystemException
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Result of running LoadGenerator against fileSystem: "
operator|+
name|FileContext
operator|.
name|getFileContext
argument_list|()
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|numOfOps
index|[
name|OPEN
index|]
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Average open execution time: "
operator|+
operator|(
name|double
operator|)
name|executionTime
index|[
name|OPEN
index|]
operator|/
name|numOfOps
index|[
name|OPEN
index|]
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numOfOps
index|[
name|LIST
index|]
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Average list execution time: "
operator|+
operator|(
name|double
operator|)
name|executionTime
index|[
name|LIST
index|]
operator|/
name|numOfOps
index|[
name|LIST
index|]
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numOfOps
index|[
name|DELETE
index|]
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Average deletion execution time: "
operator|+
operator|(
name|double
operator|)
name|executionTime
index|[
name|DELETE
index|]
operator|/
name|numOfOps
index|[
name|DELETE
index|]
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Average create execution time: "
operator|+
operator|(
name|double
operator|)
name|executionTime
index|[
name|CREATE
index|]
operator|/
name|numOfOps
index|[
name|CREATE
index|]
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Average write_close execution time: "
operator|+
operator|(
name|double
operator|)
name|executionTime
index|[
name|WRITE_CLOSE
index|]
operator|/
name|numOfOps
index|[
name|WRITE_CLOSE
index|]
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalTime
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Average operations per second: "
operator|+
operator|(
name|double
operator|)
name|totalOps
operator|/
name|totalTime
operator|+
literal|"ops/s"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/** Parse the command line arguments and initialize the data */
DECL|method|parseArgs (boolean runAsMapReduce, String[] args)
specifier|protected
name|int
name|parseArgs
parameter_list|(
name|boolean
name|runAsMapReduce
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-scriptFile"
argument_list|)
condition|)
block|{
name|scriptFile
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
if|if
condition|(
name|durations
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't specify elapsedTime and use script."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-readProbability"
argument_list|)
condition|)
block|{
if|if
condition|(
name|scriptFile
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't specify probabilities and use script."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|readProbs
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|readProbs
index|[
literal|0
index|]
operator|<
literal|0
operator|||
name|readProbs
index|[
literal|0
index|]
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The read probability must be [0, 1]: "
operator|+
name|readProbs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-writeProbability"
argument_list|)
condition|)
block|{
if|if
condition|(
name|scriptFile
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't specify probabilities and use script."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|writeProbs
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeProbs
index|[
literal|0
index|]
operator|<
literal|0
operator|||
name|writeProbs
index|[
literal|0
index|]
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The write probability must be [0, 1]: "
operator|+
name|writeProbs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-root"
argument_list|)
condition|)
block|{
name|root
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-maxDelayBetweenOps"
argument_list|)
condition|)
block|{
name|maxDelayBetweenOps
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
comment|// in milliseconds
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-numOfThreads"
argument_list|)
condition|)
block|{
name|numOfThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|numOfThreads
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Number of threads must be positive: "
operator|+
name|numOfThreads
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-startTime"
argument_list|)
condition|)
block|{
name|startTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-elapsedTime"
argument_list|)
condition|)
block|{
if|if
condition|(
name|scriptFile
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't specify elapsedTime and use script."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|durations
index|[
literal|0
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-seed"
argument_list|)
condition|)
block|{
name|seed
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-flagFile"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"got flagFile:"
operator|+
name|flagFile
argument_list|)
expr_stmt|;
name|flagFile
operator|=
operator|new
name|Path
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Illegal parameter: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|USAGE
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Load Script File if not MR; for MR scriptFile is loaded by Mapper
if|if
condition|(
operator|!
name|runAsMapReduce
operator|&&
name|scriptFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|loadScriptFile
argument_list|(
name|scriptFile
argument_list|,
literal|true
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readProbs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|readProbs
index|[
name|i
index|]
operator|+
name|writeProbs
index|[
name|i
index|]
operator|<
literal|0
operator|||
name|readProbs
index|[
name|i
index|]
operator|+
name|writeProbs
index|[
name|i
index|]
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The sum of read probability and write probability must be [0, 1]: "
operator|+
name|readProbs
index|[
name|i
index|]
operator|+
literal|" "
operator|+
name|writeProbs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|parseScriptLine (String line, ArrayList<Long> duration, ArrayList<Double> readProb, ArrayList<Double> writeProb)
specifier|private
specifier|static
name|void
name|parseScriptLine
parameter_list|(
name|String
name|line
parameter_list|,
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|duration
parameter_list|,
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|readProb
parameter_list|,
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|writeProb
parameter_list|)
block|{
name|String
index|[]
name|a
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Incorrect number of parameters: "
operator|+
name|line
argument_list|)
throw|;
block|}
try|try
block|{
name|long
name|d
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|a
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|double
name|r
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|a
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|double
name|w
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|a
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|d
operator|>=
literal|0
argument_list|,
literal|"Invalid duration: "
operator|+
name|d
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|0
operator|<=
name|r
operator|&&
name|r
operator|<=
literal|1.0
argument_list|,
literal|"The read probability must be [0, 1]: "
operator|+
name|r
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|0
operator|<=
name|w
operator|&&
name|w
operator|<=
literal|1.0
argument_list|,
literal|"The read probability must be [0, 1]: "
operator|+
name|w
argument_list|)
expr_stmt|;
name|readProb
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|duration
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writeProb
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot parse: "
operator|+
name|line
argument_list|)
throw|;
block|}
block|}
comment|/**    * Read a script file of the form: lines of text with duration in seconds,    * read probability and write probability, separated by white space.    *     * @param filename Script file    * @return 0 if successful, -1 if not    * @throws IOException if errors with file IO    */
DECL|method|loadScriptFile (String filename, boolean readLocally)
specifier|protected
specifier|static
name|int
name|loadScriptFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|boolean
name|readLocally
parameter_list|)
throws|throws
name|IOException
block|{
name|FileContext
name|fc
decl_stmt|;
if|if
condition|(
name|readLocally
condition|)
block|{
comment|// read locally - program is run without MR
name|fc
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|()
expr_stmt|;
comment|// use default file system
block|}
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fc
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to open scriptFile: "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|InputStreamReader
name|inr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|inr
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|duration
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|readProb
init|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|writeProb
init|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lineNum
init|=
literal|0
decl_stmt|;
name|String
name|line
decl_stmt|;
comment|// Read script, parse values, build array of duration, read and write probs
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lineNum
operator|++
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// skip comments and blanks
continue|continue;
name|parseScriptLine
argument_list|(
name|line
argument_list|,
name|duration
argument_list|,
name|readProb
argument_list|,
name|writeProb
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Line: "
operator|+
name|lineNum
operator|+
literal|", "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
comment|// Copy vectors to arrays of values, to avoid autoboxing overhead later
name|durations
operator|=
operator|new
name|long
index|[
name|duration
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|readProbs
operator|=
operator|new
name|double
index|[
name|readProb
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|writeProbs
operator|=
operator|new
name|double
index|[
name|writeProb
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|durations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|durations
index|[
name|i
index|]
operator|=
name|duration
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|readProbs
index|[
name|i
index|]
operator|=
name|readProb
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writeProbs
index|[
name|i
index|]
operator|=
name|writeProb
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|durations
index|[
literal|0
index|]
operator|==
literal|0
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Initial duration set to 0.  "
operator|+
literal|"Will loop until stopped manually."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/** Create a table that contains all directories under root and    * another table that contains all files under root.    */
DECL|method|initFileDirTables ()
specifier|private
name|int
name|initFileDirTables
parameter_list|()
block|{
try|try
block|{
name|initFileDirTables
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|dirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The test space "
operator|+
name|root
operator|+
literal|" is empty"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The test space "
operator|+
name|root
operator|+
literal|" does not have any file"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/** Create a table that contains all directories under the specified path and    * another table that contains all files under the specified path and    * whose name starts with "_file_".    */
DECL|method|initFileDirTables (Path path)
specifier|private
name|void
name|initFileDirTables
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|stats
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|stat
range|:
name|stats
control|)
block|{
if|if
condition|(
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|initFileDirTables
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|filePath
init|=
name|stat
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|filePath
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|StructureGenerator
operator|.
name|FILE_NAME_PREFIX
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|filePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Returns when the current number of seconds from the epoch equals    * the command line argument given by<code>-startTime</code>.    * This allows multiple instances of this program, running on clock    * synchronized nodes, to start at roughly the same time.    */
DECL|method|barrier ()
specifier|private
specifier|static
name|void
name|barrier
parameter_list|()
block|{
name|long
name|sleepTime
decl_stmt|;
while|while
condition|(
operator|(
name|sleepTime
operator|=
name|startTime
operator|-
name|Time
operator|.
name|now
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{       }
block|}
block|}
comment|/** Main program    *     * @param args command line arguments    * @throws Exception    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|LoadGenerator
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

