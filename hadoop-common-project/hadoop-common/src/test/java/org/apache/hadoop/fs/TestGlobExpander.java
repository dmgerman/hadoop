begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestGlobExpander
specifier|public
class|class
name|TestGlobExpander
block|{
annotation|@
name|Test
DECL|method|testExpansionIsIdentical ()
specifier|public
name|void
name|testExpansionIsIdentical
parameter_list|()
throws|throws
name|IOException
block|{
name|checkExpansionIsIdentical
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"/}"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"/}{a,b}"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"{/"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"{a}"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"{a,b}/{b,c}"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"p\\{a/b,c/d\\}s"
argument_list|)
expr_stmt|;
name|checkExpansionIsIdentical
argument_list|(
literal|"p{a\\/b,c\\/d}s"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpansion ()
specifier|public
name|void
name|testExpansion
parameter_list|()
throws|throws
name|IOException
block|{
name|checkExpansion
argument_list|(
literal|"{a/b}"
argument_list|,
literal|"a/b"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"/}{a/b}"
argument_list|,
literal|"/}a/b"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"p{a/b,c/d}s"
argument_list|,
literal|"pa/bs"
argument_list|,
literal|"pc/ds"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"{a/b,c/d,{e,f}}"
argument_list|,
literal|"a/b"
argument_list|,
literal|"c/d"
argument_list|,
literal|"{e,f}"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"{a/b,c/d}{e,f}"
argument_list|,
literal|"a/b{e,f}"
argument_list|,
literal|"c/d{e,f}"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"{a,b}/{b,{c/d,e/f}}"
argument_list|,
literal|"{a,b}/b"
argument_list|,
literal|"{a,b}/c/d"
argument_list|,
literal|"{a,b}/e/f"
argument_list|)
expr_stmt|;
name|checkExpansion
argument_list|(
literal|"{a,b}/{c/\\d}"
argument_list|,
literal|"{a,b}/c/d"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExpansionIsIdentical (String filePattern)
specifier|private
name|void
name|checkExpansionIsIdentical
parameter_list|(
name|String
name|filePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExpansion
argument_list|(
name|filePattern
argument_list|,
name|filePattern
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExpansion (String filePattern, String... expectedExpansions)
specifier|private
name|void
name|checkExpansion
parameter_list|(
name|String
name|filePattern
parameter_list|,
name|String
modifier|...
name|expectedExpansions
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actualExpansions
init|=
name|GlobExpander
operator|.
name|expand
argument_list|(
name|filePattern
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Different number of expansions"
argument_list|,
name|expectedExpansions
operator|.
name|length
argument_list|,
name|actualExpansions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedExpansions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expansion of "
operator|+
name|filePattern
argument_list|,
name|expectedExpansions
index|[
name|i
index|]
argument_list|,
name|actualExpansions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

