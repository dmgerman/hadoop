begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestGenericWritable
operator|.
name|CONF_TEST_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestGenericWritable
operator|.
name|CONF_TEST_VALUE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestGenericWritable
operator|.
name|Baz
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestGenericWritable
operator|.
name|FooGenericWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestWritableSerialization
specifier|public
class|class
name|TestWritableSerialization
block|{
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testWritableSerialization ()
specifier|public
name|void
name|testWritableSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Text
name|before
init|=
operator|new
name|Text
argument_list|(
literal|"test writable"
argument_list|)
decl_stmt|;
name|Text
name|after
init|=
name|SerializationTestUtil
operator|.
name|testSerialization
argument_list|(
name|conf
argument_list|,
name|before
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWritableConfigurable ()
specifier|public
name|void
name|testWritableConfigurable
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set the configuration parameter
name|conf
operator|.
name|set
argument_list|(
name|CONF_TEST_KEY
argument_list|,
name|CONF_TEST_VALUE
argument_list|)
expr_stmt|;
comment|//reuse TestGenericWritable inner classes to test
comment|//writables that also implement Configurable.
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
name|generic
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Baz
name|baz
init|=
operator|new
name|Baz
argument_list|()
decl_stmt|;
name|generic
operator|.
name|set
argument_list|(
name|baz
argument_list|)
expr_stmt|;
name|Baz
name|result
init|=
name|SerializationTestUtil
operator|.
name|testSerialization
argument_list|(
name|conf
argument_list|,
name|baz
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|baz
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|testWritableComparatorJavaSerialization ()
specifier|public
name|void
name|testWritableComparatorJavaSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Serialization
name|ser
init|=
operator|new
name|JavaSerialization
argument_list|()
decl_stmt|;
name|Serializer
argument_list|<
name|TestWC
argument_list|>
name|serializer
init|=
name|ser
operator|.
name|getSerializer
argument_list|(
name|TestWC
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|open
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|TestWC
name|orig
init|=
operator|new
name|TestWC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Deserializer
argument_list|<
name|TestWC
argument_list|>
name|deserializer
init|=
name|ser
operator|.
name|getDeserializer
argument_list|(
name|TestWC
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deserializer
operator|.
name|open
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|TestWC
name|deser
init|=
name|deserializer
operator|.
name|deserialize
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|deserializer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
argument_list|,
name|deser
argument_list|)
expr_stmt|;
block|}
DECL|class|TestWC
specifier|static
class|class
name|TestWC
extends|extends
name|WritableComparator
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0x4344
decl_stmt|;
DECL|field|val
specifier|final
name|int
name|val
decl_stmt|;
DECL|method|TestWC ()
name|TestWC
parameter_list|()
block|{
name|this
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|TestWC (int val)
name|TestWC
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TestWC
condition|)
block|{
return|return
operator|(
operator|(
name|TestWC
operator|)
name|o
operator|)
operator|.
name|val
operator|==
name|val
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|val
return|;
block|}
block|}
block|}
end_class

end_unit

