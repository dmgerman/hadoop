begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|KerberosTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|Signer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|SignerSecretProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|StringSignerSecretProviderCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This class is tested for http server with SPENGO authentication.  */
end_comment

begin_class
DECL|class|TestHttpServerWithSpengo
specifier|public
class|class
name|TestHttpServerWithSpengo
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHttpServerWithSpengo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SECRET_STR
specifier|private
specifier|static
specifier|final
name|String
name|SECRET_STR
init|=
literal|"secret"
decl_stmt|;
DECL|field|HTTP_USER
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_USER
init|=
literal|"HTTP"
decl_stmt|;
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"hadoop.http.authentication."
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|20000
decl_stmt|;
DECL|field|httpSpnegoKeytabFile
specifier|private
specifier|static
name|File
name|httpSpnegoKeytabFile
init|=
operator|new
name|File
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoPrincipal
specifier|private
specifier|static
name|String
name|httpSpnegoPrincipal
init|=
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
DECL|field|realm
specifier|private
specifier|static
name|String
name|realm
init|=
name|KerberosTestUtils
operator|.
name|getRealm
argument_list|()
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestHttpServerWithSpengo
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-root"
argument_list|)
decl_stmt|;
DECL|field|testMiniKDC
specifier|private
specifier|static
name|MiniKdc
name|testMiniKDC
decl_stmt|;
DECL|field|secretFile
specifier|private
specifier|static
name|File
name|secretFile
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
name|SECRET_STR
argument_list|)
decl_stmt|;
DECL|field|authUgi
specifier|private
specifier|static
name|UserGroupInformation
name|authUgi
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testMiniKDC
operator|=
operator|new
name|MiniKdc
argument_list|(
name|MiniKdc
operator|.
name|createConf
argument_list|()
argument_list|,
name|testRootDir
argument_list|)
expr_stmt|;
name|testMiniKDC
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMiniKDC
operator|.
name|createPrincipal
argument_list|(
name|httpSpnegoKeytabFile
argument_list|,
name|HTTP_USER
operator|+
literal|"/localhost"
argument_list|,
literal|"keytab-user"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Couldn't setup MiniKDC"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"sun.security.krb5.debug"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|authUgi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"keytab-user"
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|secretFile
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|testMiniKDC
operator|!=
literal|null
condition|)
block|{
name|testMiniKDC
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * groupA    *  - userA    * groupB    *  - userA, userB    * groupC    *  - userC    * SPNEGO filter has been enabled.    * userA has the privilege to impersonate users in groupB.    * userA has admin access to all default servlets, but userB    * and userC don't have. So "/logs" can only be accessed by userA.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAuthenticationWithProxyUser ()
specifier|public
name|void
name|testAuthenticationWithProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|spengoConf
init|=
name|getSpengoConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|//setup logs dir
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup user group
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"userA"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"groupA"
block|,
literal|"groupB"
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"userB"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"groupB"
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"userC"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"groupC"
block|}
argument_list|)
expr_stmt|;
comment|// Make userA impersonate users in groupB
name|spengoConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.userA.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|spengoConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.userA.groups"
argument_list|,
literal|"groupB"
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|spengoConf
argument_list|)
expr_stmt|;
name|HttpServer2
name|httpServer
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create http server to test.
name|httpServer
operator|=
name|getCommonBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|spengoConf
argument_list|)
operator|.
name|setACL
argument_list|(
operator|new
name|AccessControlList
argument_list|(
literal|"userA groupA"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Get signer to encrypt token
name|Signer
name|signer
init|=
name|getSignerToEncrypt
argument_list|()
decl_stmt|;
comment|// setup auth token for userA
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
name|getEncryptedAuthToken
argument_list|(
name|signer
argument_list|,
literal|"userA"
argument_list|)
decl_stmt|;
name|String
name|serverURL
init|=
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
literal|"/"
decl_stmt|;
comment|// The default authenticator is kerberos.
name|AuthenticatedURL
name|authUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|()
decl_stmt|;
comment|// userA impersonates userB, it's allowed.
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"stacks"
block|,
literal|"jmx"
block|,
literal|"conf"
block|}
control|)
block|{
name|HttpURLConnection
name|conn
init|=
name|authUrl
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|serverURL
operator|+
name|servlet
operator|+
literal|"?doAs=userB"
argument_list|)
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// userA cannot impersonate userC, but for /stacks, /jmx and /conf,
comment|// they doesn't require users to authorize by default, so they
comment|// can be accessed.
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"stacks"
block|,
literal|"jmx"
block|,
literal|"conf"
block|}
control|)
block|{
name|HttpURLConnection
name|conn
init|=
name|authUrl
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|serverURL
operator|+
name|servlet
operator|+
literal|"?doAs=userC"
argument_list|)
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// "/logs" and "/logLevel" require admin authorization,
comment|// only userA has the access.
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"logLevel"
block|,
literal|"logs"
block|}
control|)
block|{
name|HttpURLConnection
name|conn
init|=
name|authUrl
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|serverURL
operator|+
name|servlet
operator|+
literal|"?doAs=userC"
argument_list|)
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// "/logs" and "/logLevel" require admin authorization,
comment|// only userA has the access.
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"logLevel"
block|,
literal|"logs"
block|}
control|)
block|{
name|HttpURLConnection
name|conn
init|=
name|authUrl
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|serverURL
operator|+
name|servlet
argument_list|)
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Setup token for userB
name|token
operator|=
name|getEncryptedAuthToken
argument_list|(
name|signer
argument_list|,
literal|"userB"
argument_list|)
expr_stmt|;
comment|// userB cannot access these servlets.
for|for
control|(
name|String
name|servlet
range|:
operator|new
name|String
index|[]
block|{
literal|"logLevel"
block|,
literal|"logs"
block|}
control|)
block|{
name|HttpURLConnection
name|conn
init|=
name|authUrl
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|serverURL
operator|+
name|servlet
argument_list|)
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSessionCookie ()
specifier|public
name|void
name|testSessionCookie
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HttpServer2
operator|.
name|FILTER_INITIALIZER_PROPERTY
argument_list|,
name|AuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|PREFIX
operator|+
literal|"simple.anonymous.allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"signer.secret.provider"
argument_list|,
name|TestSignerSecretProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"kerberos.keytab"
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"kerberos.principal"
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"cookie.domain"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setup logs dir
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|HttpServer2
name|httpServer
init|=
literal|null
decl_stmt|;
comment|// Create http server to test.
name|httpServer
operator|=
name|getCommonBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Get signer to encrypt token
specifier|final
name|Signer
name|signer
init|=
operator|new
name|Signer
argument_list|(
operator|new
name|TestSignerSecretProvider
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AuthenticatedURL
name|authUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
literal|"/conf"
argument_list|)
decl_stmt|;
comment|// this illustrates an inconsistency with AuthenticatedURL.  the
comment|// authenticator is only called when the token is not set.  if the
comment|// authenticator fails then it must throw an AuthenticationException to
comment|// the caller, yet the caller may see 401 for subsequent requests
comment|// that require re-authentication like token expiration.
specifier|final
name|UserGroupInformation
name|simpleUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"simple-user"
argument_list|)
decl_stmt|;
name|authUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TestSignerSecretProvider
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
comment|// initial request should trigger authentication and set the token.
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cookie
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// token should not change.
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// roll secret to invalidate token.
name|TestSignerSecretProvider
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// this may or may not happen.  under normal circumstances the
comment|// jdk will silently renegotiate and the client never sees a 401.
comment|// however in some cases the jdk will give up doing spnego.  since
comment|// the token is already set, the authenticator isn't invoked (which
comment|// would do the spnego if the jdk doesn't), which causes the client
comment|// to see a 401.
if|if
condition|(
name|conn
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
condition|)
block|{
comment|// if this happens, the token should be cleared which means the
comment|// next request should succeed and receive a new token.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|// token should change.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// token should not change.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"attempt"
operator|+
name|i
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// blow out the kerberos creds test only auth token is used.
name|Subject
name|s
init|=
name|Subject
operator|.
name|getSubject
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|oldCreds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|s
operator|.
name|getPrivateCredentials
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// token should not change.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"attempt"
operator|+
name|i
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"attempt"
operator|+
name|i
operator|+
literal|" "
operator|+
name|ae
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// invalidate token.  connections should fail now and token should be
comment|// unset.
name|TestSignerSecretProvider
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// restore the kerberos creds, should work again.
name|s
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|addAll
argument_list|(
name|oldCreds
argument_list|)
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// token should not change.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"attempt"
operator|+
name|i
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|simpleUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TestSignerSecretProvider
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|AuthenticatedURL
name|authUrl
init|=
operator|new
name|AuthenticatedURL
argument_list|()
decl_stmt|;
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
comment|// initial connect with unset token will trigger authenticator which
comment|// should fail since we have no creds and leave token unset.
try|try
block|{
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"should fail with no credentials"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ae
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GSSException
operator|.
name|class
argument_list|,
name|ae
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|GSSException
name|gsse
init|=
operator|(
name|GSSException
operator|)
name|ae
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GSSException
operator|.
name|NO_CRED
argument_list|,
name|gsse
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a valid token and save its value.
name|token
operator|=
name|getEncryptedAuthToken
argument_list|(
name|signer
argument_list|,
literal|"valid"
argument_list|)
expr_stmt|;
name|String
name|cookie
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// server should accept token.  after the request the token should
comment|// be set to the same value (ie. server didn't reissue cookie)
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cookie
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// change the secret to effectively invalidate the cookie.  see above
comment|// regarding inconsistency.  the authenticator has no way to know the
comment|// token is bad, so the client will encounter a 401 instead of
comment|// AuthenticationException.
name|TestSignerSecretProvider
operator|.
name|rollSecret
argument_list|()
expr_stmt|;
name|conn
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|token
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|TestSignerSecretProvider
specifier|public
specifier|static
class|class
name|TestSignerSecretProvider
extends|extends
name|SignerSecretProvider
block|{
DECL|field|n
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
DECL|field|secret
specifier|static
name|byte
index|[]
name|secret
decl_stmt|;
DECL|method|rollSecret ()
specifier|static
name|void
name|rollSecret
parameter_list|()
block|{
name|secret
operator|=
operator|(
literal|"secret["
operator|+
operator|(
name|n
operator|++
operator|)
operator|+
literal|"]"
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
DECL|method|TestSignerSecretProvider ()
specifier|public
name|TestSignerSecretProvider
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|init (Properties config, ServletContext servletContext, long tokenValidity)
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|,
name|ServletContext
name|servletContext
parameter_list|,
name|long
name|tokenValidity
parameter_list|)
throws|throws
name|Exception
block|{
name|rollSecret
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentSecret ()
specifier|public
name|byte
index|[]
name|getCurrentSecret
parameter_list|()
block|{
return|return
name|secret
return|;
block|}
annotation|@
name|Override
DECL|method|getAllSecrets ()
specifier|public
name|byte
index|[]
index|[]
name|getAllSecrets
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
name|secret
block|}
return|;
block|}
block|}
DECL|method|getEncryptedAuthToken (Signer signer, String user)
specifier|private
name|AuthenticatedURL
operator|.
name|Token
name|getEncryptedAuthToken
parameter_list|(
name|Signer
name|signer
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|AuthenticationToken
name|token
init|=
operator|new
name|AuthenticationToken
argument_list|(
name|user
argument_list|,
name|user
argument_list|,
literal|"kerberos"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setExpires
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TIMEOUT
argument_list|)
expr_stmt|;
return|return
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|(
name|signer
operator|.
name|sign
argument_list|(
name|token
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSignerToEncrypt ()
specifier|private
name|Signer
name|getSignerToEncrypt
parameter_list|()
throws|throws
name|Exception
block|{
name|SignerSecretProvider
name|secretProvider
init|=
name|StringSignerSecretProviderCreator
operator|.
name|newStringSignerSecretProvider
argument_list|()
decl_stmt|;
name|Properties
name|secretProviderProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|secretProviderProps
operator|.
name|setProperty
argument_list|(
name|AuthenticationFilter
operator|.
name|SIGNATURE_SECRET
argument_list|,
name|SECRET_STR
argument_list|)
expr_stmt|;
name|secretProvider
operator|.
name|init
argument_list|(
name|secretProviderProps
argument_list|,
literal|null
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
return|return
operator|new
name|Signer
argument_list|(
name|secretProvider
argument_list|)
return|;
block|}
DECL|method|getSpengoConf (Configuration conf)
specifier|private
name|Configuration
name|getSpengoConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HttpServer2
operator|.
name|FILTER_INITIALIZER_PROPERTY
argument_list|,
name|AuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|PREFIX
operator|+
literal|"simple.anonymous.allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"signature.secret.file"
argument_list|,
name|secretFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"kerberos.keytab"
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"kerberos.principal"
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"cookie.domain"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getCommonBuilder ()
specifier|private
name|HttpServer2
operator|.
name|Builder
name|getCommonBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addEndpoint
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:0"
argument_list|)
argument_list|)
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

