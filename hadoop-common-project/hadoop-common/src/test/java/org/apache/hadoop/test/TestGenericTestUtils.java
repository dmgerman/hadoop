begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestGenericTestUtils
specifier|public
class|class
name|TestGenericTestUtils
extends|extends
name|GenericTestUtils
block|{
annotation|@
name|Test
DECL|method|testAssertExceptionContainsNullEx ()
specifier|public
name|void
name|testAssertExceptionContainsNullEx
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|assertExceptionContains
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|E_NULL_THROWABLE
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAssertExceptionContainsNullString ()
specifier|public
name|void
name|testAssertExceptionContainsNullString
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|assertExceptionContains
argument_list|(
literal|""
argument_list|,
operator|new
name|BrokenException
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|E_NULL_THROWABLE_STRING
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAssertExceptionContainsWrongText ()
specifier|public
name|void
name|testAssertExceptionContainsWrongText
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|assertExceptionContains
argument_list|(
literal|"Expected"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"(actual)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|String
name|s
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
name|E_UNEXPECTED_EXCEPTION
argument_list|)
operator|||
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"(actual)"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No nested cause in assertion"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAssertExceptionContainsWorking ()
specifier|public
name|void
name|testAssertExceptionContainsWorking
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertExceptionContains
argument_list|(
literal|"Expected"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Expected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|BrokenException
specifier|private
specifier|static
class|class
name|BrokenException
extends|extends
name|Exception
block|{
DECL|method|BrokenException ()
specifier|public
name|BrokenException
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

