begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthMonitor
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthMonitor
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestHealthMonitor
specifier|public
class|class
name|TestHealthMonitor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHealthMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* bogus address to pass to constructor - never used */
DECL|field|BOGUS_ADDR
specifier|private
specifier|static
specifier|final
name|InetSocketAddress
name|BOGUS_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|mockProxy
specifier|private
name|HAServiceProtocol
name|mockProxy
decl_stmt|;
comment|/** How many times has createProxy been called */
DECL|field|createProxyLatch
specifier|private
specifier|volatile
name|CountDownLatch
name|createProxyLatch
decl_stmt|;
comment|/** Should throw an IOE when trying to connect */
DECL|field|shouldThrowOnCreateProxy
specifier|private
specifier|volatile
name|boolean
name|shouldThrowOnCreateProxy
init|=
literal|false
decl_stmt|;
DECL|field|hm
specifier|private
name|HealthMonitor
name|hm
decl_stmt|;
annotation|@
name|Before
DECL|method|setupHM ()
specifier|public
name|void
name|setupHM
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_CHECK_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_CONNECT_RETRY_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_SLEEP_AFTER_DISCONNECT_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|mockProxy
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HAServiceProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|getServiceState
argument_list|()
expr_stmt|;
name|hm
operator|=
operator|new
name|HealthMonitor
argument_list|(
name|conf
argument_list|,
name|BOGUS_ADDR
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HAServiceProtocol
name|createProxy
parameter_list|()
throws|throws
name|IOException
block|{
name|createProxyLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldThrowOnCreateProxy
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't connect"
argument_list|)
throw|;
block|}
return|return
name|mockProxy
return|;
block|}
block|}
expr_stmt|;
name|createProxyLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting health monitor"
argument_list|)
expr_stmt|;
name|hm
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for proxy to be created"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createProxyLatch
operator|.
name|await
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|createProxyLatch
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for HEALTHY signal"
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_HEALTHY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testMonitor ()
specifier|public
name|void
name|testMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocking bad health check, waiting for UNHEALTHY"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Fake health check failure"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_UNHEALTHY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning to healthy state, waiting for HEALTHY"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_HEALTHY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning an IOException, as if node went down"
argument_list|)
expr_stmt|;
comment|// should expect many rapid retries
name|createProxyLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|shouldThrowOnCreateProxy
operator|=
literal|true
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection lost (fake)"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_NOT_RESPONDING
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Monitor should retry if createProxy throws an IOE"
argument_list|,
name|createProxyLatch
operator|.
name|await
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning to healthy state, waiting for HEALTHY"
argument_list|)
expr_stmt|;
name|shouldThrowOnCreateProxy
operator|=
literal|false
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_HEALTHY
argument_list|)
expr_stmt|;
name|hm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hm
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hm
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the proper state is propagated when the health monitor    * sees an uncaught exception in its thread.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testHealthMonitorDies ()
specifier|public
name|void
name|testHealthMonitorDies
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocking RTE in health monitor, waiting for FAILED"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|OutOfMemoryError
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|HEALTH_MONITOR_FAILED
argument_list|)
expr_stmt|;
name|hm
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hm
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|hm
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that, if the callback throws an RTE, this will terminate the    * health monitor and thus change its state to FAILED    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testCallbackThrowsRTE ()
specifier|public
name|void
name|testCallbackThrowsRTE
parameter_list|()
throws|throws
name|Exception
block|{
name|hm
operator|.
name|addCallback
argument_list|(
operator|new
name|Callback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|enteredState
parameter_list|(
name|State
name|newState
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Injected RTE"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mocking bad health check, waiting for UNHEALTHY"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Fake health check failure"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockProxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|waitForState
argument_list|(
name|hm
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|HEALTH_MONITOR_FAILED
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForState (HealthMonitor hm, State state)
specifier|private
name|void
name|waitForState
parameter_list|(
name|HealthMonitor
name|hm
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|st
operator|<
literal|2000
condition|)
block|{
if|if
condition|(
name|hm
operator|.
name|getHealthState
argument_list|()
operator|==
name|state
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|state
argument_list|,
name|hm
operator|.
name|getHealthState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

