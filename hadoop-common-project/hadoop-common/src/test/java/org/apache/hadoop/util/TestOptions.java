begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestOptions
specifier|public
class|class
name|TestOptions
block|{
annotation|@
name|Test
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
literal|"first append"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Dr."
block|,
literal|"Who"
block|,
literal|"hi"
block|,
literal|"there"
block|}
argument_list|,
name|Options
operator|.
name|prependOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"hi"
block|,
literal|"there"
block|}
argument_list|,
literal|"Dr."
argument_list|,
literal|"Who"
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"second append"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa"
block|,
literal|"bb"
block|,
literal|"cc"
block|,
literal|"dd"
block|,
literal|"ee"
block|,
literal|"ff"
block|}
argument_list|,
name|Options
operator|.
name|prependOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"dd"
block|,
literal|"ee"
block|,
literal|"ff"
block|}
argument_list|,
literal|"aa"
argument_list|,
literal|"bb"
argument_list|,
literal|"cc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|opts
init|=
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"hi"
block|,
literal|true
block|,
literal|"bye"
block|,
literal|'x'
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Options
operator|.
name|getOption
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hi"
argument_list|,
name|Options
operator|.
name|getOption
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|opts
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|Options
operator|.
name|getOption
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

