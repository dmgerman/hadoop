begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestingThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_class
DECL|class|TestMultithreadedTestUtil
specifier|public
class|class
name|TestMultithreadedTestUtil
block|{
DECL|field|FAIL_MSG
specifier|private
specifier|static
specifier|final
name|String
name|FAIL_MSG
init|=
literal|"Inner thread fails an assert"
decl_stmt|;
annotation|@
name|Test
DECL|method|testNoErrors ()
specifier|public
name|void
name|testNoErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|threadsRun
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|threadsRun
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|threadsRun
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|long
name|et
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// All threads should have run
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|threadsRun
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test shouldn't have waited the full 30 seconds, since
comment|// the threads exited faster than that.
name|assertTrue
argument_list|(
literal|"Test took "
operator|+
operator|(
name|et
operator|-
name|st
operator|)
operator|+
literal|"ms"
argument_list|,
name|et
operator|-
name|st
operator|<
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadFails ()
specifier|public
name|void
name|testThreadFails
parameter_list|()
throws|throws
name|Exception
block|{
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|fail
argument_list|(
name|FAIL_MSG
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|ctx
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"waitFor did not throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
name|FAIL_MSG
argument_list|,
name|rte
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|et
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// Test shouldn't have waited the full 30 seconds, since
comment|// the thread throws faster than that
name|assertTrue
argument_list|(
literal|"Test took "
operator|+
operator|(
name|et
operator|-
name|st
operator|)
operator|+
literal|"ms"
argument_list|,
name|et
operator|-
name|st
operator|<
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadThrowsCheckedException ()
specifier|public
name|void
name|testThreadThrowsCheckedException
parameter_list|()
throws|throws
name|Exception
block|{
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"my ioe"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|ctx
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"waitFor did not throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"my ioe"
argument_list|,
name|rte
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|et
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|// Test shouldn't have waited the full 30 seconds, since
comment|// the thread throws faster than that
name|assertTrue
argument_list|(
literal|"Test took "
operator|+
operator|(
name|et
operator|-
name|st
operator|)
operator|+
literal|"ms"
argument_list|,
name|et
operator|-
name|st
operator|<
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRepeatingThread ()
specifier|public
name|void
name|testRepeatingThread
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|long
name|st
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|long
name|et
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|et
operator|-
name|st
decl_stmt|;
comment|// Test should have waited just about 3 seconds
name|assertTrue
argument_list|(
literal|"Test took "
operator|+
operator|(
name|et
operator|-
name|st
operator|)
operator|+
literal|"ms"
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|elapsed
operator|-
literal|3000
argument_list|)
operator|<
literal|500
argument_list|)
expr_stmt|;
comment|// Counter should have been incremented lots of times in 3 full seconds
name|assertTrue
argument_list|(
literal|"Counter value = "
operator|+
name|counter
operator|.
name|get
argument_list|()
argument_list|,
name|counter
operator|.
name|get
argument_list|()
operator|>
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

