begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|TrashPolicyDefault
operator|.
name|Emptier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests commands from Trash.  */
end_comment

begin_class
DECL|class|TestTrash
specifier|public
class|class
name|TestTrash
extends|extends
name|TestCase
block|{
DECL|field|TEST_DIR
specifier|private
specifier|final
specifier|static
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testTrash"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
comment|// ensure each test initiates a FileSystem instance,
comment|// avoid getting an old instance from cache.
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
DECL|method|mkdir (FileSystem fs, Path p)
specifier|protected
specifier|static
name|Path
name|mkdir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|// check that the specified file is in Trash
DECL|method|checkTrash (FileSystem trashFs, Path trashRoot, Path path)
specifier|protected
specifier|static
name|void
name|checkTrash
parameter_list|(
name|FileSystem
name|trashFs
parameter_list|,
name|Path
name|trashRoot
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|trashRoot
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find file in trash: "
operator|+
name|p
argument_list|,
name|trashFs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// counts how many instances of the file are in the Trash
comment|// they all are in format fileName*
DECL|method|countSameDeletedFiles (FileSystem fs, Path trashDir, Path fileName)
specifier|protected
specifier|static
name|int
name|countSameDeletedFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|trashDir
parameter_list|,
name|Path
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|prefix
init|=
name|fileName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Counting "
operator|+
name|fileName
operator|+
literal|" in "
operator|+
name|trashDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// filter that matches all the files that start with fileName*
name|PathFilter
name|pf
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// run the filter
name|FileStatus
index|[]
name|fss
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|trashDir
argument_list|,
name|pf
argument_list|)
decl_stmt|;
return|return
name|fss
operator|==
literal|null
condition|?
literal|0
else|:
name|fss
operator|.
name|length
return|;
block|}
comment|// check that the specified file is not in Trash
DECL|method|checkNotInTrash (FileSystem fs, Path trashRoot, String pathname)
specifier|static
name|void
name|checkNotInTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|trashRoot
parameter_list|,
name|String
name|pathname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|pathname
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test trash for the shell's delete command for the file system fs    * @param fs    * @param base - the base path where files are created    * @throws IOException    */
DECL|method|trashShell (final FileSystem fs, final Path base)
specifier|public
specifier|static
name|void
name|trashShell
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|trashShell
argument_list|(
name|conf
argument_list|,
name|base
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test trash for the shell's delete command for the default file system    * specified in the paramter conf    * @param conf     * @param base - the base path where files are created    * @param trashRoot - the expected place where the trashbin resides    * @throws IOException    */
DECL|method|trashShell (final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot)
specifier|public
specifier|static
name|void
name|trashShell
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|base
parameter_list|,
name|FileSystem
name|trashRootFs
parameter_list|,
name|Path
name|trashRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// disabled
name|assertFalse
argument_list|(
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// 10 minute
name|assertTrue
argument_list|(
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|trashRoot
operator|==
literal|null
condition|)
block|{
name|trashRoot
operator|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|trashRootFs
operator|==
literal|null
condition|)
block|{
name|trashRootFs
operator|=
name|fs
expr_stmt|;
block|}
comment|// First create a new directory with mkdirs
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
comment|// Second, create a file in that directory.
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify that expunge without Trash directory
comment|// won't throw Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-expunge"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we succeed in removing the file we created.
comment|// This should go into Trash.
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can recreate the file
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the file we re-created
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can recreate the file
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the whole directory
comment|// along with the file inside it.
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// recreate directory
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the whole directory
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Check that we can delete a file from the trash
block|{
name|Path
name|toErase
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
argument_list|,
literal|"toErase"
argument_list|)
decl_stmt|;
name|int
name|retVal
init|=
operator|-
literal|1
decl_stmt|;
name|writeFile
argument_list|(
name|trashRootFs
argument_list|,
name|toErase
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|retVal
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|toErase
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|retVal
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkNotInTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
name|toErase
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotInTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
name|toErase
operator|.
name|toString
argument_list|()
operator|+
literal|".1"
argument_list|)
expr_stmt|;
block|}
comment|// simulate Trash removal
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-expunge"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// verify that after expunging the Trash, it really goes away
name|checkNotInTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// recreate directory and file
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// remove file first, then remove directory
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|trashRootFs
argument_list|,
name|trashRoot
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
block|}
comment|// attempt to remove parent of trash
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|trashRoot
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"exit code"
argument_list|,
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|trashRootFs
operator|.
name|exists
argument_list|(
name|trashRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify skip trash option really works
comment|// recreate directory and file
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify that skip trash option really skips the trash for files (rm)
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-skipTrash"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
comment|// Clear out trash
name|assertEquals
argument_list|(
literal|"-expunge failed"
argument_list|,
literal|0
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-expunge"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Expected TrashRoot ("
operator|+
name|trashRoot
operator|+
literal|") to exist in file system:"
operator|+
name|trashRootFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|trashRootFs
operator|.
name|exists
argument_list|(
name|trashRoot
argument_list|)
argument_list|)
expr_stmt|;
comment|// No new Current should be created
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// recreate directory and file
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify that skip trash option really skips the trash for rmr
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-skipTrash"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|myPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
comment|// Clear out trash
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-expunge"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|trashRootFs
operator|.
name|exists
argument_list|(
name|trashRoot
argument_list|)
argument_list|)
expr_stmt|;
comment|// No new Current should be created
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|myPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|myFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// deleting same file multiple times
block|{
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-expunge"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from fs expunge "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create a file in that directory.
name|myFile
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|myFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|num_runs
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_runs
condition|;
name|i
operator|++
control|)
block|{
comment|//create file
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// delete file
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// current trash directory
name|Path
name|trashDir
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
operator|new
name|Path
argument_list|(
name|trashRoot
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|myFile
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting same myFile: myFile.parent="
operator|+
name|myFile
operator|.
name|getParent
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"; trashroot="
operator|+
name|trashRoot
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"; trashDir="
operator|+
name|trashDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|countSameDeletedFiles
argument_list|(
name|fs
argument_list|,
name|trashDir
argument_list|,
name|myFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"counted "
operator|+
name|count
operator|+
literal|" files "
operator|+
name|myFile
operator|.
name|getName
argument_list|()
operator|+
literal|"* in "
operator|+
name|trashDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
name|num_runs
argument_list|)
expr_stmt|;
block|}
comment|//Verify skipTrash option is suggested when rm fails due to its absence
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/"
expr_stmt|;
comment|//This always contains trash directory
name|PrintStream
name|stdout
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|stderr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|newOut
init|=
operator|new
name|PrintStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|newOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|newOut
argument_list|)
expr_stmt|;
try|try
block|{
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|byteStream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|stderr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"skipTrash wasn't suggested as remedy to failed rm command"
operator|+
literal|" or we deleted / even though we could not get server defaults"
argument_list|,
name|output
operator|.
name|indexOf
argument_list|(
literal|"Consider using -skipTrash option"
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|output
operator|.
name|indexOf
argument_list|(
literal|"Failed to determine server trash configuration"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Verify old checkpoint format is recognized
block|{
comment|// emulate two old trash checkpoint directories, one that is old enough
comment|// to be deleted on the next expunge and one that isn't.
name|long
name|trashInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|DateFormat
name|oldCheckpointFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyMMddHHmm"
argument_list|)
decl_stmt|;
name|Path
name|dirToDelete
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
operator|.
name|getParent
argument_list|()
argument_list|,
name|oldCheckpointFormat
operator|.
name|format
argument_list|(
name|now
operator|-
operator|(
name|trashInterval
operator|*
literal|60
operator|*
literal|1000
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|dirToKeep
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
operator|.
name|getParent
argument_list|()
argument_list|,
name|oldCheckpointFormat
operator|.
name|format
argument_list|(
name|now
argument_list|)
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|trashRootFs
argument_list|,
name|dirToDelete
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|trashRootFs
argument_list|,
name|dirToKeep
argument_list|)
expr_stmt|;
comment|// Clear out trash
name|int
name|rc
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|rc
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-expunge"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from fs expunge "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"old checkpoint format not recognized"
argument_list|,
name|trashRootFs
operator|.
name|exists
argument_list|(
name|dirToDelete
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"old checkpoint format directory should not be removed"
argument_list|,
name|trashRootFs
operator|.
name|exists
argument_list|(
name|dirToKeep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trashNonDefaultFS (Configuration conf)
specifier|public
specifier|static
name|void
name|trashNonDefaultFS
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// 10 minute
comment|// attempt non-default FileSystem trash
block|{
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|TEST_DIR
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeFile
argument_list|(
name|lfs
argument_list|,
name|f
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Trash
name|lTrash
init|=
operator|new
name|Trash
argument_list|(
name|localFs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|lTrash
operator|.
name|moveToTrash
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|localFs
argument_list|,
name|lTrash
operator|.
name|getCurrentTrashDir
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testTrash ()
specifier|public
name|void
name|testTrash
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|trashShell
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonDefaultFS ()
specifier|public
name|void
name|testNonDefaultFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"invalid://host/bar/foo"
argument_list|)
expr_stmt|;
name|trashNonDefaultFS
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testPluggableTrash ()
specifier|public
name|void
name|testPluggableTrash
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Test plugged TrashPolicy
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.trash.classname"
argument_list|,
name|TestTrashPolicy
operator|.
name|class
argument_list|,
name|TrashPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|trash
operator|.
name|getTrashPolicy
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|TestTrashPolicy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckpointInterval ()
specifier|public
name|void
name|testCheckpointInterval
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Verify if fs.trash.checkpoint.interval is set to positive number
comment|// but bigger than fs.trash.interval,
comment|// the value should be reset to fs.trash.interval
name|verifyDefaultPolicyIntervalValues
argument_list|(
literal|10
argument_list|,
literal|12
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify if fs.trash.checkpoint.interval is set to positive number
comment|// and smaller than fs.trash.interval, the value should be respected
name|verifyDefaultPolicyIntervalValues
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Verify if fs.trash.checkpoint.interval sets to 0
comment|// the value should be reset to fs.trash.interval
name|verifyDefaultPolicyIntervalValues
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Verify if fs.trash.checkpoint.interval sets to a negative number
comment|// the value should be reset to fs.trash.interval
name|verifyDefaultPolicyIntervalValues
argument_list|(
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveEmptyDirToTrash ()
specifier|public
name|void
name|testMoveEmptyDirToTrash
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|FS_FILE_IMPL_KEY
argument_list|,
name|RawLocalFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 1 min
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|verifyMoveEmptyDirToTrash
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simulate the carrier process of the trash emptier restarts,    * verify it honors the<b>fs.trash.interval</b> before and after restart.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testTrashRestarts ()
specifier|public
name|void
name|testTrashRestarts
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.trash.classname"
argument_list|,
name|AuditableTrashPolicy
operator|.
name|class
argument_list|,
name|TrashPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
comment|// in milliseconds for test
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create 5 checkpoints
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|trash
operator|.
name|checkpoint
argument_list|()
expr_stmt|;
block|}
comment|// Run the trash emptier for 120ms, it should run
comment|// 2 times deletion as the interval is 50ms.
comment|// Verify the checkpoints number when shutting down the emptier.
name|verifyAuditableTrashEmptier
argument_list|(
name|trash
argument_list|,
literal|120
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// reconfigure the interval to 100 ms
name|conf
operator|.
name|set
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|Trash
name|trashNew
init|=
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Run the trash emptier for 120ms, it should run
comment|// 1 time deletion.
name|verifyAuditableTrashEmptier
argument_list|(
name|trashNew
argument_list|,
literal|120
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrashPermission ()
specifier|public
name|void
name|testTrashPermission
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.trash.classname"
argument_list|,
name|TrashPolicyDefault
operator|.
name|class
argument_list|,
name|TrashPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
name|verifyTrashPermission
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrashEmptier ()
specifier|public
name|void
name|testTrashEmptier
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Trash with 12 second deletes and 6 seconds checkpoints
name|conf
operator|.
name|set
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
comment|// 12 seconds
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_TRASH_CHECKPOINT_INTERVAL_KEY
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
comment|// 6 seconds
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Start Emptier in background
name|Runnable
name|emptier
init|=
name|trash
operator|.
name|getEmptier
argument_list|()
decl_stmt|;
name|Thread
name|emptierThread
init|=
operator|new
name|Thread
argument_list|(
name|emptier
argument_list|)
decl_stmt|;
name|emptierThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shell
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// First create a new directory with mkdirs
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test/mkdirs"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
name|int
name|fileIndex
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Create a file with a new name
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test/mkdirs/myFile"
operator|+
name|fileIndex
operator|++
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Delete the file to trash
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Path
name|trashDir
init|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|()
decl_stmt|;
name|FileStatus
name|files
index|[]
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|trashDir
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
comment|// Scan files in .Trash and add them to set of checkpoints
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|checkpoints
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// If checkpoints has 4 objects it is Current + 3 checkpoint directories
if|if
condition|(
name|checkpoints
operator|.
name|size
argument_list|()
operator|==
literal|4
condition|)
block|{
comment|// The actual contents should be smaller since the last checkpoint
comment|// should've been deleted and Current might not have been recreated yet
name|assertTrue
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
operator|>
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
name|emptierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|emptierThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * @see TestCase#tearDown()    */
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|trashDir
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|trashDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|trashDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove data directory: "
operator|+
name|trashDir
argument_list|)
throw|;
block|}
block|}
DECL|class|TestLFS
specifier|static
class|class
name|TestLFS
extends|extends
name|LocalFileSystem
block|{
DECL|field|home
name|Path
name|home
decl_stmt|;
DECL|method|TestLFS ()
name|TestLFS
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"user/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestLFS (final Path home)
name|TestLFS
parameter_list|(
specifier|final
name|Path
name|home
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|RawLocalFileSystem
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
name|home
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
name|home
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|home
operator|=
name|home
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|home
return|;
block|}
block|}
comment|/**    *  test same file deletion - multiple time    *  this is more of a performance test - shouldn't be run as a unit test    * @throws IOException    */
DECL|method|performanceTestDeleteSameFile ()
specifier|public
specifier|static
name|void
name|performanceTestDeleteSameFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|base
init|=
name|TEST_DIR
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//minutes..
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//Path trashRoot = null;
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
comment|// create a file in that directory.
name|Path
name|myFile
decl_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|first
init|=
literal|0
decl_stmt|;
name|int
name|retVal
init|=
literal|0
decl_stmt|;
name|int
name|factor
init|=
literal|10
decl_stmt|;
comment|// how much slower any of subsequent deletion can be
name|myFile
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|myFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|iters
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|start
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
try|try
block|{
name|retVal
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|assertTrue
argument_list|(
name|retVal
operator|==
literal|0
argument_list|)
expr_stmt|;
name|long
name|iterTime
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
decl_stmt|;
comment|// take median of the first 10 runs
if|if
condition|(
name|i
operator|<
literal|10
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|first
operator|=
name|iterTime
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
operator|(
name|first
operator|+
name|iterTime
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
comment|// we don't want to print every iteration - let's do every 10th
name|int
name|print_freq
init|=
name|iters
operator|/
literal|10
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|10
condition|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
name|print_freq
operator|)
operator|==
literal|0
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"iteration="
operator|+
name|i
operator|+
literal|";res ="
operator|+
name|retVal
operator|+
literal|"; start="
operator|+
name|start
operator|+
literal|"; iterTime = "
operator|+
name|iterTime
operator|+
literal|" vs. firstTime="
operator|+
name|first
argument_list|)
expr_stmt|;
name|long
name|factoredTime
init|=
name|first
operator|*
name|factor
decl_stmt|;
name|assertTrue
argument_list|(
name|iterTime
operator|<
name|factoredTime
argument_list|)
expr_stmt|;
comment|//no more then twice of median first 10
block|}
block|}
block|}
DECL|method|verifyMoveEmptyDirToTrash (FileSystem fs, Configuration conf)
specifier|public
specifier|static
name|void
name|verifyMoveEmptyDirToTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|caseRoot
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testUserTrash"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|testRoot
init|=
operator|new
name|Path
argument_list|(
name|caseRoot
argument_list|,
literal|"trash-users"
argument_list|)
decl_stmt|;
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
name|testRoot
argument_list|,
literal|"empty-dir"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileSystem
name|fileSystem
init|=
name|fs
init|)
block|{
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|fileSystem
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Make sure trash root is clean
name|Path
name|trashRoot
init|=
name|trash
operator|.
name|getCurrentTrashDir
argument_list|(
name|emptyDir
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|delete
argument_list|(
name|trashRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Move to trash should be succeed
name|assertTrue
argument_list|(
literal|"Move an empty directory to trash failed"
argument_list|,
name|trash
operator|.
name|moveToTrash
argument_list|(
name|emptyDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the empty dir is removed
name|assertFalse
argument_list|(
literal|"The empty directory still exists on file system"
argument_list|,
name|fileSystem
operator|.
name|exists
argument_list|(
name|emptyDir
argument_list|)
argument_list|)
expr_stmt|;
name|emptyDir
operator|=
name|fileSystem
operator|.
name|makeQualified
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
name|Path
name|dirInTrash
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|trashRoot
argument_list|,
name|emptyDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directory wasn't moved to trash"
argument_list|,
name|fileSystem
operator|.
name|exists
argument_list|(
name|dirInTrash
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|flist
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|dirInTrash
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Directory is not empty"
argument_list|,
name|flist
operator|!=
literal|null
operator|&&
name|flist
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a bunch of files and set with different permission, after    * moved to trash, verify the location in trash directory is expected    * and the permission is reserved.    *    * @throws IOException    */
DECL|method|verifyTrashPermission (FileSystem fs, Configuration conf)
specifier|public
specifier|static
name|void
name|verifyTrashPermission
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|caseRoot
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"testTrashPermission"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|FileSystem
name|fileSystem
init|=
name|fs
init|)
block|{
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|fileSystem
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystemTestWrapper
name|wrapper
init|=
operator|new
name|FileSystemTestWrapper
argument_list|(
name|fileSystem
argument_list|)
decl_stmt|;
name|short
index|[]
name|filePermssions
init|=
block|{
operator|(
name|short
operator|)
literal|0600
block|,
operator|(
name|short
operator|)
literal|0644
block|,
operator|(
name|short
operator|)
literal|0660
block|,
operator|(
name|short
operator|)
literal|0700
block|,
operator|(
name|short
operator|)
literal|0750
block|,
operator|(
name|short
operator|)
literal|0755
block|,
operator|(
name|short
operator|)
literal|0775
block|,
operator|(
name|short
operator|)
literal|0777
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filePermssions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Set different permission to files
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|filePermssions
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|caseRoot
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|randomBytes
init|=
operator|new
name|byte
index|[
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
name|wrapper
operator|.
name|writeFile
argument_list|(
name|file
argument_list|,
name|randomBytes
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setPermission
argument_list|(
name|file
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
comment|// Move file to trash
name|trash
operator|.
name|moveToTrash
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Verify the file is moved to trash, at expected location
name|Path
name|trashDir
init|=
name|trash
operator|.
name|getCurrentTrashDir
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|file
operator|=
name|wrapper
operator|.
name|makeQualified
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|Path
name|fileInTrash
init|=
name|Path
operator|.
name|mergePaths
argument_list|(
name|trashDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fstat
init|=
name|wrapper
operator|.
name|getFileStatus
argument_list|(
name|fileInTrash
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"File %s is not moved to trash"
argument_list|,
name|fileInTrash
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|wrapper
operator|.
name|exists
argument_list|(
name|fileInTrash
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify permission not change
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected file: %s is %s, but actual is %s"
argument_list|,
name|fileInTrash
operator|.
name|toString
argument_list|()
argument_list|,
name|fsPermission
operator|.
name|toString
argument_list|()
argument_list|,
name|fstat
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|fstat
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|fsPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify the trash directory can be removed
name|Path
name|trashRoot
init|=
name|trash
operator|.
name|getCurrentTrashDir
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|wrapper
operator|.
name|delete
argument_list|(
name|trashRoot
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyDefaultPolicyIntervalValues (long trashInterval, long checkpointInterval, long expectedInterval)
specifier|private
name|void
name|verifyDefaultPolicyIntervalValues
parameter_list|(
name|long
name|trashInterval
parameter_list|,
name|long
name|checkpointInterval
parameter_list|,
name|long
name|expectedInterval
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|trashInterval
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.trash.classname"
argument_list|,
name|TrashPolicyDefault
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FS_TRASH_CHECKPOINT_INTERVAL_KEY
argument_list|,
name|checkpointInterval
argument_list|)
expr_stmt|;
name|Trash
name|trash
init|=
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Emptier
name|emptier
init|=
operator|(
name|Emptier
operator|)
name|trash
operator|.
name|getEmptier
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedInterval
argument_list|,
name|emptier
operator|.
name|getEmptierInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Launch the {@link Trash} emptier for given milliseconds,    * verify the number of checkpoints is expected.    */
DECL|method|verifyAuditableTrashEmptier (Trash trash, long timeAlive, int expectedNumOfCheckpoints)
specifier|private
name|void
name|verifyAuditableTrashEmptier
parameter_list|(
name|Trash
name|trash
parameter_list|,
name|long
name|timeAlive
parameter_list|,
name|int
name|expectedNumOfCheckpoints
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
name|emptierThread
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Runnable
name|emptier
init|=
name|trash
operator|.
name|getEmptier
argument_list|()
decl_stmt|;
name|emptierThread
operator|=
operator|new
name|Thread
argument_list|(
name|emptier
argument_list|)
expr_stmt|;
name|emptierThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Shutdown the emptier thread after a given time
name|Thread
operator|.
name|sleep
argument_list|(
name|timeAlive
argument_list|)
expr_stmt|;
name|emptierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|emptierThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|AuditableTrashPolicy
name|at
init|=
operator|(
name|AuditableTrashPolicy
operator|)
name|trash
operator|.
name|getTrashPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected num of checkpoints is %s, but actual is %s"
argument_list|,
name|expectedNumOfCheckpoints
argument_list|,
name|at
operator|.
name|getNumberOfCheckpoints
argument_list|()
argument_list|)
argument_list|,
name|expectedNumOfCheckpoints
argument_list|,
name|at
operator|.
name|getNumberOfCheckpoints
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
finally|finally
block|{
comment|// Avoid thread leak
if|if
condition|(
name|emptierThread
operator|!=
literal|null
condition|)
block|{
name|emptierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Test TrashPolicy. Don't care about implementation.
DECL|class|TestTrashPolicy
specifier|public
specifier|static
class|class
name|TestTrashPolicy
extends|extends
name|TrashPolicy
block|{
DECL|method|TestTrashPolicy ()
specifier|public
name|TestTrashPolicy
parameter_list|()
block|{ }
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FileSystem fs, Path home)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|home
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FileSystem fs)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|moveToTrash (Path path)
specifier|public
name|boolean
name|moveToTrash
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createCheckpoint ()
specifier|public
name|void
name|createCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|deleteCheckpoint ()
specifier|public
name|void
name|deleteCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
DECL|method|getCurrentTrashDir ()
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentTrashDir (Path path)
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getEmptier ()
specifier|public
name|Runnable
name|getEmptier
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * A fake {@link TrashPolicy} implementation, it keeps a count    * on number of checkpoints in the trash. It doesn't do anything    * other than updating the count.    *    */
DECL|class|AuditableTrashPolicy
specifier|public
specifier|static
class|class
name|AuditableTrashPolicy
extends|extends
name|TrashPolicy
block|{
DECL|method|AuditableTrashPolicy ()
specifier|public
name|AuditableTrashPolicy
parameter_list|()
block|{}
DECL|method|AuditableTrashPolicy (Configuration conf)
specifier|public
name|AuditableTrashPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|initialize (Configuration conf, FileSystem fs, Path home)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|home
parameter_list|)
block|{
name|this
operator|.
name|deletionInterval
operator|=
call|(
name|long
call|)
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FileSystem fs)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|deletionInterval
operator|=
call|(
name|long
call|)
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|moveToTrash (Path path)
specifier|public
name|boolean
name|moveToTrash
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createCheckpoint ()
specifier|public
name|void
name|createCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|AuditableCheckpoints
operator|.
name|add
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteCheckpoint ()
specifier|public
name|void
name|deleteCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|AuditableCheckpoints
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentTrashDir ()
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getEmptier ()
specifier|public
name|Runnable
name|getEmptier
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|AuditableEmptier
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getNumberOfCheckpoints ()
specifier|public
name|int
name|getNumberOfCheckpoints
parameter_list|()
block|{
return|return
name|AuditableCheckpoints
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * A fake emptier that simulates to delete a checkpoint      * in a fixed interval.      */
DECL|class|AuditableEmptier
specifier|private
class|class
name|AuditableEmptier
implements|implements
name|Runnable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|method|AuditableEmptier (Configuration conf)
specifier|public
name|AuditableEmptier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|AuditableTrashPolicy
name|trash
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trash
operator|=
operator|new
name|AuditableTrashPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|deletionInterval
argument_list|)
expr_stmt|;
name|trash
operator|.
name|deleteCheckpoint
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// no exception
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Only counts the number of checkpoints, not do anything more.    * Declared as an inner static class to share state between    * testing threads.    */
DECL|class|AuditableCheckpoints
specifier|private
specifier|static
class|class
name|AuditableCheckpoints
block|{
DECL|field|numOfCheckpoint
specifier|private
specifier|static
name|AtomicInteger
name|numOfCheckpoint
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|add ()
specifier|private
specifier|static
name|void
name|add
parameter_list|()
block|{
name|numOfCheckpoint
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Create a checkpoint, current number of checkpoints %d"
argument_list|,
name|numOfCheckpoint
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delete ()
specifier|private
specifier|static
name|void
name|delete
parameter_list|()
block|{
if|if
condition|(
name|numOfCheckpoint
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|numOfCheckpoint
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Delete a checkpoint, current number of checkpoints %d"
argument_list|,
name|numOfCheckpoint
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get ()
specifier|private
specifier|static
name|int
name|get
parameter_list|()
block|{
return|return
name|numOfCheckpoint
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

