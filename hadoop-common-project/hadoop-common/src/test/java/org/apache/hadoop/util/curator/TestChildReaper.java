begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util.curator
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|curator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|locks
operator|.
name|Reaper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryOneTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|Timing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * This is a copy of Curator 2.7.1's TestChildReaper class, with minor  * modifications to make it work with JUnit (some setup code taken from  * Curator's BaseClassForTests).  This is to ensure that the ChildReaper  * class we modified is still correct.  */
end_comment

begin_class
DECL|class|TestChildReaper
specifier|public
class|class
name|TestChildReaper
block|{
DECL|field|server
specifier|protected
name|TestingServer
name|server
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
name|this
operator|.
name|server
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|server
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|var2
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Getting bind exception - retrying to allocate server"
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSomeNodes ()
specifier|public
name|void
name|testSomeNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Timing
name|timing
init|=
operator|new
name|Timing
argument_list|()
decl_stmt|;
name|ChildReaper
name|reaper
init|=
literal|null
decl_stmt|;
name|CuratorFramework
name|client
init|=
name|CuratorFrameworkFactory
operator|.
name|newClient
argument_list|(
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|,
name|timing
operator|.
name|session
argument_list|()
argument_list|,
name|timing
operator|.
name|connection
argument_list|()
argument_list|,
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|nonEmptyNodes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|client
operator|.
name|create
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
operator|++
name|nonEmptyNodes
expr_stmt|;
block|}
block|}
name|reaper
operator|=
operator|new
name|ChildReaper
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
name|Reaper
operator|.
name|Mode
operator|.
name|REAP_UNTIL_DELETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
name|timing
operator|.
name|forWaiting
argument_list|()
operator|.
name|sleepABit
argument_list|()
expr_stmt|;
name|Stat
name|stat
init|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|nonEmptyNodes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|reaper
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimple ()
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Timing
name|timing
init|=
operator|new
name|Timing
argument_list|()
decl_stmt|;
name|ChildReaper
name|reaper
init|=
literal|null
decl_stmt|;
name|CuratorFramework
name|client
init|=
name|CuratorFrameworkFactory
operator|.
name|newClient
argument_list|(
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|,
name|timing
operator|.
name|session
argument_list|()
argument_list|,
name|timing
operator|.
name|connection
argument_list|()
argument_list|,
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reaper
operator|=
operator|new
name|ChildReaper
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
name|Reaper
operator|.
name|Mode
operator|.
name|REAP_UNTIL_DELETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
name|timing
operator|.
name|forWaiting
argument_list|()
operator|.
name|sleepABit
argument_list|()
expr_stmt|;
name|Stat
name|stat
init|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|reaper
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiPath ()
specifier|public
name|void
name|testMultiPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Timing
name|timing
init|=
operator|new
name|Timing
argument_list|()
decl_stmt|;
name|ChildReaper
name|reaper
init|=
literal|null
decl_stmt|;
name|CuratorFramework
name|client
init|=
name|CuratorFrameworkFactory
operator|.
name|newClient
argument_list|(
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|,
name|timing
operator|.
name|session
argument_list|()
argument_list|,
name|timing
operator|.
name|connection
argument_list|()
argument_list|,
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test1/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test2/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test3/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reaper
operator|=
operator|new
name|ChildReaper
argument_list|(
name|client
argument_list|,
literal|"/test2"
argument_list|,
name|Reaper
operator|.
name|Mode
operator|.
name|REAP_UNTIL_DELETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
name|reaper
operator|.
name|addPath
argument_list|(
literal|"/test1"
argument_list|)
expr_stmt|;
name|timing
operator|.
name|forWaiting
argument_list|()
operator|.
name|sleepABit
argument_list|()
expr_stmt|;
name|Stat
name|stat
init|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|stat
operator|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|stat
operator|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test3"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|reaper
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNamespace ()
specifier|public
name|void
name|testNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Timing
name|timing
init|=
operator|new
name|Timing
argument_list|()
decl_stmt|;
name|ChildReaper
name|reaper
init|=
literal|null
decl_stmt|;
name|CuratorFramework
name|client
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
name|timing
operator|.
name|session
argument_list|()
argument_list|)
operator|.
name|connectionTimeoutMs
argument_list|(
name|timing
operator|.
name|connection
argument_list|()
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|namespace
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reaper
operator|=
operator|new
name|ChildReaper
argument_list|(
name|client
argument_list|,
literal|"/test"
argument_list|,
name|Reaper
operator|.
name|Mode
operator|.
name|REAP_UNTIL_DELETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
name|timing
operator|.
name|forWaiting
argument_list|()
operator|.
name|sleepABit
argument_list|()
expr_stmt|;
name|Stat
name|stat
init|=
name|client
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|stat
operator|=
name|client
operator|.
name|usingNamespace
argument_list|(
literal|null
argument_list|)
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
literal|"/foo/test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stat
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|reaper
argument_list|)
expr_stmt|;
name|CloseableUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

