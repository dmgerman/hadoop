begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationUtil
operator|.
name|PropertyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_class
DECL|class|TestReconfiguration
specifier|public
class|class
name|TestReconfiguration
block|{
DECL|field|conf1
specifier|private
name|Configuration
name|conf1
decl_stmt|;
DECL|field|conf2
specifier|private
name|Configuration
name|conf2
decl_stmt|;
DECL|field|PROP1
specifier|private
specifier|static
specifier|final
name|String
name|PROP1
init|=
literal|"test.prop.one"
decl_stmt|;
DECL|field|PROP2
specifier|private
specifier|static
specifier|final
name|String
name|PROP2
init|=
literal|"test.prop.two"
decl_stmt|;
DECL|field|PROP3
specifier|private
specifier|static
specifier|final
name|String
name|PROP3
init|=
literal|"test.prop.three"
decl_stmt|;
DECL|field|PROP4
specifier|private
specifier|static
specifier|final
name|String
name|PROP4
init|=
literal|"test.prop.four"
decl_stmt|;
DECL|field|PROP5
specifier|private
specifier|static
specifier|final
name|String
name|PROP5
init|=
literal|"test.prop.five"
decl_stmt|;
DECL|field|VAL1
specifier|private
specifier|static
specifier|final
name|String
name|VAL1
init|=
literal|"val1"
decl_stmt|;
DECL|field|VAL2
specifier|private
specifier|static
specifier|final
name|String
name|VAL2
init|=
literal|"val2"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf1
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf2
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// set some test properties
name|conf1
operator|.
name|set
argument_list|(
name|PROP1
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|PROP2
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|PROP3
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|PROP1
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
comment|// same as conf1
name|conf2
operator|.
name|set
argument_list|(
name|PROP2
argument_list|,
name|VAL2
argument_list|)
expr_stmt|;
comment|// different value as conf1
comment|// PROP3 not set in conf2
name|conf2
operator|.
name|set
argument_list|(
name|PROP4
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
comment|// not set in conf1
block|}
comment|/**    * Test ReconfigurationUtil.getChangedProperties.    */
annotation|@
name|Test
DECL|method|testGetChangedProperties ()
specifier|public
name|void
name|testGetChangedProperties
parameter_list|()
block|{
name|Collection
argument_list|<
name|ReconfigurationUtil
operator|.
name|PropertyChange
argument_list|>
name|changes
init|=
name|ReconfigurationUtil
operator|.
name|getChangedProperties
argument_list|(
name|conf2
argument_list|,
name|conf1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected 3 changed properties but got "
operator|+
name|changes
operator|.
name|size
argument_list|()
argument_list|,
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|boolean
name|changeFound
init|=
literal|false
decl_stmt|;
name|boolean
name|unsetFound
init|=
literal|false
decl_stmt|;
name|boolean
name|setFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ReconfigurationUtil
operator|.
name|PropertyChange
name|c
range|:
name|changes
control|)
block|{
if|if
condition|(
name|c
operator|.
name|prop
operator|.
name|equals
argument_list|(
name|PROP2
argument_list|)
operator|&&
name|c
operator|.
name|oldVal
operator|!=
literal|null
operator|&&
name|c
operator|.
name|oldVal
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
operator|&&
name|c
operator|.
name|newVal
operator|!=
literal|null
operator|&&
name|c
operator|.
name|newVal
operator|.
name|equals
argument_list|(
name|VAL2
argument_list|)
condition|)
block|{
name|changeFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|prop
operator|.
name|equals
argument_list|(
name|PROP3
argument_list|)
operator|&&
name|c
operator|.
name|oldVal
operator|!=
literal|null
operator|&&
name|c
operator|.
name|oldVal
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
operator|&&
name|c
operator|.
name|newVal
operator|==
literal|null
condition|)
block|{
name|unsetFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|prop
operator|.
name|equals
argument_list|(
name|PROP4
argument_list|)
operator|&&
name|c
operator|.
name|oldVal
operator|==
literal|null
operator|&&
name|c
operator|.
name|newVal
operator|!=
literal|null
operator|&&
name|c
operator|.
name|newVal
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
condition|)
block|{
name|setFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"not all changes have been applied"
argument_list|,
name|changeFound
operator|&&
name|unsetFound
operator|&&
name|setFound
argument_list|)
expr_stmt|;
block|}
comment|/**    * a simple reconfigurable class    */
DECL|class|ReconfigurableDummy
specifier|public
specifier|static
class|class
name|ReconfigurableDummy
extends|extends
name|ReconfigurableBase
implements|implements
name|Runnable
block|{
DECL|field|running
specifier|public
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|method|ReconfigurableDummy (Configuration conf)
specifier|public
name|ReconfigurableDummy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewConf ()
specifier|protected
name|Configuration
name|getNewConf
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReconfigurableProperties ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getReconfigurableProperties
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|PROP1
argument_list|,
name|PROP2
argument_list|,
name|PROP4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reconfigurePropertyImpl ( String property, String newVal)
specifier|public
specifier|synchronized
name|String
name|reconfigurePropertyImpl
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
block|{
comment|// do nothing
return|return
name|newVal
return|;
block|}
comment|/**      * Run until PROP1 is no longer VAL1.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
operator|&&
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
block|}
block|}
comment|/**    * Test reconfiguring a Reconfigurable.    */
annotation|@
name|Test
DECL|method|testReconfigure ()
specifier|public
name|void
name|testReconfigure
parameter_list|()
block|{
name|ReconfigurableDummy
name|dummy
init|=
operator|new
name|ReconfigurableDummy
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP2
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP2
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP3
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP3
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP4
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP4
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP5
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP5
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|" should be reconfigurable "
argument_list|,
name|dummy
operator|.
name|isPropertyReconfigurable
argument_list|(
name|PROP1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP2
operator|+
literal|" should be reconfigurable "
argument_list|,
name|dummy
operator|.
name|isPropertyReconfigurable
argument_list|(
name|PROP2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PROP3
operator|+
literal|" should not be reconfigurable "
argument_list|,
name|dummy
operator|.
name|isPropertyReconfigurable
argument_list|(
name|PROP3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP4
operator|+
literal|" should be reconfigurable "
argument_list|,
name|dummy
operator|.
name|isPropertyReconfigurable
argument_list|(
name|PROP4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|PROP5
operator|+
literal|" should not be reconfigurable "
argument_list|,
name|dummy
operator|.
name|isPropertyReconfigurable
argument_list|(
name|PROP5
argument_list|)
argument_list|)
expr_stmt|;
comment|// change something to the same value as before
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP1
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|" set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"received unexpected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// change something to null
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|"set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"received unexpected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// change something to a different value than before
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP1
argument_list|,
name|VAL2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|"set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"received unexpected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// set unset property to null
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP4
operator|+
literal|"set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP4
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"received unexpected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// set unset property
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP4
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PROP4
operator|+
literal|"set to wrong value "
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP4
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"received unexpected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// try to set unset property to null (not reconfigurable)
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"did not receive expected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// try to set unset property to value (not reconfigurable)
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP5
argument_list|,
name|VAL1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"did not receive expected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// try to change property to value (not reconfigurable)
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP3
argument_list|,
name|VAL2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"did not receive expected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
comment|// try to change property to null (not reconfigurable)
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReconfigurationException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"did not receive expected exception"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test whether configuration changes are visible in another thread.    */
annotation|@
name|Test
DECL|method|testThread ()
specifier|public
name|void
name|testThread
parameter_list|()
throws|throws
name|ReconfigurationException
block|{
name|ReconfigurableDummy
name|dummy
init|=
operator|new
name|ReconfigurableDummy
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL1
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|dummyThread
init|=
operator|new
name|Thread
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|dummyThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
comment|// do nothing
block|}
name|dummy
operator|.
name|reconfigureProperty
argument_list|(
name|PROP1
argument_list|,
name|VAL2
argument_list|)
expr_stmt|;
name|long
name|endWait
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|2000
decl_stmt|;
while|while
condition|(
name|dummyThread
operator|.
name|isAlive
argument_list|()
operator|&&
name|Time
operator|.
name|now
argument_list|()
operator|<
name|endWait
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
name|assertFalse
argument_list|(
literal|"dummy thread should not be alive"
argument_list|,
name|dummyThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|running
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|dummyThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
comment|// do nothing
block|}
name|assertTrue
argument_list|(
name|PROP1
operator|+
literal|" is set to wrong value"
argument_list|,
name|dummy
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|PROP1
argument_list|)
operator|.
name|equals
argument_list|(
name|VAL2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|AsyncReconfigurableDummy
specifier|private
specifier|static
class|class
name|AsyncReconfigurableDummy
extends|extends
name|ReconfigurableBase
block|{
DECL|method|AsyncReconfigurableDummy (Configuration conf)
name|AsyncReconfigurableDummy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewConf ()
specifier|protected
name|Configuration
name|getNewConf
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
DECL|field|latch
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getReconfigurableProperties ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getReconfigurableProperties
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|PROP1
argument_list|,
name|PROP2
argument_list|,
name|PROP4
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reconfigurePropertyImpl (String property, String newVal)
specifier|public
specifier|synchronized
name|String
name|reconfigurePropertyImpl
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|newVal
return|;
block|}
block|}
DECL|method|waitAsyncReconfigureTaskFinish (ReconfigurableBase rb)
specifier|private
specifier|static
name|void
name|waitAsyncReconfigureTaskFinish
parameter_list|(
name|ReconfigurableBase
name|rb
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ReconfigurationTaskStatus
name|status
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|20
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|status
operator|=
name|rb
operator|.
name|getReconfigurationTaskStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|stopped
argument_list|()
condition|)
block|{
break|break;
block|}
name|count
operator|--
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|status
operator|.
name|stopped
argument_list|()
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testAsyncReconfigure ()
specifier|public
name|void
name|testAsyncReconfigure
parameter_list|()
throws|throws
name|ReconfigurationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|AsyncReconfigurableDummy
name|dummy
init|=
name|spy
argument_list|(
operator|new
name|AsyncReconfigurableDummy
argument_list|(
name|conf1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PropertyChange
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|PropertyChange
argument_list|(
literal|"name1"
argument_list|,
literal|"new1"
argument_list|,
literal|"old1"
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|PropertyChange
argument_list|(
literal|"name2"
argument_list|,
literal|"new2"
argument_list|,
literal|"old2"
argument_list|)
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
operator|new
name|PropertyChange
argument_list|(
literal|"name3"
argument_list|,
literal|"new3"
argument_list|,
literal|"old3"
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|changes
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|getChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|isPropertyReconfigurable
argument_list|(
name|eq
argument_list|(
literal|"name1"
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|isPropertyReconfigurable
argument_list|(
name|eq
argument_list|(
literal|"name2"
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|isPropertyReconfigurable
argument_list|(
name|eq
argument_list|(
literal|"name3"
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|eq
argument_list|(
literal|"name1"
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|"dummy"
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|eq
argument_list|(
literal|"name2"
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ReconfigurationException
argument_list|(
literal|"NAME3"
argument_list|,
literal|"NEW3"
argument_list|,
literal|"OLD3"
argument_list|,
operator|new
name|IOException
argument_list|(
literal|"io exception"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|reconfigurePropertyImpl
argument_list|(
name|eq
argument_list|(
literal|"name3"
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|waitAsyncReconfigureTaskFinish
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|ReconfigurationTaskStatus
name|status
init|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|getStatus
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PropertyChange
argument_list|,
name|Optional
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
range|:
name|status
operator|.
name|getStatus
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PropertyChange
name|change
init|=
name|result
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|prop
operator|.
name|equals
argument_list|(
literal|"name1"
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|change
operator|.
name|prop
operator|.
name|equals
argument_list|(
literal|"name2"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Property name2 is not reconfigurable"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|change
operator|.
name|prop
operator|.
name|equals
argument_list|(
literal|"name3"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"io exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown property: "
operator|+
name|change
operator|.
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testStartReconfigurationFailureDueToExistingRunningTask ()
specifier|public
name|void
name|testStartReconfigurationFailureDueToExistingRunningTask
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|AsyncReconfigurableDummy
name|dummy
init|=
name|spy
argument_list|(
operator|new
name|AsyncReconfigurableDummy
argument_list|(
name|conf1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PropertyChange
argument_list|>
name|changes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|PropertyChange
argument_list|(
name|PROP1
argument_list|,
literal|"new1"
argument_list|,
literal|"old1"
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|changes
argument_list|)
operator|.
name|when
argument_list|(
name|dummy
argument_list|)
operator|.
name|getChangedProperties
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ReconfigurationTaskStatus
name|status
init|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|hasTask
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|status
operator|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|hasTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|stopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// An active reconfiguration task is running.
try|try
block|{
name|dummy
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Another reconfiguration task is running"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|status
operator|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|hasTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|status
operator|.
name|stopped
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|waitAsyncReconfigureTaskFinish
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|status
operator|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|hasTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|stopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first task has finished.
name|dummy
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|waitAsyncReconfigureTaskFinish
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
name|ReconfigurationTaskStatus
name|status2
init|=
name|dummy
operator|.
name|getReconfigurationTaskStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status2
operator|.
name|getStartTime
argument_list|()
operator|>=
name|status
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|shutdownReconfigurationTask
argument_list|()
expr_stmt|;
try|try
block|{
name|dummy
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect to throw IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"The server is stopped"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that {@link ReconfigurableBase#reconfigureProperty} updates the    * parent's cached configuration on success.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConfIsUpdatedOnSuccess ()
specifier|public
name|void
name|testConfIsUpdatedOnSuccess
parameter_list|()
throws|throws
name|ReconfigurationException
block|{
specifier|final
name|String
name|property
init|=
literal|"FOO"
decl_stmt|;
specifier|final
name|String
name|value1
init|=
literal|"value1"
decl_stmt|;
specifier|final
name|String
name|value2
init|=
literal|"value2"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value1
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value2
argument_list|)
expr_stmt|;
specifier|final
name|ReconfigurableBase
name|reconfigurable
init|=
name|makeReconfigurable
argument_list|(
name|conf
argument_list|,
name|newConf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
name|reconfigurable
operator|.
name|reconfigureProperty
argument_list|(
name|property
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reconfigurable
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|,
name|is
argument_list|(
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that {@link ReconfigurableBase#startReconfigurationTask} updates    * its parent's cached configuration on success.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConfIsUpdatedOnSuccessAsync ()
specifier|public
name|void
name|testConfIsUpdatedOnSuccessAsync
parameter_list|()
throws|throws
name|ReconfigurationException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|String
name|property
init|=
literal|"FOO"
decl_stmt|;
specifier|final
name|String
name|value1
init|=
literal|"value1"
decl_stmt|;
specifier|final
name|String
name|value2
init|=
literal|"value2"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value1
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value2
argument_list|)
expr_stmt|;
specifier|final
name|ReconfigurableBase
name|reconfigurable
init|=
name|makeReconfigurable
argument_list|(
name|conf
argument_list|,
name|newConf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
comment|// Kick off a reconfiguration task and wait until it completes.
name|reconfigurable
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|reconfigurable
operator|.
name|getReconfigurationTaskStatus
argument_list|()
operator|.
name|stopped
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|reconfigurable
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|,
name|is
argument_list|(
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that {@link ReconfigurableBase#reconfigureProperty} unsets the    * property in its parent's configuration when the new value is null.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConfIsUnset ()
specifier|public
name|void
name|testConfIsUnset
parameter_list|()
throws|throws
name|ReconfigurationException
block|{
specifier|final
name|String
name|property
init|=
literal|"FOO"
decl_stmt|;
specifier|final
name|String
name|value1
init|=
literal|"value1"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value1
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|ReconfigurableBase
name|reconfigurable
init|=
name|makeReconfigurable
argument_list|(
name|conf
argument_list|,
name|newConf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
name|reconfigurable
operator|.
name|reconfigureProperty
argument_list|(
name|property
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reconfigurable
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that {@link ReconfigurableBase#startReconfigurationTask} unsets the    * property in its parent's configuration when the new value is null.    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testConfIsUnsetAsync ()
specifier|public
name|void
name|testConfIsUnsetAsync
parameter_list|()
throws|throws
name|ReconfigurationException
throws|,
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|property
init|=
literal|"FOO"
decl_stmt|;
specifier|final
name|String
name|value1
init|=
literal|"value1"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value1
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|ReconfigurableBase
name|reconfigurable
init|=
name|makeReconfigurable
argument_list|(
name|conf
argument_list|,
name|newConf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
comment|// Kick off a reconfiguration task and wait until it completes.
name|reconfigurable
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|reconfigurable
operator|.
name|getReconfigurationTaskStatus
argument_list|()
operator|.
name|stopped
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reconfigurable
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|makeReconfigurable ( final Configuration oldConf, final Configuration newConf, final Collection<String> reconfigurableProperties)
specifier|private
name|ReconfigurableBase
name|makeReconfigurable
parameter_list|(
specifier|final
name|Configuration
name|oldConf
parameter_list|,
specifier|final
name|Configuration
name|newConf
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|reconfigurableProperties
parameter_list|)
block|{
return|return
operator|new
name|ReconfigurableBase
argument_list|(
name|oldConf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Configuration
name|getNewConf
parameter_list|()
block|{
return|return
name|newConf
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getReconfigurableProperties
parameter_list|()
block|{
return|return
name|reconfigurableProperties
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|reconfigurePropertyImpl
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|newVal
parameter_list|)
throws|throws
name|ReconfigurationException
block|{
return|return
name|newVal
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

