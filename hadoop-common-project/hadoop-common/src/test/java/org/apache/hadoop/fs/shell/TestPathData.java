begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPathData
specifier|public
class|class
name|TestPathData
block|{
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testDir
specifier|protected
name|Path
name|testDir
decl_stmt|;
annotation|@
name|Before
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
operator|+
literal|"/testPD"
argument_list|)
expr_stmt|;
comment|// don't want scheme on the path, just an absolute path
name|testDir
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|testDir
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|,
literal|"f1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|,
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d2"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d2"
argument_list|,
literal|"f3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithDirStringAndConf ()
specifier|public
name|void
name|testWithDirStringAndConf
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dirString
init|=
literal|"d1"
decl_stmt|;
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|checkPathData
argument_list|(
name|dirString
argument_list|,
name|item
argument_list|)
expr_stmt|;
comment|// properly implementing symlink support in various commands will require
comment|// trailing slashes to be retained
name|dirString
operator|=
literal|"d1/"
expr_stmt|;
name|item
operator|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkPathData
argument_list|(
name|dirString
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnqualifiedUriContents ()
specifier|public
name|void
name|testUnqualifiedUriContents
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dirString
init|=
literal|"d1"
decl_stmt|;
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
name|item
operator|.
name|getDirectoryContents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
literal|"d1/f1"
argument_list|,
literal|"d1/f1.1"
argument_list|,
literal|"d1/f2"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQualifiedUriContents ()
specifier|public
name|void
name|testQualifiedUriContents
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dirString
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
name|item
operator|.
name|getDirectoryContents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
name|dirString
operator|+
literal|"/f1"
argument_list|,
name|dirString
operator|+
literal|"/f1.1"
argument_list|,
name|dirString
operator|+
literal|"/f2"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCwdContents ()
specifier|public
name|void
name|testCwdContents
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dirString
init|=
name|Path
operator|.
name|CUR_DIR
decl_stmt|;
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
name|item
operator|.
name|getDirectoryContents
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
literal|"d1"
argument_list|,
literal|"d2"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToFile ()
specifier|public
name|void
name|testToFile
parameter_list|()
throws|throws
name|Exception
block|{
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
literal|"."
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
operator|new
name|PathData
argument_list|(
literal|"d1/f1"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|+
literal|"/d1/f1"
argument_list|)
argument_list|,
name|item
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|=
operator|new
name|PathData
argument_list|(
name|testDir
operator|+
literal|"/d1/f1"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
operator|+
literal|"/d1/f1"
argument_list|)
argument_list|,
name|item
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbsoluteGlob ()
specifier|public
name|void
name|testAbsoluteGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|PathData
index|[]
name|items
init|=
name|PathData
operator|.
name|expandAsGlob
argument_list|(
name|testDir
operator|+
literal|"/d1/f1*"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
name|testDir
operator|+
literal|"/d1/f1"
argument_list|,
name|testDir
operator|+
literal|"/d1/f1.1"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativeGlob ()
specifier|public
name|void
name|testRelativeGlob
parameter_list|()
throws|throws
name|Exception
block|{
name|PathData
index|[]
name|items
init|=
name|PathData
operator|.
name|expandAsGlob
argument_list|(
literal|"d1/f1*"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
literal|"d1/f1"
argument_list|,
literal|"d1/f1.1"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRelativeGlobBack ()
specifier|public
name|void
name|testRelativeGlobBack
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"d1"
argument_list|)
argument_list|)
expr_stmt|;
name|PathData
index|[]
name|items
init|=
name|PathData
operator|.
name|expandAsGlob
argument_list|(
literal|"../d2/*"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sortedString
argument_list|(
literal|"../d2/f3"
argument_list|)
argument_list|,
name|sortedString
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithStringAndConfForBuggyPath ()
specifier|public
name|void
name|testWithStringAndConfForBuggyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dirString
init|=
literal|"file:///tmp"
decl_stmt|;
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|dirString
argument_list|)
decl_stmt|;
name|PathData
name|item
init|=
operator|new
name|PathData
argument_list|(
name|dirString
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// this may fail some day if Path is fixed to not crunch the uri
comment|// if the authority is null, however we need to test that the PathData
comment|// toString() returns the given string, while Path toString() does
comment|// the crunching
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkPathData
argument_list|(
name|dirString
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPathData (String dirString, PathData item)
specifier|public
name|void
name|checkPathData
parameter_list|(
name|String
name|dirString
parameter_list|,
name|PathData
name|item
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"checking fs"
argument_list|,
name|fs
argument_list|,
name|item
operator|.
name|fs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking string"
argument_list|,
name|dirString
argument_list|,
name|item
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"checking path"
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|item
operator|.
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checking exist"
argument_list|,
name|item
operator|.
name|stat
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checking isDir"
argument_list|,
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* junit does a lousy job of comparing arrays    * if the array lengths differ, it just says that w/o showing contents    * this sorts the paths, and builds a string of "i:<value>, ..." suitable    * for a string compare    */
DECL|method|sortedString (Object .... list)
specifier|private
specifier|static
name|String
name|sortedString
parameter_list|(
name|Object
modifier|...
name|list
parameter_list|)
block|{
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
name|list
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|strings
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|i
operator|+
literal|":<"
operator|+
name|strings
index|[
name|i
index|]
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sortedString (PathData .... items)
specifier|private
specifier|static
name|String
name|sortedString
parameter_list|(
name|PathData
modifier|...
name|items
parameter_list|)
block|{
return|return
name|sortedString
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|items
argument_list|)
return|;
block|}
block|}
end_class

end_unit

