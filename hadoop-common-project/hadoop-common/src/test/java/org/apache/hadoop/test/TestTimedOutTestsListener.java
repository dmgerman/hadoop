begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import

begin_class
DECL|class|TestTimedOutTestsListener
specifier|public
class|class
name|TestTimedOutTestsListener
block|{
DECL|class|Deadlock
specifier|public
specifier|static
class|class
name|Deadlock
block|{
DECL|field|barrier
specifier|private
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|6
argument_list|)
decl_stmt|;
DECL|method|Deadlock ()
specifier|public
name|Deadlock
parameter_list|()
block|{
name|DeadlockThread
index|[]
name|dThreads
init|=
operator|new
name|DeadlockThread
index|[
literal|6
index|]
decl_stmt|;
name|Monitor
name|a
init|=
operator|new
name|Monitor
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Monitor
name|b
init|=
operator|new
name|Monitor
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Monitor
name|c
init|=
operator|new
name|Monitor
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|dThreads
index|[
literal|0
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"MThread-1"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|dThreads
index|[
literal|1
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"MThread-2"
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|dThreads
index|[
literal|2
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"MThread-3"
argument_list|,
name|c
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|Lock
name|d
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|Lock
name|e
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|Lock
name|f
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|dThreads
index|[
literal|3
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"SThread-4"
argument_list|,
name|d
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|dThreads
index|[
literal|4
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"SThread-5"
argument_list|,
name|e
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|dThreads
index|[
literal|5
index|]
operator|=
operator|new
name|DeadlockThread
argument_list|(
literal|"SThread-6"
argument_list|,
name|f
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// make them daemon threads so that the test will exit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|dThreads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dThreads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|DeadlockThread
class|class
name|DeadlockThread
extends|extends
name|Thread
block|{
DECL|field|lock1
specifier|private
name|Lock
name|lock1
init|=
literal|null
decl_stmt|;
DECL|field|lock2
specifier|private
name|Lock
name|lock2
init|=
literal|null
decl_stmt|;
DECL|field|mon1
specifier|private
name|Monitor
name|mon1
init|=
literal|null
decl_stmt|;
DECL|field|mon2
specifier|private
name|Monitor
name|mon2
init|=
literal|null
decl_stmt|;
DECL|field|useSync
specifier|private
name|boolean
name|useSync
decl_stmt|;
DECL|method|DeadlockThread (String name, Lock lock1, Lock lock2)
name|DeadlockThread
parameter_list|(
name|String
name|name
parameter_list|,
name|Lock
name|lock1
parameter_list|,
name|Lock
name|lock2
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|lock1
operator|=
name|lock1
expr_stmt|;
name|this
operator|.
name|lock2
operator|=
name|lock2
expr_stmt|;
name|this
operator|.
name|useSync
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|DeadlockThread (String name, Monitor mon1, Monitor mon2)
name|DeadlockThread
parameter_list|(
name|String
name|name
parameter_list|,
name|Monitor
name|mon1
parameter_list|,
name|Monitor
name|mon2
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|mon1
operator|=
name|mon1
expr_stmt|;
name|this
operator|.
name|mon2
operator|=
name|mon2
expr_stmt|;
name|this
operator|.
name|useSync
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|useSync
condition|)
block|{
name|syncLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|monitorLock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|syncLock ()
specifier|private
name|void
name|syncLock
parameter_list|()
block|{
name|lock1
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
name|goSyncDeadlock
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock1
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|goSyncDeadlock ()
specifier|private
name|void
name|goSyncDeadlock
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
name|lock2
operator|.
name|lock
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not reach here."
argument_list|)
throw|;
block|}
DECL|method|monitorLock ()
specifier|private
name|void
name|monitorLock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mon1
init|)
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
name|goMonitorDeadlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|goMonitorDeadlock ()
specifier|private
name|void
name|goMonitorDeadlock
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
synchronized|synchronized
init|(
name|mon2
init|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getName
argument_list|()
operator|+
literal|" should not reach here."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|Monitor
class|class
name|Monitor
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|method|Monitor (String name)
name|Monitor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testThreadDumpAndDeadlocks ()
specifier|public
name|void
name|testThreadDumpAndDeadlocks
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|Deadlock
argument_list|()
expr_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|s
operator|=
name|TimedOutTestsListener
operator|.
name|buildDeadlockInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countStringOccurrences
argument_list|(
name|s
argument_list|,
literal|"BLOCKED"
argument_list|)
argument_list|)
expr_stmt|;
name|Failure
name|failure
init|=
operator|new
name|Failure
argument_list|(
literal|null
argument_list|,
operator|new
name|Exception
argument_list|(
name|TimedOutTestsListener
operator|.
name|TEST_TIMED_OUT_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|TimedOutTestsListener
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
argument_list|)
operator|.
name|testFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"THREAD DUMP"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"DEADLOCKS DETECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|countStringOccurrences (String s, String substr)
specifier|private
name|int
name|countStringOccurrences
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|substr
parameter_list|)
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|index
operator|=
name|s
operator|.
name|indexOf
argument_list|(
name|substr
argument_list|,
name|index
argument_list|)
operator|+
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|n
operator|++
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
block|}
end_class

end_unit

