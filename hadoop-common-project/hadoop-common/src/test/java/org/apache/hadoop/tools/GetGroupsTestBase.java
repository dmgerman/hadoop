begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GetGroupsTestBase
specifier|public
specifier|abstract
class|class
name|GetGroupsTestBase
block|{
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|testUser1
specifier|private
name|UserGroupInformation
name|testUser1
decl_stmt|;
DECL|field|testUser2
specifier|private
name|UserGroupInformation
name|testUser2
decl_stmt|;
DECL|method|getTool (PrintStream o)
specifier|protected
specifier|abstract
name|Tool
name|getTool
parameter_list|(
name|PrintStream
name|o
parameter_list|)
function_decl|;
annotation|@
name|Before
DECL|method|setUpUsers ()
specifier|public
name|void
name|setUpUsers
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make sure the current user's info is in the list of test users.
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
name|testUser1
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar"
block|,
literal|"baz"
block|}
argument_list|)
expr_stmt|;
name|testUser2
operator|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"fiz"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"buz"
block|,
literal|"boz"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoUserGiven ()
specifier|public
name|void
name|testNoUserGiven
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No user provided should default to current user"
argument_list|,
name|getExpectedOutput
argument_list|(
name|currentUser
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExistingUser ()
specifier|public
name|void
name|testExistingUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
name|testUser1
operator|.
name|getUserName
argument_list|()
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Show only the output of the user given"
argument_list|,
name|getExpectedOutput
argument_list|(
name|testUser1
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleExistingUsers ()
specifier|public
name|void
name|testMultipleExistingUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
name|testUser1
operator|.
name|getUserName
argument_list|()
block|,
name|testUser2
operator|.
name|getUserName
argument_list|()
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Show the output for both users given"
argument_list|,
name|getExpectedOutput
argument_list|(
name|testUser1
argument_list|)
operator|+
name|getExpectedOutput
argument_list|(
name|testUser2
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonExistentUser ()
specifier|public
name|void
name|testNonExistentUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"does-not-exist"
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Show the output for only the user given, with no groups"
argument_list|,
name|getExpectedOutput
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"does-not-exist"
argument_list|)
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleNonExistingUsers ()
specifier|public
name|void
name|testMultipleNonExistingUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"does-not-exist1"
block|,
literal|"does-not-exist2"
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Show the output for only the user given, with no groups"
argument_list|,
name|getExpectedOutput
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"does-not-exist1"
argument_list|)
argument_list|)
operator|+
name|getExpectedOutput
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"does-not-exist2"
argument_list|)
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExistingInterleavedWithNonExistentUsers ()
specifier|public
name|void
name|testExistingInterleavedWithNonExistentUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|actualOutput
init|=
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"does-not-exist1"
block|,
name|testUser1
operator|.
name|getUserName
argument_list|()
block|,
literal|"does-not-exist2"
block|,
name|testUser2
operator|.
name|getUserName
argument_list|()
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Show the output for only the user given, with no groups"
argument_list|,
name|getExpectedOutput
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"does-not-exist1"
argument_list|)
argument_list|)
operator|+
name|getExpectedOutput
argument_list|(
name|testUser1
argument_list|)
operator|+
name|getExpectedOutput
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"does-not-exist2"
argument_list|)
argument_list|)
operator|+
name|getExpectedOutput
argument_list|(
name|testUser2
argument_list|)
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedOutput (UserGroupInformation user)
specifier|private
specifier|static
name|String
name|getExpectedOutput
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|String
name|expectedOutput
init|=
name|user
operator|.
name|getUserName
argument_list|()
operator|+
literal|" :"
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|user
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|expectedOutput
operator|+=
literal|" "
operator|+
name|group
expr_stmt|;
block|}
return|return
name|expectedOutput
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
return|;
block|}
DECL|method|runTool (Configuration conf, String[] args, boolean success)
specifier|private
name|String
name|runTool
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|o
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|o
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|getTool
argument_list|(
name|out
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|success
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|o
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

