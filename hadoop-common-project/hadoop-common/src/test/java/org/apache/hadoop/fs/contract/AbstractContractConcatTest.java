begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertFileHasLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_comment
comment|/**  * Test concat -if supported  */
end_comment

begin_class
DECL|class|AbstractContractConcatTest
specifier|public
specifier|abstract
class|class
name|AbstractContractConcatTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractContractConcatTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|srcFile
specifier|private
name|Path
name|srcFile
decl_stmt|;
DECL|field|zeroByteFile
specifier|private
name|Path
name|zeroByteFile
decl_stmt|;
DECL|field|target
specifier|private
name|Path
name|target
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|skipIfUnsupported
argument_list|(
name|SUPPORTS_CONCAT
argument_list|)
expr_stmt|;
comment|//delete the test directory
name|testPath
operator|=
name|path
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|srcFile
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"small.txt"
argument_list|)
expr_stmt|;
name|zeroByteFile
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"zero.txt"
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|srcFile
argument_list|,
literal|true
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|zeroByteFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcatEmptyFiles ()
specifier|public
name|void
name|testConcatEmptyFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|handleExpectedException
argument_list|(
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getFileSystem
argument_list|()
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcatMissingTarget ()
specifier|public
name|void
name|testConcatMissingTarget
parameter_list|()
throws|throws
name|Throwable
block|{
name|handleExpectedException
argument_list|(
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getFileSystem
argument_list|()
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|Path
index|[]
block|{
name|zeroByteFile
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcatFileOnFile ()
specifier|public
name|void
name|testConcatFileOnFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|getFileSystem
argument_list|()
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|Path
index|[]
block|{
name|srcFile
block|}
argument_list|)
expr_stmt|;
name|assertFileHasLength
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
name|TEST_FILE_LEN
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|validateFileContent
argument_list|(
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
name|TEST_FILE_LEN
operator|*
literal|2
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|block
block|,
name|block
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcatOnSelf ()
specifier|public
name|void
name|testConcatOnSelf
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|handleExpectedException
argument_list|(
name|intercept
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getFileSystem
argument_list|()
operator|.
name|concat
argument_list|(
name|target
argument_list|,
operator|new
name|Path
index|[]
block|{
name|target
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

