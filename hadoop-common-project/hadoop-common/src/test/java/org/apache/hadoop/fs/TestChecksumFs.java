begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests the functionality of ChecksumFs.  */
end_comment

begin_class
DECL|class|TestChecksumFs
specifier|public
class|class
name|TestChecksumFs
extends|extends
name|HadoopTestBase
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|testRootDirPath
specifier|private
name|Path
name|testRootDirPath
decl_stmt|;
DECL|field|fc
specifier|private
name|FileContext
name|fc
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|getTestConfiguration
argument_list|()
expr_stmt|;
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testRootDirPath
operator|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|mkdirs
argument_list|(
name|testRootDirPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fc
operator|!=
literal|null
condition|)
block|{
name|fc
operator|.
name|delete
argument_list|(
name|testRootDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileToFile ()
specifier|public
name|void
name|testRenameFileToFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameSrc"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameDst"
argument_list|)
decl_stmt|;
name|verifyRename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileToFileWithOverwrite ()
specifier|public
name|void
name|testRenameFileToFileWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameSrc"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameDst"
argument_list|)
decl_stmt|;
name|verifyRename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileIntoDirFile ()
specifier|public
name|void
name|testRenameFileIntoDirFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameSrc"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameDir/testRenameDst"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|verifyRename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileIntoDirFileWithOverwrite ()
specifier|public
name|void
name|testRenameFileIntoDirFileWithOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameSrc"
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|testRootDirPath
argument_list|,
literal|"testRenameDir/testRenameDst"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|verifyRename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRename (Path srcPath, Path dstPath, boolean overwrite)
specifier|private
name|void
name|verifyRename
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|Exception
block|{
name|ChecksumFs
name|fs
init|=
operator|(
name|ChecksumFs
operator|)
name|fc
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dstPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Options
operator|.
name|Rename
name|renameOpt
init|=
name|Options
operator|.
name|Rename
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|overwrite
condition|)
block|{
name|renameOpt
operator|=
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
expr_stmt|;
name|createTestFile
argument_list|(
name|fs
argument_list|,
name|dstPath
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// ensure file + checksum are moved
name|createTestFile
argument_list|(
name|fs
argument_list|,
name|srcPath
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checksum file doesn't exist for source file - "
operator|+
name|srcPath
argument_list|,
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fs
operator|.
name|getChecksumFile
argument_list|(
name|srcPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|renameOpt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checksum file doesn't exist for dest file - "
operator|+
name|srcPath
argument_list|,
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fs
operator|.
name|getChecksumFile
argument_list|(
name|dstPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|dstPath
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|is
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTestConfiguration ()
specifier|private
specifier|static
name|Configuration
name|getTestConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.AbstractFileSystem.file.impl"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|local
operator|.
name|LocalFs
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|createTestFile (ChecksumFs fs, Path path, int content)
specifier|private
name|void
name|createTestFile
parameter_list|(
name|ChecksumFs
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|content
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CREATE
argument_list|,
name|OVERWRITE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|perms
argument_list|(
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|fout
operator|.
name|writeInt
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mkdirs (Path dirPath)
specifier|private
name|void
name|mkdirs
parameter_list|(
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
name|fc
operator|.
name|mkdir
argument_list|(
name|dirPath
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

