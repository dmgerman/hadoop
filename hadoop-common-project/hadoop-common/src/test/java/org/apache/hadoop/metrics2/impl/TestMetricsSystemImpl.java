begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Captor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MoreAsserts
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the MetricsSystemImpl class  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestMetricsSystemImpl
specifier|public
class|class
name|TestMetricsSystemImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMetricsSystemImpl
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|r1
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsRecord
argument_list|>
name|r1
decl_stmt|;
DECL|field|r2
annotation|@
name|Captor
specifier|private
name|ArgumentCaptor
argument_list|<
name|MetricsRecord
argument_list|>
name|r2
decl_stmt|;
DECL|field|hostname
specifier|private
specifier|static
name|String
name|hostname
init|=
name|MetricsSystemImpl
operator|.
name|getHostname
argument_list|()
decl_stmt|;
DECL|class|TestSink
specifier|public
specifier|static
class|class
name|TestSink
implements|implements
name|MetricsSink
block|{
DECL|method|putMetrics (MetricsRecord record)
annotation|@
name|Override
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|record
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|flush ()
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{}
DECL|method|init (SubsetConfiguration conf)
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|MetricsConfig
operator|.
name|toString
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInitFirstVerifyStopInvokedImmediately ()
annotation|@
name|Test
specifier|public
name|void
name|testInitFirstVerifyStopInvokedImmediately
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
comment|//.add("test.sink.plugin.urls", getPluginUrlsAsString())
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.*.source.filter.exclude"
argument_list|,
literal|"s0"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.source.s1.metric.filter.exclude"
argument_list|,
literal|"X*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink1.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink2.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"s0"
argument_list|,
literal|"s0 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s0rec"
argument_list|)
argument_list|)
expr_stmt|;
name|TestSource
name|s1
init|=
name|ms
operator|.
name|register
argument_list|(
literal|"s1"
argument_list|,
literal|"s1 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s1rec"
argument_list|)
argument_list|)
decl_stmt|;
name|s1
operator|.
name|c1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|xxx
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|g1
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|yyy
operator|.
name|incr
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|s1
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MetricsSink
name|sink1
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsSink
name|sink2
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink1"
argument_list|,
literal|"sink1 desc"
argument_list|,
name|sink1
argument_list|)
expr_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink2"
argument_list|,
literal|"sink2 desc"
argument_list|,
name|sink2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
comment|// publish the metrics
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//When we call stop, at most two sources will be consumed by each sink thread.
name|verify
argument_list|(
name|sink1
argument_list|,
name|atMost
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r1
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr1
init|=
name|r1
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|sink2
argument_list|,
name|atMost
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr2
init|=
name|r2
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|mr1
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|mr2
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|checkMetricsRecords
argument_list|(
name|mr1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|mr1
argument_list|,
name|mr2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mr1
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|checkMetricsRecords
argument_list|(
name|mr1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mr2
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|checkMetricsRecords
argument_list|(
name|mr2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInitFirstVerifyCallBacks ()
annotation|@
name|Test
specifier|public
name|void
name|testInitFirstVerifyCallBacks
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
comment|//.add("test.sink.plugin.urls", getPluginUrlsAsString())
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.*.source.filter.exclude"
argument_list|,
literal|"s0"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.source.s1.metric.filter.exclude"
argument_list|,
literal|"X*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink1.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.sink2.metric.filter.exclude"
argument_list|,
literal|"Y*"
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"s0"
argument_list|,
literal|"s0 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s0rec"
argument_list|)
argument_list|)
expr_stmt|;
name|TestSource
name|s1
init|=
name|ms
operator|.
name|register
argument_list|(
literal|"s1"
argument_list|,
literal|"s1 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s1rec"
argument_list|)
argument_list|)
decl_stmt|;
name|s1
operator|.
name|c1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|xxx
operator|.
name|incr
argument_list|()
expr_stmt|;
name|s1
operator|.
name|g1
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|yyy
operator|.
name|incr
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|s1
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MetricsSink
name|sink1
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsSink
name|sink2
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink1"
argument_list|,
literal|"sink1 desc"
argument_list|,
name|sink1
argument_list|)
expr_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"sink2"
argument_list|,
literal|"sink2 desc"
argument_list|,
name|sink2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
comment|// publish the metrics
try|try
block|{
name|verify
argument_list|(
name|sink1
argument_list|,
name|timeout
argument_list|(
literal|200
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r1
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sink2
argument_list|,
name|timeout
argument_list|(
literal|200
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//When we call stop, at most two sources will be consumed by each sink thread.
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr1
init|=
name|r1
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr2
init|=
name|r2
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|checkMetricsRecords
argument_list|(
name|mr1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|mr1
argument_list|,
name|mr2
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiThreadedPublish ()
annotation|@
name|Test
specifier|public
name|void
name|testMultiThreadedPublish
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|80
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.collector."
operator|+
name|MetricsConfig
operator|.
name|QUEUE_CAPACITY_KEY
argument_list|,
name|numThreads
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|CollectingSink
name|sink
init|=
operator|new
name|CollectingSink
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"collector"
argument_list|,
literal|"Collector of values from all threads."
argument_list|,
name|sink
argument_list|)
expr_stmt|;
specifier|final
name|TestSource
index|[]
name|sources
init|=
operator|new
name|TestSource
index|[
name|numThreads
index|]
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|results
init|=
operator|new
name|String
index|[
name|numThreads
index|]
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier1
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|,
name|barrier2
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|sources
index|[
name|i
index|]
operator|=
name|ms
operator|.
name|register
argument_list|(
literal|"threadSource"
operator|+
name|i
argument_list|,
literal|"A source of my threaded goodness."
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"threadSourceRec"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
name|boolean
name|safeAwait
parameter_list|(
name|int
name|mySource
parameter_list|,
name|CyclicBarrier
name|barrier
parameter_list|)
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|results
index|[
name|mySource
index|]
operator|=
literal|"Interrupted"
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|results
index|[
name|mySource
index|]
operator|=
literal|"Broken Barrier"
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|results
index|[
name|mySource
index|]
operator|=
literal|"Timed out on barrier"
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|mySource
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sink
operator|.
name|collected
index|[
name|mySource
index|]
operator|.
name|get
argument_list|()
operator|!=
literal|0L
condition|)
block|{
name|results
index|[
name|mySource
index|]
operator|=
literal|"Someone else collected my metric!"
expr_stmt|;
return|return;
block|}
comment|// Wait for all the threads to come here so we can hammer
comment|// the system at the same time
if|if
condition|(
operator|!
name|safeAwait
argument_list|(
name|mySource
argument_list|,
name|barrier1
argument_list|)
condition|)
return|return;
name|sources
index|[
name|mySource
index|]
operator|.
name|g1
operator|.
name|set
argument_list|(
literal|230
argument_list|)
expr_stmt|;
name|ms
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
comment|// Since some other thread may have snatched my metric,
comment|// I need to wait for the threads to finish before checking.
if|if
condition|(
operator|!
name|safeAwait
argument_list|(
name|mySource
argument_list|,
name|barrier2
argument_list|)
condition|)
return|return;
if|if
condition|(
name|sink
operator|.
name|collected
index|[
name|mySource
index|]
operator|.
name|get
argument_list|()
operator|!=
literal|230L
condition|)
block|{
name|results
index|[
name|mySource
index|]
operator|=
literal|"Metric not collected!"
expr_stmt|;
return|return;
block|}
name|results
index|[
name|mySource
index|]
operator|=
literal|"Passed"
expr_stmt|;
block|}
block|}
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|ms
operator|.
name|droppedPubAll
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|)
argument_list|,
name|Iterables
operator|.
name|all
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|results
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Passed"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|class|CollectingSink
specifier|private
specifier|static
class|class
name|CollectingSink
implements|implements
name|MetricsSink
block|{
DECL|field|collected
specifier|private
specifier|final
name|AtomicLong
index|[]
name|collected
decl_stmt|;
DECL|method|CollectingSink (int capacity)
specifier|public
name|CollectingSink
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|collected
operator|=
operator|new
name|AtomicLong
index|[
name|capacity
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|collected
index|[
name|i
index|]
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
specifier|final
name|String
name|prefix
init|=
literal|"threadSourceRec"
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
specifier|final
name|int
name|recordNumber
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|record
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractMetric
name|m
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"g1"
argument_list|)
condition|)
block|{
name|collected
index|[
name|recordNumber
index|]
operator|.
name|set
argument_list|(
name|m
operator|.
name|value
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|names
operator|.
name|add
argument_list|(
name|m
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
block|}
DECL|method|testHangingSink ()
annotation|@
name|Test
specifier|public
name|void
name|testHangingSink
parameter_list|()
block|{
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.hanging.retry.delay"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.hanging.retry.backoff"
argument_list|,
literal|"1.01"
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.hanging.retry.count"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|TestSource
name|s
init|=
name|ms
operator|.
name|register
argument_list|(
literal|"s3"
argument_list|,
literal|"s3 desc"
argument_list|,
operator|new
name|TestSource
argument_list|(
literal|"s3rec"
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|c1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|HangingSink
name|hanging
init|=
operator|new
name|HangingSink
argument_list|()
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"hanging"
argument_list|,
literal|"Hang the sink!"
argument_list|,
name|hanging
argument_list|)
expr_stmt|;
name|ms
operator|.
name|publishMetricsNow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ms
operator|.
name|droppedPubAll
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hanging
operator|.
name|getInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hanging
operator|.
name|getInterrupted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The sink didn't get called after its first hang "
operator|+
literal|"for subsequent records."
argument_list|,
name|hanging
operator|.
name|getGotCalledSecondTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|HangingSink
specifier|private
specifier|static
class|class
name|HangingSink
implements|implements
name|MetricsSink
block|{
DECL|field|interrupted
specifier|private
specifier|volatile
name|boolean
name|interrupted
decl_stmt|;
DECL|field|gotCalledSecondTime
specifier|private
name|boolean
name|gotCalledSecondTime
decl_stmt|;
DECL|field|firstTime
specifier|private
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
DECL|method|getGotCalledSecondTime ()
specifier|public
name|boolean
name|getGotCalledSecondTime
parameter_list|()
block|{
return|return
name|gotCalledSecondTime
return|;
block|}
DECL|method|getInterrupted ()
specifier|public
name|boolean
name|getInterrupted
parameter_list|()
block|{
return|return
name|interrupted
return|;
block|}
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
comment|// No need to hang every time, just the first record.
if|if
condition|(
operator|!
name|firstTime
condition|)
block|{
name|gotCalledSecondTime
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|firstTime
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
block|}
DECL|method|testRegisterDups ()
annotation|@
name|Test
specifier|public
name|void
name|testRegisterDups
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|TestSource
name|ts1
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|TestSource
name|ts2
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts2"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"ts1"
argument_list|,
literal|""
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|MetricsSource
name|s1
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s1
argument_list|)
expr_stmt|;
comment|// should work when metrics system is not started
name|ms
operator|.
name|register
argument_list|(
literal|"ts1"
argument_list|,
literal|""
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|MetricsSource
name|s2
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testRegisterDupError ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRegisterDupError
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TestSource
name|ts
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|testStartStopStart ()
annotation|@
name|Test
specifier|public
name|void
name|testStartStopStart
parameter_list|()
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Clear pre-existing source names.
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TestSource
name|ts
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"ts"
argument_list|,
literal|""
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|MetricsSourceAdapter
name|sa
init|=
name|ms
operator|.
name|getSourceAdapter
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sa
operator|.
name|getMBeanName
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
name|sa
operator|=
name|ms
operator|.
name|getSourceAdapter
argument_list|(
literal|"ts"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sa
operator|.
name|getMBeanName
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testUnregisterSource ()
annotation|@
name|Test
specifier|public
name|void
name|testUnregisterSource
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|TestSource
name|ts1
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|TestSource
name|ts2
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts2"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"ts1"
argument_list|,
literal|""
argument_list|,
name|ts1
argument_list|)
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
literal|"ts2"
argument_list|,
literal|""
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|MetricsSource
name|s1
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s1
argument_list|)
expr_stmt|;
comment|// should work when metrics system is not started
name|ms
operator|.
name|unregisterSource
argument_list|(
literal|"ts1"
argument_list|)
expr_stmt|;
name|s1
operator|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|MetricsSource
name|s2
init|=
name|ms
operator|.
name|getSource
argument_list|(
literal|"ts2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testRegisterSourceWithoutName ()
annotation|@
name|Test
specifier|public
name|void
name|testRegisterSourceWithoutName
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|TestSource
name|ts
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|TestSource2
name|ts2
init|=
operator|new
name|TestSource2
argument_list|(
literal|"ts2"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|init
argument_list|(
literal|"TestMetricsSystem"
argument_list|)
expr_stmt|;
comment|// if metrics source is registered without name,
comment|// the class name will be used as the name
name|MetricsSourceAdapter
name|sa
init|=
operator|(
operator|(
name|MetricsSystemImpl
operator|)
name|ms
operator|)
operator|.
name|getSourceAdapter
argument_list|(
literal|"TestSource"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|MetricsSourceAdapter
name|sa2
init|=
operator|(
operator|(
name|MetricsSystemImpl
operator|)
name|ms
operator|)
operator|.
name|getSourceAdapter
argument_list|(
literal|"TestSource2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sa2
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|checkMetricsRecords (List<MetricsRecord> recs)
specifier|private
name|void
name|checkMetricsRecords
parameter_list|(
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|recs
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|recs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MetricsRecord
name|r
init|=
name|recs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
literal|"s1rec"
argument_list|,
name|r
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tags"
argument_list|,
operator|new
name|MetricsTag
index|[]
block|{
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
literal|"test"
argument_list|)
block|,
name|tag
argument_list|(
name|MsInfo
operator|.
name|Hostname
argument_list|,
name|hostname
argument_list|)
block|}
argument_list|,
name|r
operator|.
name|tags
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"metrics"
argument_list|,
name|MetricsLists
operator|.
name|builder
argument_list|(
literal|""
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1 desc"
argument_list|)
argument_list|,
literal|1L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1 desc"
argument_list|)
argument_list|,
literal|2L
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S1NumOps"
argument_list|,
literal|"Number of ops for s1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"S1AvgTime"
argument_list|,
literal|"Average time for s1"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
operator|.
name|metrics
argument_list|()
argument_list|,
name|r
operator|.
name|metrics
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|recs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"NumActiveSinks should be 3"
argument_list|,
name|Iterables
operator|.
name|contains
argument_list|(
name|r
operator|.
name|metrics
argument_list|()
argument_list|,
operator|new
name|MetricGaugeInt
argument_list|(
name|MsInfo
operator|.
name|NumActiveSinks
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQSize ()
specifier|public
name|void
name|testQSize
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
operator|.
name|add
argument_list|(
literal|"*.queue.capacity"
argument_list|,
literal|2
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|proceedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|reachedPutMetricSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|MetricsSink
name|slowSink
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsSink
name|dataSink
init|=
name|mock
argument_list|(
name|MetricsSink
operator|.
name|class
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"slowSink"
argument_list|,
literal|"The sink that will wait on putMetric"
argument_list|,
name|slowSink
argument_list|)
expr_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"dataSink"
argument_list|,
literal|"The sink I'll use to get info about slowSink"
argument_list|,
name|dataSink
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|reachedPutMetricSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|proceedSignal
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|slowSink
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|any
argument_list|(
name|MetricsRecord
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger metric collection first time
name|ms
operator|.
name|onTimerEvent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|reachedPutMetricSignal
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now that the slow sink is still processing the first metric,
comment|// its queue length should be 1 for the second collection.
name|ms
operator|.
name|onTimerEvent
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|dataSink
argument_list|,
name|timeout
argument_list|(
literal|500
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|putMetrics
argument_list|(
name|r1
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MetricsRecord
argument_list|>
name|mr
init|=
name|r1
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
name|Number
name|qSize
init|=
name|Iterables
operator|.
name|find
argument_list|(
name|mr
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|metrics
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|AbstractMetric
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|AbstractMetric
name|input
parameter_list|)
block|{
assert|assert
name|input
operator|!=
literal|null
assert|;
return|return
name|input
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sink_slowSinkQsize"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|proceedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Class to verify HADOOP-11932. Instead of reading from HTTP, going in loop    * until closed.    */
DECL|class|TestClosableSink
specifier|private
specifier|static
class|class
name|TestClosableSink
implements|implements
name|MetricsSink
implements|,
name|Closeable
block|{
DECL|field|closed
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|collectingLatch
name|CountDownLatch
name|collectingLatch
decl_stmt|;
DECL|method|TestClosableSink (CountDownLatch collectingLatch)
specifier|public
name|TestClosableSink
parameter_list|(
name|CountDownLatch
name|collectingLatch
parameter_list|)
block|{
name|this
operator|.
name|collectingLatch
operator|=
name|collectingLatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (SubsetConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|putMetrics (MetricsRecord record)
specifier|public
name|void
name|putMetrics
parameter_list|(
name|MetricsRecord
name|record
parameter_list|)
block|{
while|while
condition|(
operator|!
name|closed
condition|)
block|{
name|collectingLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
block|}
comment|/**    * HADOOP-11932    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testHangOnSinkRead ()
specifier|public
name|void
name|testHangOnSinkRead
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.period"
argument_list|,
literal|8
argument_list|)
operator|.
name|add
argument_list|(
literal|"test.sink.test.class"
argument_list|,
name|TestSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|save
argument_list|(
name|TestMetricsConfig
operator|.
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-test"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|CountDownLatch
name|collectingLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MetricsSink
name|sink
init|=
operator|new
name|TestClosableSink
argument_list|(
name|collectingLatch
argument_list|)
decl_stmt|;
name|ms
operator|.
name|registerSink
argument_list|(
literal|"closeableSink"
argument_list|,
literal|"The sink will be used to test closeability"
argument_list|,
name|sink
argument_list|)
expr_stmt|;
comment|// trigger metric collection first time
name|ms
operator|.
name|onTimerEvent
argument_list|()
expr_stmt|;
comment|// Make sure that sink is collecting metrics
name|assertTrue
argument_list|(
name|collectingLatch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ms
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRegisterSourceJmxCacheTTL ()
specifier|public
name|void
name|testRegisterSourceJmxCacheTTL
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|ms
operator|.
name|init
argument_list|(
literal|"TestMetricsSystem"
argument_list|)
expr_stmt|;
name|TestSource
name|ts
init|=
operator|new
name|TestSource
argument_list|(
literal|"ts"
argument_list|)
decl_stmt|;
name|ms
operator|.
name|register
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|MetricsSourceAdapter
name|sa
init|=
operator|(
operator|(
name|MetricsSystemImpl
operator|)
name|ms
operator|)
operator|.
name|getSourceAdapter
argument_list|(
literal|"TestSource"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MetricsConfig
operator|.
name|PERIOD_DEFAULT
operator|*
literal|1000
operator|+
literal|1
argument_list|,
name|sa
operator|.
name|getJmxCacheTTL
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitShutdown ()
specifier|public
name|void
name|testInitShutdown
parameter_list|()
block|{
name|boolean
name|oldMode
init|=
name|DefaultMetricsSystem
operator|.
name|inMiniClusterMode
argument_list|()
decl_stmt|;
try|try
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|runInitShutdownTests
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runInitShutdownTests
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
name|oldMode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runInitShutdownTests ()
specifier|private
name|void
name|runInitShutdownTests
parameter_list|()
block|{
name|MetricsSystemImpl
name|ms
init|=
operator|new
name|MetricsSystemImpl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|init
argument_list|(
literal|"TestMetricsSystem1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|init
argument_list|(
literal|"TestMetricsSystem2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|init
argument_list|(
literal|"TestMetricsSystem3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|isMonitoring
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|ms
operator|.
name|getRefCount
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"test"
argument_list|)
DECL|class|TestSource
specifier|private
specifier|static
class|class
name|TestSource
block|{
DECL|field|c1
annotation|@
name|Metric
argument_list|(
literal|"C1 desc"
argument_list|)
name|MutableCounterLong
name|c1
decl_stmt|;
DECL|field|xxx
annotation|@
name|Metric
argument_list|(
literal|"XXX desc"
argument_list|)
name|MutableCounterLong
name|xxx
decl_stmt|;
DECL|field|g1
annotation|@
name|Metric
argument_list|(
literal|"G1 desc"
argument_list|)
name|MutableGaugeLong
name|g1
decl_stmt|;
DECL|field|yyy
annotation|@
name|Metric
argument_list|(
literal|"YYY desc"
argument_list|)
name|MutableGaugeLong
name|yyy
decl_stmt|;
DECL|field|s1
annotation|@
name|Metric
name|MutableRate
name|s1
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|TestSource (String recName)
name|TestSource
parameter_list|(
name|String
name|recName
parameter_list|)
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|recName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"test"
argument_list|)
DECL|class|TestSource2
specifier|private
specifier|static
class|class
name|TestSource2
block|{
DECL|field|c1
annotation|@
name|Metric
argument_list|(
literal|"C1 desc"
argument_list|)
name|MutableCounterLong
name|c1
decl_stmt|;
DECL|field|xxx
annotation|@
name|Metric
argument_list|(
literal|"XXX desc"
argument_list|)
name|MutableCounterLong
name|xxx
decl_stmt|;
DECL|field|g1
annotation|@
name|Metric
argument_list|(
literal|"G1 desc"
argument_list|)
name|MutableGaugeLong
name|g1
decl_stmt|;
DECL|field|yyy
annotation|@
name|Metric
argument_list|(
literal|"YYY desc"
argument_list|)
name|MutableGaugeLong
name|yyy
decl_stmt|;
DECL|field|s1
annotation|@
name|Metric
name|MutableRate
name|s1
decl_stmt|;
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
decl_stmt|;
DECL|method|TestSource2 (String recName)
name|TestSource2
parameter_list|(
name|String
name|recName
parameter_list|)
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|recName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPluginUrlsAsString ()
specifier|private
specifier|static
name|String
name|getPluginUrlsAsString
parameter_list|()
block|{
return|return
literal|"file:metrics2-test-plugin.jar"
return|;
block|}
block|}
end_class

end_unit

