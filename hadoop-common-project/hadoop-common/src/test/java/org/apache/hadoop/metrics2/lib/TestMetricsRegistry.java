begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the metric registry class  */
end_comment

begin_class
DECL|class|TestMetricsRegistry
specifier|public
class|class
name|TestMetricsRegistry
block|{
comment|/**    * Test various factory methods    */
DECL|method|testNewMetrics ()
annotation|@
name|Test
specifier|public
name|void
name|testNewMetrics
parameter_list|()
block|{
specifier|final
name|MetricsRegistry
name|r
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|r
operator|.
name|newCounter
argument_list|(
literal|"c1"
argument_list|,
literal|"c1 desc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|newCounter
argument_list|(
literal|"c2"
argument_list|,
literal|"c2 desc"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|r
operator|.
name|newGauge
argument_list|(
literal|"g1"
argument_list|,
literal|"g1 desc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|r
operator|.
name|newGauge
argument_list|(
literal|"g2"
argument_list|,
literal|"g2 desc"
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|r
operator|.
name|newStat
argument_list|(
literal|"s1"
argument_list|,
literal|"s1 desc"
argument_list|,
literal|"ops"
argument_list|,
literal|"time"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"num metrics in registry"
argument_list|,
literal|5
argument_list|,
name|r
operator|.
name|metrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"c1 found"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
operator|instanceof
name|MutableCounterInt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"c2 found"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"c2"
argument_list|)
operator|instanceof
name|MutableCounterLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"g1 found"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"g1"
argument_list|)
operator|instanceof
name|MutableGaugeInt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"g2 found"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"g2"
argument_list|)
operator|instanceof
name|MutableGaugeLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"s1 found"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|instanceof
name|MutableStat
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Metric name c1 already exists"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"c1"
argument_list|,
literal|"test dup"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test adding metrics with whitespace in the name    */
annotation|@
name|Test
DECL|method|testMetricsRegistryIllegalMetricNames ()
specifier|public
name|void
name|testMetricsRegistryIllegalMetricNames
parameter_list|()
block|{
specifier|final
name|MetricsRegistry
name|r
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// Fill up with some basics
name|r
operator|.
name|newCounter
argument_list|(
literal|"c1"
argument_list|,
literal|"c1 desc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|newGauge
argument_list|(
literal|"g1"
argument_list|,
literal|"g1 desc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|newQuantiles
argument_list|(
literal|"q1"
argument_list|,
literal|"q1 desc"
argument_list|,
literal|"q1 name"
argument_list|,
literal|"q1 val type"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some illegal names
name|expectMetricsException
argument_list|(
literal|"Metric name 'badcount 2' contains "
operator|+
literal|"illegal whitespace character"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"badcount 2"
argument_list|,
literal|"c2 desc"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Metric name 'badcount3  ' contains "
operator|+
literal|"illegal whitespace character"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"badcount3  "
argument_list|,
literal|"c3 desc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Metric name '  badcount4' contains "
operator|+
literal|"illegal whitespace character"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"  badcount4"
argument_list|,
literal|"c4 desc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Metric name 'withtab5	' contains "
operator|+
literal|"illegal whitespace character"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"withtab5	"
argument_list|,
literal|"c5 desc"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Metric name 'withnewline6\n' contains "
operator|+
literal|"illegal whitespace character"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newCounter
argument_list|(
literal|"withnewline6\n"
argument_list|,
literal|"c6 desc"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Final validation
name|assertEquals
argument_list|(
literal|"num metrics in registry"
argument_list|,
literal|3
argument_list|,
name|r
operator|.
name|metrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the add by name method    */
DECL|method|testAddByName ()
annotation|@
name|Test
specifier|public
name|void
name|testAddByName
parameter_list|()
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
specifier|final
name|MetricsRegistry
name|r
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
literal|"s1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|r
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S1NumOps"
argument_list|,
literal|"Number of ops for s1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"S1AvgTime"
argument_list|,
literal|"Average time for s1"
argument_list|)
argument_list|,
literal|42.0
argument_list|)
expr_stmt|;
name|r
operator|.
name|newCounter
argument_list|(
literal|"c1"
argument_list|,
literal|"test add"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|newGauge
argument_list|(
literal|"g1"
argument_list|,
literal|"test add"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Unsupported add"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|add
argument_list|(
literal|"c1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expectMetricsException
argument_list|(
literal|"Unsupported add"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|add
argument_list|(
literal|"g1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test adding illegal parameters    */
annotation|@
name|Test
DECL|method|testAddIllegalParameters ()
specifier|public
name|void
name|testAddIllegalParameters
parameter_list|()
block|{
specifier|final
name|MetricsRegistry
name|r
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"IllegalParamTest"
argument_list|)
decl_stmt|;
name|expectMetricsException
argument_list|(
literal|"Interval should be positive.  Value passed is: -20"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|r
operator|.
name|newQuantiles
argument_list|(
literal|"q1"
argument_list|,
literal|"New Quantile 1"
argument_list|,
literal|"qq1"
argument_list|,
literal|"qv1"
argument_list|,
operator|(
name|int
operator|)
operator|-
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
DECL|method|expectMetricsException (String prefix, Runnable fun)
specifier|private
name|void
name|expectMetricsException
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Runnable
name|fun
parameter_list|)
block|{
try|try
block|{
name|fun
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetricsException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expected exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should've thrown '"
operator|+
name|prefix
operator|+
literal|"...'"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

