begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNetgroupCache
specifier|public
class|class
name|TestNetgroupCache
block|{
DECL|field|USER1
specifier|private
specifier|static
specifier|final
name|String
name|USER1
init|=
literal|"user1"
decl_stmt|;
DECL|field|USER2
specifier|private
specifier|static
specifier|final
name|String
name|USER2
init|=
literal|"user2"
decl_stmt|;
DECL|field|USER3
specifier|private
specifier|static
specifier|final
name|String
name|USER3
init|=
literal|"user3"
decl_stmt|;
DECL|field|GROUP1
specifier|private
specifier|static
specifier|final
name|String
name|GROUP1
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2
specifier|private
specifier|static
specifier|final
name|String
name|GROUP2
init|=
literal|"group2"
decl_stmt|;
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|NetgroupCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Cache two groups with a set of users.    * Test membership correctness.    */
annotation|@
name|Test
DECL|method|testMembership ()
specifier|public
name|void
name|testMembership
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP1
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|users
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER3
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP2
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|2
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|2
argument_list|,
name|GROUP2
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER2
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER3
argument_list|,
literal|1
argument_list|,
name|GROUP2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cache a group with a set of users.    * Test membership correctness.    * Clear cache, remove a user from the group and cache the group    * Test membership correctness.    */
annotation|@
name|Test
DECL|method|testUserRemoval ()
specifier|public
name|void
name|testUserRemoval
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP1
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER2
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|users
operator|.
name|remove
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP1
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER2
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cache two groups with a set of users.    * Test membership correctness.    * Clear cache, cache only one group.    * Test membership correctness.    */
annotation|@
name|Test
DECL|method|testGroupRemoval ()
specifier|public
name|void
name|testGroupRemoval
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP1
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|users
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER3
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP2
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|2
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|2
argument_list|,
name|GROUP2
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER2
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER3
argument_list|,
literal|1
argument_list|,
name|GROUP2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|users
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER1
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
name|USER2
argument_list|)
expr_stmt|;
name|NetgroupCache
operator|.
name|add
argument_list|(
name|GROUP1
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER1
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER2
argument_list|,
literal|1
argument_list|,
name|GROUP1
argument_list|)
expr_stmt|;
name|verifyGroupMembership
argument_list|(
name|USER3
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyGroupMembership (String user, int size, String group)
specifier|private
name|void
name|verifyGroupMembership
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NetgroupCache
operator|.
name|getNetgroups
argument_list|(
name|user
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|groups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|boolean
name|present
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|groupEntry
range|:
name|groups
control|)
block|{
if|if
condition|(
name|groupEntry
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|present
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|present
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

