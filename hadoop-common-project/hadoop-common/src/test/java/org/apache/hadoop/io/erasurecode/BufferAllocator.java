begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * An abstract buffer allocator used for test.  */
end_comment

begin_class
DECL|class|BufferAllocator
specifier|public
specifier|abstract
class|class
name|BufferAllocator
block|{
DECL|field|usingDirect
specifier|private
name|boolean
name|usingDirect
init|=
literal|false
decl_stmt|;
DECL|method|BufferAllocator (boolean usingDirect)
specifier|public
name|BufferAllocator
parameter_list|(
name|boolean
name|usingDirect
parameter_list|)
block|{
name|this
operator|.
name|usingDirect
operator|=
name|usingDirect
expr_stmt|;
block|}
DECL|method|isUsingDirect ()
specifier|protected
name|boolean
name|isUsingDirect
parameter_list|()
block|{
return|return
name|usingDirect
return|;
block|}
comment|/**    * Allocate and return a ByteBuffer of specified length.    * @param bufferLen    * @return    */
DECL|method|allocate (int bufferLen)
specifier|public
specifier|abstract
name|ByteBuffer
name|allocate
parameter_list|(
name|int
name|bufferLen
parameter_list|)
function_decl|;
comment|/**    * A simple buffer allocator that just uses ByteBuffer's    * allocate/allocateDirect API.    */
DECL|class|SimpleBufferAllocator
specifier|public
specifier|static
class|class
name|SimpleBufferAllocator
extends|extends
name|BufferAllocator
block|{
DECL|method|SimpleBufferAllocator (boolean usingDirect)
specifier|public
name|SimpleBufferAllocator
parameter_list|(
name|boolean
name|usingDirect
parameter_list|)
block|{
name|super
argument_list|(
name|usingDirect
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (int bufferLen)
specifier|public
name|ByteBuffer
name|allocate
parameter_list|(
name|int
name|bufferLen
parameter_list|)
block|{
return|return
name|isUsingDirect
argument_list|()
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferLen
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferLen
argument_list|)
return|;
block|}
block|}
comment|/**    * A buffer allocator that allocates a buffer from an existing large buffer by    * slice calling, but if no available space just degrades as    * SimpleBufferAllocator. So please ensure enough space for it.    */
DECL|class|SlicedBufferAllocator
specifier|public
specifier|static
class|class
name|SlicedBufferAllocator
extends|extends
name|BufferAllocator
block|{
DECL|field|overallBuffer
specifier|private
name|ByteBuffer
name|overallBuffer
decl_stmt|;
DECL|method|SlicedBufferAllocator (boolean usingDirect, int totalBufferLen)
specifier|public
name|SlicedBufferAllocator
parameter_list|(
name|boolean
name|usingDirect
parameter_list|,
name|int
name|totalBufferLen
parameter_list|)
block|{
name|super
argument_list|(
name|usingDirect
argument_list|)
expr_stmt|;
name|overallBuffer
operator|=
name|isUsingDirect
argument_list|()
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|totalBufferLen
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|totalBufferLen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (int bufferLen)
specifier|public
name|ByteBuffer
name|allocate
parameter_list|(
name|int
name|bufferLen
parameter_list|)
block|{
if|if
condition|(
name|bufferLen
operator|>
name|overallBuffer
operator|.
name|capacity
argument_list|()
operator|-
name|overallBuffer
operator|.
name|position
argument_list|()
condition|)
block|{
comment|// If no available space for the requested length, then allocate new
return|return
name|isUsingDirect
argument_list|()
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|bufferLen
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bufferLen
argument_list|)
return|;
block|}
name|overallBuffer
operator|.
name|limit
argument_list|(
name|overallBuffer
operator|.
name|position
argument_list|()
operator|+
name|bufferLen
argument_list|)
expr_stmt|;
name|ByteBuffer
name|result
init|=
name|overallBuffer
operator|.
name|slice
argument_list|()
decl_stmt|;
name|overallBuffer
operator|.
name|position
argument_list|(
name|overallBuffer
operator|.
name|position
argument_list|()
operator|+
name|bufferLen
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

