begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
operator|.
name|ActiveStandbyElectorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|test
operator|.
name|ClientBase
import|;
end_import

begin_comment
comment|/**  * Test for {@link ActiveStandbyElector} using real zookeeper.  */
end_comment

begin_class
DECL|class|TestActiveStandbyElectorRealZK
specifier|public
class|class
name|TestActiveStandbyElectorRealZK
extends|extends
name|ClientBase
block|{
DECL|field|NUM_ELECTORS
specifier|static
specifier|final
name|int
name|NUM_ELECTORS
init|=
literal|2
decl_stmt|;
DECL|field|zkClient
specifier|static
name|ZooKeeper
index|[]
name|zkClient
init|=
operator|new
name|ZooKeeper
index|[
name|NUM_ELECTORS
index|]
decl_stmt|;
DECL|field|currentClientIndex
specifier|static
name|int
name|currentClientIndex
init|=
literal|0
decl_stmt|;
DECL|class|ActiveStandbyElectorTesterRealZK
class|class
name|ActiveStandbyElectorTesterRealZK
extends|extends
name|ActiveStandbyElector
block|{
DECL|method|ActiveStandbyElectorTesterRealZK (String hostPort, int timeout, String parent, List<ACL> acl, ActiveStandbyElectorCallback app)
name|ActiveStandbyElectorTesterRealZK
parameter_list|(
name|String
name|hostPort
parameter_list|,
name|int
name|timeout
parameter_list|,
name|String
name|parent
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|ActiveStandbyElectorCallback
name|app
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|hostPort
argument_list|,
name|timeout
argument_list|,
name|parent
argument_list|,
name|acl
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewZooKeeper ()
specifier|public
name|ZooKeeper
name|getNewZooKeeper
parameter_list|()
block|{
return|return
name|TestActiveStandbyElectorRealZK
operator|.
name|zkClient
index|[
name|TestActiveStandbyElectorRealZK
operator|.
name|currentClientIndex
index|]
return|;
block|}
block|}
comment|/**    * The class object runs on a thread and waits for a signal to start from the     * test object. On getting the signal it joins the election and thus by doing     * this on multiple threads we can test simultaneous attempts at leader lock     * creation. after joining the election, the object waits on a signal to exit.    * this signal comes when the object's elector has become a leader or there is     * an unexpected fatal error. this lets another thread object to become a     * leader.    */
DECL|class|ThreadRunner
class|class
name|ThreadRunner
implements|implements
name|Runnable
implements|,
name|ActiveStandbyElectorCallback
block|{
DECL|field|index
name|int
name|index
decl_stmt|;
DECL|field|test
name|TestActiveStandbyElectorRealZK
name|test
decl_stmt|;
DECL|field|wait
name|boolean
name|wait
init|=
literal|true
decl_stmt|;
DECL|method|ThreadRunner (int i, TestActiveStandbyElectorRealZK s)
name|ThreadRunner
parameter_list|(
name|int
name|i
parameter_list|,
name|TestActiveStandbyElectorRealZK
name|s
parameter_list|)
block|{
name|index
operator|=
name|i
expr_stmt|;
name|test
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting "
operator|+
name|index
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|test
init|)
block|{
comment|// wait for test start signal to come
if|if
condition|(
operator|!
name|test
operator|.
name|start
condition|)
block|{
try|try
block|{
name|test
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|// join election
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|ActiveStandbyElector
name|elector
init|=
name|test
operator|.
name|elector
index|[
name|index
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"joining "
operator|+
name|index
argument_list|)
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// wait for elector to become active/fatal error
if|if
condition|(
name|wait
condition|)
block|{
comment|// wait to become active
comment|// wait capped at 30s to prevent hung test
name|wait
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// quit election to allow other elector to become active
name|elector
operator|.
name|quitElection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ending "
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|becomeActive ()
specifier|public
specifier|synchronized
name|void
name|becomeActive
parameter_list|()
block|{
name|test
operator|.
name|reportActive
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"active "
operator|+
name|index
argument_list|)
expr_stmt|;
name|wait
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|becomeStandby ()
specifier|public
specifier|synchronized
name|void
name|becomeStandby
parameter_list|()
block|{
name|test
operator|.
name|reportStandby
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"standby "
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enterNeutralMode ()
specifier|public
specifier|synchronized
name|void
name|enterNeutralMode
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"neutral "
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyFatalError (String errorMessage)
specifier|public
specifier|synchronized
name|void
name|notifyFatalError
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"fatal "
operator|+
name|index
operator|+
literal|" .Error message:"
operator|+
name|errorMessage
argument_list|)
expr_stmt|;
name|wait
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|start
name|boolean
name|start
init|=
literal|false
decl_stmt|;
DECL|field|activeIndex
name|int
name|activeIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|standbyIndex
name|int
name|standbyIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|parentDir
name|String
name|parentDir
init|=
literal|"/"
operator|+
name|java
operator|.
name|util
operator|.
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|elector
name|ActiveStandbyElector
index|[]
name|elector
init|=
operator|new
name|ActiveStandbyElector
index|[
name|NUM_ELECTORS
index|]
decl_stmt|;
DECL|field|threadRunner
name|ThreadRunner
index|[]
name|threadRunner
init|=
operator|new
name|ThreadRunner
index|[
name|NUM_ELECTORS
index|]
decl_stmt|;
DECL|field|thread
name|Thread
index|[]
name|thread
init|=
operator|new
name|Thread
index|[
name|NUM_ELECTORS
index|]
decl_stmt|;
DECL|method|reportActive (int index)
specifier|synchronized
name|void
name|reportActive
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|activeIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|activeIndex
operator|=
name|index
expr_stmt|;
block|}
else|else
block|{
comment|// standby should become active
name|Assert
operator|.
name|assertEquals
argument_list|(
name|standbyIndex
argument_list|,
name|index
argument_list|)
expr_stmt|;
comment|// old active should not become active
name|Assert
operator|.
name|assertFalse
argument_list|(
name|activeIndex
operator|==
name|index
argument_list|)
expr_stmt|;
block|}
name|activeIndex
operator|=
name|index
expr_stmt|;
block|}
DECL|method|reportStandby (int index)
specifier|synchronized
name|void
name|reportStandby
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// only 1 standby should be reported and it should not be the same as active
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|standbyIndex
argument_list|)
expr_stmt|;
name|standbyIndex
operator|=
name|index
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|activeIndex
operator|==
name|standbyIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * the test creates 2 electors which try to become active using a real    * zookeeper server. It verifies that 1 becomes active and 1 becomes standby.    * Upon becoming active the leader quits election and the test verifies that    * the standby now becomes active. these electors run on different threads and     * callback to the test class to report active and standby where the outcome     * is verified    *     * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
annotation|@
name|Test
DECL|method|testActiveStandbyTransition ()
specifier|public
name|void
name|testActiveStandbyTransition
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting test with parentDir:"
operator|+
name|parentDir
argument_list|)
expr_stmt|;
name|start
operator|=
literal|false
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
comment|// create random working directory
name|createClient
argument_list|()
operator|.
name|create
argument_list|(
name|parentDir
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|currentClientIndex
operator|=
literal|0
init|;
name|currentClientIndex
operator|<
name|NUM_ELECTORS
condition|;
operator|++
name|currentClientIndex
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"creating "
operator|+
name|currentClientIndex
argument_list|)
expr_stmt|;
name|zkClient
index|[
name|currentClientIndex
index|]
operator|=
name|createClient
argument_list|()
expr_stmt|;
name|threadRunner
index|[
name|currentClientIndex
index|]
operator|=
operator|new
name|ThreadRunner
argument_list|(
name|currentClientIndex
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|elector
index|[
name|currentClientIndex
index|]
operator|=
operator|new
name|ActiveStandbyElectorTesterRealZK
argument_list|(
literal|"hostPort"
argument_list|,
literal|1000
argument_list|,
name|parentDir
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|threadRunner
index|[
name|currentClientIndex
index|]
argument_list|)
expr_stmt|;
name|zkClient
index|[
name|currentClientIndex
index|]
operator|.
name|register
argument_list|(
name|elector
index|[
name|currentClientIndex
index|]
argument_list|)
expr_stmt|;
name|thread
index|[
name|currentClientIndex
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|threadRunner
index|[
name|currentClientIndex
index|]
argument_list|)
expr_stmt|;
name|thread
index|[
name|currentClientIndex
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// signal threads to start
name|LOG
operator|.
name|info
argument_list|(
literal|"signaling threads"
argument_list|)
expr_stmt|;
name|start
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|thread
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|thread
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

