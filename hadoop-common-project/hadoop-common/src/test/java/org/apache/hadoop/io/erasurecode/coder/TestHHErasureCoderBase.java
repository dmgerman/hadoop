begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.coder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Erasure coder test base with utilities for hitchhiker.  */
end_comment

begin_class
DECL|class|TestHHErasureCoderBase
specifier|public
specifier|abstract
class|class
name|TestHHErasureCoderBase
extends|extends
name|TestErasureCoderBase
block|{
DECL|field|subPacketSize
specifier|protected
name|int
name|subPacketSize
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
DECL|method|performCodingStep (ErasureCodingStep codingStep)
specifier|protected
name|void
name|performCodingStep
parameter_list|(
name|ErasureCodingStep
name|codingStep
parameter_list|)
block|{
comment|// Pretend that we're opening these input blocks and output blocks.
name|ECBlock
index|[]
name|inputBlocks
init|=
name|codingStep
operator|.
name|getInputBlocks
argument_list|()
decl_stmt|;
name|ECBlock
index|[]
name|outputBlocks
init|=
name|codingStep
operator|.
name|getOutputBlocks
argument_list|()
decl_stmt|;
comment|// We allocate input and output chunks accordingly.
name|ECChunk
index|[]
name|inputChunks
init|=
operator|new
name|ECChunk
index|[
name|inputBlocks
operator|.
name|length
operator|*
name|subPacketSize
index|]
decl_stmt|;
name|ECChunk
index|[]
name|outputChunks
init|=
operator|new
name|ECChunk
index|[
name|outputBlocks
operator|.
name|length
operator|*
name|subPacketSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChunksInBlock
condition|;
name|i
operator|+=
name|subPacketSize
control|)
block|{
comment|// Pretend that we're reading input chunks from input blocks.
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|subPacketSize
condition|;
operator|++
name|k
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputBlocks
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|inputChunks
index|[
name|k
operator|*
name|inputBlocks
operator|.
name|length
operator|+
name|j
index|]
operator|=
operator|(
operator|(
name|TestBlock
operator|)
name|inputBlocks
index|[
name|j
index|]
operator|)
operator|.
name|chunks
index|[
name|i
operator|+
name|k
index|]
expr_stmt|;
block|}
comment|// Pretend that we allocate and will write output results to the blocks.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|outputBlocks
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|outputChunks
index|[
name|k
operator|*
name|outputBlocks
operator|.
name|length
operator|+
name|j
index|]
operator|=
name|allocateOutputChunk
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TestBlock
operator|)
name|outputBlocks
index|[
name|j
index|]
operator|)
operator|.
name|chunks
index|[
name|i
operator|+
name|k
index|]
operator|=
name|outputChunks
index|[
name|k
operator|*
name|outputBlocks
operator|.
name|length
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
comment|// Given the input chunks and output chunk buffers, just call it !
try|try
block|{
name|codingStep
operator|.
name|performCoding
argument_list|(
name|inputChunks
argument_list|,
name|outputChunks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected IOException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|codingStep
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

