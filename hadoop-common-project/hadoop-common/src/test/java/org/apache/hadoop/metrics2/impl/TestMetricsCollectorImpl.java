begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|filter
operator|.
name|TestPatternFilter
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestMetricsCollectorImpl
specifier|public
class|class
name|TestMetricsCollectorImpl
block|{
DECL|method|recordBuilderShouldNoOpIfFiltered ()
annotation|@
name|Test
specifier|public
name|void
name|recordBuilderShouldNoOpIfFiltered
parameter_list|()
block|{
name|SubsetConfiguration
name|fc
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.exclude"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|MetricsCollectorImpl
name|mb
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setRecordFilter
argument_list|(
name|newGlobFilter
argument_list|(
name|fc
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsRecordBuilderImpl
name|rb
init|=
name|mb
operator|.
name|addRecord
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|rb
operator|.
name|tag
argument_list|(
name|info
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"value"
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"g0"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no tags"
argument_list|,
literal|0
argument_list|,
name|rb
operator|.
name|tags
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no metrics"
argument_list|,
literal|0
argument_list|,
name|rb
operator|.
name|metrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"null record"
argument_list|,
name|rb
operator|.
name|getRecord
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no records"
argument_list|,
literal|0
argument_list|,
name|mb
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPerMetricFiltering ()
annotation|@
name|Test
specifier|public
name|void
name|testPerMetricFiltering
parameter_list|()
block|{
name|SubsetConfiguration
name|fc
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.exclude"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|MetricsCollectorImpl
name|mb
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMetricFilter
argument_list|(
name|newGlobFilter
argument_list|(
name|fc
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsRecordBuilderImpl
name|rb
init|=
name|mb
operator|.
name|addRecord
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|rb
operator|.
name|tag
argument_list|(
name|info
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"c0"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1 tag"
argument_list|,
literal|1
argument_list|,
name|rb
operator|.
name|tags
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1 metric"
argument_list|,
literal|1
argument_list|,
name|rb
operator|.
name|metrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect foo tag"
argument_list|,
literal|"foo"
argument_list|,
name|rb
operator|.
name|tags
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect c0"
argument_list|,
literal|"c0"
argument_list|,
name|rb
operator|.
name|metrics
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

