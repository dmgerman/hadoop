begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test cases for IOUtils.java  */
end_comment

begin_class
DECL|class|TestIOUtils
specifier|public
class|class
name|TestIOUtils
block|{
DECL|field|TEST_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE_NAME
init|=
literal|"test_file"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCopyBytesShouldCloseStreamsWhenCloseIsTrue ()
specifier|public
name|void
name|testCopyBytesShouldCloseStreamsWhenCloseIsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyBytesShouldCloseInputSteamWhenOutputStreamCloseThrowsException ()
specifier|public
name|void
name|testCopyBytesShouldCloseInputSteamWhenOutputStreamCloseThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|outputStream
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyBytesShouldNotCloseStreamsWhenCloseIsFalse ()
specifier|public
name|void
name|testCopyBytesShouldNotCloseStreamsWhenCloseIsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyBytesWithCountShouldCloseStreamsWhenCloseIsTrue ()
specifier|public
name|void
name|testCopyBytesWithCountShouldCloseStreamsWhenCloseIsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|4096
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyBytesWithCountShouldNotCloseStreamsWhenCloseIsFalse ()
specifier|public
name|void
name|testCopyBytesWithCountShouldNotCloseStreamsWhenCloseIsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|4096
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atMost
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyBytesWithCountShouldThrowOutTheStreamClosureExceptions ()
specifier|public
name|void
name|testCopyBytesWithCountShouldThrowOutTheStreamClosureExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|inputStream
argument_list|)
operator|.
name|read
argument_list|(
operator|new
name|byte
index|[
literal|4096
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Exception in closing the stream"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|outputStream
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw out the exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Not throwing the expected exception."
argument_list|,
literal|"Exception in closing the stream"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|inputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|outputStream
argument_list|,
name|Mockito
operator|.
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFully ()
specifier|public
name|void
name|testWriteFully
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|INPUT_BUFFER_LEN
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|HALFWAY
init|=
literal|1
operator|+
operator|(
name|INPUT_BUFFER_LEN
operator|/
literal|2
operator|)
decl_stmt|;
name|byte
index|[]
name|input
init|=
operator|new
name|byte
index|[
name|INPUT_BUFFER_LEN
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|input
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|input
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|TEST_FILE_NAME
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileChannel
name|fc
init|=
name|raf
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|writeFully
argument_list|(
name|fc
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|raf
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|raf
operator|.
name|read
argument_list|(
name|output
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|output
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|writeFully
argument_list|(
name|fc
argument_list|,
name|buf
argument_list|,
name|HALFWAY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HALFWAY
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
index|]
argument_list|,
name|output
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|raf
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|raf
operator|.
name|read
argument_list|(
name|output
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|HALFWAY
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|input
index|[
name|i
operator|-
name|HALFWAY
index|]
argument_list|,
name|output
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

