begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|PortAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|TestableZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
operator|.
name|KeeperState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZKTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ServerCnxnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ServerCnxnFactoryAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZKDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Copy-paste of ClientBase from ZooKeeper, but without any of the  * JMXEnv verification. There seems to be a bug ZOOKEEPER-1438  * which causes spurious failures in the JMXEnv verification when  * we run these tests with the upstream ClientBase.  */
end_comment

begin_class
DECL|class|ClientBaseWithFixes
specifier|public
specifier|abstract
class|class
name|ClientBaseWithFixes
extends|extends
name|ZKTestCase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientBaseWithFixes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONNECTION_TIMEOUT
specifier|public
specifier|static
name|int
name|CONNECTION_TIMEOUT
init|=
literal|30000
decl_stmt|;
DECL|field|BASETEST
specifier|static
specifier|final
name|File
name|BASETEST
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.test.dir"
argument_list|,
literal|"build"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|hostPort
specifier|protected
name|String
name|hostPort
init|=
literal|"127.0.0.1:"
operator|+
name|PortAssignment
operator|.
name|unique
argument_list|()
decl_stmt|;
DECL|field|maxCnxns
specifier|protected
name|int
name|maxCnxns
init|=
literal|0
decl_stmt|;
DECL|field|serverFactory
specifier|protected
name|ServerCnxnFactory
name|serverFactory
init|=
literal|null
decl_stmt|;
DECL|field|tmpDir
specifier|protected
name|File
name|tmpDir
init|=
literal|null
decl_stmt|;
DECL|field|initialFdCount
name|long
name|initialFdCount
decl_stmt|;
DECL|method|ClientBaseWithFixes ()
specifier|public
name|ClientBaseWithFixes
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * In general don't use this. Only use in the special case that you      * want to ignore results (for whatever reason) in your test. Don't      * use empty watchers in real code!      *      */
DECL|class|NullWatcher
specifier|protected
class|class
name|NullWatcher
implements|implements
name|Watcher
block|{
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
comment|/* nada */
block|}
block|}
DECL|class|CountdownWatcher
specifier|protected
specifier|static
class|class
name|CountdownWatcher
implements|implements
name|Watcher
block|{
comment|// XXX this doesn't need to be volatile! (Should probably be final)
DECL|field|clientConnected
specifier|volatile
name|CountDownLatch
name|clientConnected
decl_stmt|;
DECL|field|connected
specifier|volatile
name|boolean
name|connected
decl_stmt|;
DECL|method|CountdownWatcher ()
specifier|public
name|CountdownWatcher
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
specifier|synchronized
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|clientConnected
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|process (WatchedEvent event)
specifier|synchronized
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getState
argument_list|()
operator|==
name|KeeperState
operator|.
name|SyncConnected
operator|||
name|event
operator|.
name|getState
argument_list|()
operator|==
name|KeeperState
operator|.
name|ConnectedReadOnly
condition|)
block|{
name|connected
operator|=
literal|true
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
name|clientConnected
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connected
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isConnected ()
specifier|synchronized
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
DECL|method|waitForConnected (long timeout)
specifier|synchronized
name|void
name|waitForConnected
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|long
name|expire
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
name|timeout
decl_stmt|;
name|long
name|left
init|=
name|timeout
decl_stmt|;
while|while
condition|(
operator|!
name|connected
operator|&&
name|left
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|left
operator|=
name|expire
operator|-
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|connected
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Did not connect"
argument_list|)
throw|;
block|}
block|}
DECL|method|waitForDisconnected (long timeout)
specifier|synchronized
name|void
name|waitForDisconnected
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|long
name|expire
init|=
name|Time
operator|.
name|now
argument_list|()
operator|+
name|timeout
decl_stmt|;
name|long
name|left
init|=
name|timeout
decl_stmt|;
while|while
condition|(
name|connected
operator|&&
name|left
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|left
operator|=
name|expire
operator|-
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connected
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
literal|"Did not disconnect"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|createClient ()
specifier|protected
name|TestableZooKeeper
name|createClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|createClient
argument_list|(
name|hostPort
argument_list|)
return|;
block|}
DECL|method|createClient (String hp)
specifier|protected
name|TestableZooKeeper
name|createClient
parameter_list|(
name|String
name|hp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CountdownWatcher
name|watcher
init|=
operator|new
name|CountdownWatcher
argument_list|()
decl_stmt|;
return|return
name|createClient
argument_list|(
name|watcher
argument_list|,
name|hp
argument_list|)
return|;
block|}
DECL|field|allClients
specifier|private
name|LinkedList
argument_list|<
name|ZooKeeper
argument_list|>
name|allClients
decl_stmt|;
DECL|field|allClientsSetup
specifier|private
name|boolean
name|allClientsSetup
init|=
literal|false
decl_stmt|;
DECL|method|createClient (CountdownWatcher watcher, String hp)
specifier|protected
name|TestableZooKeeper
name|createClient
parameter_list|(
name|CountdownWatcher
name|watcher
parameter_list|,
name|String
name|hp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|createClient
argument_list|(
name|watcher
argument_list|,
name|hp
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
return|;
block|}
DECL|method|createClient (CountdownWatcher watcher, String hp, int timeout)
specifier|protected
name|TestableZooKeeper
name|createClient
parameter_list|(
name|CountdownWatcher
name|watcher
parameter_list|,
name|String
name|hp
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|watcher
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TestableZooKeeper
name|zk
init|=
operator|new
name|TestableZooKeeper
argument_list|(
name|hp
argument_list|,
name|timeout
argument_list|,
name|watcher
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|watcher
operator|.
name|clientConnected
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to connect to server"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|allClientsSetup
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"allClients never setup"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"allClients never setup"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allClients
operator|!=
literal|null
condition|)
block|{
name|allClients
operator|.
name|add
argument_list|(
name|zk
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// test done - close the zk, not needed
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|zk
return|;
block|}
DECL|class|HostPort
specifier|public
specifier|static
class|class
name|HostPort
block|{
DECL|field|host
name|String
name|host
decl_stmt|;
DECL|field|port
name|int
name|port
decl_stmt|;
DECL|method|HostPort (String host, int port)
specifier|public
name|HostPort
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
block|}
DECL|method|parseHostPortList (String hplist)
specifier|public
specifier|static
name|List
argument_list|<
name|HostPort
argument_list|>
name|parseHostPortList
parameter_list|(
name|String
name|hplist
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|HostPort
argument_list|>
name|alist
init|=
operator|new
name|ArrayList
argument_list|<
name|HostPort
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|hp
range|:
name|hplist
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|int
name|idx
init|=
name|hp
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|hp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|int
name|port
decl_stmt|;
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|hp
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem parsing "
operator|+
name|hp
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|alist
operator|.
name|add
argument_list|(
operator|new
name|HostPort
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|alist
return|;
block|}
comment|/**      * Send the 4letterword      * @param host the destination host      * @param port the destination port      * @param cmd the 4letterword      * @return      * @throws IOException      */
DECL|method|send4LetterWord (String host, int port, String cmd)
specifier|public
specifier|static
name|String
name|send4LetterWord
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"connecting to "
operator|+
name|host
operator|+
literal|" "
operator|+
name|port
argument_list|)
expr_stmt|;
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OutputStream
name|outstream
init|=
name|sock
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
name|cmd
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// this replicates NC - close the output stream before reading
name|sock
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|sock
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|sock
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForServerUp (String hp, long timeout)
specifier|public
specifier|static
name|boolean
name|waitForServerUp
parameter_list|(
name|String
name|hp
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// if there are multiple hostports, just take the first one
name|HostPort
name|hpobj
init|=
name|parseHostPortList
argument_list|(
name|hp
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|send4LetterWord
argument_list|(
name|hpobj
operator|.
name|host
argument_list|,
name|hpobj
operator|.
name|port
argument_list|,
literal|"stat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
literal|"Zookeeper version:"
argument_list|)
operator|&&
operator|!
name|result
operator|.
name|contains
argument_list|(
literal|"READ-ONLY"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore as this is expected
name|LOG
operator|.
name|info
argument_list|(
literal|"server "
operator|+
name|hp
operator|+
literal|" not up "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|waitForServerDown (String hp, long timeout)
specifier|public
specifier|static
name|boolean
name|waitForServerDown
parameter_list|(
name|String
name|hp
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|HostPort
name|hpobj
init|=
name|parseHostPortList
argument_list|(
name|hp
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|send4LetterWord
argument_list|(
name|hpobj
operator|.
name|host
argument_list|,
name|hpobj
operator|.
name|port
argument_list|,
literal|"stat"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|Time
operator|.
name|now
argument_list|()
operator|>
name|start
operator|+
name|timeout
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createTmpDir ()
specifier|public
specifier|static
name|File
name|createTmpDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createTmpDir
argument_list|(
name|BASETEST
argument_list|)
return|;
block|}
DECL|method|createTmpDir (File parentDir)
specifier|static
name|File
name|createTmpDir
parameter_list|(
name|File
name|parentDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test"
argument_list|,
literal|".junit"
argument_list|,
name|parentDir
argument_list|)
decl_stmt|;
comment|// don't delete tmpFile - this ensures we don't attempt to create
comment|// a tmpDir with a duplicate name
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|tmpFile
operator|+
literal|".dir"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|tmpDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// never true if tmpfile does it's job
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tmpDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tmpDir
return|;
block|}
DECL|method|getPort (String hostPort)
specifier|private
specifier|static
name|int
name|getPort
parameter_list|(
name|String
name|hostPort
parameter_list|)
block|{
name|String
index|[]
name|split
init|=
name|hostPort
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|portstr
init|=
name|split
index|[
name|split
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
index|[]
name|pc
init|=
name|portstr
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|portstr
operator|=
name|pc
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|portstr
argument_list|)
return|;
block|}
DECL|method|createNewServerInstance (File dataDir, ServerCnxnFactory factory, String hostPort, int maxCnxns)
specifier|static
name|ServerCnxnFactory
name|createNewServerInstance
parameter_list|(
name|File
name|dataDir
parameter_list|,
name|ServerCnxnFactory
name|factory
parameter_list|,
name|String
name|hostPort
parameter_list|,
name|int
name|maxCnxns
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ZooKeeperServer
name|zks
init|=
operator|new
name|ZooKeeperServer
argument_list|(
name|dataDir
argument_list|,
name|dataDir
argument_list|,
literal|3000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|PORT
init|=
name|getPort
argument_list|(
name|hostPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|ServerCnxnFactory
operator|.
name|createFactory
argument_list|(
name|PORT
argument_list|,
name|maxCnxns
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|startup
argument_list|(
name|zks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"waiting for server up"
argument_list|,
name|ClientBaseWithFixes
operator|.
name|waitForServerUp
argument_list|(
literal|"127.0.0.1:"
operator|+
name|PORT
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
DECL|method|shutdownServerInstance (ServerCnxnFactory factory, String hostPort)
specifier|static
name|void
name|shutdownServerInstance
parameter_list|(
name|ServerCnxnFactory
name|factory
parameter_list|,
name|String
name|hostPort
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|ZKDatabase
name|zkDb
decl_stmt|;
block|{
name|ZooKeeperServer
name|zs
init|=
name|getServer
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|zkDb
operator|=
name|zs
operator|.
name|getZKDatabase
argument_list|()
expr_stmt|;
block|}
name|factory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|zkDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing logs "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|PORT
init|=
name|getPort
argument_list|(
name|hostPort
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"waiting for server down"
argument_list|,
name|ClientBaseWithFixes
operator|.
name|waitForServerDown
argument_list|(
literal|"127.0.0.1:"
operator|+
name|PORT
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test specific setup      */
DECL|method|setupTestEnv ()
specifier|public
specifier|static
name|void
name|setupTestEnv
parameter_list|()
block|{
comment|// during the tests we run with 100K prealloc in the logs.
comment|// on windows systems prealloc of 64M was seen to take ~15seconds
comment|// resulting in test Assert.failure (client timeout on first session).
comment|// set env and directly in order to handle static init/gc issues
name|System
operator|.
name|setProperty
argument_list|(
literal|"zookeeper.preAllocSize"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|FileTxnLog
operator|.
name|setPreallocSize
argument_list|(
literal|100
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpAll ()
specifier|protected
name|void
name|setUpAll
parameter_list|()
throws|throws
name|Exception
block|{
name|allClients
operator|=
operator|new
name|LinkedList
argument_list|<
name|ZooKeeper
argument_list|>
argument_list|()
expr_stmt|;
name|allClientsSetup
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|BASETEST
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|setupTestEnv
argument_list|()
expr_stmt|;
name|setUpAll
argument_list|()
expr_stmt|;
name|tmpDir
operator|=
name|createTmpDir
argument_list|(
name|BASETEST
argument_list|)
expr_stmt|;
name|startServer
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client test setup finished"
argument_list|)
expr_stmt|;
block|}
DECL|method|startServer ()
specifier|protected
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING server"
argument_list|)
expr_stmt|;
name|serverFactory
operator|=
name|createNewServerInstance
argument_list|(
name|tmpDir
argument_list|,
name|serverFactory
argument_list|,
name|hostPort
argument_list|,
name|maxCnxns
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServer ()
specifier|protected
name|void
name|stopServer
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPING server"
argument_list|)
expr_stmt|;
name|shutdownServerInstance
argument_list|(
name|serverFactory
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|serverFactory
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getServer (ServerCnxnFactory fac)
specifier|protected
specifier|static
name|ZooKeeperServer
name|getServer
parameter_list|(
name|ServerCnxnFactory
name|fac
parameter_list|)
block|{
name|ZooKeeperServer
name|zs
init|=
name|ServerCnxnFactoryAccessor
operator|.
name|getZkServer
argument_list|(
name|fac
argument_list|)
decl_stmt|;
return|return
name|zs
return|;
block|}
DECL|method|tearDownAll ()
specifier|protected
name|void
name|tearDownAll
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|allClients
operator|!=
literal|null
condition|)
for|for
control|(
name|ZooKeeper
name|zk
range|:
name|allClients
control|)
block|{
try|try
block|{
if|if
condition|(
name|zk
operator|!=
literal|null
condition|)
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ignoring interrupt"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|allClients
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown starting"
argument_list|)
expr_stmt|;
name|tearDownAll
argument_list|()
expr_stmt|;
name|stopServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|tmpDir
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"delete "
operator|+
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
name|recursiveDelete
argument_list|(
name|tmpDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This has to be set to null when the same instance of this class is reused between test cases
name|serverFactory
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|recursiveDelete (File d)
specifier|public
specifier|static
name|boolean
name|recursiveDelete
parameter_list|(
name|File
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|children
index|[]
init|=
name|d
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|children
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"delete "
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|recursiveDelete
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|d
operator|.
name|delete
argument_list|()
return|;
block|}
block|}
end_class

end_unit

