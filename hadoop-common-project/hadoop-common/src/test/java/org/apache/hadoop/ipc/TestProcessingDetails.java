begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProcessingDetails
operator|.
name|Timing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Unit tests for ProcessingDetails time unit conversion and output.  */
end_comment

begin_class
DECL|class|TestProcessingDetails
specifier|public
class|class
name|TestProcessingDetails
block|{
comment|/**    * Test that the conversion of time values in various units in and out of the    * details are done properly.    */
annotation|@
name|Test
DECL|method|testTimeConversion ()
specifier|public
name|void
name|testTimeConversion
parameter_list|()
block|{
name|ProcessingDetails
name|details
init|=
operator|new
name|ProcessingDetails
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
decl_stmt|;
name|details
operator|.
name|set
argument_list|(
name|Timing
operator|.
name|ENQUEUE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|details
operator|.
name|get
argument_list|(
name|Timing
operator|.
name|ENQUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10_000
argument_list|,
name|details
operator|.
name|get
argument_list|(
name|Timing
operator|.
name|ENQUEUE
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|details
operator|.
name|set
argument_list|(
name|Timing
operator|.
name|QUEUE
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
name|Timing
operator|.
name|QUEUE
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20_020
argument_list|,
name|details
operator|.
name|get
argument_list|(
name|Timing
operator|.
name|QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|details
operator|.
name|get
argument_list|(
name|Timing
operator|.
name|QUEUE
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|ProcessingDetails
name|details
init|=
operator|new
name|ProcessingDetails
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
decl_stmt|;
name|details
operator|.
name|set
argument_list|(
name|Timing
operator|.
name|ENQUEUE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|details
operator|.
name|set
argument_list|(
name|Timing
operator|.
name|QUEUE
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"enqueueTime=10 queueTime=20000 handlerTime=0 "
operator|+
literal|"processingTime=0 lockfreeTime=0 lockwaitTime=0 locksharedTime=0 "
operator|+
literal|"lockexclusiveTime=0 responseTime=0"
argument_list|,
name|details
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

