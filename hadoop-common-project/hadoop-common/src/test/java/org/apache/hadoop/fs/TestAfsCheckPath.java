begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAfsCheckPath
specifier|public
class|class
name|TestAfsCheckPath
block|{
DECL|field|DEFAULT_PORT
specifier|private
specifier|static
name|int
name|DEFAULT_PORT
init|=
literal|1234
decl_stmt|;
DECL|field|OTHER_PORT
specifier|private
specifier|static
name|int
name|OTHER_PORT
init|=
literal|4321
decl_stmt|;
annotation|@
name|Test
DECL|method|testCheckPathWithNoPorts ()
specifier|public
name|void
name|testCheckPathWithNoPorts
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"dummy://dummy-host"
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|afs
init|=
operator|new
name|DummyFileSystem
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|afs
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy://dummy-host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckPathWithDefaultPort ()
specifier|public
name|void
name|testCheckPathWithDefaultPort
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|DEFAULT_PORT
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|afs
init|=
operator|new
name|DummyFileSystem
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|afs
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|DEFAULT_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckPathWithTheSameNonDefaultPort ()
specifier|public
name|void
name|testCheckPathWithTheSameNonDefaultPort
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|OTHER_PORT
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|afs
init|=
operator|new
name|DummyFileSystem
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|afs
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|OTHER_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidPathException
operator|.
name|class
argument_list|)
DECL|method|testCheckPathWithDifferentPorts ()
specifier|public
name|void
name|testCheckPathWithDifferentPorts
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|DEFAULT_PORT
argument_list|)
decl_stmt|;
name|AbstractFileSystem
name|afs
init|=
operator|new
name|DummyFileSystem
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|afs
operator|.
name|checkPath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"dummy://dummy-host:"
operator|+
name|OTHER_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyFileSystem
specifier|private
specifier|static
class|class
name|DummyFileSystem
extends|extends
name|AbstractFileSystem
block|{
DECL|method|DummyFileSystem (URI uri)
specifier|public
name|DummyFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|uri
argument_list|,
literal|"dummy"
argument_list|,
literal|true
argument_list|,
name|DEFAULT_PORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUriDefaultPort ()
specifier|public
name|int
name|getUriDefaultPort
parameter_list|()
block|{
return|return
name|DEFAULT_PORT
return|;
block|}
annotation|@
name|Override
DECL|method|createInternal (Path f, EnumSet<CreateFlag> flag, FsPermission absolutePermission, int bufferSize, short replication, long blockSize, Progressable progress, ChecksumOpt checksumOpt, boolean createParent)
specifier|public
name|FSDataOutputStream
name|createInternal
parameter_list|(
name|Path
name|f
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
comment|// deliberately empty
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (Path f, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|Path
name|f
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getFsStatus ()
specifier|public
name|FsStatus
name|getFsStatus
parameter_list|()
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|mkdir (Path dir, FsPermission permission, boolean createParent)
specifier|public
name|void
name|mkdir
parameter_list|(
name|Path
name|dir
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renameInternal (Path src, Path dst)
specifier|public
name|void
name|renameInternal
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
annotation|@
name|Override
DECL|method|setOwner (Path f, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|f
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
annotation|@
name|Override
DECL|method|setPermission (Path f, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
annotation|@
name|Override
DECL|method|setReplication (Path f, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|f
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (Path f, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|f
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// deliberately empty
block|}
block|}
block|}
end_class

end_unit

