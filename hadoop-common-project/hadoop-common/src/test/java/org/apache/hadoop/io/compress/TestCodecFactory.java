begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|TestCodecFactory
specifier|public
class|class
name|TestCodecFactory
extends|extends
name|TestCase
block|{
DECL|class|BaseCodec
specifier|private
specifier|static
class|class
name|BaseCodec
implements|implements
name|CompressionCodec
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|createOutputStream (OutputStream out)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createCompressor ()
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createInputStream (InputStream in, Decompressor decompressor)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createInputStream (InputStream in)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createOutputStream (OutputStream out, Compressor compressor)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDecompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createDecompressor ()
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".base"
return|;
block|}
block|}
DECL|class|BarCodec
specifier|private
specifier|static
class|class
name|BarCodec
extends|extends
name|BaseCodec
block|{
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|"bar"
return|;
block|}
block|}
DECL|class|FooBarCodec
specifier|private
specifier|static
class|class
name|FooBarCodec
extends|extends
name|BaseCodec
block|{
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".foo.bar"
return|;
block|}
block|}
DECL|class|FooCodec
specifier|private
specifier|static
class|class
name|FooCodec
extends|extends
name|BaseCodec
block|{
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".foo"
return|;
block|}
block|}
DECL|class|NewGzipCodec
specifier|private
specifier|static
class|class
name|NewGzipCodec
extends|extends
name|BaseCodec
block|{
annotation|@
name|Override
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".gz"
return|;
block|}
block|}
comment|/**    * Returns a factory for a given set of codecs    * @param classes the codec classes to include    * @return a new factory    */
DECL|method|setClasses (Class[] classes)
specifier|private
specifier|static
name|CompressionCodecFactory
name|setClasses
parameter_list|(
name|Class
index|[]
name|classes
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|CompressionCodecFactory
operator|.
name|setCodecClasses
argument_list|(
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|classes
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|checkCodec (String msg, Class expected, CompressionCodec actual)
specifier|private
specifier|static
name|void
name|checkCodec
parameter_list|(
name|String
name|msg
parameter_list|,
name|Class
name|expected
parameter_list|,
name|CompressionCodec
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" unexpected codec found"
argument_list|,
name|expected
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFinding ()
specifier|public
specifier|static
name|void
name|testFinding
parameter_list|()
block|{
name|CompressionCodecFactory
name|factory
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default factory foo codec"
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BarCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default factory foo codec"
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for .gz"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|GzipCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for gzip codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"gzip"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for gzip codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"GZIP"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for gzip codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"GZIPCodec"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for gzip codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"gzipcodec"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for gzip codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|Class
name|klass
init|=
name|factory
operator|.
name|getCodecClassByName
argument_list|(
literal|"gzipcodec"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|klass
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bz2"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for .bz2"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BZip2Codec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"bzip2"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"bzip2codec"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"BZIP2"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"BZIP2CODEC"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|DeflateCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for deflate codec"
argument_list|,
name|DeflateCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"deflate"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for deflate codec"
argument_list|,
name|DeflateCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"deflatecodec"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for deflate codec"
argument_list|,
name|DeflateCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"DEFLATE"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for deflate codec"
argument_list|,
name|DeflateCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"DEFLATECODEC"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"default factory for deflate codec"
argument_list|,
name|DeflateCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|factory
operator|=
name|setClasses
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// gz, bz2, snappy, lz4 are picked up by service loader, but bar isn't
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"empty factory bar codec"
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BarCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"empty factory bar codec"
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory gz codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|GzipCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory gz codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bz2"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory for .bz2"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BZip2Codec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory for bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.snappy"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory snappy codec"
argument_list|,
name|SnappyCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|SnappyCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory snappy codec"
argument_list|,
name|SnappyCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.lz4"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory lz4 codec"
argument_list|,
name|Lz4Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|Lz4Codec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"empty factory lz4 codec"
argument_list|,
name|Lz4Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|factory
operator|=
name|setClasses
argument_list|(
operator|new
name|Class
index|[]
block|{
name|BarCodec
operator|.
name|class
block|,
name|FooCodec
operator|.
name|class
block|,
name|FooBarCodec
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/.foo.bar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory gz codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|GzipCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full codec gz codec"
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bz2"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory for .bz2"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BZip2Codec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full codec bzip2 codec"
argument_list|,
name|BZip2Codec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory bar codec"
argument_list|,
name|BarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|BarCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory bar codec"
argument_list|,
name|BarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory bar codec"
argument_list|,
name|BarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"BAR"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory bar codec"
argument_list|,
name|BarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo/baz.foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo bar codec"
argument_list|,
name|FooBarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|FooBarCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo bar codec"
argument_list|,
name|FooBarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo bar codec"
argument_list|,
name|FooBarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"FOOBAR"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo bar codec"
argument_list|,
name|FooBarCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.foo"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo codec"
argument_list|,
name|FooCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|FooCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo codec"
argument_list|,
name|FooCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo codec"
argument_list|,
name|FooCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByName
argument_list|(
literal|"FOO"
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"full factory foo codec"
argument_list|,
name|FooCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|factory
operator|=
name|setClasses
argument_list|(
operator|new
name|Class
index|[]
block|{
name|NewGzipCodec
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodec
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/foo.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"overridden factory for .gz"
argument_list|,
name|NewGzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|codec
operator|=
name|factory
operator|.
name|getCodecByClassName
argument_list|(
name|NewGzipCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|checkCodec
argument_list|(
literal|"overridden factory for gzip codec"
argument_list|,
name|NewGzipCodec
operator|.
name|class
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.compression.codecs"
argument_list|,
literal|"   org.apache.hadoop.io.compress.GzipCodec   , "
operator|+
literal|"    org.apache.hadoop.io.compress.DefaultCodec  , "
operator|+
literal|" org.apache.hadoop.io.compress.BZip2Codec   "
argument_list|)
expr_stmt|;
try|try
block|{
name|CompressionCodecFactory
operator|.
name|getCodecClasses
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"IllegalArgumentException is unexpected"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

