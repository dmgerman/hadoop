begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract.localfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|localfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The contract of the Local filesystem.  * This changes its feature set from platform for platform -the default  * set is updated during initialization.  *  * This contract contains some override points, to permit  * the raw local filesystem and other filesystems to subclass it.  */
end_comment

begin_class
DECL|class|LocalFSContract
specifier|public
class|class
name|LocalFSContract
extends|extends
name|AbstractFSContract
block|{
DECL|field|CONTRACT_XML
specifier|public
specifier|static
specifier|final
name|String
name|CONTRACT_XML
init|=
literal|"contract/localfs.xml"
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testDataDir
specifier|private
name|String
name|testDataDir
init|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootDir
argument_list|()
decl_stmt|;
DECL|method|LocalFSContract (Configuration conf)
specifier|public
name|LocalFSContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//insert the base features
name|addConfResource
argument_list|(
name|getContractXml
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the contract file for this filesystem    * @return the XML    */
DECL|method|getContractXml ()
specifier|protected
name|String
name|getContractXml
parameter_list|()
block|{
return|return
name|CONTRACT_XML
return|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|fs
operator|=
name|getLocalFS
argument_list|()
expr_stmt|;
name|adjustContractToLocalEnvironment
argument_list|()
expr_stmt|;
block|}
comment|/**    *  tweak some of the contract parameters based on the local system    *  state    */
DECL|method|adjustContractToLocalEnvironment ()
specifier|protected
name|void
name|adjustContractToLocalEnvironment
parameter_list|()
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|//NTFS doesn't do case sensitivity, and its permissions are ACL-based
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|getConfKey
argument_list|(
name|ContractOptions
operator|.
name|IS_CASE_SENSITIVE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|getConfKey
argument_list|(
name|ContractOptions
operator|.
name|SUPPORTS_UNIX_PERMISSIONS
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ContractTestUtils
operator|.
name|isOSX
argument_list|()
condition|)
block|{
comment|//OSX HFS+ is not case sensitive
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|getConfKey
argument_list|(
name|ContractOptions
operator|.
name|IS_CASE_SENSITIVE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the local filesystem. This may be overridden    * @return the filesystem    * @throws IOException    */
DECL|method|getLocalFS ()
specifier|protected
name|FileSystem
name|getLocalFS
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTestFileSystem ()
specifier|public
name|FileSystem
name|getTestFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
return|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"file"
return|;
block|}
annotation|@
name|Override
DECL|method|getTestPath ()
specifier|public
name|Path
name|getTestPath
parameter_list|()
block|{
name|Path
name|path
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getTestDataDir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|path
return|;
block|}
comment|/**    * Get the test data directory    * @return the directory for test data    */
DECL|method|getTestDataDir ()
specifier|protected
name|String
name|getTestDataDir
parameter_list|()
block|{
return|return
name|testDataDir
return|;
block|}
block|}
end_class

end_unit

