begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|random
operator|.
name|OsSecureRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|util
operator|.
name|reflection
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_AES_CTR_NOPADDING_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|TestCryptoStreamsWithOpensslAesCtrCryptoCodec
specifier|public
class|class
name|TestCryptoStreamsWithOpensslAesCtrCryptoCodec
extends|extends
name|TestCryptoStreams
block|{
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|assumeInNativeProfile
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_AES_CTR_NOPADDING_KEY
argument_list|,
name|OpensslAesCtrCryptoCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|codec
operator|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to instantiate codec "
operator|+
name|OpensslAesCtrCryptoCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", is the required "
operator|+
literal|"version of OpenSSL installed?"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OpensslAesCtrCryptoCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodecClosesRandom ()
specifier|public
name|void
name|testCodecClosesRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|assumeInNativeProfile
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_AES_CTR_NOPADDING_KEY
argument_list|,
name|OpensslAesCtrCryptoCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_SECURE_RANDOM_IMPL_KEY
argument_list|,
name|OsSecureRandom
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CryptoCodec
name|codecWithRandom
init|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to instantiate codec "
operator|+
name|OpensslAesCtrCryptoCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|", is the required "
operator|+
literal|"version of OpenSSL installed?"
argument_list|,
name|codecWithRandom
argument_list|)
expr_stmt|;
name|OsSecureRandom
name|random
init|=
operator|(
name|OsSecureRandom
operator|)
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|codecWithRandom
argument_list|,
literal|"random"
argument_list|)
decl_stmt|;
comment|// trigger the OsSecureRandom to create an internal FileInputStream
name|random
operator|.
name|nextBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|random
argument_list|,
literal|"stream"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify closing the codec closes the codec's random's stream.
name|codecWithRandom
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|Whitebox
operator|.
name|getInternalState
argument_list|(
name|random
argument_list|,
literal|"stream"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

