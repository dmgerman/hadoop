begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test {@link KMSUtil}.  */
end_comment

begin_class
DECL|class|TestKMSUtil
specifier|public
class|class
name|TestKMSUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestKMSUtil
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|90000
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateKeyProviderFromTokenService ()
specifier|public
name|void
name|testCreateKeyProviderFromTokenService
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
name|KMSUtil
operator|.
name|createKeyProviderFromTokenService
argument_list|(
name|conf
argument_list|,
literal|"kms://https@localhost:9600/kms"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
name|kp
operator|=
name|KMSUtil
operator|.
name|createKeyProviderFromTokenService
argument_list|(
name|conf
argument_list|,
literal|"kms://https@localhost:9600/kms,kms://localhost1:9600/kms"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|kp
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|invalidService
init|=
literal|"whatever:9600"
decl_stmt|;
try|try
block|{
name|KMSUtil
operator|.
name|createKeyProviderFromTokenService
argument_list|(
name|conf
argument_list|,
name|invalidService
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception:"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Invalid token service "
operator|+
name|invalidService
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

