begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.service.launcher
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|LaunchableRunningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|testservices
operator|.
name|RunningService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|launcher
operator|.
name|LauncherArguments
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test how configuration files are loaded off the command line.  */
end_comment

begin_class
DECL|class|TestServiceConf
specifier|public
class|class
name|TestServiceConf
extends|extends
name|AbstractServiceLauncherTestBase
block|{
annotation|@
name|Test
DECL|method|testRunService ()
specifier|public
name|void
name|testRunService
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertRuns
argument_list|(
name|LaunchableRunningService
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfPropagationOverInitBindings ()
specifier|public
name|void
name|testConfPropagationOverInitBindings
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|newConf
argument_list|(
name|RunningService
operator|.
name|FAIL_IN_RUN
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertLaunchOutcome
argument_list|(
name|EXIT_FAIL
argument_list|,
literal|"failed"
argument_list|,
name|LaunchableRunningService
operator|.
name|NAME
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|configFile
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnbalancedConfArg ()
specifier|public
name|void
name|testUnbalancedConfArg
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertLaunchOutcome
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
name|E_PARSE_FAILED
argument_list|,
name|LaunchableRunningService
operator|.
name|NAME
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfArgMissingFile ()
specifier|public
name|void
name|testConfArgMissingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertLaunchOutcome
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
name|E_PARSE_FAILED
argument_list|,
name|LaunchableRunningService
operator|.
name|NAME
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
literal|"no-file.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfPropagation ()
specifier|public
name|void
name|testConfPropagation
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
name|newConf
argument_list|(
name|RunningService
operator|.
name|FAIL_IN_RUN
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertLaunchOutcome
argument_list|(
name|EXIT_EXCEPTION_THROWN
argument_list|,
name|RunningService
operator|.
name|FAILURE_MESSAGE
argument_list|,
name|RunningService
operator|.
name|NAME
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|configFile
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Low level conf value extraction test...just to make sure    * that all works at the lower level.    * @throws Throwable    */
annotation|@
name|Test
DECL|method|testConfExtraction ()
specifier|public
name|void
name|testConfExtraction
parameter_list|()
throws|throws
name|Throwable
block|{
name|ExitTrackingServiceLauncher
argument_list|<
name|Service
argument_list|>
name|launcher
init|=
operator|new
name|ExitTrackingServiceLauncher
argument_list|<>
argument_list|(
name|RunningService
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|bindCommandOptions
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|newConf
argument_list|(
literal|"propagated"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"propagated"
argument_list|,
literal|"unset"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|extracted
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|asList
argument_list|(
literal|"Name"
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|configFile
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|launcher
operator|.
name|extractCommandOptions
argument_list|(
name|extracted
argument_list|,
name|argsList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"args beginning with "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|extracted
operator|.
name|get
argument_list|(
literal|"propagated"
argument_list|,
literal|"unset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDualConfArgs ()
specifier|public
name|void
name|testDualConfArgs
parameter_list|()
throws|throws
name|Throwable
block|{
name|ExitTrackingServiceLauncher
argument_list|<
name|Service
argument_list|>
name|launcher
init|=
operator|new
name|ExitTrackingServiceLauncher
argument_list|<>
argument_list|(
name|RunningService
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|launcher
operator|.
name|bindCommandOptions
argument_list|()
expr_stmt|;
name|String
name|key1
init|=
literal|"key1"
decl_stmt|;
name|Configuration
name|conf1
init|=
name|newConf
argument_list|(
name|key1
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|String
name|key2
init|=
literal|"file2"
decl_stmt|;
name|Configuration
name|conf2
init|=
name|newConf
argument_list|(
name|key2
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|Configuration
name|extracted
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|asList
argument_list|(
literal|"Name"
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|configFile
argument_list|(
name|conf1
argument_list|)
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|configFile
argument_list|(
name|conf2
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|launcher
operator|.
name|extractCommandOptions
argument_list|(
name|extracted
argument_list|,
name|argsList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"args beginning with "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|extracted
operator|.
name|getBoolean
argument_list|(
name|key1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|extracted
operator|.
name|getInt
argument_list|(
name|key2
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfArgWrongFiletype ()
specifier|public
name|void
name|testConfArgWrongFiletype
parameter_list|()
throws|throws
name|Throwable
block|{
operator|new
name|File
argument_list|(
name|CONF_FILE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|CONF_FILE_DIR
argument_list|,
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
init|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|"not-a-conf-file"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertLaunchOutcome
argument_list|(
name|EXIT_COMMAND_ARGUMENT_ERROR
argument_list|,
literal|""
argument_list|,
name|RunningService
operator|.
name|NAME
argument_list|,
name|ARG_CONF_PREFIXED
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

