begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReflectionUtils
specifier|public
class|class
name|TestReflectionUtils
block|{
DECL|field|toConstruct
specifier|private
specifier|static
name|Class
name|toConstruct
index|[]
init|=
block|{
name|String
operator|.
name|class
block|,
name|TestReflectionUtils
operator|.
name|class
block|,
name|HashMap
operator|.
name|class
block|}
decl_stmt|;
DECL|field|failure
specifier|private
name|Throwable
name|failure
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ReflectionUtils
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCache ()
specifier|public
name|void
name|testCache
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|doTestCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|toConstruct
operator|.
name|length
argument_list|,
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|ReflectionUtils
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doTestCache ()
specifier|private
name|void
name|doTestCache
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toConstruct
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|cl
init|=
name|toConstruct
index|[
name|i
index|]
decl_stmt|;
name|Object
name|x
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|cl
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Object
name|y
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|cl
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cl
argument_list|,
name|x
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cl
argument_list|,
name|y
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThreadSafe ()
specifier|public
name|void
name|testThreadSafe
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
index|[]
name|th
init|=
operator|new
name|Thread
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|th
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|th
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doTestCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|th
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|th
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|th
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|failure
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cacheSize ()
specifier|private
name|int
name|cacheSize
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ReflectionUtils
operator|.
name|getCacheSize
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testCantCreate ()
specifier|public
name|void
name|testCantCreate
parameter_list|()
block|{
try|try
block|{
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|NoDefaultCtor
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"invalid call should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|NoSuchMethodException
operator|.
name|class
argument_list|,
name|rte
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCacheDoesntLeak ()
specifier|public
name|void
name|testCacheDoesntLeak
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|iterations
init|=
literal|9999
decl_stmt|;
comment|// very fast, but a bit less reliable - bigger numbers force GC
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|URLClassLoader
name|loader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.util.TestReflectionUtils$LoadedInChild"
argument_list|,
literal|false
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|cl
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cl
argument_list|,
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cacheSize
argument_list|()
operator|+
literal|" too big"
argument_list|,
name|cacheSize
argument_list|()
operator|<
name|iterations
argument_list|)
expr_stmt|;
block|}
DECL|class|LoadedInChild
specifier|private
specifier|static
class|class
name|LoadedInChild
block|{   }
DECL|class|NoDefaultCtor
specifier|public
specifier|static
class|class
name|NoDefaultCtor
block|{
DECL|method|NoDefaultCtor (int x)
specifier|public
name|NoDefaultCtor
parameter_list|(
name|int
name|x
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

