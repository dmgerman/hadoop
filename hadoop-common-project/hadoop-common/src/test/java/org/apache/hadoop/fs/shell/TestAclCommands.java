begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAclCommands
specifier|public
class|class
name|TestAclCommands
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetfaclValidations ()
specifier|public
name|void
name|testGetfaclValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"getfacl should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfacl"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfacl should fail with extra argument"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfacl"
block|,
literal|"/test"
block|,
literal|"extraArg"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetfaclValidations ()
specifier|public
name|void
name|testSetfaclValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"setfacl should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail without aclSpec"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with conflicting options"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with extra arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"/path"
block|,
literal|"extra"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with extra arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"--set"
block|,
literal|"default:user::rwx"
block|,
literal|"/path"
block|,
literal|"extra"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runCommand (String[] commands)
specifier|private
name|int
name|runCommand
parameter_list|(
name|String
index|[]
name|commands
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FsShell
argument_list|()
argument_list|,
name|commands
argument_list|)
return|;
block|}
block|}
end_class

end_unit

