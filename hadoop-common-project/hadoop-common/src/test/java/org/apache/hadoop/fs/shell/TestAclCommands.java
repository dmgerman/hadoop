begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcNoSuchMethodException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAclCommands
specifier|public
class|class
name|TestAclCommands
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetfaclValidations ()
specifier|public
name|void
name|testGetfaclValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"getfacl should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfacl"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getfacl should fail with extra argument"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-getfacl"
block|,
literal|"/test"
block|,
literal|"extraArg"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetfaclValidations ()
specifier|public
name|void
name|testSetfaclValidations
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"setfacl should fail without path"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail without aclSpec"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with conflicting options"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with extra arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"/path"
block|,
literal|"extra"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with extra arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"--set"
block|,
literal|"default:user::rwx"
block|,
literal|"/path"
block|,
literal|"extra"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with permissions for -x"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-x"
block|,
literal|"user:user1:rwx"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail ACL spec missing"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|""
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetfaclValidationsWithoutPermissions ()
specifier|public
name|void
name|testSetfaclValidationsWithoutPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|parsedList
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|parsedList
operator|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
literal|"user:user1:"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
name|assertTrue
argument_list|(
name|parsedList
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"setfacl should fail with less arguments"
argument_list|,
literal|0
operator|==
name|runCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-setfacl"
block|,
literal|"-m"
block|,
literal|"user:user1:"
block|,
literal|"/path"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleAclSpecParsing ()
specifier|public
name|void
name|testMultipleAclSpecParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|parsedList
init|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
literal|"group::rwx,user:user1:rwx,user:user2:rw-,"
operator|+
literal|"group:group1:rw-,default:group:group1:rw-"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AclEntry
name|basicAcl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|user1Acl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|user2Acl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|group1Acl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|defaultAcl
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FsAction
operator|.
name|READ_WRITE
argument_list|)
operator|.
name|setName
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|expectedList
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|basicAcl
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|user1Acl
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|user2Acl
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|group1Acl
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|defaultAcl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parsed Acl not correct"
argument_list|,
name|expectedList
argument_list|,
name|parsedList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleAclSpecParsingWithoutPermissions ()
specifier|public
name|void
name|testMultipleAclSpecParsingWithoutPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AclEntry
argument_list|>
name|parsedList
init|=
name|AclEntry
operator|.
name|parseAclSpec
argument_list|(
literal|"user::,user:user1:,group::,group:group1:,mask::,other::,"
operator|+
literal|"default:user:user1::,default:mask::"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AclEntry
name|owner
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|namedUser
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|group
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|namedGroup
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|GROUP
argument_list|)
operator|.
name|setName
argument_list|(
literal|"group1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|mask
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|MASK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|other
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|OTHER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|defaultUser
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|USER
argument_list|)
operator|.
name|setName
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AclEntry
name|defaultMask
init|=
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|AclEntryScope
operator|.
name|DEFAULT
argument_list|)
operator|.
name|setType
argument_list|(
name|AclEntryType
operator|.
name|MASK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|expectedList
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|namedUser
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|namedGroup
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|defaultUser
argument_list|)
expr_stmt|;
name|expectedList
operator|.
name|add
argument_list|(
name|defaultMask
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parsed Acl not correct"
argument_list|,
name|expectedList
argument_list|,
name|parsedList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLsNoRpcForGetAclStatus ()
specifier|public
name|void
name|testLsNoRpcForGetAclStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"stubfs:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.stubfs.impl"
argument_list|,
name|StubFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"stubfs.noRpcForGetAclStatus"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ls must succeed even if getAclStatus RPC does not exist."
argument_list|,
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FsShell
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
literal|"/"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLsAclsUnsupported ()
specifier|public
name|void
name|testLsAclsUnsupported
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"stubfs:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.stubfs.impl"
argument_list|,
name|StubFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ls must succeed even if FileSystem does not implement ACLs."
argument_list|,
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FsShell
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
literal|"/"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|StubFileSystem
specifier|public
specifier|static
class|class
name|StubFileSystem
extends|extends
name|FileSystem
block|{
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
DECL|method|getAclStatus (Path path)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"stubfs.noRpcForGetAclStatus"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|RpcNoSuchMethodException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test exception"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|getAclStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|f
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|URI
operator|.
name|create
argument_list|(
literal|"stubfs:///"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|,
name|FsAction
operator|.
name|READ_EXECUTE
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
operator|new
name|FileStatus
argument_list|(
literal|1000
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|perm
argument_list|,
literal|"owner"
argument_list|,
literal|"group"
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
index|[]
block|{
name|stat
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{     }
block|}
DECL|method|runCommand (String[] commands)
specifier|private
name|int
name|runCommand
parameter_list|(
name|String
index|[]
name|commands
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FsShell
argument_list|()
argument_list|,
name|commands
argument_list|)
return|;
block|}
block|}
end_class

end_unit

