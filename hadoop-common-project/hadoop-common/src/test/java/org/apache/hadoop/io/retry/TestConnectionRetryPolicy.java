begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RpcNoSuchMethodException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class mainly tests behaviors of various retry policies in connection  * level.  */
end_comment

begin_class
DECL|class|TestConnectionRetryPolicy
specifier|public
class|class
name|TestConnectionRetryPolicy
block|{
DECL|method|getDefaultRetryPolicy ( final boolean defaultRetryPolicyEnabled, final String defaultRetryPolicySpec, final String remoteExceptionToRetry)
specifier|private
specifier|static
name|RetryPolicy
name|getDefaultRetryPolicy
parameter_list|(
specifier|final
name|boolean
name|defaultRetryPolicyEnabled
parameter_list|,
specifier|final
name|String
name|defaultRetryPolicySpec
parameter_list|,
specifier|final
name|String
name|remoteExceptionToRetry
parameter_list|)
block|{
return|return
name|getDefaultRetryPolicy
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|defaultRetryPolicyEnabled
argument_list|,
name|defaultRetryPolicySpec
argument_list|,
name|remoteExceptionToRetry
argument_list|)
return|;
block|}
DECL|method|getDefaultRetryPolicy ( final boolean defaultRetryPolicyEnabled, final String defaultRetryPolicySpec)
specifier|private
specifier|static
name|RetryPolicy
name|getDefaultRetryPolicy
parameter_list|(
specifier|final
name|boolean
name|defaultRetryPolicyEnabled
parameter_list|,
specifier|final
name|String
name|defaultRetryPolicySpec
parameter_list|)
block|{
return|return
name|getDefaultRetryPolicy
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|defaultRetryPolicyEnabled
argument_list|,
name|defaultRetryPolicySpec
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|getDefaultRetryPolicy ( final Configuration conf, final boolean defaultRetryPolicyEnabled, final String defaultRetryPolicySpec, final String remoteExceptionToRetry)
specifier|public
specifier|static
name|RetryPolicy
name|getDefaultRetryPolicy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|boolean
name|defaultRetryPolicyEnabled
parameter_list|,
specifier|final
name|String
name|defaultRetryPolicySpec
parameter_list|,
specifier|final
name|String
name|remoteExceptionToRetry
parameter_list|)
block|{
return|return
name|RetryUtils
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
literal|"org.apache.hadoop.io.retry.TestConnectionRetryPolicy.No.Such.Key"
argument_list|,
name|defaultRetryPolicyEnabled
argument_list|,
literal|"org.apache.hadoop.io.retry.TestConnectionRetryPolicy.No.Such.Key"
argument_list|,
name|defaultRetryPolicySpec
argument_list|,
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDefaultRetryPolicyEquivalence ()
specifier|public
name|void
name|testDefaultRetryPolicyEquivalence
parameter_list|()
block|{
name|RetryPolicy
name|rp1
init|=
literal|null
decl_stmt|;
name|RetryPolicy
name|rp2
init|=
literal|null
decl_stmt|;
name|RetryPolicy
name|rp3
init|=
literal|null
decl_stmt|;
comment|/* test the same setting */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|)
expr_stmt|;
name|rp3
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|)
expr_stmt|;
name|verifyRetryPolicyEquivalence
argument_list|(
operator|new
name|RetryPolicy
index|[]
block|{
name|rp1
block|,
name|rp2
block|,
name|rp3
block|}
argument_list|)
expr_stmt|;
comment|/* test different remoteExceptionToRetry */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|,
operator|new
name|RemoteException
argument_list|(
name|PathIOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"path IO exception"
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|,
operator|new
name|RemoteException
argument_list|(
name|RpcNoSuchMethodException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"no such method exception"
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|rp3
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|,
operator|new
name|RemoteException
argument_list|(
name|RetriableException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"retriable exception"
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRetryPolicyEquivalence
argument_list|(
operator|new
name|RetryPolicy
index|[]
block|{
name|rp1
block|,
name|rp2
block|,
name|rp3
block|}
argument_list|)
expr_stmt|;
comment|/* test enabled and different specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"20000,3"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"30000,4"
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"should not be equal"
argument_list|,
name|rp1
argument_list|,
name|rp2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"should not have the same hash code"
argument_list|,
name|rp1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rp2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|/* test disabled and the same specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"40000,5"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"40000,5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should be equal"
argument_list|,
name|rp1
argument_list|,
name|rp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have the same hash code"
argument_list|,
name|rp1
argument_list|,
name|rp2
argument_list|)
expr_stmt|;
comment|/* test the disabled and different specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"50000,6"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"60000,7"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should be equal"
argument_list|,
name|rp1
argument_list|,
name|rp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have the same hash code"
argument_list|,
name|rp1
argument_list|,
name|rp2
argument_list|)
expr_stmt|;
block|}
DECL|method|newTryOnceThenFail ()
specifier|public
specifier|static
name|RetryPolicy
name|newTryOnceThenFail
parameter_list|()
block|{
return|return
operator|new
name|RetryPolicies
operator|.
name|TryOnceThenFail
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testTryOnceThenFailEquivalence ()
specifier|public
name|void
name|testTryOnceThenFailEquivalence
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RetryPolicy
name|rp1
init|=
name|newTryOnceThenFail
argument_list|()
decl_stmt|;
specifier|final
name|RetryPolicy
name|rp2
init|=
name|newTryOnceThenFail
argument_list|()
decl_stmt|;
specifier|final
name|RetryPolicy
name|rp3
init|=
name|newTryOnceThenFail
argument_list|()
decl_stmt|;
name|verifyRetryPolicyEquivalence
argument_list|(
operator|new
name|RetryPolicy
index|[]
block|{
name|rp1
block|,
name|rp2
block|,
name|rp3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRetryPolicyEquivalence (RetryPolicy[] polices)
specifier|private
name|void
name|verifyRetryPolicyEquivalence
parameter_list|(
name|RetryPolicy
index|[]
name|polices
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|polices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|polices
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|j
condition|)
block|{
name|assertEquals
argument_list|(
literal|"should be equal"
argument_list|,
name|polices
index|[
name|i
index|]
argument_list|,
name|polices
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should have the same hash code"
argument_list|,
name|polices
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
argument_list|,
name|polices
index|[
name|j
index|]
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

