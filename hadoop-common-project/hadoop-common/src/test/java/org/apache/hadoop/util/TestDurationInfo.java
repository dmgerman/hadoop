begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The class to test DurationInfo.  */
end_comment

begin_class
DECL|class|TestDurationInfo
specifier|public
class|class
name|TestDurationInfo
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDurationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testDurationInfoCreation ()
specifier|public
name|void
name|testDurationInfoCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|DurationInfo
name|info
init|=
operator|new
name|DurationInfo
argument_list|(
name|log
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|info
operator|.
name|value
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|.
name|finished
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|info
operator|.
name|value
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDurationInfoWithMultipleClose ()
specifier|public
name|void
name|testDurationInfoWithMultipleClose
parameter_list|()
throws|throws
name|Exception
block|{
name|DurationInfo
name|info
init|=
operator|new
name|DurationInfo
argument_list|(
name|log
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|.
name|close
argument_list|()
expr_stmt|;
name|info
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|info
operator|.
name|value
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
DECL|method|testDurationInfoCreationWithNullMsg ()
specifier|public
name|void
name|testDurationInfoCreationWithNullMsg
parameter_list|()
block|{
name|DurationInfo
name|info
init|=
operator|new
name|DurationInfo
argument_list|(
name|log
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|info
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

