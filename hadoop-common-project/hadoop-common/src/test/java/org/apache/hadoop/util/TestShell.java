begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_class
DECL|class|TestShell
specifier|public
class|class
name|TestShell
extends|extends
name|TestCase
block|{
DECL|class|Command
specifier|private
specifier|static
class|class
name|Command
extends|extends
name|Shell
block|{
DECL|field|runCount
specifier|private
name|int
name|runCount
init|=
literal|0
decl_stmt|;
DECL|method|Command (long interval)
specifier|private
name|Command
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
comment|// There is no /bin/echo equivalent on Windows so just launch it as a
comment|// shell built-in.
comment|//
return|return
name|Shell
operator|.
name|WINDOWS
condition|?
operator|(
operator|new
name|String
index|[]
block|{
literal|"cmd.exe"
block|,
literal|"/c"
block|,
literal|"echo"
block|,
literal|"hello"
block|}
operator|)
else|:
operator|(
operator|new
name|String
index|[]
block|{
literal|"echo"
block|,
literal|"hello"
block|}
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
operator|++
name|runCount
expr_stmt|;
block|}
DECL|method|getRunCount ()
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
return|return
name|runCount
return|;
block|}
block|}
DECL|method|testInterval ()
specifier|public
name|void
name|testInterval
parameter_list|()
throws|throws
name|IOException
block|{
name|testInterval
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|/
literal|60000
argument_list|)
expr_stmt|;
comment|// test a negative interval
name|testInterval
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
comment|// test a zero interval
name|testInterval
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
comment|// interval equal to 10mins
name|testInterval
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|/
literal|60000
operator|+
literal|60
argument_list|)
expr_stmt|;
comment|// test a very big interval
block|}
comment|/**    * Assert that a string has a substring in it    * @param string string to search    * @param search what to search for it    */
DECL|method|assertInString (String string, String search)
specifier|private
name|void
name|assertInString
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|search
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Empty String"
argument_list|,
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|contains
argument_list|(
name|search
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Did not find \""
operator|+
name|search
operator|+
literal|"\" in "
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShellCommandExecutorToString ()
specifier|public
name|void
name|testShellCommandExecutorToString
parameter_list|()
throws|throws
name|Throwable
block|{
name|Shell
operator|.
name|ShellCommandExecutor
name|sce
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ls"
block|,
literal|".."
block|,
literal|"arg 2"
block|}
argument_list|)
decl_stmt|;
name|String
name|command
init|=
name|sce
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|"ls"
argument_list|)
expr_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|" .. "
argument_list|)
expr_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|"\"arg 2\""
argument_list|)
expr_stmt|;
block|}
DECL|method|testShellCommandTimeout ()
specifier|public
name|void
name|testShellCommandTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// setExecutable does not work on Windows
return|return;
block|}
name|String
name|rootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|shellFile
init|=
operator|new
name|File
argument_list|(
name|rootDir
argument_list|,
literal|"timeout.sh"
argument_list|)
decl_stmt|;
name|String
name|timeoutCommand
init|=
literal|"sleep 4; echo \"hello\""
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|shellFile
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|timeoutCommand
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|setExecutable
argument_list|(
name|shellFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|ShellCommandExecutor
name|shexc
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|shellFile
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
block|{
name|shexc
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//When timing out exception is thrown.
block|}
name|shellFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Script didnt not timeout"
argument_list|,
name|shexc
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|countTimerThreads ()
specifier|private
specifier|static
name|int
name|countTimerThreads
parameter_list|()
block|{
name|ThreadMXBean
name|threadBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ThreadInfo
index|[]
name|infos
init|=
name|threadBean
operator|.
name|getThreadInfo
argument_list|(
name|threadBean
operator|.
name|getAllThreadIds
argument_list|()
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|ThreadInfo
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|StackTraceElement
name|elem
range|:
name|info
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
if|if
condition|(
name|elem
operator|.
name|getClassName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Timer"
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
DECL|method|testShellCommandTimerLeak ()
specifier|public
name|void
name|testShellCommandTimerLeak
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|quickCommand
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"/bin/sleep"
block|,
literal|"100"
block|}
decl_stmt|;
name|int
name|timersBefore
init|=
name|countTimerThreads
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"before: "
operator|+
name|timersBefore
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Shell
operator|.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
name|quickCommand
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Bad command should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|int
name|timersAfter
init|=
name|countTimerThreads
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"after: "
operator|+
name|timersAfter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timersBefore
argument_list|,
name|timersAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetCheckProcessIsAliveCommand ()
specifier|public
name|void
name|testGetCheckProcessIsAliveCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anyPid
init|=
literal|"9999"
decl_stmt|;
name|String
index|[]
name|checkProcessAliveCommand
init|=
name|Shell
operator|.
name|getCheckProcessIsAliveCommand
argument_list|(
name|anyPid
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedCommand
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"isAlive"
block|,
name|anyPid
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Shell
operator|.
name|isSetsidAvailable
condition|)
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -0 -- -"
operator|+
name|anyPid
block|}
expr_stmt|;
block|}
else|else
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -0 "
operator|+
name|anyPid
block|}
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedCommand
argument_list|,
name|checkProcessAliveCommand
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetSignalKillCommand ()
specifier|public
name|void
name|testGetSignalKillCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|anyPid
init|=
literal|"9999"
decl_stmt|;
name|int
name|anySignal
init|=
literal|9
decl_stmt|;
name|String
index|[]
name|checkProcessAliveCommand
init|=
name|Shell
operator|.
name|getSignalKillCommand
argument_list|(
name|anySignal
argument_list|,
name|anyPid
argument_list|)
decl_stmt|;
name|String
index|[]
name|expectedCommand
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"task"
block|,
literal|"isAlive"
block|,
name|anyPid
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Shell
operator|.
name|isSetsidAvailable
condition|)
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -9 -- -"
operator|+
name|anyPid
block|}
expr_stmt|;
block|}
else|else
block|{
name|expectedCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kill -9 "
operator|+
name|anyPid
block|}
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expectedCommand
argument_list|,
name|checkProcessAliveCommand
argument_list|)
expr_stmt|;
block|}
DECL|method|testInterval (long interval)
specifier|private
name|void
name|testInterval
parameter_list|(
name|long
name|interval
parameter_list|)
throws|throws
name|IOException
block|{
name|Command
name|command
init|=
operator|new
name|Command
argument_list|(
name|interval
argument_list|)
decl_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

