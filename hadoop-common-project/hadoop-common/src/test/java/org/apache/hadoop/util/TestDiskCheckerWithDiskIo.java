begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|FileIoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Verify {@link DiskChecker} validation routines that perform  * Disk IO.  */
end_comment

begin_class
DECL|class|TestDiskCheckerWithDiskIo
specifier|public
specifier|final
class|class
name|TestDiskCheckerWithDiskIo
block|{
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30_000
argument_list|)
decl_stmt|;
comment|/**    * Verify DiskChecker ignores at least 2 transient file creation errors.    */
annotation|@
name|Test
DECL|method|testDiskIoIgnoresTransientCreateErrors ()
specifier|public
specifier|final
name|void
name|testDiskIoIgnoresTransientCreateErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|DiskChecker
operator|.
name|replaceFileOutputStreamProvider
argument_list|(
operator|new
name|TestFileIoProvider
argument_list|(
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkDirs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify DiskChecker bails after 3 file creation errors.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DiskErrorException
operator|.
name|class
argument_list|)
DECL|method|testDiskIoDetectsCreateErrors ()
specifier|public
specifier|final
name|void
name|testDiskIoDetectsCreateErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|DiskChecker
operator|.
name|replaceFileOutputStreamProvider
argument_list|(
operator|new
name|TestFileIoProvider
argument_list|(
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkDirs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify DiskChecker ignores at least 2 transient file write errors.    */
annotation|@
name|Test
DECL|method|testDiskIoIgnoresTransientWriteErrors ()
specifier|public
specifier|final
name|void
name|testDiskIoIgnoresTransientWriteErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|DiskChecker
operator|.
name|replaceFileOutputStreamProvider
argument_list|(
operator|new
name|TestFileIoProvider
argument_list|(
literal|0
argument_list|,
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkDirs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify DiskChecker bails after 3 file write errors.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DiskErrorException
operator|.
name|class
argument_list|)
DECL|method|testDiskIoDetectsWriteErrors ()
specifier|public
specifier|final
name|void
name|testDiskIoDetectsWriteErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|DiskChecker
operator|.
name|replaceFileOutputStreamProvider
argument_list|(
operator|new
name|TestFileIoProvider
argument_list|(
literal|0
argument_list|,
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|checkDirs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify DiskChecker's test file naming scheme.    */
annotation|@
name|Test
DECL|method|testDiskIoFileNaming ()
specifier|public
name|void
name|testDiskIoFileNaming
parameter_list|()
block|{
specifier|final
name|File
name|rootDir
init|=
operator|new
name|File
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|".001"
operator|.
name|matches
argument_list|(
literal|"\\.00\\d$"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|File
name|file
init|=
name|DiskChecker
operator|.
name|getFileNameForDiskIoCheck
argument_list|(
name|rootDir
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File name does not match expected pattern: "
operator|+
name|file
argument_list|,
name|file
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
literal|"^.*\\.[0-9]+$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|File
name|guidFile
init|=
name|DiskChecker
operator|.
name|getFileNameForDiskIoCheck
argument_list|(
name|rootDir
argument_list|,
name|DiskChecker
operator|.
name|DISK_IO_MAX_ITERATIONS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File name does not match expected pattern: "
operator|+
name|guidFile
argument_list|,
name|guidFile
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
literal|"^.*\\.[A-Za-z0-9-]+$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A dummy {@link DiskChecker#FileIoProvider} that can throw a programmable    * number of times.    */
DECL|class|TestFileIoProvider
specifier|private
specifier|static
class|class
name|TestFileIoProvider
implements|implements
name|FileIoProvider
block|{
DECL|field|numCreateCalls
specifier|private
specifier|final
name|AtomicInteger
name|numCreateCalls
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numWriteCalls
specifier|private
specifier|final
name|AtomicInteger
name|numWriteCalls
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numTimesToThrowOnCreate
specifier|private
specifier|final
name|int
name|numTimesToThrowOnCreate
decl_stmt|;
DECL|field|numTimesToThrowOnWrite
specifier|private
specifier|final
name|int
name|numTimesToThrowOnWrite
decl_stmt|;
DECL|method|TestFileIoProvider ( int numTimesToThrowOnCreate, int numTimesToThrowOnWrite)
specifier|public
name|TestFileIoProvider
parameter_list|(
name|int
name|numTimesToThrowOnCreate
parameter_list|,
name|int
name|numTimesToThrowOnWrite
parameter_list|)
block|{
name|this
operator|.
name|numTimesToThrowOnCreate
operator|=
name|numTimesToThrowOnCreate
expr_stmt|;
name|this
operator|.
name|numTimesToThrowOnWrite
operator|=
name|numTimesToThrowOnWrite
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|get (File f)
specifier|public
name|FileOutputStream
name|get
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|numCreateCalls
operator|.
name|getAndIncrement
argument_list|()
operator|<
name|numTimesToThrowOnCreate
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Dummy exception for testing"
argument_list|)
throw|;
block|}
comment|// Can't mock final class FileOutputStream.
return|return
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|write (FileOutputStream fos, byte[] data)
specifier|public
name|void
name|write
parameter_list|(
name|FileOutputStream
name|fos
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numWriteCalls
operator|.
name|getAndIncrement
argument_list|()
operator|<
name|numTimesToThrowOnWrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Dummy exception for testing"
argument_list|)
throw|;
block|}
name|fos
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkDirs (boolean success)
specifier|private
name|void
name|checkDirs
parameter_list|(
name|boolean
name|success
parameter_list|)
throws|throws
name|Throwable
block|{
name|File
name|localDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
try|try
block|{
name|DiskChecker
operator|.
name|checkDirWithDiskIo
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|localDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create an empty directory with a random name under test directory    * with Posix permissions "0755".    *    * @return the created directory    * @throws java.io.IOException if any    */
DECL|method|createTempDir ()
specifier|private
name|File
name|createTempDir
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
specifier|final
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|testDir
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"test"
argument_list|,
name|PosixFilePermissions
operator|.
name|asFileAttribute
argument_list|(
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
block|}
end_class

end_unit

