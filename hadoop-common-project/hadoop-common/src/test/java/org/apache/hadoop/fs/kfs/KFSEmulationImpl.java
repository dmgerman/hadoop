begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  *  *   * We need to provide the ability to the code in fs/kfs without really  * having a KFS deployment.  For this purpose, use the LocalFileSystem  * as a way to "emulate" KFS.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.kfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
DECL|class|KFSEmulationImpl
specifier|public
class|class
name|KFSEmulationImpl
implements|implements
name|IFSImpl
block|{
DECL|field|localFS
name|FileSystem
name|localFS
decl_stmt|;
DECL|method|KFSEmulationImpl (Configuration conf)
specifier|public
name|KFSEmulationImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|localFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists (String path)
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDirectory (String path)
specifier|public
name|boolean
name|isDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFile (String path)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|isFile
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readdir (String path)
specifier|public
name|String
index|[]
name|readdir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|p
init|=
name|localFS
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|=
name|localFS
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|entries
init|=
literal|null
decl_stmt|;
name|entries
operator|=
operator|new
name|String
index|[
name|p
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|entries
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|entries
return|;
block|}
annotation|@
name|Override
DECL|method|readdirplus (Path path)
specifier|public
name|FileStatus
index|[]
name|readdirplus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (String path)
specifier|public
name|int
name|mkdirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localFS
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|rename (String source, String dest)
specifier|public
name|int
name|rename
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localFS
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|source
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|rmdir (String path)
specifier|public
name|int
name|rmdir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// the directory better be empty
name|String
index|[]
name|dirEntries
init|=
name|readdir
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|dirEntries
operator|.
name|length
operator|<=
literal|2
operator|)
operator|&&
operator|(
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|)
condition|)
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|remove (String path)
specifier|public
name|int
name|remove
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isFile
argument_list|(
name|path
argument_list|)
operator|&&
operator|(
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|filesize (String path)
specifier|public
name|long
name|filesize
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|getLen
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getReplication (String path)
specifier|public
name|short
name|getReplication
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|setReplication (String path, short replication)
specifier|public
name|short
name|setReplication
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getDataLocation (String path, long start, long len)
specifier|public
name|String
index|[]
index|[]
name|getDataLocation
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockLocation
index|[]
name|blkLocations
init|=
name|localFS
operator|.
name|getFileBlockLocations
argument_list|(
name|localFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|blkLocations
operator|==
literal|null
operator|)
operator|||
operator|(
name|blkLocations
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
index|[]
return|;
block|}
name|int
name|blkCount
init|=
name|blkLocations
operator|.
name|length
decl_stmt|;
name|String
index|[]
index|[]
name|hints
init|=
operator|new
name|String
index|[
name|blkCount
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blkCount
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|hosts
init|=
name|blkLocations
index|[
name|i
index|]
operator|.
name|getHosts
argument_list|()
decl_stmt|;
name|hints
index|[
name|i
index|]
operator|=
operator|new
name|String
index|[
name|hosts
operator|.
name|length
index|]
expr_stmt|;
name|hints
index|[
name|i
index|]
operator|=
name|hosts
expr_stmt|;
block|}
return|return
name|hints
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime (String path)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|s
init|=
name|localFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|s
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|append (String path, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
comment|// besides path/overwrite, the other args don't matter for
comment|// testing purposes.
return|return
name|localFS
operator|.
name|append
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (String path, short replication, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
comment|// besides path/overwrite, the other args don't matter for
comment|// testing purposes.
return|return
name|localFS
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|open (String path, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|localFS
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

