begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test of the utility of raw erasure coder.  */
end_comment

begin_class
DECL|class|TestCoderUtil
specifier|public
class|class
name|TestCoderUtil
block|{
DECL|field|numInputs
specifier|private
specifier|final
name|int
name|numInputs
init|=
literal|9
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
init|=
literal|1024
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetEmptyChunk ()
specifier|public
name|void
name|testGetEmptyChunk
parameter_list|()
block|{
name|byte
index|[]
name|ret
init|=
name|CoderUtil
operator|.
name|getEmptyChunk
argument_list|(
name|chunkSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkSize
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testResetBuffer ()
specifier|public
name|void
name|testResetBuffer
parameter_list|()
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|chunkSize
operator|*
literal|2
argument_list|)
operator|.
name|putInt
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|buf
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ByteBuffer
name|ret
init|=
name|CoderUtil
operator|.
name|resetBuffer
argument_list|(
name|buf
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkSize
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|inputs
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|numInputs
argument_list|)
operator|.
name|putInt
argument_list|(
literal|1234
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|CoderUtil
operator|.
name|resetBuffer
argument_list|(
name|inputs
argument_list|,
literal|0
argument_list|,
name|numInputs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetValidIndexes ()
specifier|public
name|void
name|testGetValidIndexes
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[
name|numInputs
index|]
index|[]
decl_stmt|;
name|inputs
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|inputs
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|inputs
index|[
literal|7
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|inputs
index|[
literal|8
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|int
index|[]
name|validIndexes
init|=
name|CoderUtil
operator|.
name|getValidIndexes
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|validIndexes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check valid indexes
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|validIndexes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|validIndexes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|validIndexes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|validIndexes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoValidIndexes ()
specifier|public
name|void
name|testNoValidIndexes
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[
name|numInputs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInputs
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|int
index|[]
name|validIndexes
init|=
name|CoderUtil
operator|.
name|getValidIndexes
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|validIndexes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNullIndexes ()
specifier|public
name|void
name|testGetNullIndexes
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[
name|numInputs
index|]
index|[]
decl_stmt|;
name|inputs
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|inputs
index|[
literal|1
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|inputs
index|[
literal|7
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|inputs
index|[
literal|8
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
name|int
index|[]
name|nullIndexes
init|=
name|CoderUtil
operator|.
name|getNullIndexes
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nullIndexes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nullIndexes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nullIndexes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|nullIndexes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|nullIndexes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindFirstValidInput ()
specifier|public
name|void
name|testFindFirstValidInput
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[
name|numInputs
index|]
index|[]
decl_stmt|;
name|inputs
index|[
literal|8
index|]
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
literal|1234
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|byte
index|[]
name|firstValidInput
init|=
name|CoderUtil
operator|.
name|findFirstValidInput
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstValidInput
argument_list|,
name|inputs
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNoValidInput ()
specifier|public
name|void
name|testNoValidInput
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|inputs
init|=
operator|new
name|byte
index|[
name|numInputs
index|]
index|[]
decl_stmt|;
name|CoderUtil
operator|.
name|findFirstValidInput
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

