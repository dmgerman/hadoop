begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A test class for InstrumentedLock.  */
end_comment

begin_class
DECL|class|TestInstrumentedLock
specifier|public
class|class
name|TestInstrumentedLock
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestInstrumentedLock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * Test exclusive access of the lock.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMultipleThread ()
specifier|public
name|void
name|testMultipleThread
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|InstrumentedLock
name|lock
init|=
operator|new
name|InstrumentedLock
argument_list|(
name|testname
argument_list|,
name|LOG
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
name|competingThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|lock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|competingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the correctness with try-with-resource syntax.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTryWithResourceSyntax ()
specifier|public
name|void
name|testTryWithResourceSyntax
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
name|lockThread
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
operator|new
name|InstrumentedLock
argument_list|(
name|testname
argument_list|,
name|LOG
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|super
operator|.
name|lock
argument_list|()
expr_stmt|;
name|lockThread
operator|.
name|set
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|super
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockThread
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|AutoCloseableLock
name|acl
init|=
operator|new
name|AutoCloseableLock
argument_list|(
name|lock
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseable
name|localLock
init|=
name|acl
operator|.
name|acquire
argument_list|()
init|)
block|{
name|assertEquals
argument_list|(
name|acl
argument_list|,
name|localLock
argument_list|)
expr_stmt|;
name|Thread
name|competingThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|lockThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|competingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|lockThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|lockThread
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the lock logs warning when lock held time is greater than threshold    * and not log warning otherwise.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testLockLongHoldingReport ()
specifier|public
name|void
name|testLockLongHoldingReport
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|time
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Timer
name|mclock
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|monotonicNow
parameter_list|()
block|{
return|return
name|time
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Lock
name|mlock
init|=
name|mock
argument_list|(
name|Lock
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|wlogged
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|wsuppresed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InstrumentedLock
name|lock
init|=
operator|new
name|InstrumentedLock
argument_list|(
name|testname
argument_list|,
name|LOG
argument_list|,
name|mlock
argument_list|,
literal|2000
argument_list|,
literal|300
argument_list|,
name|mclock
argument_list|)
block|{
annotation|@
name|Override
name|void
name|logWarning
parameter_list|(
name|long
name|lockHeldTime
parameter_list|,
name|long
name|suppressed
parameter_list|)
block|{
name|wlogged
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|wsuppresed
operator|.
name|set
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// do not log warning when the lock held time is short
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 0
name|time
operator|.
name|set
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 200
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 200
name|time
operator|.
name|set
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 700
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// despite the lock held time is greater than threshold
comment|// suppress the log warning due to the logging gap
comment|// (not recorded in wsuppressed until next log message)
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 700
name|time
operator|.
name|set
argument_list|(
literal|1100
argument_list|)
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 1100
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// log a warning message when the lock held time is greater the threshold
comment|// and the logging time gap is satisfied. Also should display suppressed
comment|// previous warnings.
name|time
operator|.
name|set
argument_list|(
literal|2400
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 2400
name|time
operator|.
name|set
argument_list|(
literal|2800
argument_list|)
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 2800
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

