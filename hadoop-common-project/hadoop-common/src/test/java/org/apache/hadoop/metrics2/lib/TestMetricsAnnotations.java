begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestMetricsAnnotations
specifier|public
class|class
name|TestMetricsAnnotations
block|{
DECL|class|MyMetrics
specifier|static
class|class
name|MyMetrics
block|{
DECL|field|c1
annotation|@
name|Metric
name|MutableCounterInt
name|c1
decl_stmt|;
DECL|field|c2
annotation|@
name|Metric
argument_list|(
block|{
literal|"Counter2"
block|,
literal|"Counter2 desc"
block|}
argument_list|)
name|MutableCounterLong
name|c2
decl_stmt|;
DECL|field|g1
DECL|field|g2
annotation|@
name|Metric
name|MutableGaugeInt
name|g1
decl_stmt|,
name|g2
decl_stmt|;
DECL|field|g3
annotation|@
name|Metric
argument_list|(
literal|"g3 desc"
argument_list|)
name|MutableGaugeLong
name|g3
decl_stmt|;
DECL|field|r1
annotation|@
name|Metric
name|MutableRate
name|r1
decl_stmt|;
DECL|field|s1
annotation|@
name|Metric
name|MutableStat
name|s1
decl_stmt|;
DECL|field|rs1
annotation|@
name|Metric
name|MutableRates
name|rs1
decl_stmt|;
block|}
DECL|method|testFields ()
annotation|@
name|Test
specifier|public
name|void
name|testFields
parameter_list|()
block|{
name|MyMetrics
name|metrics
init|=
operator|new
name|MyMetrics
argument_list|()
decl_stmt|;
name|MetricsSource
name|source
init|=
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|c1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|c2
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|g1
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|g2
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|g3
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|r1
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|s1
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|rs1
operator|.
name|add
argument_list|(
literal|"rs1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"Counter2"
argument_list|,
literal|"Counter2 desc"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G2"
argument_list|,
literal|"G2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G3"
argument_list|,
literal|"g3 desc"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"R1NumOps"
argument_list|,
literal|"Number of ops for r1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"R1AvgTime"
argument_list|,
literal|"Average time for r1"
argument_list|)
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"S1NumOps"
argument_list|,
literal|"Number of ops for s1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"S1AvgTime"
argument_list|,
literal|"Average time for s1"
argument_list|)
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"Rs1NumOps"
argument_list|,
literal|"Number of ops for rs1"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"Rs1AvgTime"
argument_list|,
literal|"Average time for rs1"
argument_list|)
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
DECL|class|BadMetrics
specifier|static
class|class
name|BadMetrics
block|{
DECL|field|i0
annotation|@
name|Metric
name|Integer
name|i0
decl_stmt|;
block|}
DECL|method|testBadFields ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBadFields
parameter_list|()
block|{
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|BadMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyMetrics2
specifier|static
class|class
name|MyMetrics2
block|{
DECL|method|getG1 ()
annotation|@
name|Metric
name|int
name|getG1
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|getG2 ()
annotation|@
name|Metric
name|long
name|getG2
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|method|getG3 ()
annotation|@
name|Metric
name|float
name|getG3
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
DECL|method|getG4 ()
annotation|@
name|Metric
name|double
name|getG4
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
DECL|method|getC1 ()
annotation|@
name|Metric
argument_list|(
name|type
operator|=
name|Type
operator|.
name|COUNTER
argument_list|)
name|int
name|getC1
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|getC2 ()
annotation|@
name|Metric
argument_list|(
name|type
operator|=
name|Type
operator|.
name|COUNTER
argument_list|)
name|long
name|getC2
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|method|getT1 ()
annotation|@
name|Metric
argument_list|(
name|type
operator|=
name|Type
operator|.
name|TAG
argument_list|)
name|String
name|getT1
parameter_list|()
block|{
return|return
literal|"t1"
return|;
block|}
block|}
DECL|method|testMethods ()
annotation|@
name|Test
specifier|public
name|void
name|testMethods
parameter_list|()
block|{
name|MyMetrics2
name|metrics
init|=
operator|new
name|MyMetrics2
argument_list|()
decl_stmt|;
name|MetricsSource
name|source
init|=
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G2"
argument_list|,
literal|"G2"
argument_list|)
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G3"
argument_list|,
literal|"G3"
argument_list|)
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G4"
argument_list|,
literal|"G4"
argument_list|)
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C2"
argument_list|,
literal|"C2"
argument_list|)
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|tag
argument_list|(
name|info
argument_list|(
literal|"T1"
argument_list|,
literal|"T1"
argument_list|)
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
block|}
DECL|class|BadMetrics2
specifier|static
class|class
name|BadMetrics2
block|{
DECL|method|foo (int i)
annotation|@
name|Metric
name|int
name|foo
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testBadMethodWithArgs ()
specifier|public
name|void
name|testBadMethodWithArgs
parameter_list|()
block|{
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|BadMetrics2
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|BadMetrics3
specifier|static
class|class
name|BadMetrics3
block|{
DECL|method|foo ()
annotation|@
name|Metric
name|boolean
name|foo
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
DECL|method|testBadMethodReturnType ()
specifier|public
name|void
name|testBadMethodReturnType
parameter_list|()
block|{
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|BadMetrics3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"My metrics"
argument_list|,
name|context
operator|=
literal|"foo"
argument_list|)
DECL|class|MyMetrics3
specifier|static
class|class
name|MyMetrics3
block|{
DECL|method|getG1 ()
annotation|@
name|Metric
name|int
name|getG1
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
DECL|method|testClasses ()
annotation|@
name|Test
specifier|public
name|void
name|testClasses
parameter_list|()
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|MyMetrics3
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetricsCollector
name|collector
init|=
name|rb
operator|.
name|parent
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|collector
argument_list|)
operator|.
name|addRecord
argument_list|(
name|info
argument_list|(
literal|"MyMetrics3"
argument_list|,
literal|"My metrics"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|add
argument_list|(
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|HybridMetrics
specifier|static
class|class
name|HybridMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"HybridMetrics"
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"hybrid"
argument_list|)
decl_stmt|;
DECL|field|C0
annotation|@
name|Metric
argument_list|(
literal|"C0 desc"
argument_list|)
name|MutableCounterInt
name|C0
decl_stmt|;
DECL|method|getG0 ()
annotation|@
name|Metric
name|int
name|getG0
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|collector
operator|.
name|addRecord
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"foocontext"
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1 desc"
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|endRecord
argument_list|()
operator|.
name|addRecord
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"barcontext"
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1 desc"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|snapshot
argument_list|(
name|collector
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHybrid ()
annotation|@
name|Test
specifier|public
name|void
name|testHybrid
parameter_list|()
block|{
name|HybridMetrics
name|metrics
init|=
operator|new
name|HybridMetrics
argument_list|()
decl_stmt|;
name|MetricsSource
name|source
init|=
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|metrics
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|C0
operator|.
name|incr
argument_list|()
expr_stmt|;
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|MetricsCollector
name|collector
init|=
name|rb
operator|.
name|parent
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|collector
argument_list|)
operator|.
name|addRecord
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|collector
argument_list|)
operator|.
name|addRecord
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|collector
argument_list|)
operator|.
name|addRecord
argument_list|(
name|info
argument_list|(
literal|"HybridMetrics"
argument_list|,
literal|"HybridMetrics"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"foocontext"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C1"
argument_list|,
literal|"C1 desc"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"barcontext"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G1"
argument_list|,
literal|"G1 desc"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|add
argument_list|(
name|tag
argument_list|(
name|MsInfo
operator|.
name|Context
argument_list|,
literal|"hybrid"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"C0"
argument_list|,
literal|"C0 desc"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"G0"
argument_list|,
literal|"G0"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"hybrid"
argument_list|)
DECL|class|BadHybridMetrics
specifier|static
class|class
name|BadHybridMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|c1
annotation|@
name|Metric
name|MutableCounterInt
name|c1
decl_stmt|;
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|collector
operator|.
name|addRecord
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadHybrid ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBadHybrid
parameter_list|()
block|{
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|BadHybridMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|EmptyMetrics
specifier|static
class|class
name|EmptyMetrics
block|{
DECL|field|foo
name|int
name|foo
decl_stmt|;
block|}
DECL|method|testEmptyMetrics ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MetricsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyMetrics
parameter_list|()
block|{
name|MetricsAnnotations
operator|.
name|makeSource
argument_list|(
operator|new
name|EmptyMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

