begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|mockMetricsRecordBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyDouble
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests various cases of the algorithms implemented in  * {@link RollingAverages}.  */
end_comment

begin_class
DECL|class|TestRollingAverages
specifier|public
class|class
name|TestRollingAverages
block|{
comment|/**    * Tests if the results are correct if no samples are inserted, dry run of    * empty roll over.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRollingAveragesEmptyRollover ()
specifier|public
name|void
name|testRollingAveragesEmptyRollover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MetricsRecordBuilder
name|rb
init|=
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
comment|/* 5s interval and 2 windows */
try|try
init|(
specifier|final
name|RollingAverages
name|rollingAverages
init|=
operator|new
name|RollingAverages
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
init|)
block|{
comment|/* Check it initially */
name|rollingAverages
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"FooRollingAvgTime"
argument_list|,
literal|"Rolling average time for foo"
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"BarAvgTime"
argument_list|,
literal|"Rolling average time for bar"
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|/* sleep 6s longer than 5s interval to wait for rollover done */
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|rollingAverages
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"FooRollingAvgTime"
argument_list|,
literal|"Rolling average time for foo"
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rb
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"BarAvgTime"
argument_list|,
literal|"Rolling average time for bar"
argument_list|)
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the case:    *<p>    * 5s interval and 2 sliding windows    *</p>    *<p>    * sample stream: 1000 times 1, 2, and 3, respectively, e.g. [1, 1...1], [2,    * 2...2] and [3, 3...3]    *</p>    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRollingAveragesRollover ()
specifier|public
name|void
name|testRollingAveragesRollover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MetricsRecordBuilder
name|rb
init|=
name|mockMetricsRecordBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"foo2"
decl_stmt|;
specifier|final
name|int
name|windowSize
init|=
literal|5
decl_stmt|;
comment|// 5s roll over interval
specifier|final
name|int
name|numWindows
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|numOpsPerIteration
init|=
literal|1000
decl_stmt|;
try|try
init|(
name|RollingAverages
name|rollingAverages
init|=
operator|new
name|RollingAverages
argument_list|(
name|windowSize
argument_list|,
name|numWindows
argument_list|)
init|)
block|{
comment|/* Push values for three intervals */
specifier|final
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|/* insert value */
for|for
control|(
name|long
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|numOpsPerIteration
condition|;
name|j
operator|++
control|)
block|{
name|rollingAverages
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**          * Sleep until 1s after the next windowSize seconds interval, to let the          * metrics roll over          */
specifier|final
name|long
name|sleep
init|=
operator|(
name|start
operator|+
operator|(
name|windowSize
operator|*
literal|1000
operator|*
name|i
operator|)
operator|+
literal|1000
operator|)
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
comment|/* Verify that the window reset, check it has the values we pushed in */
name|rollingAverages
operator|.
name|snapshot
argument_list|(
name|rb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|/*          * #1 window with a series of 1 1000          * times, e.g. [1, 1...1], similarly, #2 window, e.g. [2, 2...2],          * #3 window, e.g. [3, 3...3]          */
specifier|final
name|double
name|rollingSum
init|=
name|numOpsPerIteration
operator|*
operator|(
name|i
operator|>
literal|1
condition|?
operator|(
name|i
operator|-
literal|1
operator|)
else|:
literal|0
operator|)
operator|+
name|numOpsPerIteration
operator|*
name|i
decl_stmt|;
comment|/* one empty window or all 2 windows full */
specifier|final
name|long
name|rollingTotal
init|=
name|i
operator|>
literal|1
condition|?
literal|2
operator|*
name|numOpsPerIteration
else|:
name|numOpsPerIteration
decl_stmt|;
name|verify
argument_list|(
name|rb
argument_list|)
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"Foo2RollingAvgTime"
argument_list|,
literal|"Rolling average time for foo2"
argument_list|)
argument_list|,
name|rollingSum
operator|/
name|rollingTotal
argument_list|)
expr_stmt|;
comment|/* Verify the metrics were added the right number of times */
name|verify
argument_list|(
name|rb
argument_list|,
name|times
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|addGauge
argument_list|(
name|eq
argument_list|(
name|info
argument_list|(
literal|"Foo2RollingAvgTime"
argument_list|,
literal|"Rolling average time for foo2"
argument_list|)
argument_list|)
argument_list|,
name|anyDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

