begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestPathExceptions
specifier|public
class|class
name|TestPathExceptions
block|{
DECL|field|path
specifier|protected
name|String
name|path
init|=
literal|"some/file"
decl_stmt|;
DECL|field|error
specifier|protected
name|String
name|error
init|=
literal|"KABOOM"
decl_stmt|;
annotation|@
name|Test
DECL|method|testWithDefaultString ()
specifier|public
name|void
name|testWithDefaultString
parameter_list|()
throws|throws
name|Exception
block|{
name|PathIOException
name|pe
init|=
operator|new
name|PathIOException
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|pe
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"`"
operator|+
name|path
operator|+
literal|"': Input/output error"
argument_list|,
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithThrowable ()
specifier|public
name|void
name|testWithThrowable
parameter_list|()
throws|throws
name|Exception
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"KABOOM"
argument_list|)
decl_stmt|;
name|PathIOException
name|pe
init|=
operator|new
name|PathIOException
argument_list|(
name|path
argument_list|,
name|ioe
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|pe
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"`"
operator|+
name|path
operator|+
literal|"': Input/output error: "
operator|+
name|error
argument_list|,
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCustomString ()
specifier|public
name|void
name|testWithCustomString
parameter_list|()
throws|throws
name|Exception
block|{
name|PathIOException
name|pe
init|=
operator|new
name|PathIOException
argument_list|(
name|path
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|pe
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"`"
operator|+
name|path
operator|+
literal|"': "
operator|+
name|error
argument_list|,
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteExceptionUnwrap ()
specifier|public
name|void
name|testRemoteExceptionUnwrap
parameter_list|()
throws|throws
name|Exception
block|{
name|PathIOException
name|pe
decl_stmt|;
name|RemoteException
name|re
decl_stmt|;
name|IOException
name|ie
decl_stmt|;
name|pe
operator|=
operator|new
name|PathIOException
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|re
operator|=
operator|new
name|RemoteException
argument_list|(
name|PathIOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test constructor1"
argument_list|)
expr_stmt|;
name|ie
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|PathIOException
argument_list|)
expr_stmt|;
name|ie
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|PathIOException
argument_list|)
expr_stmt|;
name|pe
operator|=
operator|new
name|PathIOException
argument_list|(
name|path
argument_list|,
literal|"constructor2"
argument_list|)
expr_stmt|;
name|re
operator|=
operator|new
name|RemoteException
argument_list|(
name|PathIOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test constructor2"
argument_list|)
expr_stmt|;
name|ie
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|PathIOException
argument_list|)
expr_stmt|;
name|ie
operator|=
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|PathIOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ie
operator|instanceof
name|PathIOException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

