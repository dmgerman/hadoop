begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**    when(p1.getKMSUrl()).thenReturn("p1");  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key.kms
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|kms
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestLoadBalancingKMSClientProvider
specifier|public
class|class
name|TestLoadBalancingKMSClientProvider
block|{
annotation|@
name|Test
DECL|method|testCreation ()
specifier|public
name|void
name|testCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|KMSClientProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"kms://http@host1/kms/foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|kp
operator|instanceof
name|KMSClientProvider
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://host1/kms/foo/v1/"
argument_list|,
operator|(
operator|(
name|KMSClientProvider
operator|)
name|kp
operator|)
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
expr_stmt|;
name|kp
operator|=
operator|new
name|KMSClientProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"kms://http@host1;host2;host3/kms/foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kp
operator|instanceof
name|LoadBalancingKMSClientProvider
argument_list|)
expr_stmt|;
name|KMSClientProvider
index|[]
name|providers
init|=
operator|(
operator|(
name|LoadBalancingKMSClientProvider
operator|)
name|kp
operator|)
operator|.
name|getProviders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|providers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"http://host1/kms/foo/v1/"
argument_list|,
literal|"http://host2/kms/foo/v1/"
argument_list|,
literal|"http://host3/kms/foo/v1/"
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|providers
index|[
literal|0
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|,
name|providers
index|[
literal|1
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|,
name|providers
index|[
literal|2
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|kp
operator|=
operator|new
name|KMSClientProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"kms://http@host1;host2;host3:9600/kms/foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kp
operator|instanceof
name|LoadBalancingKMSClientProvider
argument_list|)
expr_stmt|;
name|providers
operator|=
operator|(
operator|(
name|LoadBalancingKMSClientProvider
operator|)
name|kp
operator|)
operator|.
name|getProviders
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|providers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"http://host1:9600/kms/foo/v1/"
argument_list|,
literal|"http://host2:9600/kms/foo/v1/"
argument_list|,
literal|"http://host3:9600/kms/foo/v1/"
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|providers
index|[
literal|0
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|,
name|providers
index|[
literal|1
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|,
name|providers
index|[
literal|2
index|]
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadBalancing ()
specifier|public
name|void
name|testLoadBalancing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KMSClientProvider
name|p1
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p1
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p2
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p2
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p3
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p3
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
literal|"p3"
argument_list|,
literal|"v3"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
operator|new
name|KMSClientProvider
index|[]
block|{
name|p1
block|,
name|p2
block|,
name|p3
block|}
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test1"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p3"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test3"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test4"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadBalancingWithFailure ()
specifier|public
name|void
name|testLoadBalancingWithFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KMSClientProvider
name|p1
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p1
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p1
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
comment|// This should not be retried
name|KMSClientProvider
name|p2
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p2
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|NoSuchAlgorithmException
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p2
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p3
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p3
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|KMSClientProvider
operator|.
name|KMSKeyVersion
argument_list|(
literal|"p3"
argument_list|,
literal|"v3"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p3
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p3"
argument_list|)
expr_stmt|;
comment|// This should be retried
name|KMSClientProvider
name|p4
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p4
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"p4"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p4
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p4"
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
operator|new
name|KMSClientProvider
index|[]
block|{
name|p1
block|,
name|p2
block|,
name|p3
block|,
name|p4
block|}
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test4"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceptions other than IOExceptions will not be retried
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"test1"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail since its not an IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|NoSuchAlgorithmException
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"p3"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test2"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// IOException will trigger retry in next provider
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|kp
operator|.
name|createKey
argument_list|(
literal|"test3"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadBalancingWithAllBadNodes ()
specifier|public
name|void
name|testLoadBalancingWithAllBadNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KMSClientProvider
name|p1
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p1
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p2
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p2
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p3
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p3
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|KMSClientProvider
name|p4
init|=
name|mock
argument_list|(
name|KMSClientProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|p4
operator|.
name|createKey
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"p4"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p1
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p2
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p3
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p3"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|p4
operator|.
name|getKMSUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"p4"
argument_list|)
expr_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
operator|new
name|KMSClientProvider
index|[]
block|{
name|p1
block|,
name|p2
block|,
name|p3
block|,
name|p4
block|}
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|createKey
argument_list|(
literal|"test3"
argument_list|,
operator|new
name|Options
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail since all providers threw an IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copied from HttpExceptionUtils:
comment|// trick, riding on generics to throw an undeclared exception
DECL|method|throwEx (Throwable ex)
specifier|private
specifier|static
name|void
name|throwEx
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|TestLoadBalancingKMSClientProvider
operator|.
expr|<
name|RuntimeException
operator|>
name|throwException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|throwException (Throwable ex)
specifier|private
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|throwException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
throws|throws
name|E
block|{
throw|throw
operator|(
name|E
operator|)
name|ex
throw|;
block|}
DECL|class|MyKMSClientProvider
specifier|private
class|class
name|MyKMSClientProvider
extends|extends
name|KMSClientProvider
block|{
DECL|method|MyKMSClientProvider (URI uri, Configuration conf)
specifier|public
name|MyKMSClientProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|generateEncryptedKey ( final String encryptionKeyName)
specifier|public
name|EncryptedKeyVersion
name|generateEncryptedKey
parameter_list|(
specifier|final
name|String
name|encryptionKeyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|throwEx
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|decryptEncryptedKey ( final EncryptedKeyVersion encryptedKeyVersion)
specifier|public
name|KeyVersion
name|decryptEncryptedKey
parameter_list|(
specifier|final
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|throwEx
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (final String name, final Options options)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Options
name|options
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|throwEx
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (final String name)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|throwEx
argument_list|(
operator|new
name|AuthenticationException
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClassCastException ()
specifier|public
name|void
name|testClassCastException
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KMSClientProvider
name|p1
init|=
operator|new
name|MyKMSClientProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"kms://http@host1/kms/foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LoadBalancingKMSClientProvider
name|kp
init|=
operator|new
name|LoadBalancingKMSClientProvider
argument_list|(
operator|new
name|KMSClientProvider
index|[]
block|{
name|p1
block|}
argument_list|,
literal|0
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|kp
operator|.
name|generateEncryptedKey
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AuthenticationException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|encryptedKeyVersion
init|=
name|mock
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|kp
operator|.
name|decryptEncryptedKey
argument_list|(
name|encryptedKeyVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AuthenticationException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|KeyProvider
operator|.
name|Options
name|options
init|=
name|KeyProvider
operator|.
name|options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|kp
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AuthenticationException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|kp
operator|.
name|rollNewVersion
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"AuthenticationException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

