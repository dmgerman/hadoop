begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|TestConnectionRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestRpcBase
operator|.
name|TestRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class mainly tests behaviors of reusing RPC connections for various  * retry policies.  */
end_comment

begin_class
DECL|class|TestReuseRpcConnections
specifier|public
class|class
name|TestReuseRpcConnections
extends|extends
name|TestRpcBase
block|{
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|setupConf
argument_list|()
expr_stmt|;
block|}
DECL|method|getDefaultRetryPolicy ( final boolean defaultRetryPolicyEnabled, final String defaultRetryPolicySpec)
specifier|private
specifier|static
name|RetryPolicy
name|getDefaultRetryPolicy
parameter_list|(
specifier|final
name|boolean
name|defaultRetryPolicyEnabled
parameter_list|,
specifier|final
name|String
name|defaultRetryPolicySpec
parameter_list|)
block|{
return|return
name|TestConnectionRetryPolicy
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
name|defaultRetryPolicyEnabled
argument_list|,
name|defaultRetryPolicySpec
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|getDefaultRetryPolicy ( final boolean defaultRetryPolicyEnabled, final String defaultRetryPolicySpec, final String remoteExceptionToRetry)
specifier|private
specifier|static
name|RetryPolicy
name|getDefaultRetryPolicy
parameter_list|(
specifier|final
name|boolean
name|defaultRetryPolicyEnabled
parameter_list|,
specifier|final
name|String
name|defaultRetryPolicySpec
parameter_list|,
specifier|final
name|String
name|remoteExceptionToRetry
parameter_list|)
block|{
return|return
name|TestConnectionRetryPolicy
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
name|defaultRetryPolicyEnabled
argument_list|,
name|defaultRetryPolicySpec
argument_list|,
name|remoteExceptionToRetry
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDefaultRetryPolicyReuseConnections ()
specifier|public
name|void
name|testDefaultRetryPolicyReuseConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|RetryPolicy
name|rp1
init|=
literal|null
decl_stmt|;
name|RetryPolicy
name|rp2
init|=
literal|null
decl_stmt|;
name|RetryPolicy
name|rp3
init|=
literal|null
decl_stmt|;
comment|/* test the same setting */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"10000,2"
argument_list|)
expr_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
expr_stmt|;
comment|/* test enabled and different specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"20000,3"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"20000,3"
argument_list|)
expr_stmt|;
name|rp3
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"30000,4"
argument_list|)
expr_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|rp3
argument_list|)
expr_stmt|;
comment|/* test disabled and the same specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"40000,5"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"40000,5"
argument_list|)
expr_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
expr_stmt|;
comment|/* test disabled and different specifications */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"50000,6"
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|false
argument_list|,
literal|"60000,7"
argument_list|)
expr_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
expr_stmt|;
comment|/* test different remoteExceptionToRetry */
name|rp1
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"70000,8"
argument_list|,
operator|new
name|RemoteException
argument_list|(
name|RpcNoSuchMethodException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"no such method exception"
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|rp2
operator|=
name|getDefaultRetryPolicy
argument_list|(
literal|true
argument_list|,
literal|"70000,8"
argument_list|,
operator|new
name|RemoteException
argument_list|(
name|PathIOException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"path IO exception"
argument_list|)
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRetryPolicyTryOnceThenFail ()
specifier|public
name|void
name|testRetryPolicyTryOnceThenFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RetryPolicy
name|rp1
init|=
name|TestConnectionRetryPolicy
operator|.
name|newTryOnceThenFail
argument_list|()
decl_stmt|;
specifier|final
name|RetryPolicy
name|rp2
init|=
name|TestConnectionRetryPolicy
operator|.
name|newTryOnceThenFail
argument_list|()
decl_stmt|;
name|verifyRetryPolicyReuseConnections
argument_list|(
name|rp1
argument_list|,
name|rp2
argument_list|,
name|RetryPolicies
operator|.
name|RETRY_FOREVER
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRetryPolicyReuseConnections ( final RetryPolicy retryPolicy1, final RetryPolicy retryPolicy2, final RetryPolicy anotherRetryPolicy)
specifier|private
name|void
name|verifyRetryPolicyReuseConnections
parameter_list|(
specifier|final
name|RetryPolicy
name|retryPolicy1
parameter_list|,
specifier|final
name|RetryPolicy
name|retryPolicy2
parameter_list|,
specifier|final
name|RetryPolicy
name|anotherRetryPolicy
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy1
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy2
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy1
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|,
name|retryPolicy1
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|ProtobufRpcEngine
operator|.
name|getClient
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConnectionId
argument_list|>
name|conns
init|=
name|client
operator|.
name|getConnectionIds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        * another equivalent retry policy, reuse connection        */
name|proxy2
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|,
name|retryPolicy2
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        * different retry policy, create a new connection        */
name|proxy3
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|,
name|anotherRetryPolicy
argument_list|)
expr_stmt|;
name|proxy3
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|2
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// this is dirty, but clear out connection cache for next run
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getConnectionIds
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proxy1
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxy2
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxy3
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

