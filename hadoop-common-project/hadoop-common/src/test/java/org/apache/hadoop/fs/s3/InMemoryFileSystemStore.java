begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
operator|.
name|INode
operator|.
name|FileType
import|;
end_import

begin_comment
comment|/**  * A stub implementation of {@link FileSystemStore} for testing  * {@link S3FileSystem} without actually connecting to S3.  */
end_comment

begin_class
DECL|class|InMemoryFileSystemStore
specifier|public
class|class
name|InMemoryFileSystemStore
implements|implements
name|FileSystemStore
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|inodes
specifier|private
name|SortedMap
argument_list|<
name|Path
argument_list|,
name|INode
argument_list|>
name|inodes
init|=
operator|new
name|TreeMap
argument_list|<
name|Path
argument_list|,
name|INode
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blocks
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|blocks
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|inodes
operator|.
name|put
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|INode
operator|.
name|DIRECTORY_INODE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|"0"
return|;
block|}
annotation|@
name|Override
DECL|method|deleteINode (Path path)
specifier|public
name|void
name|deleteINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|inodes
operator|.
name|remove
argument_list|(
name|normalize
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteBlock (Block block)
specifier|public
name|void
name|deleteBlock
parameter_list|(
name|Block
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|blocks
operator|.
name|remove
argument_list|(
name|block
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inodeExists (Path path)
specifier|public
name|boolean
name|inodeExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inodes
operator|.
name|containsKey
argument_list|(
name|normalize
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|blockExists (long blockId)
specifier|public
name|boolean
name|blockExists
parameter_list|(
name|long
name|blockId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|blocks
operator|.
name|containsKey
argument_list|(
name|blockId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retrieveINode (Path path)
specifier|public
name|INode
name|retrieveINode
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inodes
operator|.
name|get
argument_list|(
name|normalize
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|retrieveBlock (Block block, long byteRangeStart)
specifier|public
name|File
name|retrieveBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|long
name|byteRangeStart
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|blocks
operator|.
name|get
argument_list|(
name|block
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|BufferedOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|byteRangeStart
argument_list|,
name|data
operator|.
name|length
operator|-
operator|(
name|int
operator|)
name|byteRangeStart
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|file
return|;
block|}
DECL|method|createTempFile ()
specifier|private
name|File
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3.buffer.dir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create S3 buffer directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"test-"
argument_list|,
literal|".tmp"
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|listSubPaths (Path path)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listSubPaths
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|normalizedPath
init|=
name|normalize
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// This is inefficient but more than adequate for testing purposes.
name|Set
argument_list|<
name|Path
argument_list|>
name|subPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|inodes
operator|.
name|tailMap
argument_list|(
name|normalizedPath
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|normalizedPath
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|subPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subPaths
return|;
block|}
annotation|@
name|Override
DECL|method|listDeepSubPaths (Path path)
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|listDeepSubPaths
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|normalizedPath
init|=
name|normalize
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|pathString
init|=
name|normalizedPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pathString
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|pathString
operator|+=
literal|"/"
expr_stmt|;
block|}
comment|// This is inefficient but more than adequate for testing purposes.
name|Set
argument_list|<
name|Path
argument_list|>
name|subPaths
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|inodes
operator|.
name|tailMap
argument_list|(
name|normalizedPath
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pathString
argument_list|)
condition|)
block|{
name|subPaths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subPaths
return|;
block|}
annotation|@
name|Override
DECL|method|storeINode (Path path, INode inode)
specifier|public
name|void
name|storeINode
parameter_list|(
name|Path
name|path
parameter_list|,
name|INode
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
name|inodes
operator|.
name|put
argument_list|(
name|normalize
argument_list|(
name|path
argument_list|)
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeBlock (Block block, File file)
specifier|public
name|void
name|storeBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|numRead
decl_stmt|;
name|BufferedInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|numRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|blocks
operator|.
name|put
argument_list|(
name|block
operator|.
name|getId
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|normalize (Path path)
specifier|private
name|Path
name|normalize
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|purge ()
specifier|public
name|void
name|purge
parameter_list|()
throws|throws
name|IOException
block|{
name|inodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dump ()
specifier|public
name|void
name|dump
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|INode
argument_list|>
name|entry
range|:
name|inodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|inode
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|inode
operator|.
name|getFileType
argument_list|()
operator|==
name|FileType
operator|.
name|DIRECTORY
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inode
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|inode
operator|.
name|getBlocks
argument_list|()
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inodes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|blocks
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

