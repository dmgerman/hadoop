begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClusterTopology
specifier|public
class|class
name|TestClusterTopology
extends|extends
name|Assert
block|{
DECL|class|NodeElement
specifier|public
specifier|static
class|class
name|NodeElement
implements|implements
name|Node
block|{
DECL|field|location
specifier|private
name|String
name|location
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|parent
specifier|private
name|Node
name|parent
decl_stmt|;
DECL|field|level
specifier|private
name|int
name|level
decl_stmt|;
DECL|method|NodeElement (String name)
specifier|public
name|NodeElement
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNetworkLocation ()
specifier|public
name|String
name|getNetworkLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
annotation|@
name|Override
DECL|method|setNetworkLocation (String location)
specifier|public
name|void
name|setNetworkLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getParent ()
specifier|public
name|Node
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|setParent (Node parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLevel ()
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
annotation|@
name|Override
DECL|method|setLevel (int i)
specifier|public
name|void
name|setLevel
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|/**    * Test the count of nodes with exclude list    */
annotation|@
name|Test
DECL|method|testCountNumNodes ()
specifier|public
name|void
name|testCountNumNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create the topology
name|NetworkTopology
name|cluster
init|=
operator|new
name|NetworkTopology
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|getNewNode
argument_list|(
literal|"node1"
argument_list|,
literal|"/d1/r1"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeElement
name|node2
init|=
name|getNewNode
argument_list|(
literal|"node2"
argument_list|,
literal|"/d1/r2"
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|getNewNode
argument_list|(
literal|"node3"
argument_list|,
literal|"/d1/r3"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeElement
name|node3
init|=
name|getNewNode
argument_list|(
literal|"node4"
argument_list|,
literal|"/d1/r4"
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|add
argument_list|(
name|node3
argument_list|)
expr_stmt|;
comment|// create exclude list
name|List
argument_list|<
name|Node
argument_list|>
name|excludedNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"4 nodes should be available"
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
name|NodeElement
name|deadNode
init|=
name|getNewNode
argument_list|(
literal|"node5"
argument_list|,
literal|"/d1/r2"
argument_list|)
decl_stmt|;
name|excludedNodes
operator|.
name|add
argument_list|(
name|deadNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4 nodes should be available with extra excluded Node"
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
comment|// add one existing node to exclude list
name|excludedNodes
operator|.
name|add
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"excluded nodes with ROOT scope should be considered"
argument_list|,
literal|3
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"excluded nodes without ~ scope should be considered"
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
literal|"~"
operator|+
name|deadNode
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"excluded nodes with rack scope should be considered"
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|deadNode
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
comment|// adding the node in excluded scope to excluded list
name|excludedNodes
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"excluded nodes with ~ scope should be considered"
argument_list|,
literal|2
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
literal|"~"
operator|+
name|deadNode
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
comment|// getting count with non-exist scope.
name|assertEquals
argument_list|(
literal|"No nodes should be considered for non-exist scope"
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|countNumOfAvailableNodes
argument_list|(
literal|"/non-exist"
argument_list|,
name|excludedNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewNode (String name, String rackLocation)
specifier|private
name|NodeElement
name|getNewNode
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|rackLocation
parameter_list|)
block|{
name|NodeElement
name|node
init|=
operator|new
name|NodeElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|node
operator|.
name|setNetworkLocation
argument_list|(
name|rackLocation
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
end_class

end_unit

