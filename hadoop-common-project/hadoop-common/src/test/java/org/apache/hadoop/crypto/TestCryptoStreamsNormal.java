begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test crypto streams using normal stream which does not support the   * additional interfaces that the Hadoop FileSystem streams implement   * (Seekable, PositionedReadable, ByteBufferReadable, HasFileDescriptor,   * CanSetDropBehind, CanSetReadahead, HasEnhancedByteBufferAccess, Syncable,   * CanSetDropBehind)  */
end_comment

begin_class
DECL|class|TestCryptoStreamsNormal
specifier|public
class|class
name|TestCryptoStreamsNormal
extends|extends
name|CryptoStreamsTestBase
block|{
comment|/**    * Data storage.    * {@link #getOutputStream(int, byte[], byte[])} will write to this buffer.    * {@link #getInputStream(int, byte[], byte[])} will read from this buffer.    */
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|bufferLen
specifier|private
name|int
name|bufferLen
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|codec
operator|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
DECL|method|getOutputStream (int bufferSize, byte[] key, byte[] iv)
specifier|protected
name|OutputStream
name|getOutputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|=
name|buf
expr_stmt|;
name|bufferLen
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|=
name|buf
expr_stmt|;
name|bufferLen
operator|=
name|count
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|CryptoOutputStream
argument_list|(
name|out
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream (int bufferSize, byte[] key, byte[] iv)
specifier|protected
name|InputStream
name|getInputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferLen
argument_list|)
decl_stmt|;
return|return
operator|new
name|CryptoInputStream
argument_list|(
name|in
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support Syncable"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSyncable ()
specifier|public
name|void
name|testSyncable
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support PositionedRead"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPositionedRead ()
specifier|public
name|void
name|testPositionedRead
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support ByteBufferPositionedReadable"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPositionedReadWithByteBuffer ()
specifier|public
name|void
name|testPositionedReadWithByteBuffer
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support ReadFully"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support Seek"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support ByteBufferRead"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testByteBufferRead ()
specifier|public
name|void
name|testByteBufferRead
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support ByteBufferPositionedReadable"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testByteBufferPread ()
specifier|public
name|void
name|testByteBufferPread
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support ByteBufferRead, Seek"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCombinedOp ()
specifier|public
name|void
name|testCombinedOp
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support SeekToNewSource"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSeekToNewSource ()
specifier|public
name|void
name|testSeekToNewSource
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"Wrapped stream doesn't support HasEnhancedByteBufferAccess"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testHasEnhancedByteBufferAccess ()
specifier|public
name|void
name|testHasEnhancedByteBufferAccess
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Ignore
argument_list|(
literal|"ByteArrayInputStream does not support unbuffer"
argument_list|)
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testUnbuffer ()
specifier|public
name|void
name|testUnbuffer
parameter_list|()
throws|throws
name|Exception
block|{}
block|}
end_class

end_unit

