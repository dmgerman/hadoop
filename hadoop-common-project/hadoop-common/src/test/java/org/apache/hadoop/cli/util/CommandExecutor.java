begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cli.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|CLITestHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  *  * This class execute commands and captures the output  */
end_comment

begin_class
DECL|class|CommandExecutor
specifier|public
specifier|abstract
class|class
name|CommandExecutor
block|{
DECL|method|getCommandAsArgs (final String cmd, final String masterKey, final String master)
specifier|protected
name|String
index|[]
name|getCommandAsArgs
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|,
specifier|final
name|String
name|masterKey
parameter_list|,
specifier|final
name|String
name|master
parameter_list|)
block|{
name|String
name|regex
init|=
literal|"\'([^\']*)\'|\"([^\"]*)\"|(\\S+)"
decl_stmt|;
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
operator|.
name|matcher
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|arg
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|arg
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|arg
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arg
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|arg
operator|=
name|arg
operator|.
name|replaceAll
argument_list|(
name|masterKey
argument_list|,
name|master
argument_list|)
expr_stmt|;
name|arg
operator|=
name|arg
operator|.
name|replaceAll
argument_list|(
literal|"CLITEST_DATA"
argument_list|,
operator|new
name|File
argument_list|(
name|CLITestHelper
operator|.
name|TEST_CACHE_DATA_DIR
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
argument_list|)
expr_stmt|;
name|arg
operator|=
name|arg
operator|.
name|replaceAll
argument_list|(
literal|"USERNAME"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
return|return
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|executeCommand (final String cmd)
specifier|public
name|Result
name|executeCommand
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|Exception
name|lastException
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|bao
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bao
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bao
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|exitCode
operator|=
name|execute
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|lastException
operator|=
name|e
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Result
argument_list|(
name|bao
operator|.
name|toString
argument_list|()
argument_list|,
name|exitCode
argument_list|,
name|lastException
argument_list|,
name|cmd
argument_list|)
return|;
block|}
DECL|method|execute (String cmd)
specifier|protected
specifier|abstract
name|int
name|execute
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|class|Result
specifier|public
specifier|static
class|class
name|Result
block|{
DECL|field|commandOutput
specifier|final
name|String
name|commandOutput
decl_stmt|;
DECL|field|exitCode
specifier|final
name|int
name|exitCode
decl_stmt|;
DECL|field|exception
specifier|final
name|Exception
name|exception
decl_stmt|;
DECL|field|cmdExecuted
specifier|final
name|String
name|cmdExecuted
decl_stmt|;
DECL|method|Result (String commandOutput, int exitCode, Exception exception, String cmdExecuted)
specifier|public
name|Result
parameter_list|(
name|String
name|commandOutput
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|Exception
name|exception
parameter_list|,
name|String
name|cmdExecuted
parameter_list|)
block|{
name|this
operator|.
name|commandOutput
operator|=
name|commandOutput
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
name|this
operator|.
name|cmdExecuted
operator|=
name|cmdExecuted
expr_stmt|;
block|}
DECL|method|getCommandOutput ()
specifier|public
name|String
name|getCommandOutput
parameter_list|()
block|{
return|return
name|commandOutput
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
DECL|method|getCommand ()
specifier|public
name|String
name|getCommand
parameter_list|()
block|{
return|return
name|cmdExecuted
return|;
block|}
block|}
block|}
end_class

end_unit

