begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestUGIWithSecurityOn
specifier|public
class|class
name|TestUGIWithSecurityOn
block|{
DECL|method|isKdcRunning ()
specifier|public
specifier|static
name|boolean
name|isKdcRunning
parameter_list|()
block|{
name|String
name|startKdc
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"startKdc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startKdc
operator|==
literal|null
operator|||
operator|!
name|startKdc
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Before
DECL|method|testKdcRunning ()
specifier|public
name|void
name|testKdcRunning
parameter_list|()
block|{
comment|//Tests are skipped if KDC is not running
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isKdcRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLogin ()
specifier|public
name|void
name|testLogin
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|nn1keyTabFilepath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"kdc.resource.dir"
argument_list|)
operator|+
literal|"/keytabs/nn1.keytab"
decl_stmt|;
name|String
name|user1keyTabFilepath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"kdc.resource.dir"
argument_list|)
operator|+
literal|"/keytabs/user1.keytab"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugiNn
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"nn1/localhost@EXAMPLE.COM"
argument_list|,
name|nn1keyTabFilepath
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugiDn
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"user1@EXAMPLE.COM"
argument_list|,
name|user1keyTabFilepath
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|ugiNn
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|ugiDn
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
literal|"bogus@EXAMPLE.COM"
argument_list|,
name|nn1keyTabFilepath
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Login should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

