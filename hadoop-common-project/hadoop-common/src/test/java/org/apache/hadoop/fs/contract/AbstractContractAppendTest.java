begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_comment
comment|/**  * Test append -if supported  */
end_comment

begin_class
DECL|class|AbstractContractAppendTest
specifier|public
specifier|abstract
class|class
name|AbstractContractAppendTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractContractAppendTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testPath
specifier|private
name|Path
name|testPath
decl_stmt|;
DECL|field|target
specifier|private
name|Path
name|target
decl_stmt|;
annotation|@
name|Override
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|skipIfUnsupported
argument_list|(
name|SUPPORTS_APPEND
argument_list|)
expr_stmt|;
comment|//delete the test directory
name|testPath
operator|=
name|path
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendToEmptyFile ()
specifier|public
name|void
name|testAppendToEmptyFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|target
argument_list|)
decl_stmt|;
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendNonexistentFile ()
specifier|public
name|void
name|testAppendNonexistentFile
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|FSDataOutputStream
name|out
init|=
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|target
argument_list|)
decl_stmt|;
comment|//got here: trouble
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppendToExistingFile ()
specifier|public
name|void
name|testAppendToExistingFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|original
init|=
name|dataset
argument_list|(
literal|8192
argument_list|,
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appended
init|=
name|dataset
argument_list|(
literal|8192
argument_list|,
literal|'0'
argument_list|,
literal|'9'
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|appended
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|,
name|original
operator|.
name|length
operator|+
name|appended
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|validateFileContent
argument_list|(
name|bytes
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|original
block|,
name|appended
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendMissingTarget ()
specifier|public
name|void
name|testAppendMissingTarget
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|FSDataOutputStream
name|out
init|=
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|target
argument_list|)
decl_stmt|;
comment|//got here: trouble
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expected a failure"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileBeingAppended ()
specifier|public
name|void
name|testRenameFileBeingAppended
parameter_list|()
throws|throws
name|Throwable
block|{
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"original file does not exist"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|256
argument_list|,
literal|'a'
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|getFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|dataset
argument_list|)
expr_stmt|;
name|Path
name|renamed
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
literal|"renamed"
argument_list|)
decl_stmt|;
name|rename
argument_list|(
name|target
argument_list|,
name|renamed
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|listing
init|=
name|ls
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
comment|//expected: the stream goes to the file that was being renamed, not
comment|//the original path
name|assertPathExists
argument_list|(
literal|"renamed destination file does not exist"
argument_list|,
name|renamed
argument_list|)
expr_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"Source file found after rename during append:\n"
operator|+
name|listing
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|renamed
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

