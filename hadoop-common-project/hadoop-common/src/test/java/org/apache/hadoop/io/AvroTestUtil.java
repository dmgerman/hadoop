begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|EncoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectDatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DecoderFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|AvroTestUtil
specifier|public
class|class
name|AvroTestUtil
block|{
DECL|method|testReflect (Object value, String schema)
specifier|public
specifier|static
name|void
name|testReflect
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|testReflect
argument_list|(
name|value
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
DECL|method|testReflect (Object value, Type type, String schema)
specifier|public
specifier|static
name|void
name|testReflect
parameter_list|(
name|Object
name|value
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check that schema matches expected
name|Schema
name|s
init|=
name|ReflectData
operator|.
name|get
argument_list|()
operator|.
name|getSchema
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Schema
operator|.
name|parse
argument_list|(
name|schema
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// check that value is serialized correctly
name|ReflectDatumWriter
argument_list|<
name|Object
argument_list|>
name|writer
init|=
operator|new
name|ReflectDatumWriter
argument_list|<
name|Object
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|EncoderFactory
operator|.
name|get
argument_list|()
operator|.
name|directBinaryEncoder
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ReflectDatumReader
argument_list|<
name|Object
argument_list|>
name|reader
init|=
operator|new
name|ReflectDatumReader
argument_list|<
name|Object
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Object
name|after
init|=
name|reader
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|DecoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryDecoder
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

