begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of permission tests for the {@link FileContext}.  * This test should be used for testing an instance of FileContext  *  that has been initialized to a specific default FileSystem such a  *  LocalFileSystem, HDFS,S3, etc.  *</p>  *<p>  * To test a given {@link FileSystem} implementation create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fc</code>   * {@link FileContext} instance variable.  *   * Since this a junit 4 you can also do a single setup before   * the start of any tests.  * E.g.  *     @BeforeClass   public static void clusterSetupAtBegining()  *     @AfterClass    public static void ClusterShutdownAtEnd()  *</p>  */
end_comment

begin_class
DECL|class|FileContextPermissionBase
specifier|public
specifier|abstract
class|class
name|FileContextPermissionBase
block|{
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|FileSystem
operator|.
name|LOG
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot change log level\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|fileContextTestHelper
specifier|protected
name|FileContextTestHelper
name|fileContextTestHelper
decl_stmt|;
DECL|field|fc
specifier|protected
name|FileContext
name|fc
decl_stmt|;
DECL|method|getFileContextHelper ()
specifier|protected
name|FileContextTestHelper
name|getFileContextHelper
parameter_list|()
block|{
return|return
operator|new
name|FileContextTestHelper
argument_list|()
return|;
block|}
DECL|method|getFileContext ()
specifier|protected
specifier|abstract
name|FileContext
name|getFileContext
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fileContextTestHelper
operator|=
name|getFileContextHelper
argument_list|()
expr_stmt|;
name|fc
operator|=
name|getFileContext
argument_list|()
expr_stmt|;
name|fc
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|.
name|delete
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupFile (FileContext fc, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileContext
name|fc
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fc
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|exists
argument_list|(
name|fc
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePermission ()
specifier|public
name|void
name|testCreatePermission
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
literal|"foo"
decl_stmt|;
name|Path
name|f
init|=
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fc
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|doFilePermissionCheck
argument_list|(
name|FileContext
operator|.
name|FILE_DEFAULT_PERM
operator|.
name|applyUMask
argument_list|(
name|fc
operator|.
name|getUMask
argument_list|()
argument_list|)
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPermission ()
specifier|public
name|void
name|testSetPermission
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
literal|"foo"
decl_stmt|;
name|Path
name|f
init|=
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fc
argument_list|,
name|f
argument_list|)
expr_stmt|;
try|try
block|{
comment|// create files and manipulate them.
name|FsPermission
name|all
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
decl_stmt|;
name|FsPermission
name|none
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
name|fc
operator|.
name|setPermission
argument_list|(
name|f
argument_list|,
name|none
argument_list|)
expr_stmt|;
name|doFilePermissionCheck
argument_list|(
name|none
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setPermission
argument_list|(
name|f
argument_list|,
name|all
argument_list|)
expr_stmt|;
name|doFilePermissionCheck
argument_list|(
name|all
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupFile
argument_list|(
name|fc
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetOwner ()
specifier|public
name|void
name|testSetOwner
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|String
name|filename
init|=
literal|"bar"
decl_stmt|;
name|Path
name|f
init|=
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|fc
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
literal|null
decl_stmt|;
try|try
block|{
name|groups
operator|=
name|getGroups
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|filename
operator|+
literal|": "
operator|+
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|groups
operator|==
literal|null
operator|||
name|groups
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run test: need at least one group.  groups="
operator|+
name|groups
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create files and manipulate them.
try|try
block|{
name|String
name|g0
init|=
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fc
operator|.
name|setOwner
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|g0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|g0
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|groups
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|g1
init|=
name|groups
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|fc
operator|.
name|setOwner
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
name|g1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|g1
argument_list|,
name|fc
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Not testing changing the group since user "
operator|+
literal|"belongs to only one group."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fc
operator|.
name|setOwner
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// okay
block|}
block|}
finally|finally
block|{
name|cleanupFile
argument_list|(
name|fc
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUgi ()
specifier|public
name|void
name|testUgi
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|otherUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"otherUser"
argument_list|)
decl_stmt|;
name|FileContext
name|newFc
init|=
name|otherUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileContext
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileContext
name|newFc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|()
decl_stmt|;
return|return
name|newFc
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"otherUser"
argument_list|,
name|newFc
operator|.
name|getUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getGroups ()
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getGroupsCommand
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|t
init|=
operator|new
name|StringTokenizer
argument_list|(
name|s
argument_list|)
init|;
name|t
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|a
operator|.
name|add
argument_list|(
name|t
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|doFilePermissionCheck (FsPermission expectedPerm, FsPermission actualPerm)
name|void
name|doFilePermissionCheck
parameter_list|(
name|FsPermission
name|expectedPerm
parameter_list|,
name|FsPermission
name|actualPerm
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPerm
operator|.
name|applyUMask
argument_list|(
name|getFileMask
argument_list|()
argument_list|)
argument_list|,
name|actualPerm
argument_list|)
expr_stmt|;
block|}
comment|/*    * Override the method below if the file system being tested masks our    * certain bits for file masks.    */
DECL|field|FILE_MASK_ZERO
specifier|static
specifier|final
name|FsPermission
name|FILE_MASK_ZERO
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
DECL|method|getFileMask ()
name|FsPermission
name|getFileMask
parameter_list|()
block|{
return|return
name|FILE_MASK_ZERO
return|;
block|}
block|}
end_class

end_unit

