begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|UnreliableImplementation
operator|.
name|TypeOfExceptionToFailWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|UnreliableInterface
operator|.
name|UnreliableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFailoverProxy
specifier|public
class|class
name|TestFailoverProxy
block|{
DECL|class|FlipFlopProxyProvider
specifier|public
specifier|static
class|class
name|FlipFlopProxyProvider
implements|implements
name|FailoverProxyProvider
block|{
DECL|field|iface
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|iface
decl_stmt|;
DECL|field|currentlyActive
specifier|private
name|Object
name|currentlyActive
decl_stmt|;
DECL|field|impl1
specifier|private
name|Object
name|impl1
decl_stmt|;
DECL|field|impl2
specifier|private
name|Object
name|impl2
decl_stmt|;
DECL|field|failoversOccurred
specifier|private
name|int
name|failoversOccurred
init|=
literal|0
decl_stmt|;
DECL|method|FlipFlopProxyProvider (Class<?> iface, Object activeImpl, Object standbyImpl)
specifier|public
name|FlipFlopProxyProvider
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|,
name|Object
name|activeImpl
parameter_list|,
name|Object
name|standbyImpl
parameter_list|)
block|{
name|this
operator|.
name|iface
operator|=
name|iface
expr_stmt|;
name|this
operator|.
name|impl1
operator|=
name|activeImpl
expr_stmt|;
name|this
operator|.
name|impl2
operator|=
name|standbyImpl
expr_stmt|;
name|currentlyActive
operator|=
name|impl1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
name|Object
name|getProxy
parameter_list|()
block|{
return|return
name|currentlyActive
return|;
block|}
annotation|@
name|Override
DECL|method|performFailover (Object currentProxy)
specifier|public
specifier|synchronized
name|void
name|performFailover
parameter_list|(
name|Object
name|currentProxy
parameter_list|)
block|{
name|currentlyActive
operator|=
name|impl1
operator|==
name|currentProxy
condition|?
name|impl2
else|:
name|impl1
expr_stmt|;
name|failoversOccurred
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getInterface
parameter_list|()
block|{
return|return
name|iface
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Nothing to do.
block|}
DECL|method|getFailoversOccurred ()
specifier|public
name|int
name|getFailoversOccurred
parameter_list|()
block|{
return|return
name|failoversOccurred
return|;
block|}
block|}
DECL|class|FailOverOnceOnAnyExceptionPolicy
specifier|public
specifier|static
class|class
name|FailOverOnceOnAnyExceptionPolicy
implements|implements
name|RetryPolicy
block|{
annotation|@
name|Override
DECL|method|shouldRetry (Exception e, int retries, int failovers, boolean isMethodIdempotent)
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|isMethodIdempotent
parameter_list|)
block|{
return|return
name|failovers
operator|<
literal|1
condition|?
name|RetryAction
operator|.
name|FAILOVER_AND_RETRY
else|:
name|RetryAction
operator|.
name|FAIL
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSuccedsOnceThenFailOver ()
specifier|public
name|void
name|testSuccedsOnceThenFailOver
parameter_list|()
throws|throws
name|UnreliableException
throws|,
name|IOException
throws|,
name|StandbyException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FailOverOnceOnAnyExceptionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not have succeeded more than twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testSucceedsTenTimesThenFailOver ()
specifier|public
name|void
name|testSucceedsTenTimesThenFailOver
parameter_list|()
throws|throws
name|UnreliableException
throws|,
name|IOException
throws|,
name|StandbyException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|FailOverOnceOnAnyExceptionPolicy
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsTenTimesThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|unreliable
operator|.
name|succeedsTenTimesThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNeverFailOver ()
specifier|public
name|void
name|testNeverFailOver
parameter_list|()
throws|throws
name|UnreliableException
throws|,
name|IOException
throws|,
name|StandbyException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|)
argument_list|)
argument_list|,
name|RetryPolicies
operator|.
name|TRY_ONCE_DONT_FAIL
argument_list|)
decl_stmt|;
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not have succeeded twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailoverOnStandbyException ()
specifier|public
name|void
name|testFailoverOnStandbyException
parameter_list|()
throws|throws
name|UnreliableException
throws|,
name|IOException
throws|,
name|StandbyException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|)
argument_list|)
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should not have succeeded twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnreliableException
name|e
parameter_list|)
block|{
comment|// Make sure there was no failover on normal exception.
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unreliable
operator|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|STANDBY_EXCEPTION
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|UNRELIABLE_EXCEPTION
argument_list|)
argument_list|)
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we fail over since the first implementation threw a StandbyException
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverOnNetworkExceptionIdempotentOperation ()
specifier|public
name|void
name|testFailoverOnNetworkExceptionIdempotentOperation
parameter_list|()
throws|throws
name|UnreliableException
throws|,
name|IOException
throws|,
name|StandbyException
block|{
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|IO_EXCEPTION
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|UNRELIABLE_EXCEPTION
argument_list|)
argument_list|)
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have succeeded twice"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Make sure we *don't* fail over since the first implementation threw an
comment|// IOException and this method is not idempotent
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"impl1"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningStringIdempotent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we fail over since the first implementation threw an
comment|// IOException and this method is idempotent.
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|unreliable
operator|.
name|succeedsOnceThenFailsReturningStringIdempotent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|SynchronizedUnreliableImplementation
specifier|private
specifier|static
class|class
name|SynchronizedUnreliableImplementation
extends|extends
name|UnreliableImplementation
block|{
DECL|field|methodLatch
specifier|private
name|CountDownLatch
name|methodLatch
decl_stmt|;
DECL|method|SynchronizedUnreliableImplementation (String identifier, TypeOfExceptionToFailWith exceptionToFailWith, int threadCount)
specifier|public
name|SynchronizedUnreliableImplementation
parameter_list|(
name|String
name|identifier
parameter_list|,
name|TypeOfExceptionToFailWith
name|exceptionToFailWith
parameter_list|,
name|int
name|threadCount
parameter_list|)
block|{
name|super
argument_list|(
name|identifier
argument_list|,
name|exceptionToFailWith
argument_list|)
expr_stmt|;
name|methodLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failsIfIdentifierDoesntMatch (String identifier)
specifier|public
name|String
name|failsIfIdentifierDoesntMatch
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|UnreliableException
throws|,
name|StandbyException
throws|,
name|IOException
block|{
comment|// Wait until all threads are trying to invoke this method
name|methodLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|methodLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|failsIfIdentifierDoesntMatch
argument_list|(
name|identifier
argument_list|)
return|;
block|}
block|}
DECL|class|ConcurrentMethodThread
specifier|private
specifier|static
class|class
name|ConcurrentMethodThread
extends|extends
name|Thread
block|{
DECL|field|unreliable
specifier|private
name|UnreliableInterface
name|unreliable
decl_stmt|;
DECL|field|result
specifier|public
name|String
name|result
decl_stmt|;
DECL|method|ConcurrentMethodThread (UnreliableInterface unreliable)
specifier|public
name|ConcurrentMethodThread
parameter_list|(
name|UnreliableInterface
name|unreliable
parameter_list|)
block|{
name|this
operator|.
name|unreliable
operator|=
name|unreliable
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|result
operator|=
name|unreliable
operator|.
name|failsIfIdentifierDoesntMatch
argument_list|(
literal|"impl2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Test that concurrent failed method invocations only result in a single    * failover.    */
annotation|@
name|Test
DECL|method|testConcurrentMethodFailures ()
specifier|public
name|void
name|testConcurrentMethodFailures
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|FlipFlopProxyProvider
name|proxyProvider
init|=
operator|new
name|FlipFlopProxyProvider
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
operator|new
name|SynchronizedUnreliableImplementation
argument_list|(
literal|"impl1"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|STANDBY_EXCEPTION
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|UnreliableImplementation
argument_list|(
literal|"impl2"
argument_list|,
name|TypeOfExceptionToFailWith
operator|.
name|STANDBY_EXCEPTION
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|UnreliableInterface
name|unreliable
init|=
operator|(
name|UnreliableInterface
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|UnreliableInterface
operator|.
name|class
argument_list|,
name|proxyProvider
argument_list|,
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|ConcurrentMethodThread
name|t1
init|=
operator|new
name|ConcurrentMethodThread
argument_list|(
name|unreliable
argument_list|)
decl_stmt|;
name|ConcurrentMethodThread
name|t2
init|=
operator|new
name|ConcurrentMethodThread
argument_list|(
name|unreliable
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|t1
operator|.
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"impl2"
argument_list|,
name|t2
operator|.
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proxyProvider
operator|.
name|getFailoversOccurred
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

