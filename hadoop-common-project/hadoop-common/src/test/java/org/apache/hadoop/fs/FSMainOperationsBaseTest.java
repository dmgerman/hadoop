begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of tests for the {@link FileSystem}.  * This test should be used for testing an instance of FileSystem  *  that has been initialized to a specific default FileSystem such a  *  LocalFileSystem, HDFS,S3, etc.  *</p>  *<p>  * To test a given {@link FileSystem} implementation create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fSys</code>   * {@link FileSystem} instance variable.  *   * Since this a junit 4 you can also do a single setup before   * the start of any tests.  * E.g.  *     @BeforeClass   public static void clusterSetupAtBegining()  *     @AfterClass    public static void ClusterShutdownAtEnd()  *</p>  */
end_comment

begin_class
DECL|class|FSMainOperationsBaseTest
specifier|public
specifier|abstract
class|class
name|FSMainOperationsBaseTest
block|{
DECL|field|TEST_DIR_AAA2
specifier|private
specifier|static
name|String
name|TEST_DIR_AAA2
init|=
literal|"test/hadoop2/aaa"
decl_stmt|;
DECL|field|TEST_DIR_AAA
specifier|private
specifier|static
name|String
name|TEST_DIR_AAA
init|=
literal|"test/hadoop/aaa"
decl_stmt|;
DECL|field|TEST_DIR_AXA
specifier|private
specifier|static
name|String
name|TEST_DIR_AXA
init|=
literal|"test/hadoop/axa"
decl_stmt|;
DECL|field|TEST_DIR_AXX
specifier|private
specifier|static
name|String
name|TEST_DIR_AXX
init|=
literal|"test/hadoop/axx"
decl_stmt|;
DECL|field|numBlocks
specifier|private
specifier|static
name|int
name|numBlocks
init|=
literal|2
decl_stmt|;
DECL|field|fSys
specifier|protected
specifier|static
name|FileSystem
name|fSys
decl_stmt|;
DECL|field|DEFAULT_FILTER
specifier|final
specifier|private
specifier|static
name|PathFilter
name|DEFAULT_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|//A test filter with returns any path containing a "b"
DECL|field|TEST_X_FILTER
specifier|final
specifier|private
specifier|static
name|PathFilter
name|TEST_X_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"x"
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"X"
argument_list|)
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
DECL|field|data
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|data
init|=
name|getFileData
argument_list|(
name|numBlocks
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|getAbsoluteTestRootPath
argument_list|(
name|fSys
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultWorkingDirectory ()
specifier|protected
name|Path
name|getDefaultWorkingDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fSys
operator|.
name|getUri
argument_list|()
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|renameSupported ()
specifier|protected
name|boolean
name|renameSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|unwrapException (IOException e)
specifier|protected
name|IOException
name|unwrapException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
annotation|@
name|Test
DECL|method|testFsStatus ()
specifier|public
name|void
name|testFsStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|FsStatus
name|fsStatus
init|=
name|fSys
operator|.
name|getStatus
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fsStatus
argument_list|)
expr_stmt|;
comment|//used, free and capacity are non-negative longs
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getUsed
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getRemaining
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fsStatus
operator|.
name|getCapacity
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWorkingDirectory ()
specifier|public
name|void
name|testWorkingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First we cd to our test root
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|getAbsoluteTestRootPath
argument_list|(
name|fSys
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// cd using a relative path
comment|// Go back to our test root
name|workDir
operator|=
operator|new
name|Path
argument_list|(
name|getAbsoluteTestRootPath
argument_list|(
name|fSys
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|workDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|relativeDir
init|=
operator|new
name|Path
argument_list|(
literal|"existingDir1"
argument_list|)
decl_stmt|;
name|Path
name|absoluteDir
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"existingDir1"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|relativeDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// cd using a absolute path
name|absoluteDir
operator|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/existingDir2"
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now open a file relative to the wd we just set above.
name|Path
name|absolutePath
init|=
operator|new
name|Path
argument_list|(
name|absoluteDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
name|absolutePath
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now mkdir relative to the dir we cd'ed to
name|fSys
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"newDir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isDir
argument_list|(
name|fSys
argument_list|,
operator|new
name|Path
argument_list|(
name|absoluteDir
argument_list|,
literal|"newDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * We cannot test this because FileSystem has never checked for      * existence of working dir - fixing  this would break compatibility,      *      absoluteDir = getTestRootPath(fSys, "nonexistingPath");     try {       fSys.setWorkingDirectory(absoluteDir);       Assert.fail("cd to non existing dir should have failed");     } catch (Exception e) {       // Exception as expected     }     */
block|}
comment|// Try a URI
annotation|@
name|Test
DECL|method|testWDAbsolute ()
specifier|public
name|void
name|testWDAbsolute
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|absoluteDir
init|=
operator|new
name|Path
argument_list|(
name|fSys
operator|.
name|getUri
argument_list|()
operator|+
literal|"/test/existingDir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setWorkingDirectory
argument_list|(
name|absoluteDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteDir
argument_list|,
name|fSys
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirs ()
specifier|public
name|void
name|testMkdirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|parentDir
init|=
name|testDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fSys
argument_list|,
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|grandparentDir
init|=
name|parentDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isFile
argument_list|(
name|fSys
argument_list|,
name|grandparentDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirsFailsForSubdirectoryOfExistingFile ()
specifier|public
name|void
name|testMkdirsFailsForSubdirectoryOfExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testSubDir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file/subdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|testSubDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testSubDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|testDeepSubDir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file/deep/sub/dir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|testDeepSubDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDeepSubDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetFileStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testGetFileStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testListStatusThrowsExceptionForNonExistentFile ()
specifier|public
name|void
name|testListStatusThrowsExceptionForNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// TODO: update after fixing HADOOP-7352
annotation|@
name|Test
DECL|method|testListStatusThrowsExceptionForUnreadableDir ()
specifier|public
name|void
name|testListStatusThrowsExceptionForUnreadableDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testRootDir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|Path
name|obscuredDir
init|=
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|Path
name|subDir
init|=
operator|new
name|Path
argument_list|(
name|obscuredDir
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
comment|//so foo is non-empty
name|fSys
operator|.
name|mkdirs
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|setPermission
argument_list|(
name|obscuredDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//no access
try|try
block|{
name|fSys
operator|.
name|listStatus
argument_list|(
name|obscuredDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
comment|// make sure the test directory can be deleted
name|fSys
operator|.
name|setPermission
argument_list|(
name|obscuredDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
comment|//default
block|}
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/a"
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/b"
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/c/1"
argument_list|)
block|, }
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// test listStatus that returns an array
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/a"
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/b"
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/c"
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusFilterWithNoMatches ()
specifier|public
name|void
name|testListStatusFilterWithNoMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// listStatus with filters returns empty correctly
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|TEST_X_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusFilterWithSomeMatches ()
specifier|public
name|void
name|testListStatusFilterWithSomeMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// should return 2 paths ("/test/hadoop/axa" and "/test/hadoop/axx")
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|listStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
argument_list|,
name|TEST_X_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusNonExistentFile ()
specifier|public
name|void
name|testGlobStatusNonExistentFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoopfsdf"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoopfsdf/?"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|paths
operator|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoopfsdf/xyz*/?"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusWithNoMatchesInPath ()
specifier|public
name|void
name|testGlobStatusWithNoMatchesInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// should return nothing
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/?"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusSomeMatchesInDirectories ()
specifier|public
name|void
name|testGlobStatusSomeMatchesInDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Should return two items ("/test/hadoop" and "/test/hadoop2")
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop2"
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusWithMultipleWildCardMatches ()
specifier|public
name|void
name|testGlobStatusWithMultipleWildCardMatches
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Should return all 4 items ("/test/hadoop/aaa", "/test/hadoop/axa"
comment|//"/test/hadoop/axx", and "/test/hadoop2/axx")
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop*/*"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusWithMultipleMatchesOfSingleChar ()
specifier|public
name|void
name|testGlobStatusWithMultipleMatchesOfSingleChar
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA2
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Should return only 2 items ("/test/hadoop/axa", "/test/hadoop/axx")
name|FileStatus
index|[]
name|paths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/ax?"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|paths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithEmptyPathResults ()
specifier|public
name|void
name|testGlobStatusFilterWithEmptyPathResults
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return an empty set
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/?"
argument_list|)
argument_list|,
name|DEFAULT_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithSomePathMatchesAndTrivialFilter ()
specifier|public
name|void
name|testGlobStatusFilterWithSomePathMatchesAndTrivialFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return all three (aaa, axa, axx)
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/*"
argument_list|)
argument_list|,
name|DEFAULT_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithMultipleWildCardMatchesAndTrivialFilter ()
specifier|public
name|void
name|testGlobStatusFilterWithMultipleWildCardMatchesAndTrivialFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return all three (aaa, axa, axx)
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/a??"
argument_list|)
argument_list|,
name|DEFAULT_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithMultiplePathMatchesAndNonTrivialFilter ()
specifier|public
name|void
name|testGlobStatusFilterWithMultiplePathMatchesAndNonTrivialFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return two (axa, axx)
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/*"
argument_list|)
argument_list|,
name|TEST_X_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithNoMatchingPathsAndNonTrivialFilter ()
specifier|public
name|void
name|testGlobStatusFilterWithNoMatchingPathsAndNonTrivialFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return an empty set
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/?"
argument_list|)
argument_list|,
name|TEST_X_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobStatusFilterWithMultiplePathWildcardsAndNonTrivialFilter ()
specifier|public
name|void
name|testGlobStatusFilterWithMultiplePathWildcardsAndNonTrivialFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
index|[]
name|testDirs
init|=
block|{
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AAA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
block|, }
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fSys
argument_list|,
name|testDirs
index|[
literal|0
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|testDirs
control|)
block|{
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This should return two (axa, axx)
name|FileStatus
index|[]
name|filteredPaths
init|=
name|fSys
operator|.
name|globStatus
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/a??"
argument_list|)
argument_list|,
name|TEST_X_FILTER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|filteredPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXA
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsPath
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|TEST_DIR_AXX
argument_list|)
argument_list|,
name|filteredPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteReadAndDeleteEmptyFile ()
specifier|public
name|void
name|testWriteReadAndDeleteEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteReadAndDeleteHalfABlock ()
specifier|public
name|void
name|testWriteReadAndDeleteHalfABlock
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getDefaultBlockSize
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteReadAndDeleteOneBlock ()
specifier|public
name|void
name|testWriteReadAndDeleteOneBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteReadAndDeleteOneAndAHalfBlocks ()
specifier|public
name|void
name|testWriteReadAndDeleteOneAndAHalfBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|blockSize
init|=
name|getDefaultBlockSize
argument_list|()
decl_stmt|;
name|writeReadAndDelete
argument_list|(
name|blockSize
operator|+
operator|(
name|blockSize
operator|/
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteReadAndDeleteTwoBlocks ()
specifier|public
name|void
name|testWriteReadAndDeleteTwoBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|writeReadAndDelete
argument_list|(
name|getDefaultBlockSize
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|writeReadAndDelete (int len)
specifier|protected
name|void
name|writeReadAndDelete
parameter_list|(
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fSys
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|len
argument_list|,
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fSys
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Position "
operator|+
name|i
argument_list|,
name|data
index|[
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"No longer exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverwrite ()
specifier|public
name|void
name|testOverwrite
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
name|FSDataOutputStream
name|out
init|=
name|fSys
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteInNonExistentDirectory ()
specifier|public
name|void
name|testWriteInNonExistentDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Parent doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Length"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|fSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Parent exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonExistentFile ()
specifier|public
name|void
name|testDeleteNonExistentFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"No deletion"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteRecursively ()
specifier|public
name|void
name|testDeleteRecursively
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|Path
name|subdir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/subdir"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Dir exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Subdir exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|fSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw IOException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File still exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Dir still exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Subdir still exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Dir doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Subdir doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteEmptyDirectory ()
specifier|public
name|void
name|testDeleteEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Dir exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Deleted"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Dir doesn't exist"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameNonExistentPath ()
specifier|public
name|void
name|testRenameNonExistentPath
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/nonExistent"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newpath"
argument_list|)
decl_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Log
operator|.
name|info
argument_list|(
literal|"XXX"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileToNonExistentDirectory ()
specifier|public
name|void
name|testRenameFileToNonExistentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/nonExistent/newfile"
argument_list|)
decl_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileToDestinationWithParentFile ()
specifier|public
name|void
name|testRenameFileToDestinationWithParentFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/parentFile/newfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testRenameFileToExistingParent ()
specifier|public
name|void
name|testRenameFileToExistingParent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newfile"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileToItself ()
specifier|public
name|void
name|testRenameFileToItself
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Renamed file to itself"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
comment|// Also fails with overwrite
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Renamed file to itself"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// worked
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameFileAsExistingFile ()
specifier|public
name|void
name|testRenameFileAsExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/existingFile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// Fails without overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
comment|// Succeeds with overwrite option
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFileAsExistingDirectory ()
specifier|public
name|void
name|testRenameFileAsExistingDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/existingDir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// Fails without overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// File cannot be renamed as directory
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryToItself ()
specifier|public
name|void
name|testRenameDirectoryToItself
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Renamed directory to itself"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
comment|// Also fails with overwrite
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Renamed directory to itself"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// worked
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryToNonExistentParent ()
specifier|public
name|void
name|testRenameDirectoryToNonExistentParent
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/nonExistent/newdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryAsNonExistentDirectory ()
specifier|public
name|void
name|testRenameDirectoryAsNonExistentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRenameDirectoryAsNonExistentDirectory
argument_list|(
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
name|doTestRenameDirectoryAsNonExistentDirectory
argument_list|(
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestRenameDirectoryAsNonExistentDirectory (Rename... options)
specifier|private
name|void
name|doTestRenameDirectoryAsNonExistentDirectory
parameter_list|(
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Nested file1 exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Nested file2 exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed nested file1 exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed nested exists"
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir/subdir/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryAsEmptyDirectory ()
specifier|public
name|void
name|testRenameDirectoryAsEmptyDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// Fails without overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected (cannot over-write non-empty destination)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
comment|// Succeeds with the overwrite option
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryAsNonEmptyDirectory ()
specifier|public
name|void
name|testRenameDirectoryAsNonEmptyDirectory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/file1"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir/subdir/file2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newdir/file1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fails without overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected (cannot over-write non-empty destination)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|unwrapException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|FileAlreadyExistsException
argument_list|)
expr_stmt|;
block|}
comment|// Fails even with the overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Expected (cannot over-write non-empty destination)
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameDirectoryAsFile ()
specifier|public
name|void
name|testRenameDirectoryAsFile
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|renameSupported
argument_list|()
condition|)
return|return;
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/dir"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|Path
name|dst
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/new/newfile"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|dst
argument_list|)
expr_stmt|;
comment|// Fails without overwrite option
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
comment|// Directory cannot be renamed as existing file
try|try
block|{
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Rename
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception was not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testInputStreamClosedTwice ()
specifier|public
name|void
name|testInputStreamClosedTwice
parameter_list|()
throws|throws
name|IOException
block|{
comment|//HADOOP-4760 according to Closeable#close() closing already-closed
comment|//streams should have no effect.
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fSys
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputStreamClosedTwice ()
specifier|public
name|void
name|testOutputStreamClosedTwice
parameter_list|()
throws|throws
name|IOException
block|{
comment|//HADOOP-4760 according to Closeable#close() closing already-closed
comment|//streams should have no effect.
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fSys
operator|.
name|create
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChar
argument_list|(
literal|'H'
argument_list|)
expr_stmt|;
comment|//write some data
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWrappedInputStream ()
specifier|public
name|void
name|testGetWrappedInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
literal|"test/hadoop/file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
name|fSys
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|in
operator|.
name|getWrappedStream
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCopyToLocalWithUseRawLocalFileSystemOption ()
specifier|public
name|void
name|testCopyToLocalWithUseRawLocalFileSystemOption
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fSys
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|Path
name|fileToFS
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"fs.txt"
argument_list|)
decl_stmt|;
name|Path
name|fileToLFS
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test.txt"
argument_list|)
decl_stmt|;
name|Path
name|crcFileAtLFS
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|".test.txt.crc"
argument_list|)
decl_stmt|;
name|fSys
operator|.
name|initialize
argument_list|(
operator|new
name|URI
argument_list|(
literal|"file:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fSys
argument_list|,
name|fileToFS
argument_list|)
expr_stmt|;
if|if
condition|(
name|fSys
operator|.
name|exists
argument_list|(
name|crcFileAtLFS
argument_list|)
condition|)
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"CRC files not deleted"
argument_list|,
name|fSys
operator|.
name|delete
argument_list|(
name|crcFileAtLFS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fSys
operator|.
name|copyToLocalFile
argument_list|(
literal|false
argument_list|,
name|fileToFS
argument_list|,
name|fileToLFS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"CRC files are created"
argument_list|,
name|fSys
operator|.
name|exists
argument_list|(
name|crcFileAtLFS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFile (FileSystem fs, Path name)
specifier|private
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"42\n"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFile (Path path)
specifier|protected
name|void
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fSys
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|rename (Path src, Path dst, boolean renameShouldSucceed, boolean srcExists, boolean dstExists, Rename... options)
specifier|private
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|renameShouldSucceed
parameter_list|,
name|boolean
name|srcExists
parameter_list|,
name|boolean
name|dstExists
parameter_list|,
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|fSys
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|renameShouldSucceed
condition|)
name|Assert
operator|.
name|fail
argument_list|(
literal|"rename should have thrown exception"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Source exists"
argument_list|,
name|srcExists
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Destination exists"
argument_list|,
name|dstExists
argument_list|,
name|exists
argument_list|(
name|fSys
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|containsPath (Path path, FileStatus[] filteredPaths)
specifier|private
name|boolean
name|containsPath
parameter_list|(
name|Path
name|path
parameter_list|,
name|FileStatus
index|[]
name|filteredPaths
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getTestRootPath
argument_list|(
name|fSys
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|filteredPaths
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

