begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestSampleQuantiles
specifier|public
class|class
name|TestSampleQuantiles
block|{
DECL|field|quantiles
specifier|static
specifier|final
name|Quantile
index|[]
name|quantiles
init|=
block|{
operator|new
name|Quantile
argument_list|(
literal|0.50
argument_list|,
literal|0.050
argument_list|)
block|,
operator|new
name|Quantile
argument_list|(
literal|0.75
argument_list|,
literal|0.025
argument_list|)
block|,
operator|new
name|Quantile
argument_list|(
literal|0.90
argument_list|,
literal|0.010
argument_list|)
block|,
operator|new
name|Quantile
argument_list|(
literal|0.95
argument_list|,
literal|0.005
argument_list|)
block|,
operator|new
name|Quantile
argument_list|(
literal|0.99
argument_list|,
literal|0.001
argument_list|)
block|}
decl_stmt|;
DECL|field|estimator
name|SampleQuantiles
name|estimator
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|estimator
operator|=
operator|new
name|SampleQuantiles
argument_list|(
name|quantiles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that the counts of the number of items in the window and sample are    * incremented correctly as items are added.    */
annotation|@
name|Test
DECL|method|testCount ()
specifier|public
name|void
name|testCount
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Counts start off zero
name|assertThat
argument_list|(
name|estimator
operator|.
name|getCount
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|getSampleCount
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
comment|// Snapshot should be null if there are no entries.
name|assertThat
argument_list|(
name|estimator
operator|.
name|snapshot
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
comment|// Count increment correctly by 1
name|estimator
operator|.
name|insert
argument_list|(
literal|1337
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|getCount
argument_list|()
argument_list|)
operator|.
name|isOne
argument_list|()
expr_stmt|;
name|estimator
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|getSampleCount
argument_list|()
argument_list|)
operator|.
name|isOne
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"50.00 %ile +/- 5.00%: 1337\n"
operator|+
literal|"75.00 %ile +/- 2.50%: 1337\n"
operator|+
literal|"90.00 %ile +/- 1.00%: 1337\n"
operator|+
literal|"95.00 %ile +/- 0.50%: 1337\n"
operator|+
literal|"99.00 %ile +/- 0.10%: 1337"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check that counts and quantile estimates are correctly reset after a call    * to {@link SampleQuantiles#clear()}.    */
annotation|@
name|Test
DECL|method|testClear ()
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|estimator
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|estimator
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|getCount
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|getSampleCount
argument_list|()
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimator
operator|.
name|snapshot
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
comment|/**    * Correctness test that checks that absolute error of the estimate is within    * specified error bounds for some randomly permuted streams of items.    */
annotation|@
name|Test
DECL|method|testQuantileError ()
specifier|public
name|void
name|testQuantileError
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|100000
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0xDEADDEAD
argument_list|)
decl_stmt|;
name|Long
index|[]
name|values
init|=
operator|new
name|Long
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
call|(
name|long
call|)
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Do 10 shuffle/insert/check cycles
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting run "
operator|+
name|i
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|estimator
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|estimator
operator|.
name|insert
argument_list|(
name|values
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Quantile
argument_list|,
name|Long
argument_list|>
name|snapshot
decl_stmt|;
name|snapshot
operator|=
name|estimator
operator|.
name|snapshot
argument_list|()
expr_stmt|;
for|for
control|(
name|Quantile
name|q
range|:
name|quantiles
control|)
block|{
name|long
name|actual
init|=
call|(
name|long
call|)
argument_list|(
name|q
operator|.
name|quantile
operator|*
name|count
argument_list|)
decl_stmt|;
name|long
name|error
init|=
call|(
name|long
call|)
argument_list|(
name|q
operator|.
name|error
operator|*
name|count
argument_list|)
decl_stmt|;
name|long
name|estimate
init|=
name|snapshot
operator|.
name|get
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected %d with error %d, estimated %d"
argument_list|,
name|actual
argument_list|,
name|error
argument_list|,
name|estimate
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|estimate
operator|<=
name|actual
operator|+
name|error
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|estimate
operator|>=
name|actual
operator|-
name|error
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

