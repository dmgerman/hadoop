begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ByteBufferReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HasEnhancedByteBufferAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ReadOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Syncable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CryptoStreamsTestBase
specifier|public
specifier|abstract
class|class
name|CryptoStreamsTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CryptoStreamsTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|codec
specifier|protected
specifier|static
name|CryptoCodec
name|codec
decl_stmt|;
DECL|field|key
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|key
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|}
decl_stmt|;
DECL|field|iv
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|iv
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|}
decl_stmt|;
DECL|field|count
specifier|protected
specifier|static
specifier|final
name|int
name|count
init|=
literal|10000
decl_stmt|;
DECL|field|defaultBufferSize
specifier|protected
specifier|static
name|int
name|defaultBufferSize
init|=
literal|8192
decl_stmt|;
DECL|field|smallBufferSize
specifier|protected
specifier|static
name|int
name|smallBufferSize
init|=
literal|1024
decl_stmt|;
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|dataLen
specifier|private
name|int
name|dataLen
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Generate data
specifier|final
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|dataBuf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|final
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|dataBuf
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|dataBuf
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
name|data
operator|=
name|dataBuf
operator|.
name|getData
argument_list|()
expr_stmt|;
name|dataLen
operator|=
name|dataBuf
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
DECL|method|writeData (OutputStream out)
specifier|protected
name|void
name|writeData
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getDataLen ()
specifier|protected
name|int
name|getDataLen
parameter_list|()
block|{
return|return
name|dataLen
return|;
block|}
DECL|method|readAll (InputStream in, byte[] b, int off, int len)
specifier|private
name|int
name|readAll
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|total
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|total
operator|>=
name|len
condition|)
block|{
break|break;
block|}
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
operator|+
name|total
argument_list|,
name|len
operator|-
name|total
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
DECL|method|getOutputStream (int bufferSize)
specifier|protected
name|OutputStream
name|getOutputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOutputStream
argument_list|(
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
DECL|method|getOutputStream (int bufferSize, byte[] key, byte[] iv)
specifier|protected
specifier|abstract
name|OutputStream
name|getOutputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getInputStream (int bufferSize)
specifier|protected
name|InputStream
name|getInputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|(
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
return|;
block|}
DECL|method|getInputStream (int bufferSize, byte[] key, byte[] iv)
specifier|protected
specifier|abstract
name|InputStream
name|getInputStream
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Test crypto reading with different buffer size. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Default buffer size
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|readCheck
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Small buffer size
name|in
operator|=
name|getInputStream
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
name|readCheck
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readCheck (InputStream in)
specifier|private
name|void
name|readCheck
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|int
name|n
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLen
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|result
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// EOF
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test crypto writing with different buffer size. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testWrite ()
specifier|public
name|void
name|testWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default buffer size
name|writeCheck
argument_list|(
name|defaultBufferSize
argument_list|)
expr_stmt|;
comment|// Small buffer size
name|writeCheck
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCheck (int bufferSize)
specifier|private
name|void
name|writeCheck
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|bufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|FSDataOutputStream
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|FSDataOutputStream
operator|)
name|out
operator|)
operator|.
name|getPos
argument_list|()
argument_list|,
name|getDataLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test crypto with different IV. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCryptoIV ()
specifier|public
name|void
name|testCryptoIV
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|iv1
init|=
name|iv
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Counter base: Long.MAX_VALUE
name|setCounterBaseForIV
argument_list|(
name|iv1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|cryptoCheck
argument_list|(
name|iv1
argument_list|)
expr_stmt|;
comment|// Counter base: Long.MAX_VALUE - 1
name|setCounterBaseForIV
argument_list|(
name|iv1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cryptoCheck
argument_list|(
name|iv1
argument_list|)
expr_stmt|;
comment|// Counter base: Integer.MAX_VALUE
name|setCounterBaseForIV
argument_list|(
name|iv1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|cryptoCheck
argument_list|(
name|iv1
argument_list|)
expr_stmt|;
comment|// Counter base: 0
name|setCounterBaseForIV
argument_list|(
name|iv1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cryptoCheck
argument_list|(
name|iv1
argument_list|)
expr_stmt|;
comment|// Counter base: -1
name|setCounterBaseForIV
argument_list|(
name|iv1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cryptoCheck
argument_list|(
name|iv1
argument_list|)
expr_stmt|;
block|}
DECL|method|cryptoCheck (byte[] iv)
specifier|private
name|void
name|cryptoCheck
parameter_list|(
name|byte
index|[]
name|iv
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
decl_stmt|;
name|readCheck
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setCounterBaseForIV (byte[] iv, long counterBase)
specifier|private
name|void
name|setCounterBaseForIV
parameter_list|(
name|byte
index|[]
name|iv
parameter_list|,
name|long
name|counterBase
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|iv
argument_list|)
decl_stmt|;
name|buf
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|BIG_ENDIAN
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|iv
operator|.
name|length
operator|-
literal|8
argument_list|,
name|counterBase
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test hflush/hsync of crypto output stream, and with different buffer size.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSyncable ()
specifier|public
name|void
name|testSyncable
parameter_list|()
throws|throws
name|IOException
block|{
name|syncableCheck
argument_list|()
expr_stmt|;
block|}
DECL|method|syncableCheck ()
specifier|private
name|void
name|syncableCheck
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|smallBufferSize
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|bytesWritten
init|=
name|dataLen
operator|/
literal|3
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|bytesWritten
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Syncable
operator|)
name|out
operator|)
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|in
argument_list|,
name|bytesWritten
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|bytesWritten
argument_list|,
name|dataLen
operator|-
name|bytesWritten
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Syncable
operator|)
name|out
operator|)
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|in
operator|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|,
name|dataLen
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verify (InputStream in, int bytesToVerify, byte[] expectedBytes)
specifier|private
name|void
name|verify
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|bytesToVerify
parameter_list|,
name|byte
index|[]
name|expectedBytes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|readBuf
init|=
operator|new
name|byte
index|[
name|bytesToVerify
index|]
decl_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readBuf
argument_list|,
literal|0
argument_list|,
name|bytesToVerify
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesToVerify
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedBytes
index|[
name|i
index|]
argument_list|,
name|readBuf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readAll (InputStream in, long pos, byte[] b, int off, int len)
specifier|private
name|int
name|readAll
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|total
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|total
operator|>=
name|len
condition|)
block|{
break|break;
block|}
name|n
operator|=
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|pos
operator|+
name|total
argument_list|,
name|b
argument_list|,
name|off
operator|+
name|total
argument_list|,
name|len
operator|-
name|total
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/** Test positioned read. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testPositionedRead ()
specifier|public
name|void
name|testPositionedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
comment|// Pos: 1/3 dataLen
name|positionedReadCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
expr_stmt|;
comment|// Pos: 1/2 dataLen
name|positionedReadCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|2
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|positionedReadCheck (InputStream in, int pos)
specifier|private
name|void
name|positionedReadCheck
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|int
name|n
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|pos
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLen
argument_list|,
name|n
operator|+
name|pos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
comment|/** Test read fully */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testReadFully ()
specifier|public
name|void
name|testReadFully
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len1
init|=
name|dataLen
operator|/
literal|4
decl_stmt|;
comment|// Read len1 bytes
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|len1
index|]
decl_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|len1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Pos: 1/3 dataLen
name|readFullyCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
expr_stmt|;
comment|// Read len1 bytes
name|readData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|len1
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Pos: 1/2 dataLen
name|readFullyCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Read len1 bytes
name|readData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|2
operator|*
name|len1
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readFullyCheck (InputStream in, int pos)
specifier|private
name|void
name|readFullyCheck
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
operator|-
name|pos
index|]
decl_stmt|;
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|pos
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|dataLen
operator|-
name|pos
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|dataLen
operator|-
name|pos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|result
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|byte
index|[
name|dataLen
index|]
expr_stmt|;
comment|// Exceeds maximum length
try|try
block|{
operator|(
operator|(
name|PositionedReadable
operator|)
name|in
operator|)
operator|.
name|readFully
argument_list|(
name|pos
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Read fully exceeds maximum length should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{     }
block|}
comment|/** Test seek to different position. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSeek ()
specifier|public
name|void
name|testSeek
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
comment|// Pos: 1/3 dataLen
name|seekCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
expr_stmt|;
comment|// Pos: 0
name|seekCheck
argument_list|(
name|in
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Pos: 1/2 dataLen
name|seekCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|long
name|pos
init|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
decl_stmt|;
comment|// Pos: -3
try|try
block|{
name|seekCheck
argument_list|(
name|in
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek to negative offset should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|FSExceptionMessages
operator|.
name|NEGATIVE_SEEK
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pos: dataLen + 3
try|try
block|{
name|seekCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek after EOF should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot seek after EOF"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pos
argument_list|,
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|seekCheck (InputStream in, int pos)
specifier|private
name|void
name|seekCheck
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLen
argument_list|,
name|n
operator|+
name|pos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
comment|/** Test get position. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testGetPos ()
specifier|public
name|void
name|testGetPos
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Default buffer size
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|int
name|n1
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n1
argument_list|,
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n2
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
name|n1
argument_list|,
name|dataLen
operator|-
name|n1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n1
operator|+
name|n2
argument_list|,
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testAvailable ()
specifier|public
name|void
name|testAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Default buffer size
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|int
name|n1
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|dataLen
operator|-
name|n1
argument_list|)
expr_stmt|;
name|int
name|n2
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
name|n1
argument_list|,
name|dataLen
operator|-
name|n1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|in
operator|.
name|available
argument_list|()
argument_list|,
name|dataLen
operator|-
name|n1
operator|-
name|n2
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test skip. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSkip ()
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Default buffer size
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
name|int
name|n1
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n1
argument_list|,
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|skipped
init|=
name|in
operator|.
name|skip
argument_list|(
name|dataLen
operator|/
literal|3
argument_list|)
decl_stmt|;
name|int
name|n2
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLen
argument_list|,
name|n1
operator|+
name|skipped
operator|+
name|n2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|n2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|dataLen
operator|-
name|n2
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
try|try
block|{
name|skipped
operator|=
name|in
operator|.
name|skip
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Skip Negative length should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Negative skip length"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Skip after EOF
name|skipped
operator|=
name|in
operator|.
name|skip
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|skipped
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|byteBufferReadCheck (InputStream in, ByteBuffer buf, int bufPos)
specifier|private
name|void
name|byteBufferReadCheck
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|bufPos
parameter_list|)
throws|throws
name|Exception
block|{
name|buf
operator|.
name|position
argument_list|(
name|bufPos
argument_list|)
expr_stmt|;
name|int
name|n
init|=
operator|(
operator|(
name|ByteBufferReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bufPos
operator|+
name|n
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|position
argument_list|(
name|bufPos
argument_list|)
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
comment|/** Test byte buffer read with different buffer size. */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testByteBufferRead ()
specifier|public
name|void
name|testByteBufferRead
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// Default buffer size, initial buffer position is 0
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|dataLen
operator|+
literal|100
argument_list|)
decl_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Default buffer size, initial buffer position is not 0
name|in
operator|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Small buffer size, initial buffer position is 0
name|in
operator|=
name|getInputStream
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Small buffer size, initial buffer position is not 0
name|in
operator|=
name|getInputStream
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Direct buffer, default buffer size, initial buffer position is 0
name|in
operator|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|dataLen
operator|+
literal|100
argument_list|)
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Direct buffer, default buffer size, initial buffer position is not 0
name|in
operator|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Direct buffer, small buffer size, initial buffer position is 0
name|in
operator|=
name|getInputStream
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Direct buffer, small buffer size, initial buffer position is not 0
name|in
operator|=
name|getInputStream
argument_list|(
name|smallBufferSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBufferReadCheck
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testCombinedOp ()
specifier|public
name|void
name|testCombinedOp
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|int
name|len1
init|=
name|dataLen
operator|/
literal|8
decl_stmt|;
specifier|final
name|int
name|len2
init|=
name|dataLen
operator|/
literal|10
decl_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
comment|// Read len1 data.
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|len1
index|]
decl_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|len1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|long
name|pos
init|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len1
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// Seek forward len2
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
name|pos
operator|+
name|len2
argument_list|)
expr_stmt|;
comment|// Skip forward len2
name|long
name|n
init|=
name|in
operator|.
name|skip
argument_list|(
name|len2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len2
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|// Pos: 1/4 dataLen
name|positionedReadCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|4
argument_list|)
expr_stmt|;
comment|// Pos should be len1 + len2 + len2
name|pos
operator|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len1
operator|+
name|len2
operator|+
name|len2
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// Read forward len1
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|len1
argument_list|)
decl_stmt|;
name|int
name|nRead
init|=
operator|(
operator|(
name|ByteBufferReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nRead
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|readData
operator|=
operator|new
name|byte
index|[
name|nRead
index|]
expr_stmt|;
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|nRead
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|long
name|lastPos
init|=
name|pos
decl_stmt|;
comment|// Pos should be lastPos + nRead
name|pos
operator|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|lastPos
operator|+
name|nRead
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// Pos: 1/3 dataLen
name|positionedReadCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
expr_stmt|;
comment|// Read forward len1
name|readData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|lastPos
operator|=
name|pos
expr_stmt|;
comment|// Pos should be lastPos + len1
name|pos
operator|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|lastPos
operator|+
name|len1
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// Read forward len1
name|buf
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|len1
argument_list|)
expr_stmt|;
name|nRead
operator|=
operator|(
operator|(
name|ByteBufferReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nRead
argument_list|,
name|buf
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|readData
operator|=
operator|new
name|byte
index|[
name|nRead
index|]
expr_stmt|;
name|buf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|nRead
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|pos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|lastPos
operator|=
name|pos
expr_stmt|;
comment|// Pos should be lastPos + nRead
name|pos
operator|=
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|lastPos
operator|+
name|nRead
argument_list|,
name|pos
argument_list|)
expr_stmt|;
comment|// ByteBuffer read after EOF
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seek
argument_list|(
name|dataLen
argument_list|)
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|n
operator|=
operator|(
operator|(
name|ByteBufferReadable
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|n
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSeekToNewSource ()
specifier|public
name|void
name|testSeekToNewSource
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len1
init|=
name|dataLen
operator|/
literal|8
decl_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|len1
index|]
decl_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
comment|// Pos: 1/3 dataLen
name|seekToNewSourceCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|3
argument_list|)
expr_stmt|;
comment|// Pos: 0
name|seekToNewSourceCheck
argument_list|(
name|in
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Pos: 1/2 dataLen
name|seekToNewSourceCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Pos: -3
try|try
block|{
name|seekToNewSourceCheck
argument_list|(
name|in
argument_list|,
operator|-
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek to negative offset should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Cannot seek to negative "
operator|+
literal|"offset"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Pos: dataLen + 3
try|try
block|{
name|seekToNewSourceCheck
argument_list|(
name|in
argument_list|,
name|dataLen
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Seek after EOF should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Attempted to read past "
operator|+
literal|"end of file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|seekToNewSourceCheck (InputStream in, int targetPos)
specifier|private
name|void
name|seekToNewSourceCheck
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|targetPos
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|dataLen
index|]
decl_stmt|;
operator|(
operator|(
name|Seekable
operator|)
name|in
operator|)
operator|.
name|seekToNewSource
argument_list|(
name|targetPos
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|readAll
argument_list|(
name|in
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLen
argument_list|,
name|n
operator|+
name|targetPos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|targetPos
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
DECL|method|getBufferPool ()
specifier|private
name|ByteBufferPool
name|getBufferPool
parameter_list|()
block|{
return|return
operator|new
name|ByteBufferPool
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{       }
block|}
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testHasEnhancedByteBufferAccess ()
specifier|public
name|void
name|testHasEnhancedByteBufferAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|getOutputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|getInputStream
argument_list|(
name|defaultBufferSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len1
init|=
name|dataLen
operator|/
literal|8
decl_stmt|;
comment|// ByteBuffer size is len1
name|ByteBuffer
name|buffer
init|=
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|getBufferPool
argument_list|()
argument_list|,
name|len1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|n1
init|=
name|buffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|n1
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|n1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// Read len1 bytes
name|readData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|readAll
argument_list|(
name|in
argument_list|,
name|readData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|len1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|n1
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|len1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// ByteBuffer size is len1
name|buffer
operator|=
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|read
argument_list|(
name|getBufferPool
argument_list|()
argument_list|,
name|len1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ReadOption
operator|.
name|SKIP_CHECKSUMS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|n2
init|=
name|buffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|readData
operator|=
operator|new
name|byte
index|[
name|n2
index|]
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|expectedData
operator|=
operator|new
name|byte
index|[
name|n2
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|n1
operator|+
name|len1
argument_list|,
name|expectedData
argument_list|,
literal|0
argument_list|,
name|n2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|readData
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HasEnhancedByteBufferAccess
operator|)
name|in
operator|)
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

