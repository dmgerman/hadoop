begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestBloomMapFile
specifier|public
class|class
name|TestBloomMapFile
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBloomMapFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|TEST_ROOT
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_ROOT
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestMapFile
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|,
literal|"testfile"
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT
argument_list|,
literal|"testfile"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_ROOT
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|TEST_ROOT
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Can't clean up test root dir"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testMembershipTest ()
specifier|public
name|void
name|testMembershipTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write the file
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_DIR
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.mapfile.bloom.size"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
literal|"00"
operator|+
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|reader
operator|.
name|probablyHasKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|qualifiedDirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False positives: "
operator|+
name|falsePos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|falsePos
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|checkMembershipVaryingSizedKeys (List<Text> keys)
specifier|private
name|void
name|checkMembershipVaryingSizedKeys
parameter_list|(
name|List
argument_list|<
name|Text
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_DIR
argument_list|)
decl_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Text
name|key
range|:
name|keys
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// will check for membership in opposite order of how keys were inserted
name|reader
operator|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|Text
name|key
range|:
name|keys
control|)
block|{
name|assertTrue
argument_list|(
literal|"False negative for existing key "
operator|+
name|key
argument_list|,
name|reader
operator|.
name|probablyHasKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|qualifiedDirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMembershipVaryingSizedKeysTest1 ()
specifier|public
name|void
name|testMembershipVaryingSizedKeysTest1
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMembershipVaryingSizedKeys
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMembershipVaryingSizedKeysTest2 ()
specifier|public
name|void
name|testMembershipVaryingSizedKeysTest2
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"AA"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMembershipVaryingSizedKeys
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**    * test {@code BloomMapFile.delete()} method    */
annotation|@
name|Test
DECL|method|testDeleteFile ()
specifier|public
name|void
name|testDeleteFile
parameter_list|()
block|{
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|TEST_FILE
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testDeleteFile error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BloomMapFile
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|TEST_FILE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpect ex in testDeleteFile !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@link BloomMapFile.Reader} constructor with     * IOException    */
annotation|@
name|Test
DECL|method|testIOExceptionInWriterConstructor ()
specifier|public
name|void
name|testIOExceptionInWriterConstructor
parameter_list|()
block|{
name|Path
name|dirNameSpy
init|=
name|spy
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|TEST_FILE
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"123124142"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|dirNameSpy
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|dirNameSpy
argument_list|,
name|conf
argument_list|,
name|MapFile
operator|.
name|Reader
operator|.
name|comparator
argument_list|(
operator|new
name|WritableComparator
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"testIOExceptionInWriterConstructor error !!!"
argument_list|,
name|reader
operator|.
name|getBloomFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpect ex in testIOExceptionInWriterConstructor !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  test {@link BloomMapFile.Reader#get(WritableComparable, Writable)} method    */
annotation|@
name|Test
DECL|method|testGetBloomMapFile ()
specifier|public
name|void
name|testGetBloomMapFile
parameter_list|()
block|{
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|TEST_FILE
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|TEST_FILE
argument_list|,
name|conf
argument_list|,
name|MapFile
operator|.
name|Reader
operator|.
name|comparator
argument_list|(
operator|new
name|WritableComparator
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"testGetBloomMapFile error !!!"
argument_list|,
name|reader
operator|.
name|get
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"testGetBloomMapFile error !!!"
argument_list|,
name|reader
operator|.
name|get
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|SIZE
operator|+
literal|5
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpect ex in testGetBloomMapFile !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code BloomMapFile.Writer} constructors    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testBloomMapFileConstructors ()
specifier|public
name|void
name|testBloomMapFileConstructors
parameter_list|()
block|{
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|ts
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|testFileName
init|=
name|TEST_FILE
operator|.
name|toString
argument_list|()
decl_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|defaultCodec
argument_list|,
name|defaultProgress
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
name|defaultProgress
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|defaultCodec
argument_list|,
name|defaultProgress
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|defaultProgress
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|ts
argument_list|,
name|testFileName
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testBloomMapFileConstructors error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|defaultProgress
specifier|static
specifier|final
name|Progressable
name|defaultProgress
init|=
operator|new
name|Progressable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
block|}
decl_stmt|;
DECL|field|defaultCodec
specifier|static
specifier|final
name|CompressionCodec
name|defaultCodec
init|=
operator|new
name|CompressionCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mock
argument_list|(
name|CompressionOutputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mock
argument_list|(
name|CompressionOutputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

