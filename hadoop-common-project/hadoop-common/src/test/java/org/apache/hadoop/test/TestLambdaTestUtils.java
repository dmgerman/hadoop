begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the logic in {@link LambdaTestUtils}.  * This test suite includes Java 8 and Java 7 code; the Java 8 code exists  * to verify that the API is easily used with Lambda expressions.  */
end_comment

begin_class
DECL|class|TestLambdaTestUtils
specifier|public
class|class
name|TestLambdaTestUtils
extends|extends
name|Assert
block|{
DECL|field|INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|INTERVAL
init|=
literal|10
decl_stmt|;
DECL|field|TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|50
decl_stmt|;
DECL|field|retry
specifier|private
name|FixedRetryInterval
name|retry
init|=
operator|new
name|FixedRetryInterval
argument_list|(
name|INTERVAL
argument_list|)
decl_stmt|;
comment|// counter for lambda expressions to use
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
comment|/**    * Always evaluates to true.    */
DECL|field|ALWAYS_TRUE
specifier|public
specifier|static
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|ALWAYS_TRUE
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Always evaluates to false.    */
DECL|field|ALWAYS_FALSE
specifier|public
specifier|static
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|ALWAYS_FALSE
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Text in the raised FNFE.    */
DECL|field|MISSING
specifier|public
specifier|static
specifier|final
name|String
name|MISSING
init|=
literal|"not found"
decl_stmt|;
comment|/**    * A predicate that always throws a FileNotFoundException.    */
DECL|field|ALWAYS_FNFE
specifier|public
specifier|static
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|ALWAYS_FNFE
init|=
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|MISSING
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|/**    * reusable timeout handler.    */
specifier|public
specifier|static
specifier|final
name|GenerateTimeout
DECL|field|TIMEOUT_FAILURE_HANDLER
name|TIMEOUT_FAILURE_HANDLER
init|=
operator|new
name|GenerateTimeout
argument_list|()
decl_stmt|;
comment|/**    * Always evaluates to 3L.    */
DECL|field|EVAL_3L
specifier|public
specifier|static
specifier|final
name|Callable
argument_list|<
name|Long
argument_list|>
name|EVAL_3L
init|=
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|3L
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Always raises a {@code FileNotFoundException}.    */
DECL|field|EVAL_FNFE
specifier|public
specifier|static
specifier|final
name|Callable
argument_list|<
name|Long
argument_list|>
name|EVAL_FNFE
init|=
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|MISSING
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|/**    * Assert the retry count is as expected.    * @param expected expected value    */
DECL|method|assertRetryCount (int expected)
specifier|protected
name|void
name|assertRetryCount
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|retry
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|,
name|retry
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert the retry count is as expected.    * @param minCount minimum value    */
DECL|method|assertMinRetryCount (int minCount)
specifier|protected
name|void
name|assertMinRetryCount
parameter_list|(
name|int
name|minCount
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"retry count of "
operator|+
name|retry
operator|+
literal|" is not>= "
operator|+
name|minCount
argument_list|,
name|minCount
operator|<=
name|retry
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Raise an exception.    * @param e exception to raise    * @return never    * @throws Exception passed in exception    */
DECL|method|r (Exception e)
specifier|private
name|boolean
name|r
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
comment|/**    * Raise an error.    * @param e error to raise    * @return never    * @throws Exception never    * @throws Error the passed in error    */
DECL|method|r (Error e)
specifier|private
name|boolean
name|r
parameter_list|(
name|Error
name|e
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
name|e
throw|;
block|}
annotation|@
name|Test
DECL|method|testAwaitAlwaysTrue ()
specifier|public
name|void
name|testAwaitAlwaysTrue
parameter_list|()
throws|throws
name|Throwable
block|{
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|ALWAYS_TRUE
argument_list|,
operator|new
name|FixedRetryInterval
argument_list|(
name|INTERVAL
argument_list|)
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitAlwaysFalse ()
specifier|public
name|void
name|testAwaitAlwaysFalse
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|ALWAYS_FALSE
argument_list|,
name|retry
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have got here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertMinRetryCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAwaitLinearRetry ()
specifier|public
name|void
name|testAwaitLinearRetry
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProportionalRetryInterval
name|linearRetry
init|=
operator|new
name|ProportionalRetryInterval
argument_list|(
name|INTERVAL
operator|*
literal|2
argument_list|,
name|TIMEOUT
operator|*
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|ALWAYS_FALSE
argument_list|,
name|linearRetry
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have got here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|linearRetry
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|linearRetry
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAwaitFNFE ()
specifier|public
name|void
name|testAwaitFNFE
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|ALWAYS_FNFE
argument_list|,
name|retry
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have got here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
comment|// inner clause is included
name|assertTrue
argument_list|(
name|retry
operator|.
name|getInvocationCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
name|assertExceptionContains
argument_list|(
name|MISSING
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRetryInterval ()
specifier|public
name|void
name|testRetryInterval
parameter_list|()
throws|throws
name|Throwable
block|{
name|ProportionalRetryInterval
name|interval
init|=
operator|new
name|ProportionalRetryInterval
argument_list|(
literal|200
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|800
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|interval
operator|.
name|call
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptSuccess ()
specifier|public
name|void
name|testInterceptSuccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|IOException
name|ioe
init|=
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|ALWAYS_FNFE
argument_list|)
decl_stmt|;
name|assertExceptionContains
argument_list|(
name|MISSING
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptContains ()
specifier|public
name|void
name|testInterceptContains
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|MISSING
argument_list|,
name|ALWAYS_FNFE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptContainsWrongString ()
specifier|public
name|void
name|testInterceptContainsWrongString
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|FileNotFoundException
name|e
init|=
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|"404"
argument_list|,
name|ALWAYS_FNFE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
name|MISSING
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInterceptVoidCallable ()
specifier|public
name|void
name|testInterceptVoidCallable
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
name|NULL_RESULT
argument_list|,
operator|new
name|Callable
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IOException
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventually ()
specifier|public
name|void
name|testEventually
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|result
init|=
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
name|EVAL_3L
argument_list|,
name|retry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|retry
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventuallyFailuresRetry ()
specifier|public
name|void
name|testEventuallyFailuresRetry
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
name|EVAL_FNFE
argument_list|,
name|retry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should not have got here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|// expected
name|assertMinRetryCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Java 8 Examples go below this line.    */
annotation|@
name|Test
DECL|method|testInterceptFailure ()
specifier|public
name|void
name|testInterceptFailure
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|IOException
name|ioe
init|=
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|"hello"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|expected
parameter_list|)
block|{
name|assertExceptionContains
argument_list|(
literal|"hello"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInterceptInterceptLambda ()
specifier|public
name|void
name|testInterceptInterceptLambda
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// here we use intercept() to test itself.
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
name|MISSING
argument_list|,
parameter_list|()
lambda|->
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|"404"
argument_list|,
name|ALWAYS_FNFE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptInterceptVoidResultLambda ()
specifier|public
name|void
name|testInterceptInterceptVoidResultLambda
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// see what happens when a null is returned; type inference -> Void
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
name|NULL_RESULT
argument_list|,
parameter_list|()
lambda|->
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptInterceptStringResultLambda ()
specifier|public
name|void
name|testInterceptInterceptStringResultLambda
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// see what happens when a string is returned; it should be used
comment|// in the message
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
literal|"hello, world"
argument_list|,
parameter_list|()
lambda|->
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|"hello, world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitNoTimeoutLambda ()
specifier|public
name|void
name|testAwaitNoTimeoutLambda
parameter_list|()
throws|throws
name|Throwable
block|{
name|await
argument_list|(
literal|0
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|,
name|retry
argument_list|,
operator|(
name|timeout
operator|,
name|ex
operator|)
operator|->
name|ex
operator|!=
literal|null
condition|?
name|ex
else|:
operator|new
name|Exception
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
expr_stmt|;
name|assertRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitLambdaRepetitions ()
specifier|public
name|void
name|testAwaitLambdaRepetitions
parameter_list|()
throws|throws
name|Throwable
block|{
name|count
operator|=
literal|0
expr_stmt|;
comment|// lambda expression which will succeed after exactly 4 probes
name|int
name|reps
init|=
name|await
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
operator|++
name|count
operator|==
literal|4
argument_list|,
parameter_list|()
lambda|->
literal|10
argument_list|,
operator|(
name|timeout
expr|,
name|ex
operator|)
operator|->
name|ex
operator|!=
literal|null
condition|?
name|ex
else|:
operator|new
name|Exception
argument_list|(
literal|"timeout"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|reps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptAwaitLambdaException ()
specifier|public
name|void
name|testInterceptAwaitLambdaException
parameter_list|()
throws|throws
name|Throwable
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|IOException
name|ioe
init|=
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|await
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"inner "
operator|+
operator|++
name|count
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|,
parameter_list|(
name|timeout
parameter_list|,
name|ex
parameter_list|)
lambda|->
name|ex
argument_list|)
argument_list|)
decl_stmt|;
name|assertRetryCount
argument_list|(
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// verify that the exception returned was the last one raised
name|assertExceptionContains
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptAwaitLambdaDiagnostics ()
specifier|public
name|void
name|testInterceptAwaitLambdaDiagnostics
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"generated"
argument_list|,
parameter_list|()
lambda|->
name|await
argument_list|(
literal|5
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|,
parameter_list|()
lambda|->
operator|-
literal|1
argument_list|,
comment|// force checks -1 timeout probes
parameter_list|(
name|timeout
parameter_list|,
name|ex
parameter_list|)
lambda|->
operator|new
name|IOException
argument_list|(
literal|"generated"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptAwaitFailFastLambda ()
specifier|public
name|void
name|testInterceptAwaitFailFastLambda
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FailFastException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|await
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|FailFastException
argument_list|(
literal|"ffe"
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|,
parameter_list|(
name|timeout
parameter_list|,
name|ex
parameter_list|)
lambda|->
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|assertRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventuallyOnceLambda ()
specifier|public
name|void
name|testEventuallyOnceLambda
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|result
init|=
name|eventually
argument_list|(
literal|0
argument_list|,
parameter_list|()
lambda|->
literal|"hello"
argument_list|,
name|retry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|retry
operator|.
name|getInvocationCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEventuallyLambda ()
specifier|public
name|void
name|testEventuallyLambda
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|result
init|=
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
literal|3
argument_list|,
name|retry
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptEventuallyLambdaFailures ()
specifier|public
name|void
name|testInterceptEventuallyLambdaFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
parameter_list|()
lambda|->
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|)
argument_list|)
expr_stmt|;
name|assertMinRetryCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptEventuallyambdaFailuresNegativeRetry ()
specifier|public
name|void
name|testInterceptEventuallyambdaFailuresNegativeRetry
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
name|EVAL_FNFE
argument_list|,
parameter_list|()
lambda|->
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterceptEventuallyLambdaFailFast ()
specifier|public
name|void
name|testInterceptEventuallyLambdaFailFast
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|FailFastException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
parameter_list|()
lambda|->
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|FailFastException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|)
argument_list|)
expr_stmt|;
name|assertRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that assertions trigger catch and retry.    * @throws Throwable if the code is broken    */
annotation|@
name|Test
DECL|method|testEventuallySpinsOnAssertions ()
specifier|public
name|void
name|testEventuallySpinsOnAssertions
parameter_list|()
throws|throws
name|Throwable
block|{
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
block|{
while|while
condition|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
operator|<
literal|5
condition|)
block|{
name|fail
argument_list|(
literal|"if you see this, we are in trouble"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|retry
argument_list|)
expr_stmt|;
name|assertMinRetryCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that VirtualMachineError errors are immediately rethrown.    * @throws Throwable if the code is broken    */
annotation|@
name|Test
DECL|method|testInterceptEventuallyThrowsVMErrors ()
specifier|public
name|void
name|testInterceptEventuallyThrowsVMErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|OutOfMemoryError
operator|.
name|class
argument_list|,
literal|"OOM"
argument_list|,
parameter_list|()
lambda|->
name|eventually
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|OutOfMemoryError
argument_list|(
literal|"OOM"
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|)
argument_list|)
expr_stmt|;
name|assertRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that you can declare that an intercept will intercept Errors.    * @throws Throwable if the code is broken    */
annotation|@
name|Test
DECL|method|testInterceptHandlesErrors ()
specifier|public
name|void
name|testInterceptHandlesErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|OutOfMemoryError
operator|.
name|class
argument_list|,
literal|"OOM"
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|OutOfMemoryError
argument_list|(
literal|"OOM"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that if an Error raised is not the one being intercepted,    * it gets rethrown.    * @throws Throwable if the code is broken    */
annotation|@
name|Test
DECL|method|testInterceptRethrowsVMErrors ()
specifier|public
name|void
name|testInterceptRethrowsVMErrors
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|StackOverflowError
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|intercept
argument_list|(
name|OutOfMemoryError
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|StackOverflowError
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitHandlesAssertions ()
specifier|public
name|void
name|testAwaitHandlesAssertions
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// await a state which is never reached, expect a timeout exception
comment|// with the text "failure" in it
name|TimeoutException
name|ex
init|=
name|intercept
argument_list|(
name|TimeoutException
operator|.
name|class
argument_list|,
literal|"failure"
argument_list|,
parameter_list|()
lambda|->
name|await
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
argument_list|,
name|retry
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
argument_list|)
decl_stmt|;
comment|// the retry handler must have been invoked
name|assertMinRetryCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// and the nested cause is tha raised assertion
if|if
condition|(
operator|!
operator|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AssertionError
operator|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAwaitRethrowsVMErrors ()
specifier|public
name|void
name|testAwaitRethrowsVMErrors
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// await a state which is never reached, expect a timeout exception
comment|// with the text "failure" in it
name|intercept
argument_list|(
name|StackOverflowError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|await
argument_list|(
name|TIMEOUT
argument_list|,
parameter_list|()
lambda|->
name|r
argument_list|(
operator|new
name|StackOverflowError
argument_list|()
argument_list|)
argument_list|,
name|retry
argument_list|,
name|TIMEOUT_FAILURE_HANDLER
argument_list|)
argument_list|)
expr_stmt|;
comment|// the retry handler must not have been invoked
name|assertMinRetryCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvalToSuccess ()
specifier|public
name|void
name|testEvalToSuccess
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"Eval to success"
argument_list|,
name|eval
argument_list|(
parameter_list|()
lambda|->
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * There's no attempt to wrap an unchecked exception    * with an AssertionError.    */
annotation|@
name|Test
DECL|method|testEvalDoesntWrapRTEs ()
specifier|public
name|void
name|testEvalDoesntWrapRTEs
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|eval
argument_list|(
parameter_list|()
lambda|->
block|{
throw|throw
argument_list|new
name|RuntimeException
argument_list|(
literal|"t"
argument_list|)
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**    * Verify that IOEs are caught and wrapped, and that the    * inner cause is the original IOE.    */
end_comment

begin_function
unit|@
name|Test
DECL|method|testEvalDoesWrapIOEs ()
specifier|public
name|void
name|testEvalDoesWrapIOEs
parameter_list|()
throws|throws
name|Throwable
block|{
name|verifyCause
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
literal|"ioe"
argument_list|,
parameter_list|()
lambda|->
name|eval
argument_list|(
parameter_list|()
lambda|->
block|{
throw|throw
argument_list|new
name|IOException
argument_list|(
literal|"ioe"
argument_list|)
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_function
unit|}    @
name|Test
DECL|method|testInterceptFutureUnwrapped ()
specifier|public
name|void
name|testInterceptFutureUnwrapped
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureWrongException ()
specifier|public
name|void
name|testInterceptFutureWrongException
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
parameter_list|()
lambda|->
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureNotAnException ()
specifier|public
name|void
name|testInterceptFutureNotAnException
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|Error
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCause
argument_list|(
name|Error
operator|.
name|class
argument_list|,
name|intercept
argument_list|(
name|ExecutionException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
parameter_list|()
lambda|->
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
name|future
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Variant for exception catching.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureNotAnException2 ()
specifier|public
name|void
name|testInterceptFutureNotAnException2
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|Error
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCause
argument_list|(
name|Error
operator|.
name|class
argument_list|,
name|interceptFuture
argument_list|(
name|ExecutionException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureNoFailures ()
specifier|public
name|void
name|testInterceptFutureNoFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|complete
argument_list|(
literal|"happy"
argument_list|)
expr_stmt|;
name|intercept
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
literal|"happy"
argument_list|,
parameter_list|()
lambda|->
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This will timeout immediately and raise a TimeoutException.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureTimeout ()
specifier|public
name|void
name|testInterceptFutureTimeout
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|intercept
argument_list|(
name|TimeoutException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|future
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This will timeout immediately and raise a TimeoutException.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureTimeout2 ()
specifier|public
name|void
name|testInterceptFutureTimeout2
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|interceptFuture
argument_list|(
name|TimeoutException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This will timeout immediately and raise a TimeoutException.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureTimeoutSuccess ()
specifier|public
name|void
name|testInterceptFutureTimeoutSuccess
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|interceptFuture
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"oops"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * This will timeout immediately and raise a TimeoutException.    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testInterceptFutureCancelled ()
specifier|public
name|void
name|testInterceptFutureCancelled
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|String
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|interceptFuture
argument_list|(
name|CancellationException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|,
name|future
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

