begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.random
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|random
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestOsSecureRandom
specifier|public
class|class
name|TestOsSecureRandom
block|{
DECL|method|getOsSecureRandom ()
specifier|private
specifier|static
name|OsSecureRandom
name|getOsSecureRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|SystemUtils
operator|.
name|IS_OS_LINUX
argument_list|)
expr_stmt|;
name|OsSecureRandom
name|random
init|=
operator|new
name|OsSecureRandom
argument_list|()
decl_stmt|;
name|random
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|random
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRandomBytes ()
specifier|public
name|void
name|testRandomBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
comment|// len = 16
name|checkRandomBytes
argument_list|(
name|random
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// len = 32
name|checkRandomBytes
argument_list|(
name|random
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// len = 128
name|checkRandomBytes
argument_list|(
name|random
argument_list|,
literal|128
argument_list|)
expr_stmt|;
comment|// len = 256
name|checkRandomBytes
argument_list|(
name|random
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test will timeout if secure random implementation always returns a     * constant value.    */
DECL|method|checkRandomBytes (OsSecureRandom random, int len)
specifier|private
name|void
name|checkRandomBytes
parameter_list|(
name|OsSecureRandom
name|random
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|bytes1
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes1
argument_list|)
expr_stmt|;
while|while
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|bytes1
argument_list|)
condition|)
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test will timeout if secure random implementation always returns a     * constant value.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRandomInt ()
specifier|public
name|void
name|testRandomInt
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
name|int
name|rand1
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|int
name|rand2
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
while|while
condition|(
name|rand1
operator|==
name|rand2
condition|)
block|{
name|rand2
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test will timeout if secure random implementation always returns a     * constant value.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRandomLong ()
specifier|public
name|void
name|testRandomLong
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
name|long
name|rand1
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|rand2
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
while|while
condition|(
name|rand1
operator|==
name|rand2
condition|)
block|{
name|rand2
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test will timeout if secure random implementation always returns a     * constant value.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRandomFloat ()
specifier|public
name|void
name|testRandomFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
name|float
name|rand1
init|=
name|random
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|float
name|rand2
init|=
name|random
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
while|while
condition|(
name|rand1
operator|==
name|rand2
condition|)
block|{
name|rand2
operator|=
name|random
operator|.
name|nextFloat
argument_list|()
expr_stmt|;
block|}
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test will timeout if secure random implementation always returns a     * constant value.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRandomDouble ()
specifier|public
name|void
name|testRandomDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
name|double
name|rand1
init|=
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|double
name|rand2
init|=
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
while|while
condition|(
name|rand1
operator|==
name|rand2
condition|)
block|{
name|rand2
operator|=
name|random
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRefillReservoir ()
specifier|public
name|void
name|testRefillReservoir
parameter_list|()
throws|throws
name|Exception
block|{
name|OsSecureRandom
name|random
init|=
name|getOsSecureRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8196
condition|;
name|i
operator|++
control|)
block|{
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|random
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testOsSecureRandomSetConf ()
specifier|public
name|void
name|testOsSecureRandomSetConf
parameter_list|()
throws|throws
name|IOException
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|SystemUtils
operator|.
name|IS_OS_LINUX
argument_list|)
expr_stmt|;
name|OsSecureRandom
name|random
init|=
operator|new
name|OsSecureRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
literal|10
condition|;
operator|++
name|n
control|)
block|{
name|random
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|scmd
init|=
operator|new
name|String
index|[]
block|{
literal|"/bin/sh"
block|,
literal|"-c"
block|,
literal|"lsof | wc -l"
block|}
decl_stmt|;
name|ShellCommandExecutor
name|sce
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|scmd
argument_list|)
decl_stmt|;
name|sce
operator|.
name|execute
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"==lsof result "
operator|+
name|n
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sce
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

