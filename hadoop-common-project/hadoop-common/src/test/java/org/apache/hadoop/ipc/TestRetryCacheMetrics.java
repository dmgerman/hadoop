begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|metrics
operator|.
name|RetryCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for {@link RetryCacheMetrics}  */
end_comment

begin_class
DECL|class|TestRetryCacheMetrics
specifier|public
class|class
name|TestRetryCacheMetrics
block|{
DECL|field|cacheName
specifier|static
specifier|final
name|String
name|cacheName
init|=
literal|"NameNodeRetryCache"
decl_stmt|;
annotation|@
name|Test
DECL|method|testNames ()
specifier|public
name|void
name|testNames
parameter_list|()
block|{
name|RetryCache
name|cache
init|=
name|mock
argument_list|(
name|RetryCache
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cache
operator|.
name|getCacheName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
name|RetryCacheMetrics
name|metrics
init|=
name|RetryCacheMetrics
operator|.
name|create
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrCacheHit
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCacheCleared
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCacheCleared
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCacheUpdated
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCacheUpdated
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCacheUpdated
argument_list|()
expr_stmt|;
name|checkMetrics
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMetrics (long hit, long cleared, long updated)
specifier|private
name|void
name|checkMetrics
parameter_list|(
name|long
name|hit
parameter_list|,
name|long
name|cleared
parameter_list|,
name|long
name|updated
parameter_list|)
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|getMetrics
argument_list|(
literal|"RetryCache."
operator|+
name|cacheName
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"CacheHit"
argument_list|,
name|hit
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"CacheCleared"
argument_list|,
name|cleared
argument_list|,
name|rb
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"CacheUpdated"
argument_list|,
name|updated
argument_list|,
name|rb
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

