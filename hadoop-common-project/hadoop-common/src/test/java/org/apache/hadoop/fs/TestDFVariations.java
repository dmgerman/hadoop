begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDFVariations
specifier|public
class|class
name|TestDFVariations
block|{
DECL|class|XXDF
specifier|public
specifier|static
class|class
name|XXDF
extends|extends
name|DF
block|{
DECL|method|XXDF ()
specifier|public
name|XXDF
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"echo"
block|,
literal|"IGNORE\n"
block|,
literal|"/dev/sda3"
block|,
literal|"453115160"
block|,
literal|"53037920"
block|,
literal|"400077240"
block|,
literal|"11%"
block|,
literal|"/foo/bar\n"
block|}
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMountAndFileSystem ()
specifier|public
name|void
name|testMountAndFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|XXDF
name|df
init|=
operator|new
name|XXDF
argument_list|()
decl_stmt|;
name|String
name|expectedMount
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
name|df
operator|.
name|getDirPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
else|:
literal|"/foo/bar"
decl_stmt|;
name|String
name|expectedFileSystem
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
name|df
operator|.
name|getDirPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
else|:
literal|"/dev/sda3"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid mount point"
argument_list|,
name|expectedMount
argument_list|,
name|df
operator|.
name|getMount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid filesystem"
argument_list|,
name|expectedFileSystem
argument_list|,
name|df
operator|.
name|getFilesystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDFInvalidPath ()
specifier|public
name|void
name|testDFInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generate a path that doesn't exist
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|0xDEADBEEFl
argument_list|)
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|64
index|]
decl_stmt|;
while|while
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|random
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
specifier|final
name|String
name|invalid
init|=
operator|new
name|String
argument_list|(
literal|"/"
operator|+
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|File
name|invalidFile
init|=
operator|new
name|File
argument_list|(
name|invalid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|invalidFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
name|invalidFile
expr_stmt|;
block|}
block|}
name|DF
name|df
init|=
operator|new
name|DF
argument_list|(
name|file
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
try|try
block|{
name|df
operator|.
name|getMount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected, since path does not exist
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDFMalformedOutput ()
specifier|public
name|void
name|testDFMalformedOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|DF
name|df
init|=
operator|new
name|DF
argument_list|(
operator|new
name|File
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Filesystem     1K-blocks     Used Available Use% Mounted on\n"
operator|+
literal|"/dev/sda5       19222656 10597036   7649060  59% /"
argument_list|)
argument_list|)
decl_stmt|;
name|df
operator|.
name|parseExecResult
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|df
operator|.
name|parseOutput
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Filesystem     1K-blocks     Used Available Use% Mounted on"
argument_list|)
argument_list|)
expr_stmt|;
name|df
operator|.
name|parseExecResult
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|df
operator|.
name|parseOutput
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception with missing line!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Fewer lines of output than expected"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Filesystem     1K-blocks     Used Available Use% Mounted on\n"
operator|+
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|df
operator|.
name|parseExecResult
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|df
operator|.
name|parseOutput
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception with empty line!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Unexpected empty line"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Filesystem     1K-blocks     Used Available Use% Mounted on\n"
operator|+
literal|"       19222656 10597036   7649060  59% /"
argument_list|)
argument_list|)
expr_stmt|;
name|df
operator|.
name|parseExecResult
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|df
operator|.
name|parseOutput
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception with missing field!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Could not parse line: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetMountCurrentDirectory ()
specifier|public
name|void
name|testGetMountCurrentDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|currentDirectory
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|workingDir
init|=
name|currentDirectory
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|DF
name|df
init|=
operator|new
name|DF
argument_list|(
operator|new
name|File
argument_list|(
name|workingDir
argument_list|)
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|String
name|mountPath
init|=
name|df
operator|.
name|getMount
argument_list|()
decl_stmt|;
name|File
name|mountDir
init|=
operator|new
name|File
argument_list|(
name|mountPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mount dir ["
operator|+
name|mountDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] should exist."
argument_list|,
name|mountDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Mount dir ["
operator|+
name|mountDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] should be directory."
argument_list|,
name|mountDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Working dir ["
operator|+
name|workingDir
operator|+
literal|"] should start with ["
operator|+
name|mountPath
operator|+
literal|"]."
argument_list|,
name|workingDir
operator|.
name|startsWith
argument_list|(
name|mountPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

