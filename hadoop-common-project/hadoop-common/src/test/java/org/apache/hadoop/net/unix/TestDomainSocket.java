begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net.unix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousCloseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
operator|.
name|DomainChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
DECL|class|TestDomainSocket
specifier|public
class|class
name|TestDomainSocket
block|{
DECL|field|sockDir
specifier|private
specifier|static
name|TemporarySocketDirectory
name|sockDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|sockDir
operator|=
operator|new
name|TemporarySocketDirectory
argument_list|()
expr_stmt|;
name|DomainSocket
operator|.
name|disableBindPathValidation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|sockDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|DomainSocket
operator|.
name|getLoadingFailureReason
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we can create a socket and close it, even if it hasn't been    * opened.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testSocketCreateAndClose ()
specifier|public
name|void
name|testSocketCreateAndClose
parameter_list|()
throws|throws
name|IOException
block|{
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock_create_and_close"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test DomainSocket path setting and getting.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testSocketPathSetGet ()
specifier|public
name|void
name|testSocketPathSetGet
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/var/run/hdfs/sock.100"
argument_list|,
name|DomainSocket
operator|.
name|getEffectivePath
argument_list|(
literal|"/var/run/hdfs/sock._PORT"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we get a read result of -1 on EOF.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testSocketReadEof ()
specifier|public
name|void
name|testSocketReadEof
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"testSocketReadEof"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|ExecutorService
name|exeServ
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|DomainSocket
name|conn
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|conn
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|exeServ
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|DomainSocket
name|conn
init|=
name|DomainSocket
operator|.
name|connect
argument_list|(
name|serv
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that if one thread is blocking in a read or write operation, another    * thread can close the socket and stop the accept.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testSocketAcceptAndClose ()
specifier|public
name|void
name|testSocketAcceptAndClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock_accept_and_close"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|ExecutorService
name|exeServ
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
try|try
block|{
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"expected the accept() to be "
operator|+
literal|"interrupted and fail"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AsynchronousCloseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|exeServ
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we get an AsynchronousCloseException when the DomainSocket    * we're using is closed during a read or write operation.    *    * @throws IOException    */
DECL|method|testAsyncCloseDuringIO (final boolean closeDuringWrite)
specifier|private
name|void
name|testAsyncCloseDuringIO
parameter_list|(
specifier|final
name|boolean
name|closeDuringWrite
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"testAsyncCloseDuringIO("
operator|+
name|closeDuringWrite
operator|+
literal|")"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|ExecutorService
name|exeServ
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|serverCallable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
name|DomainSocket
name|serverConn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serverConn
operator|=
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
comment|// The server just continues either writing or reading until someone
comment|// asynchronously closes the client's socket.  At that point, all our
comment|// reads return EOF, and writes get a socket error.
if|if
condition|(
name|closeDuringWrite
condition|)
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|serverConn
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
else|else
block|{
do|do
block|{
empty_stmt|;
block|}
do|while
condition|(
name|serverConn
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|!=
operator|-
literal|1
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|DomainSocket
operator|.
name|LOG
argument_list|,
name|serverConn
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|serverFuture
init|=
name|exeServ
operator|.
name|submit
argument_list|(
name|serverCallable
argument_list|)
decl_stmt|;
specifier|final
name|DomainSocket
name|clientConn
init|=
name|DomainSocket
operator|.
name|connect
argument_list|(
name|serv
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|clientCallable
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
block|{
comment|// The client writes or reads until another thread
comment|// asynchronously closes the socket.  At that point, we should
comment|// get ClosedChannelException, or possibly its subclass
comment|// AsynchronousCloseException.
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|closeDuringWrite
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|clientConn
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|clientConn
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|clientFuture
init|=
name|exeServ
operator|.
name|submit
argument_list|(
name|clientCallable
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|clientConn
operator|.
name|close
argument_list|()
expr_stmt|;
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientFuture
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|serverFuture
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testAsyncCloseDuringWrite ()
specifier|public
name|void
name|testAsyncCloseDuringWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|testAsyncCloseDuringIO
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testAsyncCloseDuringRead ()
specifier|public
name|void
name|testAsyncCloseDuringRead
parameter_list|()
throws|throws
name|Exception
block|{
name|testAsyncCloseDuringIO
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that attempting to connect to an invalid path doesn't work.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testInvalidOperations ()
specifier|public
name|void
name|testInvalidOperations
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|DomainSocket
operator|.
name|connect
argument_list|(
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock_invalid_operation"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"connect(2) error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test setting some server options.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testServerOptions ()
specifier|public
name|void
name|testServerOptions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock_server_options"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Let's set a new receive buffer size
name|int
name|bufSize
init|=
name|serv
operator|.
name|getAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|int
name|newBufSize
init|=
name|bufSize
operator|/
literal|2
decl_stmt|;
name|serv
operator|.
name|setAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_BUFFER_SIZE
argument_list|,
name|newBufSize
argument_list|)
expr_stmt|;
name|int
name|nextBufSize
init|=
name|serv
operator|.
name|getAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newBufSize
argument_list|,
name|nextBufSize
argument_list|)
expr_stmt|;
comment|// Let's set a server timeout
name|int
name|newTimeout
init|=
literal|1000
decl_stmt|;
name|serv
operator|.
name|setAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_TIMEOUT
argument_list|,
name|newTimeout
argument_list|)
expr_stmt|;
name|int
name|nextTimeout
init|=
name|serv
operator|.
name|getAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_TIMEOUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTimeout
argument_list|,
name|nextTimeout
argument_list|)
expr_stmt|;
try|try
block|{
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected the accept() to time out and fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"accept(2) error: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|serv
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A Throwable representing success.    *    * We can't use null to represent this, because you cannot insert null into    * ArrayBlockingQueue.    */
DECL|class|Success
specifier|static
class|class
name|Success
extends|extends
name|Throwable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
DECL|interface|WriteStrategy
specifier|static
interface|interface
name|WriteStrategy
block|{
comment|/**      * Initialize a WriteStrategy object from a Socket.      */
DECL|method|init (DomainSocket s)
specifier|public
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Write some bytes.      */
DECL|method|write (byte b[])
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|OutputStreamWriteStrategy
specifier|static
class|class
name|OutputStreamWriteStrategy
implements|implements
name|WriteStrategy
block|{
DECL|field|outs
specifier|private
name|OutputStream
name|outs
init|=
literal|null
decl_stmt|;
DECL|method|init (DomainSocket s)
specifier|public
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|outs
operator|=
name|s
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
block|}
DECL|method|write (byte b[])
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|outs
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReadStrategy
specifier|abstract
specifier|static
class|class
name|ReadStrategy
block|{
comment|/**      * Initialize a ReadStrategy object from a DomainSocket.      */
DECL|method|init (DomainSocket s)
specifier|public
specifier|abstract
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Read some bytes.      */
DECL|method|read (byte b[], int off, int length)
specifier|public
specifier|abstract
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readFully (byte buf[], int off, int len)
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|toRead
init|=
name|len
decl_stmt|;
while|while
condition|(
name|toRead
operator|>
literal|0
condition|)
block|{
name|int
name|ret
init|=
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF from inputStream"
argument_list|)
throw|;
block|}
name|toRead
operator|-=
name|ret
expr_stmt|;
name|off
operator|+=
name|ret
expr_stmt|;
block|}
block|}
block|}
DECL|class|InputStreamReadStrategy
specifier|static
class|class
name|InputStreamReadStrategy
extends|extends
name|ReadStrategy
block|{
DECL|field|ins
specifier|private
name|InputStream
name|ins
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init (DomainSocket s)
specifier|public
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ins
operator|=
name|s
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ins
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
DECL|class|DirectByteBufferReadStrategy
specifier|static
class|class
name|DirectByteBufferReadStrategy
extends|extends
name|ReadStrategy
block|{
DECL|field|ch
specifier|private
name|DomainChannel
name|ch
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init (DomainSocket s)
specifier|public
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ch
operator|=
name|s
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|nread
init|=
name|ch
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
return|return
name|nread
return|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|nread
argument_list|)
expr_stmt|;
return|return
name|nread
return|;
block|}
block|}
DECL|class|ArrayBackedByteBufferReadStrategy
specifier|static
class|class
name|ArrayBackedByteBufferReadStrategy
extends|extends
name|ReadStrategy
block|{
DECL|field|ch
specifier|private
name|DomainChannel
name|ch
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init (DomainSocket s)
specifier|public
name|void
name|init
parameter_list|(
name|DomainSocket
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|ch
operator|=
name|s
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|int
name|nread
init|=
name|ch
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
return|return
name|nread
return|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|nread
argument_list|)
expr_stmt|;
return|return
name|nread
return|;
block|}
block|}
comment|/**    * Test a simple client/server interaction.    *    * @throws IOException    */
DECL|method|testClientServer1 (final Class<? extends WriteStrategy> writeStrategyClass, final Class<? extends ReadStrategy> readStrategyClass, final DomainSocket preConnectedSockets[])
name|void
name|testClientServer1
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|WriteStrategy
argument_list|>
name|writeStrategyClass
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ReadStrategy
argument_list|>
name|readStrategyClass
parameter_list|,
specifier|final
name|DomainSocket
name|preConnectedSockets
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock_client_server1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|clientMsg1
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|0x1
block|,
literal|0x2
block|,
literal|0x3
block|,
literal|0x4
block|,
literal|0x5
block|,
literal|0x6
block|}
decl_stmt|;
specifier|final
name|byte
name|serverMsg1
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|0x9
block|,
literal|0x8
block|,
literal|0x7
block|,
literal|0x6
block|,
literal|0x5
block|}
decl_stmt|;
specifier|final
name|byte
name|clientMsg2
init|=
literal|0x45
decl_stmt|;
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Throwable
argument_list|>
name|threadResults
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|DomainSocket
name|serv
init|=
operator|(
name|preConnectedSockets
operator|!=
literal|null
operator|)
condition|?
literal|null
else|:
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|Thread
name|serverThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Run server
name|DomainSocket
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|preConnectedSockets
operator|!=
literal|null
condition|?
name|preConnectedSockets
index|[
literal|0
index|]
else|:
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
name|byte
name|in1
index|[]
init|=
operator|new
name|byte
index|[
name|clientMsg1
operator|.
name|length
index|]
decl_stmt|;
name|ReadStrategy
name|reader
init|=
name|readStrategyClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|reader
operator|.
name|init
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readFully
argument_list|(
name|in1
argument_list|,
literal|0
argument_list|,
name|in1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|clientMsg1
argument_list|,
name|in1
argument_list|)
argument_list|)
expr_stmt|;
name|WriteStrategy
name|writer
init|=
name|writeStrategyClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|serverMsg1
argument_list|)
expr_stmt|;
name|InputStream
name|connInputStream
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|int
name|in2
init|=
name|connInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|clientMsg2
argument_list|,
name|in2
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|threadResults
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|threadResults
operator|.
name|add
argument_list|(
operator|new
name|Success
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serverThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|clientThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|DomainSocket
name|client
init|=
name|preConnectedSockets
operator|!=
literal|null
condition|?
name|preConnectedSockets
index|[
literal|1
index|]
else|:
name|DomainSocket
operator|.
name|connect
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|WriteStrategy
name|writer
init|=
name|writeStrategyClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|clientMsg1
argument_list|)
expr_stmt|;
name|ReadStrategy
name|reader
init|=
name|readStrategyClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|reader
operator|.
name|init
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|byte
name|in1
index|[]
init|=
operator|new
name|byte
index|[
name|serverMsg1
operator|.
name|length
index|]
decl_stmt|;
name|reader
operator|.
name|readFully
argument_list|(
name|in1
argument_list|,
literal|0
argument_list|,
name|in1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|serverMsg1
argument_list|,
name|in1
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|clientOutputStream
init|=
name|client
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|clientOutputStream
operator|.
name|write
argument_list|(
name|clientMsg2
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|threadResults
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|threadResults
operator|.
name|add
argument_list|(
operator|new
name|Success
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Throwable
name|t
init|=
name|threadResults
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|Success
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|+
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|serverThread
operator|.
name|join
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|join
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
if|if
condition|(
name|serv
operator|!=
literal|null
condition|)
block|{
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInStream ()
specifier|public
name|void
name|testClientServerOutStreamInStream
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|InputStreamReadStrategy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInStreamWithSocketpair ()
specifier|public
name|void
name|testClientServerOutStreamInStreamWithSocketpair
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|InputStreamReadStrategy
operator|.
name|class
argument_list|,
name|DomainSocket
operator|.
name|socketpair
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInDbb ()
specifier|public
name|void
name|testClientServerOutStreamInDbb
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|DirectByteBufferReadStrategy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInDbbWithSocketpair ()
specifier|public
name|void
name|testClientServerOutStreamInDbbWithSocketpair
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|DirectByteBufferReadStrategy
operator|.
name|class
argument_list|,
name|DomainSocket
operator|.
name|socketpair
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInAbb ()
specifier|public
name|void
name|testClientServerOutStreamInAbb
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|ArrayBackedByteBufferReadStrategy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testClientServerOutStreamInAbbWithSocketpair ()
specifier|public
name|void
name|testClientServerOutStreamInAbbWithSocketpair
parameter_list|()
throws|throws
name|Exception
block|{
name|testClientServer1
argument_list|(
name|OutputStreamWriteStrategy
operator|.
name|class
argument_list|,
name|ArrayBackedByteBufferReadStrategy
operator|.
name|class
argument_list|,
name|DomainSocket
operator|.
name|socketpair
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|PassedFile
specifier|static
specifier|private
class|class
name|PassedFile
block|{
DECL|field|idx
specifier|private
specifier|final
name|int
name|idx
decl_stmt|;
DECL|field|contents
specifier|private
specifier|final
name|byte
index|[]
name|contents
decl_stmt|;
DECL|field|fis
specifier|private
name|FileInputStream
name|fis
decl_stmt|;
DECL|method|PassedFile (int idx)
specifier|public
name|PassedFile
parameter_list|(
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|idx
operator|=
name|idx
expr_stmt|;
name|this
operator|.
name|contents
operator|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|idx
operator|%
literal|127
argument_list|)
block|}
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|contents
argument_list|,
operator|new
name|File
argument_list|(
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"passed_file"
operator|+
name|idx
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|getInputStream ()
specifier|public
name|FileInputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fis
return|;
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|File
argument_list|(
name|getPath
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkInputStream (FileInputStream fis)
specifier|public
name|void
name|checkInputStream
parameter_list|(
name|FileInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|contents
operator|.
name|length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|fis
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|equals
argument_list|(
name|contents
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
try|try
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**    * Test file descriptor passing.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testFdPassing ()
specifier|public
name|void
name|testFdPassing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PATH
init|=
operator|new
name|File
argument_list|(
name|sockDir
operator|.
name|getDir
argument_list|()
argument_list|,
literal|"test_sock"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|clientMsg1
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|0x11
block|,
literal|0x22
block|,
literal|0x33
block|,
literal|0x44
block|,
literal|0x55
block|,
literal|0x66
block|}
decl_stmt|;
specifier|final
name|byte
name|serverMsg1
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|0x31
block|,
literal|0x30
block|,
literal|0x32
block|,
literal|0x34
block|,
literal|0x31
block|,
literal|0x33
block|,
literal|0x44
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x1
block|}
decl_stmt|;
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Throwable
argument_list|>
name|threadResults
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Throwable
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|DomainSocket
name|serv
init|=
name|DomainSocket
operator|.
name|bindAndListen
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
specifier|final
name|PassedFile
name|passedFiles
index|[]
init|=
operator|new
name|PassedFile
index|[]
block|{
operator|new
name|PassedFile
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|PassedFile
argument_list|(
literal|2
argument_list|)
block|}
decl_stmt|;
specifier|final
name|FileDescriptor
name|passedFds
index|[]
init|=
operator|new
name|FileDescriptor
index|[
name|passedFiles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|passedFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|passedFds
index|[
name|i
index|]
operator|=
name|passedFiles
index|[
name|i
index|]
operator|.
name|getInputStream
argument_list|()
operator|.
name|getFD
argument_list|()
expr_stmt|;
block|}
name|Thread
name|serverThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Run server
name|DomainSocket
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|serv
operator|.
name|accept
argument_list|()
expr_stmt|;
name|byte
name|in1
index|[]
init|=
operator|new
name|byte
index|[
name|clientMsg1
operator|.
name|length
index|]
decl_stmt|;
name|InputStream
name|connInputStream
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|connInputStream
argument_list|,
name|in1
argument_list|,
literal|0
argument_list|,
name|in1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|clientMsg1
argument_list|,
name|in1
argument_list|)
argument_list|)
expr_stmt|;
name|DomainSocket
name|domainConn
init|=
operator|(
name|DomainSocket
operator|)
name|conn
decl_stmt|;
name|domainConn
operator|.
name|sendFileDescriptors
argument_list|(
name|passedFds
argument_list|,
name|serverMsg1
argument_list|,
literal|0
argument_list|,
name|serverMsg1
operator|.
name|length
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|threadResults
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|threadResults
operator|.
name|add
argument_list|(
operator|new
name|Success
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serverThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|clientThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|DomainSocket
name|client
init|=
name|DomainSocket
operator|.
name|connect
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|OutputStream
name|clientOutputStream
init|=
name|client
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|clientInputStream
init|=
name|client
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|clientOutputStream
operator|.
name|write
argument_list|(
name|clientMsg1
argument_list|)
expr_stmt|;
name|DomainSocket
name|domainConn
init|=
operator|(
name|DomainSocket
operator|)
name|client
decl_stmt|;
name|byte
name|in1
index|[]
init|=
operator|new
name|byte
index|[
name|serverMsg1
operator|.
name|length
index|]
decl_stmt|;
name|FileInputStream
name|recvFis
index|[]
init|=
operator|new
name|FileInputStream
index|[
name|passedFds
operator|.
name|length
index|]
decl_stmt|;
name|int
name|r
init|=
name|domainConn
operator|.
name|recvFileInputStreams
argument_list|(
name|recvFis
argument_list|,
name|in1
argument_list|,
literal|0
argument_list|,
name|in1
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|>
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|clientInputStream
argument_list|,
name|in1
argument_list|,
name|r
argument_list|,
name|in1
operator|.
name|length
operator|-
name|r
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|serverMsg1
argument_list|,
name|in1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|passedFds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|recvFis
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|passedFiles
index|[
name|i
index|]
operator|.
name|checkInputStream
argument_list|(
name|recvFis
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileInputStream
name|fis
range|:
name|recvFis
control|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|threadResults
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|threadResults
operator|.
name|add
argument_list|(
operator|new
name|Success
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Throwable
name|t
init|=
name|threadResults
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|Success
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|+
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|serverThread
operator|.
name|join
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|join
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|serv
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|PassedFile
name|pf
range|:
name|passedFiles
control|)
block|{
name|pf
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Run validateSocketPathSecurity    *    * @param str            The path to validate    * @param prefix         A prefix to skip validation for    * @throws IOException    */
DECL|method|testValidateSocketPath (String str, String prefix)
specifier|private
specifier|static
name|void
name|testValidateSocketPath
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|skipComponents
init|=
literal|1
decl_stmt|;
name|File
name|prefixFile
init|=
operator|new
name|File
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|prefixFile
operator|=
name|prefixFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefixFile
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|skipComponents
operator|++
expr_stmt|;
block|}
name|DomainSocket
operator|.
name|validateSocketPathSecurity0
argument_list|(
name|str
argument_list|,
name|skipComponents
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test file descriptor path security.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testFdPassingPathSecurity ()
specifier|public
name|void
name|testFdPassingPathSecurity
parameter_list|()
throws|throws
name|Exception
block|{
name|TemporarySocketDirectory
name|tmp
init|=
operator|new
name|TemporarySocketDirectory
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|prefix
init|=
name|tmp
operator|.
name|getDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"mkdir"
block|,
literal|"-p"
block|,
name|prefix
operator|+
literal|"/foo/bar/baz"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"0700"
block|,
name|prefix
operator|+
literal|"/foo/bar/baz"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"0700"
block|,
name|prefix
operator|+
literal|"/foo/bar"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"0707"
block|,
name|prefix
operator|+
literal|"/foo"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"mkdir"
block|,
literal|"-p"
block|,
name|prefix
operator|+
literal|"/q1/q2"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"0700"
block|,
name|prefix
operator|+
literal|"/q1"
block|}
argument_list|)
expr_stmt|;
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"0700"
block|,
name|prefix
operator|+
literal|"/q1/q2"
block|}
argument_list|)
expr_stmt|;
name|testValidateSocketPath
argument_list|(
name|prefix
operator|+
literal|"/q1/q2"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
try|try
block|{
name|testValidateSocketPath
argument_list|(
name|prefix
operator|+
literal|"/foo/bar/baz"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"world-writable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"/foo'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|testValidateSocketPath
argument_list|(
name|prefix
operator|+
literal|"/nope"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"failed to stat a path "
operator|+
literal|"component: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Root should be secure
name|DomainSocket
operator|.
name|validateSocketPathSecurity0
argument_list|(
literal|"/foo"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testShutdown ()
specifier|public
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|bytesRead
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|DomainSocket
index|[]
name|socks
init|=
name|DomainSocket
operator|.
name|socketpair
argument_list|()
decl_stmt|;
name|Runnable
name|reader
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|int
name|ret
init|=
name|socks
index|[
literal|1
index|]
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
return|return;
name|bytesRead
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DomainSocket
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"reader error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|readerThread
init|=
operator|new
name|Thread
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|readerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|socks
index|[
literal|0
index|]
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|socks
index|[
literal|0
index|]
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|socks
index|[
literal|0
index|]
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|readerThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|socks
index|[
literal|0
index|]
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|readerThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|bytesRead
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|socks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

