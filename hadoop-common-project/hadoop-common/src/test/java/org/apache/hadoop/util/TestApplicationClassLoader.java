begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
operator|.
name|constructUrlsFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ApplicationClassLoader
operator|.
name|isSystemClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
DECL|class|TestApplicationClassLoader
specifier|public
class|class
name|TestApplicationClassLoader
block|{
DECL|field|testDir
specifier|private
specifier|static
name|File
name|testDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"appclassloader"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConstructUrlsFromClasspath ()
specifier|public
name|void
name|testConstructUrlsFromClasspath
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Create file"
argument_list|,
name|file
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Make dir"
argument_list|,
name|dir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarsDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"jarsdir"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Make jarsDir"
argument_list|,
name|jarsDir
operator|.
name|mkdir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|nonJarFile
init|=
operator|new
name|File
argument_list|(
name|jarsDir
argument_list|,
literal|"nonjar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Create non-jar file"
argument_list|,
name|nonJarFile
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|jarsDir
argument_list|,
literal|"a.jar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Create jar file"
argument_list|,
name|jarFile
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|nofile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"nofile"
argument_list|)
decl_stmt|;
comment|// don't create nofile
name|StringBuilder
name|cp
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|cp
operator|.
name|append
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|jarsDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*"
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|nofile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|nofile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/*"
argument_list|)
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
name|URL
index|[]
name|urls
init|=
name|constructUrlsFromClasspath
argument_list|(
name|cp
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|urls
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|urls
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dir
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|urls
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jarFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|urls
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// nofile should be ignored
block|}
annotation|@
name|Test
DECL|method|testIsSystemClass ()
specifier|public
name|void
name|testIsSystemClass
parameter_list|()
block|{
name|testIsSystemClassInternal
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsSystemNestedClass ()
specifier|public
name|void
name|testIsSystemNestedClass
parameter_list|()
block|{
name|testIsSystemClassInternal
argument_list|(
literal|"$Klass"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsSystemClassInternal (String nestedClass)
specifier|private
name|void
name|testIsSystemClassInternal
parameter_list|(
name|String
name|nestedClass
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example.Foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSystemClass
argument_list|(
literal|"/org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example.Foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSystemClass
argument_list|(
literal|"net.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example.,net.example."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"-org.example.Foo,org.example."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Bar"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"-org.example.Foo.,org.example."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example.,-org.example.Foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSystemClass
argument_list|(
literal|"org.example.Foo"
operator|+
name|nestedClass
argument_list|,
name|classes
argument_list|(
literal|"org.example.Foo,-org.example.Foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|classes (String classes)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|(
name|String
name|classes
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|classes
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testGetResource ()
specifier|public
name|void
name|testGetResource
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|testJar
init|=
name|makeTestJar
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|ClassLoader
name|currentClassLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|appClassloader
init|=
operator|new
name|ApplicationClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|testJar
block|}
argument_list|,
name|currentClassLoader
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Resource should be null for current classloader"
argument_list|,
name|currentClassLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"resource.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|appClassloader
operator|.
name|getResourceAsStream
argument_list|(
literal|"resource.txt"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Resource should not be null for app classloader"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|makeTestJar ()
specifier|private
name|File
name|makeTestJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|jarFile
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test.jar"
argument_list|)
decl_stmt|;
name|JarOutputStream
name|out
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jarFile
argument_list|)
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"resource.txt"
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jarFile
return|;
block|}
block|}
end_class

end_unit

