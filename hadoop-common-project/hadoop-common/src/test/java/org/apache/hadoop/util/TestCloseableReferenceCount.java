begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestCloseableReferenceCount
specifier|public
class|class
name|TestCloseableReferenceCount
extends|extends
name|HadoopTestBase
block|{
annotation|@
name|Test
DECL|method|testReference ()
specifier|public
name|void
name|testReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|clr
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnreference ()
specifier|public
name|void
name|testUnreference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"New reference count should not equal STATUS_CLOSED_MASK"
argument_list|,
name|clr
operator|.
name|unreference
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|clr
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnreferenceCheckClosed ()
specifier|public
name|void
name|testUnreferenceCheckClosed
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|clr
operator|.
name|unreferenceCheckClosed
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect reference count"
argument_list|,
literal|1
argument_list|,
name|clr
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetClosed ()
specifier|public
name|void
name|testSetClosed
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Reference count should be open"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|.
name|setClosed
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reference count should be closed"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClosedChannelException
operator|.
name|class
argument_list|)
DECL|method|testReferenceClosedReference ()
specifier|public
name|void
name|testReferenceClosedReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|clr
operator|.
name|setClosed
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reference count should be closed"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClosedChannelException
operator|.
name|class
argument_list|)
DECL|method|testUnreferenceClosedReference ()
specifier|public
name|void
name|testUnreferenceClosedReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|clr
operator|.
name|reference
argument_list|()
expr_stmt|;
name|clr
operator|.
name|setClosed
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reference count should be closed"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|.
name|unreferenceCheckClosed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ClosedChannelException
operator|.
name|class
argument_list|)
DECL|method|testDoubleClose ()
specifier|public
name|void
name|testDoubleClose
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|CloseableReferenceCount
name|clr
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Reference count should be open"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|.
name|setClosed
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reference count should be closed"
argument_list|,
name|clr
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|.
name|setClosed
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

