begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.viewfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|checkFileLinkStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|checkFileStatus
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|exists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|isDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|isFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|Constants
operator|.
name|PERMISSION_555
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|AbstractFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|fileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|local
operator|.
name|LocalConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|viewfs
operator|.
name|ViewFs
operator|.
name|MountPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of tests for the {@link ViewFs}.  * This test should be used for testing ViewFs that has mount links to   * a target file system such  localFs or Hdfs etc.   *</p>  *<p>  * To test a given target file system create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fcTarget</code>   * to point to the file system to which you want the mount targets  *   * Since this a junit 4 you can also do a single setup before   * the start of any tests.  * E.g.  *     @BeforeClass   public static void clusterSetupAtBegining()  *     @AfterClass    public static void ClusterShutdownAtEnd()  *</p>  */
end_comment

begin_class
DECL|class|ViewFsBaseTest
specifier|abstract
specifier|public
class|class
name|ViewFsBaseTest
block|{
DECL|field|fcView
name|FileContext
name|fcView
decl_stmt|;
comment|// the view file system - the mounts are here
DECL|field|fcTarget
name|FileContext
name|fcTarget
decl_stmt|;
comment|// the target file system - the mount will point here
DECL|field|targetTestRoot
name|Path
name|targetTestRoot
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|xfcViewWithAuthority
name|FileContext
name|xfcViewWithAuthority
decl_stmt|;
comment|// same as fsView but with authority
DECL|field|schemeWithAuthority
name|URI
name|schemeWithAuthority
decl_stmt|;
DECL|field|fileContextTestHelper
specifier|final
name|FileContextTestHelper
name|fileContextTestHelper
init|=
name|createFileContextHelper
argument_list|()
decl_stmt|;
DECL|method|createFileContextHelper ()
specifier|protected
name|FileContextTestHelper
name|createFileContextHelper
parameter_list|()
block|{
return|return
operator|new
name|FileContextTestHelper
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeTargetTestRoot
argument_list|()
expr_stmt|;
comment|// Make  user and data dirs - we creates links to them in the mount table
name|fcTarget
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fcTarget
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fcTarget
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fcTarget
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"aFile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we use the mount fs to set links to user and dir
comment|// in the test root
comment|// Set up the defaultMT in the config with our mount point links
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/targetRoot"
argument_list|,
name|targetTestRoot
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/user"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/user2"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/data"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/danglingLink"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"missingTarget"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|conf
argument_list|,
literal|"/linkToAFile"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"aFile"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|fcView
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Also try viewfs://default/    - note authority is name of mount table
block|}
DECL|method|initializeTargetTestRoot ()
name|void
name|initializeTargetTestRoot
parameter_list|()
throws|throws
name|IOException
block|{
name|targetTestRoot
operator|=
name|fileContextTestHelper
operator|.
name|getAbsoluteTestRootPath
argument_list|(
name|fcTarget
argument_list|)
expr_stmt|;
comment|// In case previous test was killed before cleanup
name|fcTarget
operator|.
name|delete
argument_list|(
name|targetTestRoot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fcTarget
operator|.
name|mkdir
argument_list|(
name|targetTestRoot
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fcTarget
operator|.
name|delete
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcTarget
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMountPoints ()
specifier|public
name|void
name|testGetMountPoints
parameter_list|()
block|{
name|ViewFs
name|viewfs
init|=
operator|(
name|ViewFs
operator|)
name|fcView
operator|.
name|getDefaultFileSystem
argument_list|()
decl_stmt|;
name|MountPoint
index|[]
name|mountPoints
init|=
name|viewfs
operator|.
name|getMountPoints
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|mountPoints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedDelegationTokenCount ()
name|int
name|getExpectedDelegationTokenCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**    * This default implementation is when viewfs has mount points    * into file systems, such as LocalFs that do no have delegation tokens.    * It should be overridden for when mount points into hdfs.    */
annotation|@
name|Test
DECL|method|testGetDelegationTokens ()
specifier|public
name|void
name|testGetDelegationTokens
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|delTokens
init|=
name|fcView
operator|.
name|getDelegationTokens
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"sanjay"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getExpectedDelegationTokenCount
argument_list|()
argument_list|,
name|delTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicPaths ()
specifier|public
name|void
name|testBasicPaths
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|fcView
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fcView
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fcView
operator|.
name|getHomeDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
literal|null
argument_list|)
argument_list|,
name|fcView
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test modify operations (create, mkdir, delete, etc)     * on the mount file system where the pathname references through    * the mount points.  Hence these operation will modify the target    * file system.    *     * Verify the operation via mountfs (ie fc) and *also* via the    *  target file system (ie fclocal) that the mount link points-to.    */
annotation|@
name|Test
DECL|method|testOperationsThroughMountLinks ()
specifier|public
name|void
name|testOperationsThroughMountLinks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create file
name|fileContextTestHelper
operator|.
name|createFileNonRecursive
argument_list|(
name|fcView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Create file should be file"
argument_list|,
name|isFile
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|isFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after delete"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target File should not exist after delete"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with a 2 component dirs
name|fileContextTestHelper
operator|.
name|createFileNonRecursive
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be type file"
argument_list|,
name|isFile
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should be type file"
argument_list|,
name|isFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"File should not exist after deletion"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target should not exist after deletion"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create file with a 3 component dirs
name|fileContextTestHelper
operator|.
name|createFileNonRecursive
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be of type file"
argument_list|,
name|isFile
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should also be type file"
argument_list|,
name|isFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Recursive Create file with missing dirs
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2/missingDir/miss2/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Created file should be of type file"
argument_list|,
name|isFile
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/missingDir/miss2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of created file should also be type file"
argument_list|,
name|isFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2/missingDir/miss2/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created file
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Deleted File should not exist"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Target of deleted file should not exist"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// mkdir
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New dir should be type dir"
argument_list|,
name|isDir
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of new dir should be of type dir"
argument_list|,
name|isDir
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirX/dirY"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"New dir should be type dir"
argument_list|,
name|isDir
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target of new dir should be of type dir"
argument_list|,
name|isDir
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the created dir
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Deleted File should not exist"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Deleted Target should not exist"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete should succeed"
argument_list|,
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Deleted File should not exist"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Deleted Target should not exist"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename a file
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isFile
argument_list|(
name|fcView
argument_list|,
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/fooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirFooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist"
argument_list|,
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renamed src should not exist in target"
argument_list|,
name|exists
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as dir"
argument_list|,
name|isDir
argument_list|(
name|fcView
argument_list|,
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renamed dest should  exist as dir in target"
argument_list|,
name|isDir
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirFooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make a directory under a directory that's mounted from the root of another FS
name|fcView
operator|.
name|mkdir
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/targetRoot/dirFoo"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|exists
argument_list|(
name|fcView
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/targetRoot/dirFoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|dirFooPresent
init|=
literal|false
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|dirContents
init|=
name|fcView
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/targetRoot/"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|dirContents
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|dirContents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dirFoo"
argument_list|)
condition|)
block|{
name|dirFooPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirFooPresent
argument_list|)
expr_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|dirLocatedContents
init|=
name|fcView
operator|.
name|listLocatedStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/targetRoot/"
argument_list|)
argument_list|)
decl_stmt|;
name|dirFooPresent
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|dirLocatedContents
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|dirLocatedContents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dirFoo"
argument_list|)
condition|)
block|{
name|dirFooPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dirFooPresent
argument_list|)
expr_stmt|;
block|}
comment|// rename across mount points that point to same target also fail
annotation|@
name|Test
DECL|method|testRenameAcrossMounts1 ()
specifier|public
name|void
name|testRenameAcrossMounts1
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/user2/fooBarBar"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|fail
argument_list|(
literal|"IOException is not thrown on rename operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Renames across Mount points not supported"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// rename across mount points fail if the mount link targets are different
comment|// even if the targets are part of the same target FS
annotation|@
name|Test
DECL|method|testRenameAcrossMounts2 ()
specifier|public
name|void
name|testRenameAcrossMounts2
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/data/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|fail
argument_list|(
literal|"IOException is not thrown on rename operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Renames across Mount points not supported"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// RenameStrategy SAME_TARGET_URI_ACROSS_MOUNTPOINT enabled
comment|// to rename across mount points that point to same target URI
annotation|@
name|Test
DECL|method|testRenameAcrossMounts3 ()
specifier|public
name|void
name|testRenameAcrossMounts3
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|CONFIG_VIEWFS_RENAME_STRATEGY
argument_list|,
name|ViewFileSystem
operator|.
name|RenameStrategy
operator|.
name|SAME_TARGET_URI_ACROSS_MOUNTPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
name|fcView2
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|String
name|user1Path
init|=
literal|"/user/foo"
decl_stmt|;
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView2
argument_list|,
name|user1Path
argument_list|)
expr_stmt|;
name|String
name|user2Path
init|=
literal|"/user2/fooBarBar"
decl_stmt|;
name|Path
name|user2Dst
init|=
operator|new
name|Path
argument_list|(
name|user2Path
argument_list|)
decl_stmt|;
name|fcView2
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|user1Path
argument_list|)
argument_list|,
name|user2Dst
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fcView2
argument_list|,
literal|"src should not exist after rename"
argument_list|,
operator|new
name|Path
argument_list|(
name|user1Path
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fcTarget
argument_list|,
literal|"src should not exist after rename"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fcView2
argument_list|,
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView2
argument_list|,
name|user2Path
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fcTarget
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/fooBarBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// RenameStrategy SAME_FILESYSTEM_ACROSS_MOUNTPOINT enabled
comment|// to rename across mount points if the mount link targets are different
comment|// but are part of the same target FS
annotation|@
name|Test
DECL|method|testRenameAcrossMounts4 ()
specifier|public
name|void
name|testRenameAcrossMounts4
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|CONFIG_VIEWFS_RENAME_STRATEGY
argument_list|,
name|ViewFileSystem
operator|.
name|RenameStrategy
operator|.
name|SAME_FILESYSTEM_ACROSS_MOUNTPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
name|fcView2
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|String
name|userPath
init|=
literal|"/user/foo"
decl_stmt|;
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView2
argument_list|,
name|userPath
argument_list|)
expr_stmt|;
name|String
name|anotherMountPath
init|=
literal|"/data/fooBar"
decl_stmt|;
name|Path
name|anotherDst
init|=
operator|new
name|Path
argument_list|(
name|anotherMountPath
argument_list|)
decl_stmt|;
name|fcView2
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|userPath
argument_list|)
argument_list|,
name|anotherDst
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fcView2
argument_list|,
literal|"src should not exist after rename"
argument_list|,
operator|new
name|Path
argument_list|(
name|userPath
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fcTarget
argument_list|,
literal|"src should not exist after rename"
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fcView2
argument_list|,
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView2
argument_list|,
name|anotherMountPath
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertIsFile
argument_list|(
name|fcView2
argument_list|,
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data/fooBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|SupportsBlocks
specifier|static
specifier|protected
name|boolean
name|SupportsBlocks
init|=
literal|false
decl_stmt|;
comment|//  local fs use 1 block
comment|// override for HDFS
annotation|@
name|Test
DECL|method|testGetBlockLocations ()
specifier|public
name|void
name|testGetBlockLocations
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|targetFilePath
init|=
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data/largeFile"
argument_list|)
decl_stmt|;
name|FileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcTarget
argument_list|,
name|targetFilePath
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Path
name|viewFilePath
init|=
operator|new
name|Path
argument_list|(
literal|"/data/largeFile"
argument_list|)
decl_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
name|viewFilePath
operator|.
name|toString
argument_list|()
argument_list|,
name|fileType
operator|.
name|isFile
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|viewBL
init|=
name|fcView
operator|.
name|getFileBlockLocations
argument_list|(
name|viewFilePath
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SupportsBlocks
condition|?
literal|10
else|:
literal|1
argument_list|,
name|viewBL
operator|.
name|length
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|targetBL
init|=
name|fcTarget
operator|.
name|getFileBlockLocations
argument_list|(
name|targetFilePath
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
decl_stmt|;
name|compareBLs
argument_list|(
name|viewBL
argument_list|,
name|targetBL
argument_list|)
expr_stmt|;
comment|// Same test but now get it via the FileStatus Parameter
name|fcView
operator|.
name|getFileBlockLocations
argument_list|(
name|viewFilePath
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
expr_stmt|;
name|targetBL
operator|=
name|fcTarget
operator|.
name|getFileBlockLocations
argument_list|(
name|targetFilePath
argument_list|,
literal|0
argument_list|,
literal|10240
operator|+
literal|100
argument_list|)
expr_stmt|;
name|compareBLs
argument_list|(
name|viewBL
argument_list|,
name|targetBL
argument_list|)
expr_stmt|;
block|}
DECL|method|compareBLs (BlockLocation[] viewBL, BlockLocation[] targetBL)
name|void
name|compareBLs
parameter_list|(
name|BlockLocation
index|[]
name|viewBL
parameter_list|,
name|BlockLocation
index|[]
name|targetBL
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|targetBL
operator|.
name|length
argument_list|,
name|viewBL
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockLocation
name|vbl
range|:
name|viewBL
control|)
block|{
name|assertThat
argument_list|(
name|vbl
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|targetBL
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|vbl
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|targetBL
index|[
name|i
index|]
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|vbl
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|targetBL
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Test "readOps" (e.g. list, listStatus)     * on internal dirs of mount table    * These operations should succeed.    */
comment|// test list on internal dirs of mount table
annotation|@
name|Test
DECL|method|testListOnInternalDirsOfMountTable ()
specifier|public
name|void
name|testListOnInternalDirsOfMountTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// list on Slash
name|FileStatus
index|[]
name|dirPaths
init|=
name|fcView
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|fs
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/user"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/data"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InternalDirs should appear as dir"
argument_list|,
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/danglingLink"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/linkToAFile"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
comment|// list on internal dir
name|dirPaths
operator|=
name|fcView
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dirPaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/internalDir2"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InternalDirs should appear as dir"
argument_list|,
name|fs
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|fileContextTestHelper
operator|.
name|containsPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
name|dirPaths
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"A mount should appear as symlink"
argument_list|,
name|fs
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileStatusOnMountLink ()
specifier|public
name|void
name|testFileStatusOnMountLink
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Slash should appear as dir"
argument_list|,
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/user"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/data"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileStatus
argument_list|(
name|fcView
argument_list|,
literal|"/linkToAFile"
argument_list|,
name|fileType
operator|.
name|isFile
argument_list|)
expr_stmt|;
try|try
block|{
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/danglingLink"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Excepted a not found exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// as excepted
block|}
block|}
annotation|@
name|Test
DECL|method|testGetFileChecksum ()
specifier|public
name|void
name|testGetFileChecksum
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
name|AbstractFileSystem
name|mockAFS
init|=
name|mock
argument_list|(
name|AbstractFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
name|res
init|=
operator|new
name|InodeTree
operator|.
name|ResolveResult
argument_list|<
name|AbstractFileSystem
argument_list|>
argument_list|(
literal|null
argument_list|,
name|mockAFS
argument_list|,
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
literal|"someFile"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|InodeTree
argument_list|<
name|AbstractFileSystem
argument_list|>
name|fsState
init|=
name|mock
argument_list|(
name|InodeTree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsState
operator|.
name|resolve
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|ViewFs
name|vfs
init|=
operator|new
name|ViewFs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|vfs
operator|.
name|fsState
operator|=
name|fsState
expr_stmt|;
name|vfs
operator|.
name|getFileChecksum
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/tmp/someFile"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAFS
argument_list|)
operator|.
name|getFileChecksum
argument_list|(
operator|new
name|Path
argument_list|(
literal|"someFile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testgetFSonDanglingLink ()
specifier|public
name|void
name|testgetFSonDanglingLink
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/danglingLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testgetFSonNonExistingInternalDir ()
specifier|public
name|void
name|testgetFSonNonExistingInternalDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testgetFileLinkStatus ()
specifier|public
name|void
name|testgetFileLinkStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/user"
argument_list|,
name|fileType
operator|.
name|isSymlink
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/data"
argument_list|,
name|fileType
operator|.
name|isSymlink
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|,
name|fileType
operator|.
name|isSymlink
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|,
name|fileType
operator|.
name|isSymlink
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/linkToAFile"
argument_list|,
name|fileType
operator|.
name|isSymlink
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
name|checkFileLinkStatus
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/internalDir2"
argument_list|,
name|fileType
operator|.
name|isDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testgetFileLinkStatusonNonExistingInternalDir ()
specifier|public
name|void
name|testgetFileLinkStatusonNonExistingInternalDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getFileLinkStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSymlinkTarget ()
specifier|public
name|void
name|testSymlinkTarget
parameter_list|()
throws|throws
name|IOException
block|{
comment|// get link target`
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/linkToAFile"
argument_list|)
argument_list|)
argument_list|,
operator|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"aFile"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testgetLinkTargetOnNonLink ()
specifier|public
name|void
name|testgetLinkTargetOnNonLink
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getLinkTarget
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test resolvePath(p)     * TODO In the tests below replace     * fcView.getDefaultFileSystem().resolvePath() fcView.resolvePath()    */
annotation|@
name|Test
DECL|method|testResolvePathInternalPaths ()
specifier|public
name|void
name|testResolvePathInternalPaths
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvePathMountPoints ()
specifier|public
name|void
name|testResolvePathMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir2"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"dir3"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/internalDir2/linkToDir3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResolvePathThroughMountPoints ()
specifier|public
name|void
name|testResolvePathThroughMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/user/foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/foo"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirX/dirY"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"user/dirX/dirY"
argument_list|)
argument_list|,
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/dirY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathDanglingLink ()
specifier|public
name|void
name|testResolvePathDanglingLink
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/danglingLink"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathMissingThroughMountPoints ()
specifier|public
name|void
name|testResolvePathMissingThroughMountPoints
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testResolvePathMissingThroughMountPoints2 ()
specifier|public
name|void
name|testResolvePathMissingThroughMountPoints2
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/user/dirX"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|resolvePath
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/dirX/nonExisting"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test modify operations (create, mkdir, rename, etc)     * on internal dirs of mount table    * These operations should fail since the mount table is read-only or    * because the internal dir that it is trying to create already    * exits.    */
comment|// Mkdir on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirSlash ()
specifier|public
name|void
name|testInternalMkdirSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirExisting1 ()
specifier|public
name|void
name|testInternalMkdirExisting1
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirExisting2 ()
specifier|public
name|void
name|testInternalMkdirExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirNew ()
specifier|public
name|void
name|testInternalMkdirNew
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/dirNew"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalMkdirNew2 ()
specifier|public
name|void
name|testInternalMkdirNew2
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|mkdir
argument_list|(
name|fileContextTestHelper
operator|.
name|getTestRootPath
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/dirNew"
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Create on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreate1 ()
specifier|public
name|void
name|testInternalCreate1
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFileNonRecursive
argument_list|(
name|fcView
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// 1 component
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreate2 ()
specifier|public
name|void
name|testInternalCreate2
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 2 component
name|fileContextTestHelper
operator|.
name|createFileNonRecursive
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir ()
specifier|public
name|void
name|testInternalCreateMissingDir
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/missingDir/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir2 ()
specifier|public
name|void
name|testInternalCreateMissingDir2
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/missingDir/miss2/foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateMissingDir3 ()
specifier|public
name|void
name|testInternalCreateMissingDir3
parameter_list|()
throws|throws
name|IOException
block|{
name|fileContextTestHelper
operator|.
name|createFile
argument_list|(
name|fcView
argument_list|,
literal|"/internalDir/miss2/foo"
argument_list|)
expr_stmt|;
block|}
comment|// Delete on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteNonExisting ()
specifier|public
name|void
name|testInternalDeleteNonExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/NonExisting"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FileNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteNonExisting2 ()
specifier|public
name|void
name|testInternalDeleteNonExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/NonExisting"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteExisting ()
specifier|public
name|void
name|testInternalDeleteExisting
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteExisting2 ()
specifier|public
name|void
name|testInternalDeleteExisting2
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Delete of link to dir should succeed"
argument_list|,
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Rename on internal mount table should fail
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename1 ()
specifier|public
name|void
name|testInternalRename1
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/newDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename2 ()
specifier|public
name|void
name|testInternalRename2
parameter_list|()
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"linkTODir2 should be a dir"
argument_list|,
name|fcView
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/dir1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRename3 ()
specifier|public
name|void
name|testInternalRename3
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRenameToSlash ()
specifier|public
name|void
name|testInternalRenameToSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir/linkToDir2/foo"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRenameFromSlash ()
specifier|public
name|void
name|testInternalRenameFromSlash
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetOwner ()
specifier|public
name|void
name|testInternalSetOwner
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|setOwner
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the behavior of ACL operations on paths above the root of    * any mount table entry.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalModifyAclEntries ()
specifier|public
name|void
name|testInternalModifyAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|modifyAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveAclEntries ()
specifier|public
name|void
name|testInternalRemoveAclEntries
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|removeAclEntries
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveDefaultAcl ()
specifier|public
name|void
name|testInternalRemoveDefaultAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|removeDefaultAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveAcl ()
specifier|public
name|void
name|testInternalRemoveAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|removeAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetAcl ()
specifier|public
name|void
name|testInternalSetAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|setAcl
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInternalGetAclStatus ()
specifier|public
name|void
name|testInternalGetAclStatus
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|AclStatus
name|aclStatus
init|=
name|fcView
operator|.
name|getAclStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|currentUser
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aclStatus
operator|.
name|getEntries
argument_list|()
argument_list|,
name|AclUtil
operator|.
name|getMinimalAcl
argument_list|(
name|PERMISSION_555
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclStatus
operator|.
name|isStickyBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalSetXAttr ()
specifier|public
name|void
name|testInternalSetXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|setXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttr ()
specifier|public
name|void
name|testInternalGetXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttrs ()
specifier|public
name|void
name|testInternalGetXAttrs
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalGetXAttrsWithNames ()
specifier|public
name|void
name|testInternalGetXAttrsWithNames
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|getXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NotInMountpointException
operator|.
name|class
argument_list|)
DECL|method|testInternalListXAttr ()
specifier|public
name|void
name|testInternalListXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|listXAttrs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRemoveXAttr ()
specifier|public
name|void
name|testInternalRemoveXAttr
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|removeXAttr
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"xattrName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateSnapshot1 ()
specifier|public
name|void
name|testInternalCreateSnapshot1
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalCreateSnapshot2 ()
specifier|public
name|void
name|testInternalCreateSnapshot2
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|createSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalRenameSnapshot ()
specifier|public
name|void
name|testInternalRenameSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|renameSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"snapOldName"
argument_list|,
literal|"snapNewName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
DECL|method|testInternalDeleteSnapshot ()
specifier|public
name|void
name|testInternalDeleteSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|fcView
operator|.
name|deleteSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|,
literal|"snap1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOwnerForInternalDir ()
specifier|public
name|void
name|testOwnerForInternalDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|URISyntaxException
block|{
specifier|final
name|UserGroupInformation
name|userUgi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"user@HADOOP.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hadoop"
block|}
argument_list|)
decl_stmt|;
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|doAsUserName
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|doAsUserName
argument_list|,
literal|"user@HADOOP.COM"
argument_list|)
expr_stmt|;
name|FileContext
name|viewFS
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|FsConstants
operator|.
name|VIEWFS_URI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|viewFS
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRespectsServerDefaults ()
specifier|public
name|void
name|testRespectsServerDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|FsServerDefaults
name|targetDefs
init|=
name|fcTarget
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getServerDefaults
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|FsServerDefaults
name|viewDefs
init|=
name|fcView
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getServerDefaults
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getTrashInterval
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getTrashInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
name|fcView
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/data/file"
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fcTarget
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|targetTestRoot
argument_list|,
literal|"data/file"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|targetDefs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|stat
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServerDefaultsInternalDir ()
specifier|public
name|void
name|testServerDefaultsInternalDir
parameter_list|()
throws|throws
name|Exception
block|{
name|FsServerDefaults
name|localDefs
init|=
name|LocalConfigKeys
operator|.
name|getServerDefaults
argument_list|()
decl_stmt|;
name|FsServerDefaults
name|viewDefs
init|=
name|fcView
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getServerDefaults
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/internalDir"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getEncryptDataTransfer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getTrashInterval
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getTrashInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|localDefs
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|viewDefs
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Confirm that listLocatedStatus is delegated properly to the underlying
comment|// AbstractFileSystem to allow for optimizations
annotation|@
name|Test
DECL|method|testListLocatedStatus ()
specifier|public
name|void
name|testListLocatedStatus
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|mockTarget
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs://listLocatedStatus/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|mountPoint
init|=
operator|new
name|Path
argument_list|(
literal|"/fooMount"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|setClass
argument_list|(
literal|"fs.AbstractFileSystem.mockfs.impl"
argument_list|,
name|MockFs
operator|.
name|class
argument_list|,
name|AbstractFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|newConf
argument_list|,
name|mountPoint
operator|.
name|toString
argument_list|()
argument_list|,
name|mockTarget
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"viewfs:///"
argument_list|)
argument_list|,
name|newConf
argument_list|)
operator|.
name|listLocatedStatus
argument_list|(
name|mountPoint
argument_list|)
expr_stmt|;
name|AbstractFileSystem
name|mockFs
init|=
name|MockFs
operator|.
name|getMockFs
argument_list|(
name|mockTarget
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|listLocatedStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|mockTarget
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|listStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|listStatusIterator
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Confirm that listStatus is delegated properly to the underlying
comment|// AbstractFileSystem's listStatusIterator to allow for optimizations
annotation|@
name|Test
DECL|method|testListStatusIterator ()
specifier|public
name|void
name|testListStatusIterator
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|mockTarget
init|=
operator|new
name|Path
argument_list|(
literal|"mockfs://listStatusIterator/foo"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|mountPoint
init|=
operator|new
name|Path
argument_list|(
literal|"/fooMount"
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|setClass
argument_list|(
literal|"fs.AbstractFileSystem.mockfs.impl"
argument_list|,
name|MockFs
operator|.
name|class
argument_list|,
name|AbstractFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|ConfigUtil
operator|.
name|addLink
argument_list|(
name|newConf
argument_list|,
name|mountPoint
operator|.
name|toString
argument_list|()
argument_list|,
name|mockTarget
operator|.
name|toUri
argument_list|()
argument_list|)
expr_stmt|;
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"viewfs:///"
argument_list|)
argument_list|,
name|newConf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|mountPoint
argument_list|)
expr_stmt|;
name|AbstractFileSystem
name|mockFs
init|=
name|MockFs
operator|.
name|getMockFs
argument_list|(
name|mockTarget
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|listStatusIterator
argument_list|(
operator|new
name|Path
argument_list|(
name|mockTarget
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|listStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFs
specifier|static
class|class
name|MockFs
extends|extends
name|ChRootedFs
block|{
DECL|field|fsCache
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractFileSystem
argument_list|>
name|fsCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MockFs (URI uri, Configuration conf)
name|MockFs
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|getMockFs
argument_list|(
name|uri
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockFs (URI uri)
specifier|static
name|AbstractFileSystem
name|getMockFs
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|AbstractFileSystem
name|mockFs
init|=
name|fsCache
operator|.
name|get
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mockFs
operator|==
literal|null
condition|)
block|{
name|mockFs
operator|=
name|mock
argument_list|(
name|AbstractFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUriDefaultPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUriPath
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|isValidName
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsCache
operator|.
name|put
argument_list|(
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|mockFs
argument_list|)
expr_stmt|;
block|}
return|return
name|mockFs
return|;
block|}
block|}
block|}
end_class

end_unit

