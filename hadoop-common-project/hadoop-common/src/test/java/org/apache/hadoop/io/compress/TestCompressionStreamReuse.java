begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|TestCompressionStreamReuse
specifier|public
class|class
name|TestCompressionStreamReuse
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCompressionStreamReuse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|10000
decl_stmt|;
DECL|field|seed
specifier|private
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testBZip2Codec ()
specifier|public
name|void
name|testBZip2Codec
parameter_list|()
throws|throws
name|IOException
block|{
name|resetStateTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCompressStreamReuse ()
specifier|public
name|void
name|testGzipCompressStreamReuse
parameter_list|()
throws|throws
name|IOException
block|{
name|resetStateTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZStandardCompressStreamReuse ()
specifier|public
name|void
name|testZStandardCompressStreamReuse
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeTrue
argument_list|(
name|ZStandardCodec
operator|.
name|isNativeCodeLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|resetStateTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.ZStandardCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCompressStreamReuseWithParam ()
specifier|public
name|void
name|testGzipCompressStreamReuseWithParam
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|conf
argument_list|,
name|CompressionStrategy
operator|.
name|HUFFMAN_ONLY
argument_list|)
expr_stmt|;
name|resetStateTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
DECL|method|resetStateTest (Configuration conf, int seed, int count, String codecClass)
specifier|private
name|void
name|resetStateTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|seed
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|codecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a Codec object of type: "
operator|+
name|codecClass
argument_list|)
expr_stmt|;
comment|// Generate data
name|DataOutputBuffer
name|data
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
comment|// Compress data
name|DataOutputBuffer
name|compressedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataOutputStream
name|deflateOut
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|compressedDataBuffer
argument_list|)
argument_list|)
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|deflateOut
argument_list|)
decl_stmt|;
name|deflateFilter
operator|.
name|write
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished compressing data"
argument_list|)
expr_stmt|;
comment|// reset deflator
name|deflateFilter
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished reseting deflator"
argument_list|)
expr_stmt|;
comment|// re-generate data
name|data
operator|.
name|reset
argument_list|()
expr_stmt|;
name|generator
operator|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|DataInputBuffer
name|originalData
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|DataInputStream
name|originalIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
decl_stmt|;
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-compress data
name|compressedDataBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|deflateOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|compressedDataBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|deflateFilter
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|deflateOut
argument_list|)
expr_stmt|;
name|deflateFilter
operator|.
name|write
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished re-compressing data"
argument_list|)
expr_stmt|;
comment|// De-compress data
name|DataInputBuffer
name|deCompressedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inflateFilter
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|deCompressedDataBuffer
argument_list|)
decl_stmt|;
name|DataInputStream
name|inflateIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inflateFilter
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RandomDatum
name|k1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|v1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|RandomDatum
name|k2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
name|v2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"original and compressed-then-decompressed-output not equal"
argument_list|,
name|k1
operator|.
name|equals
argument_list|(
name|k2
argument_list|)
operator|&&
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed checking "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

