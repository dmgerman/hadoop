begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test creating files, overwrite options&c  */
end_comment

begin_class
DECL|class|AbstractContractDeleteTest
specifier|public
specifier|abstract
class|class
name|AbstractContractDeleteTest
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Test
DECL|method|testDeleteEmptyDirNonRecursive ()
specifier|public
name|void
name|testDeleteEmptyDirNonRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteEmptyDirNonRecursive"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteEmptyDirRecursive ()
specifier|public
name|void
name|testDeleteEmptyDirRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteEmptyDirRecursive"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonexistentPathRecursive ()
specifier|public
name|void
name|testDeleteNonexistentPathRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteNonexistentPathRecursive"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"leftover"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rejectRootOperation
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Returned true attempting to delete"
operator|+
literal|" a nonexistent path "
operator|+
name|path
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonexistentPathNonRecursive ()
specifier|public
name|void
name|testDeleteNonexistentPathNonRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteNonexistentPathNonRecursive"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"leftover"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rejectRootOperation
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Returned true attempting to recursively delete"
operator|+
literal|" a nonexistent path "
operator|+
name|path
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonEmptyDirNonRecursive ()
specifier|public
name|void
name|testDeleteNonEmptyDirNonRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteNonEmptyDirNonRecursive"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"childfile"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|writeTextFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|file
argument_list|,
literal|"goodbye, world"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|ContractTestUtils
operator|.
name|rejectRootOperation
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"non recursive delete should have raised an exception,"
operator|+
literal|" but completed with exit code "
operator|+
name|deleted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
comment|//expected
name|handleExpectedException
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|ContractTestUtils
operator|.
name|assertIsDirectory
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonEmptyDirRecursive ()
specifier|public
name|void
name|testDeleteNonEmptyDirRecursive
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteNonEmptyDirNonRecursive"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"childfile"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|writeTextFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|file
argument_list|,
literal|"goodbye, world"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"not deleted"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteDeepEmptyDir ()
specifier|public
name|void
name|testDeleteDeepEmptyDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testDeleteDeepEmptyDir/d1/d2/d3/d4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|(
literal|"testDeleteDeepEmptyDir/d1/d2/d3"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"not deleted"
argument_list|,
name|path
argument_list|(
literal|"testDeleteDeepEmptyDir/d1/d2/d3/d4"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathDoesNotExist
argument_list|(
name|fs
argument_list|,
literal|"not deleted"
argument_list|,
name|path
argument_list|(
literal|"testDeleteDeepEmptyDir/d1/d2/d3"
argument_list|)
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|fs
argument_list|,
literal|"parent dir is deleted"
argument_list|,
name|path
argument_list|(
literal|"testDeleteDeepEmptyDir/d1/d2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteSingleFile ()
specifier|public
name|void
name|testDeleteSingleFile
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Test delete of just a file
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testDeleteSingleFile/d1/d2"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"childfile"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|writeTextFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|file
argument_list|,
literal|"single file to be deleted."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|assertPathExists
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
literal|"single file not created"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

