begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCryptoCodec
specifier|public
class|class
name|TestCryptoCodec
block|{
DECL|field|codec
specifier|private
specifier|static
name|CryptoCodec
name|codec
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|codec
operator|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSecureRandom ()
specifier|public
name|void
name|testSecureRandom
parameter_list|()
throws|throws
name|Exception
block|{
comment|// len = 16
name|checkSecureRandom
argument_list|(
literal|16
argument_list|)
expr_stmt|;
comment|// len = 32
name|checkSecureRandom
argument_list|(
literal|32
argument_list|)
expr_stmt|;
comment|// len = 128
name|checkSecureRandom
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSecureRandom (int len)
specifier|private
name|void
name|checkSecureRandom
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|rand
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|rand1
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|rand1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|rand
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|rand1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bytesArrayEquals
argument_list|(
name|rand
argument_list|,
name|rand1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|bytesArrayEquals (byte[] expected, byte[] actual)
specifier|private
name|boolean
name|bytesArrayEquals
parameter_list|(
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|actual
parameter_list|)
block|{
if|if
condition|(
operator|(
name|expected
operator|==
literal|null
operator|&&
name|actual
operator|!=
literal|null
operator|)
operator|||
operator|(
name|expected
operator|!=
literal|null
operator|&&
name|actual
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|expected
operator|==
literal|null
operator|&&
name|actual
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|expected
operator|.
name|length
operator|!=
name|actual
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|expected
index|[
name|i
index|]
operator|!=
name|actual
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

