begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCryptoCodec
specifier|public
class|class
name|TestCryptoCodec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCryptoCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|key
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|key
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|}
decl_stmt|;
DECL|field|iv
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|iv
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|}
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|static
specifier|final
name|int
name|bufferSize
init|=
literal|4096
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|10000
decl_stmt|;
DECL|field|seed
specifier|private
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|field|jceCodecClass
specifier|private
specifier|final
name|String
name|jceCodecClass
init|=
literal|"org.apache.hadoop.crypto.JceAesCtrCryptoCodec"
decl_stmt|;
DECL|field|opensslCodecClass
specifier|private
specifier|final
name|String
name|opensslCodecClass
init|=
literal|"org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testJceAesCtrCryptoCodec ()
specifier|public
name|void
name|testJceAesCtrCryptoCodec
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|NativeCodeLoader
operator|.
name|buildSupportsOpenssl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|OpensslCipher
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
name|jceCodecClass
argument_list|,
name|jceCodecClass
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|jceCodecClass
argument_list|,
name|jceCodecClass
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|jceCodecClass
argument_list|,
name|opensslCodecClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testOpensslAesCtrCryptoCodec ()
specifier|public
name|void
name|testOpensslAesCtrCryptoCodec
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|NativeCodeLoader
operator|.
name|buildSupportsOpenssl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|OpensslCipher
operator|.
name|getLoadingFailureReason
argument_list|()
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
name|opensslCodecClass
argument_list|,
name|opensslCodecClass
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|opensslCodecClass
argument_list|,
name|opensslCodecClass
argument_list|)
expr_stmt|;
name|cryptoCodecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|opensslCodecClass
argument_list|,
name|jceCodecClass
argument_list|)
expr_stmt|;
block|}
DECL|method|cryptoCodecTest (Configuration conf, int seed, int count, String encCodecClass, String decCodecClass)
specifier|private
name|void
name|cryptoCodecTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|seed
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|encCodecClass
parameter_list|,
name|String
name|decCodecClass
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|CryptoCodec
name|encCodec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encCodec
operator|=
operator|(
name|CryptoCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|encCodecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal crypto codec!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a Codec object of type: "
operator|+
name|encCodecClass
argument_list|)
expr_stmt|;
comment|// Generate data
name|DataOutputBuffer
name|data
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
comment|// Encrypt data
name|DataOutputBuffer
name|encryptedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CryptoOutputStream
name|out
init|=
operator|new
name|CryptoOutputStream
argument_list|(
name|encryptedDataBuffer
argument_list|,
name|encCodec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished encrypting data"
argument_list|)
expr_stmt|;
name|CryptoCodec
name|decCodec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|decCodec
operator|=
operator|(
name|CryptoCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|decCodecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal crypto codec!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a Codec object of type: "
operator|+
name|decCodecClass
argument_list|)
expr_stmt|;
comment|// Decrypt data
name|DataInputBuffer
name|decryptedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|decryptedDataBuffer
operator|.
name|reset
argument_list|(
name|encryptedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|encryptedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CryptoInputStream
name|in
init|=
operator|new
name|CryptoInputStream
argument_list|(
name|decryptedDataBuffer
argument_list|,
name|decCodec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
decl_stmt|;
name|DataInputStream
name|dataIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check
name|DataInputBuffer
name|originalData
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|DataInputStream
name|originalIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RandomDatum
name|k1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|v1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|RandomDatum
name|k2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k2
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|v2
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"original and encrypted-then-decrypted-output not equal"
argument_list|,
name|k1
operator|.
name|equals
argument_list|(
name|k2
argument_list|)
operator|&&
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
comment|// original and encrypted-then-decrypted-output have the same hashCode
name|Map
argument_list|<
name|RandomDatum
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|RandomDatum
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|k1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|v1
argument_list|,
name|v1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|m
operator|.
name|get
argument_list|(
name|k2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"k1 and k2 hashcode not equal"
argument_list|,
name|result
argument_list|,
name|k1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|m
operator|.
name|get
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1 and v2 hashcode not equal"
argument_list|,
name|result
argument_list|,
name|v1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Decrypt data byte-at-a-time
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|decryptedDataBuffer
operator|.
name|reset
argument_list|(
name|encryptedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|encryptedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|CryptoInputStream
argument_list|(
name|decryptedDataBuffer
argument_list|,
name|decCodec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
comment|// Check
name|originalIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expected
decl_stmt|;
do|do
block|{
name|expected
operator|=
name|originalIn
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Decrypted stream read by byte does not match"
argument_list|,
name|expected
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|expected
operator|!=
operator|-
literal|1
condition|)
do|;
comment|// Seek to a certain position and decrypt
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|decryptedDataBuffer
operator|.
name|reset
argument_list|(
name|encryptedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|encryptedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|CryptoInputStream
argument_list|(
operator|new
name|TestCryptoStreams
operator|.
name|FakeInputStream
argument_list|(
name|decryptedDataBuffer
argument_list|)
argument_list|,
name|decCodec
argument_list|,
name|bufferSize
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
name|int
name|seekPos
init|=
name|data
operator|.
name|getLength
argument_list|()
operator|/
literal|3
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
comment|// Check
name|TestCryptoStreams
operator|.
name|FakeInputStream
name|originalInput
init|=
operator|new
name|TestCryptoStreams
operator|.
name|FakeInputStream
argument_list|(
name|originalData
argument_list|)
decl_stmt|;
name|originalInput
operator|.
name|seek
argument_list|(
name|seekPos
argument_list|)
expr_stmt|;
do|do
block|{
name|expected
operator|=
name|originalInput
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Decrypted stream read by byte does not match"
argument_list|,
name|expected
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|expected
operator|!=
operator|-
literal|1
condition|)
do|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed checking "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
comment|// Check secure random generator
name|testSecureRandom
argument_list|(
name|encCodec
argument_list|)
expr_stmt|;
block|}
comment|/** Test secure random generator */
DECL|method|testSecureRandom (CryptoCodec codec)
specifier|private
name|void
name|testSecureRandom
parameter_list|(
name|CryptoCodec
name|codec
parameter_list|)
block|{
comment|// len = 16
name|checkSecureRandom
argument_list|(
name|codec
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// len = 32
name|checkSecureRandom
argument_list|(
name|codec
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// len = 128
name|checkSecureRandom
argument_list|(
name|codec
argument_list|,
literal|128
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSecureRandom (CryptoCodec codec, int len)
specifier|private
name|void
name|checkSecureRandom
parameter_list|(
name|CryptoCodec
name|codec
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|rand
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|byte
index|[]
name|rand1
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|rand
argument_list|)
expr_stmt|;
name|codec
operator|.
name|generateSecureRandom
argument_list|(
name|rand1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|rand
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|rand1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|rand
argument_list|,
name|rand1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

