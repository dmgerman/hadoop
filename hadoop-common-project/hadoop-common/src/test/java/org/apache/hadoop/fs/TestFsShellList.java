begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test FsShell -ls command.  */
end_comment

begin_class
DECL|class|TestFsShellList
specifier|public
class|class
name|TestFsShellList
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|shell
specifier|private
specifier|static
name|FsShell
name|shell
decl_stmt|;
DECL|field|lfs
specifier|private
specifier|static
name|LocalFileSystem
name|lfs
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
name|Path
name|testRootDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setVerifyChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setWriteChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|root
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"test/build/data"
argument_list|)
decl_stmt|;
name|testRootDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"testFsShellList"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lfs
operator|.
name|mkdirs
argument_list|(
name|testRootDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|testRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createFile (Path filePath)
specifier|private
name|void
name|createFile
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|out
init|=
name|lfs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeChars
argument_list|(
literal|"I am "
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|lfs
operator|.
name|getChecksumFile
argument_list|(
name|filePath
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList ()
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|lsArgv
init|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
name|testRootDir
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|shell
operator|.
name|run
argument_list|(
name|lsArgv
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"abc\bd\tef"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"ghi"
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
argument_list|,
literal|"qq\r123"
argument_list|)
argument_list|)
expr_stmt|;
name|lsArgv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
name|testRootDir
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|shell
operator|.
name|run
argument_list|(
name|lsArgv
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lsArgv
operator|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
literal|"-q"
block|,
name|testRootDir
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|assertThat
argument_list|(
name|shell
operator|.
name|run
argument_list|(
name|lsArgv
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*   UGI params should take effect when we pass.  */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testListWithUGI ()
specifier|public
name|void
name|testListWithUGI
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|fsShell
init|=
operator|new
name|FsShell
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|//Passing Dummy such that it should through IAE
name|fsShell
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"DUMMYAUTH"
argument_list|)
expr_stmt|;
name|String
index|[]
name|lsArgv
init|=
operator|new
name|String
index|[]
block|{
literal|"-ls"
block|,
name|testRootDir
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|fsShell
operator|.
name|run
argument_list|(
name|lsArgv
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

