begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Verify resettable compressor.  */
end_comment

begin_class
DECL|class|TestGzipCodec
specifier|public
class|class
name|TestGzipCodec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestGzipCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA1
specifier|private
specifier|static
specifier|final
name|String
name|DATA1
init|=
literal|"Dogs don't know it's not bacon!\n"
decl_stmt|;
DECL|field|DATA2
specifier|private
specifier|static
specifier|final
name|String
name|DATA2
init|=
literal|"It's baconnnn!!\n"
decl_stmt|;
DECL|field|codec
specifier|private
name|GzipCodec
name|codec
init|=
operator|new
name|GzipCodec
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|codec
operator|.
name|setConf
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test simple compression.
annotation|@
name|Test
DECL|method|testSingleCompress ()
specifier|public
name|void
name|testSingleCompress
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cmpOut
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|DATA1
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|GZIPInputStream
name|cmpIn
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
init|=
name|cmpIn
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|String
name|result
init|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Input must match output"
argument_list|,
name|DATA1
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Test multi-member gzip file created via finish(), resetState().
annotation|@
name|Test
DECL|method|testResetCompress ()
specifier|public
name|void
name|testResetCompress
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cmpOut
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|DATA1
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|DATA2
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|dob
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|cmpIn
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|dib
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|len
operator|=
name|cmpIn
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Output must match input"
argument_list|,
name|DATA1
operator|+
name|DATA2
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ensure all necessary methods are overwritten
annotation|@
name|Test
DECL|method|testWriteOverride ()
specifier|public
name|void
name|testWriteOverride
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cmpOut
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|-
literal|10
argument_list|)
decl_stmt|;
name|int
name|l
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|-
name|i
argument_list|)
decl_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|i
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|cmpIn
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|dib
argument_list|)
decl_stmt|;
name|byte
index|[]
name|vbuf
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|cmpIn
operator|.
name|read
argument_list|(
name|vbuf
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|buf
argument_list|,
name|vbuf
argument_list|)
expr_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|vbuf
argument_list|)
expr_stmt|;
name|int
name|vi
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|-
literal|10
argument_list|)
decl_stmt|;
name|int
name|vl
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|128
operator|-
name|vi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|vl
argument_list|,
name|cmpIn
operator|.
name|read
argument_list|(
name|vbuf
argument_list|,
literal|0
argument_list|,
name|vl
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|buf
argument_list|,
name|i
argument_list|,
name|i
operator|+
name|l
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|vbuf
argument_list|,
name|vl
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|&
literal|0xFF
argument_list|,
name|cmpIn
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cmpIn
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// don't write a new header if no data are written after reset
annotation|@
name|Test
DECL|method|testIdempotentResetState ()
specifier|public
name|void
name|testIdempotentResetState
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cmpOut
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|dob
argument_list|)
decl_stmt|;
name|cmpOut
operator|.
name|write
argument_list|(
name|DATA1
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|finish
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|cmpOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|dob
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|cmpIn
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|dib
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|len
operator|=
name|cmpIn
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Output must match input"
argument_list|,
name|DATA1
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

