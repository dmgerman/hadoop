begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|meta
operator|.
name|RecordTypeInfo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TestRecordVersioning
specifier|public
class|class
name|TestRecordVersioning
extends|extends
name|TestCase
block|{
DECL|method|TestRecordVersioning (String testName)
specifier|public
name|TestRecordVersioning
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/*     * basic versioning    * write out a record and its type info, read it back using its typeinfo    */
DECL|method|testBasic ()
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
name|File
name|tmpfile
decl_stmt|,
name|tmpRTIfile
decl_stmt|;
try|try
block|{
name|tmpfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadooprec"
argument_list|,
literal|".dat"
argument_list|)
expr_stmt|;
name|tmpRTIfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadooprti"
argument_list|,
literal|".dat"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|BinaryRecordOutput
name|out
init|=
operator|new
name|BinaryRecordOutput
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|FileOutputStream
name|oRTIstream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpRTIfile
argument_list|)
decl_stmt|;
name|BinaryRecordOutput
name|outRTI
init|=
operator|new
name|BinaryRecordOutput
argument_list|(
name|oRTIstream
argument_list|)
decl_stmt|;
name|RecRecord1
name|r1
init|=
operator|new
name|RecRecord1
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setBoolVal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setByteVal
argument_list|(
operator|(
name|byte
operator|)
literal|0x66
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setFloatVal
argument_list|(
literal|3.145F
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setDoubleVal
argument_list|(
literal|1.5234
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setIntVal
argument_list|(
operator|-
literal|4567
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setLongVal
argument_list|(
operator|-
literal|2367L
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setStringVal
argument_list|(
literal|"random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setBufferVal
argument_list|(
operator|new
name|Buffer
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setVectorVal
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setMapVal
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|RecRecord0
name|r0
init|=
operator|new
name|RecRecord0
argument_list|()
decl_stmt|;
name|r0
operator|.
name|setStringVal
argument_list|(
literal|"other random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setRecordVal
argument_list|(
name|r0
argument_list|)
expr_stmt|;
name|r1
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write out the type info
name|RecRecord1
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|serialize
argument_list|(
name|outRTI
argument_list|)
expr_stmt|;
name|oRTIstream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|BinaryRecordInput
name|in
init|=
operator|new
name|BinaryRecordInput
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|FileInputStream
name|iRTIstream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpRTIfile
argument_list|)
decl_stmt|;
name|BinaryRecordInput
name|inRTI
init|=
operator|new
name|BinaryRecordInput
argument_list|(
name|iRTIstream
argument_list|)
decl_stmt|;
name|RecordTypeInfo
name|rti
init|=
operator|new
name|RecordTypeInfo
argument_list|()
decl_stmt|;
name|rti
operator|.
name|deserialize
argument_list|(
name|inRTI
argument_list|)
expr_stmt|;
name|iRTIstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|RecRecord1
operator|.
name|setTypeFilter
argument_list|(
name|rti
argument_list|)
expr_stmt|;
name|RecRecord1
name|r2
init|=
operator|new
name|RecRecord1
argument_list|()
decl_stmt|;
name|r2
operator|.
name|deserialize
argument_list|(
name|in
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpfile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpRTIfile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Serialized and deserialized versioned records do not match."
argument_list|,
name|r1
operator|.
name|equals
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*     * versioning    * write out a record and its type info, read back a similar record using the written record's typeinfo    */
DECL|method|testVersioning ()
specifier|public
name|void
name|testVersioning
parameter_list|()
block|{
name|File
name|tmpfile
decl_stmt|,
name|tmpRTIfile
decl_stmt|;
try|try
block|{
name|tmpfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadooprec"
argument_list|,
literal|".dat"
argument_list|)
expr_stmt|;
name|tmpRTIfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadooprti"
argument_list|,
literal|".dat"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|BinaryRecordOutput
name|out
init|=
operator|new
name|BinaryRecordOutput
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|FileOutputStream
name|oRTIstream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpRTIfile
argument_list|)
decl_stmt|;
name|BinaryRecordOutput
name|outRTI
init|=
operator|new
name|BinaryRecordOutput
argument_list|(
name|oRTIstream
argument_list|)
decl_stmt|;
comment|// we create an array of records to write
name|ArrayList
argument_list|<
name|RecRecordOld
argument_list|>
name|recsWrite
init|=
operator|new
name|ArrayList
argument_list|<
name|RecRecordOld
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|,
name|k
decl_stmt|,
name|l
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|RecRecordOld
name|s1Rec
init|=
operator|new
name|RecRecordOld
argument_list|()
decl_stmt|;
name|s1Rec
operator|.
name|setName
argument_list|(
literal|"This is record s1: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|iA
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|iA
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|i
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s1Rec
operator|.
name|setIvec
argument_list|(
name|iA
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|RecRecord0
argument_list|>
argument_list|>
name|ssVec
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|RecRecord0
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|RecRecord0
argument_list|>
name|sVec
init|=
operator|new
name|ArrayList
argument_list|<
name|RecRecord0
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|++
control|)
block|{
name|RecRecord0
name|sRec
init|=
operator|new
name|RecRecord0
argument_list|(
literal|"This is record s: ("
operator|+
name|j
operator|+
literal|": "
operator|+
name|k
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|sVec
operator|.
name|add
argument_list|(
name|sRec
argument_list|)
expr_stmt|;
block|}
name|ssVec
operator|.
name|add
argument_list|(
name|sVec
argument_list|)
expr_stmt|;
block|}
name|s1Rec
operator|.
name|setSvec
argument_list|(
name|ssVec
argument_list|)
expr_stmt|;
name|s1Rec
operator|.
name|setInner
argument_list|(
operator|new
name|RecRecord0
argument_list|(
literal|"This is record s: "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aaaVec
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
literal|2
condition|;
name|l
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|aaVec
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|aVec
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|++
control|)
block|{
name|aVec
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
literal|"THis is a nested string: ("
operator|+
name|l
operator|+
literal|": "
operator|+
name|j
operator|+
literal|": "
operator|+
name|k
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|aaVec
operator|.
name|add
argument_list|(
name|aVec
argument_list|)
expr_stmt|;
block|}
name|aaaVec
operator|.
name|add
argument_list|(
name|aaVec
argument_list|)
expr_stmt|;
block|}
name|s1Rec
operator|.
name|setStrvec
argument_list|(
name|aaaVec
argument_list|)
expr_stmt|;
name|s1Rec
operator|.
name|setI1
argument_list|(
literal|100
operator|+
name|i
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|map1
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map1
operator|.
name|put
argument_list|(
operator|new
name|Byte
argument_list|(
literal|"23"
argument_list|)
argument_list|,
literal|"23"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
operator|new
name|Byte
argument_list|(
literal|"11"
argument_list|)
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|s1Rec
operator|.
name|setMap1
argument_list|(
name|map1
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|m1
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|m2
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|m1
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|15L
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|>
name|vm1
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|vm1
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|vm1
operator|.
name|add
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|s1Rec
operator|.
name|setMvec1
argument_list|(
name|vm1
argument_list|)
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|>
name|vm2
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|vm2
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|s1Rec
operator|.
name|setMvec2
argument_list|(
name|vm2
argument_list|)
expr_stmt|;
comment|// add to our list
name|recsWrite
operator|.
name|add
argument_list|(
name|s1Rec
argument_list|)
expr_stmt|;
block|}
comment|// write out to file
for|for
control|(
name|RecRecordOld
name|rec
range|:
name|recsWrite
control|)
block|{
name|rec
operator|.
name|serialize
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write out the type info
name|RecRecordOld
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|serialize
argument_list|(
name|outRTI
argument_list|)
expr_stmt|;
name|oRTIstream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|BinaryRecordInput
name|in
init|=
operator|new
name|BinaryRecordInput
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|FileInputStream
name|iRTIstream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpRTIfile
argument_list|)
decl_stmt|;
name|BinaryRecordInput
name|inRTI
init|=
operator|new
name|BinaryRecordInput
argument_list|(
name|iRTIstream
argument_list|)
decl_stmt|;
name|RecordTypeInfo
name|rti
init|=
operator|new
name|RecordTypeInfo
argument_list|()
decl_stmt|;
comment|// read type info
name|rti
operator|.
name|deserialize
argument_list|(
name|inRTI
argument_list|)
expr_stmt|;
name|iRTIstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|RecRecordNew
operator|.
name|setTypeFilter
argument_list|(
name|rti
argument_list|)
expr_stmt|;
comment|// read records
name|ArrayList
argument_list|<
name|RecRecordNew
argument_list|>
name|recsRead
init|=
operator|new
name|ArrayList
argument_list|<
name|RecRecordNew
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|recsWrite
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RecRecordNew
name|s2Rec
init|=
operator|new
name|RecRecordNew
argument_list|()
decl_stmt|;
name|s2Rec
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|recsRead
operator|.
name|add
argument_list|(
name|s2Rec
argument_list|)
expr_stmt|;
block|}
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpfile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpRTIfile
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// compare
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|recsRead
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RecRecordOld
name|s1Out
init|=
name|recsWrite
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RecRecordNew
name|s2In
init|=
name|recsRead
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrectly read name2 field"
argument_list|,
literal|null
operator|==
name|s2In
operator|.
name|getName2
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error comparing inner fields"
argument_list|,
operator|(
literal|0
operator|==
name|s1Out
operator|.
name|getInner
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2In
operator|.
name|getInner
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrectly read ivec field"
argument_list|,
literal|null
operator|==
name|s2In
operator|.
name|getIvec
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrectly read svec field"
argument_list|,
literal|null
operator|==
name|s2In
operator|.
name|getSvec
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|s2In
operator|.
name|getStrvec
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|ss2Vec
init|=
name|s2In
operator|.
name|getStrvec
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|ss1Vec
init|=
name|s1Out
operator|.
name|getStrvec
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
for|for
control|(
name|k
operator|=
literal|0
init|;
name|k
operator|<
name|ss2Vec
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|s2Vec
init|=
name|ss2Vec
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|s1Vec
init|=
name|ss1Vec
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
name|s2Vec
operator|.
name|size
argument_list|()
condition|;
name|l
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Error comparing strVec fields"
argument_list|,
operator|(
literal|0
operator|==
name|s2Vec
operator|.
name|get
argument_list|(
name|l
argument_list|)
operator|.
name|compareTo
argument_list|(
name|s1Vec
operator|.
name|get
argument_list|(
name|l
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Incorrectly read map1 field"
argument_list|,
literal|null
operator|==
name|s2In
operator|.
name|getMap1
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|s2In
operator|.
name|getMvec2
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Error comparing mvec2 fields"
argument_list|,
operator|(
name|s2In
operator|.
name|getMvec2
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|equals
argument_list|(
name|s1Out
operator|.
name|getMvec2
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

