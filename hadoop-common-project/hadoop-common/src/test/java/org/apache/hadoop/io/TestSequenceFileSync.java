begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/** Tests sync based seek reads/write intervals inside SequenceFiles. */
end_comment

begin_class
DECL|class|TestSequenceFileSync
specifier|public
class|class
name|TestSequenceFileSync
block|{
DECL|field|NUMRECORDS
specifier|private
specifier|static
specifier|final
name|int
name|NUMRECORDS
init|=
literal|2000
decl_stmt|;
DECL|field|RECORDSIZE
specifier|private
specifier|static
specifier|final
name|int
name|RECORDSIZE
init|=
literal|80
decl_stmt|;
DECL|field|RAND
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|REC_FMT
specifier|private
specifier|final
specifier|static
name|String
name|REC_FMT
init|=
literal|"%d RECORDID %d : "
decl_stmt|;
DECL|method|forOffset (SequenceFile.Reader reader, IntWritable key, Text val, int iter, long off, int expectedRecord)
specifier|private
specifier|static
name|void
name|forOffset
parameter_list|(
name|SequenceFile
operator|.
name|Reader
name|reader
parameter_list|,
name|IntWritable
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|int
name|iter
parameter_list|,
name|long
name|off
parameter_list|,
name|int
name|expectedRecord
parameter_list|)
throws|throws
name|IOException
block|{
name|val
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reader
operator|.
name|sync
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|expectedRecord
argument_list|)
expr_stmt|;
specifier|final
name|String
name|test
init|=
name|String
operator|.
name|format
argument_list|(
name|REC_FMT
argument_list|,
name|expectedRecord
argument_list|,
name|expectedRecord
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|val
operator|.
name|find
argument_list|(
name|test
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|withFailMessage
argument_list|(
literal|"Invalid value in iter "
operator|+
name|iter
operator|+
literal|": "
operator|+
name|val
argument_list|)
operator|.
name|isZero
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSyncInterval ()
specifier|public
name|void
name|testDefaultSyncInterval
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Uses the default sync interval of 100 KB
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"sequencefile.sync.test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IntWritable
name|input
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|NONE
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writeSequenceFile
argument_list|(
name|writer
argument_list|,
name|NUMRECORDS
operator|*
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SequenceFile
operator|.
name|Reader
name|reader
decl_stmt|;
comment|//try different SequenceFile.Reader constructors
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
specifier|final
name|int
name|buffersize
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|bufferSize
argument_list|(
name|buffersize
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|long
name|length
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|stream
argument_list|(
name|in
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|start
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|length
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|65
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// There would be over 1000 records within
comment|// this sync interval
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|2000
argument_list|,
literal|1101
argument_list|)
expr_stmt|;
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLowSyncpoint ()
specifier|public
name|void
name|testLowSyncpoint
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Uses a smaller sync interval of 2000 bytes
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"sequencefile.sync.test"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IntWritable
name|input
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|SequenceFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|NONE
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|syncInterval
argument_list|(
literal|20
operator|*
literal|100
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ensure the custom sync interval value is set
name|assertThat
argument_list|(
name|writer
operator|.
name|syncInterval
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|20
operator|*
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|writeSequenceFile
argument_list|(
name|writer
argument_list|,
name|NUMRECORDS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SequenceFile
operator|.
name|Reader
name|reader
decl_stmt|;
comment|//try different SequenceFile.Reader constructors
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
specifier|final
name|int
name|bufferSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|path
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|bufferSize
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|long
name|length
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|stream
argument_list|(
name|in
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|start
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|length
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|65
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// There would be only a few records within
comment|// this sync interval
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|2000
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|forOffset
argument_list|(
name|reader
argument_list|,
name|input
argument_list|,
name|val
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeSequenceFile (SequenceFile.Writer writer, int numRecords)
specifier|private
specifier|static
name|void
name|writeSequenceFile
parameter_list|(
name|SequenceFile
operator|.
name|Writer
name|writer
parameter_list|,
name|int
name|numRecords
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|numWritten
init|=
literal|0
init|;
name|numWritten
operator|<
name|numRecords
condition|;
operator|++
name|numWritten
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|numWritten
argument_list|)
expr_stmt|;
name|randomText
argument_list|(
name|val
argument_list|,
name|numWritten
argument_list|,
name|RECORDSIZE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|randomText (Text val, int id, int recordSize)
specifier|private
specifier|static
name|void
name|randomText
parameter_list|(
name|Text
name|val
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|recordSize
parameter_list|)
block|{
name|val
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|(
name|recordSize
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|REC_FMT
argument_list|,
name|id
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|recordSize
operator|-=
name|ret
operator|.
name|length
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordSize
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|val
operator|.
name|set
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

