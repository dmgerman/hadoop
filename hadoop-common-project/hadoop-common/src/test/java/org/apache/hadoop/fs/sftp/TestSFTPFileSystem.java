begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.sftp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|sftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|PasswordAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|auth
operator|.
name|UserAuthPassword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|SimpleGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|session
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|sftp
operator|.
name|SftpSubsystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_class
DECL|class|TestSFTPFileSystem
specifier|public
class|class
name|TestSFTPFileSystem
block|{
DECL|field|TEST_SFTP_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SFTP_DIR
init|=
literal|"testsftp"
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT_DIR
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|connection
specifier|private
specifier|static
specifier|final
name|String
name|connection
init|=
literal|"sftp://user:password@localhost"
decl_stmt|;
DECL|field|localDir
specifier|private
specifier|static
name|Path
name|localDir
init|=
literal|null
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
DECL|field|sftpFs
specifier|private
specifier|static
name|FileSystem
name|sftpFs
init|=
literal|null
decl_stmt|;
DECL|field|sshd
specifier|private
specifier|static
name|SshServer
name|sshd
init|=
literal|null
decl_stmt|;
DECL|field|port
specifier|private
specifier|static
name|int
name|port
decl_stmt|;
DECL|method|startSshdServer ()
specifier|private
specifier|static
name|void
name|startSshdServer
parameter_list|()
throws|throws
name|IOException
block|{
name|sshd
operator|=
name|SshServer
operator|.
name|setUpDefaultServer
argument_list|()
expr_stmt|;
comment|// ask OS to assign a port
name|sshd
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|SimpleGeneratorHostKeyProvider
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|UserAuth
argument_list|>
argument_list|>
name|userAuthFactories
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedFactory
argument_list|<
name|UserAuth
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|userAuthFactories
operator|.
name|add
argument_list|(
operator|new
name|UserAuthPassword
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setUserAuthFactories
argument_list|(
name|userAuthFactories
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setPasswordAuthenticator
argument_list|(
operator|new
name|PasswordAuthenticator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|ServerSession
name|session
parameter_list|)
block|{
if|if
condition|(
name|username
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
operator|&&
name|password
operator|.
name|equals
argument_list|(
literal|"password"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setSubsystemFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|Command
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|SftpSubsystem
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|sshd
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// skip all tests if running on Windows
name|assumeTrue
argument_list|(
operator|!
name|Shell
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|startSshdServer
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.sftp.impl"
argument_list|,
name|SFTPFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"fs.sftp.host.port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.sftp.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|localDir
operator|=
name|localFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|TEST_SFTP_DIR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|localFs
operator|.
name|exists
argument_list|(
name|localDir
argument_list|)
condition|)
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|localDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|localFs
operator|.
name|mkdirs
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
name|sftpFs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|connection
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|localFs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|localFs
operator|.
name|delete
argument_list|(
name|localDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|sftpFs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sftpFs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|sshd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sshd
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|touch (FileSystem fs, String filename)
specifier|private
specifier|static
specifier|final
name|Path
name|touch
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|touch
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|touch (FileSystem fs, String filename, byte[] data)
specifier|private
specifier|static
specifier|final
name|Path
name|touch
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|filename
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|lPath
init|=
operator|new
name|Path
argument_list|(
name|localDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|lPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lPath
return|;
block|}
comment|/**    * Creates a file and deletes it.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testCreateFile ()
specifier|public
name|void
name|testCreateFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|touch
argument_list|(
name|sftpFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if a new created file exists.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFileExists ()
specifier|public
name|void
name|testFileExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sftpFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test writing to a file and reading its value.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testReadFile ()
specifier|public
name|void
name|testReadFile
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
literal|"yaks"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|sftpFs
operator|.
name|open
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|data
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getting the status of a file.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testStatFile ()
specifier|public
name|void
name|testStatFile
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
literal|"yaks"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|FileStatus
name|lstat
init|=
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|sstat
init|=
name|sftpFs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sstat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lstat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|sstat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|sstat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lstat
operator|.
name|getLen
argument_list|()
argument_list|,
name|sstat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting a non empty directory.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|io
operator|.
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testDeleteNonEmptyDir ()
specifier|public
name|void
name|testDeleteNonEmptyDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|sftpFs
operator|.
name|delete
argument_list|(
name|localDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test deleting a file that does not exist.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDeleteNonExistFile ()
specifier|public
name|void
name|testDeleteNonExistFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test renaming a file.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRenameFile ()
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
literal|"dingos"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Path
name|file1
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sftpFs
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sftpFs
operator|.
name|delete
argument_list|(
name|file2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test renaming a file that does not exist.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|io
operator|.
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testRenameNonExistFile ()
specifier|public
name|void
name|testRenameNonExistFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|sftpFs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test renaming a file onto an existing file.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|io
operator|.
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testRenamingFileOntoExistingFile ()
specifier|public
name|void
name|testRenamingFileOntoExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file1
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
name|touch
argument_list|(
name|localFs
argument_list|,
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|sftpFs
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

