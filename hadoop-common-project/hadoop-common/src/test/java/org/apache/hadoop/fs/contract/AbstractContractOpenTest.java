begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|HandleOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawPathHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|appendFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|skip
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyRead
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyFileContents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Seek operations  */
end_comment

begin_class
DECL|class|AbstractContractOpenTest
specifier|public
specifier|abstract
class|class
name|AbstractContractOpenTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|instream
specifier|private
name|FSDataInputStream
name|instream
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
name|instream
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenReadZeroByteFile ()
specifier|public
name|void
name|testOpenReadZeroByteFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a 0 byte file"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect initial read to fail
name|int
name|result
init|=
name|instream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertMinusOne
argument_list|(
literal|"initial byte read"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsIsEncrypted ()
specifier|public
name|void
name|testFsIsEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"create an empty file and call FileStatus.isEncrypted()"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|path
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expecting false for stat.isEncrypted()"
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenReadDir ()
specifier|public
name|void
name|testOpenReadDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a directory"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.dir"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//at this point we've opened a directory
name|fail
argument_list|(
literal|"A directory has been opened for reading"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"opening a directory for reading"
argument_list|,
literal|"FileNotFoundException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenReadDirWithChild ()
specifier|public
name|void
name|testOpenReadDirWithChild
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a directory which has a child"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.dir"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path2
argument_list|)
expr_stmt|;
try|try
block|{
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//at this point we've opened a directory
name|fail
argument_list|(
literal|"A directory has been opened for reading"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"opening a directory for reading"
argument_list|,
literal|"FileNotFoundException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenFileTwice ()
specifier|public
name|void
name|testOpenFileTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that two opened file streams are independent"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testopenfiletwice.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|//this file now has a simple rule: offset => value
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|//open first
name|FSDataInputStream
name|instream1
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|instream2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
name|instream1
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|instream2
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first read of instream 2"
argument_list|,
literal|0
argument_list|,
name|instream2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second read of instream 1"
argument_list|,
literal|1
argument_list|,
name|instream1
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second read of instream 2"
argument_list|,
literal|1
argument_list|,
name|instream2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//close instream1 again
name|instream1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSequentialRead ()
specifier|public
name|void
name|testSequentialRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that sequential read() operations return values"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testsequentialread.txt"
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|4
decl_stmt|;
name|int
name|base
init|=
literal|0x40
decl_stmt|;
comment|// 64
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|len
argument_list|,
name|base
argument_list|,
name|base
operator|+
name|len
argument_list|)
decl_stmt|;
comment|//this file now has a simple rule: offset => (value | 0x40)
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|//open first
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|2
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|3
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// and now, failures
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Skip a test case if the FS doesn't support file references.    * The feature is assumed to be unsupported unless stated otherwise.    */
DECL|method|assumeSupportsFileReference ()
specifier|protected
name|void
name|assumeSupportsFileReference
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getContract
argument_list|()
operator|.
name|isSupported
argument_list|(
name|SUPPORTS_FILE_REFERENCE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|skip
argument_list|(
literal|"Skipping as unsupported feature: "
operator|+
name|SUPPORTS_FILE_REFERENCE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Skip a test case if the FS doesn't support content validation.    * The feature is assumed to be unsupported unless stated otherwise.    */
DECL|method|assumeSupportsContentCheck ()
specifier|protected
name|void
name|assumeSupportsContentCheck
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getContract
argument_list|()
operator|.
name|isSupported
argument_list|(
name|SUPPORTS_CONTENT_CHECK
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|skip
argument_list|(
literal|"Skipping as unsupported feature: "
operator|+
name|SUPPORTS_CONTENT_CHECK
argument_list|)
expr_stmt|;
block|}
DECL|method|getHandleOrSkip (FileStatus stat, HandleOpt... opts)
specifier|private
name|PathHandle
name|getHandleOrSkip
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|HandleOpt
modifier|...
name|opts
parameter_list|)
block|{
try|try
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|getPathHandle
argument_list|(
name|stat
argument_list|,
name|opts
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|skip
argument_list|(
literal|"FileSystem does not support "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|opts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// unreachable
return|return
literal|null
return|;
block|}
comment|/**    * Verify {@link HandleOpt#exact()} handle semantics.    * @throws Throwable on error    */
annotation|@
name|Test
DECL|method|testOpenFileByExact ()
specifier|public
name|void
name|testOpenFileByExact
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify open(getPathHandle(FileStatus, exact())) operations"
operator|+
literal|"detect changes"
argument_list|)
expr_stmt|;
name|assumeSupportsContentCheck
argument_list|()
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
name|path
argument_list|(
literal|"testopenfilebyexact1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
name|path
argument_list|(
literal|"testopenfilebyexact2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|file1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat1
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|stat1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|FileStatus
name|stat2
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path2
argument_list|,
name|stat2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// create identical file at same location, orig still exists at path2
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|PathHandle
name|fd1
init|=
name|getHandleOrSkip
argument_list|(
name|stat1
argument_list|,
name|HandleOpt
operator|.
name|exact
argument_list|()
argument_list|)
decl_stmt|;
name|PathHandle
name|fd2
init|=
name|getHandleOrSkip
argument_list|(
name|stat2
argument_list|,
name|HandleOpt
operator|.
name|exact
argument_list|()
argument_list|)
decl_stmt|;
comment|// verify path1, path2 contents identical
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// the PathHandle will not resolve, even though
comment|// the original entity exists, it has not been modified, and an
comment|// identical file exists at the old path. The handle would also
comment|// fail to resolve if path1 had been modified
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// verify unchanged resolves
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd2
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|instream
argument_list|,
name|file1
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify {@link HandleOpt#content()} handle semantics.    * @throws Throwable on error    */
annotation|@
name|Test
DECL|method|testOpenFileByContent ()
specifier|public
name|void
name|testOpenFileByContent
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify open(getPathHandle(FileStatus, content())) operations"
operator|+
literal|"follow relocation"
argument_list|)
expr_stmt|;
name|assumeSupportsContentCheck
argument_list|()
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
name|path
argument_list|(
literal|"testopenfilebycontent1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
name|path
argument_list|(
literal|"testopenfilebycontent2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|file1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename the file after obtaining FileStatus
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
comment|// obtain handle to entity from #getFileStatus call
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|,
name|HandleOpt
operator|.
name|content
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
init|)
block|{
comment|// verify read of consistent content at new location
name|verifyRead
argument_list|(
name|in
argument_list|,
name|file1
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
comment|// modify the file at its new location by appending data
name|byte
index|[]
name|file1a
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|44
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|appendFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1a
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file1x
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|file1
argument_list|,
name|file1
operator|.
name|length
operator|+
name|file1a
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|file1a
argument_list|,
literal|0
argument_list|,
name|file1x
argument_list|,
name|file1
operator|.
name|length
argument_list|,
name|file1a
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify fd entity contains contents of file1 + appended bytes
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1x
argument_list|)
expr_stmt|;
try|try
block|{
comment|// handle should not resolve when content changed
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to detect change to content"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**    * Verify {@link HandleOpt#path()} handle semantics.    * @throws Throwable on error    */
annotation|@
name|Test
DECL|method|testOpenFileByPath ()
specifier|public
name|void
name|testOpenFileByPath
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify open(getPathHandle(FileStatus, path())) operations"
operator|+
literal|"detect changes"
argument_list|)
expr_stmt|;
name|assumeSupportsContentCheck
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
name|path
argument_list|(
literal|"testopenfilebypath1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
name|path
argument_list|(
literal|"testopenfilebypath2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|file1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat1
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|stat1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|FileStatus
name|stat2
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path2
argument_list|,
name|stat2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// create identical file at same location, orig still exists at path2
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|PathHandle
name|fd1
init|=
name|getHandleOrSkip
argument_list|(
name|stat1
argument_list|,
name|HandleOpt
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|PathHandle
name|fd2
init|=
name|getHandleOrSkip
argument_list|(
name|stat2
argument_list|,
name|HandleOpt
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
comment|// verify path1, path2 contents identical
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// verify attempt to resolve the handle fails
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// verify content change OK
name|byte
index|[]
name|file2a
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|44
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|appendFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file2a
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file2x
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|file1
argument_list|,
name|file1
operator|.
name|length
operator|+
name|file2a
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|file2a
argument_list|,
literal|0
argument_list|,
name|file2x
argument_list|,
name|file1
operator|.
name|length
argument_list|,
name|file2a
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify path2 contains contents of orig + appended bytes
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file2x
argument_list|)
expr_stmt|;
comment|// verify open by fd succeeds
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd2
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|instream
argument_list|,
name|file2x
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify {@link HandleOpt#reference()} handle semantics.    * @throws Throwable on error    */
annotation|@
name|Test
DECL|method|testOpenFileByReference ()
specifier|public
name|void
name|testOpenFileByReference
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify open(getPathHandle(FileStatus, reference())) operations"
operator|+
literal|" are independent of rename"
argument_list|)
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
name|path
argument_list|(
literal|"testopenfilebyref1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
name|path
argument_list|(
literal|"testopenfilebyref2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|file1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file2
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|44
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file1a
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|42
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|appendFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1a
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file1x
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|file1
argument_list|,
name|file1
operator|.
name|length
operator|+
name|file1a
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|file1a
argument_list|,
literal|0
argument_list|,
name|file1x
argument_list|,
name|file1
operator|.
name|length
argument_list|,
name|file1a
operator|.
name|length
argument_list|)
expr_stmt|;
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|,
name|HandleOpt
operator|.
name|reference
argument_list|()
argument_list|)
decl_stmt|;
comment|// verify path2 contains contents of file1 + appended bytes
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1x
argument_list|)
expr_stmt|;
comment|// verify path1 contents contents of file2
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// verify fd contains contents of file1 + appended bytes
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|instream
argument_list|,
name|file1x
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify {@link PathHandle} may be serialized and restored.    * @throws Throwable on error    */
annotation|@
name|Test
DECL|method|testOpenFileBySerializedReference ()
specifier|public
name|void
name|testOpenFileBySerializedReference
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify PathHandle supports generic serialization"
argument_list|)
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|Path
name|path1
init|=
name|path
argument_list|(
literal|"testopenfilebyref1"
argument_list|)
decl_stmt|;
name|Path
name|path2
init|=
name|path
argument_list|(
literal|"testopenfilebyref2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|file1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|file2
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|44
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
literal|false
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|,
name|HandleOpt
operator|.
name|reference
argument_list|()
argument_list|)
decl_stmt|;
comment|// serialize PathHandle
name|ByteBuffer
name|sb
init|=
name|fd
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|PathHandle
name|fdb
init|=
operator|new
name|RawPathHandle
argument_list|(
name|sb
argument_list|)
decl_stmt|;
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fdb
argument_list|)
expr_stmt|;
comment|// verify stat contains contents of file1
name|verifyRead
argument_list|(
name|instream
argument_list|,
name|file1
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
comment|// verify path2 contains contents of file1
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path2
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// verify path1 contents contents of file2
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

