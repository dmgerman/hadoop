begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FutureDataInputStreamBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
operator|.
name|FutureIOSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|touch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|interceptFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Open operations.  */
end_comment

begin_class
DECL|class|AbstractContractOpenTest
specifier|public
specifier|abstract
class|class
name|AbstractContractOpenTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|instream
specifier|private
name|FSDataInputStream
name|instream
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
name|instream
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenReadZeroByteFile ()
specifier|public
name|void
name|testOpenReadZeroByteFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a 0 byte file"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.txt"
argument_list|)
decl_stmt|;
name|touch
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect initial read to fail
name|assertMinusOne
argument_list|(
literal|"initial byte read"
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFsIsEncrypted ()
specifier|public
name|void
name|testFsIsEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|describe
argument_list|(
literal|"create an empty file and call FileStatus.isEncrypted()"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|path
init|=
name|path
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Result wrong for for isEncrypted() in "
operator|+
name|stat
argument_list|,
name|areZeroByteFilesEncrypted
argument_list|()
argument_list|,
name|stat
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Are zero byte files encrypted. This is implicitly    * false for filesystems which do not encrypt.    * @return true iff zero byte files are encrypted.    */
DECL|method|areZeroByteFilesEncrypted ()
specifier|protected
name|boolean
name|areZeroByteFilesEncrypted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testOpenReadDir ()
specifier|public
name|void
name|testOpenReadDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a directory"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.dir"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//at this point we've opened a directory
name|fail
argument_list|(
literal|"A directory has been opened for reading"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"opening a directory for reading"
argument_list|,
literal|"FileNotFoundException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenReadDirWithChild ()
specifier|public
name|void
name|testOpenReadDirWithChild
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a directory which has a child"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.dir"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|path2
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|mkdirs
argument_list|(
name|path2
argument_list|)
expr_stmt|;
try|try
block|{
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//at this point we've opened a directory
name|fail
argument_list|(
literal|"A directory has been opened for reading"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"opening a directory for reading"
argument_list|,
literal|"FileNotFoundException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenFileTwice ()
specifier|public
name|void
name|testOpenFileTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that two opened file streams are independent"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testopenfiletwice.txt"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|//this file now has a simple rule: offset => value
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|//open first
name|FSDataInputStream
name|instream1
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|instream2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
name|instream1
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|instream2
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first read of instream 2"
argument_list|,
literal|0
argument_list|,
name|instream2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second read of instream 1"
argument_list|,
literal|1
argument_list|,
name|instream1
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second read of instream 2"
argument_list|,
literal|1
argument_list|,
name|instream2
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|//close instream1 again
name|instream1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream1
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSequentialRead ()
specifier|public
name|void
name|testSequentialRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that sequential read() operations return values"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testsequentialread.txt"
argument_list|)
decl_stmt|;
name|int
name|len
init|=
literal|4
decl_stmt|;
name|int
name|base
init|=
literal|0x40
decl_stmt|;
comment|// 64
name|byte
index|[]
name|block
init|=
name|dataset
argument_list|(
name|len
argument_list|,
name|base
argument_list|,
name|base
operator|+
name|len
argument_list|)
decl_stmt|;
comment|//this file now has a simple rule: offset => (value | 0x40)
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|//open first
name|instream
operator|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|2
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|base
operator|+
literal|3
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// and now, failures
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|instream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFileReadZeroByte ()
specifier|public
name|void
name|testOpenFileReadZeroByte
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create& read a 0 byte file through the builders"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"zero.txt"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
operator|.
name|overwrite
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|openFile
argument_list|(
name|path
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something2"
argument_list|,
literal|3
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something3"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|get
argument_list|()
init|)
block|{
name|assertMinusOne
argument_list|(
literal|"initial byte read"
argument_list|,
name|is
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenFileUnknownOption ()
specifier|public
name|void
name|testOpenFileUnknownOption
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"calling openFile fails when a 'must()' option is unknown"
argument_list|)
expr_stmt|;
name|FutureDataInputStreamBuilder
name|builder
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testOpenFileUnknownOption"
argument_list|)
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
operator|.
name|must
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFileLazyFail ()
specifier|public
name|void
name|testOpenFileLazyFail
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"openFile fails on a missing file in the get() and not before"
argument_list|)
expr_stmt|;
name|FutureDataInputStreamBuilder
name|builder
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testOpenFileLazyFail"
argument_list|)
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|interceptFuture
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
literal|""
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFileFailExceptionally ()
specifier|public
name|void
name|testOpenFileFailExceptionally
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"openFile missing file chains into exceptionally()"
argument_list|)
expr_stmt|;
name|FutureDataInputStreamBuilder
name|builder
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testOpenFileFailExceptionally"
argument_list|)
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"exceptional uprating"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|exceptionally
argument_list|(
name|ex
lambda|->
literal|null
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitFutureFailToFNFE ()
specifier|public
name|void
name|testAwaitFutureFailToFNFE
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify that FutureIOSupport.awaitFuture extracts IOExceptions"
argument_list|)
expr_stmt|;
name|FutureDataInputStreamBuilder
name|builder
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testAwaitFutureFailToFNFE"
argument_list|)
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|FutureIOSupport
operator|.
name|awaitFuture
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAwaitFutureTimeoutFailToFNFE ()
specifier|public
name|void
name|testAwaitFutureTimeoutFailToFNFE
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"Verify that FutureIOSupport.awaitFuture with a timeout works"
argument_list|)
expr_stmt|;
name|FutureDataInputStreamBuilder
name|builder
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testAwaitFutureFailToFNFE"
argument_list|)
argument_list|)
operator|.
name|opt
argument_list|(
literal|"fs.test.something"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|intercept
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|FutureIOSupport
operator|.
name|awaitFuture
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFileExceptionallyTranslating ()
specifier|public
name|void
name|testOpenFileExceptionallyTranslating
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"openFile missing file chains into exceptionally()"
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|FSDataInputStream
argument_list|>
name|f
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testOpenFileUnknownOption"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|interceptFuture
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"exceptionally"
argument_list|,
name|f
operator|.
name|exceptionally
argument_list|(
name|ex
lambda|->
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exceptionally"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChainedFailureAwaitFuture ()
specifier|public
name|void
name|testChainedFailureAwaitFuture
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"await Future handles chained failures"
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|FSDataInputStream
argument_list|>
name|f
init|=
name|getFileSystem
argument_list|()
operator|.
name|openFile
argument_list|(
name|path
argument_list|(
literal|"testOpenFileUnknownOption"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"exceptionally"
argument_list|,
parameter_list|()
lambda|->
name|FutureIOSupport
operator|.
name|awaitFuture
argument_list|(
name|f
operator|.
name|exceptionally
argument_list|(
name|ex
lambda|->
block|{
throw|throw
argument_list|new
name|RuntimeException
argument_list|(
literal|"exceptionally"
argument_list|,
name|ex
argument_list|)
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_function
unit|}    @
name|Test
DECL|method|testOpenFileApplyRead ()
specifier|public
name|void
name|testOpenFileApplyRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"use the apply sequence to read a whole file"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testOpenFileApplyRead"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|4096
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|dataset
argument_list|(
name|len
argument_list|,
literal|0x40
argument_list|,
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Long
argument_list|>
name|readAllBytes
init|=
name|fs
operator|.
name|openFile
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|thenApply
argument_list|(
name|ContractTestUtils
operator|::
name|readStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of bytes read value"
argument_list|,
name|len
argument_list|,
operator|(
name|long
operator|)
name|readAllBytes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testOpenFileApplyAsyncRead ()
specifier|public
name|void
name|testOpenFileApplyAsyncRead
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify that async accept callbacks are evaluated"
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testOpenFileApplyAsyncRead"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|dataset
argument_list|(
literal|4
argument_list|,
literal|0x40
argument_list|,
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|FSDataInputStream
argument_list|>
name|future
init|=
name|fs
operator|.
name|openFile
argument_list|(
name|path
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|accepted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|future
operator|.
name|thenAcceptAsync
argument_list|(
name|i
lambda|->
name|accepted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"async accept operation not invoked"
argument_list|,
name|accepted
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

