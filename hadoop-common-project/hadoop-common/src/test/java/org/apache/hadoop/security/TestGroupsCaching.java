begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedUnixGroupsMapping
import|;
end_import

begin_class
DECL|class|TestGroupsCaching
specifier|public
class|class
name|TestGroupsCaching
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestGroupsCaching
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|myGroups
specifier|private
specifier|static
name|String
index|[]
name|myGroups
init|=
block|{
literal|"grp1"
block|,
literal|"grp2"
block|}
decl_stmt|;
static|static
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|FakeGroupMapping
operator|.
name|class
argument_list|,
name|ShellBasedUnixGroupsMapping
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeGroupMapping
specifier|public
specifier|static
class|class
name|FakeGroupMapping
extends|extends
name|ShellBasedUnixGroupsMapping
block|{
comment|// any to n mapping
DECL|field|allGroups
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|allGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blackList
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting groups for "
operator|+
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|blackList
operator|.
name|contains
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|allGroups
argument_list|)
return|;
block|}
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache is being refreshed."
argument_list|)
expr_stmt|;
name|clearBlackList
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|clearBlackList ()
specifier|public
specifier|static
name|void
name|clearBlackList
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing the blacklist"
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|groups
operator|+
literal|" to groups."
argument_list|)
expr_stmt|;
name|allGroups
operator|.
name|addAll
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
DECL|method|addToBlackList (String user)
specifier|public
specifier|static
name|void
name|addToBlackList
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|user
operator|+
literal|" to the blacklist"
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|TestGroupsCaching ()
specifier|public
name|void
name|TestGroupsCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
comment|// regular entry
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// this must be cached. blacklisting should have no effect.
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// ask for a negative entry
try|try
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"We are not supposed to get here."
operator|+
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"No groups found"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got unexpected exception: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// this shouldn't be cached. remove from the black list and retry.
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

