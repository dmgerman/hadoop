begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|FakeTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ShellBasedUnixGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestGroupsCaching
specifier|public
class|class
name|TestGroupsCaching
block|{
DECL|field|TESTLOG
specifier|public
specifier|static
specifier|final
name|Logger
name|TESTLOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestGroupsCaching
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|myGroups
specifier|private
specifier|static
name|String
index|[]
name|myGroups
init|=
block|{
literal|"grp1"
block|,
literal|"grp2"
block|}
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FakeGroupMapping
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|ExceptionalGroupMapping
operator|.
name|resetRequestCount
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|FakeGroupMapping
operator|.
name|class
argument_list|,
name|ShellBasedUnixGroupsMapping
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeGroupMapping
specifier|public
specifier|static
class|class
name|FakeGroupMapping
extends|extends
name|ShellBasedUnixGroupsMapping
block|{
comment|// any to n mapping
DECL|field|allGroups
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|allGroups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blackList
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|requestCount
specifier|private
specifier|static
name|int
name|requestCount
init|=
literal|0
decl_stmt|;
DECL|field|getGroupsDelayMs
specifier|private
specifier|static
name|long
name|getGroupsDelayMs
init|=
literal|0
decl_stmt|;
DECL|field|throwException
specifier|private
specifier|static
name|boolean
name|throwException
decl_stmt|;
DECL|field|latch
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Getting groups for "
operator|+
name|user
argument_list|)
expr_stmt|;
name|delayIfNecessary
argument_list|()
expr_stmt|;
name|requestCount
operator|++
expr_stmt|;
if|if
condition|(
name|throwException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"For test"
argument_list|)
throw|;
block|}
if|if
condition|(
name|blackList
operator|.
name|contains
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|allGroups
argument_list|)
return|;
block|}
comment|/**      * Delay returning on a latch or a specific amount of time.      */
DECL|method|delayIfNecessary ()
specifier|private
name|void
name|delayIfNecessary
parameter_list|()
block|{
comment|// cause current method to pause
comment|// resume until get notified
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|getGroupsDelayMs
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|getGroupsDelayMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Cache is being refreshed."
argument_list|)
expr_stmt|;
name|clearBlackList
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|clearBlackList ()
specifier|public
specifier|static
name|void
name|clearBlackList
parameter_list|()
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Clearing the blacklist"
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clearAll ()
specifier|public
specifier|static
name|void
name|clearAll
parameter_list|()
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Resetting FakeGroupMapping"
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requestCount
operator|=
literal|0
expr_stmt|;
name|getGroupsDelayMs
operator|=
literal|0
expr_stmt|;
name|throwException
operator|=
literal|false
expr_stmt|;
name|latch
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|groups
operator|+
literal|" to groups."
argument_list|)
expr_stmt|;
name|allGroups
operator|.
name|addAll
argument_list|(
name|groups
argument_list|)
expr_stmt|;
block|}
DECL|method|addToBlackList (String user)
specifier|public
specifier|static
name|void
name|addToBlackList
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|TESTLOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|user
operator|+
literal|" to the blacklist"
argument_list|)
expr_stmt|;
name|blackList
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequestCount ()
specifier|public
specifier|static
name|int
name|getRequestCount
parameter_list|()
block|{
return|return
name|requestCount
return|;
block|}
DECL|method|resetRequestCount ()
specifier|public
specifier|static
name|void
name|resetRequestCount
parameter_list|()
block|{
name|requestCount
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|setGetGroupsDelayMs (long delayMs)
specifier|public
specifier|static
name|void
name|setGetGroupsDelayMs
parameter_list|(
name|long
name|delayMs
parameter_list|)
block|{
name|getGroupsDelayMs
operator|=
name|delayMs
expr_stmt|;
block|}
DECL|method|setThrowException (boolean throwIfTrue)
specifier|public
specifier|static
name|void
name|setThrowException
parameter_list|(
name|boolean
name|throwIfTrue
parameter_list|)
block|{
name|throwException
operator|=
name|throwIfTrue
expr_stmt|;
block|}
comment|/**      * Hold on returning the group names unless being notified,      * ensure this method is called before {@link #getGroups(String)}.      * Call {@link #resume()} will resume the process.      */
DECL|method|pause ()
specifier|public
specifier|static
name|void
name|pause
parameter_list|()
block|{
comment|// Set a static latch, multiple background refresh threads
comment|// share this instance. So when await is called, all the
comment|// threads will pause until the it decreases the count of
comment|// the latch.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Resume the background refresh thread and return the value      * of group names.      */
DECL|method|resume ()
specifier|public
specifier|static
name|void
name|resume
parameter_list|()
block|{
comment|// if latch is null, it means pause was not called and it is
comment|// safe to ignore.
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ExceptionalGroupMapping
specifier|public
specifier|static
class|class
name|ExceptionalGroupMapping
extends|extends
name|ShellBasedUnixGroupsMapping
block|{
DECL|field|requestCount
specifier|private
specifier|static
name|int
name|requestCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|requestCount
operator|++
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"For test"
argument_list|)
throw|;
block|}
DECL|method|getRequestCount ()
specifier|public
specifier|static
name|int
name|getRequestCount
parameter_list|()
block|{
return|return
name|requestCount
return|;
block|}
DECL|method|resetRequestCount ()
specifier|public
specifier|static
name|void
name|resetRequestCount
parameter_list|()
block|{
name|requestCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGroupsCaching ()
specifier|public
name|void
name|testGroupsCaching
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable negative cache.
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
comment|// regular entry
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// this must be cached. blacklisting should have no effect.
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// ask for a negative entry
try|try
block|{
name|TESTLOG
operator|.
name|error
argument_list|(
literal|"We are not supposed to get here."
operator|+
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"No groups found"
argument_list|)
condition|)
block|{
name|TESTLOG
operator|.
name|error
argument_list|(
literal|"Got unexpected exception: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// this shouldn't be cached. remove from the black list and retry.
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeunPrivilegedGroupMapping
specifier|public
specifier|static
class|class
name|FakeunPrivilegedGroupMapping
extends|extends
name|FakeGroupMapping
block|{
DECL|field|invoked
specifier|private
specifier|static
name|boolean
name|invoked
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|invoked
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
return|;
block|}
block|}
comment|/*    * Group lookup should not happen for static users    */
annotation|@
name|Test
DECL|method|testGroupLookupForStaticUsers ()
specifier|public
name|void
name|testGroupLookupForStaticUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|FakeunPrivilegedGroupMapping
operator|.
name|class
argument_list|,
name|ShellBasedUnixGroupsMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES
argument_list|,
literal|"me=;user1=group1;user2=group1,group2"
argument_list|)
expr_stmt|;
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"non-empty groups for static user"
argument_list|,
name|userGroups
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"group lookup done for static user"
argument_list|,
name|FakeunPrivilegedGroupMapping
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
literal|"group1"
argument_list|)
expr_stmt|;
name|FakeunPrivilegedGroupMapping
operator|.
name|invoked
operator|=
literal|false
expr_stmt|;
name|userGroups
operator|=
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"groups not correct"
argument_list|,
name|expected
operator|.
name|equals
argument_list|(
name|userGroups
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"group lookup done for unprivileged user"
argument_list|,
name|FakeunPrivilegedGroupMapping
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
literal|"group2"
argument_list|)
expr_stmt|;
name|FakeunPrivilegedGroupMapping
operator|.
name|invoked
operator|=
literal|false
expr_stmt|;
name|userGroups
operator|=
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"groups not correct"
argument_list|,
name|expected
operator|.
name|equals
argument_list|(
name|userGroups
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"group lookup done for unprivileged user"
argument_list|,
name|FakeunPrivilegedGroupMapping
operator|.
name|invoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeGroupCaching ()
specifier|public
name|void
name|testNegativeGroupCaching
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user
init|=
literal|"negcache"
decl_stmt|;
specifier|final
name|String
name|failMessage
init|=
literal|"Did not throw IOException: "
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// In the first attempt, the user will be put in the negative cache.
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|failMessage
operator|+
literal|"Failed to obtain groups from FakeGroupMapping."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expects to raise exception for the first time. But the user will be
comment|// put into the negative cache
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No groups found for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// The second time, the user is in the negative cache.
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|failMessage
operator|+
literal|"The user is in the negative cache."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No groups found for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Brings back the backend user-group mapping service.
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// It should still get groups from the negative cache.
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|failMessage
operator|+
literal|"The user is still in the negative cache, even "
operator|+
literal|"FakeGroupMapping has resumed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No groups found for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Let the elements in the negative cache expire.
name|timer
operator|.
name|advance
argument_list|(
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// The groups for the user is expired in the negative cache, a new copy of
comment|// groups for the user is fetched.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|,
name|groups
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachePreventsImplRequest ()
specifier|public
name|void
name|testCachePreventsImplRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable negative cache.
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// First call hits the wire
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second count hits cache
name|assertTrue
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionsFromImplNotCachedInNegativeCache ()
specifier|public
name|void
name|testExceptionsFromImplNotCachedInNegativeCache
parameter_list|()
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|ExceptionalGroupMapping
operator|.
name|class
argument_list|,
name|ShellBasedUnixGroupsMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ExceptionalGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// First call should hit the wire
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"anything"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// okay
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ExceptionalGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second call should hit the wire (no negative caching)
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"anything"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// okay
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ExceptionalGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnlyOneRequestWhenNoEntryIsCached ()
specifier|public
name|void
name|testOnlyOneRequestWhenNoEntryIsCached
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable negative cache.
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|setGetGroupsDelayMs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not happen"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// We start a bunch of threads who all see no cached value
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// But only one thread should have made the request
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOnlyOneRequestWhenExpiredEntryExists ()
specifier|public
name|void
name|testOnlyOneRequestWhenExpiredEntryExists
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|setGetGroupsDelayMs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// We make an initial request to populate the cache
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
comment|// Then expire that entry
name|timer
operator|.
name|advance
argument_list|(
literal|400
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|threads
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not happen"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// We start a bunch of threads who all see the cached value
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// Only one extra request is made
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadNotBlockedWhenExpiredEntryExistsWithBackgroundRefresh ()
specifier|public
name|void
name|testThreadNotBlockedWhenExpiredEntryExistsWithBackgroundRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// We make an initial request to populate the cache
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
comment|// Further lookups will have a delay
name|FakeGroupMapping
operator|.
name|setGetGroupsDelayMs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// add another groups
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"grp3"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
comment|// Then expire that entry
name|timer
operator|.
name|advance
argument_list|(
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Now get the cache entry - it should return immediately
comment|// with the old value and the cache will not have completed
comment|// a request to getGroups yet.
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now sleep for over the delay time and the request count should
comment|// have completed
name|Thread
operator|.
name|sleep
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Another call to get groups should give 3 groups instead of 2
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadBlockedWhenExpiredEntryExistsWithoutBackgroundRefresh ()
specifier|public
name|void
name|testThreadBlockedWhenExpiredEntryExistsWithoutBackgroundRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// We make an initial request to populate the cache
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
comment|// Further lookups will have a delay
name|FakeGroupMapping
operator|.
name|setGetGroupsDelayMs
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// add another group
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"grp3"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
comment|// Then expire that entry
name|timer
operator|.
name|advance
argument_list|(
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Now get the cache entry - it should block and return the new
comment|// 3 group value
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionOnBackgroundRefreshHandled ()
specifier|public
name|void
name|testExceptionOnBackgroundRefreshHandled
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// We make an initial request to populate the cache
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
comment|// add another group
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"grp3"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
comment|// Arrange for an exception to occur only on the
comment|// second call
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Then expire that entry
name|timer
operator|.
name|advance
argument_list|(
literal|4
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Pause the getGroups operation and this will delay the cache refresh
name|FakeGroupMapping
operator|.
name|pause
argument_list|()
expr_stmt|;
comment|// Now get the cache entry - it should return immediately
comment|// with the old value and the cache will not have completed
comment|// a request to getGroups yet.
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resume the getGroups operation and the cache can get refreshed
name|FakeGroupMapping
operator|.
name|resume
argument_list|()
expr_stmt|;
comment|// Now wait for the refresh done, because of the exception, we expect
comment|// a onFailure callback gets called and the counter for failure is 1
name|waitForGroupCounters
argument_list|(
name|groups
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Now the 3rd call to getGroups above will have kicked off
comment|// another refresh that updates the cache, since it no longer gives
comment|// exception, we now expect the counter for success is 1.
name|waitForGroupCounters
argument_list|(
name|groups
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|2
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEntriesExpireIfBackgroundRefreshFails ()
specifier|public
name|void
name|testEntriesExpireIfBackgroundRefreshFails
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// We make an initial request to populate the cache
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
comment|// Now make all calls to the FakeGroupMapper throw exceptions
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The cache entry expires for refresh after 1 second
comment|// It expires for eviction after 1 * 10 seconds after it was last written
comment|// So if we call getGroups repeatedly over 9 seconds, 9 refreshes should
comment|// be triggered which will fail to update the key, but the keys old value
comment|// will be retrievable until it is evicted after about 10 seconds.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|timer
operator|.
name|advance
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Wait until the 11th second. The call to getGroups should throw
comment|// an exception as the key will have been evicted and FakeGroupMapping
comment|// will throw IO Exception when it is asked for new groups. In this case
comment|// load must be called synchronously as there is no key present
name|timer
operator|.
name|advance
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// pass
block|}
comment|// Finally check groups are retrieve again after FakeGroupMapping
comment|// stops throw exceptions
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackgroundRefreshCounters ()
specifier|public
name|void
name|testBackgroundRefreshCounters
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_THREADS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// populate the cache
name|String
index|[]
name|grps
init|=
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|,
literal|"four"
block|,
literal|"five"
block|}
decl_stmt|;
for|for
control|(
name|String
name|g
range|:
name|grps
control|)
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
comment|// expire the cache
name|timer
operator|.
name|advance
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|pause
argument_list|()
expr_stmt|;
comment|// Request all groups again, as there are 2 threads to process them
comment|// 3 should get queued and 2 should be running
for|for
control|(
name|String
name|g
range|:
name|grps
control|)
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|waitForGroupCounters
argument_list|(
name|groups
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|resume
argument_list|()
expr_stmt|;
comment|// Once resumed, all results should be returned immediately
name|waitForGroupCounters
argument_list|(
name|groups
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now run again, this time throwing exceptions but no delay
name|timer
operator|.
name|advance
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|setGetGroupsDelayMs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|g
range|:
name|grps
control|)
block|{
name|groups
operator|.
name|getGroups
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|waitForGroupCounters
argument_list|(
name|groups
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForGroupCounters (Groups groups, long expectedQueued, long expectedRunning, long expectedSuccess, long expectedExpection)
specifier|private
name|void
name|waitForGroupCounters
parameter_list|(
name|Groups
name|groups
parameter_list|,
name|long
name|expectedQueued
parameter_list|,
name|long
name|expectedRunning
parameter_list|,
name|long
name|expectedSuccess
parameter_list|,
name|long
name|expectedExpection
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
index|[]
name|expected
init|=
block|{
name|expectedQueued
block|,
name|expectedRunning
block|,
name|expectedSuccess
block|,
name|expectedExpection
block|}
decl_stmt|;
name|long
index|[]
name|actual
init|=
operator|new
name|long
index|[
name|expected
operator|.
name|length
index|]
decl_stmt|;
comment|// wait for a certain time until the counters reach
comment|// to expected values. Check values in 20 ms interval.
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|actual
index|[
literal|0
index|]
operator|=
name|groups
operator|.
name|getBackgroundRefreshQueued
argument_list|()
expr_stmt|;
name|actual
index|[
literal|1
index|]
operator|=
name|groups
operator|.
name|getBackgroundRefreshRunning
argument_list|()
expr_stmt|;
name|actual
index|[
literal|2
index|]
operator|=
name|groups
operator|.
name|getBackgroundRefreshSuccess
argument_list|()
expr_stmt|;
name|actual
index|[
literal|3
index|]
operator|=
name|groups
operator|.
name|getBackgroundRefreshException
argument_list|()
expr_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|20
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Excepted group counter values are not reached in given time,"
operator|+
literal|" expecting (Queued, Running, Success, Exception) : "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" but actual : "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExceptionCallingLoadWithoutBackgroundRefreshReturnsOldValue ()
specifier|public
name|void
name|testExceptionCallingLoadWithoutBackgroundRefreshReturnsOldValue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// First populate the cash
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Advance the timer so a refresh is required
name|timer
operator|.
name|advance
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// This call should throw an exception
name|FakeGroupMapping
operator|.
name|setThrowException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheEntriesExpire ()
specifier|public
name|void
name|testCacheEntriesExpire
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_CACHE_SECS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
comment|// We make an entry
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
name|timer
operator|.
name|advance
argument_list|(
literal|20
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Cache entry has expired so it results in a new fetch
name|groups
operator|.
name|getGroups
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeCacheClearedOnRefresh ()
specifier|public
name|void
name|testNegativeCacheClearedOnRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|clearBlackList
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"dne"
argument_list|)
expr_stmt|;
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"dne"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to find this group"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// pass
block|}
name|int
name|startingRequestCount
init|=
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
decl_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"dne"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|g
init|=
name|groups
operator|.
name|getGroups
argument_list|(
literal|"dne"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should have failed to find this group"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// pass
block|}
name|assertEquals
argument_list|(
name|startingRequestCount
operator|+
literal|1
argument_list|,
name|FakeGroupMapping
operator|.
name|getRequestCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNegativeCacheEntriesExpire ()
specifier|public
name|void
name|testNegativeCacheEntriesExpire
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|FakeTimer
name|timer
init|=
operator|new
name|FakeTimer
argument_list|()
decl_stmt|;
comment|// Ensure that stale entries are removed from negative cache every 2 seconds
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|,
name|timer
argument_list|)
decl_stmt|;
name|groups
operator|.
name|cacheGroupsAdd
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|myGroups
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Add both these users to blacklist so that they
comment|// can be added to negative cache
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|FakeGroupMapping
operator|.
name|addToBlackList
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
comment|// Put user1 in negative cache.
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw IOException : Failed to obtain groups"
operator|+
literal|" from FakeGroupMapping."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No groups found for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Check if user1 exists in negative cache
name|assertTrue
argument_list|(
name|groups
operator|.
name|getNegativeCache
argument_list|()
operator|.
name|contains
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance fake timer
name|timer
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Put user2 in negative cache
try|try
block|{
name|groups
operator|.
name|getGroups
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw IOException : Failed to obtain groups"
operator|+
literal|" from FakeGroupMapping."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"No groups found for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Check if user2 exists in negative cache
name|assertTrue
argument_list|(
name|groups
operator|.
name|getNegativeCache
argument_list|()
operator|.
name|contains
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance timer. Only user2 should be present in negative cache.
name|timer
operator|.
name|advance
argument_list|(
literal|1100
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|groups
operator|.
name|getNegativeCache
argument_list|()
operator|.
name|contains
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groups
operator|.
name|getNegativeCache
argument_list|()
operator|.
name|contains
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance timer. Even user2 should not be present in negative cache.
name|timer
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|groups
operator|.
name|getNegativeCache
argument_list|()
operator|.
name|contains
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

