begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_comment
comment|/**  * Test the default and customized behaviors of XFrameOptionsFilter.  *  */
end_comment

begin_class
DECL|class|TestXFrameOptionsFilter
specifier|public
class|class
name|TestXFrameOptionsFilter
block|{
DECL|field|X_FRAME_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
name|X_FRAME_OPTIONS
init|=
literal|"X-Frame-Options"
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultOptionsValue ()
specifier|public
name|void
name|testDefaultOptionsValue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FilterConfig
name|filterConfig
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|XFrameOptionsFilter
operator|.
name|CUSTOM_HEADER_PARAM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"header should be visible inside chain and filters."
argument_list|,
operator|(
operator|(
name|HttpServletResponse
operator|)
name|args
index|[
literal|1
index|]
operator|)
operator|.
name|containsHeader
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Options value incorrect should be DENY but is: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|,
literal|"DENY"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|XFrameOptionsFilter
name|filter
init|=
operator|new
name|XFrameOptionsFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X-Frame-Options count not equal to 1."
argument_list|,
name|headers
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomOptionsValueAndNoOverrides ()
specifier|public
name|void
name|testCustomOptionsValueAndNoOverrides
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FilterConfig
name|filterConfig
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|XFrameOptionsFilter
operator|.
name|CUSTOM_HEADER_PARAM
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"SAMEORIGIN"
argument_list|)
expr_stmt|;
name|HttpServletRequest
name|request
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|HttpServletResponse
name|response
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilterChain
name|chain
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FilterChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|HttpServletResponse
name|resp
init|=
operator|(
name|HttpServletResponse
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Header should be visible inside chain and filters."
argument_list|,
name|resp
operator|.
name|containsHeader
argument_list|(
name|X_FRAME_OPTIONS
argument_list|)
argument_list|)
expr_stmt|;
comment|// let's try and set another value for the header and make
comment|// sure that it doesn't overwrite the configured value
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resp
operator|instanceof
name|XFrameOptionsFilter
operator|.
name|XFrameOptionsResponseWrapper
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setHeader
argument_list|(
name|X_FRAME_OPTIONS
argument_list|,
literal|"LJM"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|chain
argument_list|)
operator|.
name|doFilter
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Options value incorrect should be SAMEORIGIN but is: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|,
literal|"SAMEORIGIN"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|response
argument_list|)
operator|.
name|setHeader
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|XFrameOptionsFilter
name|filter
init|=
operator|new
name|XFrameOptionsFilter
argument_list|()
decl_stmt|;
name|filter
operator|.
name|init
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
name|filter
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X-Frame-Options count not equal to 1."
argument_list|,
name|headers
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X-Frame-Options count not equal to 1."
argument_list|,
name|headers
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
argument_list|,
literal|"SAMEORIGIN"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

