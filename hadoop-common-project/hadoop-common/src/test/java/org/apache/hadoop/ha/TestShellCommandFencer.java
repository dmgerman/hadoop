begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_class
DECL|class|TestShellCommandFencer
specifier|public
class|class
name|TestShellCommandFencer
block|{
DECL|field|fencer
specifier|private
name|ShellCommandFencer
name|fencer
init|=
name|createFencer
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupLogSpy ()
specifier|public
specifier|static
name|void
name|setupLogSpy
parameter_list|()
block|{
name|ShellCommandFencer
operator|.
name|LOG
operator|=
name|spy
argument_list|(
name|ShellCommandFencer
operator|.
name|LOG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetLogSpy ()
specifier|public
name|void
name|resetLogSpy
parameter_list|()
block|{
name|Mockito
operator|.
name|reset
argument_list|(
name|ShellCommandFencer
operator|.
name|LOG
argument_list|)
expr_stmt|;
block|}
DECL|method|createFencer ()
specifier|private
specifier|static
name|ShellCommandFencer
name|createFencer
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"in.fencing.tests"
argument_list|,
literal|"yessir"
argument_list|)
expr_stmt|;
name|ShellCommandFencer
name|fencer
init|=
operator|new
name|ShellCommandFencer
argument_list|()
decl_stmt|;
name|fencer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fencer
return|;
block|}
comment|/**    * Test that the exit code of the script determines    * whether the fencer succeeded or failed    */
annotation|@
name|Test
DECL|method|testBasicSuccessFailure ()
specifier|public
name|void
name|testBasicSuccessFailure
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"exit 0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"exit 1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// bad path should also fail
name|assertFalse
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"xxxxxxxxxxxx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckArgs ()
specifier|public
name|void
name|testCheckArgs
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NodeFencer
operator|.
name|CONF_METHODS_KEY
argument_list|,
literal|"shell"
argument_list|)
expr_stmt|;
operator|new
name|NodeFencer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw when passing no args to shell"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadFencingConfigurationException
name|confe
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected exception:"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|confe
argument_list|)
argument_list|,
name|confe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No argument passed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that lines on stdout get passed as INFO    * level messages    */
annotation|@
name|Test
DECL|method|testStdoutLogging ()
specifier|public
name|void
name|testStdoutLogging
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"echo hello"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|ShellCommandFencer
operator|.
name|LOG
argument_list|)
operator|.
name|info
argument_list|(
name|Mockito
operator|.
name|endsWith
argument_list|(
literal|"echo hello: hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that lines on stderr get passed as    * WARN level log messages    */
annotation|@
name|Test
DECL|method|testStderrLogging ()
specifier|public
name|void
name|testStderrLogging
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"echo hello>&2"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|ShellCommandFencer
operator|.
name|LOG
argument_list|)
operator|.
name|warn
argument_list|(
name|Mockito
operator|.
name|endsWith
argument_list|(
literal|"echo hello>&2: hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the Configuration gets passed as    * environment variables to the fencer.    */
annotation|@
name|Test
DECL|method|testConfAsEnvironment ()
specifier|public
name|void
name|testConfAsEnvironment
parameter_list|()
block|{
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"echo $in_fencing_tests"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|ShellCommandFencer
operator|.
name|LOG
argument_list|)
operator|.
name|info
argument_list|(
name|Mockito
operator|.
name|endsWith
argument_list|(
literal|"echo $in...ing_tests: yessir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we properly close off our input to the subprocess    * such that it knows there's no tty connected. This is important    * so that, if we use 'ssh', it won't try to prompt for a password    * and block forever, for example.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSubprocessInputIsClosed ()
specifier|public
name|void
name|testSubprocessInputIsClosed
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|fencer
operator|.
name|tryFence
argument_list|(
literal|"read"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommandAbbreviation ()
specifier|public
name|void
name|testCommandAbbreviation
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a...f"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdef"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdef"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdef"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdef"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdef"
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a...g"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdefg"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a...h"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdefgh"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a...gh"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdefgh"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab...gh"
argument_list|,
name|ShellCommandFencer
operator|.
name|abbreviate
argument_list|(
literal|"abcdefgh"
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

