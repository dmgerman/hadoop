begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.erasurecode.rawcoder
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|TestCoderBase
import|;
end_import

begin_comment
comment|/**  * Raw coder test base with utilities.  */
end_comment

begin_class
DECL|class|TestRawCoderBase
specifier|public
specifier|abstract
class|class
name|TestRawCoderBase
extends|extends
name|TestCoderBase
block|{
DECL|field|encoderClass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|RawErasureEncoder
argument_list|>
name|encoderClass
decl_stmt|;
DECL|field|decoderClass
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|RawErasureDecoder
argument_list|>
name|decoderClass
decl_stmt|;
comment|/**    * Generating source data, encoding, recovering and then verifying.    * RawErasureCoder mainly uses ECChunk to pass input and output data buffers,    * it supports two kinds of ByteBuffers, one is array backed, the other is    * direct ByteBuffer. Have usingDirectBuffer to indicate which case to test.    * @param usingDirectBuffer    */
DECL|method|testCoding (boolean usingDirectBuffer)
specifier|protected
name|void
name|testCoding
parameter_list|(
name|boolean
name|usingDirectBuffer
parameter_list|)
block|{
comment|// Generate data and encode
name|ECChunk
index|[]
name|dataChunks
init|=
name|prepareDataChunksForEncoding
argument_list|()
decl_stmt|;
name|ECChunk
index|[]
name|parityChunks
init|=
name|prepareParityChunksForEncoding
argument_list|()
decl_stmt|;
name|RawErasureEncoder
name|encoder
init|=
name|createEncoder
argument_list|()
decl_stmt|;
comment|// Backup all the source chunks for later recovering because some coders
comment|// may affect the source data.
name|ECChunk
index|[]
name|clonedDataChunks
init|=
name|cloneChunksWithData
argument_list|(
name|dataChunks
argument_list|)
decl_stmt|;
comment|// Make a copy of a strip for later comparing
name|ECChunk
index|[]
name|toEraseDataChunks
init|=
name|copyDataChunksToErase
argument_list|(
name|clonedDataChunks
argument_list|)
decl_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|dataChunks
argument_list|,
name|parityChunks
argument_list|)
expr_stmt|;
comment|// Erase the copied sources
name|eraseSomeDataBlocks
argument_list|(
name|clonedDataChunks
argument_list|)
expr_stmt|;
comment|//Decode
name|ECChunk
index|[]
name|inputChunks
init|=
name|prepareInputChunksForDecoding
argument_list|(
name|clonedDataChunks
argument_list|,
name|parityChunks
argument_list|)
decl_stmt|;
name|ECChunk
index|[]
name|recoveredChunks
init|=
name|prepareOutputChunksForDecoding
argument_list|()
decl_stmt|;
name|RawErasureDecoder
name|decoder
init|=
name|createDecoder
argument_list|()
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|inputChunks
argument_list|,
name|getErasedIndexesForDecoding
argument_list|()
argument_list|,
name|recoveredChunks
argument_list|)
expr_stmt|;
comment|//Compare
name|compareAndVerify
argument_list|(
name|toEraseDataChunks
argument_list|,
name|recoveredChunks
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the raw erasure encoder to test    * @return    */
DECL|method|createEncoder ()
specifier|protected
name|RawErasureEncoder
name|createEncoder
parameter_list|()
block|{
name|RawErasureEncoder
name|encoder
decl_stmt|;
try|try
block|{
name|encoder
operator|=
name|encoderClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create encoder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|encoder
operator|.
name|initialize
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
return|return
name|encoder
return|;
block|}
comment|/**    * create the raw erasure decoder to test    * @return    */
DECL|method|createDecoder ()
specifier|protected
name|RawErasureDecoder
name|createDecoder
parameter_list|()
block|{
name|RawErasureDecoder
name|decoder
decl_stmt|;
try|try
block|{
name|decoder
operator|=
name|decoderClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create decoder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|decoder
operator|.
name|initialize
argument_list|(
name|numDataUnits
argument_list|,
name|numParityUnits
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
return|return
name|decoder
return|;
block|}
block|}
end_class

end_unit

