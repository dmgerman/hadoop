begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFsShellTouch
specifier|public
class|class
name|TestFsShellTouch
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFsShellTouch
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|shell
specifier|static
name|FsShell
name|shell
decl_stmt|;
DECL|field|lfs
specifier|static
name|LocalFileSystem
name|lfs
decl_stmt|;
DECL|field|testRootDir
specifier|static
name|Path
name|testRootDir
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|shell
operator|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testRootDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"test/build/data"
argument_list|)
argument_list|,
literal|"testFsShell"
argument_list|)
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|mkdirs
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setWorkingDirectory
argument_list|(
name|testRootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|prepFiles ()
specifier|public
name|void
name|prepFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|lfs
operator|.
name|setVerifyChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|setWriteChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|shellRun (String... args)
specifier|private
name|int
name|shellRun
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"exit "
operator|+
name|exitCode
operator|+
literal|" - "
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|" "
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
annotation|@
name|Test
DECL|method|testTouchz ()
specifier|public
name|void
name|testTouchz
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure newFile does not exist
specifier|final
name|String
name|newFileName
init|=
literal|"newFile"
decl_stmt|;
specifier|final
name|Path
name|newFile
init|=
operator|new
name|Path
argument_list|(
name|newFileName
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|newFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Expected successful touchz on a new file"
argument_list|,
name|shellRun
argument_list|(
literal|"-touchz"
argument_list|,
name|newFileName
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|shellRun
argument_list|(
literal|"-ls"
argument_list|,
name|newFileName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Expected successful touchz on an existing zero-length file"
argument_list|,
name|shellRun
argument_list|(
literal|"-touchz"
argument_list|,
name|newFileName
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure noDir does not exist
specifier|final
name|String
name|noDirName
init|=
literal|"noDir"
decl_stmt|;
specifier|final
name|Path
name|noDir
init|=
operator|new
name|Path
argument_list|(
name|noDirName
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|noDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lfs
operator|.
name|exists
argument_list|(
name|noDir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Expected failed touchz in a non-existent directory"
argument_list|,
name|shellRun
argument_list|(
literal|"-touchz"
argument_list|,
name|noDirName
operator|+
literal|"/foo"
argument_list|)
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

