begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|assertMkdirs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_comment
comment|/**  * Test directory operations  */
end_comment

begin_class
DECL|class|AbstractContractMkdirTest
specifier|public
specifier|abstract
class|class
name|AbstractContractMkdirTest
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Test
DECL|method|testMkDirRmDir ()
specifier|public
name|void
name|testMkDirRmDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testMkDirRmDir"
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"directory already exists"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkDirRmRfDir ()
specifier|public
name|void
name|testMkDirRmRfDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create a directory then recursive delete it"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testMkDirRmRfDir"
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"directory already exists"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMkdirOverFile ()
specifier|public
name|void
name|testNoMkdirOverFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"try to mkdir over a file"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testNoMkdirOverFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|' '
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|made
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"mkdirs did not fail over a file but returned "
operator|+
name|made
operator|+
literal|"; "
operator|+
name|ls
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
decl||
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|//parent is a directory
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//here the FS says "no create"
name|handleRelaxedException
argument_list|(
literal|"mkdirs"
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirOverParentFile ()
specifier|public
name|void
name|testMkdirOverParentFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"try to mkdir where a parent is a file"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testMkdirOverParentFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|' '
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child-to-mkdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|made
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"mkdirs did not fail over a file but returned "
operator|+
name|made
operator|+
literal|"; "
operator|+
name|ls
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
decl||
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|//parent is a directory
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"mkdirs"
argument_list|,
literal|"ParentNotDirectoryException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirSlashHandling ()
specifier|public
name|void
name|testMkdirSlashHandling
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify mkdir slash handling"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[]
block|{
name|path
argument_list|(
literal|"testMkdirSlashHandling/a"
argument_list|)
block|,
comment|// w/o trailing slash
name|path
argument_list|(
literal|"testMkdirSlashHandling/b/"
argument_list|)
block|,
comment|// w/ trailing slash
comment|// unqualified w/o trailing slash
operator|new
name|Path
argument_list|(
name|getContract
argument_list|()
operator|.
name|getTestPath
argument_list|()
operator|+
literal|"/testMkdirSlashHandling/c"
argument_list|)
block|,
comment|// unqualified w/ trailing slash
operator|new
name|Path
argument_list|(
name|getContract
argument_list|()
operator|.
name|getTestPath
argument_list|()
operator|+
literal|"/testMkdirSlashHandling/d/"
argument_list|)
block|,
comment|// unqualified w/ multiple trailing slashes
operator|new
name|Path
argument_list|(
name|getContract
argument_list|()
operator|.
name|getTestPath
argument_list|()
operator|+
literal|"/testMkdirSlashHandling/e///"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|path
operator|+
literal|" does not exist after mkdirs"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|path
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertIsDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMkdirsPopulatingAllNonexistentAncestors ()
specifier|public
name|void
name|testMkdirsPopulatingAllNonexistentAncestors
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"Verify mkdir will populate all its non-existent ancestors"
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"testMkdirsPopulatingAllNonexistentAncestors"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|parent
operator|+
literal|" should exist before making nested dir"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|Path
name|nested
init|=
name|path
argument_list|(
name|parent
operator|+
literal|"/a/b/c/d/e/f/g/h/i/j/k/L"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|nested
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|nested
operator|!=
literal|null
operator|&&
operator|!
name|nested
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|&&
operator|!
name|nested
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|assertPathExists
argument_list|(
name|nested
operator|+
literal|" nested dir should exist"
argument_list|,
name|nested
argument_list|)
expr_stmt|;
name|nested
operator|=
name|nested
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMkdirsDoesNotRemoveParentDirectories ()
specifier|public
name|void
name|testMkdirsDoesNotRemoveParentDirectories
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"Verify mkdir will make its parent existent"
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|parent
init|=
name|path
argument_list|(
literal|"testMkdirsDoesNotRemoveParentDirectories"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
name|parent
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
name|p
operator|+
literal|" should exist after mkdir("
operator|+
name|p
operator|+
literal|")"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|path
argument_list|(
name|p
operator|+
literal|"/dir-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// After mkdirs(sub-directory), its parent directory still exists
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|assertPathExists
argument_list|(
literal|"Path "
operator|+
name|p
operator|+
literal|" should exist"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertIsDirectory
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateDirWithExistingDir ()
specifier|public
name|void
name|testCreateDirWithExistingDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testCreateDirWithExistingDir"
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertMkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertMkdirs
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

