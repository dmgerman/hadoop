begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_comment
comment|/**  * Test directory operations  */
end_comment

begin_class
DECL|class|AbstractContractMkdirTest
specifier|public
specifier|abstract
class|class
name|AbstractContractMkdirTest
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Test
DECL|method|testMkDirRmDir ()
specifier|public
name|void
name|testMkDirRmDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testMkDirRmDir"
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"directory already exists"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkDirRmRfDir ()
specifier|public
name|void
name|testMkDirRmRfDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"create a directory then recursive delete it"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|path
argument_list|(
literal|"testMkDirRmRfDir"
argument_list|)
decl_stmt|;
name|assertPathDoesNotExist
argument_list|(
literal|"directory already exists"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMkdirOverFile ()
specifier|public
name|void
name|testNoMkdirOverFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"try to mkdir over a file"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testNoMkdirOverFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|' '
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|made
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"mkdirs did not fail over a file but returned "
operator|+
name|made
operator|+
literal|"; "
operator|+
name|ls
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
decl||
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|//parent is a directory
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//here the FS says "no create"
name|handleRelaxedException
argument_list|(
literal|"mkdirs"
argument_list|,
literal|"FileAlreadyExistsException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirOverParentFile ()
specifier|public
name|void
name|testMkdirOverParentFile
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"try to mkdir where a parent is a file"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|path
argument_list|(
literal|"testMkdirOverParentFile"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dataset
init|=
name|dataset
argument_list|(
literal|1024
argument_list|,
literal|' '
argument_list|,
literal|'z'
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"child-to-mkdir"
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|made
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"mkdirs did not fail over a file but returned "
operator|+
name|made
operator|+
literal|"; "
operator|+
name|ls
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
decl||
name|FileAlreadyExistsException
name|e
parameter_list|)
block|{
comment|//parent is a directory
name|handleExpectedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleRelaxedException
argument_list|(
literal|"mkdirs"
argument_list|,
literal|"ParentNotDirectoryException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|assertIsFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ContractTestUtils
operator|.
name|readDataset
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|compareByteArrays
argument_list|(
name|dataset
argument_list|,
name|bytes
argument_list|,
name|dataset
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir failed"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|assertDeleted
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMkdirSlashHandling ()
specifier|public
name|void
name|testMkdirSlashHandling
parameter_list|()
throws|throws
name|Throwable
block|{
name|describe
argument_list|(
literal|"verify mkdir slash handling"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// No trailing slash
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testmkdir/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir without trailing slash failed"
argument_list|,
name|path
argument_list|(
literal|"testmkdir/a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// With trailing slash
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|(
literal|"testmkdir/b/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertPathExists
argument_list|(
literal|"mkdir with trailing slash failed"
argument_list|,
name|path
argument_list|(
literal|"testmkdir/b/"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mismatched slashes
name|assertPathExists
argument_list|(
literal|"check path existence without trailing slash failed"
argument_list|,
name|path
argument_list|(
literal|"testmkdir/b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

