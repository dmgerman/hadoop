begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestMapFile
specifier|public
class|class
name|TestMapFile
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestMapFile
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can't clean up test root dir"
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|field|defaultProgressable
specifier|private
specifier|static
specifier|final
name|Progressable
name|defaultProgressable
init|=
operator|new
name|Progressable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
block|}
decl_stmt|;
DECL|field|defaultCodec
specifier|private
specifier|static
specifier|final
name|CompressionCodec
name|defaultCodec
init|=
operator|new
name|CompressionCodec
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mock
argument_list|(
name|CompressionOutputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mock
argument_list|(
name|CompressionOutputStream
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
DECL|method|createWriter (String fileName, Class<? extends WritableComparable<?>> keyClass, Class<? extends Writable> valueClass)
specifier|private
name|MapFile
operator|.
name|Writer
name|createWriter
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
operator|.
name|setIndexInterval
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|dirName
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|keyClass
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|valueClass
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createReader (String fileName, Class<? extends WritableComparable<?>> keyClass)
specifier|private
name|MapFile
operator|.
name|Reader
name|createReader
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|keyClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|dirName
argument_list|,
name|conf
argument_list|,
name|MapFile
operator|.
name|Reader
operator|.
name|comparator
argument_list|(
operator|new
name|WritableComparator
argument_list|(
name|keyClass
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * test {@code MapFile.Reader.getClosest()} method     *    */
annotation|@
name|Test
DECL|method|testGetClosestOnCurrentApi ()
specifier|public
name|void
name|testGetClosestOnCurrentApi
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"testGetClosestOnCurrentApi.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_PREFIX
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|FIRST_KEY
init|=
literal|1
decl_stmt|;
comment|// Test keys: 11,21,31,...,91
for|for
control|(
name|int
name|i
init|=
name|FIRST_KEY
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|createReader
argument_list|(
name|TEST_PREFIX
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"55"
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|// Test get closest with step forward
name|Text
name|closest
init|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"61"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test get closest with step back
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"51"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test get closest when we pass explicit key
specifier|final
name|Text
name|explicitKey
init|=
operator|new
name|Text
argument_list|(
literal|"21"
argument_list|)
decl_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|explicitKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"21"
argument_list|)
argument_list|,
name|explicitKey
argument_list|)
expr_stmt|;
comment|// Test what happens at boundaries. Assert if searching a key that is
comment|// less than first key in the mapfile, that the first key is returned.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FIRST_KEY
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|closest
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that null is returned if key is> last entry in mapfile.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"92"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Not null key in testGetClosestWithNewCode"
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// If we were looking for the key before, we should get the last key
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"91"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Reader.midKey() } method     */
annotation|@
name|Test
DECL|method|testMidKeyOnCurrentApi ()
specifier|public
name|void
name|testMidKeyOnCurrentApi
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"testMidKeyOnCurrentApi.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_PREFIX
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// 0,1,....9
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|createReader
argument_list|(
name|TEST_PREFIX
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|(
name|SIZE
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
argument_list|,
name|reader
operator|.
name|midKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test  {@code MapFile.Writer.rename()} method     */
annotation|@
name|Test
DECL|method|testRename ()
specifier|public
name|void
name|testRename
parameter_list|()
block|{
specifier|final
name|String
name|NEW_FILE_NAME
init|=
literal|"test-new.mapfile"
decl_stmt|;
specifier|final
name|String
name|OLD_FILE_NAME
init|=
literal|"test-old.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|=
name|createWriter
argument_list|(
name|OLD_FILE_NAME
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|MapFile
operator|.
name|rename
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|OLD_FILE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|NEW_FILE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|NEW_FILE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testRename error "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.rename()}     *  method with throwing {@code IOException}      */
annotation|@
name|Test
DECL|method|testRenameWithException ()
specifier|public
name|void
name|testRenameWithException
parameter_list|()
block|{
specifier|final
name|String
name|ERROR_MESSAGE
init|=
literal|"Can't rename file"
decl_stmt|;
specifier|final
name|String
name|NEW_FILE_NAME
init|=
literal|"test-new.mapfile"
decl_stmt|;
specifier|final
name|String
name|OLD_FILE_NAME
init|=
literal|"test-old.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|spyFs
init|=
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|writer
operator|=
name|createWriter
argument_list|(
name|OLD_FILE_NAME
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|oldDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|OLD_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|NEW_FILE_NAME
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyFs
operator|.
name|rename
argument_list|(
name|oldDir
argument_list|,
name|newDir
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
name|ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|rename
argument_list|(
name|spyFs
argument_list|,
name|oldDir
operator|.
name|toString
argument_list|()
argument_list|,
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testRenameWithException no exception error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"testRenameWithException invalid IOExceptionMessage !!!"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRenameWithFalse ()
specifier|public
name|void
name|testRenameWithFalse
parameter_list|()
block|{
specifier|final
name|String
name|ERROR_MESSAGE
init|=
literal|"Could not rename"
decl_stmt|;
specifier|final
name|String
name|NEW_FILE_NAME
init|=
literal|"test-new.mapfile"
decl_stmt|;
specifier|final
name|String
name|OLD_FILE_NAME
init|=
literal|"test-old.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|spyFs
init|=
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|writer
operator|=
name|createWriter
argument_list|(
name|OLD_FILE_NAME
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|oldDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|OLD_FILE_NAME
argument_list|)
decl_stmt|;
name|Path
name|newDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|NEW_FILE_NAME
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyFs
operator|.
name|rename
argument_list|(
name|oldDir
argument_list|,
name|newDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|rename
argument_list|(
name|spyFs
argument_list|,
name|oldDir
operator|.
name|toString
argument_list|()
argument_list|,
name|newDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testRenameWithException no exception error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testRenameWithFalse invalid IOExceptionMessage error !!!"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test throwing {@code IOException} in {@code MapFile.Writer} constructor        */
annotation|@
name|Test
DECL|method|testWriteWithFailDirCreation ()
specifier|public
name|void
name|testWriteWithFailDirCreation
parameter_list|()
block|{
name|String
name|ERROR_MESSAGE
init|=
literal|"Mkdirs failed to create directory"
decl_stmt|;
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"fail.mapfile"
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|spyFs
init|=
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Path
name|pathSpy
init|=
name|spy
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pathSpy
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|spyFs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|spyFs
operator|.
name|mkdirs
argument_list|(
name|dirName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|pathSpy
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testWriteWithFailDirCreation error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"testWriteWithFailDirCreation ex error !!!"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Reader.finalKey()} method    */
annotation|@
name|Test
DECL|method|testOnFinalKey ()
specifier|public
name|void
name|testOnFinalKey
parameter_list|()
block|{
specifier|final
name|String
name|TEST_METHOD_KEY
init|=
literal|"testOnFinalKey.mapfile"
decl_stmt|;
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|createReader
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|IntWritable
name|expectedKey
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|reader
operator|.
name|finalKey
argument_list|(
name|expectedKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testOnFinalKey not same !!!"
argument_list|,
name|expectedKey
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testOnFinalKey error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer} constructor with key, value    * and validate it with {@code keyClass(), valueClass()} methods     */
annotation|@
name|Test
DECL|method|testKeyValueClasses ()
specifier|public
name|void
name|testKeyValueClasses
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|<
name|?
argument_list|>
argument_list|>
name|keyClass
init|=
name|IntWritable
operator|.
name|class
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|valueClass
init|=
name|Text
operator|.
name|class
decl_stmt|;
try|try
block|{
name|createWriter
argument_list|(
literal|"testKeyValueClasses.mapfile"
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"writer key class null error !!!"
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|keyClass
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"writer value class null error !!!"
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|valueClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Reader.getClosest() } with wrong class key    */
annotation|@
name|Test
DECL|method|testReaderGetClosest ()
specifier|public
name|void
name|testReaderGetClosest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_METHOD_KEY
init|=
literal|"testReaderWithWrongKeyClass.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|createReader
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getClosest
argument_list|(
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no excepted exception in testReaderWithWrongKeyClass !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|/* Should be thrown to pass the test */
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer.append() } with wrong key class    */
annotation|@
name|Test
DECL|method|testReaderWithWrongValueClass ()
specifier|public
name|void
name|testReaderWithWrongValueClass
parameter_list|()
block|{
specifier|final
name|String
name|TEST_METHOD_KEY
init|=
literal|"testReaderWithWrongValueClass.mapfile"
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no excepted exception in testReaderWithWrongKeyClass !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|/* Should be thrown to pass the test */
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Reader.next(key, value)} for iteration.    */
annotation|@
name|Test
DECL|method|testReaderKeyIteration ()
specifier|public
name|void
name|testReaderKeyIteration
parameter_list|()
block|{
specifier|final
name|String
name|TEST_METHOD_KEY
init|=
literal|"testReaderKeyIteration.mapfile"
decl_stmt|;
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
name|int
name|ITERATIONS
init|=
literal|5
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Value:"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|createReader
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// test iteration
name|Writable
name|startValue
init|=
operator|new
name|Text
argument_list|(
literal|"Value:"
operator|+
name|start
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|ITERATIONS
condition|)
block|{
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|Writable
name|value
init|=
name|startValue
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"reader seek error !!!"
argument_list|,
name|reader
operator|.
name|seek
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|SIZE
operator|/
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"reader seek error !!!"
argument_list|,
name|reader
operator|.
name|seek
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|SIZE
operator|*
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"reader seek error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer.testFix} method    */
annotation|@
name|Test
DECL|method|testFix ()
specifier|public
name|void
name|testFix
parameter_list|()
block|{
specifier|final
name|String
name|INDEX_LESS_MAP_FILE
init|=
literal|"testFix.mapfile"
decl_stmt|;
name|int
name|PAIR_SIZE
init|=
literal|20
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|INDEX_LESS_MAP_FILE
argument_list|)
decl_stmt|;
name|writer
operator|=
name|createWriter
argument_list|(
name|INDEX_LESS_MAP_FILE
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PAIR_SIZE
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|indexFile
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|,
literal|"."
operator|+
name|INDEX_LESS_MAP_FILE
operator|+
literal|"/index"
argument_list|)
decl_stmt|;
name|boolean
name|isDeleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|indexFile
operator|.
name|exists
argument_list|()
condition|)
name|isDeleted
operator|=
name|indexFile
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDeleted
condition|)
name|assertTrue
argument_list|(
literal|"testFix error !!!"
argument_list|,
name|MapFile
operator|.
name|fix
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
operator|==
name|PAIR_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testFix error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@link MapFile#fix(FileSystem, Path, Class<? extends Writable>,    *                         Class<? extends Writable>, boolean, Configuration)}    * method in case of BLOCK compression    */
annotation|@
name|Test
DECL|method|testFixBlockCompress ()
specifier|public
name|void
name|testFixBlockCompress
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|indexLessMapFile
init|=
literal|"testFixBlockCompress.mapfile"
decl_stmt|;
specifier|final
name|int
name|compressBlocksize
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|indexInterval
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|noBlocks
init|=
literal|4
decl_stmt|;
specifier|final
name|String
name|value
init|=
literal|"value-"
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|noBlocks
operator|*
name|compressBlocksize
operator|/
operator|(
literal|4
operator|+
name|value
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.seqfile.compress.blocksize"
argument_list|,
name|compressBlocksize
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|Writer
operator|.
name|setIndexInterval
argument_list|(
name|conf
argument_list|,
name|indexInterval
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|indexLessMapFile
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|BLOCK
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|value
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|index
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|MapFile
operator|.
name|INDEX_FILE_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|index
argument_list|,
name|index
operator|.
name|suffix
argument_list|(
literal|".orig"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No of valid MapFile entries wrong"
argument_list|,
name|size
argument_list|,
name|MapFile
operator|.
name|fix
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|IntWritable
name|key
decl_stmt|;
name|Text
name|val
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|int
name|notFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|=
operator|new
name|IntWritable
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|reader
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|notFound
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"With MapFile.fix-ed index, could not get entries # "
argument_list|,
literal|0
argument_list|,
name|notFound
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * test all available constructor for {@code MapFile.Writer}    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testDeprecatedConstructors ()
specifier|public
name|void
name|testDeprecatedConstructors
parameter_list|()
block|{
name|String
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"writes.mapfile"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|defaultProgressable
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|defaultCodec
argument_list|,
name|defaultProgressable
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|SequenceFile
operator|.
name|CompressionType
operator|.
name|RECORD
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|path
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|RECORD
argument_list|,
name|defaultProgressable
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|WritableComparator
operator|.
name|get
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"reader key is null !!!"
argument_list|,
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"reader value in null"
argument_list|,
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer} constructor     * with IllegalArgumentException      *      */
annotation|@
name|Test
DECL|method|testKeyLessWriterCreation ()
specifier|public
name|void
name|testKeyLessWriterCreation
parameter_list|()
block|{
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|TEST_DIR
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fail in testKeyLessWriterCreation !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"fail in testKeyLessWriterCreation. Other ex !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer} constructor with IOException    */
annotation|@
name|Test
DECL|method|testPathExplosionWriterCreation ()
specifier|public
name|void
name|testPathExplosionWriterCreation
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testPathExplosionWriterCreation.mapfile"
argument_list|)
decl_stmt|;
name|String
name|TEST_ERROR_MESSAGE
init|=
literal|"Mkdirs failed to create directory "
operator|+
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fsSpy
init|=
name|spy
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|pathSpy
init|=
name|spy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsSpy
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
name|TEST_ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pathSpy
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fsSpy
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|pathSpy
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|,
name|MapFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fail in testPathExplosionWriterCreation !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"testPathExplosionWriterCreation ex message error !!!"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|TEST_ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"fail in testPathExplosionWriterCreation. Other ex !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test {@code MapFile.Writer.append} method with desc order      */
annotation|@
name|Test
DECL|method|testDescOrderWithThrowExceptionWriterAppend ()
specifier|public
name|void
name|testDescOrderWithThrowExceptionWriterAppend
parameter_list|()
block|{
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
literal|".mapfile"
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value: "
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value: "
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value: "
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value: "
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testDescOrderWithThrowExceptionWriterAppend not expected exception error !!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDescOrderWithThrowExceptionWriterAppend other ex throw !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMainMethodMapFile ()
specifier|public
name|void
name|testMainMethodMapFile
parameter_list|()
block|{
name|String
name|inFile
init|=
literal|"mainMethodMapFile.mapfile"
decl_stmt|;
name|String
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|inFile
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|path
block|,
name|path
block|}
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createWriter
argument_list|(
name|inFile
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"test_text1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"test_text2"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|MapFile
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testMainMethodMapFile error !!!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test getClosest feature.    *     * @throws Exception    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testGetClosest ()
specifier|public
name|void
name|testGetClosest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testGetClosest.mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
comment|// Make an index entry for every third insertion.
name|MapFile
operator|.
name|Writer
operator|.
name|setIndexInterval
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Assert that the index interval is 1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|writer
operator|.
name|getIndexInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add entries up to 100 in intervals of ten.
specifier|final
name|int
name|FIRST_KEY
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|FIRST_KEY
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|String
name|iStr
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
literal|"00"
operator|.
name|substring
argument_list|(
name|iStr
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|iStr
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|reader
operator|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|qualifiedDirName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"55"
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|Text
name|closest
init|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// Assert that closest after 55 is 60
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"60"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Get closest that falls before the passed key: 50
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"50"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test get closest when we pass explicit key
specifier|final
name|Text
name|TWENTY
init|=
operator|new
name|Text
argument_list|(
literal|"20"
argument_list|)
decl_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|TWENTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWENTY
argument_list|,
name|closest
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|TWENTY
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWENTY
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test what happens at boundaries. Assert if searching a key that is
comment|// less than first key in the mapfile, that the first key is returned.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FIRST_KEY
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|closest
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we're looking for the first key before, and we pass in a key before
comment|// the first key in the file, we should get null
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|closest
argument_list|)
expr_stmt|;
comment|// Assert that null is returned if key is> last entry in mapfile.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"99"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|closest
argument_list|)
expr_stmt|;
comment|// If we were looking for the key before, we should get the last key
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"90"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testMidKey ()
specifier|public
name|void
name|testMidKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testMidKey.mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|MapFile
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|reader
operator|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|qualifiedDirName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|reader
operator|.
name|midKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testMidKeyEmpty ()
specifier|public
name|void
name|testMidKeyEmpty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testMidKeyEmpty.mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|qualifiedDirName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|midKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMerge ()
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_METHOD_KEY
init|=
literal|"testMerge.mapfile"
decl_stmt|;
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
name|int
name|ITERATIONS
init|=
literal|5
decl_stmt|;
name|Path
index|[]
name|in
init|=
operator|new
name|Path
index|[
literal|5
index|]
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
try|try
init|(
name|MapFile
operator|.
name|Writer
name|writer
init|=
name|createWriter
argument_list|(
name|TEST_METHOD_KEY
operator|+
literal|"."
operator|+
name|j
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
init|)
block|{
name|in
index|[
name|j
index|]
operator|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|TEST_METHOD_KEY
operator|+
literal|"."
operator|+
name|j
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|i
operator|+
name|j
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
name|i
operator|+
name|j
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Value:"
operator|+
operator|(
name|i
operator|+
name|j
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Sort expected values
name|Collections
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// Merge all 5 files
name|MapFile
operator|.
name|Merger
name|merger
init|=
operator|new
name|MapFile
operator|.
name|Merger
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|in
argument_list|,
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|TEST_METHOD_KEY
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|MapFile
operator|.
name|Reader
name|reader
init|=
name|createReader
argument_list|(
name|TEST_METHOD_KEY
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
init|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// test iteration
name|Text
name|startValue
init|=
operator|new
name|Text
argument_list|(
literal|"Value:"
operator|+
name|start
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|ITERATIONS
condition|)
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|expectedIterator
init|=
name|expected
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
name|startValue
decl_stmt|;
name|IntWritable
name|prev
init|=
operator|new
name|IntWritable
argument_list|(
name|start
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Next key should be always equal or more"
argument_list|,
name|prev
operator|.
name|get
argument_list|()
operator|<=
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedIterator
operator|.
name|next
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|.
name|set
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|// inputs should be deleted
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|in
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Path
name|path
init|=
name|in
index|[
name|j
index|]
decl_stmt|;
name|assertFalse
argument_list|(
literal|"inputs should be deleted"
argument_list|,
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

