begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Testing {@link LightWeightCache} */
end_comment

begin_class
DECL|class|TestLightWeightCache
specifier|public
class|class
name|TestLightWeightCache
block|{
DECL|field|starttime
specifier|private
specifier|static
specifier|final
name|long
name|starttime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
DECL|field|seed
specifier|private
specifier|static
specifier|final
name|long
name|seed
init|=
name|starttime
decl_stmt|;
DECL|field|ran
specifier|private
specifier|static
specifier|final
name|Random
name|ran
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
static|static
block|{
name|println
argument_list|(
literal|"Start time = "
operator|+
operator|new
name|Date
argument_list|(
name|starttime
argument_list|)
operator|+
literal|", seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
block|}
DECL|method|print (Object s)
specifier|private
specifier|static
name|void
name|print
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|println (Object s)
specifier|private
specifier|static
name|void
name|println
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLightWeightCache ()
specifier|public
name|void
name|testLightWeightCache
parameter_list|()
block|{
comment|// test randomized creation expiration with zero access expiration
block|{
specifier|final
name|long
name|creationExpiration
init|=
name|ran
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1
decl_stmt|;
name|check
argument_list|(
literal|1
argument_list|,
name|creationExpiration
argument_list|,
literal|0L
argument_list|,
literal|1
operator|<<
literal|10
argument_list|,
literal|65537
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|17
argument_list|,
name|creationExpiration
argument_list|,
literal|0L
argument_list|,
literal|1
operator|<<
literal|16
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|255
argument_list|,
name|creationExpiration
argument_list|,
literal|0L
argument_list|,
literal|1
operator|<<
literal|16
argument_list|,
literal|65537
argument_list|)
expr_stmt|;
block|}
comment|// test randomized creation/access expiration periods
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|creationExpiration
init|=
name|ran
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|long
name|accessExpiration
init|=
name|ran
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1
decl_stmt|;
name|check
argument_list|(
literal|1
argument_list|,
name|creationExpiration
argument_list|,
name|accessExpiration
argument_list|,
literal|1
operator|<<
literal|10
argument_list|,
literal|65537
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|17
argument_list|,
name|creationExpiration
argument_list|,
name|accessExpiration
argument_list|,
literal|1
operator|<<
literal|16
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|check
argument_list|(
literal|255
argument_list|,
name|creationExpiration
argument_list|,
name|accessExpiration
argument_list|,
literal|1
operator|<<
literal|16
argument_list|,
literal|65537
argument_list|)
expr_stmt|;
block|}
comment|// test size limit
specifier|final
name|int
name|dataSize
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|modulus
init|=
name|ran
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|sizeLimit
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|modulus
argument_list|)
operator|+
literal|1
decl_stmt|;
name|checkSizeLimit
argument_list|(
name|sizeLimit
argument_list|,
name|dataSize
argument_list|,
name|modulus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkSizeLimit (final int sizeLimit, final int datasize, final int modulus)
specifier|private
specifier|static
name|void
name|checkSizeLimit
parameter_list|(
specifier|final
name|int
name|sizeLimit
parameter_list|,
specifier|final
name|int
name|datasize
parameter_list|,
specifier|final
name|int
name|modulus
parameter_list|)
block|{
specifier|final
name|LightWeightCacheTestCase
name|test
init|=
operator|new
name|LightWeightCacheTestCase
argument_list|(
name|sizeLimit
argument_list|,
name|sizeLimit
argument_list|,
literal|1L
operator|<<
literal|32
argument_list|,
literal|1L
operator|<<
literal|32
argument_list|,
name|datasize
argument_list|,
name|modulus
argument_list|)
decl_stmt|;
comment|// keep putting entries and check size limit
name|print
argument_list|(
literal|"  check size ................. "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|cache
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|test
operator|.
name|cache
operator|.
name|size
argument_list|()
operator|<=
name|sizeLimit
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test various createionExpirationPeriod and accessExpirationPeriod.    * It runs ~2 minutes. If you are changing the implementation,    * please un-comment the following line in order to run the test.    */
comment|//  @Test
DECL|method|testExpirationPeriods ()
specifier|public
name|void
name|testExpirationPeriods
parameter_list|()
block|{
for|for
control|(
name|int
name|k
init|=
operator|-
literal|4
init|;
name|k
operator|<
literal|10
condition|;
name|k
operator|+=
literal|4
control|)
block|{
specifier|final
name|long
name|accessExpirationPeriod
init|=
name|k
operator|<
literal|0
condition|?
literal|0L
else|:
operator|(
literal|1L
operator|<<
name|k
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|+=
literal|4
control|)
block|{
specifier|final
name|long
name|creationExpirationPeriod
init|=
literal|1L
operator|<<
name|j
decl_stmt|;
name|runTests
argument_list|(
literal|1
argument_list|,
name|creationExpirationPeriod
argument_list|,
name|accessExpirationPeriod
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|Integer
operator|.
name|SIZE
operator|-
literal|1
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|runTests
argument_list|(
operator|(
literal|1
operator|<<
name|i
operator|)
operator|+
literal|1
argument_list|,
name|creationExpirationPeriod
argument_list|,
name|accessExpirationPeriod
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Run tests with various table lengths. */
DECL|method|runTests (final int modulus, final long creationExpirationPeriod, final long accessExpirationPeriod)
specifier|private
specifier|static
name|void
name|runTests
parameter_list|(
specifier|final
name|int
name|modulus
parameter_list|,
specifier|final
name|long
name|creationExpirationPeriod
parameter_list|,
specifier|final
name|long
name|accessExpirationPeriod
parameter_list|)
block|{
name|println
argument_list|(
literal|"\n\n\n*** runTest: modulus="
operator|+
name|modulus
operator|+
literal|", creationExpirationPeriod="
operator|+
name|creationExpirationPeriod
operator|+
literal|", accessExpirationPeriod="
operator|+
name|accessExpirationPeriod
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|16
condition|;
name|i
operator|+=
literal|4
control|)
block|{
specifier|final
name|int
name|tablelength
init|=
operator|(
literal|1
operator|<<
name|i
operator|)
decl_stmt|;
specifier|final
name|int
name|upper
init|=
name|i
operator|+
literal|2
decl_stmt|;
specifier|final
name|int
name|steps
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|upper
operator|/
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|upper
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|-=
name|steps
control|)
block|{
specifier|final
name|int
name|datasize
init|=
literal|1
operator|<<
name|j
decl_stmt|;
name|check
argument_list|(
name|tablelength
argument_list|,
name|creationExpirationPeriod
argument_list|,
name|accessExpirationPeriod
argument_list|,
name|datasize
argument_list|,
name|modulus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|check (int tablelength, long creationExpirationPeriod, long accessExpirationPeriod, int datasize, int modulus)
specifier|private
specifier|static
name|void
name|check
parameter_list|(
name|int
name|tablelength
parameter_list|,
name|long
name|creationExpirationPeriod
parameter_list|,
name|long
name|accessExpirationPeriod
parameter_list|,
name|int
name|datasize
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|check
argument_list|(
operator|new
name|LightWeightCacheTestCase
argument_list|(
name|tablelength
argument_list|,
operator|-
literal|1
argument_list|,
name|creationExpirationPeriod
argument_list|,
name|accessExpirationPeriod
argument_list|,
name|datasize
argument_list|,
name|modulus
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * check the following operations    * (1) put    * (2) remove& put    * (3) remove    * (4) remove& put again    */
DECL|method|check (final LightWeightCacheTestCase test)
specifier|private
specifier|static
name|void
name|check
parameter_list|(
specifier|final
name|LightWeightCacheTestCase
name|test
parameter_list|)
block|{
comment|//check put
name|print
argument_list|(
literal|"  check put .................. "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove and put
name|print
argument_list|(
literal|"  check remove& put ......... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove
name|print
argument_list|(
literal|"  check remove ............... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|test
operator|.
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
comment|//check remove and put again
name|print
argument_list|(
literal|"  check remove& put again ... "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|remove
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|r
init|=
name|ran
operator|.
name|nextInt
argument_list|(
name|test
operator|.
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
name|test
operator|.
name|data
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|println
argument_list|(
literal|"DONE "
operator|+
name|test
operator|.
name|stat
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|s
init|=
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|starttime
operator|)
operator|/
literal|1000L
decl_stmt|;
name|println
argument_list|(
literal|"total time elapsed="
operator|+
name|s
operator|+
literal|"s\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test case contains two data structures, a cache and a hashMap.    * The hashMap is used to verify the correctness of the cache.  Note that    * no automatic eviction is performed in the hashMap.  Thus, we have    * (1) If an entry exists in cache, it MUST exist in the hashMap.    * (2) If an entry does not exist in the cache, it may or may not exist in the    *     hashMap.  If it exists, it must be expired.    */
DECL|class|LightWeightCacheTestCase
specifier|private
specifier|static
class|class
name|LightWeightCacheTestCase
implements|implements
name|GSet
argument_list|<
name|IntEntry
argument_list|,
name|IntEntry
argument_list|>
block|{
comment|/** hashMap will not evict entries automatically. */
DECL|field|hashMap
specifier|final
name|GSet
argument_list|<
name|IntEntry
argument_list|,
name|IntEntry
argument_list|>
name|hashMap
init|=
operator|new
name|GSetByHashMap
argument_list|<
name|IntEntry
argument_list|,
name|IntEntry
argument_list|>
argument_list|(
literal|1024
argument_list|,
literal|0.75f
argument_list|)
decl_stmt|;
DECL|field|cache
specifier|final
name|LightWeightCache
argument_list|<
name|IntEntry
argument_list|,
name|IntEntry
argument_list|>
name|cache
decl_stmt|;
DECL|field|data
specifier|final
name|IntData
name|data
decl_stmt|;
DECL|field|info
specifier|final
name|String
name|info
decl_stmt|;
DECL|field|starttime
specifier|final
name|long
name|starttime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|/** Determine the probability in {@link #check()}. */
DECL|field|denominator
specifier|final
name|int
name|denominator
decl_stmt|;
DECL|field|iterate_count
name|int
name|iterate_count
init|=
literal|0
decl_stmt|;
DECL|field|contain_count
name|int
name|contain_count
init|=
literal|0
decl_stmt|;
DECL|field|currentTestTime
specifier|private
name|long
name|currentTestTime
init|=
name|ran
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|method|LightWeightCacheTestCase (int tablelength, int sizeLimit, long creationExpirationPeriod, long accessExpirationPeriod, int datasize, int modulus)
name|LightWeightCacheTestCase
parameter_list|(
name|int
name|tablelength
parameter_list|,
name|int
name|sizeLimit
parameter_list|,
name|long
name|creationExpirationPeriod
parameter_list|,
name|long
name|accessExpirationPeriod
parameter_list|,
name|int
name|datasize
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|denominator
operator|=
name|Math
operator|.
name|min
argument_list|(
operator|(
name|datasize
operator|>>
literal|7
operator|)
operator|+
literal|1
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
expr_stmt|;
name|info
operator|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"("
operator|+
operator|new
name|Date
argument_list|(
name|starttime
argument_list|)
operator|+
literal|"): tablelength="
operator|+
name|tablelength
operator|+
literal|", creationExpirationPeriod="
operator|+
name|creationExpirationPeriod
operator|+
literal|", accessExpirationPeriod="
operator|+
name|accessExpirationPeriod
operator|+
literal|", datasize="
operator|+
name|datasize
operator|+
literal|", modulus="
operator|+
name|modulus
operator|+
literal|", denominator="
operator|+
name|denominator
expr_stmt|;
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|IntData
argument_list|(
name|datasize
argument_list|,
name|modulus
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|LightWeightCache
argument_list|<
name|IntEntry
argument_list|,
name|IntEntry
argument_list|>
argument_list|(
name|tablelength
argument_list|,
name|sizeLimit
argument_list|,
name|creationExpirationPeriod
argument_list|,
literal|0
argument_list|,
operator|new
name|LightWeightCache
operator|.
name|Clock
argument_list|()
block|{
annotation|@
name|Override
name|long
name|currentTime
parameter_list|()
block|{
return|return
name|currentTestTime
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|containsTest (IntEntry key)
specifier|private
name|boolean
name|containsTest
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|boolean
name|c
init|=
name|cache
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hashMap
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IntEntry
name|h
init|=
name|hashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|isExpired
argument_list|(
name|h
argument_list|,
name|currentTestTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|contains (IntEntry key)
specifier|public
name|boolean
name|contains
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|boolean
name|e
init|=
name|containsTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|getTest (IntEntry key)
specifier|private
name|IntEntry
name|getTest
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|IntEntry
name|c
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hashMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|id
argument_list|,
name|c
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IntEntry
name|h
init|=
name|hashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|isExpired
argument_list|(
name|h
argument_list|,
name|currentTestTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|get (IntEntry key)
specifier|public
name|IntEntry
name|get
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|IntEntry
name|e
init|=
name|getTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|putTest (IntEntry entry)
specifier|private
name|IntEntry
name|putTest
parameter_list|(
name|IntEntry
name|entry
parameter_list|)
block|{
specifier|final
name|IntEntry
name|c
init|=
name|cache
operator|.
name|put
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hashMap
operator|.
name|put
argument_list|(
name|entry
argument_list|)
operator|.
name|id
argument_list|,
name|c
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IntEntry
name|h
init|=
name|hashMap
operator|.
name|put
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
name|h
operator|!=
name|entry
condition|)
block|{
comment|// if h == entry, its expiration time is already updated
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|isExpired
argument_list|(
name|h
argument_list|,
name|currentTestTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|put (IntEntry entry)
specifier|public
name|IntEntry
name|put
parameter_list|(
name|IntEntry
name|entry
parameter_list|)
block|{
specifier|final
name|IntEntry
name|e
init|=
name|putTest
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|removeTest (IntEntry key)
specifier|private
name|IntEntry
name|removeTest
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|IntEntry
name|c
init|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c
operator|.
name|id
argument_list|,
name|hashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IntEntry
name|h
init|=
name|hashMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cache
operator|.
name|isExpired
argument_list|(
name|h
argument_list|,
name|currentTestTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|remove (IntEntry key)
specifier|public
name|IntEntry
name|remove
parameter_list|(
name|IntEntry
name|key
parameter_list|)
block|{
specifier|final
name|IntEntry
name|e
init|=
name|removeTest
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|sizeTest ()
specifier|private
name|int
name|sizeTest
parameter_list|()
block|{
specifier|final
name|int
name|c
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hashMap
operator|.
name|size
argument_list|()
operator|>=
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
specifier|final
name|int
name|s
init|=
name|sizeTest
argument_list|()
decl_stmt|;
name|check
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|IntEntry
argument_list|>
name|iterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|tossCoin ()
name|boolean
name|tossCoin
parameter_list|()
block|{
return|return
name|ran
operator|.
name|nextInt
argument_list|(
name|denominator
argument_list|)
operator|==
literal|0
return|;
block|}
DECL|method|check ()
name|void
name|check
parameter_list|()
block|{
name|currentTestTime
operator|+=
name|ran
operator|.
name|nextInt
argument_list|()
operator|&
literal|0x3
expr_stmt|;
comment|//test size
name|sizeTest
argument_list|()
expr_stmt|;
if|if
condition|(
name|tossCoin
argument_list|()
condition|)
block|{
comment|//test get(..), check content and test iterator
name|iterate_count
operator|++
expr_stmt|;
for|for
control|(
name|IntEntry
name|i
range|:
name|cache
control|)
block|{
name|getTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tossCoin
argument_list|()
condition|)
block|{
comment|//test contains(..)
name|contain_count
operator|++
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|IntEntry
name|i
range|:
name|data
operator|.
name|integers
control|)
block|{
name|containsTest
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|containsTest
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|ran
operator|.
name|nextInt
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|stat ()
name|String
name|stat
parameter_list|()
block|{
specifier|final
name|long
name|t
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|starttime
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|" iterate=%5d, contain=%5d, time elapsed=%5d.%03ds"
argument_list|,
name|iterate_count
argument_list|,
name|contain_count
argument_list|,
name|t
operator|/
literal|1000
argument_list|,
name|t
operator|%
literal|1000
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|hashMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntData
specifier|private
specifier|static
class|class
name|IntData
block|{
DECL|field|integers
specifier|final
name|IntEntry
index|[]
name|integers
decl_stmt|;
DECL|method|IntData (int size, int modulus)
name|IntData
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|integers
operator|=
operator|new
name|IntEntry
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|integers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|integers
index|[
name|i
index|]
operator|=
operator|new
name|IntEntry
argument_list|(
name|i
argument_list|,
name|ran
operator|.
name|nextInt
argument_list|(
name|modulus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|get (int i)
name|IntEntry
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|integers
index|[
name|i
index|]
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|integers
operator|.
name|length
return|;
block|}
block|}
comment|/** Entries of {@link LightWeightCache} in this test */
DECL|class|IntEntry
specifier|private
specifier|static
class|class
name|IntEntry
implements|implements
name|LightWeightCache
operator|.
name|Entry
implements|,
name|Comparable
argument_list|<
name|IntEntry
argument_list|>
block|{
DECL|field|next
specifier|private
name|LightWeightGSet
operator|.
name|LinkedElement
name|next
decl_stmt|;
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|value
specifier|final
name|int
name|value
decl_stmt|;
DECL|field|expirationTime
specifier|private
name|long
name|expirationTime
init|=
literal|0
decl_stmt|;
DECL|method|IntEntry (int id, int value)
name|IntEntry
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|IntEntry
operator|&&
name|value
operator|==
operator|(
operator|(
name|IntEntry
operator|)
name|obj
operator|)
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (IntEntry that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|IntEntry
name|that
parameter_list|)
block|{
return|return
name|value
operator|-
name|that
operator|.
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|id
operator|+
literal|"#"
operator|+
name|value
operator|+
literal|",expirationTime="
operator|+
name|expirationTime
return|;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|LightWeightGSet
operator|.
name|LinkedElement
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Override
DECL|method|setNext (LightWeightGSet.LinkedElement e)
specifier|public
name|void
name|setNext
parameter_list|(
name|LightWeightGSet
operator|.
name|LinkedElement
name|e
parameter_list|)
block|{
name|next
operator|=
name|e
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setExpirationTime (long timeNano)
specifier|public
name|void
name|setExpirationTime
parameter_list|(
name|long
name|timeNano
parameter_list|)
block|{
name|this
operator|.
name|expirationTime
operator|=
name|timeNano
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExpirationTime ()
specifier|public
name|long
name|getExpirationTime
parameter_list|()
block|{
return|return
name|expirationTime
return|;
block|}
block|}
block|}
end_class

end_unit

