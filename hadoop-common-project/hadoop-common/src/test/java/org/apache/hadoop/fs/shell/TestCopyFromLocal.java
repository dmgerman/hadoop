begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CopyCommands
operator|.
name|CopyFromLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test for copyFromLocal.  */
end_comment

begin_class
DECL|class|TestCopyFromLocal
specifier|public
class|class
name|TestCopyFromLocal
block|{
DECL|field|FROM_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FROM_DIR_NAME
init|=
literal|"fromDir"
decl_stmt|;
DECL|field|TO_DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TO_DIR_NAME
init|=
literal|"toDir"
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|testDir
specifier|private
specifier|static
name|Path
name|testDir
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|method|initialize (Path dir)
specifier|public
specifier|static
name|int
name|initialize
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|Path
name|fromDirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FROM_DIR_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|fromDirPath
argument_list|)
expr_stmt|;
name|Path
name|toDirPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|TO_DIR_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|toDirPath
argument_list|)
expr_stmt|;
name|int
name|numTotalFiles
init|=
literal|0
decl_stmt|;
name|int
name|numDirs
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|dirCount
init|=
literal|0
init|;
name|dirCount
operator|<
name|numDirs
condition|;
operator|++
name|dirCount
control|)
block|{
name|Path
name|subDirPath
init|=
operator|new
name|Path
argument_list|(
name|fromDirPath
argument_list|,
literal|"subdir"
operator|+
name|dirCount
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDirPath
argument_list|)
expr_stmt|;
name|int
name|numFiles
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fileCount
init|=
literal|0
init|;
name|fileCount
operator|<
name|numFiles
condition|;
operator|++
name|fileCount
control|)
block|{
name|numTotalFiles
operator|++
expr_stmt|;
name|Path
name|subFile
init|=
operator|new
name|Path
argument_list|(
name|subDirPath
argument_list|,
literal|"file"
operator|+
name|fileCount
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|subFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|output
init|=
name|fs
operator|.
name|create
argument_list|(
name|subFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|numTotalFiles
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|LocalFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|FileSystemTestHelper
argument_list|()
operator|.
name|getTestRootPath
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// don't want scheme on the path, just an absolute path
name|testDir
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
name|testDir
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|run (CommandWithDestination cmd, String... args)
specifier|private
name|void
name|run
parameter_list|(
name|CommandWithDestination
name|cmd
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
block|{
name|cmd
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmd
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromLocal ()
specifier|public
name|void
name|testCopyFromLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"dir"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|TestCopyFromLocal
operator|.
name|initialize
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|TestMultiThreadedCopy
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FROM_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|TO_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromLocalWithThreads ()
specifier|public
name|void
name|testCopyFromLocalWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"dir"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numFiles
init|=
name|TestCopyFromLocal
operator|.
name|initialize
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|int
name|maxThreads
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|randThreads
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
name|maxThreads
argument_list|)
decl_stmt|;
name|int
name|numActualThreads
init|=
name|randThreads
operator|==
literal|0
condition|?
literal|1
else|:
name|randThreads
decl_stmt|;
name|String
name|numThreads
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|numActualThreads
argument_list|)
decl_stmt|;
name|run
argument_list|(
operator|new
name|TestMultiThreadedCopy
argument_list|(
name|numActualThreads
argument_list|,
name|numFiles
argument_list|)
argument_list|,
literal|"-t"
argument_list|,
name|numThreads
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FROM_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|TO_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromLocalWithThreadWrong ()
specifier|public
name|void
name|testCopyFromLocalWithThreadWrong
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"dir"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numFiles
init|=
name|TestCopyFromLocal
operator|.
name|initialize
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|int
name|maxThreads
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|2
decl_stmt|;
name|String
name|numThreads
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|maxThreads
operator|*
literal|2
argument_list|)
decl_stmt|;
name|run
argument_list|(
operator|new
name|TestMultiThreadedCopy
argument_list|(
name|maxThreads
argument_list|,
name|numFiles
argument_list|)
argument_list|,
literal|"-t"
argument_list|,
name|numThreads
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FROM_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|TO_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCopyFromLocalWithZeroThreads ()
specifier|public
name|void
name|testCopyFromLocalWithZeroThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"dir"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|TestCopyFromLocal
operator|.
name|initialize
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|TestMultiThreadedCopy
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"-t"
argument_list|,
literal|"0"
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|FROM_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|TO_DIR_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestMultiThreadedCopy
specifier|private
class|class
name|TestMultiThreadedCopy
extends|extends
name|CopyFromLocal
block|{
DECL|field|expectedThreads
specifier|private
name|int
name|expectedThreads
decl_stmt|;
DECL|field|expectedCompletedTaskCount
specifier|private
name|int
name|expectedCompletedTaskCount
decl_stmt|;
DECL|method|TestMultiThreadedCopy (int expectedThreads, int expectedCompletedTaskCount)
name|TestMultiThreadedCopy
parameter_list|(
name|int
name|expectedThreads
parameter_list|,
name|int
name|expectedCompletedTaskCount
parameter_list|)
block|{
name|this
operator|.
name|expectedThreads
operator|=
name|expectedThreads
expr_stmt|;
name|this
operator|.
name|expectedCompletedTaskCount
operator|=
name|expectedCompletedTaskCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processArguments (LinkedList<PathData> args)
specifier|protected
name|void
name|processArguments
parameter_list|(
name|LinkedList
argument_list|<
name|PathData
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if the correct number of threads are spawned
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedThreads
argument_list|,
name|getNumThreads
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|processArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// Once the copy is complete, check following
comment|// 1) number of completed tasks are same as expected
comment|// 2) There are no active tasks in the executor
comment|// 3) Executor has shutdown correctly
name|ThreadPoolExecutor
name|executor
init|=
name|getExecutor
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|executor
operator|.
name|getCompletedTaskCount
argument_list|()
argument_list|,
name|expectedCompletedTaskCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|executor
operator|.
name|getActiveCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|executor
operator|.
name|isTerminated
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

