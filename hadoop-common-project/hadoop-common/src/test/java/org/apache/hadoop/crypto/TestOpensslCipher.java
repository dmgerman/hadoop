begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|NoSuchPaddingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|ShortBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestOpensslCipher
specifier|public
class|class
name|TestOpensslCipher
block|{
DECL|field|key
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|key
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|}
decl_stmt|;
DECL|field|iv
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|iv
init|=
block|{
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|}
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testGetInstance ()
specifier|public
name|void
name|testGetInstance
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|OpensslCipher
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
return|return;
block|}
name|OpensslCipher
name|cipher
init|=
name|OpensslCipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cipher
operator|!=
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|cipher
operator|=
name|OpensslCipher
operator|.
name|getInstance
argument_list|(
literal|"AES2/CTR/NoPadding"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should specify correct algorithm."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
comment|// Expect NoSuchAlgorithmException
block|}
try|try
block|{
name|cipher
operator|=
name|OpensslCipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should specify correct padding."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPaddingException
name|e
parameter_list|)
block|{
comment|// Expect NoSuchPaddingException
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testUpdateArguments ()
specifier|public
name|void
name|testUpdateArguments
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|OpensslCipher
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
return|return;
block|}
name|OpensslCipher
name|cipher
init|=
name|OpensslCipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cipher
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cipher
operator|.
name|init
argument_list|(
name|OpensslCipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
comment|// Require direct buffers
name|ByteBuffer
name|input
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|ByteBuffer
name|output
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|cipher
operator|.
name|update
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Input and output buffer should be direct buffer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Direct buffers are required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Output buffer length should be sufficient to store output data
name|input
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|output
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|cipher
operator|.
name|update
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Output buffer length should be sufficient "
operator|+
literal|"to store output data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShortBufferException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Output buffer is not sufficient"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testDoFinalArguments ()
specifier|public
name|void
name|testDoFinalArguments
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|OpensslCipher
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
return|return;
block|}
name|OpensslCipher
name|cipher
init|=
name|OpensslCipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cipher
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cipher
operator|.
name|init
argument_list|(
name|OpensslCipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
comment|// Require direct buffer
name|ByteBuffer
name|output
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|cipher
operator|.
name|doFinal
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Output buffer should be direct buffer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Direct buffer is required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

