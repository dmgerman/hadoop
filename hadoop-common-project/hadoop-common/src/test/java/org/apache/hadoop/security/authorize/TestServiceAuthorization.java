begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|TestRPC
operator|.
name|TestProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestServiceAuthorization
specifier|public
class|class
name|TestServiceAuthorization
block|{
DECL|field|ACL_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|ACL_CONFIG
init|=
literal|"test.protocol.acl"
decl_stmt|;
DECL|field|ACL_CONFIG1
specifier|private
specifier|static
specifier|final
name|String
name|ACL_CONFIG1
init|=
literal|"test.protocol1.acl"
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|HOST_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|HOST_CONFIG
init|=
literal|"test.protocol.hosts"
decl_stmt|;
DECL|field|BLOCKED_HOST_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|BLOCKED_HOST_CONFIG
init|=
literal|"test.protocol.hosts.blocked"
decl_stmt|;
DECL|field|AUTHORIZED_IP
specifier|private
specifier|static
specifier|final
name|String
name|AUTHORIZED_IP
init|=
literal|"1.2.3.4"
decl_stmt|;
DECL|field|UNAUTHORIZED_IP
specifier|private
specifier|static
specifier|final
name|String
name|UNAUTHORIZED_IP
init|=
literal|"1.2.3.5"
decl_stmt|;
DECL|field|IP_RANGE
specifier|private
specifier|static
specifier|final
name|String
name|IP_RANGE
init|=
literal|"10.222.0.0/16,10.113.221.221"
decl_stmt|;
DECL|interface|TestProtocol1
specifier|public
interface|interface
name|TestProtocol1
extends|extends
name|TestProtocol
block|{}
empty_stmt|;
DECL|class|TestPolicyProvider
specifier|private
specifier|static
class|class
name|TestPolicyProvider
extends|extends
name|PolicyProvider
block|{
annotation|@
name|Override
DECL|method|getServices ()
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
block|{
return|return
operator|new
name|Service
index|[]
block|{
operator|new
name|Service
argument_list|(
name|ACL_CONFIG
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|)
block|,
operator|new
name|Service
argument_list|(
name|ACL_CONFIG1
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|)
block|,       }
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultAcl ()
specifier|public
name|void
name|testDefaultAcl
parameter_list|()
block|{
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a default acl
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"user1 group1"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlList
name|acl
init|=
name|serviceAuthorizationManager
operator|.
name|getProtocolsAcls
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user1 group1"
argument_list|,
name|acl
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|serviceAuthorizationManager
operator|.
name|getProtocolsAcls
argument_list|(
name|TestProtocol1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AccessControlList
operator|.
name|WILDCARD_ACL_VALUE
argument_list|,
name|acl
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with a default acl
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_ACL
argument_list|,
literal|"user2 group2"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|serviceAuthorizationManager
operator|.
name|getProtocolsAcls
argument_list|(
name|TestProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1 group1"
argument_list|,
name|acl
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|serviceAuthorizationManager
operator|.
name|getProtocolsAcls
argument_list|(
name|TestProtocol1
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user2 group2"
argument_list|,
name|acl
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockedAcl ()
specifier|public
name|void
name|testBlockedAcl
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a blocked acl
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
argument_list|,
literal|"user1 group1"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// now set a blocked acl with another user and another group
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|"drwho2 group3"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// now set a blocked acl with the user and another group
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|"drwho group3"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{      }
comment|// now set a blocked acl with another user and another group
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|"drwho2 group3"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// now set a blocked acl with another user and group that the user belongs to
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|"drwho2 group2"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expects Exception
block|}
comment|// reset blocked acl so that there is no blocked ACL
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultBlockedAcl ()
specifier|public
name|void
name|testDefaultBlockedAcl
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a default blocked acl
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// set a restrictive default blocked acl and an non-restricting blocked acl for TestProtocol
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_AUTHORIZATION_DEFAULT_BLOCKED_ACL
argument_list|,
literal|"user2 group2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACL_CONFIG
operator|+
name|ServiceAuthorizationManager
operator|.
name|BLOCKED
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// drwho is authorized to access TestProtocol
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// drwho is not authorized to access TestProtocol1 because it uses the default blocked acl.
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expects Exception
block|}
block|}
annotation|@
name|Test
DECL|method|testMachineList ()
specifier|public
name|void
name|testMachineList
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HOST_CONFIG
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|AUTHORIZED_IP
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|UNAUTHORIZED_IP
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expects Exception
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultMachineList ()
specifier|public
name|void
name|testDefaultMachineList
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a default MachineList
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|UNAUTHORIZED_IP
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// test with a default MachineList
name|conf
operator|.
name|set
argument_list|(
literal|"security.service.authorization.default.hosts"
argument_list|,
name|IP_RANGE
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|UNAUTHORIZED_IP
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expects Exception
block|}
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockedMachineList ()
specifier|public
name|void
name|testBlockedMachineList
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a blocked MachineList
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// now set a blocked MachineList
name|conf
operator|.
name|set
argument_list|(
name|BLOCKED_HOST_CONFIG
argument_list|,
name|IP_RANGE
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// expects Exception
block|}
comment|// reset blocked MachineList
name|conf
operator|.
name|set
argument_list|(
name|BLOCKED_HOST_CONFIG
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultBlockedMachineList ()
specifier|public
name|void
name|testDefaultBlockedMachineList
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|UserGroupInformation
name|drwho
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"drwho@EXAMPLE.COM"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
decl_stmt|;
name|ServiceAuthorizationManager
name|serviceAuthorizationManager
init|=
operator|new
name|ServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test without setting a default blocked MachineList
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// set a  default blocked MachineList and a blocked MachineList for TestProtocol
name|conf
operator|.
name|set
argument_list|(
literal|"security.service.authorization.default.hosts.blocked"
argument_list|,
name|IP_RANGE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|BLOCKED_HOST_CONFIG
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|serviceAuthorizationManager
operator|.
name|refresh
argument_list|(
name|conf
argument_list|,
operator|new
name|TestPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// TestProtocol can be accessed from "10.222.0.0" because it blocks only "1.2.3.4"
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// TestProtocol cannot be accessed from  "1.2.3.4"
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|//expects Exception
block|}
comment|// TestProtocol1 can be accessed from "1.2.3.4" because it uses default block list
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// TestProtocol1 cannot be accessed from "10.222.0.0",
comment|// because "10.222.0.0" is in default block list
try|try
block|{
name|serviceAuthorizationManager
operator|.
name|authorize
argument_list|(
name|drwho
argument_list|,
name|TestProtocol1
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
literal|"10.222.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|//expects Exception
block|}
block|}
block|}
end_class

end_unit

