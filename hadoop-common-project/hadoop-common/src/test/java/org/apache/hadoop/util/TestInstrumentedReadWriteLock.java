begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A test class for InstrumentedReadLock and InstrumentedWriteLock.  */
end_comment

begin_class
DECL|class|TestInstrumentedReadWriteLock
specifier|public
class|class
name|TestInstrumentedReadWriteLock
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestInstrumentedReadWriteLock
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|name
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * Tests exclusive access of the write lock.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWriteLock ()
specifier|public
name|void
name|testWriteLock
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|locked
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|locked
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|InstrumentedReadWriteLock
name|readWriteLock
init|=
operator|new
name|InstrumentedReadWriteLock
argument_list|(
literal|true
argument_list|,
name|testname
argument_list|,
name|LOG
argument_list|,
literal|2000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
specifier|final
name|AutoCloseableLock
name|writeLock
init|=
operator|new
name|AutoCloseableLock
argument_list|(
name|readWriteLock
operator|.
name|writeLock
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|AutoCloseableLock
name|acquire
parameter_list|()
block|{
name|AutoCloseableLock
name|lock
init|=
name|super
operator|.
name|acquire
argument_list|()
decl_stmt|;
name|locked
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return
name|lock
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
name|super
operator|.
name|release
argument_list|()
expr_stmt|;
name|locked
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|AutoCloseableLock
name|readLock
init|=
operator|new
name|AutoCloseableLock
argument_list|(
name|readWriteLock
operator|.
name|readLock
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|Thread
name|competingWriteThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|writeLock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|competingWriteThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingWriteThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Thread
name|competingReadThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|readLock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|competingReadThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingReadThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|locked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|locked
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the read lock.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReadLock ()
specifier|public
name|void
name|testReadLock
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|InstrumentedReadWriteLock
name|readWriteLock
init|=
operator|new
name|InstrumentedReadWriteLock
argument_list|(
literal|true
argument_list|,
name|testname
argument_list|,
name|LOG
argument_list|,
literal|2000
argument_list|,
literal|300
argument_list|)
decl_stmt|;
specifier|final
name|AutoCloseableLock
name|readLock
init|=
operator|new
name|AutoCloseableLock
argument_list|(
name|readWriteLock
operator|.
name|readLock
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AutoCloseableLock
name|writeLock
init|=
operator|new
name|AutoCloseableLock
argument_list|(
name|readWriteLock
operator|.
name|writeLock
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|Thread
name|competingReadThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|readLock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|competingReadThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingReadThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Thread
name|competingWriteThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|writeLock
operator|.
name|tryLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|competingWriteThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|competingWriteThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the warning when the read lock is held longer than threshold.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReadLockLongHoldingReport ()
specifier|public
name|void
name|testReadLockLongHoldingReport
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|time
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Timer
name|mclock
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|monotonicNow
parameter_list|()
block|{
return|return
name|time
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicLong
name|wlogged
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|wsuppresed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReentrantReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|InstrumentedReadLock
name|readLock
init|=
operator|new
name|InstrumentedReadLock
argument_list|(
name|testname
argument_list|,
name|LOG
argument_list|,
name|readWriteLock
argument_list|,
literal|2000
argument_list|,
literal|300
argument_list|,
name|mclock
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|logWarning
parameter_list|(
name|long
name|lockHeldTime
parameter_list|,
name|long
name|suppressed
parameter_list|)
block|{
name|wlogged
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|wsuppresed
operator|.
name|set
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 0
name|time
operator|.
name|set
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 100
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 100
name|time
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 500
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// the suppress counting is only changed when
comment|// log is needed in the test
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 500
name|time
operator|.
name|set
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 900
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 900
name|time
operator|.
name|set
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 3000
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the warning when the write lock is held longer than threshold.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testWriteLockLongHoldingReport ()
specifier|public
name|void
name|testWriteLockLongHoldingReport
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testname
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|time
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Timer
name|mclock
init|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|monotonicNow
parameter_list|()
block|{
return|return
name|time
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicLong
name|wlogged
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|wsuppresed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReentrantReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|InstrumentedWriteLock
name|writeLock
init|=
operator|new
name|InstrumentedWriteLock
argument_list|(
name|testname
argument_list|,
name|LOG
argument_list|,
name|readWriteLock
argument_list|,
literal|2000
argument_list|,
literal|300
argument_list|,
name|mclock
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|logWarning
parameter_list|(
name|long
name|lockHeldTime
parameter_list|,
name|long
name|suppressed
parameter_list|)
block|{
name|wlogged
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|wsuppresed
operator|.
name|set
argument_list|(
name|suppressed
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 0
name|time
operator|.
name|set
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 100
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 100
name|time
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 500
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// the suppress counting is only changed when
comment|// log is needed in the test
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 500
name|time
operator|.
name|set
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 900
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// t = 900
name|time
operator|.
name|set
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// t = 3000
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wlogged
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wsuppresed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

