begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDelegationTokenRenewer
specifier|public
class|class
name|TestDelegationTokenRenewer
block|{
DECL|field|RENEW_CYCLE
specifier|private
specifier|static
specifier|final
name|int
name|RENEW_CYCLE
init|=
literal|1000
decl_stmt|;
DECL|field|MAX_RENEWALS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RENEWALS
init|=
literal|100
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|TestToken
specifier|static
class|class
name|TestToken
extends|extends
name|Token
block|{
DECL|field|renewCount
specifier|public
specifier|volatile
name|int
name|renewCount
init|=
literal|0
decl_stmt|;
DECL|field|cancelled
specifier|public
specifier|volatile
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|renew (Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|renewCount
operator|==
name|MAX_RENEWALS
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|renewCount
operator|++
expr_stmt|;
block|}
return|return
name|renewCount
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|TestFileSystem
specifier|static
class|class
name|TestFileSystem
extends|extends
name|FileSystem
implements|implements
name|DelegationTokenRenewer
operator|.
name|Renewable
block|{
DECL|field|mockConf
specifier|private
name|Configuration
name|mockConf
init|=
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
empty_stmt|;
DECL|field|testToken
specifier|private
name|TestToken
name|testToken
init|=
operator|new
name|TestToken
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|mockConf
return|;
block|}
annotation|@
name|Override
DECL|method|getRenewToken ()
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getRenewToken
parameter_list|()
block|{
return|return
name|testToken
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|new_dir
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setDelegationToken (Token<T> token)
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|setDelegationToken
parameter_list|(
name|Token
argument_list|<
name|T
argument_list|>
name|token
parameter_list|)
block|{
return|return;
block|}
block|}
DECL|field|renewer
specifier|private
name|DelegationTokenRenewer
name|renewer
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|DelegationTokenRenewer
operator|.
name|renewCycle
operator|=
name|RENEW_CYCLE
expr_stmt|;
name|renewer
operator|=
name|DelegationTokenRenewer
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddRemoveRenewAction ()
specifier|public
name|void
name|testAddRemoveRenewAction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestFileSystem
name|tfs
init|=
operator|new
name|TestFileSystem
argument_list|()
decl_stmt|;
name|renewer
operator|.
name|addRenewAction
argument_list|(
name|tfs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FileSystem not added to DelegationTokenRenewer"
argument_list|,
literal|1
argument_list|,
name|renewer
operator|.
name|getRenewQueueLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RENEW_CYCLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|tfs
operator|.
name|testToken
operator|.
name|renewCount
operator|>
literal|0
condition|)
block|{
name|renewer
operator|.
name|removeRenewAction
argument_list|(
name|tfs
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Token not renewed even after 1 minute"
argument_list|,
operator|(
name|tfs
operator|.
name|testToken
operator|.
name|renewCount
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FileSystem not removed from DelegationTokenRenewer"
argument_list|,
literal|0
argument_list|,
name|renewer
operator|.
name|getRenewQueueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token not cancelled"
argument_list|,
name|tfs
operator|.
name|testToken
operator|.
name|cancelled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

