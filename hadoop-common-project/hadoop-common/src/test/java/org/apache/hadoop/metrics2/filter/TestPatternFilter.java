begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.filter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration
operator|.
name|SubsetConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|ConfigBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPatternFilter
specifier|public
class|class
name|TestPatternFilter
block|{
comment|/**    * Filters should default to accept    */
DECL|method|emptyConfigShouldAccept ()
annotation|@
name|Test
specifier|public
name|void
name|emptyConfigShouldAccept
parameter_list|()
block|{
name|SubsetConfiguration
name|empty
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|subset
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|shouldAccept
argument_list|(
name|empty
argument_list|,
literal|"anything"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|empty
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"key"
argument_list|,
literal|"desc"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|empty
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"anything"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"key"
argument_list|,
literal|"desc"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Filters should handle white-listing correctly    */
DECL|method|includeOnlyShouldOnlyIncludeMatched ()
annotation|@
name|Test
specifier|public
name|void
name|includeOnlyShouldOnlyIncludeMatched
parameter_list|()
block|{
name|SubsetConfiguration
name|wl
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.include"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.include.tags"
argument_list|,
literal|"foo:f"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|shouldAccept
argument_list|(
name|wl
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|wl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|wl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|wl
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|wl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|wl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"boo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|wl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|wl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Filters should handle black-listing correctly    */
DECL|method|excludeOnlyShouldOnlyExcludeMatched ()
annotation|@
name|Test
specifier|public
name|void
name|excludeOnlyShouldOnlyExcludeMatched
parameter_list|()
block|{
name|SubsetConfiguration
name|bl
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.exclude"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.exclude.tags"
argument_list|,
literal|"foo:f"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|shouldAccept
argument_list|(
name|bl
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|bl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|bl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|bl
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|bl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|bl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|bl
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Filters should accepts unmatched item when both include and    * exclude patterns are present.    */
DECL|method|shouldAcceptUnmatchedWhenBothAreConfigured ()
annotation|@
name|Test
specifier|public
name|void
name|shouldAcceptUnmatchedWhenBothAreConfigured
parameter_list|()
block|{
name|SubsetConfiguration
name|c
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.include"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.include.tags"
argument_list|,
literal|"foo:f"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.exclude"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.exclude.tags"
argument_list|,
literal|"bar:b"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|c
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|c
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|c
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"bar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldReject
argument_list|(
name|c
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"bar"
argument_list|,
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foobar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foobar"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foobar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Include patterns should take precedence over exclude patterns    */
DECL|method|includeShouldOverrideExclude ()
annotation|@
name|Test
specifier|public
name|void
name|includeShouldOverrideExclude
parameter_list|()
block|{
name|SubsetConfiguration
name|c
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p.include"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.include.tags"
argument_list|,
literal|"foo:f"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.exclude"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p.exclude.tags"
argument_list|,
literal|"foo:f"
argument_list|)
operator|.
name|subset
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shouldAccept
argument_list|(
name|c
argument_list|,
name|mockMetricsRecord
argument_list|(
literal|"foo"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tag
argument_list|(
literal|"foo"
argument_list|,
literal|""
argument_list|,
literal|"f"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldAccept (SubsetConfiguration conf, String s)
specifier|static
name|void
name|shouldAccept
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"accepts "
operator|+
name|s
argument_list|,
name|newGlobFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"accepts "
operator|+
name|s
argument_list|,
name|newRegexFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Version for one tag:
DECL|method|shouldAccept (SubsetConfiguration conf, List<MetricsTag> tags)
specifier|static
name|void
name|shouldAccept
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|)
block|{
name|shouldAcceptImpl
argument_list|(
literal|true
argument_list|,
name|conf
argument_list|,
name|tags
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Version for multiple tags:
DECL|method|shouldAccept (SubsetConfiguration conf, List<MetricsTag> tags, boolean[] expectedAcceptedSpec)
specifier|static
name|void
name|shouldAccept
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|,
name|boolean
index|[]
name|expectedAcceptedSpec
parameter_list|)
block|{
name|shouldAcceptImpl
argument_list|(
literal|true
argument_list|,
name|conf
argument_list|,
name|tags
argument_list|,
name|expectedAcceptedSpec
argument_list|)
expr_stmt|;
block|}
comment|// Version for one tag:
DECL|method|shouldReject (SubsetConfiguration conf, List<MetricsTag> tags)
specifier|static
name|void
name|shouldReject
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|)
block|{
name|shouldAcceptImpl
argument_list|(
literal|false
argument_list|,
name|conf
argument_list|,
name|tags
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Version for multiple tags:
DECL|method|shouldReject (SubsetConfiguration conf, List<MetricsTag> tags, boolean[] expectedAcceptedSpec)
specifier|static
name|void
name|shouldReject
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|,
name|boolean
index|[]
name|expectedAcceptedSpec
parameter_list|)
block|{
name|shouldAcceptImpl
argument_list|(
literal|false
argument_list|,
name|conf
argument_list|,
name|tags
argument_list|,
name|expectedAcceptedSpec
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldAcceptImpl (final boolean expectAcceptList, SubsetConfiguration conf, List<MetricsTag> tags, boolean[] expectedAcceptedSpec)
specifier|private
specifier|static
name|void
name|shouldAcceptImpl
parameter_list|(
specifier|final
name|boolean
name|expectAcceptList
parameter_list|,
name|SubsetConfiguration
name|conf
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|,
name|boolean
index|[]
name|expectedAcceptedSpec
parameter_list|)
block|{
specifier|final
name|MetricsFilter
name|globFilter
init|=
name|newGlobFilter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|MetricsFilter
name|regexFilter
init|=
name|newRegexFilter
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Test acceptance of the tag list:
name|assertEquals
argument_list|(
literal|"accepts "
operator|+
name|tags
argument_list|,
name|expectAcceptList
argument_list|,
name|globFilter
operator|.
name|accepts
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"accepts "
operator|+
name|tags
argument_list|,
name|expectAcceptList
argument_list|,
name|regexFilter
operator|.
name|accepts
argument_list|(
name|tags
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test results on each of the individual tags:
name|int
name|acceptedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MetricsTag
name|tag
init|=
name|tags
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|actGlob
init|=
name|globFilter
operator|.
name|accepts
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|boolean
name|actRegex
init|=
name|regexFilter
operator|.
name|accepts
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"accepts "
operator|+
name|tag
argument_list|,
name|expectedAcceptedSpec
index|[
name|i
index|]
argument_list|,
name|actGlob
argument_list|)
expr_stmt|;
comment|// Both the filters should give the same result:
name|assertEquals
argument_list|(
name|actGlob
argument_list|,
name|actRegex
argument_list|)
expr_stmt|;
if|if
condition|(
name|actGlob
condition|)
block|{
name|acceptedCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectAcceptList
condition|)
block|{
comment|// At least one individual tag should be accepted:
name|assertTrue
argument_list|(
literal|"No tag of the following accepted: "
operator|+
name|tags
argument_list|,
name|acceptedCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// At least one individual tag should be rejected:
name|assertTrue
argument_list|(
literal|"No tag of the following rejected: "
operator|+
name|tags
argument_list|,
name|acceptedCount
operator|<
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that filters with the given configuration accept the given record.    *     * @param conf SubsetConfiguration containing filter configuration    * @param record MetricsRecord to check    */
DECL|method|shouldAccept (SubsetConfiguration conf, MetricsRecord record)
specifier|static
name|void
name|shouldAccept
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|MetricsRecord
name|record
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"accepts "
operator|+
name|record
argument_list|,
name|newGlobFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"accepts "
operator|+
name|record
argument_list|,
name|newRegexFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldReject (SubsetConfiguration conf, String s)
specifier|static
name|void
name|shouldReject
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"rejects "
operator|+
name|s
argument_list|,
operator|!
name|newGlobFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rejects "
operator|+
name|s
argument_list|,
operator|!
name|newRegexFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Asserts that filters with the given configuration reject the given record.    *     * @param conf SubsetConfiguration containing filter configuration    * @param record MetricsRecord to check    */
DECL|method|shouldReject (SubsetConfiguration conf, MetricsRecord record)
specifier|static
name|void
name|shouldReject
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|,
name|MetricsRecord
name|record
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"rejects "
operator|+
name|record
argument_list|,
operator|!
name|newGlobFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rejects "
operator|+
name|record
argument_list|,
operator|!
name|newRegexFilter
argument_list|(
name|conf
argument_list|)
operator|.
name|accepts
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new glob filter with a config object    * @param conf  the config object    * @return the filter    */
DECL|method|newGlobFilter (SubsetConfiguration conf)
specifier|public
specifier|static
name|GlobFilter
name|newGlobFilter
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|GlobFilter
name|f
init|=
operator|new
name|GlobFilter
argument_list|()
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
comment|/**    * Create a new regex filter with a config object    * @param conf  the config object    * @return the filter    */
DECL|method|newRegexFilter (SubsetConfiguration conf)
specifier|public
specifier|static
name|RegexFilter
name|newRegexFilter
parameter_list|(
name|SubsetConfiguration
name|conf
parameter_list|)
block|{
name|RegexFilter
name|f
init|=
operator|new
name|RegexFilter
argument_list|()
decl_stmt|;
name|f
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
comment|/**    * Creates a mock MetricsRecord with the given name and tags.    *     * @param name String name    * @param tags List<MetricsTag> tags    * @return MetricsRecord newly created mock    */
DECL|method|mockMetricsRecord (String name, List<MetricsTag> tags)
specifier|private
specifier|static
name|MetricsRecord
name|mockMetricsRecord
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|MetricsTag
argument_list|>
name|tags
parameter_list|)
block|{
name|MetricsRecord
name|record
init|=
name|mock
argument_list|(
name|MetricsRecord
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|record
operator|.
name|tags
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tags
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
block|}
end_class

end_unit

