begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestKeyProviderCryptoExtension
specifier|public
class|class
name|TestKeyProviderCryptoExtension
block|{
DECL|field|CIPHER
specifier|private
specifier|static
specifier|final
name|String
name|CIPHER
init|=
literal|"AES"
decl_stmt|;
DECL|field|ENCRYPTION_KEY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ENCRYPTION_KEY_NAME
init|=
literal|"fooKey"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|kp
specifier|private
specifier|static
name|KeyProvider
name|kp
decl_stmt|;
DECL|field|kpExt
specifier|private
specifier|static
name|KeyProviderCryptoExtension
name|kpExt
decl_stmt|;
DECL|field|options
specifier|private
specifier|static
name|KeyProvider
operator|.
name|Options
name|options
decl_stmt|;
DECL|field|encryptionKey
specifier|private
specifier|static
name|KeyVersion
name|encryptionKey
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|180000
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|kp
operator|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|kpExt
operator|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
name|CIPHER
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|encryptionKey
operator|=
name|kp
operator|.
name|createKey
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateEncryptedKey ()
specifier|public
name|void
name|testGenerateEncryptedKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generate a new EEK and check it
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Version name of EEK should be EEK"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name of EEK should be encryption key name"
argument_list|,
name|ENCRYPTION_KEY_NAME
argument_list|,
name|ek1
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected encrypted key material"
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length of encryption key material and EEK material should "
operator|+
literal|"be the same"
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Decrypt EEK into an EK and check it
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal encryption key material"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal decrypted key material"
argument_list|)
expr_stmt|;
block|}
comment|// Decrypt it again and it should be the same
name|KeyVersion
name|k1a
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1a
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate another EEK and make sure it's different from the first
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k2
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Generated EEKs should have different material!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|ek2
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Generated EEKs should have different IVs!"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptDecrypt ()
specifier|public
name|void
name|testEncryptDecrypt
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get an EEK
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|eek
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|encryptedKeyIv
init|=
name|eek
operator|.
name|getEncryptedKeyIv
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encryptedKeyMaterial
init|=
name|eek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
decl_stmt|;
comment|// Decrypt it manually
name|Cipher
name|cipher
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
decl_stmt|;
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
operator|new
name|SecretKeySpec
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|,
literal|"AES"
argument_list|)
argument_list|,
operator|new
name|IvParameterSpec
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
operator|.
name|deriveIV
argument_list|(
name|encryptedKeyIv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|manualMaterial
init|=
name|cipher
operator|.
name|doFinal
argument_list|(
name|encryptedKeyMaterial
argument_list|)
decl_stmt|;
comment|// Test the createForDecryption factory method
name|EncryptedKeyVersion
name|eek2
init|=
name|EncryptedKeyVersion
operator|.
name|createForDecryption
argument_list|(
name|eek
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|,
name|eek
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|,
name|eek
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|eek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
decl_stmt|;
comment|// Decrypt it with the API
name|KeyVersion
name|decryptedKey
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek2
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|apiMaterial
init|=
name|decryptedKey
operator|.
name|getMaterial
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Wrong key material from decryptEncryptedKey"
argument_list|,
name|manualMaterial
argument_list|,
name|apiMaterial
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReencryptEncryptedKey ()
specifier|public
name|void
name|testReencryptEncryptedKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generate a new EEK
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Decrypt EEK into an EK and check it
specifier|final
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal encryption key material"
argument_list|)
expr_stmt|;
block|}
comment|// Roll the EK
name|kpExt
operator|.
name|rollNewVersion
argument_list|(
name|ek1
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reencrypt ek1
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|reencryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Version name of EEK should be EEK"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name of EEK should be encryption key name"
argument_list|,
name|ENCRYPTION_KEY_NAME
argument_list|,
name|ek2
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected encrypted key material"
argument_list|,
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length of encryption key material and EEK material should "
operator|+
literal|"be the same"
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal decrypted key material"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Re-encrypted EEK should have different material"
argument_list|)
expr_stmt|;
block|}
comment|// Decrypt the new EEK into an EK and check it
specifier|final
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k2
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k2
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k2
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal encryption key material"
argument_list|)
expr_stmt|;
block|}
comment|// Re-encrypting the same EEK with the same EK should be deterministic
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek2a
init|=
name|kpExt
operator|.
name|reencryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Version name of EEK should be EEK"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name of EEK should be encryption key name"
argument_list|,
name|ENCRYPTION_KEY_NAME
argument_list|,
name|ek2a
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected encrypted key material"
argument_list|,
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length of encryption key material and EEK material should "
operator|+
literal|"be the same"
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal decrypted key material"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Re-encrypted EEK should have different material"
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek2a
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// Re-encrypting an EEK with the same version EK should be no-op
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek3
init|=
name|kpExt
operator|.
name|reencryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Version name of EEK should be EEK"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name of EEK should be encryption key name"
argument_list|,
name|ENCRYPTION_KEY_NAME
argument_list|,
name|ek3
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected encrypted key material"
argument_list|,
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length of encryption key material and EEK material should "
operator|+
literal|"be the same"
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal decrypted key material"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Re-encrypted EEK should have different material"
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|ek2
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ek3
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonDefaultCryptoExtensionSelectionWithCachingKeyProvider ()
specifier|public
name|void
name|testNonDefaultCryptoExtensionSelectionWithCachingKeyProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|localKp
init|=
operator|new
name|DummyCryptoExtensionKeyProvider
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|localKp
operator|=
operator|new
name|CachingKeyProvider
argument_list|(
name|localKp
argument_list|,
literal|30000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|localEkv
init|=
name|getEncryptedKeyVersion
argument_list|(
name|config
argument_list|,
name|localKp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummyFakeKey@1"
argument_list|,
name|localEkv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultCryptoExtensionSelectionWithCachingKeyProvider ()
specifier|public
name|void
name|testDefaultCryptoExtensionSelectionWithCachingKeyProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|localKp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|localKp
operator|=
operator|new
name|CachingKeyProvider
argument_list|(
name|localKp
argument_list|,
literal|30000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|localEkv
init|=
name|getEncryptedKeyVersion
argument_list|(
name|config
argument_list|,
name|localKp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ENCRYPTION_KEY_NAME
operator|+
literal|"@0"
argument_list|,
name|localEkv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonDefaultCryptoExtensionSelectionOnKeyProviderExtension ()
specifier|public
name|void
name|testNonDefaultCryptoExtensionSelectionOnKeyProviderExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|localKp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|localKp
operator|=
operator|new
name|DummyCachingCryptoExtensionKeyProvider
argument_list|(
name|localKp
argument_list|,
literal|30000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|EncryptedKeyVersion
name|localEkv
init|=
name|getEncryptedKeyVersion
argument_list|(
name|config
argument_list|,
name|localKp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummyCachingFakeKey@1"
argument_list|,
name|localEkv
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncryptedKeyVersion (Configuration config, KeyProvider localKp)
specifier|private
name|EncryptedKeyVersion
name|getEncryptedKeyVersion
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|KeyProvider
name|localKp
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|KeyProvider
operator|.
name|Options
name|localOptions
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|localOptions
operator|.
name|setCipher
argument_list|(
name|CIPHER
argument_list|)
expr_stmt|;
name|localOptions
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|KeyVersion
name|localEncryptionKey
init|=
name|localKp
operator|.
name|createKey
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|localOptions
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|localKpExt
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|localKp
argument_list|)
decl_stmt|;
return|return
name|localKpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|localEncryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Dummy class to test that this key provider is chosen to    * provide CryptoExtension services over the DefaultCryptoExtension.    */
DECL|class|DummyCryptoExtensionKeyProvider
specifier|public
class|class
name|DummyCryptoExtensionKeyProvider
extends|extends
name|KeyProvider
implements|implements
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
block|{
DECL|field|kp
specifier|private
name|KeyProvider
name|kp
decl_stmt|;
DECL|field|kv
specifier|private
name|KeyVersion
name|kv
decl_stmt|;
DECL|field|ekv
specifier|private
name|EncryptedKeyVersion
name|ekv
decl_stmt|;
DECL|method|DummyCryptoExtensionKeyProvider (Configuration conf)
specifier|public
name|DummyCryptoExtensionKeyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|kp
operator|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|kv
operator|=
operator|new
name|KeyVersion
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
literal|"dummyFakeKey@1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|ekv
operator|=
operator|new
name|EncryptedKeyVersion
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
literal|"dummyFakeKey@1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|warmUpEncryptedKeys (String... keyNames)
specifier|public
name|void
name|warmUpEncryptedKeys
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|drain (String keyName)
specifier|public
name|void
name|drain
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|generateEncryptedKey (String encryptionKeyName)
specifier|public
name|EncryptedKeyVersion
name|generateEncryptedKey
parameter_list|(
name|String
name|encryptionKeyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|this
operator|.
name|ekv
return|;
block|}
annotation|@
name|Override
DECL|method|reencryptEncryptedKey (EncryptedKeyVersion ekv)
specifier|public
name|EncryptedKeyVersion
name|reencryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|ekv
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|ekv
return|;
block|}
annotation|@
name|Override
DECL|method|decryptEncryptedKey ( EncryptedKeyVersion encryptedKeyVersion)
specifier|public
name|KeyVersion
name|decryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|kv
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyVersion (String versionName)
specifier|public
name|KeyVersion
name|getKeyVersion
parameter_list|(
name|String
name|versionName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|getKeyVersion
argument_list|(
name|versionName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKeys ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|getKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyVersions (String name)
specifier|public
name|List
argument_list|<
name|KeyVersion
argument_list|>
name|getKeyVersions
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|getKeyVersions
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadata (String name)
specifier|public
name|Metadata
name|getMetadata
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|getMetadata
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String name, byte[] material, Options localOptions)
specifier|public
name|KeyVersion
name|createKey
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|,
name|Options
name|localOptions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|createKey
argument_list|(
name|name
argument_list|,
name|material
argument_list|,
name|localOptions
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String name)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|kp
operator|.
name|deleteKey
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rollNewVersion (String name, byte[] material)
specifier|public
name|KeyVersion
name|rollNewVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|material
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|kp
operator|.
name|rollNewVersion
argument_list|(
name|name
argument_list|,
name|material
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|kp
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Dummy class to verify that CachingKeyProvider is used to    * provide CryptoExtension services if the CachingKeyProvider itself    * implements CryptoExtension.    */
DECL|class|DummyCachingCryptoExtensionKeyProvider
specifier|public
class|class
name|DummyCachingCryptoExtensionKeyProvider
extends|extends
name|CachingKeyProvider
implements|implements
name|KeyProviderCryptoExtension
operator|.
name|CryptoExtension
block|{
DECL|field|kp
specifier|private
name|KeyProvider
name|kp
decl_stmt|;
DECL|field|kv
specifier|private
name|KeyVersion
name|kv
decl_stmt|;
DECL|field|ekv
specifier|private
name|EncryptedKeyVersion
name|ekv
decl_stmt|;
DECL|method|DummyCachingCryptoExtensionKeyProvider (KeyProvider keyProvider, long keyTimeoutMillis, long currKeyTimeoutMillis)
specifier|public
name|DummyCachingCryptoExtensionKeyProvider
parameter_list|(
name|KeyProvider
name|keyProvider
parameter_list|,
name|long
name|keyTimeoutMillis
parameter_list|,
name|long
name|currKeyTimeoutMillis
parameter_list|)
block|{
name|super
argument_list|(
name|keyProvider
argument_list|,
name|keyTimeoutMillis
argument_list|,
name|currKeyTimeoutMillis
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|kp
operator|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|kv
operator|=
operator|new
name|KeyVersion
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
literal|"dummyCachingFakeKey@1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|ekv
operator|=
operator|new
name|EncryptedKeyVersion
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
literal|"dummyCachingFakeKey@1"
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|warmUpEncryptedKeys (String... keyNames)
specifier|public
name|void
name|warmUpEncryptedKeys
parameter_list|(
name|String
modifier|...
name|keyNames
parameter_list|)
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
DECL|method|drain (String keyName)
specifier|public
name|void
name|drain
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|generateEncryptedKey (String encryptionKeyName)
specifier|public
name|EncryptedKeyVersion
name|generateEncryptedKey
parameter_list|(
name|String
name|encryptionKeyName
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|this
operator|.
name|ekv
return|;
block|}
annotation|@
name|Override
DECL|method|decryptEncryptedKey ( EncryptedKeyVersion encryptedKeyVersion)
specifier|public
name|KeyVersion
name|decryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|encryptedKeyVersion
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|kv
return|;
block|}
annotation|@
name|Override
DECL|method|reencryptEncryptedKey (EncryptedKeyVersion ekv)
specifier|public
name|EncryptedKeyVersion
name|reencryptEncryptedKey
parameter_list|(
name|EncryptedKeyVersion
name|ekv
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
return|return
name|ekv
return|;
block|}
block|}
block|}
end_class

end_unit

