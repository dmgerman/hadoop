begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|IvParameterSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestKeyProviderCryptoExtension
specifier|public
class|class
name|TestKeyProviderCryptoExtension
block|{
DECL|field|CIPHER
specifier|private
specifier|static
specifier|final
name|String
name|CIPHER
init|=
literal|"AES"
decl_stmt|;
DECL|field|ENCRYPTION_KEY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ENCRYPTION_KEY_NAME
init|=
literal|"fooKey"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|kp
specifier|private
specifier|static
name|KeyProvider
name|kp
decl_stmt|;
DECL|field|kpExt
specifier|private
specifier|static
name|KeyProviderCryptoExtension
name|kpExt
decl_stmt|;
DECL|field|options
specifier|private
specifier|static
name|KeyProvider
operator|.
name|Options
name|options
decl_stmt|;
DECL|field|encryptionKey
specifier|private
specifier|static
name|KeyVersion
name|encryptionKey
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|kp
operator|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|kpExt
operator|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
expr_stmt|;
name|options
operator|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
name|CIPHER
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|encryptionKey
operator|=
name|kp
operator|.
name|createKey
argument_list|(
name|ENCRYPTION_KEY_NAME
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateEncryptedKey ()
specifier|public
name|void
name|testGenerateEncryptedKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Generate a new EEK and check it
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Version name of EEK should be EEK"
argument_list|,
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name of EEK should be encryption key name"
argument_list|,
name|ENCRYPTION_KEY_NAME
argument_list|,
name|ek1
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected encrypted key material"
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Length of encryption key material and EEK material should "
operator|+
literal|"be the same"
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Decrypt EEK into an EK and check it
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal encryption key material"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Encrypted key material should not equal decrypted key material"
argument_list|)
expr_stmt|;
block|}
comment|// Decrypt it again and it should be the same
name|KeyVersion
name|k1a
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1a
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate another EEK and make sure it's different from the first
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k2
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Generated EEKs should have different material!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|ek1
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|ek2
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Generated EEKs should have different IVs!"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEncryptDecrypt ()
specifier|public
name|void
name|testEncryptDecrypt
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get an EEK
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|eek
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|encryptionKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|encryptedKeyIv
init|=
name|eek
operator|.
name|getEncryptedKeyIv
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|encryptedKeyMaterial
init|=
name|eek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
decl_stmt|;
comment|// Decrypt it manually
name|Cipher
name|cipher
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/CTR/NoPadding"
argument_list|)
decl_stmt|;
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
operator|new
name|SecretKeySpec
argument_list|(
name|encryptionKey
operator|.
name|getMaterial
argument_list|()
argument_list|,
literal|"AES"
argument_list|)
argument_list|,
operator|new
name|IvParameterSpec
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
operator|.
name|deriveIV
argument_list|(
name|encryptedKeyIv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|manualMaterial
init|=
name|cipher
operator|.
name|doFinal
argument_list|(
name|encryptedKeyMaterial
argument_list|)
decl_stmt|;
comment|// Decrypt it with the API
name|KeyVersion
name|decryptedKey
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|eek
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|apiMaterial
init|=
name|decryptedKey
operator|.
name|getMaterial
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Wrong key material from decryptEncryptedKey"
argument_list|,
name|manualMaterial
argument_list|,
name|apiMaterial
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

