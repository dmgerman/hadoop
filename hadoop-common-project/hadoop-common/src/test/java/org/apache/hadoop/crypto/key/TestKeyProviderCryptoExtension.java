begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_class
DECL|class|TestKeyProviderCryptoExtension
specifier|public
class|class
name|TestKeyProviderCryptoExtension
block|{
DECL|field|CIPHER
specifier|private
specifier|static
specifier|final
name|String
name|CIPHER
init|=
literal|"AES"
decl_stmt|;
annotation|@
name|Test
DECL|method|testGenerateEncryptedKey ()
specifier|public
name|void
name|testGenerateEncryptedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|KeyProvider
name|kp
init|=
operator|new
name|UserProvider
operator|.
name|Factory
argument_list|()
operator|.
name|createProvider
argument_list|(
operator|new
name|URI
argument_list|(
literal|"user:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|Options
name|options
init|=
operator|new
name|KeyProvider
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|options
operator|.
name|setCipher
argument_list|(
name|CIPHER
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBitLength
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|kv
init|=
name|kp
operator|.
name|createKey
argument_list|(
literal|"foo"
argument_list|,
name|SecureRandom
operator|.
name|getSeed
argument_list|(
literal|16
argument_list|)
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
name|kpExt
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|kp
argument_list|)
decl_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek1
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EEK
argument_list|,
name|ek1
operator|.
name|getEncryptedKey
argument_list|()
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ek1
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ek1
operator|.
name|getEncryptedKey
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|ek1
operator|.
name|getEncryptedKey
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|KeyProviderCryptoExtension
operator|.
name|EK
argument_list|,
name|k1
operator|.
name|getVersionName
argument_list|()
argument_list|)
expr_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k1a
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|k1
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|k1a
operator|.
name|getMaterial
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kv
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|,
name|k1
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|ek2
init|=
name|kpExt
operator|.
name|generateEncryptedKey
argument_list|(
name|kv
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyProvider
operator|.
name|KeyVersion
name|k2
init|=
name|kpExt
operator|.
name|decryptEncryptedKey
argument_list|(
name|ek2
argument_list|)
decl_stmt|;
name|boolean
name|eq
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|eq
operator|&&
name|i
operator|<
name|ek2
operator|.
name|getEncryptedKey
argument_list|()
operator|.
name|getMaterial
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eq
operator|=
name|k2
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
operator|==
name|k1
operator|.
name|getMaterial
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|eq
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

