begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
operator|.
name|Lz4Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInZlibDeflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|CompressDecompressTester
specifier|public
class|class
name|CompressDecompressTester
parameter_list|<
name|T
extends|extends
name|Compressor
parameter_list|,
name|E
extends|extends
name|Decompressor
parameter_list|>
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CompressDecompressTester
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|originalRawData
specifier|private
specifier|final
name|byte
index|[]
name|originalRawData
decl_stmt|;
DECL|field|pairs
specifier|private
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|pairs
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
DECL|field|stateges
specifier|private
name|ImmutableSet
argument_list|<
name|CompressionTestStrategy
argument_list|>
name|stateges
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|assertionDelegate
specifier|private
name|PreAssertionTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|assertionDelegate
decl_stmt|;
DECL|method|CompressDecompressTester (byte[] originalRawData)
specifier|public
name|CompressDecompressTester
parameter_list|(
name|byte
index|[]
name|originalRawData
parameter_list|)
block|{
name|this
operator|.
name|originalRawData
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|originalRawData
argument_list|,
name|originalRawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|assertionDelegate
operator|=
operator|new
name|PreAssertionTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|filterOnAssumeWhat
parameter_list|(
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|isAvailable
argument_list|(
name|pair
argument_list|)
condition|)
name|builder
operator|.
name|add
argument_list|(
name|pair
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|isNativeSnappyLoadable ()
specifier|private
specifier|static
name|boolean
name|isNativeSnappyLoadable
parameter_list|()
block|{
name|boolean
name|snappyAvailable
init|=
literal|false
decl_stmt|;
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|System
operator|.
name|loadLibrary
argument_list|(
literal|"snappy"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Snappy native library is available"
argument_list|)
expr_stmt|;
name|snappyAvailable
operator|=
literal|true
expr_stmt|;
name|boolean
name|hadoopNativeAvailable
init|=
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
decl_stmt|;
name|loaded
operator|=
name|snappyAvailable
operator|&&
name|hadoopNativeAvailable
expr_stmt|;
if|if
condition|(
name|loaded
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Snappy native library loaded"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Snappy native library not loaded"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to load snappy: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|loaded
return|;
block|}
DECL|method|of ( byte[] rawData)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Compressor
parameter_list|,
name|E
extends|extends
name|Decompressor
parameter_list|>
name|CompressDecompressTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|of
parameter_list|(
name|byte
index|[]
name|rawData
parameter_list|)
block|{
return|return
operator|new
name|CompressDecompressTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|(
name|rawData
argument_list|)
return|;
block|}
DECL|method|withCompressDecompressPair ( T compressor, E decompressor)
specifier|public
name|CompressDecompressTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|withCompressDecompressPair
parameter_list|(
name|T
name|compressor
parameter_list|,
name|E
name|decompressor
parameter_list|)
block|{
name|addPair
argument_list|(
name|compressor
argument_list|,
name|decompressor
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"_"
argument_list|)
operator|.
name|join
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|decompressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withTestCases ( ImmutableSet<CompressionTestStrategy> stateges)
specifier|public
name|CompressDecompressTester
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|withTestCases
parameter_list|(
name|ImmutableSet
argument_list|<
name|CompressionTestStrategy
argument_list|>
name|stateges
parameter_list|)
block|{
name|this
operator|.
name|stateges
operator|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|stateges
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPair (T compressor, E decompressor, String name)
specifier|private
name|void
name|addPair
parameter_list|(
name|T
name|compressor
parameter_list|,
name|E
name|decompressor
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|(
name|name
argument_list|,
name|compressor
argument_list|,
name|decompressor
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|pairs
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|pairs
operator|=
name|assertionDelegate
operator|.
name|filterOnAssumeWhat
argument_list|(
name|pairs
argument_list|)
expr_stmt|;
for|for
control|(
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
for|for
control|(
name|CompressionTestStrategy
name|strategy
range|:
name|stateges
control|)
block|{
name|strategy
operator|.
name|getTesterStrategy
argument_list|()
operator|.
name|assertCompression
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|pair
operator|.
name|getCompressor
argument_list|()
argument_list|,
name|pair
operator|.
name|getDecompressor
argument_list|()
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|originalRawData
argument_list|,
name|originalRawData
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|endAll
argument_list|(
name|pairs
argument_list|)
expr_stmt|;
block|}
DECL|method|endAll (ImmutableList<TesterPair<T, E>> pairs)
specifier|private
name|void
name|endAll
parameter_list|(
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
for|for
control|(
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|pair
range|:
name|pairs
control|)
name|pair
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
DECL|interface|PreAssertionTester
interface|interface
name|PreAssertionTester
parameter_list|<
name|T
extends|extends
name|Compressor
parameter_list|,
name|E
extends|extends
name|Decompressor
parameter_list|>
block|{
DECL|method|filterOnAssumeWhat ( ImmutableList<TesterPair<T, E>> pairs)
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|filterOnAssumeWhat
parameter_list|(
name|ImmutableList
argument_list|<
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|pairs
parameter_list|)
function_decl|;
block|}
DECL|enum|CompressionTestStrategy
specifier|public
enum|enum
name|CompressionTestStrategy
block|{
DECL|enumConstant|COMPRESS_DECOMPRESS_ERRORS
name|COMPRESS_DECOMPRESS_ERRORS
argument_list|(
operator|new
name|TesterCompressionStrategy
argument_list|()
block|{
specifier|private
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"- "
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|assertCompression
parameter_list|(
name|String
name|name
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|checkSetInputNullPointerException
argument_list|(
name|compressor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkSetInputNullPointerException
argument_list|(
name|decompressor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkCompressArrayIndexOutOfBoundsException
argument_list|(
name|compressor
argument_list|,
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkCompressArrayIndexOutOfBoundsException
argument_list|(
name|decompressor
argument_list|,
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkCompressNullPointerException
argument_list|(
name|compressor
argument_list|,
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkCompressNullPointerException
argument_list|(
name|decompressor
argument_list|,
name|rawData
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkSetInputArrayIndexOutOfBoundsException
argument_list|(
name|compressor
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkSetInputArrayIndexOutOfBoundsException
argument_list|(
name|decompressor
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkSetInputNullPointerException
parameter_list|(
name|Compressor
name|compressor
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkSetInputNullPointerException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkCompressNullPointerException
parameter_list|(
name|Compressor
name|compressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkCompressNullPointerException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkCompressNullPointerException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|decompressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkCompressNullPointerException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkSetInputNullPointerException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setInput
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|decompressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkSetInputNullPointerException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkSetInputArrayIndexOutOfBoundsException
parameter_list|(
name|Compressor
name|compressor
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkSetInputArrayIndexOutOfBoundsException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkCompressArrayIndexOutOfBoundsException
parameter_list|(
name|Compressor
name|compressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
try|try
block|{
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|compress
argument_list|(
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkCompressArrayIndexOutOfBoundsException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkCompressArrayIndexOutOfBoundsException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|decompress
argument_list|(
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|decompressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkCompressArrayIndexOutOfBoundsException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkSetInputArrayIndexOutOfBoundsException
parameter_list|(
name|Decompressor
name|decompressor
parameter_list|)
block|{
try|try
block|{
name|decompressor
operator|.
name|setInput
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|decompressor
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"checkNullPointerException error !!!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|COMPRESS_DECOMPRESS_SINGLE_BLOCK
name|COMPRESS_DECOMPRESS_SINGLE_BLOCK
argument_list|(
operator|new
name|TesterCompressionStrategy
argument_list|()
block|{
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"- "
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|assertCompression
parameter_list|(
name|String
name|name
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|rawData
parameter_list|)
block|{
name|int
name|cSize
init|=
literal|0
decl_stmt|;
name|int
name|decompressedSize
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|compressedResult
init|=
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|decompressedBytes
init|=
operator|new
name|byte
index|[
name|rawData
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"compressor.needsInput before error !!!"
argument_list|)
argument_list|,
name|compressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"compressor.getBytesWritten before error !!!"
argument_list|)
argument_list|,
name|compressor
operator|.
name|getBytesWritten
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|cSize
operator|+=
name|compressor
operator|.
name|compress
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|compressedResult
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"decompressor.needsInput() before error !!!"
argument_list|)
argument_list|,
name|decompressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedResult
argument_list|,
literal|0
argument_list|,
name|cSize
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"decompressor.needsInput() after error !!!"
argument_list|)
argument_list|,
name|decompressor
operator|.
name|needsInput
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|decompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|decompressedSize
operator|=
name|decompressor
operator|.
name|decompress
argument_list|(
name|decompressedBytes
argument_list|,
literal|0
argument_list|,
name|decompressedBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|" byte size not equals error !!!"
argument_list|)
argument_list|,
name|decompressedSize
operator|==
name|rawData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|" byte arrays not equals error !!!"
argument_list|)
argument_list|,
name|rawData
argument_list|,
name|decompressedBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
name|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
argument_list|(
operator|new
name|TesterCompressionStrategy
argument_list|()
block|{
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"- "
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Compressor
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|emptySize
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Lz4Compressor
operator|.
name|class
argument_list|,
literal|4
argument_list|,
name|ZlibCompressor
operator|.
name|class
argument_list|,
literal|16
argument_list|,
name|SnappyCompressor
operator|.
name|class
argument_list|,
literal|4
argument_list|,
name|BuiltInZlibDeflater
operator|.
name|class
argument_list|,
literal|16
argument_list|)
decl_stmt|;
annotation|@
name|Override
name|void
name|assertCompression
parameter_list|(
name|String
name|name
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|originalRawData
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
name|ByteArrayInputStream
name|bytesIn
init|=
literal|null
decl_stmt|;
name|BlockDecompressorStream
name|blockDecompressorStream
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// close without write
try|try
block|{
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// decompressor.end();
name|BlockCompressorStream
name|blockCompressorStream
init|=
operator|new
name|BlockCompressorStream
argument_list|(
name|bytesOut
argument_list|,
name|compressor
argument_list|,
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|blockCompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check compressed output
name|buf
operator|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|int
name|emSize
init|=
name|emptySize
operator|.
name|get
argument_list|(
name|compressor
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"empty stream compressed output size != "
operator|+
name|emSize
argument_list|)
argument_list|,
name|emSize
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// use compressed output as input for decompression
name|bytesIn
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// create decompression stream
name|blockDecompressorStream
operator|=
operator|new
name|BlockDecompressorStream
argument_list|(
name|bytesIn
argument_list|,
name|decompressor
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// no byte is available because stream was closed
name|assertEquals
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|" return value is not -1"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|blockDecompressorStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|blockDecompressorStream
operator|!=
literal|null
condition|)
try|try
block|{
name|bytesOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockDecompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytesIn
operator|.
name|close
argument_list|()
expr_stmt|;
name|blockDecompressorStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
argument_list|)
block|,
DECL|enumConstant|COMPRESS_DECOMPRESS_BLOCK
name|COMPRESS_DECOMPRESS_BLOCK
argument_list|(
operator|new
name|TesterCompressionStrategy
argument_list|()
block|{
specifier|private
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"- "
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|operationBlock
init|=
operator|new
name|byte
index|[
name|BLOCK_SIZE
index|]
decl_stmt|;
comment|// Use default of 512 as bufferSize and compressionOverhead of
comment|// (1% of bufferSize + 12 bytes) = 18 bytes (zlib algorithm).
specifier|private
specifier|static
specifier|final
name|int
name|overheadSpace
init|=
name|BLOCK_SIZE
operator|/
literal|100
operator|+
literal|12
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|assertCompression
parameter_list|(
name|String
name|name
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|originalRawData
parameter_list|)
block|{
name|int
name|off
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|originalRawData
operator|.
name|length
decl_stmt|;
name|int
name|maxSize
init|=
name|BLOCK_SIZE
operator|-
name|overheadSpace
decl_stmt|;
name|int
name|compresSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|blockLabels
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|compressedOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|decompressOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|originalRawData
operator|.
name|length
operator|>
name|maxSize
condition|)
block|{
do|do
block|{
name|int
name|bufLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|compressor
operator|.
name|setInput
argument_list|(
name|originalRawData
argument_list|,
name|off
argument_list|,
name|bufLen
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|finish
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|compressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|compresSize
operator|=
name|compressor
operator|.
name|compress
argument_list|(
name|operationBlock
argument_list|,
literal|0
argument_list|,
name|operationBlock
operator|.
name|length
argument_list|)
expr_stmt|;
name|compressedOut
operator|.
name|write
argument_list|(
name|operationBlock
argument_list|,
literal|0
argument_list|,
name|compresSize
argument_list|)
expr_stmt|;
name|blockLabels
operator|.
name|add
argument_list|(
name|compresSize
argument_list|)
expr_stmt|;
block|}
name|compressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|off
operator|+=
name|bufLen
expr_stmt|;
name|len
operator|-=
name|bufLen
expr_stmt|;
block|}
do|while
condition|(
name|len
operator|>
literal|0
condition|)
do|;
block|}
name|off
operator|=
literal|0
expr_stmt|;
comment|// compressed bytes
name|byte
index|[]
name|compressedBytes
init|=
name|compressedOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|step
range|:
name|blockLabels
control|)
block|{
name|decompressor
operator|.
name|setInput
argument_list|(
name|compressedBytes
argument_list|,
name|off
argument_list|,
name|step
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|decompressor
operator|.
name|finished
argument_list|()
condition|)
block|{
name|int
name|dSize
init|=
name|decompressor
operator|.
name|decompress
argument_list|(
name|operationBlock
argument_list|,
literal|0
argument_list|,
name|operationBlock
operator|.
name|length
argument_list|)
decl_stmt|;
name|decompressOut
operator|.
name|write
argument_list|(
name|operationBlock
argument_list|,
literal|0
argument_list|,
name|dSize
argument_list|)
expr_stmt|;
block|}
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
name|off
operator|=
name|off
operator|+
name|step
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
literal|"byte arrays not equals error !!!"
argument_list|)
argument_list|,
name|originalRawData
argument_list|,
name|decompressOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|compressedOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{           }
try|try
block|{
name|decompressOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{           }
block|}
block|}
block|}
argument_list|)
block|;
DECL|field|testerStrategy
specifier|private
specifier|final
name|TesterCompressionStrategy
name|testerStrategy
decl_stmt|;
DECL|method|CompressionTestStrategy (TesterCompressionStrategy testStrategy)
name|CompressionTestStrategy
parameter_list|(
name|TesterCompressionStrategy
name|testStrategy
parameter_list|)
block|{
name|this
operator|.
name|testerStrategy
operator|=
name|testStrategy
expr_stmt|;
block|}
DECL|method|getTesterStrategy ()
specifier|public
name|TesterCompressionStrategy
name|getTesterStrategy
parameter_list|()
block|{
return|return
name|testerStrategy
return|;
block|}
block|}
DECL|class|TesterPair
specifier|static
specifier|final
class|class
name|TesterPair
parameter_list|<
name|T
extends|extends
name|Compressor
parameter_list|,
name|E
extends|extends
name|Decompressor
parameter_list|>
block|{
DECL|field|compressor
specifier|private
specifier|final
name|T
name|compressor
decl_stmt|;
DECL|field|decompressor
specifier|private
specifier|final
name|E
name|decompressor
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|TesterPair (String name, T compressor, E decompressor)
name|TesterPair
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|compressor
parameter_list|,
name|E
name|decompressor
parameter_list|)
block|{
name|this
operator|.
name|compressor
operator|=
name|compressor
expr_stmt|;
name|this
operator|.
name|decompressor
operator|=
name|decompressor
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|end ()
specifier|public
name|void
name|end
parameter_list|()
block|{
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|compressor
operator|.
name|reinit
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|compressor
operator|.
name|end
argument_list|()
expr_stmt|;
name|decompressor
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
DECL|method|getCompressor ()
specifier|public
name|T
name|getCompressor
parameter_list|()
block|{
return|return
name|compressor
return|;
block|}
DECL|method|getDecompressor ()
specifier|public
name|E
name|getDecompressor
parameter_list|()
block|{
return|return
name|decompressor
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**    * Method for compressor availability check    */
DECL|method|isAvailable (TesterPair<T, E> pair)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Compressor
parameter_list|,
name|E
extends|extends
name|Decompressor
parameter_list|>
name|boolean
name|isAvailable
parameter_list|(
name|TesterPair
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|pair
parameter_list|)
block|{
name|Compressor
name|compressor
init|=
name|pair
operator|.
name|compressor
decl_stmt|;
if|if
condition|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|Lz4Compressor
operator|.
name|class
argument_list|)
operator|&&
operator|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
operator|)
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|BuiltInZlibDeflater
operator|.
name|class
argument_list|)
operator|&&
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|ZlibCompressor
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|compressor
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|SnappyCompressor
operator|.
name|class
argument_list|)
operator|&&
name|isNativeSnappyLoadable
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|class|TesterCompressionStrategy
specifier|abstract
specifier|static
class|class
name|TesterCompressionStrategy
block|{
DECL|field|logger
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|assertCompression (String name, Compressor compressor, Decompressor decompressor, byte[] originalRawData)
specifier|abstract
name|void
name|assertCompression
parameter_list|(
name|String
name|name
parameter_list|,
name|Compressor
name|compressor
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|byte
index|[]
name|originalRawData
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

