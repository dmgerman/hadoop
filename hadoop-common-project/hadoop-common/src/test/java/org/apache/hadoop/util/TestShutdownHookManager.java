begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_class
DECL|class|TestShutdownHookManager
specifier|public
class|class
name|TestShutdownHookManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestShutdownHookManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|shutdownHookManager ()
specifier|public
name|void
name|shutdownHookManager
parameter_list|()
block|{
name|ShutdownHookManager
name|mgr
init|=
name|ShutdownHookManager
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|hook1
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook1 complete."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Runnable
name|hook2
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook2 complete."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Runnable
name|hook3
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook3 complete."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook3 interrupted exception:"
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Hook 3 should not timeout."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Runnable
name|hook4
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sleep
argument_list|(
literal|3500
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook4 complete."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Hook 4 should timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook4 interrupted exception:"
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|mgr
operator|.
name|addShutdownHook
argument_list|(
name|hook1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hook1
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHook
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeShutdownHook
argument_list|(
name|hook1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook1
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addShutdownHook
argument_list|(
name|hook1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addShutdownHook
argument_list|(
name|hook2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hook2
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHook
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hook1
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHook
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test hook finish without timeout
name|mgr
operator|.
name|addShutdownHook
argument_list|(
name|hook3
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hook3
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHook
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test hook finish with timeout
name|mgr
operator|.
name|addShutdownHook
argument_list|(
name|hook4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|hasShutdownHook
argument_list|(
name|hook4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|hook4
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHook
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mgr
operator|.
name|getShutdownHooksInOrder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown starts here"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

