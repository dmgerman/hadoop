begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|TestIdentityProviders
specifier|public
class|class
name|TestIdentityProviders
block|{
DECL|class|FakeSchedulable
specifier|public
class|class
name|FakeSchedulable
implements|implements
name|Schedulable
block|{
DECL|method|FakeSchedulable ()
specifier|public
name|FakeSchedulable
parameter_list|()
block|{     }
DECL|method|getUserGroupInformation ()
specifier|public
name|UserGroupInformation
name|getUserGroupInformation
parameter_list|()
block|{
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPriorityLevel ()
specifier|public
name|int
name|getPriorityLevel
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPluggableIdentityProvider ()
specifier|public
name|void
name|testPluggableIdentityProvider
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_IDENTITY_PROVIDER_KEY
argument_list|,
literal|"org.apache.hadoop.ipc.UserIdentityProvider"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IdentityProvider
argument_list|>
name|providers
init|=
name|conf
operator|.
name|getInstances
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_IDENTITY_PROVIDER_KEY
argument_list|,
name|IdentityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|providers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|IdentityProvider
name|ip
init|=
name|providers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip
operator|.
name|getClass
argument_list|()
argument_list|,
name|UserIdentityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserIdentityProvider ()
specifier|public
name|void
name|testUserIdentityProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|UserIdentityProvider
name|uip
init|=
operator|new
name|UserIdentityProvider
argument_list|()
decl_stmt|;
name|String
name|identity
init|=
name|uip
operator|.
name|makeIdentity
argument_list|(
operator|new
name|FakeSchedulable
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get our username
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|username
argument_list|,
name|identity
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

