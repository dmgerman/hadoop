begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|SpanReceiverInfo
operator|.
name|ConfigurationPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTraceUtils
specifier|public
class|class
name|TestTraceUtils
block|{
annotation|@
name|Test
DECL|method|testWrappedHadoopConf ()
specifier|public
name|void
name|testWrappedHadoopConf
parameter_list|()
block|{
name|String
name|key
init|=
literal|"sampler"
decl_stmt|;
name|String
name|value
init|=
literal|"ProbabilitySampler"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TraceUtils
operator|.
name|HTRACE_CONF_PREFIX
operator|+
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|HTraceConfiguration
name|wrapped
init|=
name|TraceUtils
operator|.
name|wrapHadoopConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|wrapped
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtraConfig ()
specifier|public
name|void
name|testExtraConfig
parameter_list|()
block|{
name|String
name|key
init|=
literal|"test.extra.config"
decl_stmt|;
name|String
name|oldValue
init|=
literal|"old value"
decl_stmt|;
name|String
name|newValue
init|=
literal|"new value"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TraceUtils
operator|.
name|HTRACE_CONF_PREFIX
operator|+
name|key
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|ConfigurationPair
argument_list|>
name|extraConfig
init|=
operator|new
name|LinkedList
argument_list|<
name|ConfigurationPair
argument_list|>
argument_list|()
decl_stmt|;
name|extraConfig
operator|.
name|add
argument_list|(
operator|new
name|ConfigurationPair
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|HTraceConfiguration
name|wrapped
init|=
name|TraceUtils
operator|.
name|wrapHadoopConf
argument_list|(
name|conf
argument_list|,
name|extraConfig
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newValue
argument_list|,
name|wrapped
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

