begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestLineReader
specifier|public
class|class
name|TestLineReader
block|{
annotation|@
name|Test
DECL|method|testCustomDelimiter ()
specifier|public
name|void
name|testCustomDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
literal|"record Bangalorrecord recorrecordrecord Kerala"
decl_stmt|;
name|String
name|delimiter
init|=
literal|"record"
decl_stmt|;
name|LineReader
name|reader
init|=
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|delimiter
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" Bangalor"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" recor"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" Kerala"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

