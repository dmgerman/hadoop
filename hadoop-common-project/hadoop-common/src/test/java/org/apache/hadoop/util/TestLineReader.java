begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLineReader
specifier|public
class|class
name|TestLineReader
block|{
comment|/**    * TEST_1: The test scenario is the tail of the buffer equals the starting    * character/s of delimiter.    *    * The Test Data is such that,    *    * 1) we will have "&lt;/entity&gt;" as delimiter    *    * 2) The tail of the current buffer would be "&lt;/" which matches with the    * starting character sequence of delimiter.    *    * 3) The Head of the next buffer would be "id&gt;" which does NOT match with    * the remaining characters of delimiter.    *    * 4) Input data would be prefixed by char 'a' about    * numberOfCharToFillTheBuffer times. So that, one iteration to buffer the    * input data, would end at '&lt;/' ie equals starting 2 char of delimiter    *    * 5) For this we would take BufferSize as 64 * 1024;    *    * Check Condition In the second key value pair, the value should contain    * "&lt;/" from currentToken and "id&gt;" from next token    */
annotation|@
name|Test
DECL|method|testCustomDelimiter1 ()
specifier|public
name|void
name|testCustomDelimiter1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|delimiter
init|=
literal|"</entity>"
decl_stmt|;
comment|// Ending part of Input Data Buffer
comment|// It contains '</' ie delimiter character
specifier|final
name|String
name|currentBufferTailToken
init|=
literal|"</entity><entity><id>Gelesh</"
decl_stmt|;
comment|// Supposing the start of next buffer is this
specifier|final
name|String
name|nextBufferHeadToken
init|=
literal|"id><name>Omathil</name></entity>"
decl_stmt|;
comment|// Expected must capture from both the buffer, excluding Delimiter
specifier|final
name|String
name|expected
init|=
operator|(
name|currentBufferTailToken
operator|+
name|nextBufferHeadToken
operator|)
operator|.
name|replace
argument_list|(
name|delimiter
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|String
name|testPartOfInput
init|=
name|currentBufferTailToken
operator|+
name|nextBufferHeadToken
decl_stmt|;
specifier|final
name|int
name|bufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
name|int
name|numberOfCharToFillTheBuffer
init|=
name|bufferSize
operator|-
name|currentBufferTailToken
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|char
index|[]
name|fillBuffer
init|=
operator|new
name|char
index|[
name|numberOfCharToFillTheBuffer
index|]
decl_stmt|;
comment|// char 'a' as a filler for the test string
name|Arrays
operator|.
name|fill
argument_list|(
name|fillBuffer
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|fillerString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|String
name|testData
init|=
name|fillerString
operator|+
name|testPartOfInput
decl_stmt|;
specifier|final
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|delimiter
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fillerString
operator|.
name|toString
argument_list|()
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * TEST_2: The test scenario is such that, the character/s preceding the    * delimiter, equals the starting character/s of delimiter.    */
annotation|@
name|Test
DECL|method|testCustomDelimiter2 ()
specifier|public
name|void
name|testCustomDelimiter2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|delimiter
init|=
literal|"record"
decl_stmt|;
specifier|final
name|StringBuilder
name|testStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|testStringBuilder
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
literal|"Kerala "
argument_list|)
expr_stmt|;
name|testStringBuilder
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
literal|"Bangalore"
argument_list|)
expr_stmt|;
name|testStringBuilder
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
literal|" North Korea"
argument_list|)
expr_stmt|;
name|testStringBuilder
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
operator|.
name|append
argument_list|(
literal|"Guantanamo"
argument_list|)
expr_stmt|;
comment|// ~EOF with 're'
name|testStringBuilder
operator|.
name|append
argument_list|(
name|delimiter
operator|+
literal|"ecord"
operator|+
literal|"recor"
operator|+
literal|"core"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testData
init|=
name|testStringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|delimiter
operator|.
name|getBytes
argument_list|(
operator|(
name|StandardCharsets
operator|.
name|UTF_8
operator|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Kerala "
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bangalore"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|" North Korea"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Guantanamo"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
literal|"ecord"
operator|+
literal|"recor"
operator|+
literal|"core"
operator|)
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test 3: The test scenario is such that, aaabccc split by aaab.    */
annotation|@
name|Test
DECL|method|testCustomDelimiter3 ()
specifier|public
name|void
name|testCustomDelimiter3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testData
init|=
literal|"aaaabccc"
decl_stmt|;
specifier|final
name|String
name|delimiter
init|=
literal|"aaab"
decl_stmt|;
specifier|final
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|testData
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|delimiter
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|line
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lineReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

