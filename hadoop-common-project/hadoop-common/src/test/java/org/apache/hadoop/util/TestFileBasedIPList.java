begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFileBasedIPList
specifier|public
class|class
name|TestFileBasedIPList
block|{
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of IPS  to the file    * Check  for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testSubnetsAndIPs ()
specifier|public
name|void
name|testSubnetsAndIPs
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|IPList
name|ipList
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"10.119.103.112 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.119.103.112"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.119.103.113 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.119.103.113"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.221.102.0 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.102.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.221.102.1 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.102.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.221.103.1 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.103.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.221.103.255 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.103.255"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.221.104.0 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.104.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.221.104.1 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.104.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of IPS  to the file    * Check  for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testNullIP ()
specifier|public
name|void
name|testNullIP
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|IPList
name|ipList
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Null Ip is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of subnets and IPSs to the file    * Check  for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testWithMultipleSubnetAndIPs ()
specifier|public
name|void
name|testWithMultipleSubnetAndIPs
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.222.0.0/16"
block|,
literal|"10.113.221.221"
block|}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|IPList
name|ipList
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"10.119.103.112 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.119.103.112"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.119.103.113 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.119.103.113"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.221.103.121 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.221.104.0 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.221.104.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.222.103.121 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.223.104.0 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.223.104.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.113.221.221 is not in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.113.221.221"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.113.221.222 is in the list"
argument_list|,
name|ipList
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do not specify the file    * test for inclusion    * should be true as if the feature is turned off    */
annotation|@
name|Test
DECL|method|testFileNotSpecified ()
specifier|public
name|void
name|testFileNotSpecified
parameter_list|()
block|{
name|IPList
name|ipl
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"110.113.221.222 is in the list"
argument_list|,
name|ipl
operator|.
name|isIn
argument_list|(
literal|"110.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify a non existent file    * test for inclusion    * should be true as if the feature is turned off    */
annotation|@
name|Test
DECL|method|testFileMissing ()
specifier|public
name|void
name|testFileMissing
parameter_list|()
block|{
name|IPList
name|ipl
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|"missingips.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"110.113.221.222 is in the list"
argument_list|,
name|ipl
operator|.
name|isIn
argument_list|(
literal|"110.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify an existing file, but empty    * test for inclusion    * should be true as if the feature is turned off    */
annotation|@
name|Test
DECL|method|testWithEmptyList ()
specifier|public
name|void
name|testWithEmptyList
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|IPList
name|ipl
init|=
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"110.113.221.222 is in the list"
argument_list|,
name|ipl
operator|.
name|isIn
argument_list|(
literal|"110.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify an existing file, but ips in wrong format    * test for inclusion    * should be true as if the feature is turned off    */
annotation|@
name|Test
DECL|method|testForBadFIle ()
specifier|public
name|void
name|testForBadFIle
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.221.102/23"
block|}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expects Exception
block|}
block|}
comment|/**    * Add a bunch of subnets and IPSs to the file. Keep one entry wrong.    * The good entries will still be used.    * Check  for inclusion with good entries    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testWithAWrongEntry ()
specifier|public
name|void
name|testWithAWrongEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102/23"
block|,
literal|"10.221.204.1/23"
block|}
decl_stmt|;
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expects Exception
block|}
block|}
DECL|method|createFileWithEntries (String fileName, String[] ips)
specifier|public
specifier|static
name|void
name|createFileWithEntries
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
index|[]
name|ips
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|writeLines
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ips
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFile (String fileName)
specifier|public
specifier|static
name|void
name|removeFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

