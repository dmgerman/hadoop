begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Pipe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestingThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This tests timout out from SocketInputStream and  * SocketOutputStream using pipes.  *   * Normal read and write using these streams are tested by pretty much  * every DFS unit test.  */
end_comment

begin_class
DECL|class|TestSocketIOWithTimeout
specifier|public
class|class
name|TestSocketIOWithTimeout
block|{
DECL|field|LOG
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSocketIOWithTimeout
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
name|int
name|TIMEOUT
init|=
literal|1
operator|*
literal|1000
decl_stmt|;
DECL|field|TEST_STRING
specifier|private
specifier|static
name|String
name|TEST_STRING
init|=
literal|"1234567890"
decl_stmt|;
DECL|field|ctx
specifier|private
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|TestContext
argument_list|()
decl_stmt|;
DECL|method|doIO (InputStream in, OutputStream out, int expectedTimeout)
specifier|private
name|void
name|doIO
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|int
name|expectedTimeout
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Keep on writing or reading until we get SocketTimeoutException.      * It expects this exception to occur within 100 millis of TIMEOUT.      */
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
literal|4192
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|start
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|long
name|diff
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got SocketTimeoutException as expected after "
operator|+
name|diff
operator|+
literal|" millis : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|expectedTimeout
operator|-
name|diff
argument_list|)
operator|<=
name|TestNetUtils
operator|.
name|TIME_FUDGE_MILLIS
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketIOWithTimeout ()
specifier|public
name|void
name|testSocketIOWithTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first open pipe:
name|Pipe
name|pipe
init|=
name|Pipe
operator|.
name|open
argument_list|()
decl_stmt|;
name|Pipe
operator|.
name|SourceChannel
name|source
init|=
name|pipe
operator|.
name|source
argument_list|()
decl_stmt|;
name|Pipe
operator|.
name|SinkChannel
name|sink
init|=
name|pipe
operator|.
name|sink
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|in
init|=
operator|new
name|SocketInputStream
argument_list|(
name|source
argument_list|,
name|TIMEOUT
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|SocketOutputStream
argument_list|(
name|sink
argument_list|,
name|TIMEOUT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|writeBytes
init|=
name|TEST_STRING
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|readBytes
init|=
operator|new
name|byte
index|[
name|writeBytes
operator|.
name|length
index|]
decl_stmt|;
name|byte
name|byteWithHighBit
init|=
operator|(
name|byte
operator|)
literal|0x80
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|writeBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|byteWithHighBit
argument_list|)
expr_stmt|;
name|doIO
argument_list|(
literal|null
argument_list|,
name|out
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|(
name|readBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|writeBytes
argument_list|,
name|readBytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byteWithHighBit
operator|&
literal|0xff
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|doIO
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
comment|// Change timeout on the read side.
operator|(
operator|(
name|SocketInputStream
operator|)
name|in
operator|)
operator|.
name|setTimeout
argument_list|(
name|TIMEOUT
operator|*
literal|2
argument_list|)
expr_stmt|;
name|doIO
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|TIMEOUT
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|/*        * Verify that it handles interrupted threads properly.        * Use a large timeout and expect the thread to return quickly        * upon interruption.        */
operator|(
operator|(
name|SocketInputStream
operator|)
name|in
operator|)
operator|.
name|setTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TestingThread
name|thread
init|=
operator|new
name|TestingThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Did not fail with interrupt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ste
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expection while reading as expected : "
operator|+
name|ste
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
comment|// If the thread is interrupted before it calls read()
comment|// then it throws ClosedByInterruptException due to
comment|// some Java quirk. Waiting for it to call read()
comment|// gets it into select(), so we get the expected
comment|// InterruptedIOException.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//make sure the channels are still open
name|assertTrue
argument_list|(
name|source
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sink
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nevertheless, the output stream is closed, because
comment|// a partial write may have succeeded (see comment in
comment|// SocketOutputStream#write(byte[]), int, int)
comment|// This portion of the test cannot pass on Windows due to differences in
comment|// behavior of partial writes.  Windows appears to buffer large amounts of
comment|// written data and send it all atomically, thus making it impossible to
comment|// simulate a partial write scenario.  Attempts were made to switch the
comment|// test from using a pipe to a network socket and also to use larger and
comment|// larger buffers in doIO.  Nothing helped the situation though.
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"stream is closed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|sink
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// close sink and expect -1 from source.read()
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure close() closes the underlying channel.
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|source
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sink
operator|!=
literal|null
condition|)
block|{
name|sink
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

