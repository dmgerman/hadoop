begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.alias
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|alias
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestCredentialProviderFactory
specifier|public
class|class
name|TestCredentialProviderFactory
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCredentialProviderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|test
specifier|public
specifier|final
name|TestName
name|test
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|announce ()
specifier|public
name|void
name|announce
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test "
operator|+
name|test
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|chars
specifier|private
specifier|static
name|char
index|[]
name|chars
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|,
literal|'G'
block|,
literal|'H'
block|,
literal|'J'
block|,
literal|'K'
block|,
literal|'M'
block|,
literal|'N'
block|,
literal|'P'
block|,
literal|'Q'
block|,
literal|'R'
block|,
literal|'S'
block|,
literal|'T'
block|,
literal|'U'
block|,
literal|'V'
block|,
literal|'W'
block|,
literal|'X'
block|,
literal|'Y'
block|,
literal|'Z'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,}
decl_stmt|;
DECL|field|tmpDir
specifier|private
specifier|static
specifier|final
name|File
name|tmpDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"creds"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testFactory ()
specifier|public
name|void
name|testFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userUri
init|=
name|UserProvider
operator|.
name|SCHEME_NAME
operator|+
literal|":///"
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jksUri
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|userUri
operator|+
literal|","
operator|+
name|jksUri
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CredentialProvider
argument_list|>
name|providers
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|providers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserProvider
operator|.
name|class
argument_list|,
name|providers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JavaKeyStoreProvider
operator|.
name|class
argument_list|,
name|providers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userUri
argument_list|,
name|providers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jksUri
argument_list|,
name|providers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFactoryErrors ()
specifier|public
name|void
name|testFactoryErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"unknown:///"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|CredentialProvider
argument_list|>
name|providers
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should throw!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No CredentialProviderFactory for unknown:/// in "
operator|+
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUriErrors ()
specifier|public
name|void
name|testUriErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
literal|"unkn@own:/x/y"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|CredentialProvider
argument_list|>
name|providers
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should throw!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Bad configuration of "
operator|+
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
operator|+
literal|" at unkn@own:/x/y"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generatePassword (int length)
specifier|private
specifier|static
name|char
index|[]
name|generatePassword
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|chars
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|chars
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
return|;
block|}
DECL|method|checkSpecificProvider (Configuration conf, String ourUrl)
specifier|static
name|void
name|checkSpecificProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|ourUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|char
index|[]
name|passwd
init|=
name|generatePassword
argument_list|(
literal|16
argument_list|)
decl_stmt|;
comment|// ensure that we get nulls when the key isn't there
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"no-such-key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a new key
try|try
block|{
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"pass"
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// make sure we get back the right key
name|assertArrayEquals
argument_list|(
name|passwd
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"pass"
argument_list|)
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
comment|// try recreating pass
try|try
block|{
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"pass"
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should throw"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Credential pass already exists in "
operator|+
name|ourUrl
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|deleteCredentialEntry
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
try|try
block|{
name|provider
operator|.
name|deleteCredentialEntry
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should throw"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Credential pass does not exist in "
operator|+
name|ourUrl
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|char
index|[]
name|passTwo
init|=
operator|new
name|char
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
decl_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"pass"
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"pass2"
argument_list|,
name|passTwo
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|passTwo
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"pass2"
argument_list|)
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
comment|// write them to disk so that configuration.getPassword will find them
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// configuration.getPassword should get this from provider
name|assertArrayEquals
argument_list|(
name|passTwo
argument_list|,
name|conf
operator|.
name|getPassword
argument_list|(
literal|"pass2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// configuration.getPassword should get this from config
name|conf
operator|.
name|set
argument_list|(
literal|"onetwothree"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|passTwo
argument_list|,
name|conf
operator|.
name|getPassword
argument_list|(
literal|"onetwothree"
argument_list|)
argument_list|)
expr_stmt|;
comment|// configuration.getPassword should NOT get this from config since
comment|// we are disabling the fallback to clear text config
name|conf
operator|.
name|set
argument_list|(
name|CredentialProvider
operator|.
name|CLEAR_TEXT_FALLBACK
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|null
argument_list|,
name|conf
operator|.
name|getPassword
argument_list|(
literal|"onetwothree"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get a new instance of the provider to ensure it was saved correctly
name|provider
operator|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"pass2"
argument_list|)
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|passwd
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"pass"
argument_list|)
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|creds
init|=
name|provider
operator|.
name|getAliases
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Credentials should have been returned."
argument_list|,
name|creds
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned Credentials should have included pass."
argument_list|,
name|creds
operator|.
name|contains
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned Credentials should have included pass2."
argument_list|,
name|creds
operator|.
name|contains
argument_list|(
literal|"pass2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserProvider ()
specifier|public
name|void
name|testUserProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|UserProvider
operator|.
name|SCHEME_NAME
operator|+
literal|":///"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|checkSpecificProvider
argument_list|(
name|conf
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
comment|// see if the credentials are actually in the UGI
name|Credentials
name|credentials
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
name|credentials
operator|.
name|getSecretKey
argument_list|(
operator|new
name|Text
argument_list|(
literal|"pass2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJksProvider ()
specifier|public
name|void
name|testJksProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|JavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|checkSpecificProvider
argument_list|(
name|conf
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
name|ourUrl
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rw-------"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|+
literal|" should exist"
argument_list|,
name|file
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// check permission retention after explicit change
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|checkPermissionRetention
argument_list|(
name|conf
argument_list|,
name|ourUrl
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalJksProvider ()
specifier|public
name|void
name|testLocalJksProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|jksPath
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ourUrl
init|=
name|LocalJavaKeyStoreProvider
operator|.
name|SCHEME_NAME
operator|+
literal|"://file"
operator|+
name|jksPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"test.jks"
argument_list|)
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CredentialProviderFactory
operator|.
name|CREDENTIAL_PROVIDER_PATH
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|checkSpecificProvider
argument_list|(
name|conf
argument_list|,
name|ourUrl
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|ProviderUtils
operator|.
name|unnestUri
argument_list|(
operator|new
name|URI
argument_list|(
name|ourUrl
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected permissions: "
operator|+
name|s
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|s
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rw-------"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|+
literal|" should exist"
argument_list|,
name|file
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// check permission retention after explicit change
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|checkPermissionRetention
argument_list|(
name|conf
argument_list|,
name|ourUrl
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPermissionRetention (Configuration conf, String ourUrl, Path path)
specifier|public
name|void
name|checkPermissionRetention
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|ourUrl
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|CredentialProvider
name|provider
init|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// let's add a new credential and flush and check that permissions are still set to 777
name|char
index|[]
name|cred
init|=
operator|new
name|char
index|[
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cred
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|cred
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|i
expr_stmt|;
block|}
comment|// create a new key
try|try
block|{
name|provider
operator|.
name|createCredentialEntry
argument_list|(
literal|"key5"
argument_list|,
name|cred
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|provider
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// get a new instance of the provider to ensure it was saved correctly
name|provider
operator|=
name|CredentialProviderFactory
operator|.
name|getProviders
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|cred
argument_list|,
name|provider
operator|.
name|getCredentialEntry
argument_list|(
literal|"key5"
argument_list|)
operator|.
name|getCredential
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|s
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Permissions should have been retained from the preexisting "
operator|+
literal|"keystore."
argument_list|,
name|s
operator|.
name|getPermission
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"rwxrwxrwx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

