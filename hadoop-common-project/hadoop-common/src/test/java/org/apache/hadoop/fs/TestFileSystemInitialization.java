begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceConfigurationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
operator|.
name|intercept
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests related to filesystem creation and lifecycle.  */
end_comment

begin_class
DECL|class|TestFileSystemInitialization
specifier|public
class|class
name|TestFileSystemInitialization
block|{
comment|/**    * Check if FileSystem can be properly initialized if URLStreamHandlerFactory    * is registered.    */
annotation|@
name|Test
DECL|method|testInitializationWithRegisteredStreamFactory ()
specifier|public
name|void
name|testInitializationWithRegisteredStreamFactory
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URL
operator|.
name|setURLStreamHandlerFactory
argument_list|(
operator|new
name|FsUrlStreamHandlerFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|getFileSystemClass
argument_list|(
literal|"file"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ok
parameter_list|)
block|{
comment|// we might get an exception but this not related to infinite loop problem
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingLibraries ()
specifier|public
name|void
name|testMissingLibraries
parameter_list|()
block|{
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|fs
init|=
name|FileSystem
operator|.
name|getFileSystemClass
argument_list|(
literal|"s3a"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected an exception, got a filesystem: "
operator|+
name|fs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
decl||
name|ServiceConfigurationError
name|expected
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
DECL|method|testNewInstanceFailure ()
specifier|public
name|void
name|testNewInstanceFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|FailingFileSystem
operator|.
name|INITIALIZE
argument_list|,
parameter_list|()
lambda|->
name|FileSystem
operator|.
name|newInstance
argument_list|(
operator|new
name|URI
argument_list|(
literal|"failing://localhost"
argument_list|)
argument_list|,
name|FailingFileSystem
operator|.
name|failingConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|FailingFileSystem
operator|.
name|initCount
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"init count"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|FailingFileSystem
operator|.
name|closeCount
argument_list|)
operator|.
name|describedAs
argument_list|(
literal|"close count"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * An FS which will fail on both init and close, and update    * counters of invocations as it does so.    */
DECL|class|FailingFileSystem
specifier|public
specifier|static
class|class
name|FailingFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|INITIALIZE
specifier|public
specifier|static
specifier|final
name|String
name|INITIALIZE
init|=
literal|"initialize()"
decl_stmt|;
DECL|field|CLOSE
specifier|public
specifier|static
specifier|final
name|String
name|CLOSE
init|=
literal|"close()"
decl_stmt|;
DECL|field|initCount
specifier|private
specifier|static
name|int
name|initCount
decl_stmt|;
DECL|field|closeCount
specifier|private
specifier|static
name|int
name|closeCount
decl_stmt|;
DECL|method|failingConf ()
specifier|private
specifier|static
name|Configuration
name|failingConf
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.failing.impl"
argument_list|,
name|FailingFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (final URI name, final Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|URI
name|name
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|initCount
operator|++
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|INITIALIZE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeCount
operator|++
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|CLOSE
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|create (final Path f, final FsPermission permission, final boolean overwrite, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|append (final Path f, final int bufferSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|delete (final Path f, final boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path new_dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|new_dir
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (final Path f, final FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (final Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

