begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCredentials
specifier|public
class|class
name|TestCredentials
block|{
DECL|field|DEFAULT_HMAC_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HMAC_ALGORITHM
init|=
literal|"HmacSHA1"
decl_stmt|;
DECL|field|tmpDir
specifier|private
specifier|static
specifier|final
name|File
name|tmpDir
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"mapred"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|tmpDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|tmpDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testReadWriteStorage ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testReadWriteStorage
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// create tokenStorage Object
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
decl_stmt|;
name|Text
name|alias1
init|=
operator|new
name|Text
argument_list|(
literal|"sometoken1"
argument_list|)
decl_stmt|;
name|Text
name|alias2
init|=
operator|new
name|Text
argument_list|(
literal|"sometoken2"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Text
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|services
operator|.
name|add
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|services
operator|.
name|add
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|token1
operator|.
name|setService
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|token2
operator|.
name|setService
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|alias1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|alias2
argument_list|,
name|token2
argument_list|)
expr_stmt|;
comment|// create keys and put it in
specifier|final
name|KeyGenerator
name|kg
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
literal|"alias"
decl_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Key
name|key
init|=
name|kg
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|alias
operator|+
name|i
argument_list|)
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addSecretKey
argument_list|(
operator|new
name|Text
argument_list|(
name|alias
operator|+
name|i
argument_list|)
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create file to store
name|File
name|tmpFileName
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"tokenStorageTest"
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tmpFileName
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open and read it back
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpFileName
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|ts
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// get the tokens and compare the services
name|Map
argument_list|<
name|Text
argument_list|,
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokenMap
init|=
name|ts
operator|.
name|getTokenMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getTokenMap should return collection of size 2"
argument_list|,
literal|2
argument_list|,
name|tokenMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token for alias "
operator|+
name|alias1
operator|+
literal|" must be present"
argument_list|,
name|tokenMap
operator|.
name|containsKey
argument_list|(
name|alias1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token for alias "
operator|+
name|alias2
operator|+
literal|" must be present"
argument_list|,
name|tokenMap
operator|.
name|containsKey
argument_list|(
name|alias2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Token for service "
operator|+
name|service1
operator|+
literal|" must be present"
argument_list|,
name|service1
argument_list|,
name|tokenMap
operator|.
name|get
argument_list|(
name|alias1
argument_list|)
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Token for service "
operator|+
name|service2
operator|+
literal|" must be present"
argument_list|,
name|service2
argument_list|,
name|tokenMap
operator|.
name|get
argument_list|(
name|alias2
argument_list|)
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare secret keys
name|Map
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|secretKeyMap
init|=
name|ts
operator|.
name|getSecretKeyMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of keys in the Storage"
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|,
name|ts
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|key
init|=
name|secretKeyMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Secret key for alias "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" not found"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Keys don't match for alias "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tmpFileName
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicReadWriteProtoEmpty ()
specifier|public
name|void
name|testBasicReadWriteProtoEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testBasicReadWriteProtoEmpty"
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|writeCredentialsProto
argument_list|(
name|ts
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|Credentials
name|ts2
init|=
name|readCredentialsProto
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test empty tokens"
argument_list|,
literal|0
argument_list|,
name|ts2
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test empty keys"
argument_list|,
literal|0
argument_list|,
name|ts2
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicReadWriteProto ()
specifier|public
name|void
name|testBasicReadWriteProto
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testBasicReadWriteProto"
decl_stmt|;
name|Text
name|tok1
init|=
operator|new
name|Text
argument_list|(
literal|"token1"
argument_list|)
decl_stmt|;
name|Text
name|tok2
init|=
operator|new
name|Text
argument_list|(
literal|"token2"
argument_list|)
decl_stmt|;
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
decl_stmt|;
name|Credentials
name|ts
init|=
name|generateCredentials
argument_list|(
name|tok1
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|writeCredentialsProto
argument_list|(
name|ts
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|Credentials
name|ts2
init|=
name|readCredentialsProto
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok1
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicReadWriteStreamEmpty ()
specifier|public
name|void
name|testBasicReadWriteStreamEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testBasicReadWriteStreamEmpty"
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|writeCredentialsStream
argument_list|(
name|ts
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|Credentials
name|ts2
init|=
name|readCredentialsStream
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test empty tokens"
argument_list|,
literal|0
argument_list|,
name|ts2
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test empty keys"
argument_list|,
literal|0
argument_list|,
name|ts2
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicReadWriteStream ()
specifier|public
name|void
name|testBasicReadWriteStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testBasicReadWriteStream"
decl_stmt|;
name|Text
name|tok1
init|=
operator|new
name|Text
argument_list|(
literal|"token1"
argument_list|)
decl_stmt|;
name|Text
name|tok2
init|=
operator|new
name|Text
argument_list|(
literal|"token2"
argument_list|)
decl_stmt|;
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
decl_stmt|;
name|Credentials
name|ts
init|=
name|generateCredentials
argument_list|(
name|tok1
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|writeCredentialsStream
argument_list|(
name|ts
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|Credentials
name|ts2
init|=
name|readCredentialsStream
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok1
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Verify the suitability of read/writeProto for use with Writable interface.    * This test uses only empty credentials.    */
DECL|method|testWritablePropertiesEmpty ()
specifier|public
name|void
name|testWritablePropertiesEmpty
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testWritablePropertiesEmpty"
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Credentials
name|ts2
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|writeCredentialsProtos
argument_list|(
name|ts
argument_list|,
name|ts2
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Credentials
argument_list|>
name|clist
init|=
name|readCredentialsProtos
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test empty tokens 0"
argument_list|,
literal|0
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test empty keys 0"
argument_list|,
literal|0
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test empty tokens 1"
argument_list|,
literal|0
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test empty keys 1"
argument_list|,
literal|0
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Verify the suitability of read/writeProto for use with Writable interface.    */
DECL|method|testWritableProperties ()
specifier|public
name|void
name|testWritableProperties
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|String
name|testname
init|=
literal|"testWritableProperties"
decl_stmt|;
name|Text
name|tok1
init|=
operator|new
name|Text
argument_list|(
literal|"token1"
argument_list|)
decl_stmt|;
name|Text
name|tok2
init|=
operator|new
name|Text
argument_list|(
literal|"token2"
argument_list|)
decl_stmt|;
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
decl_stmt|;
name|Credentials
name|ts
init|=
name|generateCredentials
argument_list|(
name|tok1
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|Text
name|tok3
init|=
operator|new
name|Text
argument_list|(
literal|"token3"
argument_list|)
decl_stmt|;
name|Text
name|key2
init|=
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
decl_stmt|;
name|Credentials
name|ts2
init|=
name|generateCredentials
argument_list|(
name|tok1
argument_list|,
name|tok3
argument_list|,
name|key2
argument_list|)
decl_stmt|;
name|writeCredentialsProtos
argument_list|(
name|ts
argument_list|,
name|ts2
argument_list|,
name|testname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Credentials
argument_list|>
name|clist
init|=
name|readCredentialsProtos
argument_list|(
name|testname
argument_list|)
decl_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok1
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok2
argument_list|,
name|key1
argument_list|,
name|ts
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok1
argument_list|,
name|key2
argument_list|,
name|ts2
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertCredentials
argument_list|(
name|testname
argument_list|,
name|tok3
argument_list|,
name|key2
argument_list|,
name|ts2
argument_list|,
name|clist
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateCredentials (Text t1, Text t2, Text t3)
specifier|private
name|Credentials
name|generateCredentials
parameter_list|(
name|Text
name|t1
parameter_list|,
name|Text
name|t2
parameter_list|,
name|Text
name|t3
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|Text
name|kind
init|=
operator|new
name|Text
argument_list|(
literal|"TESTTOK"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|id1
init|=
block|{
literal|0x69
block|,
literal|0x64
block|,
literal|0x65
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x69
block|,
literal|0x66
block|,
literal|0x69
block|,
literal|0x65
block|,
literal|0x72
block|}
decl_stmt|;
name|byte
index|[]
name|pass1
init|=
block|{
literal|0x70
block|,
literal|0x61
block|,
literal|0x73
block|,
literal|0x73
block|,
literal|0x77
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x64
block|}
decl_stmt|;
name|byte
index|[]
name|id2
init|=
block|{
literal|0x68
block|,
literal|0x63
block|,
literal|0x64
block|,
literal|0x6d
block|,
literal|0x73
block|,
literal|0x68
block|,
literal|0x65
block|,
literal|0x68
block|,
literal|0x64
block|,
literal|0x71
block|}
decl_stmt|;
name|byte
index|[]
name|pass2
init|=
block|{
literal|0x6f
block|,
literal|0x60
block|,
literal|0x72
block|,
literal|0x72
block|,
literal|0x76
block|,
literal|0x6e
block|,
literal|0x71
block|,
literal|0x63
block|}
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|generateToken
argument_list|(
name|ts
argument_list|,
name|id1
argument_list|,
name|pass1
argument_list|,
name|kind
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|generateToken
argument_list|(
name|ts
argument_list|,
name|id2
argument_list|,
name|pass2
argument_list|,
name|kind
argument_list|,
name|t2
argument_list|)
expr_stmt|;
name|generateKey
argument_list|(
name|ts
argument_list|,
name|t3
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
DECL|method|assertCredentials (String tag, Text alias, Text keykey, Credentials a, Credentials b)
specifier|private
name|void
name|assertCredentials
parameter_list|(
name|String
name|tag
parameter_list|,
name|Text
name|alias
parameter_list|,
name|Text
name|keykey
parameter_list|,
name|Credentials
name|a
parameter_list|,
name|Credentials
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|tag
operator|+
literal|": test token count"
argument_list|,
name|a
operator|.
name|numberOfTokens
argument_list|()
argument_list|,
name|b
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tag
operator|+
literal|": test service"
argument_list|,
name|a
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getService
argument_list|()
argument_list|,
name|b
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tag
operator|+
literal|": test kind"
argument_list|,
name|a
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|b
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tag
operator|+
literal|": test password"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getPassword
argument_list|()
argument_list|,
name|b
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tag
operator|+
literal|": test identifier"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|b
operator|.
name|getToken
argument_list|(
name|alias
argument_list|)
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tag
operator|+
literal|": test number of keys"
argument_list|,
name|a
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|,
name|b
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tag
operator|+
literal|":test key values"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getSecretKey
argument_list|(
name|keykey
argument_list|)
argument_list|,
name|b
operator|.
name|getSecretKey
argument_list|(
name|keykey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCredentialsStream (Credentials creds, String filename)
specifier|private
name|void
name|writeCredentialsStream
parameter_list|(
name|Credentials
name|creds
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|creds
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
DECL|method|readCredentialsStream (String filename)
specifier|private
name|Credentials
name|readCredentialsStream
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|creds
operator|.
name|readTokenStorageStream
argument_list|(
name|dis
argument_list|)
expr_stmt|;
return|return
name|creds
return|;
block|}
DECL|method|writeCredentialsProto (Credentials creds, String filename)
specifier|private
name|void
name|writeCredentialsProto
parameter_list|(
name|Credentials
name|creds
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|creds
operator|.
name|writeProto
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
DECL|method|readCredentialsProto (String filename)
specifier|private
name|Credentials
name|readCredentialsProto
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|creds
operator|.
name|readProto
argument_list|(
name|dis
argument_list|)
expr_stmt|;
return|return
name|creds
return|;
block|}
DECL|method|writeCredentialsProtos (Credentials c1, Credentials c2, String filename)
specifier|private
name|void
name|writeCredentialsProtos
parameter_list|(
name|Credentials
name|c1
parameter_list|,
name|Credentials
name|c2
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|c1
operator|.
name|writeProto
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|c2
operator|.
name|writeProto
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
DECL|method|readCredentialsProtos (String filename)
specifier|private
name|List
argument_list|<
name|Credentials
argument_list|>
name|readCredentialsProtos
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|Credentials
name|c1
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Credentials
name|c2
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|c1
operator|.
name|readProto
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|c2
operator|.
name|readProto
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Credentials
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|Credentials
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|r
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|generateToken ( Credentials creds, byte[] ident, byte[] pass, Text kind, Text service)
specifier|private
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|generateToken
parameter_list|(
name|Credentials
name|creds
parameter_list|,
name|byte
index|[]
name|ident
parameter_list|,
name|byte
index|[]
name|pass
parameter_list|,
name|Text
name|kind
parameter_list|,
name|Text
name|service
parameter_list|)
block|{
name|Token
argument_list|<
name|T
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|(
name|ident
argument_list|,
name|pass
argument_list|,
name|kind
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|generateKey (Credentials creds, Text alias)
specifier|private
name|void
name|generateKey
parameter_list|(
name|Credentials
name|creds
parameter_list|,
name|Text
name|alias
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
specifier|final
name|KeyGenerator
name|kg
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
decl_stmt|;
name|Key
name|key
init|=
name|kg
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|alias
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|secret
specifier|static
name|Text
name|secret
index|[]
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"secret1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret3"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret4"
argument_list|)
block|}
decl_stmt|;
DECL|field|service
specifier|static
name|Text
name|service
index|[]
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service3"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service4"
argument_list|)
block|}
decl_stmt|;
DECL|field|token
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|token
index|[]
init|=
block|{
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|addAll ()
specifier|public
name|void
name|addAll
parameter_list|()
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|,
name|token
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
name|secret
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|credsToAdd
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// one duplicate with different value, one new
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|,
name|token
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|3
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
name|secret
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addAll
argument_list|(
name|credsToAdd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing token& secret should be overwritten
name|assertEquals
argument_list|(
name|token
index|[
literal|3
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|3
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-duplicate token& secret should be present
name|assertEquals
argument_list|(
name|token
index|[
literal|1
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// new token& secret should be added
name|assertEquals
argument_list|(
name|token
index|[
literal|2
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeAll ()
specifier|public
name|void
name|mergeAll
parameter_list|()
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|,
name|token
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
name|secret
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|credsToAdd
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// one duplicate with different value, one new
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|,
name|token
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|3
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
name|secret
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|mergeAll
argument_list|(
name|credsToAdd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing token& secret should not be overwritten
name|assertEquals
argument_list|(
name|token
index|[
literal|0
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-duplicate token& secret should be present
name|assertEquals
argument_list|(
name|token
index|[
literal|1
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// new token& secret should be added
name|assertEquals
argument_list|(
name|token
index|[
literal|2
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddTokensToUGI ()
specifier|public
name|void
name|testAddTokensToUGI
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
name|i
index|]
argument_list|,
name|token
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ugi
operator|.
name|addCredentials
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|creds
operator|=
name|ugi
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
name|token
index|[
name|i
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|service
operator|.
name|length
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

