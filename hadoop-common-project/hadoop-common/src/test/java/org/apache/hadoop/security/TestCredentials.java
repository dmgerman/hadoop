begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCredentials
specifier|public
class|class
name|TestCredentials
block|{
DECL|field|DEFAULT_HMAC_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HMAC_ALGORITHM
init|=
literal|"HmacSHA1"
decl_stmt|;
DECL|field|tmpDir
specifier|private
specifier|static
specifier|final
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"mapred"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|tmpDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|tmpDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testReadWriteStorage ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testReadWriteStorage
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// create tokenStorage Object
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|Text
name|service1
init|=
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
decl_stmt|;
name|Text
name|service2
init|=
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Text
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|services
operator|.
name|add
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|services
operator|.
name|add
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|token1
operator|.
name|setService
argument_list|(
name|service1
argument_list|)
expr_stmt|;
name|token2
operator|.
name|setService
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"sometoken1"
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"sometoken2"
argument_list|)
argument_list|,
name|token2
argument_list|)
expr_stmt|;
comment|// create keys and put it in
specifier|final
name|KeyGenerator
name|kg
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
literal|"alias"
decl_stmt|;
name|Map
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|Text
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Key
name|key
init|=
name|kg
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
name|alias
operator|+
name|i
argument_list|)
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addSecretKey
argument_list|(
operator|new
name|Text
argument_list|(
name|alias
operator|+
name|i
argument_list|)
argument_list|,
name|key
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create file to store
name|File
name|tmpFileName
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
literal|"tokenStorageTest"
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tmpFileName
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open and read it back
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpFileName
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|ts
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// get the tokens and compare the services
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|list
init|=
name|ts
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getAllTokens should return collection of size 2"
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|foundFirst
init|=
literal|false
decl_stmt|;
name|boolean
name|foundSecond
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|list
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|equals
argument_list|(
name|service1
argument_list|)
condition|)
block|{
name|foundFirst
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|equals
argument_list|(
name|service2
argument_list|)
condition|)
block|{
name|foundSecond
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Tokens for services service1 and service2 must be present"
argument_list|,
name|foundFirst
operator|&&
name|foundSecond
argument_list|)
expr_stmt|;
comment|// compare secret keys
name|int
name|mapLen
init|=
name|m
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of keys in the Storage"
argument_list|,
name|mapLen
argument_list|,
name|ts
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Text
name|a
range|:
name|m
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|kTS
init|=
name|ts
operator|.
name|getSecretKey
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|byte
index|[]
name|kLocal
init|=
name|m
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"keys don't match for "
operator|+
name|a
argument_list|,
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|kTS
argument_list|,
literal|0
argument_list|,
name|kTS
operator|.
name|length
argument_list|,
name|kLocal
argument_list|,
literal|0
argument_list|,
name|kLocal
operator|.
name|length
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|tmpFileName
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|field|secret
specifier|static
name|Text
name|secret
index|[]
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"secret1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret3"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"secret4"
argument_list|)
block|}
decl_stmt|;
DECL|field|service
specifier|static
name|Text
name|service
index|[]
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service3"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"service4"
argument_list|)
block|}
decl_stmt|;
DECL|field|token
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|token
index|[]
init|=
block|{
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|,
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|()
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|addAll ()
specifier|public
name|void
name|addAll
parameter_list|()
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|,
name|token
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
name|secret
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|credsToAdd
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// one duplicate with different value, one new
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|,
name|token
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|3
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
name|secret
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addAll
argument_list|(
name|credsToAdd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing token& secret should be overwritten
name|assertEquals
argument_list|(
name|token
index|[
literal|3
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|3
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-duplicate token& secret should be present
name|assertEquals
argument_list|(
name|token
index|[
literal|1
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// new token& secret should be added
name|assertEquals
argument_list|(
name|token
index|[
literal|2
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mergeAll ()
specifier|public
name|void
name|mergeAll
parameter_list|()
block|{
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|,
name|token
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
name|secret
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|credsToAdd
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// one duplicate with different value, one new
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|,
name|token
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|,
name|token
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
name|secret
index|[
literal|3
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|credsToAdd
operator|.
name|addSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
name|secret
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|creds
operator|.
name|mergeAll
argument_list|(
name|credsToAdd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|creds
operator|.
name|numberOfSecretKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// existing token& secret should not be overwritten
name|assertEquals
argument_list|(
name|token
index|[
literal|0
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// non-duplicate token& secret should be present
name|assertEquals
argument_list|(
name|token
index|[
literal|1
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// new token& secret should be added
name|assertEquals
argument_list|(
name|token
index|[
literal|2
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|,
operator|new
name|Text
argument_list|(
name|creds
operator|.
name|getSecretKey
argument_list|(
name|secret
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddTokensToUGI ()
specifier|public
name|void
name|testAddTokensToUGI
parameter_list|()
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"someone"
argument_list|)
decl_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|creds
operator|.
name|addToken
argument_list|(
name|service
index|[
name|i
index|]
argument_list|,
name|token
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|creds
operator|.
name|addTokensToUGI
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|creds
operator|=
name|ugi
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
name|token
index|[
name|i
index|]
argument_list|,
name|creds
operator|.
name|getToken
argument_list|(
name|service
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|service
operator|.
name|length
argument_list|,
name|creds
operator|.
name|numberOfTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

