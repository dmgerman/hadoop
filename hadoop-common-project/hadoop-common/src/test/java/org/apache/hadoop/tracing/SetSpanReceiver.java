begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tracing
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|HTraceConfiguration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Span receiver that puts all spans into a single set.  * This is useful for testing.  *<p>  * We're not using HTrace's POJOReceiver here so as that doesn't  * push all the metrics to a static place, and would make testing  * SpanReceiverHost harder.  */
end_comment

begin_class
DECL|class|SetSpanReceiver
specifier|public
class|class
name|SetSpanReceiver
extends|extends
name|SpanReceiver
block|{
DECL|method|SetSpanReceiver (HTraceConfiguration conf)
specifier|public
name|SetSpanReceiver
parameter_list|(
name|HTraceConfiguration
name|conf
parameter_list|)
block|{   }
DECL|method|receiveSpan (Span span)
specifier|public
name|void
name|receiveSpan
parameter_list|(
name|Span
name|span
parameter_list|)
block|{
name|SetHolder
operator|.
name|spans
operator|.
name|put
argument_list|(
name|span
operator|.
name|getSpanId
argument_list|()
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
DECL|method|clear ()
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|SetHolder
operator|.
name|spans
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
specifier|static
name|int
name|size
parameter_list|()
block|{
return|return
name|SetHolder
operator|.
name|spans
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getSpans ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Span
argument_list|>
name|getSpans
parameter_list|()
block|{
return|return
name|SetHolder
operator|.
name|spans
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getMap ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|SetHolder
operator|.
name|getMap
argument_list|()
return|;
block|}
DECL|class|SetHolder
specifier|public
specifier|static
class|class
name|SetHolder
block|{
DECL|field|spans
specifier|public
specifier|static
name|ConcurrentHashMap
argument_list|<
name|SpanId
argument_list|,
name|Span
argument_list|>
name|spans
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SpanId
argument_list|,
name|Span
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getMap ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|getMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Span
name|s
range|:
name|spans
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Span
argument_list|>
name|l
init|=
name|map
operator|.
name|get
argument_list|(
name|s
operator|.
name|getDescription
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|s
operator|.
name|getDescription
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
DECL|method|assertSpanNamesFound (final String[] expectedSpanNames)
specifier|public
specifier|static
name|void
name|assertSpanNamesFound
parameter_list|(
specifier|final
name|String
index|[]
name|expectedSpanNames
parameter_list|)
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Span
argument_list|>
argument_list|>
name|map
init|=
name|SetSpanReceiver
operator|.
name|SetHolder
operator|.
name|getMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|spanName
range|:
name|expectedSpanNames
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|spanName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"timed out to get expected spans: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"interrupted while waiting spans: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

