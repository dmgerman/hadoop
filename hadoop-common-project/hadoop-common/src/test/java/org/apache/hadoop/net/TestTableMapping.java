begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTableMapping
specifier|public
class|class
name|TestTableMapping
block|{
annotation|@
name|Test
DECL|method|testResolve ()
specifier|public
name|void
name|testResolve
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|mapFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".testResolve"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|"a.b.c /rack1\n"
operator|+
literal|"1.2.3.4\t/rack2\n"
argument_list|,
name|mapFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|mapFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
name|mapFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTableCaching ()
specifier|public
name|void
name|testTableCaching
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|mapFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".testTableCaching"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|"a.b.c /rack1\n"
operator|+
literal|"1.2.3.4\t/rack2\n"
argument_list|,
name|mapFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|mapFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
name|mapFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result1
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack1"
argument_list|,
name|result1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack2"
argument_list|,
name|result1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// unset the file, see if it gets read again
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
literal|"some bad value for a file"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result2
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoFile ()
specifier|public
name|void
name|testNoFile
parameter_list|()
block|{
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileDoesNotExist ()
specifier|public
name|void
name|testFileDoesNotExist
parameter_list|()
block|{
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
literal|"/this/file/does/not/exist"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClearingCachedMappings ()
specifier|public
name|void
name|testClearingCachedMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|mapFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".testClearingCachedMappings"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|"a.b.c /rack1\n"
operator|+
literal|"1.2.3.4\t/rack2\n"
argument_list|,
name|mapFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|mapFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
name|mapFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/rack2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|""
argument_list|,
name|mapFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|reloadCachedMappings
argument_list|()
expr_stmt|;
name|names
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|result
operator|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBadFile ()
specifier|public
name|void
name|testBadFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|mapFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".testBadFile"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|"bad contents"
argument_list|,
name|mapFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|mapFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|TableMapping
name|mapping
init|=
operator|new
name|TableMapping
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY
argument_list|,
name|mapFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|mapping
operator|.
name|resolve
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

