begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
operator|.
name|ActiveStandbyElectorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
operator|.
name|ActiveNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
operator|.
name|ZKAuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_class
DECL|class|TestActiveStandbyElector
specifier|public
class|class
name|TestActiveStandbyElector
block|{
DECL|field|mockZK
specifier|private
name|ZooKeeper
name|mockZK
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|mockApp
specifier|private
name|ActiveStandbyElectorCallback
name|mockApp
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
DECL|field|elector
specifier|private
name|ActiveStandbyElectorTester
name|elector
decl_stmt|;
DECL|class|ActiveStandbyElectorTester
class|class
name|ActiveStandbyElectorTester
extends|extends
name|ActiveStandbyElector
block|{
DECL|field|sleptFor
specifier|private
name|int
name|sleptFor
init|=
literal|0
decl_stmt|;
DECL|method|ActiveStandbyElectorTester (String hostPort, int timeout, String parent, List<ACL> acl, ActiveStandbyElectorCallback app)
name|ActiveStandbyElectorTester
parameter_list|(
name|String
name|hostPort
parameter_list|,
name|int
name|timeout
parameter_list|,
name|String
name|parent
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
name|ActiveStandbyElectorCallback
name|app
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|super
argument_list|(
name|hostPort
argument_list|,
name|timeout
argument_list|,
name|parent
argument_list|,
name|acl
argument_list|,
name|Collections
operator|.
expr|<
name|ZKAuthInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
name|app
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewZooKeeper ()
specifier|public
name|ZooKeeper
name|getNewZooKeeper
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
return|return
name|mockZK
return|;
block|}
annotation|@
name|Override
DECL|method|sleepFor (int ms)
specifier|protected
name|void
name|sleepFor
parameter_list|(
name|int
name|ms
parameter_list|)
block|{
comment|// don't sleep in unit tests! Instead, just record the amount of
comment|// time slept
name|LOG
operator|.
name|info
argument_list|(
literal|"Would have slept for "
operator|+
name|ms
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|sleptFor
operator|+=
name|ms
expr_stmt|;
block|}
block|}
DECL|field|ZK_PARENT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ZK_PARENT_NAME
init|=
literal|"/parent/node"
decl_stmt|;
DECL|field|ZK_LOCK_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ZK_LOCK_NAME
init|=
name|ZK_PARENT_NAME
operator|+
literal|"/"
operator|+
name|ActiveStandbyElector
operator|.
name|LOCK_FILENAME
decl_stmt|;
DECL|field|ZK_BREADCRUMB_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ZK_BREADCRUMB_NAME
init|=
name|ZK_PARENT_NAME
operator|+
literal|"/"
operator|+
name|ActiveStandbyElector
operator|.
name|BREADCRUMB_FILENAME
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|mockZK
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ZooKeeper
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockApp
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveStandbyElectorCallback
operator|.
name|class
argument_list|)
expr_stmt|;
name|elector
operator|=
operator|new
name|ActiveStandbyElectorTester
argument_list|(
literal|"hostPort"
argument_list|,
literal|1000
argument_list|,
name|ZK_PARENT_NAME
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|mockApp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up the mock ZK to return no info for a prior active in ZK.    */
DECL|method|mockNoPriorActive ()
specifier|private
name|void
name|mockNoPriorActive
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|KeeperException
operator|.
name|NoNodeException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockZK
argument_list|)
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_BREADCRUMB_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up the mock to return info for some prior active node in ZK./    */
DECL|method|mockPriorActive (byte[] data)
specifier|private
name|void
name|mockPriorActive
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|doReturn
argument_list|(
name|data
argument_list|)
operator|.
name|when
argument_list|(
name|mockZK
argument_list|)
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_BREADCRUMB_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that joinElection checks for null data    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testJoinElectionException ()
specifier|public
name|void
name|testJoinElectionException
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that joinElection tries to create ephemeral lock znode    */
annotation|@
name|Test
DECL|method|testJoinElection ()
specifier|public
name|void
name|testJoinElection
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that successful znode create result becomes active and monitoring is    * started    */
annotation|@
name|Test
DECL|method|testCreateNodeResultBecomeActive ()
specifier|public
name|void
name|testCreateNodeResultBecomeActive
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// monitor callback verifies the leader is ephemeral owner of lock but does
comment|// not call becomeActive since its already active
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
comment|// should not call neutral mode/standby/active
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
comment|// another joinElection not called.
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
comment|// no new monitor called
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that, when the callback fails to enter active state,    * the elector rejoins the election after sleeping for a short period.    */
annotation|@
name|Test
DECL|method|testFailToBecomeActive ()
specifier|public
name|void
name|testFailToBecomeActive
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|elector
operator|.
name|sleptFor
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"failed to become active"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockApp
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// Should have tried to become active
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
comment|// should re-join
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|sleptFor
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that, when the callback fails to enter active state, after    * a ZK disconnect (i.e from the StatCallback), that the elector rejoins    * the election after sleeping for a short period.    */
annotation|@
name|Test
DECL|method|testFailToBecomeActiveAfterZKDisconnect ()
specifier|public
name|void
name|testFailToBecomeActiveAfterZKDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|elector
operator|.
name|sleptFor
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
comment|// Fake failure to become active from within the stat callback
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"fail to become active"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockApp
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
comment|// should re-join
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|sleptFor
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that, if there is a record of a prior active node, the    * elector asks the application to fence it before becoming active.    */
annotation|@
name|Test
DECL|method|testFencesOldActive ()
specifier|public
name|void
name|testFencesOldActive
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|fakeOldActiveData
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|mockPriorActive
argument_list|(
name|fakeOldActiveData
argument_list|)
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// Application fences active.
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|fenceOldActive
argument_list|(
name|fakeOldActiveData
argument_list|)
expr_stmt|;
comment|// Updates breadcrumb node to new data
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_BREADCRUMB_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|data
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Then it becomes active itself
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuitElectionRemovesBreadcrumbNode ()
specifier|public
name|void
name|testQuitElectionRemovesBreadcrumbNode
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// Writes its own active info
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_BREADCRUMB_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|data
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|mockPriorActive
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Deletes its own active data
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_BREADCRUMB_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that znode create for existing node and no retry becomes standby and    * monitoring is started    */
annotation|@
name|Test
DECL|method|testCreateNodeResultBecomeStandby ()
specifier|public
name|void
name|testCreateNodeResultBecomeStandby
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that znode create error result in fatal error    */
annotation|@
name|Test
DECL|method|testCreateNodeResultError ()
specifier|public
name|void
name|testCreateNodeResultError
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|APIERROR
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Received create error from Zookeeper. code:APIERROR "
operator|+
literal|"for path "
operator|+
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that retry of network errors verifies master by session id and    * becomes active if they match. monitoring is started.    */
annotation|@
name|Test
DECL|method|testCreateNodeResultRetryBecomeActive ()
specifier|public
name|void
name|testCreateNodeResultRetryBecomeActive
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// 4 errors results in fatalError
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Received create error from Zookeeper. code:CONNECTIONLOSS "
operator|+
literal|"for path "
operator|+
name|ZK_LOCK_NAME
operator|+
literal|". "
operator|+
literal|"Not retrying further znode create connection errors."
argument_list|)
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// recreate connection via getNewZooKeeper
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that retry of network errors verifies active by session id and    * becomes standby if they dont match. monitoring is started.    */
annotation|@
name|Test
DECL|method|testCreateNodeResultRetryBecomeStandby ()
specifier|public
name|void
name|testCreateNodeResultRetryBecomeStandby
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that if create znode results in nodeexists and that znode is deleted    * before exists() watch is set then the return of the exists() method results    * in attempt to re-create the znode and become active    */
annotation|@
name|Test
DECL|method|testCreateNodeResultRetryNoNode ()
specifier|public
name|void
name|testCreateNodeResultRetryNoNode
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NONODE
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that more than 3 network error retries result fatalError    */
annotation|@
name|Test
DECL|method|testStatNodeRetry ()
specifier|public
name|void
name|testStatNodeRetry
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|CONNECTIONLOSS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Received stat error from Zookeeper. code:CONNECTIONLOSS. "
operator|+
literal|"Not retrying further znode monitoring connection errors."
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify error in exists() callback results in fatal error    */
annotation|@
name|Test
DECL|method|testStatNodeError ()
specifier|public
name|void
name|testStatNodeError
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|RUNTIMEINCONSISTENCY
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|(
name|Stat
operator|)
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Received stat error from Zookeeper. code:RUNTIMEINCONSISTENCY"
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify behavior of watcher.process callback with non-node event    */
annotation|@
name|Test
DECL|method|testProcessCallbackEventNone ()
specifier|public
name|void
name|testProcessCallbackEventNone
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|WatchedEvent
name|mockEvent
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|WatchedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|None
argument_list|)
expr_stmt|;
comment|// first SyncConnected should not do anything
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|SyncConnected
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|AsyncCallback
operator|.
name|StatCallback
operator|>
name|anyObject
argument_list|()
argument_list|,
name|Mockito
operator|.
expr|<
name|Object
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// disconnection should enter safe mode
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|Disconnected
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
comment|// re-connection should monitor master status
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|SyncConnected
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|SESSIONEXPIRED
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
comment|// session expired should enter safe mode and initiate re-election
comment|// re-election checked via checking re-creation of new zookeeper and
comment|// call to create lock znode
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|Expired
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
comment|// already in safe mode above. should not enter safe mode again
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
comment|// called getNewZooKeeper to create new session. first call was in
comment|// constructor
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// once in initial joinElection and one now
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
comment|// create znode success. become master and monitor
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// error event results in fatal error
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|AuthFailed
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Unexpected Zookeeper watch event state: AuthFailed"
argument_list|)
expr_stmt|;
comment|// only 1 state change callback is called at a time
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
block|}
comment|/**    * verify behavior of watcher.process with node event    */
annotation|@
name|Test
DECL|method|testProcessCallbackEventNode ()
specifier|public
name|void
name|testProcessCallbackEventNode
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// make the object go into the monitoring state
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|WatchedEvent
name|mockEvent
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|WatchedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// monitoring should be setup again after event is received
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDataChanged
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
comment|// monitoring should be setup again after event is received
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeChildrenChanged
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
comment|// lock node deletion when in standby mode should create znode again
comment|// successful znode creation enters active state and sets monitor
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
comment|// enterNeutralMode not called when app is standby and leader is lost
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
comment|// once in initial joinElection() and one now
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
comment|// lock node deletion in active mode should enter neutral mode and create
comment|// znode again successful znode creation enters active state and sets
comment|// monitor
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
comment|// another joinElection called
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|becomeActive
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
comment|// bad path name results in fatal error
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|notifyFatalError
argument_list|(
literal|"Unexpected watch error from Zookeeper"
argument_list|)
expr_stmt|;
comment|// fatal error means no new connection other than one from constructor
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// no new watches after fatal error
name|verifyExistCall
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyExistCall (int times)
specifier|private
name|void
name|verifyExistCall
parameter_list|(
name|int
name|times
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
name|times
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Watcher
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|same
argument_list|(
name|elector
argument_list|)
argument_list|,
name|Mockito
operator|.
name|same
argument_list|(
name|mockZK
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify becomeStandby is not called if already in standby    */
annotation|@
name|Test
DECL|method|testSuccessiveStandbyCalls ()
specifier|public
name|void
name|testSuccessiveStandbyCalls
parameter_list|()
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// make the object go into the monitoring standby state
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|stat
operator|.
name|setEphemeralOwner
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|stat
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|elector
operator|.
name|isMonitorLockNodePending
argument_list|()
argument_list|)
expr_stmt|;
name|WatchedEvent
name|mockEvent
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|WatchedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// notify node deletion
comment|// monitoring should be setup again after event is received
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
comment|// is standby. no need to notify anything now
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|enterNeutralMode
argument_list|()
expr_stmt|;
comment|// another joinElection called.
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
name|data
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
comment|// lost election
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
comment|// still standby. so no need to notify again
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
comment|// monitor is set again
name|verifyExistCall
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify quit election terminates connection and there are no new watches.    * next call to joinElection creates new connection and performs election    */
annotation|@
name|Test
DECL|method|testQuitElection ()
specifier|public
name|void
name|testQuitElection
parameter_list|()
throws|throws
name|Exception
block|{
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|elector
operator|.
name|quitElection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no watches added
name|verifyExistCall
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|elector
operator|.
name|joinElection
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// getNewZooKeeper called 2 times. once in constructor and once now
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processResult
argument_list|(
name|Code
operator|.
name|NODEEXISTS
operator|.
name|intValue
argument_list|()
argument_list|,
name|ZK_LOCK_NAME
argument_list|,
name|mockZK
argument_list|,
name|ZK_LOCK_NAME
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockApp
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|becomeStandby
argument_list|()
expr_stmt|;
name|verifyExistCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that receiveActiveData gives data when active exists, tells that    * active does not exist and reports error in getting active information    *     * @throws IOException    * @throws InterruptedException    * @throws KeeperException    * @throws ActiveNotFoundException    */
annotation|@
name|Test
DECL|method|testGetActiveData ()
specifier|public
name|void
name|testGetActiveData
parameter_list|()
throws|throws
name|ActiveNotFoundException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
comment|// get valid active data
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
argument_list|,
name|elector
operator|.
name|getActiveData
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// active does not exist
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|KeeperException
operator|.
name|NoNodeException
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|elector
operator|.
name|getActiveData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"ActiveNotFoundException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActiveNotFoundException
name|e
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// error getting active data rethrows keeperexception
try|try
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|mockZK
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|KeeperException
operator|.
name|AuthFailedException
argument_list|()
argument_list|)
expr_stmt|;
name|elector
operator|.
name|getActiveData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"KeeperException.AuthFailedException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|AuthFailedException
name|ke
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getData
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_LOCK_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|Stat
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that ensureBaseNode() recursively creates the specified dir    */
annotation|@
name|Test
DECL|method|testEnsureBaseNode ()
specifier|public
name|void
name|testEnsureBaseNode
parameter_list|()
throws|throws
name|Exception
block|{
name|elector
operator|.
name|ensureParentZNode
argument_list|()
expr_stmt|;
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|ZK_PARENT_NAME
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
if|if
condition|(
name|part
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|prefix
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|)
operator|.
name|create
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test for a bug encountered during development of HADOOP-8163:    * ensureBaseNode() should throw an exception if it has to retry    * more than 3 times to create any part of the path.    */
annotation|@
name|Test
DECL|method|testEnsureBaseNodeFails ()
specifier|public
name|void
name|testEnsureBaseNodeFails
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|KeeperException
operator|.
name|ConnectionLossException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockZK
argument_list|)
operator|.
name|create
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_PARENT_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|elector
operator|.
name|ensureParentZNode
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Did not throw!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|KeeperException
operator|.
name|ConnectionLossException
operator|)
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// Should have tried three times
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|ZK_PARENT_NAME
argument_list|)
argument_list|,
name|Mockito
operator|.
expr|<
name|byte
index|[]
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify the zookeeper connection establishment    */
annotation|@
name|Test
DECL|method|testWithoutZKServer ()
specifier|public
name|void
name|testWithoutZKServer
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|ActiveStandbyElector
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2000
argument_list|,
name|ZK_PARENT_NAME
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|Collections
operator|.
expr|<
name|ZKAuthInfo
operator|>
name|emptyList
argument_list|()
argument_list|,
name|mockApp
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Did not throw zookeeper connection loss exceptions!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"ConnectionLoss"
argument_list|,
name|ke
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * joinElection(..) should happen only after SERVICE_HEALTHY.    */
annotation|@
name|Test
DECL|method|testBecomeActiveBeforeServiceHealthy ()
specifier|public
name|void
name|testBecomeActiveBeforeServiceHealthy
parameter_list|()
throws|throws
name|Exception
block|{
name|mockNoPriorActive
argument_list|()
expr_stmt|;
name|WatchedEvent
name|mockEvent
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|WatchedEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|None
argument_list|)
expr_stmt|;
comment|// session expired should enter safe mode
comment|// But for first time, before the SERVICE_HEALTY i.e. appData is set,
comment|// should not enter the election.
name|Mockito
operator|.
name|when
argument_list|(
name|mockEvent
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Event
operator|.
name|KeeperState
operator|.
name|Expired
argument_list|)
expr_stmt|;
name|elector
operator|.
name|processWatchEvent
argument_list|(
name|mockZK
argument_list|,
name|mockEvent
argument_list|)
expr_stmt|;
comment|// joinElection should not be called.
name|Mockito
operator|.
name|verify
argument_list|(
name|mockZK
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|ZK_LOCK_NAME
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|,
name|elector
argument_list|,
name|mockZK
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

