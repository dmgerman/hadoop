begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosTicket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|KerberosSecurityTestcase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testcase for HADOOP-13433 that confirms that tgt will always be the first  * ticket after relogin.  */
end_comment

begin_class
DECL|class|TestRaceWhenRelogin
specifier|public
class|class
name|TestRaceWhenRelogin
extends|extends
name|KerberosSecurityTestcase
block|{
DECL|field|numThreads
specifier|private
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
DECL|field|clientPrincipal
specifier|private
name|String
name|clientPrincipal
init|=
literal|"client"
decl_stmt|;
DECL|field|serverProtocol
specifier|private
name|String
name|serverProtocol
init|=
literal|"server"
decl_stmt|;
DECL|field|serverProtocols
specifier|private
name|String
index|[]
name|serverProtocols
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
DECL|field|serverPrincipal
specifier|private
name|String
name|serverPrincipal
init|=
name|serverProtocol
operator|+
literal|"/"
operator|+
name|host
decl_stmt|;
DECL|field|serverPrincipals
specifier|private
name|String
index|[]
name|serverPrincipals
decl_stmt|;
DECL|field|keytabFile
specifier|private
name|File
name|keytabFile
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|props
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|keytabFile
operator|=
operator|new
name|File
argument_list|(
name|getWorkDir
argument_list|()
argument_list|,
literal|"keytab"
argument_list|)
expr_stmt|;
name|serverProtocols
operator|=
operator|new
name|String
index|[
name|numThreads
index|]
expr_stmt|;
name|serverPrincipals
operator|=
operator|new
name|String
index|[
name|numThreads
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|serverProtocols
index|[
name|i
index|]
operator|=
name|serverProtocol
operator|+
name|i
expr_stmt|;
name|serverPrincipals
index|[
name|i
index|]
operator|=
name|serverProtocols
index|[
name|i
index|]
operator|+
literal|"/"
operator|+
name|host
expr_stmt|;
block|}
name|String
index|[]
name|principals
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|serverPrincipals
argument_list|,
name|serverPrincipals
operator|.
name|length
operator|+
literal|2
argument_list|)
decl_stmt|;
name|principals
index|[
name|numThreads
index|]
operator|=
name|serverPrincipal
expr_stmt|;
name|principals
index|[
name|numThreads
operator|+
literal|1
index|]
operator|=
name|clientPrincipal
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|keytabFile
argument_list|,
name|principals
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setShouldRenewImmediatelyForTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|.
name|saslQop
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|clientPrincipal
argument_list|,
name|keytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|relogin (AtomicBoolean pass)
specifier|private
name|void
name|relogin
parameter_list|(
name|AtomicBoolean
name|pass
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ugi
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|KerberosTicket
name|tgt
init|=
name|ugi
operator|.
name|getSubject
argument_list|()
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|instanceof
name|KerberosTicket
argument_list|)
operator|.
name|map
argument_list|(
name|c
lambda|->
operator|(
name|KerberosTicket
operator|)
name|c
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tgt
operator|.
name|getServer
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"krbtgt"
argument_list|)
condition|)
block|{
name|pass
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
DECL|method|getServiceTicket (AtomicBoolean running, String serverProtocol)
specifier|private
name|void
name|getServiceTicket
parameter_list|(
name|AtomicBoolean
name|running
parameter_list|,
name|String
name|serverProtocol
parameter_list|)
block|{
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SaslClient
name|client
init|=
name|Sasl
operator|.
name|createSaslClient
argument_list|(
operator|new
name|String
index|[]
block|{
name|AuthMethod
operator|.
name|KERBEROS
operator|.
name|getMechanismName
argument_list|()
block|}
argument_list|,
name|clientPrincipal
argument_list|,
name|serverProtocol
argument_list|,
name|host
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|evaluateChallenge
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|client
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|AtomicBoolean
name|pass
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Thread
name|reloginThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|relogin
argument_list|(
name|pass
argument_list|)
argument_list|,
literal|"Relogin"
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|getServiceTicketThreads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|String
name|serverProtocol
init|=
name|serverProtocols
index|[
name|i
index|]
decl_stmt|;
name|getServiceTicketThreads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|getServiceTicket
argument_list|(
name|running
argument_list|,
name|serverProtocol
argument_list|)
argument_list|,
literal|"GetServiceTicket-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|getServiceTicketThread
range|:
name|getServiceTicketThreads
control|)
block|{
name|getServiceTicketThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|reloginThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|reloginThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|getServiceTicketThread
range|:
name|getServiceTicketThreads
control|)
block|{
name|getServiceTicketThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"tgt is not the first ticket after relogin"
argument_list|,
name|pass
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

