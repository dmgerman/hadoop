begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
operator|.
name|BadAclFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
operator|.
name|ZKAuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
DECL|class|TestZKUtil
specifier|public
class|class
name|TestZKUtil
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT_DIR
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
literal|"TestZKUtil"
argument_list|)
decl_stmt|;
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|File
name|TEST_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-file"
argument_list|)
decl_stmt|;
comment|/** A path which is expected not to exist */
DECL|field|BOGUS_FILE
specifier|private
specifier|static
specifier|final
name|String
name|BOGUS_FILE
init|=
operator|new
name|File
argument_list|(
literal|"/xxxx-this-does-not-exist"
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testEmptyACL ()
specifier|public
name|void
name|testEmptyACL
parameter_list|()
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullACL ()
specifier|public
name|void
name|testNullACL
parameter_list|()
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidACLs ()
specifier|public
name|void
name|testInvalidACLs
parameter_list|()
block|{
name|badAcl
argument_list|(
literal|"a:b"
argument_list|,
literal|"ACL 'a:b' not of expected form scheme:id:perm"
argument_list|)
expr_stmt|;
comment|// not enough parts
name|badAcl
argument_list|(
literal|"a"
argument_list|,
literal|"ACL 'a' not of expected form scheme:id:perm"
argument_list|)
expr_stmt|;
comment|// not enough parts
name|badAcl
argument_list|(
literal|"password:foo:rx"
argument_list|,
literal|"Invalid permission 'x' in permission string 'rx'"
argument_list|)
expr_stmt|;
block|}
DECL|method|badAcl (String acls, String expectedErr)
specifier|private
specifier|static
name|void
name|badAcl
parameter_list|(
name|String
name|acls
parameter_list|,
name|String
name|expectedErr
parameter_list|)
block|{
try|try
block|{
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to parse '"
operator|+
name|acls
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadAclFormatException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedErr
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRemoveSpecificPerms ()
specifier|public
name|void
name|testRemoveSpecificPerms
parameter_list|()
block|{
name|int
name|perms
init|=
name|Perms
operator|.
name|ALL
decl_stmt|;
name|int
name|remove
init|=
name|Perms
operator|.
name|CREATE
decl_stmt|;
name|int
name|newPerms
init|=
name|ZKUtil
operator|.
name|removeSpecificPerms
argument_list|(
name|perms
argument_list|,
name|remove
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Removal failed"
argument_list|,
literal|0
argument_list|,
name|newPerms
operator|&
name|Perms
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGoodACLs ()
specifier|public
name|void
name|testGoodACLs
parameter_list|()
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
literal|"sasl:hdfs/host1@MY.DOMAIN:cdrwa, sasl:hdfs/host2@MY.DOMAIN:ca"
argument_list|)
decl_stmt|;
name|ACL
name|acl0
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
operator||
name|Perms
operator|.
name|READ
operator||
name|Perms
operator|.
name|WRITE
operator||
name|Perms
operator|.
name|ADMIN
argument_list|,
name|acl0
operator|.
name|getPerms
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sasl"
argument_list|,
name|acl0
operator|.
name|getId
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs/host1@MY.DOMAIN"
argument_list|,
name|acl0
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ACL
name|acl1
init|=
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|ADMIN
argument_list|,
name|acl1
operator|.
name|getPerms
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sasl"
argument_list|,
name|acl1
operator|.
name|getId
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs/host2@MY.DOMAIN"
argument_list|,
name|acl1
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyAuth ()
specifier|public
name|void
name|testEmptyAuth
parameter_list|()
block|{
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseAuth
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullAuth ()
specifier|public
name|void
name|testNullAuth
parameter_list|()
block|{
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseAuth
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGoodAuths ()
specifier|public
name|void
name|testGoodAuths
parameter_list|()
block|{
name|List
argument_list|<
name|ZKAuthInfo
argument_list|>
name|result
init|=
name|ZKUtil
operator|.
name|parseAuth
argument_list|(
literal|"scheme:data,\n   scheme2:user:pass"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ZKAuthInfo
name|auth0
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"scheme"
argument_list|,
name|auth0
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data"
argument_list|,
operator|new
name|String
argument_list|(
name|auth0
operator|.
name|getAuth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ZKAuthInfo
name|auth1
init|=
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"scheme2"
argument_list|,
name|auth1
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user:pass"
argument_list|,
operator|new
name|String
argument_list|(
name|auth1
operator|.
name|getAuth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfIndirection ()
specifier|public
name|void
name|testConfIndirection
parameter_list|()
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_FILE
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
literal|"hello world"
argument_list|,
name|TEST_FILE
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
literal|"@"
operator|+
name|TEST_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
literal|"@"
operator|+
name|BOGUS_FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw for non-existent file reference"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|fnfe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|BOGUS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

