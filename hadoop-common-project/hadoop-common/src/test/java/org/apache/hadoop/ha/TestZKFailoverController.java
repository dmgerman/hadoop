begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthMonitor
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MultithreadedTestUtil
operator|.
name|TestingThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|test
operator|.
name|ClientBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_class
DECL|class|TestZKFailoverController
specifier|public
class|class
name|TestZKFailoverController
extends|extends
name|ClientBase
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|svc1
specifier|private
name|DummyHAService
name|svc1
decl_stmt|;
DECL|field|svc2
specifier|private
name|DummyHAService
name|svc2
decl_stmt|;
DECL|field|ctx
specifier|private
name|TestContext
name|ctx
decl_stmt|;
DECL|field|thr1
DECL|field|thr2
specifier|private
name|DummyZKFCThread
name|thr1
decl_stmt|,
name|thr2
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|ActiveStandbyElector
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// build.test.dir is used by zookeeper
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.test.dir"
argument_list|,
literal|"build"
argument_list|)
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupConfAndServices ()
specifier|public
name|void
name|setupConfAndServices
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ZKFailoverController
operator|.
name|ZK_QUORUM_KEY
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
comment|// Fast check interval so tests run faster
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_CHECK_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_CONNECT_RETRY_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_HM_SLEEP_AFTER_DISCONNECT_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|svc1
operator|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"svc1"
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
name|svc2
operator|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"svc2"
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up two services and their failover controllers. svc1 is started    * first, so that it enters ACTIVE state, and then svc2 is started,    * which enters STANDBY    */
DECL|method|setupFCs ()
specifier|private
name|void
name|setupFCs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Format the base dir, should succeed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|,
literal|"-formatZK"
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|()
expr_stmt|;
name|thr1
operator|=
operator|new
name|DummyZKFCThread
argument_list|(
name|ctx
argument_list|,
name|svc1
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|thr1
argument_list|)
expr_stmt|;
name|thr1
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for svc1 to enter active state"
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding svc2"
argument_list|)
expr_stmt|;
name|thr2
operator|=
operator|new
name|DummyZKFCThread
argument_list|(
name|ctx
argument_list|,
name|svc2
argument_list|)
expr_stmt|;
name|thr2
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc2
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
block|}
DECL|method|stopFCs ()
specifier|private
name|void
name|stopFCs
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|thr1
operator|!=
literal|null
condition|)
block|{
name|thr1
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|thr2
operator|!=
literal|null
condition|)
block|{
name|thr2
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that the various command lines for formatting the ZK directory    * function correctly.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFormatZK ()
specifier|public
name|void
name|testFormatZK
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run without formatting the base dir,
comment|// should barf
name|assertEquals
argument_list|(
name|ZKFailoverController
operator|.
name|ERR_CODE_NO_PARENT_ZNODE
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Format the base dir, should succeed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|,
literal|"-formatZK"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should fail to format if already formatted
name|assertEquals
argument_list|(
name|ZKFailoverController
operator|.
name|ERR_CODE_FORMAT_DENIED
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|,
literal|"-formatZK"
argument_list|,
literal|"-nonInteractive"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unless '-force' is on
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|,
literal|"-formatZK"
argument_list|,
literal|"-force"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the ZKFC won't run if fencing is not configured for the    * local service.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFencingMustBeConfigured ()
specifier|public
name|void
name|testFencingMustBeConfigured
parameter_list|()
throws|throws
name|Exception
block|{
name|svc1
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
name|svc1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|BadFencingConfigurationException
argument_list|(
literal|"no fencing"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
argument_list|)
operator|.
name|checkFencingConfigured
argument_list|()
expr_stmt|;
comment|// Format the base dir, should succeed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|,
literal|"-formatZK"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to run the actual FC, should fail without a fencer
name|assertEquals
argument_list|(
name|ZKFailoverController
operator|.
name|ERR_CODE_NO_FENCER
argument_list|,
name|runFC
argument_list|(
name|svc1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that, when the health monitor indicates bad health status,    * failover is triggered. Also ensures that graceful active->standby    * transition is used when possible, falling back to fencing when    * the graceful approach fails.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testAutoFailoverOnBadHealth ()
specifier|public
name|void
name|testAutoFailoverOnBadHealth
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupFCs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Faking svc1 unhealthy, should failover to svc2"
argument_list|)
expr_stmt|;
name|svc1
operator|.
name|isHealthy
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for svc1 to enter standby state"
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc1
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc2
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allowing svc1 to be healthy again, making svc2 unreachable "
operator|+
literal|"and fail to gracefully go to standby"
argument_list|)
expr_stmt|;
name|svc1
operator|.
name|isHealthy
operator|=
literal|true
expr_stmt|;
name|svc2
operator|.
name|actUnreachable
operator|=
literal|true
expr_stmt|;
comment|// Allow fencing to succeed
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|fencer
argument_list|)
operator|.
name|fence
argument_list|(
name|Mockito
operator|.
name|same
argument_list|(
name|svc2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should fail back to svc1 at this point
name|waitForHAState
argument_list|(
name|svc1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// and fence svc2
name|Mockito
operator|.
name|verify
argument_list|(
name|svc2
operator|.
name|fencer
argument_list|)
operator|.
name|fence
argument_list|(
name|Mockito
operator|.
name|same
argument_list|(
name|svc2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopFCs
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testAutoFailoverOnLostZKSession ()
specifier|public
name|void
name|testAutoFailoverOnLostZKSession
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupFCs
argument_list|()
expr_stmt|;
comment|// Expire svc1, it should fail over to svc2
name|expireAndVerifyFailover
argument_list|(
name|thr1
argument_list|,
name|thr2
argument_list|)
expr_stmt|;
comment|// Expire svc2, it should fail back to svc1
name|expireAndVerifyFailover
argument_list|(
name|thr2
argument_list|,
name|thr1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"======= Running test cases second time to test "
operator|+
literal|"re-establishment ========="
argument_list|)
expr_stmt|;
comment|// Expire svc1, it should fail over to svc2
name|expireAndVerifyFailover
argument_list|(
name|thr1
argument_list|,
name|thr2
argument_list|)
expr_stmt|;
comment|// Expire svc2, it should fail back to svc1
name|expireAndVerifyFailover
argument_list|(
name|thr2
argument_list|,
name|thr1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopFCs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|expireAndVerifyFailover (DummyZKFCThread fromThr, DummyZKFCThread toThr)
specifier|private
name|void
name|expireAndVerifyFailover
parameter_list|(
name|DummyZKFCThread
name|fromThr
parameter_list|,
name|DummyZKFCThread
name|toThr
parameter_list|)
throws|throws
name|Exception
block|{
name|DummyHAService
name|fromSvc
init|=
name|fromThr
operator|.
name|zkfc
operator|.
name|localTarget
decl_stmt|;
name|DummyHAService
name|toSvc
init|=
name|toThr
operator|.
name|zkfc
operator|.
name|localTarget
decl_stmt|;
name|fromThr
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|preventSessionReestablishmentForTests
argument_list|()
expr_stmt|;
try|try
block|{
name|expireActiveLockHolder
argument_list|(
name|fromSvc
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|fromSvc
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|toSvc
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fromThr
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|allowSessionReestablishmentForTests
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that, if the standby node is unhealthy, it doesn't try to become    * active    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testDontFailoverToUnhealthyNode ()
specifier|public
name|void
name|testDontFailoverToUnhealthyNode
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupFCs
argument_list|()
expr_stmt|;
comment|// Make svc2 unhealthy, and wait for its FC to notice the bad health.
name|svc2
operator|.
name|isHealthy
operator|=
literal|false
expr_stmt|;
name|waitForHealthState
argument_list|(
name|thr2
operator|.
name|zkfc
argument_list|,
name|HealthMonitor
operator|.
name|State
operator|.
name|SERVICE_UNHEALTHY
argument_list|)
expr_stmt|;
comment|// Expire svc1
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|preventSessionReestablishmentForTests
argument_list|()
expr_stmt|;
try|try
block|{
name|expireActiveLockHolder
argument_list|(
name|svc1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expired svc1's ZK session. Waiting a second to give svc2"
operator|+
literal|" a chance to take the lock, if it is ever going to."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Ensure that no one holds the lock.
name|waitForActiveLockHolder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Allowing svc1's elector to re-establish its connection"
argument_list|)
expr_stmt|;
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|allowSessionReestablishmentForTests
argument_list|()
expr_stmt|;
block|}
comment|// svc1 should get the lock again
name|waitForActiveLockHolder
argument_list|(
name|svc1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopFCs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that the ZKFC successfully quits the election when it fails to    * become active. This allows the old node to successfully fail back.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testBecomingActiveFails ()
specifier|public
name|void
name|testBecomingActiveFails
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupFCs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Making svc2 fail to become active"
argument_list|)
expr_stmt|;
name|svc2
operator|.
name|failToBecomeActive
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Faking svc1 unhealthy, should NOT successfully "
operator|+
literal|"failover to svc2"
argument_list|)
expr_stmt|;
name|svc1
operator|.
name|isHealthy
operator|=
literal|false
expr_stmt|;
name|waitForHealthState
argument_list|(
name|thr1
operator|.
name|zkfc
argument_list|,
name|State
operator|.
name|SERVICE_UNHEALTHY
argument_list|)
expr_stmt|;
name|waitForActiveLockHolder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc1
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc2
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Faking svc1 healthy again, should go back to svc1"
argument_list|)
expr_stmt|;
name|svc1
operator|.
name|isHealthy
operator|=
literal|true
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|waitForHAState
argument_list|(
name|svc2
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|waitForActiveLockHolder
argument_list|(
name|svc1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopFCs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that, when ZooKeeper fails, the system remains in its    * current state, without triggering any failovers, and without    * causing the active node to enter standby state.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testZooKeeperFailure ()
specifier|public
name|void
name|testZooKeeperFailure
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupFCs
argument_list|()
expr_stmt|;
comment|// Record initial ZK sessions
name|long
name|session1
init|=
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|getZKSessionIdForTests
argument_list|()
decl_stmt|;
name|long
name|session2
init|=
name|thr2
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|getZKSessionIdForTests
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"====== Stopping ZK server"
argument_list|)
expr_stmt|;
name|stopServer
argument_list|()
expr_stmt|;
name|waitForServerDown
argument_list|(
name|hostPort
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"====== Waiting for services to enter NEUTRAL mode"
argument_list|)
expr_stmt|;
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|NEUTRAL
argument_list|)
expr_stmt|;
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr2
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|NEUTRAL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"====== Checking that the services didn't change HA state"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"====== Restarting server"
argument_list|)
expr_stmt|;
name|startServer
argument_list|()
expr_stmt|;
name|waitForServerUp
argument_list|(
name|hostPort
argument_list|,
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
comment|// Nodes should go back to their original states, since they re-obtain
comment|// the same sessions.
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr2
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// Check HA states didn't change.
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForElectorState
argument_list|(
name|ctx
argument_list|,
name|thr2
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
argument_list|,
name|ActiveStandbyElector
operator|.
name|State
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// Check they re-used the same sessions and didn't spuriously reconnect
name|assertEquals
argument_list|(
name|session1
argument_list|,
name|thr1
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|getZKSessionIdForTests
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|session2
argument_list|,
name|thr2
operator|.
name|zkfc
operator|.
name|getElectorForTests
argument_list|()
operator|.
name|getZKSessionIdForTests
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopFCs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Expire the ZK session of the given service. This requires    * (and asserts) that the given service be the current active.    * @throws NoNodeException if no service holds the lock    */
DECL|method|expireActiveLockHolder (DummyHAService expectedActive)
specifier|private
name|void
name|expireActiveLockHolder
parameter_list|(
name|DummyHAService
name|expectedActive
parameter_list|)
throws|throws
name|NoNodeException
block|{
name|ZooKeeperServer
name|zks
init|=
name|getServer
argument_list|(
name|serverFactory
argument_list|)
decl_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zks
operator|.
name|getZKDatabase
argument_list|()
operator|.
name|getData
argument_list|(
name|ZKFailoverController
operator|.
name|ZK_PARENT_ZNODE_DEFAULT
operator|+
literal|"/"
operator|+
name|ActiveStandbyElector
operator|.
name|LOCK_FILENAME
argument_list|,
name|stat
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|expectedActive
operator|.
name|index
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|long
name|session
init|=
name|stat
operator|.
name|getEphemeralOwner
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expiring svc "
operator|+
name|expectedActive
operator|+
literal|"'s zookeeper session "
operator|+
name|session
argument_list|)
expr_stmt|;
name|zks
operator|.
name|closeSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for the given HA service to enter the given HA state.    */
DECL|method|waitForHAState (DummyHAService svc, HAServiceState state)
specifier|private
name|void
name|waitForHAState
parameter_list|(
name|DummyHAService
name|svc
parameter_list|,
name|HAServiceState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|svc
operator|.
name|state
operator|!=
name|state
condition|)
block|{
name|ctx
operator|.
name|checkException
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for the ZKFC to be notified of a change in health state.    */
DECL|method|waitForHealthState (DummyZKFC zkfc, State state)
specifier|private
name|void
name|waitForHealthState
parameter_list|(
name|DummyZKFC
name|zkfc
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|zkfc
operator|.
name|getLastHealthState
argument_list|()
operator|!=
name|state
condition|)
block|{
name|ctx
operator|.
name|checkException
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for the given HA service to become the active lock holder.    * If the passed svc is null, waits for there to be no active    * lock holder.    */
DECL|method|waitForActiveLockHolder (DummyHAService svc)
specifier|private
name|void
name|waitForActiveLockHolder
parameter_list|(
name|DummyHAService
name|svc
parameter_list|)
throws|throws
name|Exception
block|{
name|ZooKeeperServer
name|zks
init|=
name|getServer
argument_list|(
name|serverFactory
argument_list|)
decl_stmt|;
name|ActiveStandbyElectorTestUtil
operator|.
name|waitForActiveLockData
argument_list|(
name|ctx
argument_list|,
name|zks
argument_list|,
name|ZKFailoverController
operator|.
name|ZK_PARENT_ZNODE_DEFAULT
argument_list|,
operator|(
name|svc
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Ints
operator|.
name|toByteArray
argument_list|(
name|svc
operator|.
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runFC (DummyHAService target, String ... args)
specifier|private
name|int
name|runFC
parameter_list|(
name|DummyHAService
name|target
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|DummyZKFC
name|zkfc
init|=
operator|new
name|DummyZKFC
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|zkfc
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|zkfc
operator|.
name|run
argument_list|(
name|args
argument_list|)
return|;
block|}
comment|/**    * Test-thread which runs a ZK Failover Controller corresponding    * to a given dummy service.    */
DECL|class|DummyZKFCThread
specifier|private
class|class
name|DummyZKFCThread
extends|extends
name|TestingThread
block|{
DECL|field|zkfc
specifier|private
specifier|final
name|DummyZKFC
name|zkfc
decl_stmt|;
DECL|method|DummyZKFCThread (TestContext ctx, DummyHAService svc)
specifier|public
name|DummyZKFCThread
parameter_list|(
name|TestContext
name|ctx
parameter_list|,
name|DummyHAService
name|svc
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkfc
operator|=
operator|new
name|DummyZKFC
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|zkfc
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doWork ()
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|zkfc
operator|.
name|run
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Interrupted by main thread, that's OK.
block|}
block|}
block|}
DECL|class|DummyZKFC
specifier|private
specifier|static
class|class
name|DummyZKFC
extends|extends
name|ZKFailoverController
block|{
DECL|field|localTarget
specifier|private
specifier|final
name|DummyHAService
name|localTarget
decl_stmt|;
DECL|method|DummyZKFC (DummyHAService localTarget)
specifier|public
name|DummyZKFC
parameter_list|(
name|DummyHAService
name|localTarget
parameter_list|)
block|{
name|this
operator|.
name|localTarget
operator|=
name|localTarget
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|targetToData (HAServiceTarget target)
specifier|protected
name|byte
index|[]
name|targetToData
parameter_list|(
name|HAServiceTarget
name|target
parameter_list|)
block|{
return|return
name|Ints
operator|.
name|toByteArray
argument_list|(
operator|(
operator|(
name|DummyHAService
operator|)
name|target
operator|)
operator|.
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|dataToTarget (byte[] data)
specifier|protected
name|HAServiceTarget
name|dataToTarget
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|int
name|index
init|=
name|Ints
operator|.
name|fromByteArray
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|DummyHAService
operator|.
name|getInstance
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalTarget ()
specifier|protected
name|HAServiceTarget
name|getLocalTarget
parameter_list|()
block|{
return|return
name|localTarget
return|;
block|}
block|}
block|}
end_class

end_unit

