begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3native
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3native
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_class
DECL|class|TestJets3tNativeFileSystemStore
specifier|public
class|class
name|TestJets3tNativeFileSystemStore
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|store
specifier|private
name|Jets3tNativeFileSystemStore
name|store
decl_stmt|;
DECL|field|fs
specifier|private
name|NativeS3FileSystem
name|fs
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|store
operator|=
operator|new
name|Jets3tNativeFileSystemStore
argument_list|()
expr_stmt|;
name|fs
operator|=
operator|new
name|NativeS3FileSystem
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.s3n.multipart.uploads.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"fs.s3n.multipart.uploads.block.size"
argument_list|,
literal|64
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.fs.s3n.name"
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|store
operator|.
name|purge
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|BeforeClass
DECL|method|checkSettings ()
specifier|public
specifier|static
name|void
name|checkSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|assumeNotNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3n.awsAccessKeyId"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3n.awsSecretAccessKey"
argument_list|)
argument_list|)
expr_stmt|;
name|assumeNotNull
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"test.fs.s3n.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeRenameReadCompare (Path path, long len)
specifier|protected
name|void
name|writeRenameReadCompare
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// If len> fs.s3n.multipart.uploads.block.size,
comment|// we'll use a multipart upload copy
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|DigestOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
argument_list|,
name|digest
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|'Q'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Depending on if this file is over 5 GB or not,
comment|// rename will cause a multipart upload copy
name|Path
name|copyPath
init|=
name|path
operator|.
name|suffix
argument_list|(
literal|".copy"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|path
argument_list|,
name|copyPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Copy exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|copyPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Download file from S3 and compare the digest against the original
name|MessageDigest
name|digest2
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|DigestInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|copyPath
argument_list|)
argument_list|,
name|digest2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|copyLen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|copyLen
operator|++
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy length matches original"
argument_list|,
name|len
argument_list|,
name|copyLen
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Digests match"
argument_list|,
name|digest
operator|.
name|digest
argument_list|()
argument_list|,
name|digest2
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSmallUpload ()
specifier|public
name|void
name|testSmallUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// Regular upload, regular copy
name|writeRenameReadCompare
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/small"
argument_list|)
argument_list|,
literal|16384
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMediumUpload ()
specifier|public
name|void
name|testMediumUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// Multipart upload, regular copy
name|writeRenameReadCompare
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/medium"
argument_list|)
argument_list|,
literal|33554432
argument_list|)
expr_stmt|;
comment|// 100 MB
block|}
annotation|@
name|Test
DECL|method|testExtraLargeUpload ()
specifier|public
name|void
name|testExtraLargeUpload
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
comment|// Multipart upload, multipart copy
name|writeRenameReadCompare
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/test/xlarge"
argument_list|)
argument_list|,
literal|5368709121L
argument_list|)
expr_stmt|;
comment|// 5GB+1byte
block|}
block|}
end_class

end_unit

