begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|RpcKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test provokes partial writes in the server, which is   * serving multiple clients.  */
end_comment

begin_class
DECL|class|TestIPCServerResponder
specifier|public
class|class
name|TestIPCServerResponder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestIPCServerResponder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|BYTE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|BYTE_COUNT
init|=
literal|1024
decl_stmt|;
DECL|field|BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BYTES
init|=
operator|new
name|byte
index|[
name|BYTE_COUNT
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BYTE_COUNT
condition|;
name|i
operator|++
control|)
name|BYTES
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|i
operator|%
literal|26
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|call (Client client, Writable param, InetSocketAddress address)
specifier|static
name|Writable
name|call
parameter_list|(
name|Client
name|client
parameter_list|,
name|Writable
name|param
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ConnectionId
name|remoteId
init|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
name|address
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|call
argument_list|(
name|RpcKind
operator|.
name|RPC_BUILTIN
argument_list|,
name|param
argument_list|,
name|remoteId
argument_list|,
name|RPC
operator|.
name|RPC_SERVICE_CLASS_DEFAULT
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|TestServer
specifier|private
specifier|static
class|class
name|TestServer
extends|extends
name|Server
block|{
DECL|field|sleep
specifier|private
name|boolean
name|sleep
decl_stmt|;
DECL|method|TestServer (final int handlerCount, final boolean sleep)
specifier|public
name|TestServer
parameter_list|(
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|boolean
name|sleep
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|ADDRESS
argument_list|,
literal|0
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|handlerCount
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Set the buffer size to half of the maximum parameter/result size
comment|// to force the socket to block
name|this
operator|.
name|setSocketSendBufSize
argument_list|(
name|BYTE_COUNT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleep
operator|=
name|sleep
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call (RPC.RpcKind rpcKind, String protocol, Writable param, long receiveTime)
specifier|public
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|param
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sleep
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// sleep a bit
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
return|return
name|param
return|;
block|}
block|}
DECL|class|Caller
specifier|private
specifier|static
class|class
name|Caller
extends|extends
name|Thread
block|{
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|address
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
DECL|field|failed
specifier|private
name|boolean
name|failed
decl_stmt|;
DECL|method|Caller (final Client client, final InetSocketAddress address, final int count)
specifier|public
name|Caller
parameter_list|(
specifier|final
name|Client
name|client
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|int
name|byteSize
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|BYTE_COUNT
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|byteSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|BYTES
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|byteSize
argument_list|)
expr_stmt|;
name|Writable
name|param
init|=
operator|new
name|BytesWritable
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|call
argument_list|(
name|client
argument_list|,
name|param
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResponseBuffer ()
specifier|public
name|void
name|testResponseBuffer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Server
operator|.
name|INITIAL_RESP_BUF_SIZE
operator|=
literal|1
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_SERVER_RPC_MAX_RESPONSE_SIZE_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkServerResponder
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// reset configuration
block|}
annotation|@
name|Test
DECL|method|testServerResponder ()
specifier|public
name|void
name|testServerResponder
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|checkServerResponder
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
DECL|method|checkServerResponder (final int handlerCount, final boolean handlerSleep, final int clientCount, final int callerCount, final int callCount)
specifier|public
name|void
name|checkServerResponder
parameter_list|(
specifier|final
name|int
name|handlerCount
parameter_list|,
specifier|final
name|boolean
name|handlerSleep
parameter_list|,
specifier|final
name|int
name|clientCount
parameter_list|,
specifier|final
name|int
name|callerCount
parameter_list|,
specifier|final
name|int
name|callCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Server
name|server
init|=
operator|new
name|TestServer
argument_list|(
name|handlerCount
argument_list|,
name|handlerSleep
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Client
index|[]
name|clients
init|=
operator|new
name|Client
index|[
name|clientCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|Client
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|Caller
index|[]
name|callers
init|=
operator|new
name|Caller
index|[
name|callerCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|=
operator|new
name|Caller
argument_list|(
name|clients
index|[
name|i
operator|%
name|clientCount
index|]
argument_list|,
name|address
argument_list|,
name|callCount
argument_list|)
expr_stmt|;
name|callers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callerCount
condition|;
name|i
operator|++
control|)
block|{
name|callers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|callers
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clientCount
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test that IPC calls can be marked for a deferred response.
comment|// call 0: immediate
comment|// call 1: immediate
comment|// call 2: delayed with wait for 1 sendResponse, check if blocked
comment|// call 3: immediate, proves handler is freed
comment|// call 4: delayed with wait for 2 sendResponses, check if blocked
comment|// call 2: sendResponse, should return
comment|// call 4: sendResponse, should remain blocked
comment|// call 5: immediate, prove handler is still free
comment|// call 4: sendResponse, expect it to return
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDeferResponse ()
specifier|public
name|void
name|testDeferResponse
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Call
argument_list|>
name|deferredCall
init|=
operator|new
name|AtomicReference
argument_list|<
name|Call
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|Writable
name|wait0
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Writable
name|wait1
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Writable
name|wait2
init|=
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// use only 1 handler to prove it's freed after every call
name|Server
name|server
init|=
operator|new
name|Server
argument_list|(
name|ADDRESS
argument_list|,
literal|0
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Writable
name|call
parameter_list|(
name|RPC
operator|.
name|RpcKind
name|rpcKind
parameter_list|,
name|String
name|protocol
parameter_list|,
name|Writable
name|waitCount
parameter_list|,
name|long
name|receiveTime
parameter_list|)
throws|throws
name|IOException
block|{
name|Call
name|call
init|=
name|Server
operator|.
name|getCurCall
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|wait
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|waitCount
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|wait
operator|--
operator|>
literal|0
condition|)
block|{
name|call
operator|.
name|postponeResponse
argument_list|()
expr_stmt|;
name|deferredCall
operator|.
name|set
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IntWritable
argument_list|(
name|count
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
specifier|final
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Call
index|[]
name|waitingCalls
init|=
operator|new
name|Call
index|[
literal|2
index|]
decl_stmt|;
comment|// calls should return immediately, check the sequence number is
comment|// increasing
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|call
argument_list|(
name|client
argument_list|,
name|wait0
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|call
argument_list|(
name|client
argument_list|,
name|wait0
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// do a call in the background that will have a deferred response
specifier|final
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Integer
argument_list|>
name|future1
init|=
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|IntWritable
operator|)
name|TestIPCServerResponder
operator|.
name|call
argument_list|(
name|client
argument_list|,
name|wait1
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// make sure it blocked
try|try
block|{
name|future1
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"ipc shouldn't have responded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// ignore, expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|future1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|waitingCalls
index|[
literal|0
index|]
operator|=
name|deferredCall
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|waitingCalls
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// proves the handler isn't tied up, and that the prior sequence number
comment|// was consumed
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|call
argument_list|(
name|client
argument_list|,
name|wait0
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// another call with wait count of 2
name|Future
argument_list|<
name|Integer
argument_list|>
name|future2
init|=
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|IntWritable
operator|)
name|TestIPCServerResponder
operator|.
name|call
argument_list|(
name|client
argument_list|,
name|wait2
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// make sure it blocked
try|try
block|{
name|future2
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"ipc shouldn't have responded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// ignore, expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|future2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|waitingCalls
index|[
literal|1
index|]
operator|=
name|deferredCall
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|waitingCalls
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// the background calls should still be blocked
name|assertFalse
argument_list|(
name|future1
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|future2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// trigger responses
name|waitingCalls
index|[
literal|0
index|]
operator|.
name|sendResponse
argument_list|()
expr_stmt|;
name|waitingCalls
index|[
literal|1
index|]
operator|.
name|sendResponse
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|val
init|=
name|future1
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// make sure it's still blocked
try|try
block|{
name|future2
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"ipc shouldn't have responded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// ignore, expected
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|future2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// call should return immediately
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|call
argument_list|(
name|client
argument_list|,
name|wait0
argument_list|,
name|address
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// trigger last waiting call
name|waitingCalls
index|[
literal|1
index|]
operator|.
name|sendResponse
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|val
init|=
name|future2
operator|.
name|get
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

