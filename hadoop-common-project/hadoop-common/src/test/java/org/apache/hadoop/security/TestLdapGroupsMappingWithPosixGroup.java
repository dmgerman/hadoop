begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestLdapGroupsMappingWithPosixGroup
specifier|public
class|class
name|TestLdapGroupsMappingWithPosixGroup
extends|extends
name|TestLdapGroupsMappingBase
block|{
annotation|@
name|Before
DECL|method|setupMocks ()
specifier|public
name|void
name|setupMocks
parameter_list|()
throws|throws
name|NamingException
block|{
name|Attribute
name|uidNumberAttr
init|=
name|mock
argument_list|(
name|Attribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|Attribute
name|gidNumberAttr
init|=
name|mock
argument_list|(
name|Attribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|Attribute
name|uidAttr
init|=
name|mock
argument_list|(
name|Attribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|Attributes
name|attributes
init|=
name|getAttributes
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|uidAttr
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"some_user"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|uidNumberAttr
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"700"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|gidNumberAttr
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"600"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
name|eq
argument_list|(
literal|"uid"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uidAttr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
name|eq
argument_list|(
literal|"uidNumber"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uidNumberAttr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
name|eq
argument_list|(
literal|"gidNumber"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|gidNumberAttr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetGroups ()
specifier|public
name|void
name|testGetGroups
parameter_list|()
throws|throws
name|NamingException
block|{
comment|// The search functionality of the mock context is reused, so we will
comment|// return the user NamingEnumeration first, and then the group
name|when
argument_list|(
name|getContext
argument_list|()
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|contains
argument_list|(
literal|"posix"
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getUserNames
argument_list|()
argument_list|,
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
name|doTestGetGroups
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getTestGroups
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetGroups (List<String> expectedGroups, int searchTimes)
specifier|private
name|void
name|doTestGetGroups
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expectedGroups
parameter_list|,
name|int
name|searchTimes
parameter_list|)
throws|throws
name|NamingException
block|{
name|String
name|ldapUrl
init|=
literal|"ldap://test"
decl_stmt|;
name|Configuration
name|conf
init|=
name|getBaseConf
argument_list|(
name|ldapUrl
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|GROUP_SEARCH_FILTER_KEY
argument_list|,
literal|"(objectClass=posixGroup)(cn={0})"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|USER_SEARCH_FILTER_KEY
argument_list|,
literal|"(objectClass=posixAccount)"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|GROUP_MEMBERSHIP_ATTR_KEY
argument_list|,
literal|"memberUid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|POSIX_UID_ATTR_KEY
argument_list|,
literal|"uidNumber"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|POSIX_GID_ATTR_KEY
argument_list|,
literal|"gidNumber"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|GROUP_NAME_ATTR_KEY
argument_list|,
literal|"cn"
argument_list|)
expr_stmt|;
name|LdapGroupsMapping
name|groupsMapping
init|=
name|getGroupsMapping
argument_list|()
decl_stmt|;
name|groupsMapping
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Username is arbitrary, since the spy is mocked to respond the same,
comment|// regardless of input
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|groupsMapping
operator|.
name|getGroups
argument_list|(
literal|"some_user"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedGroups
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|groupsMapping
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|LdapGroupsMapping
operator|.
name|POSIX_UID_ATTR_KEY
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedGroups
argument_list|,
name|groups
argument_list|)
expr_stmt|;
comment|// We should have searched for a user, and then two groups
name|verify
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|times
argument_list|(
name|searchTimes
argument_list|)
argument_list|)
operator|.
name|search
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

