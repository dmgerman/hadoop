begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell.find
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|find
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAnd
specifier|public
class|class
name|TestAnd
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|// test all expressions passing
annotation|@
name|Test
DECL|method|testPass ()
specifier|public
name|void
name|testPass
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|PASS
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test the first expression failing
annotation|@
name|Test
DECL|method|testFailFirst ()
specifier|public
name|void
name|testFailFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test the second expression failing
annotation|@
name|Test
DECL|method|testFailSecond ()
specifier|public
name|void
name|testFailSecond
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test both expressions failing
annotation|@
name|Test
DECL|method|testFailBoth ()
specifier|public
name|void
name|testFailBoth
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test the first expression stopping
annotation|@
name|Test
DECL|method|testStopFirst ()
specifier|public
name|void
name|testStopFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|STOP
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test the second expression stopping
annotation|@
name|Test
DECL|method|testStopSecond ()
specifier|public
name|void
name|testStopSecond
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|PASS
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|STOP
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test first expression stopping and second failing
annotation|@
name|Test
DECL|method|testStopFail ()
specifier|public
name|void
name|testStopFail
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|PathData
name|pathData
init|=
name|mock
argument_list|(
name|PathData
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|first
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|second
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Result
operator|.
name|STOP
operator|.
name|combine
argument_list|(
name|Result
operator|.
name|FAIL
argument_list|)
argument_list|,
name|and
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|apply
argument_list|(
name|pathData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test setOptions is called on child
annotation|@
name|Test
DECL|method|testSetOptions ()
specifier|public
name|void
name|testSetOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|FindOptions
name|options
init|=
name|mock
argument_list|(
name|FindOptions
operator|.
name|class
argument_list|)
decl_stmt|;
name|and
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test prepare is called on child
annotation|@
name|Test
DECL|method|testPrepare ()
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|and
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
comment|// test finish is called on child
annotation|@
name|Test
DECL|method|testFinish ()
specifier|public
name|void
name|testFinish
parameter_list|()
throws|throws
name|IOException
block|{
name|And
name|and
init|=
operator|new
name|And
argument_list|()
decl_stmt|;
name|Expression
name|first
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|second
init|=
name|mock
argument_list|(
name|Expression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deque
argument_list|<
name|Expression
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|and
operator|.
name|addChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|and
operator|.
name|finish
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|first
argument_list|)
operator|.
name|finish
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|second
argument_list|)
operator|.
name|finish
argument_list|()
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|second
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

