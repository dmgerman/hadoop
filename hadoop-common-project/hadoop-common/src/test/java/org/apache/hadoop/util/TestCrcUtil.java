begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Unittests for CrcUtil.  */
end_comment

begin_class
DECL|class|TestCrcUtil
specifier|public
class|class
name|TestCrcUtil
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testComposeCrc32 ()
specifier|public
name|void
name|testComposeCrc32
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|512
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|511
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|32
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|32
operator|*
literal|1024
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComposeCrc32c ()
specifier|public
name|void
name|testComposeCrc32c
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|512
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|511
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|32
operator|*
literal|1024
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|32
operator|*
literal|1024
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComposeCrc32WithMonomial ()
specifier|public
name|void
name|testComposeCrc32WithMonomial
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|512
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|511
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|32
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|,
literal|32
operator|*
literal|1024
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComposeCrc32cWithMonomial ()
specifier|public
name|void
name|testComposeCrc32cWithMonomial
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|64
operator|*
literal|1024
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|512
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|511
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|32
operator|*
literal|1024
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestComposeCrc
argument_list|(
name|data
argument_list|,
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|,
literal|32
operator|*
literal|1024
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComposeCrc32ZeroLength ()
specifier|public
name|void
name|testComposeCrc32ZeroLength
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestComposeCrcZerolength
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComposeCrc32CZeroLength ()
specifier|public
name|void
name|testComposeCrc32CZeroLength
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestComposeCrcZerolength
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|CRC32C
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to compare a DataChecksum-computed end-to-end CRC against    * a piecewise-computed CRC that uses CrcUtil.compose on "chunk CRCs"    * corresponding to ever {@code chunkSize} bytes.    */
DECL|method|doTestComposeCrc ( byte[] data, DataChecksum.Type type, int chunkSize, boolean useMonomial)
specifier|private
specifier|static
name|void
name|doTestComposeCrc
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|boolean
name|useMonomial
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|crcPolynomial
init|=
name|DataChecksum
operator|.
name|getCrcPolynomialForType
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// Get full end-to-end CRC in a single shot first.
name|DataChecksum
name|checksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|type
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|fullCrc
init|=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Now compute CRCs of each chunk individually first, and compose them in a
comment|// second pass to compare to the end-to-end CRC.
name|int
name|compositeCrc
init|=
literal|0
decl_stmt|;
name|int
name|crcMonomial
init|=
name|useMonomial
condition|?
name|CrcUtil
operator|.
name|getMonomial
argument_list|(
name|chunkSize
argument_list|,
name|crcPolynomial
argument_list|)
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|+
name|chunkSize
operator|<=
name|data
operator|.
name|length
condition|;
name|offset
operator|+=
name|chunkSize
control|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|int
name|partialCrc
init|=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|useMonomial
condition|)
block|{
name|compositeCrc
operator|=
name|CrcUtil
operator|.
name|composeWithMonomial
argument_list|(
name|compositeCrc
argument_list|,
name|partialCrc
argument_list|,
name|crcMonomial
argument_list|,
name|crcPolynomial
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compositeCrc
operator|=
name|CrcUtil
operator|.
name|compose
argument_list|(
name|compositeCrc
argument_list|,
name|partialCrc
argument_list|,
name|chunkSize
argument_list|,
name|crcPolynomial
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There may be a final partial chunk smaller than chunkSize.
name|int
name|partialChunkSize
init|=
name|data
operator|.
name|length
operator|%
name|chunkSize
decl_stmt|;
if|if
condition|(
name|partialChunkSize
operator|>
literal|0
condition|)
block|{
name|checksum
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
operator|-
name|partialChunkSize
argument_list|,
name|partialChunkSize
argument_list|)
expr_stmt|;
name|int
name|partialCrc
init|=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|compositeCrc
operator|=
name|CrcUtil
operator|.
name|compose
argument_list|(
name|compositeCrc
argument_list|,
name|partialCrc
argument_list|,
name|partialChunkSize
argument_list|,
name|crcPolynomial
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Using CRC type '%s' with crcPolynomial '0x%08x' and chunkSize '%d'"
operator|+
literal|", expected '0x%08x', got '0x%08x'"
argument_list|,
name|type
argument_list|,
name|crcPolynomial
argument_list|,
name|chunkSize
argument_list|,
name|fullCrc
argument_list|,
name|compositeCrc
argument_list|)
argument_list|,
name|fullCrc
argument_list|,
name|compositeCrc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method for testing the behavior of composing a CRC with a    * zero-length second CRC.    */
DECL|method|doTestComposeCrcZerolength (DataChecksum.Type type)
specifier|private
specifier|static
name|void
name|doTestComposeCrcZerolength
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Without loss of generality, we can pick any integer as our fake crcA
comment|// even if we don't happen to know the preimage.
name|int
name|crcA
init|=
literal|0xCAFEBEEF
decl_stmt|;
name|int
name|crcPolynomial
init|=
name|DataChecksum
operator|.
name|getCrcPolynomialForType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|DataChecksum
name|checksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|type
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|crcB
init|=
operator|(
name|int
operator|)
name|checksum
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|crcA
argument_list|,
name|CrcUtil
operator|.
name|compose
argument_list|(
name|crcA
argument_list|,
name|crcB
argument_list|,
literal|0
argument_list|,
name|crcPolynomial
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|monomial
init|=
name|CrcUtil
operator|.
name|getMonomial
argument_list|(
literal|0
argument_list|,
name|crcPolynomial
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|crcA
argument_list|,
name|CrcUtil
operator|.
name|composeWithMonomial
argument_list|(
name|crcA
argument_list|,
name|crcB
argument_list|,
name|monomial
argument_list|,
name|crcPolynomial
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntSerialization ()
specifier|public
name|void
name|testIntSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|CrcUtil
operator|.
name|intToBytes
argument_list|(
literal|0xCAFEBEEF
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0xCAFEBEEF
argument_list|,
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|new
name|byte
index|[
literal|8
index|]
expr_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
literal|0xCAFEBEEF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xCAFEBEEF
argument_list|,
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|bytes
argument_list|,
literal|4
argument_list|,
literal|0xABCDABCD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0xABCDABCD
argument_list|,
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|bytes
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert big-endian format for general Java consistency.
name|assertEquals
argument_list|(
literal|0xBEEFABCD
argument_list|,
name|CrcUtil
operator|.
name|readInt
argument_list|(
name|bytes
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToSingleCrcStringBadLength ()
specifier|public
name|void
name|testToSingleCrcStringBadLength
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"length"
argument_list|,
parameter_list|()
lambda|->
name|CrcUtil
operator|.
name|toSingleCrcString
argument_list|(
operator|new
name|byte
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToSingleCrcString ()
specifier|public
name|void
name|testToSingleCrcString
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
name|CrcUtil
operator|.
name|intToBytes
argument_list|(
literal|0xcafebeef
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0xcafebeef"
argument_list|,
name|CrcUtil
operator|.
name|toSingleCrcString
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToMultiCrcStringBadLength ()
specifier|public
name|void
name|testToMultiCrcStringBadLength
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"length"
argument_list|,
parameter_list|()
lambda|->
name|CrcUtil
operator|.
name|toMultiCrcString
argument_list|(
operator|new
name|byte
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToMultiCrcStringMultipleElements ()
specifier|public
name|void
name|testToMultiCrcStringMultipleElements
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|12
index|]
decl_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|0xcafebeef
argument_list|)
expr_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|buf
argument_list|,
literal|4
argument_list|,
literal|0xababcccc
argument_list|)
expr_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|buf
argument_list|,
literal|8
argument_list|,
literal|0xddddefef
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[0xcafebeef, 0xababcccc, 0xddddefef]"
argument_list|,
name|CrcUtil
operator|.
name|toMultiCrcString
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToMultiCrcStringSingleElement ()
specifier|public
name|void
name|testToMultiCrcStringSingleElement
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|CrcUtil
operator|.
name|writeInt
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|0xcafebeef
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[0xcafebeef]"
argument_list|,
name|CrcUtil
operator|.
name|toMultiCrcString
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToMultiCrcStringNoElements ()
specifier|public
name|void
name|testToMultiCrcStringNoElements
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|CrcUtil
operator|.
name|toMultiCrcString
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

