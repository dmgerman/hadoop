begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  *  *   * Unit tests for testing the KosmosFileSystem API implementation.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.kfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
operator|.
name|KosmosFileSystem
import|;
end_import

begin_class
DECL|class|TestKosmosFileSystem
specifier|public
class|class
name|TestKosmosFileSystem
extends|extends
name|TestCase
block|{
DECL|field|kosmosFileSystem
name|KosmosFileSystem
name|kosmosFileSystem
decl_stmt|;
DECL|field|kfsEmul
name|KFSEmulationImpl
name|kfsEmul
decl_stmt|;
DECL|field|baseDir
name|Path
name|baseDir
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|kfsEmul
operator|=
operator|new
name|KFSEmulationImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|=
operator|new
name|KosmosFileSystem
argument_list|(
name|kfsEmul
argument_list|)
expr_stmt|;
comment|// a dummy URI; we are not connecting to any setup here
name|kosmosFileSystem
operator|.
name|initialize
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"kfs:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|baseDir
operator|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
literal|"/kfs-test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{      }
comment|// @Test
comment|// Check all the directory API's in KFS
DECL|method|testDirs ()
specifier|public
name|void
name|testDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1"
argument_list|)
decl_stmt|;
comment|// make the dir
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kosmosFileSystem
operator|.
name|isDirectory
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|setWorkingDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kosmosFileSystem
operator|.
name|isDirectory
argument_list|(
name|subDir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|isDirectory
argument_list|(
operator|new
name|Path
argument_list|(
literal|"test/dir.2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|p
init|=
name|kosmosFileSystem
operator|.
name|listStatus
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// @Test
comment|// Check the file API's
DECL|method|testFiles ()
specifier|public
name|void
name|testFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1/foo.1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1/foo.2"
argument_list|)
decl_stmt|;
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kosmosFileSystem
operator|.
name|isDirectory
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|setWorkingDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|s1
init|=
name|kosmosFileSystem
operator|.
name|create
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|4096
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|s2
init|=
name|kosmosFileSystem
operator|.
name|create
argument_list|(
name|file2
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|4096
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|s1
operator|.
name|close
argument_list|()
expr_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|p
init|=
name|kosmosFileSystem
operator|.
name|listStatus
argument_list|(
name|subDir1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|=
name|kosmosFileSystem
operator|.
name|listStatus
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|file2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|=
name|kosmosFileSystem
operator|.
name|listStatus
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// @Test
comment|// Check file/read write
DECL|method|testFileIO ()
specifier|public
name|void
name|testFileIO
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"dir.1/foo.1"
argument_list|)
decl_stmt|;
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kosmosFileSystem
operator|.
name|isDirectory
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|setWorkingDirectory
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|s1
init|=
name|kosmosFileSystem
operator|.
name|create
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|,
literal|4096
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|4096
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|bufsz
init|=
literal|4096
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|bufsz
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|16
argument_list|)
expr_stmt|;
comment|// write 4 bytes and read them back; read API should return a byte per call
name|s1
operator|.
name|write
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|s1
operator|.
name|write
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|s1
operator|.
name|write
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|s1
operator|.
name|write
argument_list|(
literal|32
argument_list|)
expr_stmt|;
comment|// write some data
name|s1
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// flush out the changes
name|s1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Read the stuff back and verify it is correct
name|FSDataInputStream
name|s2
init|=
name|kosmosFileSystem
operator|.
name|open
argument_list|(
name|file1
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|int
name|v
decl_stmt|;
name|long
name|nread
init|=
literal|0
decl_stmt|;
name|v
operator|=
name|s2
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|v
operator|=
name|s2
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|v
operator|=
name|s2
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|v
operator|=
name|s2
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s2
operator|.
name|available
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufsz
index|]
decl_stmt|;
name|s2
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
name|nread
operator|=
name|s2
operator|.
name|getPos
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s2
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// append some data to the file
try|try
block|{
name|s1
operator|=
name|kosmosFileSystem
operator|.
name|append
argument_list|(
name|file1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|data
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|%
literal|17
argument_list|)
expr_stmt|;
comment|// write the data
name|s1
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// flush out the changes
name|s1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read it back and validate
name|s2
operator|=
name|kosmosFileSystem
operator|.
name|open
argument_list|(
name|file1
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|s2
operator|.
name|seek
argument_list|(
name|nread
argument_list|)
expr_stmt|;
name|s2
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"append isn't supported by the underlying fs"
argument_list|)
expr_stmt|;
block|}
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|subDir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
name|subDir1
argument_list|)
argument_list|)
expr_stmt|;
name|kosmosFileSystem
operator|.
name|delete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|kosmosFileSystem
operator|.
name|exists
argument_list|(
name|baseDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

