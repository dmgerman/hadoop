begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.contract
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathHandleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|HandleOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathHandle
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|appendFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|createFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|dataset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|skip
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyRead
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
operator|.
name|verifyFileContents
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawPathHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test {@link PathHandle} operations and semantics.  * @see ContractOptions#SUPPORTS_FILE_REFERENCE  * @see ContractOptions#SUPPORTS_CONTENT_CHECK  * @see org.apache.hadoop.fs.FileSystem#getPathHandle(FileStatus, HandleOpt...)  * @see org.apache.hadoop.fs.FileSystem#open(PathHandle)  * @see org.apache.hadoop.fs.FileSystem#open(PathHandle, int)  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|AbstractContractPathHandleTest
specifier|public
specifier|abstract
class|class
name|AbstractContractPathHandleTest
extends|extends
name|AbstractFSContractTestBase
block|{
DECL|field|opts
specifier|private
specifier|final
name|HandleOpt
index|[]
name|opts
decl_stmt|;
DECL|field|serialized
specifier|private
specifier|final
name|boolean
name|serialized
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|B1
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|43
argument_list|,
literal|255
argument_list|)
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|B2
init|=
name|dataset
argument_list|(
name|TEST_FILE_LEN
argument_list|,
literal|44
argument_list|,
literal|255
argument_list|)
decl_stmt|;
comment|/**    * Create an instance of the test from {@link #params()}.    * @param testname Name of the set of options under test    * @param opts Set of {@link HandleOpt} params under test.    * @param serialized Serialize the handle before using it.    */
DECL|method|AbstractContractPathHandleTest (String testname, HandleOpt[] opts, boolean serialized)
specifier|public
name|AbstractContractPathHandleTest
parameter_list|(
name|String
name|testname
parameter_list|,
name|HandleOpt
index|[]
name|opts
parameter_list|,
name|boolean
name|serialized
parameter_list|)
block|{
name|this
operator|.
name|opts
operator|=
name|opts
expr_stmt|;
name|this
operator|.
name|serialized
operator|=
name|serialized
expr_stmt|;
block|}
comment|/**    * Run test against all combinations of default options. Also run each    * after converting the PathHandle to bytes and back.    * @return    */
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Test{0}"
argument_list|)
DECL|method|params ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Exact"
argument_list|,
name|HandleOpt
operator|.
name|exact
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Content"
argument_list|,
name|HandleOpt
operator|.
name|content
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Path"
argument_list|,
name|HandleOpt
operator|.
name|path
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Reference"
argument_list|,
name|HandleOpt
operator|.
name|reference
argument_list|()
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
parameter_list|(
name|x
parameter_list|)
lambda|->
name|Arrays
operator|.
name|asList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|b
parameter_list|)
lambda|->
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|y
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|x
argument_list|)
argument_list|;
name|y
operator|.
name|add
argument_list|(
name|b
argument_list|)
argument_list|;           return
name|y
argument_list|;
block|}
block|)
end_class

begin_expr_stmt
unit|)
operator|.
name|map
argument_list|(
name|ArrayList
operator|::
name|toArray
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testIdent ()
specifier|public
name|void
name|testIdent
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"verify simple open, no changes"
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|testFile
argument_list|(
name|B1
argument_list|)
decl_stmt|;
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|B1
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
init|)
block|{
name|verifyRead
argument_list|(
name|in
argument_list|,
name|B1
argument_list|,
literal|0
argument_list|,
name|TEST_FILE_LEN
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testChanged ()
specifier|public
name|void
name|testChanged
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"verify open(PathHandle, changed(*))"
argument_list|)
expr_stmt|;
name|assumeSupportsContentCheck
argument_list|()
expr_stmt|;
name|HandleOpt
operator|.
name|Data
name|data
init|=
name|HandleOpt
operator|.
name|getOpt
argument_list|(
name|HandleOpt
operator|.
name|Data
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|testFile
argument_list|(
name|B1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Temporary workaround while RawLocalFS supports only second precision
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// modify the file by appending data
name|appendFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|B2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b12
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|B1
argument_list|,
name|B1
operator|.
name|length
operator|+
name|B2
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|B2
argument_list|,
literal|0
argument_list|,
name|b12
argument_list|,
name|B1
operator|.
name|length
argument_list|,
name|B2
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify fd entity contains contents of file1 + appended bytes
name|verifyFileContents
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|b12
argument_list|)
expr_stmt|;
comment|// get the handle *after* the file has been modified
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to detect content change"
argument_list|,
name|data
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|in
argument_list|,
name|b12
argument_list|,
literal|0
argument_list|,
name|b12
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathHandleException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Failed to allow content change"
argument_list|,
name|data
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testMoved ()
specifier|public
name|void
name|testMoved
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"verify open(PathHandle, moved(*))"
argument_list|)
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|HandleOpt
operator|.
name|Location
name|loc
init|=
name|HandleOpt
operator|.
name|getOpt
argument_list|(
name|HandleOpt
operator|.
name|Location
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|testFile
argument_list|(
name|B1
argument_list|)
decl_stmt|;
comment|// rename the file after obtaining FileStatus
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|+
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// obtain handle to entity from #getFileStatus call
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to detect location change"
argument_list|,
name|loc
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|in
argument_list|,
name|B1
argument_list|,
literal|0
argument_list|,
name|B1
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathHandleException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Failed to allow location change"
argument_list|,
name|loc
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testChangedAndMoved ()
specifier|public
name|void
name|testChangedAndMoved
parameter_list|()
throws|throws
name|IOException
block|{
name|describe
argument_list|(
literal|"verify open(PathHandle, changed(*), moved(*))"
argument_list|)
expr_stmt|;
name|assumeSupportsFileReference
argument_list|()
expr_stmt|;
name|assumeSupportsContentCheck
argument_list|()
expr_stmt|;
name|HandleOpt
operator|.
name|Data
name|data
init|=
name|HandleOpt
operator|.
name|getOpt
argument_list|(
name|HandleOpt
operator|.
name|Data
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
name|HandleOpt
operator|.
name|Location
name|loc
init|=
name|HandleOpt
operator|.
name|getOpt
argument_list|(
name|HandleOpt
operator|.
name|Location
operator|.
name|class
argument_list|,
name|opts
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|testFile
argument_list|(
name|B1
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
name|path
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|rename
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|appendFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|dst
argument_list|,
name|B2
argument_list|)
expr_stmt|;
name|PathHandle
name|fd
init|=
name|getHandleOrSkip
argument_list|(
name|stat
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b12
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|B1
argument_list|,
name|B1
operator|.
name|length
operator|+
name|B2
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|B2
argument_list|,
literal|0
argument_list|,
name|b12
argument_list|,
name|B1
operator|.
name|length
argument_list|,
name|B2
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataInputStream
name|in
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|fd
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to detect location change"
argument_list|,
name|loc
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to detect content change"
argument_list|,
name|data
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRead
argument_list|(
name|in
argument_list|,
name|b12
argument_list|,
literal|0
argument_list|,
name|b12
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathHandleException
name|e
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|allowChange
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Failed to allow location change"
argument_list|,
name|loc
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loc
operator|.
name|allowChange
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Failed to allow content change"
argument_list|,
name|data
operator|.
name|allowChange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testFile (byte[] content)
specifier|private
name|FileStatus
name|testFile
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|path
argument_list|(
name|methodName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|createFile
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|getFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stat
return|;
block|}
end_function

begin_comment
comment|/**    * Skip a test case if the FS doesn't support file references.    * The feature is assumed to be unsupported unless stated otherwise.    */
end_comment

begin_function
DECL|method|assumeSupportsFileReference ()
specifier|protected
name|void
name|assumeSupportsFileReference
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getContract
argument_list|()
operator|.
name|isSupported
argument_list|(
name|SUPPORTS_FILE_REFERENCE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|skip
argument_list|(
literal|"Skipping as unsupported feature: "
operator|+
name|SUPPORTS_FILE_REFERENCE
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Skip a test case if the FS doesn't support content validation.    * The feature is assumed to be unsupported unless stated otherwise.    */
end_comment

begin_function
DECL|method|assumeSupportsContentCheck ()
specifier|protected
name|void
name|assumeSupportsContentCheck
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|getContract
argument_list|()
operator|.
name|isSupported
argument_list|(
name|SUPPORTS_CONTENT_CHECK
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|skip
argument_list|(
literal|"Skipping as unsupported feature: "
operator|+
name|SUPPORTS_CONTENT_CHECK
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Utility method to obtain a handle or skip the test if the set of opts    * are not supported.    * @param stat Target file status    * @return Handle to the indicated entity or skip the test    */
end_comment

begin_function
DECL|method|getHandleOrSkip (FileStatus stat)
specifier|protected
name|PathHandle
name|getHandleOrSkip
parameter_list|(
name|FileStatus
name|stat
parameter_list|)
block|{
try|try
block|{
name|PathHandle
name|fd
init|=
name|getFileSystem
argument_list|()
operator|.
name|getPathHandle
argument_list|(
name|stat
argument_list|,
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
name|serialized
condition|)
block|{
name|ByteBuffer
name|sb
init|=
name|fd
operator|.
name|bytes
argument_list|()
decl_stmt|;
return|return
operator|new
name|RawPathHandle
argument_list|(
name|sb
argument_list|)
return|;
block|}
return|return
name|fd
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|skip
argument_list|(
literal|"FileSystem does not support "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|opts
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// unreachable
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

