begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Writer
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|JavaSerializationComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSequenceFileAppend
specifier|public
class|class
name|TestSequenceFileAppend
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|ROOT_PATH
specifier|private
specifier|static
name|Path
name|ROOT_PATH
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"io.serializations"
argument_list|,
literal|"org.apache.hadoop.io.serializer.JavaSerialization"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.file.impl"
argument_list|,
literal|"org.apache.hadoop.fs.RawLocalFileSystem"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppend ()
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testseqappend.seq"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Text
name|key1
init|=
operator|new
name|Text
argument_list|(
literal|"Key1"
argument_list|)
decl_stmt|;
name|Text
name|value1
init|=
operator|new
name|Text
argument_list|(
literal|"Value1"
argument_list|)
decl_stmt|;
name|Text
name|value2
init|=
operator|new
name|Text
argument_list|(
literal|"Updated"
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Metadata
name|metadata
init|=
operator|new
name|SequenceFile
operator|.
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|key1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|Writer
operator|.
name|Option
name|metadataOption
init|=
name|Writer
operator|.
name|metadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|metadataOption
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|1L
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|2L
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify2Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|key1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|metadataOption
argument_list|)
expr_stmt|;
comment|// Verify the Meta data is not changed
name|assertEquals
argument_list|(
name|value1
argument_list|,
name|writer
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|3L
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|4L
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyAll4Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Verify the Meta data readable after append
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|conf
argument_list|,
name|Reader
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|value1
argument_list|,
name|reader
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify failure if the compression details are different
try|try
block|{
name|Option
name|wrongCompressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|RECORD
argument_list|,
operator|new
name|GzipCodec
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|wrongCompressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for compression options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|IAE
parameter_list|)
block|{
comment|// Expected exception. Ignore it
block|}
try|try
block|{
name|Option
name|wrongCompressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|wrongCompressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for compression options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|IAE
parameter_list|)
block|{
comment|// Expected exception. Ignore it
block|}
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppendRecordCompression ()
specifier|public
name|void
name|testAppendRecordCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|assumeInNativeProfile
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testseqappendblockcompr.seq"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Option
name|compressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|RECORD
argument_list|,
operator|new
name|GzipCodec
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|compressOption
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|1L
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|2L
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify2Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|compressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|3L
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|4L
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyAll4Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppendBlockCompression ()
specifier|public
name|void
name|testAppendBlockCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|assumeInNativeProfile
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testseqappendblockcompr.seq"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Option
name|compressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|new
name|GzipCodec
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|compressOption
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|1L
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|2L
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify2Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|compressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|3L
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|4L
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyAll4Values
argument_list|(
name|file
argument_list|)
expr_stmt|;
comment|// Verify failure if the compression details are different or not Provided
try|try
block|{
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for compression options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|IAE
parameter_list|)
block|{
comment|// Expected exception. Ignore it
block|}
comment|// Verify failure if the compression details are different
try|try
block|{
name|Option
name|wrongCompressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|RECORD
argument_list|,
operator|new
name|GzipCodec
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|wrongCompressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for compression options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|IAE
parameter_list|)
block|{
comment|// Expected exception. Ignore it
block|}
try|try
block|{
name|Option
name|wrongCompressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|new
name|DefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|wrongCompressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException for compression options"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|IAE
parameter_list|)
block|{
comment|// Expected exception. Ignore it
block|}
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppendSort ()
specifier|public
name|void
name|testAppendSort
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|assumeInNativeProfile
argument_list|()
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testseqappendSort.seq"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|sortedFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT_PATH
argument_list|,
literal|"testseqappendSort.seq.sort"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|sortedFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Sorter
name|sorter
init|=
operator|new
name|SequenceFile
operator|.
name|Sorter
argument_list|(
name|fs
argument_list|,
operator|new
name|JavaSerializationComparator
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Option
name|compressOption
init|=
name|Writer
operator|.
name|compression
argument_list|(
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|new
name|GzipCodec
argument_list|()
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|compressOption
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|2L
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|1L
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|keyClass
argument_list|(
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|valueClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|SequenceFile
operator|.
name|Writer
operator|.
name|appendIfExists
argument_list|(
literal|true
argument_list|)
argument_list|,
name|compressOption
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|4L
argument_list|,
literal|"four"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|3L
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Sort file after append
name|sorter
operator|.
name|sort
argument_list|(
name|file
argument_list|,
name|sortedFile
argument_list|)
expr_stmt|;
name|verifyAll4Values
argument_list|(
name|sortedFile
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|sortedFile
argument_list|)
expr_stmt|;
block|}
DECL|method|verify2Values (Path file)
specifier|private
name|void
name|verify2Values
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|conf
argument_list|,
name|Reader
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyAll4Values (Path file)
specifier|private
name|void
name|verifyAll4Values
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|conf
argument_list|,
name|Reader
operator|.
name|file
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"three"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"four"
argument_list|,
name|reader
operator|.
name|getCurrentValue
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|next
argument_list|(
operator|(
name|Object
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

