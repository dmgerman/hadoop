begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_comment
comment|/**  * The class to test {@link ReadWriteDiskValidator} and  * {@link ReadWriteDiskValidatorMetrics}.  */
end_comment

begin_class
DECL|class|TestReadWriteDiskValidator
specifier|public
class|class
name|TestReadWriteDiskValidator
block|{
DECL|field|ms
specifier|private
name|MetricsSystem
name|ms
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ms
operator|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadWriteDiskValidator ()
specifier|public
name|void
name|testReadWriteDiskValidator
parameter_list|()
throws|throws
name|DiskErrorException
throws|,
name|InterruptedException
block|{
name|int
name|count
init|=
literal|100
decl_stmt|;
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
decl_stmt|;
name|ReadWriteDiskValidator
name|readWriteDiskValidator
init|=
operator|(
name|ReadWriteDiskValidator
operator|)
name|DiskValidatorFactory
operator|.
name|getInstance
argument_list|(
name|ReadWriteDiskValidator
operator|.
name|NAME
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|readWriteDiskValidator
operator|.
name|checkStatus
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
name|ReadWriteDiskValidatorMetrics
name|metric
init|=
name|ReadWriteDiskValidatorMetrics
operator|.
name|getMetric
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The count number of estimator in MutableQuantiles"
operator|+
literal|"metrics of file read is not right"
argument_list|,
name|metric
operator|.
name|getFileReadQuantiles
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEstimator
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The count number of estimator in MutableQuantiles"
operator|+
literal|"metrics of file write is not right"
argument_list|,
name|metric
operator|.
name|getFileWriteQuantiles
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEstimator
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|MetricsSource
name|source
init|=
name|ms
operator|.
name|getSource
argument_list|(
name|ReadWriteDiskValidatorMetrics
operator|.
name|sourceName
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetricsCollectorImpl
name|collector
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|source
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetric
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"FailureCount"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetric
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"LastFailureTime"
argument_list|,
operator|(
name|long
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// All MutableQuantiles haven't rolled over yet because the minimum
comment|// interval is 1 hours, so we just test if these metrics exist.
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"WriteLatency3600sNumOps"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"WriteLatency3600s50thPercentileLatencyMicros"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"WriteLatency86400sNumOps"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"WriteLatency864000sNumOps"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"ReadLatency3600sNumOps"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"ReadLatency3600s50thPercentileLatencyMicros"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"ReadLatency86400sNumOps"
argument_list|)
expr_stmt|;
name|MetricsRecords
operator|.
name|assertMetricNotNull
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"ReadLatency864000sNumOps"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckFailures ()
specifier|public
name|void
name|testCheckFailures
parameter_list|()
throws|throws
name|Throwable
block|{
name|ReadWriteDiskValidator
name|readWriteDiskValidator
init|=
operator|(
name|ReadWriteDiskValidator
operator|)
name|DiskValidatorFactory
operator|.
name|getInstance
argument_list|(
name|ReadWriteDiskValidator
operator|.
name|NAME
argument_list|)
decl_stmt|;
comment|// create a temporary test directory under the system test directory
name|File
name|testDir
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|)
argument_list|,
literal|"test"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
name|Shell
operator|.
name|getSetPermissionCommand
argument_list|(
literal|"000"
argument_list|,
literal|false
argument_list|,
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|testDir
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|readWriteDiskValidator
operator|.
name|checkStatus
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Disk check should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Disk Check failed!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetricsSource
name|source
init|=
name|ms
operator|.
name|getSource
argument_list|(
name|ReadWriteDiskValidatorMetrics
operator|.
name|sourceName
argument_list|(
name|testDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MetricsCollectorImpl
name|collector
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|source
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|readWriteDiskValidator
operator|.
name|checkStatus
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Disk check should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiskErrorException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Disk Check failed!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify the first metrics record
name|MetricsRecords
operator|.
name|assertMetric
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"FailureCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Long
name|lastFailureTime1
init|=
operator|(
name|Long
operator|)
name|MetricsRecords
operator|.
name|getMetricValueByName
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"LastFailureTime"
argument_list|)
decl_stmt|;
comment|// verify the second metrics record
name|MetricsRecords
operator|.
name|assertMetric
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"FailureCount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|lastFailureTime2
init|=
operator|(
name|Long
operator|)
name|MetricsRecords
operator|.
name|getMetricValueByName
argument_list|(
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"LastFailureTime"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The first failure time should be less than the second one"
argument_list|,
name|lastFailureTime1
operator|<
name|lastFailureTime2
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

