begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|TestNodeFencer
operator|.
name|AlwaysSucceedFencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|TestNodeFencer
operator|.
name|AlwaysFailFencer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|TestNodeFencer
operator|.
name|setupFencer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|internal
operator|.
name|stubbing
operator|.
name|answers
operator|.
name|ThrowsException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFailoverController
specifier|public
class|class
name|TestFailoverController
block|{
DECL|field|svc1Addr
specifier|private
name|InetSocketAddress
name|svc1Addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"svc1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
DECL|field|svc2Addr
specifier|private
name|InetSocketAddress
name|svc2Addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"svc2"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
DECL|field|STATE_NOT_READY
name|HAServiceStatus
name|STATE_NOT_READY
init|=
operator|new
name|HAServiceStatus
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
operator|.
name|setNotReadyToBecomeActive
argument_list|(
literal|"injected not ready"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testFailoverAndFailback ()
specifier|public
name|void
name|testFailoverAndFailback
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TestNodeFencer
operator|.
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc2
argument_list|,
name|svc1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TestNodeFencer
operator|.
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverFromStandbyToStandby ()
specifier|public
name|void
name|testFailoverFromStandbyToStandby
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverFromActiveToActive ()
specifier|public
name|void
name|testFailoverFromActiveToActive
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't failover to an already active service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverWithoutPermission ()
specifier|public
name|void
name|testFailoverWithoutPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't failover when access is denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ffe
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Access denied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailoverToUnreadyService ()
specifier|public
name|void
name|testFailoverToUnreadyService
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|STATE_NOT_READY
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Can't failover to a service that's not ready"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
if|if
condition|(
operator|!
name|ffe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"injected not ready"
argument_list|)
condition|)
block|{
throw|throw
name|ffe
throw|;
block|}
block|}
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
comment|// Forcing it means we ignore readyToBecomeActive
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverToUnhealthyServiceFailsAndFailsback ()
specifier|public
name|void
name|testFailoverToUnhealthyServiceFailsAndFailsback
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|HealthCheckFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failover to unhealthy service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverFromFaultyServiceSucceeds ()
specifier|public
name|void
name|testFailoverFromFaultyServiceSucceeds
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Faulty active prevented failover"
argument_list|)
expr_stmt|;
block|}
comment|// svc1 still thinks it's active, that's OK, it was fenced
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|svc1
argument_list|,
name|AlwaysSucceedFencer
operator|.
name|fencedSvc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverFromFaultyServiceFencingFailure ()
specifier|public
name|void
name|testFailoverFromFaultyServiceFencingFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysFailFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysFailFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over even though fencing failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AlwaysFailFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|svc1
argument_list|,
name|AlwaysFailFencer
operator|.
name|fencedSvc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFencingFailureDuringFailover ()
specifier|public
name|void
name|testFencingFailureDuringFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysFailFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysFailFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over even though fencing requested and failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
comment|// If fencing was requested and it failed we don't try to make
comment|// svc2 active anyway, and we don't failback to svc1.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AlwaysFailFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|svc1
argument_list|,
name|AlwaysFailFencer
operator|.
name|fencedSvc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverFromNonExistantServiceWithFencer ()
specifier|public
name|void
name|testFailoverFromNonExistantServiceWithFencer
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
name|spy
argument_list|(
operator|new
name|DummyHAService
argument_list|(
literal|null
argument_list|,
name|svc1Addr
argument_list|)
argument_list|)
decl_stmt|;
comment|// Getting a proxy to a dead server will throw IOException on call,
comment|// not on creation of the proxy.
name|HAServiceProtocol
name|errorThrowingProxy
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HAServiceProtocol
operator|.
name|class
argument_list|,
name|Mockito
operator|.
name|withSettings
argument_list|()
operator|.
name|defaultAnswer
argument_list|(
operator|new
name|ThrowsException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Could not connect to host"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|extraInterfaces
argument_list|(
name|Closeable
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|errorThrowingProxy
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Non-existant active prevented failover"
argument_list|)
expr_stmt|;
block|}
comment|// Don't check svc1 because we can't reach it, but that's OK, it's been fenced.
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverToNonExistantServiceFails ()
specifier|public
name|void
name|testFailoverToNonExistantServiceFails
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
name|spy
argument_list|(
operator|new
name|DummyHAService
argument_list|(
literal|null
argument_list|,
name|svc2Addr
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Failed to connect"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
argument_list|)
operator|.
name|getProxy
argument_list|(
name|Mockito
operator|.
expr|<
name|Configuration
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over to a non-existant standby"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverToFaultyServiceFailsbackOK ()
specifier|public
name|void
name|testFailoverToFaultyServiceFailsbackOK
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
name|spy
argument_list|(
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failover to already active service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
comment|// svc1 went standby then back to active
name|verify
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWeDontFailbackIfActiveWasFenced ()
specifier|public
name|void
name|testWeDontFailbackIfActiveWasFenced
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over to service that won't transition to active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
comment|// We failed to failover and did not failback because we fenced
comment|// svc1 (we forced it), therefore svc1 and svc2 should be standby.
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWeFenceOnFailbackIfTransitionToActiveFails ()
specifier|public
name|void
name|testWeFenceOnFailbackIfTransitionToActiveFails
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over to service that won't transition to active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
comment|// We failed to failover. We did not fence svc1 because it cooperated
comment|// and we didn't force it, so we failed back to svc1 and fenced svc2.
comment|// Note svc2 still thinks it's active, that's OK, we fenced it.
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AlwaysSucceedFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|svc2
argument_list|,
name|AlwaysSucceedFencer
operator|.
name|fencedSvc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureToFenceOnFailbackFailsTheFailback ()
specifier|public
name|void
name|testFailureToFenceOnFailbackFailsTheFailback
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysFailFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AlwaysFailFencer
operator|.
name|fenceCalled
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed over to service that won't transition to active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
comment|// We did not fence svc1 because it cooperated and we didn't force it,
comment|// we failed to failover so we fenced svc2, we failed to fence svc2
comment|// so we did not failback to svc1, ie it's still standby.
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|AlwaysFailFencer
operator|.
name|fenceCalled
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|svc2
argument_list|,
name|AlwaysFailFencer
operator|.
name|fencedSvc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailbackToFaultyServiceFails ()
specifier|public
name|void
name|testFailbackToFaultyServiceFails
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyHAService
name|svc1
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|svc1Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc1
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|DummyHAService
name|svc2
init|=
operator|new
name|DummyHAService
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2Addr
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|svc2
operator|.
name|proxy
argument_list|)
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
name|svc1
operator|.
name|fencer
operator|=
name|svc2
operator|.
name|fencer
operator|=
name|setupFencer
argument_list|(
name|AlwaysSucceedFencer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|FailoverController
operator|.
name|failover
argument_list|(
name|svc1
argument_list|,
name|svc2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failover to already active service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailoverFailedException
name|ffe
parameter_list|)
block|{
comment|// Expected
block|}
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc1
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|svc2
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

