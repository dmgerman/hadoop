begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_CTX_FACTORY_CLASS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_CTX_FACTORY_CLASS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|LdapGroupsMapping
operator|.
name|LDAP_URL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|ldap
operator|.
name|InitialLdapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|spi
operator|.
name|InitialContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_class
DECL|class|TestLdapGroupsMappingBase
specifier|public
class|class
name|TestLdapGroupsMappingBase
block|{
annotation|@
name|Mock
DECL|field|context
specifier|private
name|DirContext
name|context
decl_stmt|;
annotation|@
name|Mock
DECL|field|userNames
specifier|private
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|userNames
decl_stmt|;
annotation|@
name|Mock
DECL|field|groupNames
specifier|private
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|groupNames
decl_stmt|;
annotation|@
name|Mock
DECL|field|parentGroupNames
specifier|private
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|parentGroupNames
decl_stmt|;
annotation|@
name|Mock
DECL|field|userSearchResult
specifier|private
name|SearchResult
name|userSearchResult
decl_stmt|;
annotation|@
name|Mock
DECL|field|attributes
specifier|private
name|Attributes
name|attributes
decl_stmt|;
annotation|@
name|Spy
DECL|field|groupsMapping
specifier|private
name|LdapGroupsMapping
name|groupsMapping
init|=
operator|new
name|LdapGroupsMapping
argument_list|()
decl_stmt|;
DECL|field|testGroups
specifier|private
name|String
index|[]
name|testGroups
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
decl_stmt|;
DECL|field|testParentGroups
specifier|private
name|String
index|[]
name|testParentGroups
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|,
literal|"group1_1"
block|}
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMocksBase ()
specifier|public
name|void
name|setupMocksBase
parameter_list|()
throws|throws
name|NamingException
block|{
name|DummyLdapCtxFactory
operator|.
name|reset
argument_list|()
expr_stmt|;
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|DirContext
name|ctx
init|=
name|getContext
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ctx
operator|.
name|search
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|SearchControls
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userNames
argument_list|)
expr_stmt|;
comment|// We only ever call hasMoreElements once for the user NamingEnum, so
comment|// we can just have one return value
name|when
argument_list|(
name|userNames
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SearchResult
name|groupSearchResult
init|=
name|mock
argument_list|(
name|SearchResult
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We're going to have to define the loop here. We want two iterations,
comment|// to get both the groups
name|when
argument_list|(
name|groupNames
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|groupNames
operator|.
name|nextElement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|groupSearchResult
argument_list|)
expr_stmt|;
comment|// Define the attribute for the name of the first group
name|Attribute
name|group1Attr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|group1Attr
operator|.
name|add
argument_list|(
name|testGroups
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Attributes
name|group1Attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|group1Attrs
operator|.
name|put
argument_list|(
name|group1Attr
argument_list|)
expr_stmt|;
comment|// Define the attribute for the name of the second group
name|Attribute
name|group2Attr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|group2Attr
operator|.
name|add
argument_list|(
name|testGroups
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Attributes
name|group2Attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|group2Attrs
operator|.
name|put
argument_list|(
name|group2Attr
argument_list|)
expr_stmt|;
comment|// This search result gets reused, so return group1, then group2
name|when
argument_list|(
name|groupSearchResult
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|group1Attrs
argument_list|,
name|group2Attrs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|getUserNames
argument_list|()
operator|.
name|nextElement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getUserSearchResult
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|getUserSearchResult
argument_list|()
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Define results for groups 1 level up
name|SearchResult
name|parentGroupResult
init|=
name|mock
argument_list|(
name|SearchResult
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// only one parent group
name|when
argument_list|(
name|parentGroupNames
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parentGroupNames
operator|.
name|nextElement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentGroupResult
argument_list|)
expr_stmt|;
comment|// Define the attribute for the parent group
name|Attribute
name|parentGroup1Attr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|parentGroup1Attr
operator|.
name|add
argument_list|(
name|testParentGroups
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Attributes
name|parentGroup1Attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|parentGroup1Attrs
operator|.
name|put
argument_list|(
name|parentGroup1Attr
argument_list|)
expr_stmt|;
comment|// attach the attributes to the result
name|when
argument_list|(
name|parentGroupResult
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentGroup1Attrs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parentGroupResult
operator|.
name|getNameInNamespace
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"CN=some_group,DC=test,DC=com"
argument_list|)
expr_stmt|;
block|}
DECL|method|getBaseConf ()
specifier|protected
name|Configuration
name|getBaseConf
parameter_list|()
block|{
return|return
name|getBaseConf
argument_list|(
literal|"ldap://test"
argument_list|)
return|;
block|}
DECL|method|getBaseConf (String ldapUrl)
specifier|protected
name|Configuration
name|getBaseConf
parameter_list|(
name|String
name|ldapUrl
parameter_list|)
block|{
return|return
name|getBaseConf
argument_list|(
name|ldapUrl
argument_list|,
name|getContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBaseConf ( String ldapUrl, DirContext contextToReturn)
specifier|protected
name|Configuration
name|getBaseConf
parameter_list|(
name|String
name|ldapUrl
parameter_list|,
name|DirContext
name|contextToReturn
parameter_list|)
block|{
name|DummyLdapCtxFactory
operator|.
name|setContextToReturn
argument_list|(
name|contextToReturn
argument_list|)
expr_stmt|;
name|DummyLdapCtxFactory
operator|.
name|setExpectedLdapUrl
argument_list|(
name|ldapUrl
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|LDAP_URL_KEY
argument_list|,
name|ldapUrl
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|LDAP_CTX_FACTORY_CLASS_KEY
argument_list|,
name|DummyLdapCtxFactory
operator|.
name|class
argument_list|,
name|InitialContextFactory
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getContext ()
specifier|protected
name|DirContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getUserNames ()
specifier|protected
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|getUserNames
parameter_list|()
block|{
return|return
name|userNames
return|;
block|}
DECL|method|getGroupNames ()
specifier|protected
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|getGroupNames
parameter_list|()
block|{
return|return
name|groupNames
return|;
block|}
DECL|method|getUserSearchResult ()
specifier|protected
name|SearchResult
name|getUserSearchResult
parameter_list|()
block|{
return|return
name|userSearchResult
return|;
block|}
DECL|method|getAttributes ()
specifier|protected
name|Attributes
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
DECL|method|getGroupsMapping ()
specifier|protected
name|LdapGroupsMapping
name|getGroupsMapping
parameter_list|()
block|{
return|return
name|groupsMapping
return|;
block|}
DECL|method|getTestGroups ()
specifier|protected
name|String
index|[]
name|getTestGroups
parameter_list|()
block|{
return|return
name|testGroups
return|;
block|}
DECL|method|getParentGroupNames ()
specifier|protected
name|NamingEnumeration
name|getParentGroupNames
parameter_list|()
block|{
return|return
name|parentGroupNames
return|;
block|}
DECL|method|getTestParentGroups ()
specifier|protected
name|String
index|[]
name|getTestParentGroups
parameter_list|()
block|{
return|return
name|testParentGroups
return|;
block|}
comment|/**    * Ldap Context Factory implementation to be used for testing to check    * contexts are requested for the expected LDAP server URLs etc.    */
DECL|class|DummyLdapCtxFactory
specifier|public
specifier|static
class|class
name|DummyLdapCtxFactory
implements|implements
name|InitialContextFactory
block|{
DECL|field|contextToReturn
specifier|private
specifier|static
name|DirContext
name|contextToReturn
decl_stmt|;
DECL|field|expectedLdapUrl
specifier|private
specifier|static
name|String
name|expectedLdapUrl
decl_stmt|;
DECL|field|expectedBindUser
specifier|private
specifier|static
name|String
name|expectedBindUser
decl_stmt|;
DECL|field|expectedBindPassword
specifier|private
specifier|static
name|String
name|expectedBindPassword
decl_stmt|;
DECL|method|DummyLdapCtxFactory ()
specifier|public
name|DummyLdapCtxFactory
parameter_list|()
block|{     }
DECL|method|setContextToReturn (DirContext ctx)
specifier|protected
specifier|static
name|void
name|setContextToReturn
parameter_list|(
name|DirContext
name|ctx
parameter_list|)
block|{
name|contextToReturn
operator|=
name|ctx
expr_stmt|;
block|}
DECL|method|setExpectedLdapUrl (String url)
specifier|protected
specifier|static
name|void
name|setExpectedLdapUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|expectedLdapUrl
operator|=
name|url
expr_stmt|;
block|}
DECL|method|setExpectedBindUser (String bindUser)
specifier|public
specifier|static
name|void
name|setExpectedBindUser
parameter_list|(
name|String
name|bindUser
parameter_list|)
block|{
name|expectedBindUser
operator|=
name|bindUser
expr_stmt|;
block|}
DECL|method|setExpectedBindPassword (String bindPassword)
specifier|public
specifier|static
name|void
name|setExpectedBindPassword
parameter_list|(
name|String
name|bindPassword
parameter_list|)
block|{
name|expectedBindPassword
operator|=
name|bindPassword
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|expectedLdapUrl
operator|=
literal|null
expr_stmt|;
name|expectedBindUser
operator|=
literal|null
expr_stmt|;
name|expectedBindPassword
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInitialContext (Hashtable<?, ?> env)
specifier|public
name|Context
name|getInitialContext
parameter_list|(
name|Hashtable
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|env
parameter_list|)
throws|throws
name|NamingException
block|{
if|if
condition|(
name|expectedLdapUrl
operator|!=
literal|null
condition|)
block|{
name|String
name|actualLdapUrl
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLdapUrl
argument_list|,
name|actualLdapUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedBindUser
operator|!=
literal|null
condition|)
block|{
name|String
name|actualBindUser
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBindUser
argument_list|,
name|actualBindUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedBindPassword
operator|!=
literal|null
condition|)
block|{
name|String
name|actualBindPassword
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBindPassword
argument_list|,
name|actualBindPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextToReturn
operator|==
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|newEnv
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|newEnv
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|LDAP_CTX_FACTORY_CLASS_DEFAULT
argument_list|)
expr_stmt|;
name|contextToReturn
operator|=
operator|new
name|InitialLdapContext
argument_list|(
name|newEnv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|contextToReturn
return|;
block|}
block|}
block|}
end_class

end_unit

