begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|BasicAttributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|TestLdapGroupsMappingBase
specifier|public
class|class
name|TestLdapGroupsMappingBase
block|{
DECL|field|mockContext
specifier|protected
name|DirContext
name|mockContext
decl_stmt|;
DECL|field|mappingSpy
specifier|protected
name|LdapGroupsMapping
name|mappingSpy
init|=
name|spy
argument_list|(
operator|new
name|LdapGroupsMapping
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mockUserNamingEnum
specifier|protected
name|NamingEnumeration
name|mockUserNamingEnum
init|=
name|mock
argument_list|(
name|NamingEnumeration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockGroupNamingEnum
specifier|protected
name|NamingEnumeration
name|mockGroupNamingEnum
init|=
name|mock
argument_list|(
name|NamingEnumeration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testGroups
specifier|protected
name|String
index|[]
name|testGroups
init|=
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMocksBase ()
specifier|public
name|void
name|setupMocksBase
parameter_list|()
throws|throws
name|NamingException
block|{
name|mockContext
operator|=
name|mock
argument_list|(
name|DirContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mockContext
argument_list|)
operator|.
name|when
argument_list|(
name|mappingSpy
argument_list|)
operator|.
name|getDirContext
argument_list|()
expr_stmt|;
comment|// We only ever call hasMoreElements once for the user NamingEnum, so
comment|// we can just have one return value
name|when
argument_list|(
name|mockUserNamingEnum
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SearchResult
name|mockGroupResult
init|=
name|mock
argument_list|(
name|SearchResult
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We're going to have to define the loop here. We want two iterations,
comment|// to get both the groups
name|when
argument_list|(
name|mockGroupNamingEnum
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockGroupNamingEnum
operator|.
name|nextElement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockGroupResult
argument_list|)
expr_stmt|;
comment|// Define the attribute for the name of the first group
name|Attribute
name|group1Attr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|group1Attr
operator|.
name|add
argument_list|(
name|testGroups
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Attributes
name|group1Attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|group1Attrs
operator|.
name|put
argument_list|(
name|group1Attr
argument_list|)
expr_stmt|;
comment|// Define the attribute for the name of the second group
name|Attribute
name|group2Attr
init|=
operator|new
name|BasicAttribute
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|group2Attr
operator|.
name|add
argument_list|(
name|testGroups
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Attributes
name|group2Attrs
init|=
operator|new
name|BasicAttributes
argument_list|()
decl_stmt|;
name|group2Attrs
operator|.
name|put
argument_list|(
name|group2Attr
argument_list|)
expr_stmt|;
comment|// This search result gets reused, so return group1, then group2
name|when
argument_list|(
name|mockGroupResult
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|group1Attrs
argument_list|,
name|group2Attrs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

