begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|ConfigUtil
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test metrics configuration  */
end_comment

begin_class
DECL|class|TestMetricsConfig
specifier|public
class|class
name|TestMetricsConfig
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMetricsConfig
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Common use cases    * @throws Exception    */
DECL|method|testCommon ()
annotation|@
name|Test
specifier|public
name|void
name|testCommon
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|filename
init|=
name|getTestFilename
argument_list|(
literal|"test-metrics2"
argument_list|)
decl_stmt|;
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.foo"
argument_list|,
literal|"default foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p1.*.bar"
argument_list|,
literal|"p1 default bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p1.t1.*.bar"
argument_list|,
literal|"p1.t1 default bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p1.t1.i1.name"
argument_list|,
literal|"p1.t1.i1.name"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p1.t1.42.bar"
argument_list|,
literal|"p1.t1.42.bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p1.t2.i1.foo"
argument_list|,
literal|"p1.t2.i1.foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"p2.*.foo"
argument_list|,
literal|"p2 default foo"
argument_list|)
operator|.
name|save
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|MetricsConfig
name|mc
init|=
name|MetricsConfig
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"mc:"
operator|+
name|mc
argument_list|)
expr_stmt|;
name|Configuration
name|expected
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"*.bar"
argument_list|,
literal|"p1 default bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"t1.*.bar"
argument_list|,
literal|"p1.t1 default bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"t1.i1.name"
argument_list|,
literal|"p1.t1.i1.name"
argument_list|)
operator|.
name|add
argument_list|(
literal|"t1.42.bar"
argument_list|,
literal|"p1.t1.42.bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"t2.i1.foo"
argument_list|,
literal|"p1.t2.i1.foo"
argument_list|)
operator|.
name|config
decl_stmt|;
name|assertEq
argument_list|(
name|expected
argument_list|,
name|mc
argument_list|)
expr_stmt|;
name|testInstances
argument_list|(
name|mc
argument_list|)
expr_stmt|;
block|}
DECL|method|testInstances (MetricsConfig c)
specifier|private
name|void
name|testInstances
parameter_list|(
name|MetricsConfig
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsConfig
argument_list|>
name|map
init|=
name|c
operator|.
name|getInstanceConfigs
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsConfig
argument_list|>
name|map2
init|=
name|c
operator|.
name|getInstanceConfigs
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of t1 instances"
argument_list|,
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of t2 instances"
argument_list|,
literal|1
argument_list|,
name|map2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains t1 instance i1"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"i1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains t1 instance 42"
argument_list|,
name|map
operator|.
name|containsKey
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains t2 instance i1"
argument_list|,
name|map2
operator|.
name|containsKey
argument_list|(
literal|"i1"
argument_list|)
argument_list|)
expr_stmt|;
name|MetricsConfig
name|t1i1
init|=
name|map
operator|.
name|get
argument_list|(
literal|"i1"
argument_list|)
decl_stmt|;
name|MetricsConfig
name|t1i42
init|=
name|map
operator|.
name|get
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|MetricsConfig
name|t2i1
init|=
name|map2
operator|.
name|get
argument_list|(
literal|"i1"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"--- t1 instance i1:"
operator|+
name|t1i1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"--- t1 instance 42:"
operator|+
name|t1i42
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"--- t2 instance i1:"
operator|+
name|t2i1
argument_list|)
expr_stmt|;
name|Configuration
name|t1expected1
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
literal|"p1.t1.i1.name"
argument_list|)
operator|.
name|config
decl_stmt|;
name|Configuration
name|t1expected42
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|,
literal|"p1.t1.42.bar"
argument_list|)
operator|.
name|config
decl_stmt|;
name|Configuration
name|t2expected1
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"p1.t2.i1.foo"
argument_list|)
operator|.
name|config
decl_stmt|;
name|assertEq
argument_list|(
name|t1expected1
argument_list|,
name|t1i1
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
name|t1expected42
argument_list|,
name|t1i42
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
name|t2expected1
argument_list|,
name|t2i1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"asserting foo == default foo"
argument_list|)
expr_stmt|;
comment|// Check default lookups
name|assertEquals
argument_list|(
literal|"value of foo in t1 instance i1"
argument_list|,
literal|"default foo"
argument_list|,
name|t1i1
operator|.
name|getString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of bar in t1 instance i1"
argument_list|,
literal|"p1.t1 default bar"
argument_list|,
name|t1i1
operator|.
name|getString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of foo in t1 instance 42"
argument_list|,
literal|"default foo"
argument_list|,
name|t1i42
operator|.
name|getString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of foo in t2 instance i1"
argument_list|,
literal|"p1.t2.i1.foo"
argument_list|,
name|t2i1
operator|.
name|getString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value of bar in t2 instance i1"
argument_list|,
literal|"p1 default bar"
argument_list|,
name|t2i1
operator|.
name|getString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Should not throw if missing config files    */
DECL|method|testMissingFiles ()
annotation|@
name|Test
specifier|public
name|void
name|testMissingFiles
parameter_list|()
block|{
name|MetricsConfig
name|config
init|=
name|MetricsConfig
operator|.
name|create
argument_list|(
literal|"JobTracker"
argument_list|,
literal|"non-existent.properties"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|config
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the config file load order    * @throws Exception    */
DECL|method|testLoadFirst ()
annotation|@
name|Test
specifier|public
name|void
name|testLoadFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|filename
init|=
name|getTestFilename
argument_list|(
literal|"hadoop-metrics2-p1"
argument_list|)
decl_stmt|;
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"p1.foo"
argument_list|,
literal|"p1foo"
argument_list|)
operator|.
name|save
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|MetricsConfig
name|mc
init|=
name|MetricsConfig
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|MetricsConfig
name|mc2
init|=
name|MetricsConfig
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|,
literal|"na1"
argument_list|,
literal|"na2"
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|Configuration
name|expected
init|=
operator|new
name|ConfigBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"p1foo"
argument_list|)
operator|.
name|config
decl_stmt|;
name|assertEq
argument_list|(
name|expected
argument_list|,
name|mc
argument_list|)
expr_stmt|;
name|assertEq
argument_list|(
name|expected
argument_list|,
name|mc2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return a test filename in the class path    * @param basename    * @return the filename    */
DECL|method|getTestFilename (String basename)
specifier|public
specifier|static
name|String
name|getTestFilename
parameter_list|(
name|String
name|basename
parameter_list|)
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.classes"
argument_list|,
literal|"target/test-classes"
argument_list|)
operator|+
literal|"/"
operator|+
name|basename
operator|+
literal|".properties"
return|;
block|}
block|}
end_class

end_unit

