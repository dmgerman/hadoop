begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|ExitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNativeLibraryChecker
specifier|public
class|class
name|TestNativeLibraryChecker
extends|extends
name|TestCase
block|{
DECL|method|expectExit (String [] args)
specifier|private
name|void
name|expectExit
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
comment|// should throw exit exception
name|NativeLibraryChecker
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should call exit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
comment|// pass
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNativeLibraryChecker ()
specifier|public
name|void
name|testNativeLibraryChecker
parameter_list|()
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
comment|// help should return normally
name|NativeLibraryChecker
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
argument_list|)
expr_stmt|;
comment|// illegal argmuments should exit
name|expectExit
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-a"
block|,
literal|"-h"
block|}
argument_list|)
expr_stmt|;
name|expectExit
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
comment|// no argument should return normally
name|NativeLibraryChecker
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no argument should exit
name|expectExit
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNativeLibraryCheckerOutput ()
specifier|public
name|void
name|testNativeLibraryCheckerOutput
parameter_list|()
block|{
name|expectOutput
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-a"
block|}
argument_list|)
expr_stmt|;
comment|// no argument
name|expectOutput
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|expectOutput (String [] args)
specifier|private
name|void
name|expectOutput
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|originalPs
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|NativeLibraryChecker
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitException
name|e
parameter_list|)
block|{
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|assertEquals
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"winutils: true"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"hadoop:  true"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setOut
argument_list|(
name|originalPs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

