begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   * Byte arrays test case class using GZ compression codec, base class of none  * and LZO compression classes.  *   */
end_comment

begin_class
DECL|class|TestTFileByteArrays
specifier|public
class|class
name|TestTFileByteArrays
block|{
DECL|field|ROOT
specifier|private
specifier|static
name|String
name|ROOT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/tfile-test"
argument_list|)
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|field|BUF_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|BUF_SIZE
init|=
literal|64
decl_stmt|;
DECL|field|K
specifier|private
specifier|final
specifier|static
name|int
name|K
init|=
literal|1024
decl_stmt|;
DECL|field|skip
specifier|protected
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
DECL|field|KEY
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"key"
decl_stmt|;
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|out
specifier|private
name|FSDataOutputStream
name|out
decl_stmt|;
DECL|field|writer
specifier|private
name|Writer
name|writer
decl_stmt|;
DECL|field|compression
specifier|private
name|String
name|compression
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|comparator
specifier|private
name|String
name|comparator
init|=
literal|"memcmp"
decl_stmt|;
DECL|field|outputFile
specifier|private
name|String
name|outputFile
init|=
literal|"TFileTestByteArrays"
decl_stmt|;
comment|/*    * pre-sampled numbers of records in one block, based on the given the    * generated key and value strings. This is slightly different based on    * whether or not the native libs are present.    */
DECL|field|usingNative
specifier|private
name|boolean
name|usingNative
init|=
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
decl_stmt|;
DECL|field|records1stBlock
specifier|private
name|int
name|records1stBlock
init|=
name|usingNative
condition|?
literal|5674
else|:
literal|4480
decl_stmt|;
DECL|field|records2ndBlock
specifier|private
name|int
name|records2ndBlock
init|=
name|usingNative
condition|?
literal|5574
else|:
literal|4263
decl_stmt|;
DECL|method|init (String compression, String comparator, String outputFile, int numRecords1stBlock, int numRecords2ndBlock)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|compression
parameter_list|,
name|String
name|comparator
parameter_list|,
name|String
name|outputFile
parameter_list|,
name|int
name|numRecords1stBlock
parameter_list|,
name|int
name|numRecords2ndBlock
parameter_list|)
block|{
name|init
argument_list|(
name|compression
argument_list|,
name|comparator
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|records1stBlock
operator|=
name|numRecords1stBlock
expr_stmt|;
name|this
operator|.
name|records2ndBlock
operator|=
name|numRecords2ndBlock
expr_stmt|;
block|}
DECL|method|init (String compression, String comparator, String outputFile)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|compression
parameter_list|,
name|String
name|comparator
parameter_list|,
name|String
name|outputFile
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|outputFile
operator|=
name|outputFile
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|Writer
argument_list|(
name|out
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|compression
argument_list|,
name|comparator
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|skip
condition|)
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoDataEntry ()
specifier|public
name|void
name|testNoDataEntry
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|.
name|isSorted
argument_list|()
argument_list|)
expr_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scanner
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneDataEntry ()
specifier|public
name|void
name|testOneDataEntry
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|readValueBeforeKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoDataEntries ()
specifier|public
name|void
name|testTwoDataEntries
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fill up exactly one block.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testOneBlock ()
specifier|public
name|void
name|testOneBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
comment|// just under one block
name|writeRecords
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
comment|// last key should be in the first block (block 0)
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * One block plus one record.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testOneBlockPlusOneEntry ()
specifier|public
name|void
name|testOneBlockPlusOneEntry
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
name|records1stBlock
operator|+
literal|1
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
name|records1stBlock
operator|+
literal|1
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
name|records1stBlock
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoBlocks ()
specifier|public
name|void
name|testTwoBlocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
name|records1stBlock
operator|+
literal|5
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
name|records1stBlock
operator|+
literal|5
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|+
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreeBlocks ()
specifier|public
name|void
name|testThreeBlocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|5
argument_list|)
expr_stmt|;
name|readRecords
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|5
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 1st key in file
name|readValueBeforeKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// last key in file
name|readValueBeforeKey
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|4
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|4
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|4
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
literal|2
operator|*
name|records1stBlock
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// 1st key in mid block, verify block indexes then read
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
name|records1stBlock
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|readValueBeforeKey
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
name|records1stBlock
argument_list|)
expr_stmt|;
comment|// last key in mid block, verify block indexes then read
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkBlockIndex
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|readValueBeforeKey
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
operator|-
literal|1
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
operator|-
literal|1
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
operator|-
literal|1
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
name|records1stBlock
operator|+
name|records2ndBlock
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// mid in mid block
name|readValueBeforeKey
argument_list|(
name|records1stBlock
operator|+
literal|10
argument_list|)
expr_stmt|;
name|readKeyWithoutValue
argument_list|(
name|records1stBlock
operator|+
literal|10
argument_list|)
expr_stmt|;
name|readValueWithoutKey
argument_list|(
name|records1stBlock
operator|+
literal|10
argument_list|)
expr_stmt|;
name|readKeyManyTimes
argument_list|(
name|records1stBlock
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|locate (Scanner scanner, byte[] key)
name|Location
name|locate
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|byte
index|[]
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|scanner
operator|.
name|seekTo
argument_list|(
name|key
argument_list|)
operator|==
literal|true
condition|)
block|{
return|return
name|scanner
operator|.
name|currentLocation
return|;
block|}
return|return
name|scanner
operator|.
name|endLocation
return|;
block|}
annotation|@
name|Test
DECL|method|testLocate ()
specifier|public
name|void
name|testLocate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|3
operator|*
name|records1stBlock
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|locate
argument_list|(
name|scanner
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
literal|2
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|locate
argument_list|(
name|scanner
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|records1stBlock
operator|-
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|locate
argument_list|(
name|scanner
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|records1stBlock
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Location
name|locX
init|=
name|locate
argument_list|(
name|scanner
argument_list|,
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scanner
operator|.
name|endLocation
argument_list|,
name|locX
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureWriterNotClosed ()
specifier|public
name|void
name|testFailureWriterNotClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot read before closing the writer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFailureWriteMetaBlocksWithSameName ()
specifier|public
name|void
name|testFailureWriteMetaBlocksWithSameName
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writer
operator|.
name|append
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new metablock
name|DataOutputStream
name|outMeta
init|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"testX"
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add the same metablock
try|try
block|{
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"testX"
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot create metablocks with the same name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureGetNonExistentMetaBlock ()
specifier|public
name|void
name|testFailureGetNonExistentMetaBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writer
operator|.
name|append
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new metablock
name|DataOutputStream
name|outMeta
init|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"testX"
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeOutput
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataInputStream
name|mb
init|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"testX"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|mb
argument_list|)
expr_stmt|;
name|mb
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|DataInputStream
name|mbBad
init|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"testY"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling non-existent metablocks."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureWriteRecordAfterMetaBlock ()
specifier|public
name|void
name|testFailureWriteRecordAfterMetaBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
comment|// write a key/value first
name|writer
operator|.
name|append
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new metablock
name|DataOutputStream
name|outMeta
init|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"testX"
argument_list|,
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|write
argument_list|(
literal|"dummy"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outMeta
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add more key/value
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"keyY"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueY"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot add key/value after start adding meta blocks."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureReadValueManyTimes ()
specifier|public
name|void
name|testFailureReadValueManyTimes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|byte
index|[]
name|vbuf
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|vlen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|vbuf
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
argument_list|,
name|VALUE
operator|+
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot get the value mlutiple times."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureBadCompressionCodec ()
specifier|public
name|void
name|testFailureBadCompressionCodec
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|Writer
argument_list|(
name|out
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|"BAD"
argument_list|,
name|comparator
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling invalid compression codecs."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
comment|// e.printStackTrace();
block|}
block|}
annotation|@
name|Test
DECL|method|testFailureOpenEmptyFile ()
specifier|public
name|void
name|testFailureOpenEmptyFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
comment|// create an absolutely empty file
name|path
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling empty files."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
block|}
annotation|@
name|Test
DECL|method|testFailureOpenRandomFile ()
specifier|public
name|void
name|testFailureOpenRandomFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
comment|// create an random file
name|path
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|K
index|]
decl_stmt|;
comment|// fill with> 1MB data
for|for
control|(
name|int
name|nx
init|=
literal|0
init|;
name|nx
operator|<
name|K
operator|+
literal|2
condition|;
name|nx
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling random files."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
block|}
annotation|@
name|Test
DECL|method|testFailureKeyLongerThan64K ()
specifier|public
name|void
name|testFailureKeyLongerThan64K
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|64
operator|*
name|K
operator|+
literal|1
index|]
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureOutOfOrderKeys ()
specifier|public
name|void
name|testFailureOutOfOrderKeys
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"keyM"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueM"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"keyA"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"valueA"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling out of order keys."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
comment|// e.printStackTrace();
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureNegativeOffset ()
specifier|public
name|void
name|testFailureNegativeOffset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling negative offset."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureNegativeOffset_2 ()
specifier|public
name|void
name|testFailureNegativeOffset_2
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
try|try
block|{
name|scanner
operator|.
name|lowerBound
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling negative offset."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureNegativeLength ()
specifier|public
name|void
name|testFailureNegativeLength
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
try|try
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|"valueX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling negative length."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureNegativeLength_2 ()
specifier|public
name|void
name|testFailureNegativeLength_2
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
try|try
block|{
name|scanner
operator|.
name|lowerBound
argument_list|(
literal|"keyX"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Error on handling negative length."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureNegativeLength_3 ()
specifier|public
name|void
name|testFailureNegativeLength_3
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|writeRecords
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
try|try
block|{
comment|// test negative array offset
try|try
block|{
name|scanner
operator|.
name|seekTo
argument_list|(
literal|"keyY"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to handle negative offset."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
comment|// test negative array length
try|try
block|{
name|scanner
operator|.
name|seekTo
argument_list|(
literal|"keyY"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to handle negative key length."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFailureCompressionNotWorking ()
specifier|public
name|void
name|testFailureCompressionNotWorking
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|long
name|rawDataSize
init|=
name|writeRecords
argument_list|(
literal|10
operator|*
name|records1stBlock
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compression
operator|.
name|equalsIgnoreCase
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|out
operator|.
name|getPos
argument_list|()
operator|<
name|rawDataSize
argument_list|)
expr_stmt|;
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailureFileWriteNotAt0Position ()
specifier|public
name|void
name|testFailureFileWriteNotAt0Position
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skip
condition|)
return|return;
name|closeOutput
argument_list|()
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|123
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|Writer
argument_list|(
name|out
argument_list|,
name|BLOCK_SIZE
argument_list|,
name|compression
argument_list|,
name|comparator
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to catch file write not at position 0."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// noop, expecting exceptions
block|}
name|closeOutput
argument_list|()
expr_stmt|;
block|}
DECL|method|writeRecords (int count)
specifier|private
name|long
name|writeRecords
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeRecords
argument_list|(
name|count
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|writeRecords (int count, boolean close)
specifier|private
name|long
name|writeRecords
parameter_list|(
name|int
name|count
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|rawDataSize
init|=
name|writeRecords
argument_list|(
name|writer
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|close
condition|)
block|{
name|closeOutput
argument_list|()
expr_stmt|;
block|}
return|return
name|rawDataSize
return|;
block|}
DECL|method|writeRecords (Writer writer, int count)
specifier|static
name|long
name|writeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|rawDataSize
init|=
literal|0
decl_stmt|;
name|int
name|nx
decl_stmt|;
for|for
control|(
name|nx
operator|=
literal|0
init|;
name|nx
operator|<
name|count
condition|;
name|nx
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|nx
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|(
name|VALUE
operator|+
name|nx
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rawDataSize
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|key
operator|.
name|length
argument_list|)
operator|+
name|key
operator|.
name|length
operator|+
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|value
operator|.
name|length
argument_list|)
operator|+
name|value
operator|.
name|length
expr_stmt|;
block|}
return|return
name|rawDataSize
return|;
block|}
comment|/**    * Insert some leading 0's in front of the value, to make the keys sorted.    *     * @param prefix    * @param value    * @return    */
DECL|method|composeSortedKey (String prefix, int value)
specifier|static
name|String
name|composeSortedKey
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s%010d"
argument_list|,
name|prefix
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|readRecords (int count)
specifier|private
name|void
name|readRecords
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|readRecords
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|count
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|readRecords (FileSystem fs, Path path, int count, Configuration conf)
specifier|static
name|void
name|readRecords
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|count
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|nx
init|=
literal|0
init|;
name|nx
operator|<
name|count
condition|;
name|nx
operator|++
operator|,
name|scanner
operator|.
name|advance
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|scanner
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertTrue(scanner.next());
name|byte
index|[]
name|kbuf
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|klen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf
argument_list|,
literal|0
argument_list|,
name|klen
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|nx
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|vbuf
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|vlen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|vbuf
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
argument_list|,
name|VALUE
operator|+
name|nx
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scanner
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkBlockIndex (int recordIndex, int blockIndexExpected)
specifier|private
name|void
name|checkBlockIndex
parameter_list|(
name|int
name|recordIndex
parameter_list|,
name|int
name|blockIndexExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blockIndexExpected
argument_list|,
name|scanner
operator|.
name|currentLocation
operator|.
name|getBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readValueBeforeKey (int recordIndex)
specifier|private
name|void
name|readValueBeforeKey
parameter_list|(
name|int
name|recordIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScannerByKey
argument_list|(
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|vbuf
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|vlen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|vbuf
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
argument_list|,
name|VALUE
operator|+
name|recordIndex
argument_list|)
expr_stmt|;
name|byte
index|[]
name|kbuf
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|klen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf
argument_list|,
literal|0
argument_list|,
name|klen
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readKeyWithoutValue (int recordIndex)
specifier|private
name|void
name|readKeyWithoutValue
parameter_list|(
name|int
name|recordIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScannerByKey
argument_list|(
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// read the indexed key
name|byte
index|[]
name|kbuf1
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|klen1
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf1
argument_list|,
literal|0
argument_list|,
name|klen1
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|.
name|advance
argument_list|()
operator|&&
operator|!
name|scanner
operator|.
name|atEnd
argument_list|()
condition|)
block|{
comment|// read the next key following the indexed
name|byte
index|[]
name|kbuf2
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|klen2
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf2
argument_list|,
literal|0
argument_list|,
name|klen2
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readValueWithoutKey (int recordIndex)
specifier|private
name|void
name|readValueWithoutKey
parameter_list|(
name|int
name|recordIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScannerByKey
argument_list|(
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|vbuf1
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|vlen1
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|vbuf1
argument_list|,
literal|0
argument_list|,
name|vlen1
argument_list|)
argument_list|,
name|VALUE
operator|+
name|recordIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|scanner
operator|.
name|advance
argument_list|()
operator|&&
operator|!
name|scanner
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|byte
index|[]
name|vbuf2
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|vlen2
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|vbuf2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|vbuf2
argument_list|,
literal|0
argument_list|,
name|vlen2
argument_list|)
argument_list|,
name|VALUE
operator|+
operator|(
name|recordIndex
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readKeyManyTimes (int recordIndex)
specifier|private
name|void
name|readKeyManyTimes
parameter_list|(
name|int
name|recordIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScannerByKey
argument_list|(
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// read the indexed key
name|byte
index|[]
name|kbuf1
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
name|int
name|klen1
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf1
argument_list|,
literal|0
argument_list|,
name|klen1
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
argument_list|)
expr_stmt|;
name|klen1
operator|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf1
argument_list|,
literal|0
argument_list|,
name|klen1
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
argument_list|)
expr_stmt|;
name|klen1
operator|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|kbuf1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|kbuf1
argument_list|,
literal|0
argument_list|,
name|klen1
argument_list|)
argument_list|,
name|composeSortedKey
argument_list|(
name|KEY
argument_list|,
name|recordIndex
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|closeOutput ()
specifier|private
name|void
name|closeOutput
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

