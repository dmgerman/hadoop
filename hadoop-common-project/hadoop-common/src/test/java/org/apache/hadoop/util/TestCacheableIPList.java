begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCacheableIPList
specifier|public
class|class
name|TestCacheableIPList
block|{
comment|/**    * Add a bunch of subnets and IPSs to the file    * setup a low cache refresh    * test for inclusion    * Check for exclusion    * Add a bunch of subnets and Ips    * wait for cache timeout.    * test for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testAddWithSleepForCacheTimeout ()
specifier|public
name|void
name|testAddWithSleepForCacheTimeout
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.113.221.221"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|CacheableIPList
name|cipl
init|=
operator|new
name|CacheableIPList
argument_list|(
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"10.113.221.222 is in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.222.103.121 is  in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|String
index|[]
name|ips2
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.222.0.0/16"
block|,
literal|"10.113.221.221"
block|,
literal|"10.113.221.222"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.113.221.222 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.222.103.121 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of subnets and IPSs to the file    * setup a low cache refresh    * test for inclusion    * Check for exclusion    * Remove a bunch of subnets and Ips    * wait for cache timeout.    * test for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testRemovalWithSleepForCacheTimeout ()
specifier|public
name|void
name|testRemovalWithSleepForCacheTimeout
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.222.0.0/16"
block|,
literal|"10.113.221.221"
block|,
literal|"10.113.221.222"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|CacheableIPList
name|cipl
init|=
operator|new
name|CacheableIPList
argument_list|(
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"10.113.221.222 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.222.103.121 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|String
index|[]
name|ips2
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.113.221.221"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1005
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.113.221.222 is in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.222.103.121 is  in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of subnets and IPSs to the file    * setup a low cache refresh    * test for inclusion    * Check for exclusion    * Add a bunch of subnets and Ips    * do a refresh    * test for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testAddWithRefresh ()
specifier|public
name|void
name|testAddWithRefresh
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.113.221.221"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|CacheableIPList
name|cipl
init|=
operator|new
name|CacheableIPList
argument_list|(
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"10.113.221.222 is in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.222.103.121 is  in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|String
index|[]
name|ips2
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.222.0.0/16"
block|,
literal|"10.113.221.221"
block|,
literal|"10.113.221.222"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips2
argument_list|)
expr_stmt|;
name|cipl
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.113.221.222 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.222.103.121 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a bunch of subnets and IPSs to the file    * setup a low cache refresh    * test for inclusion    * Check for exclusion    * Remove a bunch of subnets and Ips    * wait for cache timeout.    * test for inclusion    * Check for exclusion    */
annotation|@
name|Test
DECL|method|testRemovalWithRefresh ()
specifier|public
name|void
name|testRemovalWithRefresh
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|ips
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.222.0.0/16"
block|,
literal|"10.113.221.221"
block|,
literal|"10.113.221.222"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips
argument_list|)
expr_stmt|;
name|CacheableIPList
name|cipl
init|=
operator|new
name|CacheableIPList
argument_list|(
operator|new
name|FileBasedIPList
argument_list|(
literal|"ips.txt"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"10.113.221.222 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"10.222.103.121 is not in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
name|String
index|[]
name|ips2
init|=
block|{
literal|"10.119.103.112"
block|,
literal|"10.221.102.0/23"
block|,
literal|"10.113.221.221"
block|}
decl_stmt|;
name|TestFileBasedIPList
operator|.
name|createFileWithEntries
argument_list|(
literal|"ips.txt"
argument_list|,
name|ips2
argument_list|)
expr_stmt|;
name|cipl
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.113.221.222 is in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.113.221.222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"10.222.103.121 is  in the list"
argument_list|,
name|cipl
operator|.
name|isIn
argument_list|(
literal|"10.222.103.121"
argument_list|)
argument_list|)
expr_stmt|;
name|TestFileBasedIPList
operator|.
name|removeFile
argument_list|(
literal|"ips.txt"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

