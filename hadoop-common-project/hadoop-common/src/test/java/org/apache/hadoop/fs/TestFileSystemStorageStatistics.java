begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
operator|.
name|LongStatistic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * This tests basic operations of {@link FileSystemStorageStatistics} class.  */
end_comment

begin_class
DECL|class|TestFileSystemStorageStatistics
specifier|public
class|class
name|TestFileSystemStorageStatistics
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFileSystemStorageStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FS_STORAGE_STATISTICS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|FS_STORAGE_STATISTICS_NAME
init|=
literal|"test-fs-statistics"
decl_stmt|;
DECL|field|STATISTICS_KEYS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|STATISTICS_KEYS
init|=
block|{
literal|"bytesRead"
block|,
literal|"bytesWritten"
block|,
literal|"readOps"
block|,
literal|"largeReadOps"
block|,
literal|"writeOps"
block|,
literal|"bytesReadLocalHost"
block|,
literal|"bytesReadDistanceOfOneOrTwo"
block|,
literal|"bytesReadDistanceOfThreeOrFour"
block|,
literal|"bytesReadDistanceOfFiveOrLarger"
block|,
literal|"bytesReadErasureCoded"
block|}
decl_stmt|;
DECL|field|statistics
specifier|private
name|FileSystem
operator|.
name|Statistics
name|statistics
init|=
operator|new
name|FileSystem
operator|.
name|Statistics
argument_list|(
literal|"test-scheme"
argument_list|)
decl_stmt|;
DECL|field|storageStatistics
specifier|private
name|FileSystemStorageStatistics
name|storageStatistics
init|=
operator|new
name|FileSystemStorageStatistics
argument_list|(
name|FS_STORAGE_STATISTICS_NAME
argument_list|,
name|statistics
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
specifier|final
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
specifier|final
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesWritten
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementLargeReadOps
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesReadByDistance
argument_list|(
literal|0
argument_list|,
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesReadByDistance
argument_list|(
literal|1
argument_list|,
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesReadByDistance
argument_list|(
literal|3
argument_list|,
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementBytesReadErasureCoded
argument_list|(
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLongStatistics ()
specifier|public
name|void
name|testGetLongStatistics
parameter_list|()
block|{
name|Iterator
argument_list|<
name|LongStatistic
argument_list|>
name|iter
init|=
name|storageStatistics
operator|.
name|getLongStatistics
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|LongStatistic
name|longStat
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|longStat
argument_list|)
expr_stmt|;
specifier|final
name|long
name|expectedStat
init|=
name|getStatisticsValue
argument_list|(
name|longStat
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: FileSystem.Statistics={}, FileSystemStorageStatistics={}"
argument_list|,
name|longStat
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedStat
argument_list|,
name|longStat
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStat
argument_list|,
name|longStat
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetLong ()
specifier|public
name|void
name|testGetLong
parameter_list|()
block|{
for|for
control|(
name|String
name|key
range|:
name|STATISTICS_KEYS
control|)
block|{
specifier|final
name|long
name|expectedStat
init|=
name|getStatisticsValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|long
name|storageStat
init|=
name|storageStatistics
operator|.
name|getLong
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: FileSystem.Statistics={}, FileSystemStorageStatistics={}"
argument_list|,
name|key
argument_list|,
name|expectedStat
argument_list|,
name|storageStat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedStat
argument_list|,
name|storageStat
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to retrieve the specific FileSystem.Statistics value by name.    *    * Basically, the {@link FileSystemStorageStatistics} should do this    * internally in a similar approach.    */
DECL|method|getStatisticsValue (String name)
specifier|private
name|long
name|getStatisticsValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"bytesRead"
case|:
return|return
name|statistics
operator|.
name|getBytesRead
argument_list|()
return|;
case|case
literal|"bytesWritten"
case|:
return|return
name|statistics
operator|.
name|getBytesWritten
argument_list|()
return|;
case|case
literal|"readOps"
case|:
return|return
name|statistics
operator|.
name|getReadOps
argument_list|()
return|;
case|case
literal|"largeReadOps"
case|:
return|return
name|statistics
operator|.
name|getLargeReadOps
argument_list|()
return|;
case|case
literal|"writeOps"
case|:
return|return
name|statistics
operator|.
name|getWriteOps
argument_list|()
return|;
case|case
literal|"bytesReadLocalHost"
case|:
return|return
name|statistics
operator|.
name|getBytesReadByDistance
argument_list|(
literal|0
argument_list|)
return|;
case|case
literal|"bytesReadDistanceOfOneOrTwo"
case|:
return|return
name|statistics
operator|.
name|getBytesReadByDistance
argument_list|(
literal|1
argument_list|)
return|;
case|case
literal|"bytesReadDistanceOfThreeOrFour"
case|:
return|return
name|statistics
operator|.
name|getBytesReadByDistance
argument_list|(
literal|3
argument_list|)
return|;
case|case
literal|"bytesReadDistanceOfFiveOrLarger"
case|:
return|return
name|statistics
operator|.
name|getBytesReadByDistance
argument_list|(
literal|5
argument_list|)
return|;
case|case
literal|"bytesReadErasureCoded"
case|:
return|return
name|statistics
operator|.
name|getBytesReadErasureCoded
argument_list|()
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

