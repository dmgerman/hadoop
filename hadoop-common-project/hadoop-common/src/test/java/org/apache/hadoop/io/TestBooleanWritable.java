begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestBooleanWritable
specifier|public
class|class
name|TestBooleanWritable
block|{
annotation|@
name|Test
DECL|method|testCompareUnequalWritables ()
specifier|public
name|void
name|testCompareUnequalWritables
parameter_list|()
throws|throws
name|Exception
block|{
name|DataOutputBuffer
name|bTrue
init|=
name|writeWritable
argument_list|(
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|bFalse
init|=
name|writeWritable
argument_list|(
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|WritableComparator
name|writableComparator
init|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compare
argument_list|(
name|writableComparator
argument_list|,
name|bTrue
argument_list|,
name|bTrue
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compare
argument_list|(
name|writableComparator
argument_list|,
name|bFalse
argument_list|,
name|bFalse
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compare
argument_list|(
name|writableComparator
argument_list|,
name|bTrue
argument_list|,
name|bFalse
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|compare
argument_list|(
name|writableComparator
argument_list|,
name|bFalse
argument_list|,
name|bTrue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|compare (WritableComparator writableComparator, DataOutputBuffer buf1, DataOutputBuffer buf2)
specifier|private
name|int
name|compare
parameter_list|(
name|WritableComparator
name|writableComparator
parameter_list|,
name|DataOutputBuffer
name|buf1
parameter_list|,
name|DataOutputBuffer
name|buf2
parameter_list|)
block|{
return|return
name|writableComparator
operator|.
name|compare
argument_list|(
name|buf1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf1
operator|.
name|size
argument_list|()
argument_list|,
name|buf2
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|writeWritable (Writable writable)
specifier|protected
name|DataOutputBuffer
name|writeWritable
parameter_list|(
name|Writable
name|writable
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|writable
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/**    * test {@link BooleanWritable} methods hashCode(), equals(), compareTo()     */
annotation|@
name|Test
DECL|method|testCommonMethods ()
specifier|public
name|void
name|testCommonMethods
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"testCommonMethods1 error !!!"
argument_list|,
name|newInstance
argument_list|(
literal|true
argument_list|)
operator|.
name|equals
argument_list|(
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCommonMethods2 error  !!!"
argument_list|,
name|newInstance
argument_list|(
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"testCommonMethods3 error !!!"
argument_list|,
name|newInstance
argument_list|(
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCommonMethods4 error !!!"
argument_list|,
name|checkHashCode
argument_list|(
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|,
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"testCommonMethods5 error !!! "
argument_list|,
name|checkHashCode
argument_list|(
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|,
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCommonMethods6 error !!!"
argument_list|,
name|newInstance
argument_list|(
literal|true
argument_list|)
operator|.
name|compareTo
argument_list|(
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCommonMethods7 error !!!"
argument_list|,
name|newInstance
argument_list|(
literal|false
argument_list|)
operator|.
name|compareTo
argument_list|(
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"testCommonMethods8 error !!!"
argument_list|,
name|newInstance
argument_list|(
literal|false
argument_list|)
operator|.
name|compareTo
argument_list|(
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testCommonMethods9 error !!!"
argument_list|,
literal|"true"
argument_list|,
name|newInstance
argument_list|(
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHashCode (BooleanWritable f, BooleanWritable s)
specifier|private
name|boolean
name|checkHashCode
parameter_list|(
name|BooleanWritable
name|f
parameter_list|,
name|BooleanWritable
name|s
parameter_list|)
block|{
return|return
name|f
operator|.
name|hashCode
argument_list|()
operator|==
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|newInstance (boolean flag)
specifier|private
specifier|static
name|BooleanWritable
name|newInstance
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
return|return
operator|new
name|BooleanWritable
argument_list|(
name|flag
argument_list|)
return|;
block|}
block|}
end_class

end_unit

