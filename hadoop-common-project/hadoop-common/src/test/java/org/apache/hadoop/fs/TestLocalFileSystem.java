begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|Whitebox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystemTestHelper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeNotWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|PlatformAssumptions
operator|.
name|assumeWindows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * This class tests the local file system via the FileSystem abstraction.  */
end_comment

begin_class
DECL|class|TestLocalFileSystem
specifier|public
class|class
name|TestLocalFileSystem
block|{
DECL|field|base
specifier|private
specifier|static
specifier|final
name|File
name|base
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"work-dir/localfs"
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_ROOT_DIR
init|=
name|base
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|TEST_PATH
specifier|private
specifier|final
name|Path
name|TEST_PATH
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-file"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|fileSys
specifier|private
name|LocalFileSystem
name|fileSys
decl_stmt|;
comment|/**    * standard test timeout: {@value}.    */
DECL|field|DEFAULT_TEST_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TEST_TIMEOUT
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
name|DEFAULT_TEST_TIMEOUT
argument_list|)
decl_stmt|;
DECL|method|cleanupFile (FileSystem fs, Path name)
specifier|private
name|void
name|cleanupFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|LocalFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|base
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|base
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|RawLocalFileSystem
operator|.
name|useStatIfAvailable
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the capability of setting the working directory.    */
annotation|@
name|Test
DECL|method|testWorkingDirectory ()
specifier|public
name|void
name|testWorkingDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|origDir
init|=
name|fileSys
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|Path
name|subdir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// make sure it doesn't already exist
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
comment|// make it and check for it
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|isDirectory
argument_list|(
name|subdir
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|setWorkingDirectory
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
comment|// create a directory and check for it
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"dir1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|isDirectory
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the directory and make sure it went away
name|fileSys
operator|.
name|delete
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
comment|// create files and manipulate them.
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
literal|"sub/file2"
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|copyFromLocalFile
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|isFile
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|copyToLocalFile
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// try a rename
name|fileSys
operator|.
name|rename
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|rename
argument_list|(
name|file2
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// try reading a file
name|InputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|stm
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|contents
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|setWorkingDirectory
argument_list|(
name|origDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test Syncable interface on raw local file system    * @throws IOException    */
annotation|@
name|Test
DECL|method|testSyncable ()
specifier|public
name|void
name|testSyncable
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|fileSys
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"syncable"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
empty_stmt|;
specifier|final
name|int
name|bytesWritten
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|expectedBuf
init|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|expectedBuf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|verifyFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|bytesWritten
argument_list|,
name|expectedBuf
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|expectedBuf
argument_list|,
name|bytesWritten
argument_list|,
name|expectedBuf
operator|.
name|length
operator|-
name|bytesWritten
argument_list|)
expr_stmt|;
name|out
operator|.
name|hsync
argument_list|()
expr_stmt|;
name|verifyFile
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|expectedBuf
operator|.
name|length
argument_list|,
name|expectedBuf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyFile (FileSystem fs, Path file, int bytesToVerify, byte[] expectedBytes)
specifier|private
name|void
name|verifyFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|int
name|bytesToVerify
parameter_list|,
name|byte
index|[]
name|expectedBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|readBuf
init|=
operator|new
name|byte
index|[
name|bytesToVerify
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|readBuf
argument_list|,
literal|0
argument_list|,
name|bytesToVerify
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesToVerify
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedBytes
index|[
name|i
index|]
argument_list|,
name|readBuf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCopy ()
specifier|public
name|void
name|testCopy
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dingo"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"yak"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|src
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|src
argument_list|,
name|fileSys
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
operator|&&
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|dst
argument_list|,
name|fileSys
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
operator|&&
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|src
argument_list|,
name|fileSys
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
operator|&&
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|dst
argument_list|,
name|fileSys
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|,
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
operator|&&
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|dst
argument_list|,
name|fileSys
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|delete
argument_list|(
name|tmp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|fileSys
argument_list|,
name|dst
argument_list|,
name|fileSys
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to detect existing dir"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Test
DECL|method|testHomeDirectory ()
specifier|public
name|void
name|testHomeDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|home
init|=
name|fileSys
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|fsHome
init|=
name|fileSys
operator|.
name|getHomeDirectory
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|home
argument_list|,
name|fsHome
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPathEscapes ()
specifier|public
name|void
name|testPathEscapes
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"foo%bar"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fileSys
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|cleanupFile
argument_list|(
name|fileSys
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateFileAndMkdirs ()
specifier|public
name|void
name|testCreateFileAndMkdirs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|test_dir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test_dir"
argument_list|)
decl_stmt|;
name|Path
name|test_file
init|=
operator|new
name|Path
argument_list|(
name|test_dir
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|test_dir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fileSize
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|test_file
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|{
comment|//check FileStatus and ContentSummary
specifier|final
name|FileStatus
name|status
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|test_file
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ContentSummary
name|summary
init|=
name|fileSys
operator|.
name|getContentSummary
argument_list|(
name|test_dir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileSize
argument_list|,
name|summary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// creating dir over a file
name|Path
name|bad_dir
init|=
operator|new
name|Path
argument_list|(
name|test_file
argument_list|,
literal|"another_dir"
argument_list|)
decl_stmt|;
try|try
block|{
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|bad_dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to detect existing file in path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParentNotDirectoryException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
try|try
block|{
name|fileSys
operator|.
name|mkdirs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to detect null in mkdir arg"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|/** Test deleting a file, directory, and non-existent path */
annotation|@
name|Test
DECL|method|testBasicDelete ()
specifier|public
name|void
name|testBasicDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/dir1"
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"does-not-exist"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Returned true deleting non-existant path"
argument_list|,
name|fileSys
operator|.
name|delete
argument_list|(
name|file3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not delete file"
argument_list|,
name|fileSys
operator|.
name|delete
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not delete non-empty dir"
argument_list|,
name|fileSys
operator|.
name|delete
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatistics ()
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|fileSchemeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Statistics
name|stats
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
if|if
condition|(
name|stats
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|fileSchemeCount
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fileSchemeCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasFileDescriptor ()
specifier|public
name|void
name|testHasFileDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-file"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|BufferedFSInputStream
name|bis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bis
operator|=
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|RawLocalFileSystem
argument_list|()
operator|.
operator|new
name|LocalFSFileInputStream
argument_list|(
name|path
argument_list|)
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bis
operator|.
name|getFileDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|bis
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListStatusWithColons ()
specifier|public
name|void
name|testListStatusWithColons
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeNotWindows
argument_list|()
expr_stmt|;
name|File
name|colonFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"foo:bar"
argument_list|)
decl_stmt|;
name|colonFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fileSys
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of stats"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad path from stat"
argument_list|,
name|colonFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatusReturnConsistentPathOnWindows ()
specifier|public
name|void
name|testListStatusReturnConsistentPathOnWindows
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeWindows
argument_list|()
expr_stmt|;
name|String
name|dirNoDriveSpec
init|=
name|TEST_ROOT_DIR
decl_stmt|;
if|if
condition|(
name|dirNoDriveSpec
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
condition|)
name|dirNoDriveSpec
operator|=
name|dirNoDriveSpec
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dirNoDriveSpec
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fileSys
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|dirNoDriveSpec
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of stats"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad path from stat"
argument_list|,
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReportChecksumFailure ()
specifier|public
name|void
name|testReportChecksumFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|base
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|base
operator|.
name|exists
argument_list|()
operator|&&
name|base
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|dir1
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dir2
init|=
operator|new
name|File
argument_list|(
name|dir1
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|dir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dir2
operator|.
name|exists
argument_list|()
operator|&&
name|FileUtil
operator|.
name|canWrite
argument_list|(
name|dir2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dataFileName
init|=
literal|"corruptedData"
decl_stmt|;
specifier|final
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|dir2
argument_list|,
name|dataFileName
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|checksumPath
init|=
name|fileSys
operator|.
name|getChecksumFile
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
specifier|final
name|FSDataOutputStream
name|fsdos
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
try|try
block|{
name|fsdos
operator|.
name|writeUTF
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|pathToFile
argument_list|(
name|dataPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|dataFileLength
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|dataPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dataFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// check the the checksum file is created and not empty:
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|pathToFile
argument_list|(
name|checksumPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|checksumFileLength
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|checksumPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|checksumFileLength
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// this is a hack to force the #reportChecksumFailure() method to stop
comment|// climbing up at the 'base' directory and use 'dir1/bad_files' as the
comment|// corrupted files storage:
name|FileUtil
operator|.
name|setWritable
argument_list|(
name|base
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|dataFsdis
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|checksumFsdis
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|checksumPath
argument_list|)
decl_stmt|;
name|boolean
name|retryIsNecessary
init|=
name|fileSys
operator|.
name|reportChecksumFailure
argument_list|(
name|dataPath
argument_list|,
name|dataFsdis
argument_list|,
literal|0
argument_list|,
name|checksumFsdis
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|retryIsNecessary
argument_list|)
expr_stmt|;
comment|// the data file should be moved:
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|pathToFile
argument_list|(
name|dataPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// the checksum file should be moved:
name|assertTrue
argument_list|(
operator|!
name|fileSys
operator|.
name|pathToFile
argument_list|(
name|checksumPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the files exist in the new location where they were moved:
name|File
index|[]
name|dir1files
init|=
name|dir1
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|!=
literal|null
operator|&&
operator|!
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dir2"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dir1files
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir1files
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|File
name|badFilesDir
init|=
name|dir1files
index|[
literal|0
index|]
decl_stmt|;
name|File
index|[]
name|badFiles
init|=
name|badFilesDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|badFiles
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|badFiles
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|dataFileFound
init|=
literal|false
decl_stmt|;
name|boolean
name|checksumFileFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|File
name|badFile
range|:
name|badFiles
control|)
block|{
if|if
condition|(
name|badFile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|dataFileName
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|dataFileLength
operator|==
name|badFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|dataFileFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|badFile
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|dataFileName
operator|+
literal|".crc"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|checksumFileLength
operator|==
name|badFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|checksumFileFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|dataFileFound
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checksumFileFound
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTimesStatus (Path path, long expectedModTime, long expectedAccTime)
specifier|private
name|void
name|checkTimesStatus
parameter_list|(
name|Path
name|path
parameter_list|,
name|long
name|expectedModTime
parameter_list|,
name|long
name|expectedAccTime
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedModTime
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAccTime
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetTimes ()
specifier|public
name|void
name|testSetTimes
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"set-times"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test only to the nearest second, as the raw FS may not
comment|// support millisecond timestamps
name|long
name|newModTime
init|=
literal|12345000
decl_stmt|;
name|long
name|newAccTime
init|=
literal|23456000
decl_stmt|;
name|FileStatus
name|status
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check we're actually changing something"
argument_list|,
name|newModTime
operator|!=
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"check we're actually changing something"
argument_list|,
name|newAccTime
operator|!=
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|newModTime
argument_list|,
name|newAccTime
argument_list|)
expr_stmt|;
name|checkTimesStatus
argument_list|(
name|path
argument_list|,
name|newModTime
argument_list|,
name|newAccTime
argument_list|)
expr_stmt|;
name|newModTime
operator|=
literal|34567000
expr_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
name|newModTime
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkTimesStatus
argument_list|(
name|path
argument_list|,
name|newModTime
argument_list|,
name|newAccTime
argument_list|)
expr_stmt|;
name|newAccTime
operator|=
literal|45678000
expr_stmt|;
name|fileSys
operator|.
name|setTimes
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
name|newAccTime
argument_list|)
expr_stmt|;
name|checkTimesStatus
argument_list|(
name|path
argument_list|,
name|newModTime
argument_list|,
name|newAccTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HADOOP-9307: BufferedFSInputStream returning    * wrong results after certain sequences of seeks and reads.    */
annotation|@
name|Test
DECL|method|testBufferedFSInputStream ()
specifier|public
name|void
name|testBufferedFSInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|RawLocalFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|buf
argument_list|)
expr_stmt|;
comment|// Write random bytes to file
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fs
operator|.
name|open
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
comment|// Record the sequence of seeks and reads which trigger a failure.
name|int
name|seeks
index|[]
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
name|int
name|reads
index|[]
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|seekOff
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|toRead
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|length
operator|-
name|seekOff
argument_list|,
literal|32000
argument_list|)
argument_list|)
decl_stmt|;
name|seeks
index|[
name|i
operator|%
name|seeks
operator|.
name|length
index|]
operator|=
name|seekOff
expr_stmt|;
name|reads
index|[
name|i
operator|%
name|reads
operator|.
name|length
index|]
operator|=
name|toRead
expr_stmt|;
name|verifyRead
argument_list|(
name|stm
argument_list|,
name|buf
argument_list|,
name|seekOff
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AssertionError
name|afe
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Sequence of actions:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|seeks
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"seek @ "
argument_list|)
operator|.
name|append
argument_list|(
name|seeks
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"read "
argument_list|)
operator|.
name|append
argument_list|(
name|reads
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|afe
throw|;
block|}
finally|finally
block|{
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests a simple rename of a directory.    */
annotation|@
name|Test
DECL|method|testRenameDirectory ()
specifier|public
name|void
name|testRenameDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that renaming a directory replaces the destination if the destination    * is an existing empty directory.    *     * Before:    *   /dir1    *     /file1    *     /file2    *   /dir2    *     * After rename("/dir1", "/dir2"):    *   /dir2    *     /file1    *     /file2    */
annotation|@
name|Test
DECL|method|testRenameReplaceExistingEmptyDirectory ()
specifier|public
name|void
name|testRenameReplaceExistingEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|,
literal|"file2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
literal|"file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
literal|"file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that renaming a directory to an existing directory that is not empty    * results in a full copy of source to destination.    *     * Before:    *   /dir1    *     /dir2    *       /dir3    *         /file1    *         /file2    *     * After rename("/dir1/dir2/dir3", "/dir1"):    *   /dir1    *     /dir3    *       /file1    *       /file2    */
annotation|@
name|Test
DECL|method|testRenameMoveToExistingNonEmptyDirectory ()
specifier|public
name|void
name|testRenameMoveToExistingNonEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir1/dir2/dir3"
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|,
literal|"file1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|,
literal|"file2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
literal|"dir3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
literal|"dir3/file1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
literal|"dir3/file2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRead (FSDataInputStream stm, byte[] fileContents, int seekOff, int toRead)
specifier|private
name|void
name|verifyRead
parameter_list|(
name|FSDataInputStream
name|stm
parameter_list|,
name|byte
index|[]
name|fileContents
parameter_list|,
name|int
name|seekOff
parameter_list|,
name|int
name|toRead
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|toRead
index|]
decl_stmt|;
name|stm
operator|.
name|seek
argument_list|(
name|seekOff
argument_list|)
expr_stmt|;
name|stm
operator|.
name|readFully
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileContents
argument_list|,
name|seekOff
argument_list|,
name|seekOff
operator|+
name|toRead
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|out
argument_list|,
name|expected
argument_list|)
condition|)
block|{
name|String
name|s
init|=
literal|"\nExpected: "
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"\ngot:      "
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|out
argument_list|)
operator|+
literal|"\noff="
operator|+
name|seekOff
operator|+
literal|" len="
operator|+
name|toRead
decl_stmt|;
name|fail
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStripFragmentFromPath ()
specifier|public
name|void
name|testStripFragmentFromPath
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|pathQualified
init|=
name|TEST_PATH
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|pathWithFragment
init|=
operator|new
name|Path
argument_list|(
operator|new
name|URI
argument_list|(
name|pathQualified
operator|.
name|toString
argument_list|()
operator|+
literal|"#glacier"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Create test file with fragment
name|FileSystemTestHelper
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|pathWithFragment
argument_list|)
expr_stmt|;
name|Path
name|resolved
init|=
name|fs
operator|.
name|resolvePath
argument_list|(
name|pathWithFragment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"resolvePath did not strip fragment from Path"
argument_list|,
name|pathQualified
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendSetsPosCorrectly ()
specifier|public
name|void
name|testAppendSetsPosCorrectly
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|fileSys
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"test-append"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
literal|"text1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify the position
name|out
operator|=
name|fs
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|out
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"text2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Verify the content
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text1text2"
argument_list|,
operator|new
name|String
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFileStatusPipeFile ()
specifier|public
name|void
name|testFileStatusPipeFile
parameter_list|()
throws|throws
name|Exception
block|{
name|RawLocalFileSystem
name|origFs
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|RawLocalFileSystem
name|fs
init|=
name|spy
argument_list|(
name|origFs
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|mock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Whitebox
operator|.
name|setInternalState
argument_list|(
name|fs
argument_list|,
literal|"useDeprecatedFileStatus"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|File
name|pipe
init|=
name|mock
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|pipe
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pipe
operator|.
name|isDirectory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|pipe
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|pipe
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|pathToFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|stat
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|!=
literal|null
operator|&&
name|stats
operator|.
name|length
operator|==
literal|1
operator|&&
name|stats
index|[
literal|0
index|]
operator|==
name|stat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFSOutputStreamBuilder ()
specifier|public
name|void
name|testFSOutputStreamBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testBuilder"
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStreamBuilder
name|builder
init|=
name|fileSys
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
operator|.
name|recursive
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|"Create with a generic type of createFile!"
decl_stmt|;
name|byte
index|[]
name|contentOrigin
init|=
name|content
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contentOrigin
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|input
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
index|]
decl_stmt|;
name|input
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"The data be read should equals with the "
operator|+
literal|"data written."
argument_list|,
name|contentOrigin
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// Test value not being set for replication, block size, buffer size
comment|// and permission
name|FSDataOutputStreamBuilder
name|builder
init|=
name|fileSys
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|builder
operator|.
name|build
argument_list|()
init|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be default block size"
argument_list|,
name|builder
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be default replication factor"
argument_list|,
name|builder
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getDefaultReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be default buffer size"
argument_list|,
name|builder
operator|.
name|getBufferSize
argument_list|()
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should be default permission"
argument_list|,
name|builder
operator|.
name|getPermission
argument_list|()
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test set 0 to replication, block size and buffer size
name|builder
operator|=
name|fileSys
operator|.
name|createFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bufferSize
argument_list|(
literal|0
argument_list|)
operator|.
name|blockSize
argument_list|(
literal|0
argument_list|)
operator|.
name|replication
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Block size should be 0"
argument_list|,
name|builder
operator|.
name|getBlockSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Replication factor should be 0"
argument_list|,
name|builder
operator|.
name|getReplication
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Buffer size should be 0"
argument_list|,
name|builder
operator|.
name|getBufferSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * A builder to verify configuration keys are supported.    */
DECL|class|BuilderWithSupportedKeys
specifier|private
specifier|static
class|class
name|BuilderWithSupportedKeys
extends|extends
name|FSDataOutputStreamBuilder
argument_list|<
name|FSDataOutputStream
argument_list|,
name|BuilderWithSupportedKeys
argument_list|>
block|{
DECL|field|supportedKeys
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|supportedKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|BuilderWithSupportedKeys (@onnull final Collection<String> supportedKeys, @Nonnull FileSystem fileSystem, @Nonnull Path p)
name|BuilderWithSupportedKeys
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|supportedKeys
parameter_list|,
annotation|@
name|Nonnull
name|FileSystem
name|fileSystem
parameter_list|,
annotation|@
name|Nonnull
name|Path
name|p
parameter_list|)
block|{
name|super
argument_list|(
name|fileSystem
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|this
operator|.
name|supportedKeys
operator|.
name|addAll
argument_list|(
name|supportedKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getThisBuilder ()
specifier|protected
name|BuilderWithSupportedKeys
name|getThisBuilder
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|FSDataOutputStream
name|build
parameter_list|()
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|unsupported
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|getMandatoryKeys
argument_list|()
argument_list|)
decl_stmt|;
name|unsupported
operator|.
name|removeAll
argument_list|(
name|supportedKeys
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|unsupported
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"unsupported key found: "
operator|+
name|supportedKeys
argument_list|)
expr_stmt|;
return|return
name|getFS
argument_list|()
operator|.
name|create
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|getPermission
argument_list|()
argument_list|,
name|getFlags
argument_list|()
argument_list|,
name|getBufferSize
argument_list|()
argument_list|,
name|getReplication
argument_list|()
argument_list|,
name|getBlockSize
argument_list|()
argument_list|,
name|getProgress
argument_list|()
argument_list|,
name|getChecksumOpt
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFSOutputStreamBuilderOptions ()
specifier|public
name|void
name|testFSOutputStreamBuilderOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testBuilderOpt"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"strM"
argument_list|)
decl_stmt|;
name|FSDataOutputStreamBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|builder
init|=
operator|new
name|BuilderWithSupportedKeys
argument_list|(
name|supportedKeys
argument_list|,
name|fileSys
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|builder
operator|.
name|opt
argument_list|(
literal|"strKey"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|opt
argument_list|(
literal|"intKey"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|builder
operator|.
name|opt
argument_list|(
literal|"strM"
argument_list|,
literal|"ignored"
argument_list|)
expr_stmt|;
comment|// Over-write an optional value with a mandatory value.
name|builder
operator|.
name|must
argument_list|(
literal|"strM"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|must
argument_list|(
literal|"unsupported"
argument_list|,
literal|12.34
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Optional value should be overwrite by a mandatory value"
argument_list|,
literal|"value"
argument_list|,
name|builder
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"strM"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mandatoryKeys
init|=
name|builder
operator|.
name|getMandatoryKeys
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"strM"
argument_list|)
expr_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"unsupported"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedKeys
argument_list|,
name|mandatoryKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mandatoryKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"unsupported key found"
argument_list|,
name|builder
operator|::
name|build
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

