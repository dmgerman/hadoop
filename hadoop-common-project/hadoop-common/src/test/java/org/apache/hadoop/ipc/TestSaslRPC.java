begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|QualityOfProtection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_PROTECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|SIMPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
operator|.
name|TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/** Unit tests for using Sasl over RPC. */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestSaslRPC
specifier|public
class|class
name|TestSaslRPC
extends|extends
name|TestRpcBase
block|{
annotation|@
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|QualityOfProtection
name|qop
range|:
name|QualityOfProtection
operator|.
name|values
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|QualityOfProtection
index|[]
block|{
name|qop
block|}
block|,
name|qop
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|QualityOfProtection
index|[]
block|{
name|QualityOfProtection
operator|.
name|PRIVACY
block|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
block|}
block|,
name|QualityOfProtection
operator|.
name|PRIVACY
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|QualityOfProtection
index|[]
block|{
name|QualityOfProtection
operator|.
name|PRIVACY
block|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
block|}
block|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
block|,
literal|"org.apache.hadoop.ipc.TestSaslRPC$AuthSaslPropertiesResolver"
block|}
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|field|qop
name|QualityOfProtection
index|[]
name|qop
decl_stmt|;
DECL|field|expectedQop
name|QualityOfProtection
name|expectedQop
decl_stmt|;
DECL|field|saslPropertiesResolver
name|String
name|saslPropertiesResolver
decl_stmt|;
DECL|method|TestSaslRPC (QualityOfProtection[] qop, QualityOfProtection expectedQop, String saslPropertiesResolver)
specifier|public
name|TestSaslRPC
parameter_list|(
name|QualityOfProtection
index|[]
name|qop
parameter_list|,
name|QualityOfProtection
name|expectedQop
parameter_list|,
name|String
name|saslPropertiesResolver
parameter_list|)
block|{
name|this
operator|.
name|qop
operator|=
name|qop
expr_stmt|;
name|this
operator|.
name|expectedQop
operator|=
name|expectedQop
expr_stmt|;
name|this
operator|.
name|saslPropertiesResolver
operator|=
name|saslPropertiesResolver
expr_stmt|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSaslRPC
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ERROR_MESSAGE
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE
init|=
literal|"Token is invalid"
decl_stmt|;
DECL|field|SERVER_KEYTAB_KEY
specifier|static
specifier|final
name|String
name|SERVER_KEYTAB_KEY
init|=
literal|"test.ipc.server.keytab"
decl_stmt|;
DECL|field|SERVER_PRINCIPAL_1
specifier|static
specifier|final
name|String
name|SERVER_PRINCIPAL_1
init|=
literal|"p1/foo@BAR"
decl_stmt|;
comment|// If this is set to true AND the auth-method is not simple, secretManager
comment|// will be enabled.
DECL|field|enableSecretManager
specifier|static
name|Boolean
name|enableSecretManager
init|=
literal|null
decl_stmt|;
comment|// If this is set to true, secretManager will be forecefully enabled
comment|// irrespective of auth-method.
DECL|field|forceSecretManager
specifier|static
name|Boolean
name|forceSecretManager
init|=
literal|null
decl_stmt|;
DECL|field|clientFallBackToSimpleAllowed
specifier|static
name|Boolean
name|clientFallBackToSimpleAllowed
init|=
literal|true
decl_stmt|;
DECL|enum|UseToken
enum|enum
name|UseToken
block|{
DECL|enumConstant|NONE
name|NONE
parameter_list|()
operator|,
DECL|enumConstant|VALID
constructor|VALID(
block|)
enum|,
DECL|enumConstant|INVALID
name|INVALID
parameter_list|()
operator|,
DECL|enumConstant|OTHER
constructor|OTHER(
block|)
end_class

begin_function
unit|}      @
name|BeforeClass
DECL|method|setupKerb ()
specifier|public
specifier|static
name|void
name|setupKerb
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.kdc"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.realm"
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|SaslPlainServer
operator|.
name|SecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"---------------------------------"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing QOP:"
operator|+
name|getQOPNames
argument_list|(
name|qop
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"---------------------------------"
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// the specific tests for kerberos will enable kerberos.  forcing it
comment|// for all tests will cause tests to fail if the user has a TGT
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|SIMPLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_RPC_PROTECTION
argument_list|,
name|getQOPNames
argument_list|(
name|qop
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|saslPropertiesResolver
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS
argument_list|,
name|saslPropertiesResolver
argument_list|)
expr_stmt|;
block|}
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|null
expr_stmt|;
name|forceSecretManager
operator|=
literal|null
expr_stmt|;
name|clientFallBackToSimpleAllowed
operator|=
literal|true
expr_stmt|;
comment|// Set RPC engine to protobuf RPC engine
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getQOPNames (QualityOfProtection[] qops)
specifier|static
name|String
name|getQOPNames
parameter_list|(
name|QualityOfProtection
index|[]
name|qops
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QualityOfProtection
name|qop
range|:
name|qops
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|qop
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|<
name|qops
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_static
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|Client
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|Server
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslRpcClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslRpcServer
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslInputStream
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SecurityUtil
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
end_static

begin_class
DECL|class|BadTokenSecretManager
specifier|public
specifier|static
class|class
name|BadTokenSecretManager
extends|extends
name|TestTokenSecretManager
block|{
annotation|@
name|Override
DECL|method|retrievePassword (TestTokenIdentifier id)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|TestTokenIdentifier
name|id
parameter_list|)
throws|throws
name|InvalidToken
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
name|ERROR_MESSAGE
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
DECL|class|CustomSecurityInfo
specifier|public
specifier|static
class|class
name|CustomSecurityInfo
extends|extends
name|SecurityInfo
block|{
annotation|@
name|Override
DECL|method|getKerberosInfo (Class<?> protocol, Configuration conf)
specifier|public
name|KerberosInfo
name|getKerberosInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|KerberosInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|serverPrincipal
parameter_list|()
block|{
return|return
name|SERVER_PRINCIPAL_KEY
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|clientPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getTokenInfo (Class<?> protocol, Configuration conf)
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|TokenInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|value
parameter_list|()
block|{
return|return
name|TestTokenSelector
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_function
annotation|@
name|Test
DECL|method|testDigestRpc ()
specifier|public
name|void
name|testDigestRpc
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testDigestRpcWithoutAnnotation ()
specifier|public
name|void
name|testDigestRpcWithoutAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
try|try
block|{
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|(
operator|new
name|CustomSecurityInfo
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testErrorMessage ()
specifier|public
name|void
name|testErrorMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BadTokenSecretManager
name|sm
init|=
operator|new
name|BadTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RemoteException
argument_list|)
expr_stmt|;
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LOGGING MESSAGE: "
operator|+
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERROR_MESSAGE
argument_list|,
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|re
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|InvalidToken
argument_list|)
expr_stmt|;
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|doDigestRpc (Server server, TestTokenSecretManager sm)
specifier|private
name|void
name|doDigestRpc
parameter_list|(
name|Server
name|server
parameter_list|,
name|TestTokenSecretManager
name|sm
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|addr
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AuthMethod
name|authMethod
init|=
name|convert
argument_list|(
name|proxy
operator|.
name|getAuthMethod
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TOKEN
argument_list|,
name|authMethod
argument_list|)
expr_stmt|;
comment|//QOP must be auth
name|assertEquals
argument_list|(
name|expectedQop
operator|.
name|saslQop
argument_list|,
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxy
argument_list|)
operator|.
name|getSaslQop
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Connection
name|connection
range|:
name|server
operator|.
name|getConnections
argument_list|()
control|)
block|{
comment|// only qop auth should dispose of the sasl server
name|boolean
name|hasServer
init|=
operator|(
name|connection
operator|.
name|saslServer
operator|!=
literal|null
operator|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"qop:"
operator|+
name|expectedQop
operator|+
literal|" hasServer:"
operator|+
name|hasServer
argument_list|,
operator|(
name|expectedQop
operator|==
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|)
operator|^
name|hasServer
argument_list|)
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|n
operator|>
literal|0
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testPingInterval ()
specifier|public
name|void
name|testPingInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|SERVER_PRINCIPAL_1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
comment|// set doPing to true
name|newConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ConnectionId
name|remoteId
init|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|newConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_DEFAULT
argument_list|,
name|remoteId
operator|.
name|getPingInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// set doPing to false
name|newConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|remoteId
operator|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestRpcService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remoteId
operator|.
name|getPingInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testPerConnectionConf ()
specifier|public
name|void
name|testPerConnectionConf
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|5
argument_list|,
name|sm
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy1
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy2
init|=
literal|null
decl_stmt|;
name|TestRpcService
name|proxy3
init|=
literal|null
decl_stmt|;
name|int
name|timeouts
index|[]
init|=
block|{
literal|111222
block|,
literal|3333333
block|}
decl_stmt|;
try|try
block|{
name|newConf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
name|timeouts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|proxy1
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|getAuthMethod
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|ProtobufRpcEngine
operator|.
name|getClient
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ConnectionId
argument_list|>
name|conns
init|=
name|client
operator|.
name|getConnectionIds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// same conf, connection should be re-used
name|proxy2
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|getAuthMethod
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// different conf, new connection should be set up
name|newConf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY
argument_list|,
name|timeouts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|proxy3
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy3
operator|.
name|getAuthMethod
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|2
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now verify the proxies have the correct connection ids and timeouts
name|ConnectionId
index|[]
name|connsArray
init|=
block|{
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxy1
argument_list|)
block|,
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxy2
argument_list|)
block|,
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxy3
argument_list|)
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|connsArray
index|[
literal|0
index|]
argument_list|,
name|connsArray
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connsArray
index|[
literal|0
index|]
operator|.
name|getMaxIdleTime
argument_list|()
argument_list|,
name|timeouts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connsArray
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|connsArray
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|connsArray
index|[
literal|2
index|]
operator|.
name|getMaxIdleTime
argument_list|()
argument_list|,
name|timeouts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// this is dirty, but clear out connection cache for next run
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getConnectionIds
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|proxy1
operator|!=
literal|null
condition|)
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy1
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy2
operator|!=
literal|null
condition|)
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy2
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy3
operator|!=
literal|null
condition|)
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy3
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|testKerberosRpc (String principal, String keytab)
specifier|static
name|void
name|testKerberosRpc
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytab
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_KEYTAB_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|newConf
argument_list|,
name|SERVER_KEYTAB_KEY
argument_list|,
name|SERVER_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
name|TestUserGroupInformation
operator|.
name|verifyLoginMetrics
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"UGI: "
operator|+
name|current
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|newConf
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|(
name|server
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test is successful."
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSaslPlainServer ()
specifier|public
name|void
name|testSaslPlainServer
parameter_list|()
throws|throws
name|IOException
block|{
name|runNegotiation
argument_list|(
operator|new
name|TestPlainCallbacks
operator|.
name|Client
argument_list|(
literal|"user"
argument_list|,
literal|"pass"
argument_list|)
argument_list|,
operator|new
name|TestPlainCallbacks
operator|.
name|Server
argument_list|(
literal|"user"
argument_list|,
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSaslPlainServerBadPassword ()
specifier|public
name|void
name|testSaslPlainServerBadPassword
parameter_list|()
block|{
name|SaslException
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|runNegotiation
argument_list|(
operator|new
name|TestPlainCallbacks
operator|.
name|Client
argument_list|(
literal|"user"
argument_list|,
literal|"pass1"
argument_list|)
argument_list|,
operator|new
name|TestPlainCallbacks
operator|.
name|Server
argument_list|(
literal|"user"
argument_list|,
literal|"pass2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|se
parameter_list|)
block|{
name|e
operator|=
name|se
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"PLAIN auth failed"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"wrong password"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertContains (String expected, String text)
specifier|private
name|void
name|assertContains
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"null text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No {"
operator|+
name|expected
operator|+
literal|"} in {"
operator|+
name|text
operator|+
literal|"}"
argument_list|,
name|text
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|runNegotiation (CallbackHandler clientCbh, CallbackHandler serverCbh)
specifier|private
name|void
name|runNegotiation
parameter_list|(
name|CallbackHandler
name|clientCbh
parameter_list|,
name|CallbackHandler
name|serverCbh
parameter_list|)
throws|throws
name|SaslException
block|{
name|String
name|mechanism
init|=
name|AuthMethod
operator|.
name|PLAIN
operator|.
name|getMechanismName
argument_list|()
decl_stmt|;
name|SaslClient
name|saslClient
init|=
name|Sasl
operator|.
name|createSaslClient
argument_list|(
operator|new
name|String
index|[]
block|{
name|mechanism
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clientCbh
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|saslClient
argument_list|)
expr_stmt|;
name|SaslServer
name|saslServer
init|=
name|Sasl
operator|.
name|createSaslServer
argument_list|(
name|mechanism
argument_list|,
literal|null
argument_list|,
literal|"localhost"
argument_list|,
literal|null
argument_list|,
name|serverCbh
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to find PLAIN server"
argument_list|,
name|saslServer
argument_list|)
expr_stmt|;
name|byte
index|[]
name|response
init|=
name|saslClient
operator|.
name|evaluateChallenge
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|saslClient
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|saslServer
operator|.
name|evaluateResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|saslServer
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|saslServer
operator|.
name|getAuthorizationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
DECL|class|TestPlainCallbacks
specifier|static
class|class
name|TestPlainCallbacks
block|{
DECL|class|Client
specifier|public
specifier|static
class|class
name|Client
implements|implements
name|CallbackHandler
block|{
DECL|field|user
name|String
name|user
init|=
literal|null
decl_stmt|;
DECL|field|password
name|String
name|password
init|=
literal|null
decl_stmt|;
DECL|method|Client (String user, String password)
name|Client
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
operator|(
operator|(
name|NameCallback
operator|)
name|callback
operator|)
operator|.
name|setName
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
operator|(
operator|(
name|PasswordCallback
operator|)
name|callback
operator|)
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL PLAIN Callback"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|Server
specifier|public
specifier|static
class|class
name|Server
implements|implements
name|CallbackHandler
block|{
DECL|field|user
name|String
name|user
init|=
literal|null
decl_stmt|;
DECL|field|password
name|String
name|password
init|=
literal|null
decl_stmt|;
DECL|method|Server (String user, String password)
name|Server
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|UnsupportedCallbackException
throws|,
name|SaslException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|AuthorizeCallback
name|ac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
name|assertEquals
argument_list|(
name|user
argument_list|,
name|nc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
if|if
condition|(
operator|!
name|password
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|pc
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong password"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|AuthorizeCallback
condition|)
block|{
name|ac
operator|=
operator|(
name|AuthorizeCallback
operator|)
name|callback
expr_stmt|;
name|assertEquals
argument_list|(
name|user
argument_list|,
name|ac
operator|.
name|getAuthorizationID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
argument_list|,
name|ac
operator|.
name|getAuthenticationID
argument_list|()
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setAuthorizedID
argument_list|(
name|ac
operator|.
name|getAuthenticationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unsupported SASL PLAIN Callback"
argument_list|)
throw|;
block|}
block|}
name|assertNotNull
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ac
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_decl_stmt
DECL|field|BadToken
specifier|private
specifier|static
name|Pattern
name|BadToken
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*DIGEST-MD5: digest response format violation.*"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|KrbFailed
specifier|private
specifier|static
name|Pattern
name|KrbFailed
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Failed on local exception:.* "
operator|+
literal|"Failed to specify server's Kerberos principal name.*"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|Denied (AuthMethod method)
specifier|private
specifier|static
name|Pattern
name|Denied
parameter_list|(
name|AuthMethod
name|method
parameter_list|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*RemoteException.*AccessControlException.*: "
operator|+
name|method
operator|+
literal|" authentication is not enabled.*"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|No (AuthMethod .... method)
specifier|private
specifier|static
name|Pattern
name|No
parameter_list|(
name|AuthMethod
modifier|...
name|method
parameter_list|)
block|{
name|String
name|methods
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|method
argument_list|,
literal|",\\s*"
argument_list|)
decl_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Failed on local exception:.* "
operator|+
literal|"Client cannot authenticate via:\\["
operator|+
name|methods
operator|+
literal|"\\].*"
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|NoTokenAuth
specifier|private
specifier|static
name|Pattern
name|NoTokenAuth
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*IllegalArgumentException: "
operator|+
literal|"TOKEN authentication requires a secret manager"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|NoFallback
specifier|private
specifier|static
name|Pattern
name|NoFallback
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Failed on local exception:.* "
operator|+
literal|"Server asks us to fall back to SIMPLE auth, "
operator|+
literal|"but this client is configured to only allow secure connections.*"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*    *  simple server    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testSimpleServer ()
specifier|public
name|void
name|testSimpleServer
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
comment|// SASL methods are normally reverted to SIMPLE
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testNoClientFallbackToSimple ()
specifier|public
name|void
name|testNoClientFallbackToSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|clientFallBackToSimpleAllowed
operator|=
literal|false
expr_stmt|;
comment|// tokens are irrelevant w/o secret manager enabled
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
comment|// A secure client must not fallback
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now set server to simple and also force the secret-manager. Now server
comment|// should have both simple and token enabled.
name|forceSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
comment|// A secure client must not fallback
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoFallback
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
comment|// doesn't try SASL
name|assertAuthEquals
argument_list|(
name|Denied
argument_list|(
name|SIMPLE
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|)
argument_list|)
expr_stmt|;
comment|// does try SASL
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSimpleServerWithTokens ()
specifier|public
name|void
name|testSimpleServerWithTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Client not using tokens
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// SASL methods are reverted to SIMPLE
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Use tokens. But tokens are ignored because client is reverted to simple
comment|// due to server not using tokens
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
comment|// server isn't really advertising tokens
name|enableSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
comment|// now the simple server takes tokens
name|forceSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSimpleServerWithInvalidTokens ()
specifier|public
name|void
name|testSimpleServerWithInvalidTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tokens are ignored because client is reverted to simple
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|forceSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    *  token server    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testTokenOnlyServer ()
specifier|public
name|void
name|testTokenOnlyServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// simple client w/o tokens won't try SASL, so server denies
name|assertAuthEquals
argument_list|(
name|Denied
argument_list|(
name|SIMPLE
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testTokenOnlyServerWithTokens ()
specifier|public
name|void
name|testTokenOnlyServerWithTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|false
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoTokenAuth
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoTokenAuth
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testTokenOnlyServerWithInvalidTokens ()
specifier|public
name|void
name|testTokenOnlyServerWithInvalidTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|false
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoTokenAuth
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoTokenAuth
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|TOKEN
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*    * kerberos server    */
end_comment

begin_function
annotation|@
name|Test
DECL|method|testKerberosServer ()
specifier|public
name|void
name|testKerberosServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// doesn't try SASL
name|assertAuthEquals
argument_list|(
name|Denied
argument_list|(
name|SIMPLE
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|)
argument_list|)
expr_stmt|;
comment|// does try SASL
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|TOKEN
argument_list|,
name|KERBEROS
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
comment|// no tgt
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|OTHER
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testKerberosServerWithTokens ()
specifier|public
name|void
name|testKerberosServerWithTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// can use tokens regardless of auth
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|false
expr_stmt|;
comment|// shouldn't even try token because server didn't tell us to
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|KERBEROS
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|VALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testKerberosServerWithInvalidTokens ()
specifier|public
name|void
name|testKerberosServerWithInvalidTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|enableSecretManager
operator|=
literal|false
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|No
argument_list|(
name|KERBEROS
argument_list|)
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
name|UseToken
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// ensure that for all qop settings, client can handle postponed rpc
end_comment

begin_comment
comment|// responses.  basically ensures that the rpc server isn't encrypting
end_comment

begin_comment
comment|// and queueing the responses out of order.
end_comment

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSaslResponseOrdering ()
specifier|public
name|void
name|testSaslResponseOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
name|setupTestServer
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
name|sm
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|clientUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|clientUgi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestRpcService
name|proxy
init|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
try|try
block|{
comment|// queue up a bunch of futures for postponed calls serviced
comment|// in a random order.
name|Future
argument_list|<
name|?
argument_list|>
index|[]
name|futures
init|=
operator|new
name|Future
argument_list|<
name|?
argument_list|>
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|futures
index|[
name|i
index|]
operator|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expect
init|=
literal|"future"
operator|+
name|count
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|String
name|answer
init|=
name|convert
argument_list|(
name|proxy
operator|.
name|echoPostponed
argument_list|(
literal|null
argument_list|,
name|newEchoRequest
argument_list|(
name|expect
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
comment|// ensures the call is initiated and the response is blocked.
name|futures
index|[
name|i
index|]
operator|.
name|get
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
continue|continue;
comment|// expected.
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"future"
operator|+
name|i
operator|+
literal|" did not block"
argument_list|)
expr_stmt|;
block|}
comment|// triggers responses to be unblocked in a random order.  having
comment|// only 1 handler ensures that the prior calls are already
comment|// postponed.  1 handler also ensures that this call will
comment|// timeout if the postponing doesn't work (ie. free up handler)
name|proxy
operator|.
name|sendPostponed
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|futures
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for future"
operator|+
name|i
argument_list|)
expr_stmt|;
name|futures
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// test helpers
end_comment

begin_function
DECL|method|getAuthMethod ( final AuthMethod clientAuth, final AuthMethod serverAuth)
specifier|private
name|String
name|getAuthMethod
parameter_list|(
specifier|final
name|AuthMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthMethod
name|serverAuth
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|internalGetAuthMethod
argument_list|(
name|clientAuth
argument_list|,
name|serverAuth
argument_list|,
name|UseToken
operator|.
name|NONE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Auth method failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_function

begin_function
DECL|method|getAuthMethod ( final AuthMethod clientAuth, final AuthMethod serverAuth, final UseToken tokenType)
specifier|private
name|String
name|getAuthMethod
parameter_list|(
specifier|final
name|AuthMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthMethod
name|serverAuth
parameter_list|,
specifier|final
name|UseToken
name|tokenType
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|internalGetAuthMethod
argument_list|(
name|clientAuth
argument_list|,
name|serverAuth
argument_list|,
name|tokenType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Auth method failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_function

begin_function
DECL|method|internalGetAuthMethod ( final AuthMethod clientAuth, final AuthMethod serverAuth, final UseToken tokenType)
specifier|private
name|String
name|internalGetAuthMethod
parameter_list|(
specifier|final
name|AuthMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthMethod
name|serverAuth
parameter_list|,
specifier|final
name|UseToken
name|tokenType
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|serverConf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|serverAuth
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|serverUgi
init|=
operator|(
name|serverAuth
operator|==
name|KERBEROS
operator|)
condition|?
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"server/localhost@NONE"
argument_list|)
else|:
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"server"
argument_list|)
decl_stmt|;
name|serverUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|serverAuth
argument_list|)
expr_stmt|;
specifier|final
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
name|boolean
name|useSecretManager
init|=
operator|(
name|serverAuth
operator|!=
name|SIMPLE
operator|)
decl_stmt|;
if|if
condition|(
name|enableSecretManager
operator|!=
literal|null
condition|)
block|{
name|useSecretManager
operator|&=
name|enableSecretManager
expr_stmt|;
block|}
if|if
condition|(
name|forceSecretManager
operator|!=
literal|null
condition|)
block|{
name|useSecretManager
operator||=
name|forceSecretManager
expr_stmt|;
block|}
specifier|final
name|SecretManager
argument_list|<
name|?
argument_list|>
name|serverSm
init|=
name|useSecretManager
condition|?
name|sm
else|:
literal|null
decl_stmt|;
name|Server
name|server
init|=
name|serverUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Server
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Server
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|setupTestServer
argument_list|(
name|serverConf
argument_list|,
literal|5
argument_list|,
name|serverSm
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|clientAuth
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY
argument_list|,
name|clientFallBackToSimpleAllowed
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|clientUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|clientAuth
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenType
operator|!=
name|UseToken
operator|.
name|NONE
condition|)
block|{
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|tokenType
condition|)
block|{
case|case
name|VALID
case|:
name|token
operator|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
break|break;
case|case
name|INVALID
case|:
name|token
operator|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"bad-password!"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
break|break;
case|case
name|OTHER
case|:
name|token
operator|=
operator|new
name|Token
argument_list|<>
argument_list|()
expr_stmt|;
break|break;
case|case
name|NONE
case|:
comment|// won't get here
block|}
name|clientUgi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"trying ugi:"
operator|+
name|clientUgi
operator|+
literal|" tokens:"
operator|+
name|clientUgi
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|TestRpcService
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getClient
argument_list|(
name|addr
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the other side thinks we are who we said we are!!!
name|assertEquals
argument_list|(
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|proxy
operator|.
name|getAuthUser
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|AuthMethod
name|authMethod
init|=
name|convert
argument_list|(
name|proxy
operator|.
name|getAuthMethod
argument_list|(
literal|null
argument_list|,
name|newEmptyRequest
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify sasl completed with correct QOP
name|assertEquals
argument_list|(
operator|(
name|authMethod
operator|!=
name|SIMPLE
operator|)
condition|?
name|expectedQop
operator|.
name|saslQop
else|:
literal|null
argument_list|,
name|RPC
operator|.
name|getConnectionIdForProxy
argument_list|(
name|proxy
argument_list|)
operator|.
name|getSaslQop
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|authMethod
operator|!=
literal|null
condition|?
name|authMethod
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RemoteException
condition|)
block|{
throw|throw
operator|(
name|RemoteException
operator|)
name|se
operator|.
name|getCause
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|se
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|se
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|assertAuthEquals (AuthMethod expect, String actual)
specifier|private
specifier|static
name|void
name|assertAuthEquals
parameter_list|(
name|AuthMethod
name|expect
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expect
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertAuthEquals (Pattern expect, String actual)
specifier|private
specifier|static
name|void
name|assertAuthEquals
parameter_list|(
name|Pattern
name|expect
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
comment|// this allows us to see the regexp and the value it didn't match
if|if
condition|(
operator|!
name|expect
operator|.
name|matcher
argument_list|(
name|actual
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
comment|// it failed
block|}
block|}
end_function

begin_comment
comment|/*    * Class used to test overriding QOP values using SaslPropertiesResolver    */
end_comment

begin_class
DECL|class|AuthSaslPropertiesResolver
specifier|static
class|class
name|AuthSaslPropertiesResolver
extends|extends
name|SaslPropertiesResolver
block|{
annotation|@
name|Override
DECL|method|getServerProperties (InetAddress address)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServerProperties
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newPropertes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|getDefaultProperties
argument_list|()
argument_list|)
decl_stmt|;
name|newPropertes
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
name|QualityOfProtection
operator|.
name|AUTHENTICATION
operator|.
name|getSaslQop
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newPropertes
return|;
block|}
block|}
end_class

begin_function
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing Kerberos authentication over RPC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java<options> org.apache.hadoop.ipc.TestSaslRPC "
operator|+
literal|"<serverPrincipal><keytabFile>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|principal
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|keytab
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|testKerberosRpc
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

