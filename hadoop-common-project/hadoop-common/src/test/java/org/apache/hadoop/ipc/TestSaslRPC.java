begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Assertions
operator|.
name|EnabledAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for using Sasl over RPC. */
end_comment

begin_class
DECL|class|TestSaslRPC
specifier|public
class|class
name|TestSaslRPC
block|{
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSaslRPC
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ERROR_MESSAGE
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE
init|=
literal|"Token is invalid"
decl_stmt|;
DECL|field|SERVER_PRINCIPAL_KEY
specifier|static
specifier|final
name|String
name|SERVER_PRINCIPAL_KEY
init|=
literal|"test.ipc.server.principal"
decl_stmt|;
DECL|field|SERVER_KEYTAB_KEY
specifier|static
specifier|final
name|String
name|SERVER_KEYTAB_KEY
init|=
literal|"test.ipc.server.keytab"
decl_stmt|;
DECL|field|SERVER_PRINCIPAL_1
specifier|static
specifier|final
name|String
name|SERVER_PRINCIPAL_1
init|=
literal|"p1/foo@BAR"
decl_stmt|;
DECL|field|SERVER_PRINCIPAL_2
specifier|static
specifier|final
name|String
name|SERVER_PRINCIPAL_2
init|=
literal|"p2/foo@BAR"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|forceSecretManager
specifier|static
name|Boolean
name|forceSecretManager
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupKerb ()
specifier|public
specifier|static
name|void
name|setupKerb
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.kdc"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.realm"
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|forceSecretManager
operator|=
literal|null
expr_stmt|;
block|}
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|Client
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|Server
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslRpcClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslRpcServer
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SaslInputStream
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|SecurityUtil
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
DECL|class|TestTokenIdentifier
specifier|public
specifier|static
class|class
name|TestTokenIdentifier
extends|extends
name|TokenIdentifier
block|{
DECL|field|tokenid
specifier|private
name|Text
name|tokenid
decl_stmt|;
DECL|field|realUser
specifier|private
name|Text
name|realUser
decl_stmt|;
DECL|field|KIND_NAME
specifier|final
specifier|static
name|Text
name|KIND_NAME
init|=
operator|new
name|Text
argument_list|(
literal|"test.token"
argument_list|)
decl_stmt|;
DECL|method|TestTokenIdentifier ()
specifier|public
name|TestTokenIdentifier
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Text
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TestTokenIdentifier (Text tokenid)
specifier|public
name|TestTokenIdentifier
parameter_list|(
name|Text
name|tokenid
parameter_list|)
block|{
name|this
argument_list|(
name|tokenid
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TestTokenIdentifier (Text tokenid, Text realUser)
specifier|public
name|TestTokenIdentifier
parameter_list|(
name|Text
name|tokenid
parameter_list|,
name|Text
name|realUser
parameter_list|)
block|{
name|this
operator|.
name|tokenid
operator|=
name|tokenid
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
name|tokenid
expr_stmt|;
name|this
operator|.
name|realUser
operator|=
name|realUser
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
name|realUser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|KIND_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|UserGroupInformation
name|getUser
parameter_list|()
block|{
if|if
condition|(
name|realUser
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|tokenid
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|UserGroupInformation
name|realUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|realUser
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|tokenid
operator|.
name|toString
argument_list|()
argument_list|,
name|realUgi
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|tokenid
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|realUser
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|tokenid
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|realUser
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestTokenSecretManager
specifier|public
specifier|static
class|class
name|TestTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|TestTokenIdentifier
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createPassword (TestTokenIdentifier id)
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|TestTokenIdentifier
name|id
parameter_list|)
block|{
return|return
name|id
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (TestTokenIdentifier id)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|TestTokenIdentifier
name|id
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|id
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|TestTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|TestTokenIdentifier
argument_list|()
return|;
block|}
block|}
DECL|class|BadTokenSecretManager
specifier|public
specifier|static
class|class
name|BadTokenSecretManager
extends|extends
name|TestTokenSecretManager
block|{
annotation|@
name|Override
DECL|method|retrievePassword (TestTokenIdentifier id)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|TestTokenIdentifier
name|id
parameter_list|)
throws|throws
name|InvalidToken
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
name|ERROR_MESSAGE
argument_list|)
throw|;
block|}
block|}
DECL|class|TestTokenSelector
specifier|public
specifier|static
class|class
name|TestTokenSelector
implements|implements
name|TokenSelector
argument_list|<
name|TestTokenIdentifier
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|selectToken (Text service, Collection<Token<? extends TokenIdentifier>> tokens)
specifier|public
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|selectToken
parameter_list|(
name|Text
name|service
parameter_list|,
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
parameter_list|)
block|{
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|TestTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
operator|&&
name|service
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
operator|)
name|token
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|KerberosInfo
argument_list|(
name|serverPrincipal
operator|=
name|SERVER_PRINCIPAL_KEY
argument_list|)
annotation|@
name|TokenInfo
argument_list|(
name|TestTokenSelector
operator|.
name|class
argument_list|)
DECL|interface|TestSaslProtocol
specifier|public
interface|interface
name|TestSaslProtocol
extends|extends
name|TestRPC
operator|.
name|TestProtocol
block|{
DECL|method|getAuthMethod ()
specifier|public
name|AuthenticationMethod
name|getAuthMethod
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getAuthUser ()
specifier|public
name|String
name|getAuthUser
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|TestSaslImpl
specifier|public
specifier|static
class|class
name|TestSaslImpl
extends|extends
name|TestRPC
operator|.
name|TestImpl
implements|implements
name|TestSaslProtocol
block|{
annotation|@
name|Override
DECL|method|getAuthMethod ()
specifier|public
name|AuthenticationMethod
name|getAuthMethod
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAuthUser ()
specifier|public
name|String
name|getAuthUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
block|}
DECL|class|CustomSecurityInfo
specifier|public
specifier|static
class|class
name|CustomSecurityInfo
extends|extends
name|SecurityInfo
block|{
annotation|@
name|Override
DECL|method|getKerberosInfo (Class<?> protocol, Configuration conf)
specifier|public
name|KerberosInfo
name|getKerberosInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|KerberosInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|serverPrincipal
parameter_list|()
block|{
return|return
name|SERVER_PRINCIPAL_KEY
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|clientPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getTokenInfo (Class<?> protocol, Configuration conf)
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|TokenInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TokenSelector
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|value
parameter_list|()
block|{
return|return
name|TestTokenSelector
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDigestRpc ()
specifier|public
name|void
name|testDigestRpc
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|sm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDigestRpcWithoutAnnotation ()
specifier|public
name|void
name|testDigestRpcWithoutAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
try|try
block|{
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|(
operator|new
name|CustomSecurityInfo
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|sm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SecurityUtil
operator|.
name|setSecurityInfoProviders
argument_list|(
operator|new
name|SecurityInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testErrorMessage ()
specifier|public
name|void
name|testErrorMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|BadTokenSecretManager
name|sm
init|=
operator|new
name|BadTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|sm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doDigestRpc
argument_list|(
name|server
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LOGGING MESSAGE: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERROR_MESSAGE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|unwrapRemoteException
argument_list|()
operator|instanceof
name|InvalidToken
argument_list|)
expr_stmt|;
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|succeeded
argument_list|)
expr_stmt|;
block|}
DECL|method|doDigestRpc (Server server, TestTokenSecretManager sm )
specifier|private
name|void
name|doDigestRpc
parameter_list|(
name|Server
name|server
parameter_list|,
name|TestTokenSecretManager
name|sm
parameter_list|)
throws|throws
name|Exception
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|TestSaslProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//QOP must be auth
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SaslRpcServer
operator|.
name|SASL_PROPS
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|,
literal|"auth"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPingInterval ()
specifier|public
name|void
name|testPingInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|SERVER_PRINCIPAL_1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
comment|// set doPing to true
name|newConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ConnectionId
name|remoteId
init|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestSaslProtocol
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|newConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_PING_INTERVAL_DEFAULT
argument_list|,
name|remoteId
operator|.
name|getPingInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// set doPing to false
name|newConf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IPC_CLIENT_PING_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|remoteId
operator|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestSaslProtocol
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remoteId
operator|.
name|getPingInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRemotePrincipal ()
specifier|public
name|void
name|testGetRemotePrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|SERVER_PRINCIPAL_1
argument_list|)
expr_stmt|;
name|ConnectionId
name|remoteId
init|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestSaslProtocol
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|newConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SERVER_PRINCIPAL_1
argument_list|,
name|remoteId
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
expr_stmt|;
comment|// this following test needs security to be off
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|SIMPLE
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|remoteId
operator|=
name|ConnectionId
operator|.
name|getConnectionId
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestSaslProtocol
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"serverPrincipal should be null when security is turned off"
argument_list|,
literal|null
argument_list|,
name|remoteId
operator|.
name|getServerPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// revert back to security is on
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPerConnectionConf ()
specifier|public
name|void
name|testPerConnectionConf
parameter_list|()
throws|throws
name|Exception
block|{
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|sm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|current
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|current
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"hadoop.rpc.socket.factory.class.default"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|SERVER_PRINCIPAL_1
argument_list|)
expr_stmt|;
name|TestSaslProtocol
name|proxy1
init|=
literal|null
decl_stmt|;
name|TestSaslProtocol
name|proxy2
init|=
literal|null
decl_stmt|;
name|TestSaslProtocol
name|proxy3
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy1
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|getAuthMethod
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
name|WritableRpcEngine
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ConnectionId
argument_list|>
name|conns
init|=
name|client
operator|.
name|getConnectionIds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// same conf, connection should be re-used
name|proxy2
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|getAuthMethod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|1
argument_list|,
name|conns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// different conf, new connection should be set up
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|SERVER_PRINCIPAL_2
argument_list|)
expr_stmt|;
name|proxy3
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy3
operator|.
name|getAuthMethod
argument_list|()
expr_stmt|;
name|ConnectionId
index|[]
name|connsArray
init|=
name|conns
operator|.
name|toArray
argument_list|(
operator|new
name|ConnectionId
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of connections in cache is wrong"
argument_list|,
literal|2
argument_list|,
name|connsArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|p1
init|=
name|connsArray
index|[
literal|0
index|]
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
name|String
name|p2
init|=
name|connsArray
index|[
literal|1
index|]
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"should have different principals"
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"principal not as expected"
argument_list|,
name|p1
operator|.
name|equals
argument_list|(
name|SERVER_PRINCIPAL_1
argument_list|)
operator|||
name|p1
operator|.
name|equals
argument_list|(
name|SERVER_PRINCIPAL_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"principal not as expected"
argument_list|,
name|p2
operator|.
name|equals
argument_list|(
name|SERVER_PRINCIPAL_1
argument_list|)
operator|||
name|p2
operator|.
name|equals
argument_list|(
name|SERVER_PRINCIPAL_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy1
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy2
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy3
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testKerberosRpc (String principal, String keytab)
specifier|static
name|void
name|testKerberosRpc
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytab
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_PRINCIPAL_KEY
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|SERVER_KEYTAB_KEY
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|newConf
argument_list|,
name|SERVER_KEYTAB_KEY
argument_list|,
name|SERVER_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
name|TestUserGroupInformation
operator|.
name|verifyLoginMetrics
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|current
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"UGI: "
operator|+
name|current
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|newConf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestSaslProtocol
name|proxy
init|=
literal|null
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
try|try
block|{
name|proxy
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|newConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test is successful."
argument_list|)
expr_stmt|;
block|}
DECL|field|BadToken
specifier|private
specifier|static
name|Pattern
name|BadToken
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*DIGEST-MD5: digest response format violation.*"
argument_list|)
decl_stmt|;
DECL|field|KrbFailed
specifier|private
specifier|static
name|Pattern
name|KrbFailed
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Failed on local exception:.* "
operator|+
literal|"Failed to specify server's Kerberos principal name.*"
argument_list|)
decl_stmt|;
DECL|field|Denied
specifier|private
specifier|static
name|Pattern
name|Denied
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Authorization .* is enabled .*"
argument_list|)
decl_stmt|;
DECL|field|NoDigest
specifier|private
specifier|static
name|Pattern
name|NoDigest
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*Server is not configured to do DIGEST auth.*"
argument_list|)
decl_stmt|;
comment|/*    *  simple server    */
annotation|@
name|Test
DECL|method|testSimpleServer ()
specifier|public
name|void
name|testSimpleServer
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// SASL methods are reverted to SIMPLE, but test setup fails
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleServerWithTokens ()
specifier|public
name|void
name|testSimpleServerWithTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tokens are ignored because client is reverted to simple
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|forceSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleServerWithInvalidTokens ()
specifier|public
name|void
name|testSimpleServerWithInvalidTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tokens are ignored because client is reverted to simple
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|forceSecretManager
operator|=
literal|true
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|SIMPLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|SIMPLE
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|SIMPLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * kerberos server    */
annotation|@
name|Test
DECL|method|testKerberosServer ()
specifier|public
name|void
name|testKerberosServer
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|Denied
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|KrbFailed
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKerberosServerWithTokens ()
specifier|public
name|void
name|testKerberosServerWithTokens
parameter_list|()
throws|throws
name|Exception
block|{
comment|// can use tokens regardless of auth
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|TOKEN
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't fallback to simple when using kerberos w/o tokens
name|forceSecretManager
operator|=
literal|false
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoDigest
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoDigest
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKerberosServerWithInvalidTokens ()
specifier|public
name|void
name|testKerberosServerWithInvalidTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|BadToken
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|forceSecretManager
operator|=
literal|false
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoDigest
argument_list|,
name|getAuthMethod
argument_list|(
name|SIMPLE
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertAuthEquals
argument_list|(
name|NoDigest
argument_list|,
name|getAuthMethod
argument_list|(
name|KERBEROS
argument_list|,
name|KERBEROS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test helpers
DECL|method|getAuthMethod ( final AuthenticationMethod clientAuth, final AuthenticationMethod serverAuth)
specifier|private
name|String
name|getAuthMethod
parameter_list|(
specifier|final
name|AuthenticationMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthenticationMethod
name|serverAuth
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|internalGetAuthMethod
argument_list|(
name|clientAuth
argument_list|,
name|serverAuth
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|getAuthMethod ( final AuthenticationMethod clientAuth, final AuthenticationMethod serverAuth, final boolean useValidToken)
specifier|private
name|String
name|getAuthMethod
parameter_list|(
specifier|final
name|AuthenticationMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthenticationMethod
name|serverAuth
parameter_list|,
specifier|final
name|boolean
name|useValidToken
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|internalGetAuthMethod
argument_list|(
name|clientAuth
argument_list|,
name|serverAuth
argument_list|,
literal|true
argument_list|,
name|useValidToken
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|internalGetAuthMethod ( final AuthenticationMethod clientAuth, final AuthenticationMethod serverAuth, final boolean useToken, final boolean useValidToken)
specifier|private
name|String
name|internalGetAuthMethod
parameter_list|(
specifier|final
name|AuthenticationMethod
name|clientAuth
parameter_list|,
specifier|final
name|AuthenticationMethod
name|serverAuth
parameter_list|,
specifier|final
name|boolean
name|useToken
parameter_list|,
specifier|final
name|boolean
name|useValidToken
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|serverConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|serverAuth
argument_list|,
name|serverConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|serverConf
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|serverUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|currentUser
operator|+
literal|"-SERVER"
argument_list|)
decl_stmt|;
name|serverUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|serverAuth
argument_list|)
expr_stmt|;
specifier|final
name|TestTokenSecretManager
name|sm
init|=
operator|new
name|TestTokenSecretManager
argument_list|()
decl_stmt|;
name|boolean
name|useSecretManager
init|=
operator|(
name|serverAuth
operator|!=
name|SIMPLE
operator|)
decl_stmt|;
if|if
condition|(
name|forceSecretManager
operator|!=
literal|null
condition|)
block|{
name|useSecretManager
operator|&=
name|forceSecretManager
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SecretManager
argument_list|<
name|?
argument_list|>
name|serverSm
init|=
name|useSecretManager
condition|?
name|sm
else|:
literal|null
decl_stmt|;
name|Server
name|server
init|=
name|serverUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Server
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Server
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|Server
name|server
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|serverConf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
operator|new
name|TestSaslImpl
argument_list|()
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|ADDRESS
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
literal|5
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|serverSm
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|clientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|clientAuth
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|clientConf
argument_list|)
expr_stmt|;
specifier|final
name|UserGroupInformation
name|clientUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|currentUser
operator|+
literal|"-CLIENT"
argument_list|)
decl_stmt|;
name|clientUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|clientAuth
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|useToken
condition|)
block|{
name|TestTokenIdentifier
name|tokenId
init|=
operator|new
name|TestTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
name|token
init|=
name|useValidToken
condition|?
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
argument_list|,
name|sm
argument_list|)
else|:
operator|new
name|Token
argument_list|<
name|TestTokenIdentifier
argument_list|>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"bad-password!"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getKind
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|clientUgi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|clientUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|TestSaslProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
operator|(
name|TestSaslProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|TestSaslProtocol
operator|.
name|class
argument_list|,
name|TestSaslProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|ping
argument_list|()
expr_stmt|;
comment|// verify sasl completed
if|if
condition|(
name|serverAuth
operator|!=
name|SIMPLE
condition|)
block|{
name|assertEquals
argument_list|(
name|SaslRpcServer
operator|.
name|SASL_PROPS
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|,
literal|"auth"
argument_list|)
expr_stmt|;
block|}
comment|// make sure the other side thinks we are who we said we are!!!
name|assertEquals
argument_list|(
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|proxy
operator|.
name|getAuthUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|proxy
operator|.
name|getAuthMethod
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
return|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertAuthEquals (AuthenticationMethod expect, String actual)
specifier|private
specifier|static
name|void
name|assertAuthEquals
parameter_list|(
name|AuthenticationMethod
name|expect
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expect
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAuthEquals (Pattern expect, String actual)
specifier|private
specifier|static
name|void
name|assertAuthEquals
parameter_list|(
name|Pattern
name|expect
parameter_list|,
name|String
name|actual
parameter_list|)
block|{
comment|// this allows us to see the regexp and the value it didn't match
if|if
condition|(
operator|!
name|expect
operator|.
name|matcher
argument_list|(
name|actual
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// it failed
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// it matched
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing Kerberos authentication over RPC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java<options> org.apache.hadoop.ipc.TestSaslRPC "
operator|+
literal|"<serverPrincipal><keytabFile>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|principal
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|keytab
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|testKerberosRpc
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

