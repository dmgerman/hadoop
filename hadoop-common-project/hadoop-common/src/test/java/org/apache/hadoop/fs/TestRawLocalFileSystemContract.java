begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test filesystem contracts with {@link RawLocalFileSystem}.  * Root directory related tests from super class will work into target  * directory since we have no permission to write / on local filesystem.  */
end_comment

begin_class
DECL|class|TestRawLocalFileSystemContract
specifier|public
class|class
name|TestRawLocalFileSystemContract
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRawLocalFileSystemContract
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRawFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Actually rename is supported in RawLocalFileSystem but    * it works different as the other filesystems. Short term we do not test it.    * Please check HADOOP-13082.    * @return true if rename supported so rename related tests will run    */
annotation|@
name|Override
DECL|method|renameSupported ()
specifier|protected
name|boolean
name|renameSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultWorkingDirectory ()
specifier|public
name|String
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|path (String pathString)
specifier|protected
name|Path
name|path
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
comment|// For testWorkingDirectory
if|if
condition|(
name|pathString
operator|.
name|equals
argument_list|(
name|getDefaultWorkingDirectory
argument_list|()
argument_list|)
operator|||
name|pathString
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|pathString
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|path
argument_list|(
name|pathString
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|pathString
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|filesystemIsCaseSensitive ()
specifier|protected
name|boolean
name|filesystemIsCaseSensitive
parameter_list|()
block|{
return|return
operator|!
operator|(
name|Shell
operator|.
name|WINDOWS
operator|||
name|Shell
operator|.
name|MAC
operator|)
return|;
block|}
block|}
end_class

end_unit

