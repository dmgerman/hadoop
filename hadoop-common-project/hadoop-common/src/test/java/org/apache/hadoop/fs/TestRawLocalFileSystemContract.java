begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|StatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test filesystem contracts with {@link RawLocalFileSystem}.  * Root directory related tests from super class will work into target  * directory since we have no permission to write / on local filesystem.  */
end_comment

begin_class
DECL|class|TestRawLocalFileSystemContract
specifier|public
class|class
name|TestRawLocalFileSystemContract
extends|extends
name|FileSystemContractBaseTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRawLocalFileSystemContract
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_BASE_DIR
specifier|private
specifier|final
specifier|static
name|Path
name|TEST_BASE_DIR
init|=
operator|new
name|Path
argument_list|(
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRawFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Actually rename is supported in RawLocalFileSystem but    * it works different as the other filesystems. Short term we do not test it.    * Please check HADOOP-13082.    * @return true if rename supported so rename related tests will run    */
annotation|@
name|Override
DECL|method|renameSupported ()
specifier|protected
name|boolean
name|renameSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Disabling testing root operation.    *    * Writing to root directory on the local file system may get permission    * denied exception, or even worse, delete/overwrite files accidentally.    */
annotation|@
name|Override
DECL|method|rootDirTestEnabled ()
specifier|protected
name|boolean
name|rootDirTestEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultWorkingDirectory ()
specifier|public
name|String
name|getDefaultWorkingDirectory
parameter_list|()
block|{
return|return
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTestBaseDir ()
specifier|protected
name|Path
name|getTestBaseDir
parameter_list|()
block|{
return|return
name|TEST_BASE_DIR
return|;
block|}
annotation|@
name|Override
DECL|method|filesystemIsCaseSensitive ()
specifier|protected
name|boolean
name|filesystemIsCaseSensitive
parameter_list|()
block|{
return|return
operator|!
operator|(
name|Shell
operator|.
name|WINDOWS
operator|||
name|Shell
operator|.
name|MAC
operator|)
return|;
block|}
comment|// cross-check getPermission using both native/non-native
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testPermission ()
specifier|public
name|void
name|testPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testDir
init|=
name|getTestBaseDir
argument_list|()
decl_stmt|;
name|String
name|testFilename
init|=
literal|"teststat2File"
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|testFilename
argument_list|)
decl_stmt|;
name|RawLocalFileSystem
name|rfs
init|=
operator|new
name|RawLocalFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rfs
operator|.
name|initialize
argument_list|(
name|rfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rfs
operator|.
name|createNewFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|rfs
operator|.
name|pathToFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|long
name|defaultBlockSize
init|=
name|rfs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|//
comment|// test initial permission
comment|//
name|RawLocalFileSystem
operator|.
name|DeprecatedRawLocalFileStatus
name|fsNIO
init|=
operator|new
name|RawLocalFileSystem
operator|.
name|DeprecatedRawLocalFileStatus
argument_list|(
name|file
argument_list|,
name|defaultBlockSize
argument_list|,
name|rfs
argument_list|)
decl_stmt|;
name|fsNIO
operator|.
name|loadPermissionInfoByNativeIO
argument_list|()
expr_stmt|;
name|RawLocalFileSystem
operator|.
name|DeprecatedRawLocalFileStatus
name|fsnonNIO
init|=
operator|new
name|RawLocalFileSystem
operator|.
name|DeprecatedRawLocalFileStatus
argument_list|(
name|file
argument_list|,
name|defaultBlockSize
argument_list|,
name|rfs
argument_list|)
decl_stmt|;
name|fsnonNIO
operator|.
name|loadPermissionInfoByNonNativeIO
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"owner: {}, group: {}, permission: {}, isSticky: {}"
argument_list|,
name|fsNIO
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fsNIO
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// test normal chmod - no sticky bit
comment|//
name|StatUtils
operator|.
name|setPermissionFromProcess
argument_list|(
literal|"644"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fsNIO
operator|.
name|loadPermissionInfoByNativeIO
argument_list|()
expr_stmt|;
name|fsnonNIO
operator|.
name|loadPermissionInfoByNonNativeIO
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|644
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// test sticky bit
comment|// unfortunately, cannot be done in Windows environments
comment|//
if|if
condition|(
operator|!
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|//
comment|// add sticky bit
comment|//
name|StatUtils
operator|.
name|setPermissionFromProcess
argument_list|(
literal|"1644"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fsNIO
operator|.
name|loadPermissionInfoByNativeIO
argument_list|()
expr_stmt|;
name|fsnonNIO
operator|.
name|loadPermissionInfoByNonNativeIO
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1644
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// remove sticky bit
comment|//
name|StatUtils
operator|.
name|setPermissionFromProcess
argument_list|(
literal|"-t"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fsNIO
operator|.
name|loadPermissionInfoByNativeIO
argument_list|()
expr_stmt|;
name|fsnonNIO
operator|.
name|loadPermissionInfoByNonNativeIO
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|fsNIO
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|644
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|toOctal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|fsNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|fsnonNIO
operator|.
name|getPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

