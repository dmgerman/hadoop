begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test to make sure df can run and work.  */
end_comment

begin_class
DECL|class|TestDFCachingGetSpaceUsed
specifier|public
class|class
name|TestDFCachingGetSpaceUsed
block|{
DECL|field|DF_DIR
specifier|final
specifier|static
specifier|private
name|File
name|DF_DIR
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
literal|"testdfspace"
argument_list|)
decl_stmt|;
DECL|field|FILE_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|FILE_SIZE
init|=
literal|1024
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|DF_DIR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DF_DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|DF_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanBuildRun ()
specifier|public
name|void
name|testCanBuildRun
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
name|writeFile
argument_list|(
literal|"testCanBuild"
argument_list|)
decl_stmt|;
name|GetSpaceUsed
name|instance
init|=
operator|new
name|CachingGetSpaceUsed
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
name|file
argument_list|)
operator|.
name|setInterval
argument_list|(
literal|50060
argument_list|)
operator|.
name|setKlass
argument_list|(
name|DFCachingGetSpaceUsed
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|instanceof
name|DFCachingGetSpaceUsed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|getUsed
argument_list|()
operator|>=
name|FILE_SIZE
operator|-
literal|20
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DFCachingGetSpaceUsed
operator|)
name|instance
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeFile (String fileName)
specifier|private
name|File
name|writeFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|DF_DIR
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|randomAccessFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|f
argument_list|,
literal|"rws"
argument_list|)
decl_stmt|;
name|randomAccessFile
operator|.
name|writeUTF
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
name|FILE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|randomAccessFile
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|randomAccessFile
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
end_class

end_unit

