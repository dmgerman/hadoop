begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|HadoopTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LambdaUtils
import|;
end_import

begin_comment
comment|/**  * Test behavior of {@link FutureIOSupport}, especially "what thread do things  * happen in?".  */
end_comment

begin_class
DECL|class|TestFutureIO
specifier|public
class|class
name|TestFutureIO
extends|extends
name|HadoopTestBase
block|{
DECL|field|local
specifier|private
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|local
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|local
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple eval is blocking and executes in the same thread.    */
annotation|@
name|Test
DECL|method|testEvalInCurrentThread ()
specifier|public
name|void
name|testEvalInCurrentThread
parameter_list|()
throws|throws
name|Throwable
block|{
name|CompletableFuture
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Integer
argument_list|>
name|eval
init|=
name|LambdaUtils
operator|.
name|eval
argument_list|(
name|result
argument_list|,
parameter_list|()
lambda|->
block|{
return|return
name|getLocal
argument_list|()
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Thread local value"
argument_list|,
literal|3
argument_list|,
name|getLocalValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Evaluated Value"
argument_list|,
literal|3
argument_list|,
name|eval
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A supply async call runs things in a shared thread pool.    */
annotation|@
name|Test
DECL|method|testEvalAsync ()
specifier|public
name|void
name|testEvalAsync
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|Integer
argument_list|>
name|eval
init|=
name|CompletableFuture
operator|.
name|supplyAsync
argument_list|(
parameter_list|()
lambda|->
name|getLocal
argument_list|()
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Thread local value"
argument_list|,
literal|1
argument_list|,
name|getLocalValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Evaluated Value"
argument_list|,
literal|3
argument_list|,
name|eval
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocal ()
specifier|protected
name|AtomicInteger
name|getLocal
parameter_list|()
block|{
return|return
name|local
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getLocalValue ()
specifier|protected
name|int
name|getLocalValue
parameter_list|()
block|{
return|return
name|local
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

