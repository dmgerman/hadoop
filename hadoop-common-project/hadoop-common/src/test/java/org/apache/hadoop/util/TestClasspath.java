begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests covering the classpath command-line utility.  */
end_comment

begin_class
DECL|class|TestClasspath
specifier|public
class|class
name|TestClasspath
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClasspath
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"TestClasspath"
argument_list|)
decl_stmt|;
DECL|field|UTF8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
static|static
block|{
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
block|}
DECL|field|oldStdout
DECL|field|oldStderr
specifier|private
name|PrintStream
name|oldStdout
decl_stmt|,
name|oldStderr
decl_stmt|;
DECL|field|stdout
DECL|field|stderr
specifier|private
name|ByteArrayOutputStream
name|stdout
decl_stmt|,
name|stderr
decl_stmt|;
DECL|field|printStdout
DECL|field|printStderr
specifier|private
name|PrintStream
name|printStdout
decl_stmt|,
name|printStderr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|oldStdout
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|oldStderr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|stdout
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|printStdout
operator|=
operator|new
name|PrintStream
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|printStdout
argument_list|)
expr_stmt|;
name|stderr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|printStderr
operator|=
operator|new
name|PrintStream
argument_list|(
name|stderr
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|printStderr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldStdout
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldStderr
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|printStdout
argument_list|,
name|printStderr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlob ()
specifier|public
name|void
name|testGlob
parameter_list|()
block|{
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--glob"
block|}
argument_list|)
expr_stmt|;
name|String
name|strOut
init|=
operator|new
name|String
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
argument_list|,
name|strOut
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJar ()
specifier|public
name|void
name|testJar
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"classpath.jar"
argument_list|)
decl_stmt|;
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--jar"
block|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertJar
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJarReplace ()
specifier|public
name|void
name|testJarReplace
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Run the command twice with the same output jar file, and expect success.
name|testJar
argument_list|()
expr_stmt|;
name|testJar
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJarFileMissing ()
specifier|public
name|void
name|testJarFileMissing
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--jar"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|strErr
init|=
operator|new
name|String
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|strErr
operator|.
name|contains
argument_list|(
literal|"requires path of jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHelp ()
specifier|public
name|void
name|testHelp
parameter_list|()
block|{
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--help"
block|}
argument_list|)
expr_stmt|;
name|String
name|strOut
init|=
operator|new
name|String
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|strOut
operator|.
name|contains
argument_list|(
literal|"Prints the classpath"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHelpShort ()
specifier|public
name|void
name|testHelpShort
parameter_list|()
block|{
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
argument_list|)
expr_stmt|;
name|String
name|strOut
init|=
operator|new
name|String
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|strOut
operator|.
name|contains
argument_list|(
literal|"Prints the classpath"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnrecognized ()
specifier|public
name|void
name|testUnrecognized
parameter_list|()
block|{
try|try
block|{
name|Classpath
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--notarealoption"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected exit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|stdout
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|strErr
init|=
operator|new
name|String
argument_list|(
name|stderr
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|strErr
operator|.
name|contains
argument_list|(
literal|"unrecognized option"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that the specified file is a jar file with a manifest containing a    * non-empty classpath attribute.    *    * @param file File to check    * @throws IOException if there is an I/O error    */
DECL|method|assertJar (File file)
specifier|private
specifier|static
name|void
name|assertJar
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|JarFile
name|jarFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jarFile
operator|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Manifest
name|manifest
init|=
name|jarFile
operator|.
name|getManifest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|Attributes
name|mainAttributes
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|mainAttributes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mainAttributes
operator|.
name|containsKey
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|CLASS_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|classPathAttr
init|=
name|mainAttributes
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|CLASS_PATH
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|classPathAttr
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|classPathAttr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// It's too bad JarFile doesn't implement Closeable.
if|if
condition|(
name|jarFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|jarFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exception closing jarFile: "
operator|+
name|jarFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

