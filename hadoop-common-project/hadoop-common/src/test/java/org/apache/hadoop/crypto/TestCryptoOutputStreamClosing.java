begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.crypto
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * To test proper closing of underlying stream of CryptoOutputStream.  */
end_comment

begin_class
DECL|class|TestCryptoOutputStreamClosing
specifier|public
class|class
name|TestCryptoOutputStreamClosing
block|{
DECL|field|codec
specifier|private
specifier|static
name|CryptoCodec
name|codec
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|codec
operator|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputStreamClosing ()
specifier|public
name|void
name|testOutputStreamClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|outputStream
init|=
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|CryptoOutputStream
name|cos
init|=
operator|new
name|CryptoOutputStream
argument_list|(
name|outputStream
argument_list|,
name|codec
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
literal|0L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|outputStream
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutputStreamNotClosing ()
specifier|public
name|void
name|testOutputStreamNotClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|outputStream
init|=
name|mock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|CryptoOutputStream
name|cos
init|=
operator|new
name|CryptoOutputStream
argument_list|(
name|outputStream
argument_list|,
name|codec
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
operator|new
name|byte
index|[
literal|16
index|]
argument_list|,
literal|0L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|outputStream
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

