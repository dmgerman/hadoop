begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressDecompressTester
operator|.
name|CompressionTestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
operator|.
name|Lz4Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|lz4
operator|.
name|Lz4Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|snappy
operator|.
name|SnappyDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInZlibDeflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|BuiltInZlibInflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**   * Test for pairs:  *<pre>  * SnappyCompressor/SnappyDecompressor  * Lz4Compressor/Lz4Decompressor  * BuiltInZlibDeflater/new BuiltInZlibInflater  *  *  * Note: we can't use ZlibCompressor/ZlibDecompressor here   * because his constructor can throw exception (if native libraries not found)  * For ZlibCompressor/ZlibDecompressor pair testing used {@code TestZlibCompressorDecompressor}     *  *</pre>  *  */
end_comment

begin_class
DECL|class|TestCompressorDecompressor
specifier|public
class|class
name|TestCompressorDecompressor
block|{
DECL|field|rnd
specifier|private
specifier|static
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
literal|12345L
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCompressorDecompressor ()
specifier|public
name|void
name|testCompressorDecompressor
parameter_list|()
block|{
comment|// no more for this data
name|int
name|SIZE
init|=
literal|44
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|rawData
init|=
name|generate
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
try|try
block|{
name|CompressDecompressTester
operator|.
name|of
argument_list|(
name|rawData
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|SnappyCompressor
argument_list|()
argument_list|,
operator|new
name|SnappyDecompressor
argument_list|()
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|Lz4Compressor
argument_list|()
argument_list|,
operator|new
name|Lz4Decompressor
argument_list|()
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|BuiltInZlibDeflater
argument_list|()
argument_list|,
operator|new
name|BuiltInZlibInflater
argument_list|()
argument_list|)
operator|.
name|withTestCases
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_SINGLE_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_ERRORS
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
argument_list|)
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"testCompressorDecompressor error !!!"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompressorDecompressorWithExeedBufferLimit ()
specifier|public
name|void
name|testCompressorDecompressorWithExeedBufferLimit
parameter_list|()
block|{
name|int
name|BYTE_SIZE
init|=
literal|100
operator|*
literal|1024
decl_stmt|;
name|byte
index|[]
name|rawData
init|=
name|generate
argument_list|(
name|BYTE_SIZE
argument_list|)
decl_stmt|;
try|try
block|{
name|CompressDecompressTester
operator|.
name|of
argument_list|(
name|rawData
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|SnappyCompressor
argument_list|(
name|BYTE_SIZE
operator|+
name|BYTE_SIZE
operator|/
literal|2
argument_list|)
argument_list|,
operator|new
name|SnappyDecompressor
argument_list|(
name|BYTE_SIZE
operator|+
name|BYTE_SIZE
operator|/
literal|2
argument_list|)
argument_list|)
operator|.
name|withCompressDecompressPair
argument_list|(
operator|new
name|Lz4Compressor
argument_list|(
name|BYTE_SIZE
argument_list|)
argument_list|,
operator|new
name|Lz4Decompressor
argument_list|(
name|BYTE_SIZE
argument_list|)
argument_list|)
operator|.
name|withTestCases
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_SINGLE_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_BLOCK
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_ERRORS
argument_list|,
name|CompressionTestStrategy
operator|.
name|COMPRESS_DECOMPRESS_WITH_EMPTY_STREAM
argument_list|)
argument_list|)
operator|.
name|test
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"testCompressorDecompressorWithExeedBufferLimit error !!!"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generate (int size)
specifier|public
specifier|static
name|byte
index|[]
name|generate
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|array
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|rnd
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
block|}
end_class

end_unit

