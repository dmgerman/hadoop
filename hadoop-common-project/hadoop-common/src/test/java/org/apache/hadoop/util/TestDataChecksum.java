begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestDataChecksum
specifier|public
class|class
name|TestDataChecksum
block|{
comment|// Set up buffers that have some header and trailer before the
comment|// actual data or checksums, to make sure the code handles
comment|// buffer.position(), limit, etc correctly.
DECL|field|SUMS_OFFSET_IN_BUFFER
specifier|private
specifier|static
specifier|final
name|int
name|SUMS_OFFSET_IN_BUFFER
init|=
literal|3
decl_stmt|;
DECL|field|DATA_OFFSET_IN_BUFFER
specifier|private
specifier|static
specifier|final
name|int
name|DATA_OFFSET_IN_BUFFER
init|=
literal|3
decl_stmt|;
DECL|field|DATA_TRAILER_IN_BUFFER
specifier|private
specifier|static
specifier|final
name|int
name|DATA_TRAILER_IN_BUFFER
init|=
literal|3
decl_stmt|;
DECL|field|BYTES_PER_CHUNK
specifier|private
specifier|static
specifier|final
name|int
name|BYTES_PER_CHUNK
init|=
literal|512
decl_stmt|;
DECL|field|CHECKSUM_TYPES
specifier|private
specifier|static
specifier|final
name|int
name|CHECKSUM_TYPES
index|[]
init|=
operator|new
name|int
index|[]
block|{
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
block|,
name|DataChecksum
operator|.
name|CHECKSUM_CRC32C
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testBulkOps ()
specifier|public
name|void
name|testBulkOps
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|type
range|:
name|CHECKSUM_TYPES
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"---- beginning tests with checksum type "
operator|+
name|type
operator|+
literal|"----"
argument_list|)
expr_stmt|;
name|DataChecksum
name|checksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|type
argument_list|,
name|BYTES_PER_CHUNK
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|useDirect
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|doBulkTest
argument_list|(
name|checksum
argument_list|,
literal|1023
argument_list|,
name|useDirect
argument_list|)
expr_stmt|;
name|doBulkTest
argument_list|(
name|checksum
argument_list|,
literal|1024
argument_list|,
name|useDirect
argument_list|)
expr_stmt|;
name|doBulkTest
argument_list|(
name|checksum
argument_list|,
literal|1025
argument_list|,
name|useDirect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doBulkTest (DataChecksum checksum, int dataLength, boolean useDirect)
specifier|private
name|void
name|doBulkTest
parameter_list|(
name|DataChecksum
name|checksum
parameter_list|,
name|int
name|dataLength
parameter_list|,
name|boolean
name|useDirect
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Testing bulk checksums of length "
operator|+
name|dataLength
operator|+
literal|" with "
operator|+
operator|(
name|useDirect
condition|?
literal|"direct"
else|:
literal|"array-backed"
operator|)
operator|+
literal|" buffers"
argument_list|)
expr_stmt|;
name|int
name|numSums
init|=
operator|(
name|dataLength
operator|-
literal|1
operator|)
operator|/
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|sumsLength
init|=
name|numSums
operator|*
name|checksum
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|dataLength
operator|+
name|DATA_OFFSET_IN_BUFFER
operator|+
name|DATA_TRAILER_IN_BUFFER
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteBuffer
name|dataBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|,
name|DATA_OFFSET_IN_BUFFER
argument_list|,
name|dataLength
argument_list|)
decl_stmt|;
name|byte
name|checksums
index|[]
init|=
operator|new
name|byte
index|[
name|SUMS_OFFSET_IN_BUFFER
operator|+
name|sumsLength
index|]
decl_stmt|;
name|ByteBuffer
name|checksumBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|checksums
argument_list|,
name|SUMS_OFFSET_IN_BUFFER
argument_list|,
name|sumsLength
argument_list|)
decl_stmt|;
comment|// Swap out for direct buffers if requested.
if|if
condition|(
name|useDirect
condition|)
block|{
name|dataBuf
operator|=
name|directify
argument_list|(
name|dataBuf
argument_list|)
expr_stmt|;
name|checksumBuf
operator|=
name|directify
argument_list|(
name|checksumBuf
argument_list|)
expr_stmt|;
block|}
comment|// calculate real checksum, make sure it passes
name|checksum
operator|.
name|calculateChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|,
literal|"fake file"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Change a byte in the header and in the trailer, make sure
comment|// it doesn't affect checksum result
name|corruptBufferOffset
argument_list|(
name|checksumBuf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|,
literal|"fake file"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|corruptBufferOffset
argument_list|(
name|dataBuf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dataBuf
operator|.
name|limit
argument_list|(
name|dataBuf
operator|.
name|limit
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|corruptBufferOffset
argument_list|(
name|dataBuf
argument_list|,
name|dataLength
operator|+
name|DATA_OFFSET_IN_BUFFER
argument_list|)
expr_stmt|;
name|dataBuf
operator|.
name|limit
argument_list|(
name|dataBuf
operator|.
name|limit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|,
literal|"fake file"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make sure bad checksums fail - error at beginning of array
name|corruptBufferOffset
argument_list|(
name|checksumBuf
argument_list|,
name|SUMS_OFFSET_IN_BUFFER
argument_list|)
expr_stmt|;
try|try
block|{
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|,
literal|"fake file"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw on bad checksums"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ce
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ce
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure bad checksums fail - error at end of array
name|uncorruptBufferOffset
argument_list|(
name|checksumBuf
argument_list|,
name|SUMS_OFFSET_IN_BUFFER
argument_list|)
expr_stmt|;
name|corruptBufferOffset
argument_list|(
name|checksumBuf
argument_list|,
name|SUMS_OFFSET_IN_BUFFER
operator|+
name|sumsLength
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuf
argument_list|,
name|checksumBuf
argument_list|,
literal|"fake file"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw on bad checksums"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ce
parameter_list|)
block|{
name|int
name|expectedPos
init|=
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
operator|*
operator|(
name|numSums
operator|-
literal|1
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPos
argument_list|,
name|ce
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ce
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fake file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEquality ()
specifier|public
name|void
name|testEquality
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
operator|.
name|equals
argument_list|(
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|1024
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
operator|.
name|equals
argument_list|(
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32C
argument_list|,
literal|512
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"DataChecksum(type=CRC32, chunkSize=512)"
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_CRC32
argument_list|,
literal|512
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|corruptBufferOffset (ByteBuffer buf, int offset)
specifier|private
specifier|static
name|void
name|corruptBufferOffset
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|buf
operator|.
name|put
argument_list|(
name|offset
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|buf
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|uncorruptBufferOffset (ByteBuffer buf, int offset)
specifier|private
specifier|static
name|void
name|uncorruptBufferOffset
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|buf
operator|.
name|put
argument_list|(
name|offset
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|buf
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|directify (ByteBuffer dataBuf)
specifier|private
specifier|static
name|ByteBuffer
name|directify
parameter_list|(
name|ByteBuffer
name|dataBuf
parameter_list|)
block|{
name|ByteBuffer
name|newBuf
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|dataBuf
operator|.
name|capacity
argument_list|()
argument_list|)
decl_stmt|;
name|newBuf
operator|.
name|position
argument_list|(
name|dataBuf
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|newBuf
operator|.
name|mark
argument_list|()
expr_stmt|;
name|newBuf
operator|.
name|put
argument_list|(
name|dataBuf
argument_list|)
expr_stmt|;
name|newBuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|newBuf
operator|.
name|limit
argument_list|(
name|dataBuf
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newBuf
return|;
block|}
block|}
end_class

end_unit

