begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
operator|.
name|QualifiedHostResolver
import|;
end_import

begin_comment
comment|/**  * provides a dummy dns search resolver with a configurable search path  * and host mapping  */
end_comment

begin_class
DECL|class|NetUtilsTestResolver
specifier|public
class|class
name|NetUtilsTestResolver
extends|extends
name|QualifiedHostResolver
block|{
DECL|field|resolvedHosts
name|Map
argument_list|<
name|String
argument_list|,
name|InetAddress
argument_list|>
name|resolvedHosts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InetAddress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|hostSearches
name|List
argument_list|<
name|String
argument_list|>
name|hostSearches
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|install ()
specifier|public
specifier|static
name|NetUtilsTestResolver
name|install
parameter_list|()
block|{
name|NetUtilsTestResolver
name|resolver
init|=
operator|new
name|NetUtilsTestResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSearchDomains
argument_list|(
literal|"a.b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addResolvedHost
argument_list|(
literal|"host.a.b."
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addResolvedHost
argument_list|(
literal|"b-host.b."
argument_list|,
literal|"2.2.2.2"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addResolvedHost
argument_list|(
literal|"simple."
argument_list|,
literal|"3.3.3.3"
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|hostResolver
operator|=
name|resolver
expr_stmt|;
return|return
name|resolver
return|;
block|}
DECL|method|addResolvedHost (String host, String ip)
specifier|public
name|void
name|addResolvedHost
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|ip
parameter_list|)
block|{
name|InetAddress
name|addr
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|addr
operator|=
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|host
argument_list|,
name|addr
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"not an ip:"
operator|+
name|ip
argument_list|)
throw|;
block|}
name|resolvedHosts
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInetAddressByName (String host)
specifier|public
name|InetAddress
name|getInetAddressByName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|hostSearches
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resolvedHosts
operator|.
name|containsKey
argument_list|(
name|host
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
name|host
argument_list|)
throw|;
block|}
return|return
name|resolvedHosts
operator|.
name|get
argument_list|(
name|host
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByExactName (String host)
specifier|public
name|InetAddress
name|getByExactName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
return|return
name|super
operator|.
name|getByExactName
argument_list|(
name|host
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByNameWithSearch (String host)
specifier|public
name|InetAddress
name|getByNameWithSearch
parameter_list|(
name|String
name|host
parameter_list|)
block|{
return|return
name|super
operator|.
name|getByNameWithSearch
argument_list|(
name|host
argument_list|)
return|;
block|}
DECL|method|getHostSearches ()
specifier|public
name|String
index|[]
name|getHostSearches
parameter_list|()
block|{
return|return
name|hostSearches
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|hostSearches
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

